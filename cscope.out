cscope 15 $HOME/practice/nginx/src/nginx-1.15.2 -q 0000009806 0003847385
	@objs/ngx_auto_config.h

1 
	#NGX_CONFIGURE
 ""

	)

3 #i‚de‡
NGX_COMPILER


4 
	#NGX_COMPILER
 "˛™g 9.0.0 (˛™g-900.0.39.2)"

	)

8 #i‚de‡
NGX_HAVE_GCC_ATOMIC


9 
	#NGX_HAVE_GCC_ATOMIC
 1

	)

13 #i‚de‡
NGX_HAVE_C99_VARIADIC_MACROS


14 
	#NGX_HAVE_C99_VARIADIC_MACROS
 1

	)

18 #i‚de‡
NGX_HAVE_GCC_VARIADIC_MACROS


19 
	#NGX_HAVE_GCC_VARIADIC_MACROS
 1

	)

23 #i‚de‡
NGX_HAVE_GCC_BSWAP64


24 
	#NGX_HAVE_GCC_BSWAP64
 1

	)

28 #i‚de‡
NGX_HAVE_KQUEUE


29 
	#NGX_HAVE_KQUEUE
 1

	)

33 #i‚de‡
NGX_HAVE_CLEAR_EVENT


34 
	#NGX_HAVE_CLEAR_EVENT
 1

	)

38 #i‚de‡
NGX_HAVE_TIMER_EVENT


39 
	#NGX_HAVE_TIMER_EVENT
 1

	)

43 #i‚de‡
NGX_HAVE_SENDFILE


44 
	#NGX_HAVE_SENDFILE
 1

	)

48 #i‚de‡
NGX_DARWIN_ATOMIC


49 
	#NGX_DARWIN_ATOMIC
 1

	)

53 #i‚de‡
NGX_HAVE_NONALIGNED


54 
	#NGX_HAVE_NONALIGNED
 1

	)

58 #i‚de‡
NGX_CPU_CACHE_LINE


59 
	#NGX_CPU_CACHE_LINE
 64

	)

63 
	#NGX_KQUEUE_UDATA_T
 (*)

	)

66 #i‚de‡
NGX_HAVE_F_NOCACHE


67 
	#NGX_HAVE_F_NOCACHE
 1

	)

71 #i‚de‡
NGX_HAVE_STATFS


72 
	#NGX_HAVE_STATFS
 1

	)

76 #i‚de‡
NGX_HAVE_STATVFS


77 
	#NGX_HAVE_STATVFS
 1

	)

81 #i‚de‡
NGX_HAVE_DLOPEN


82 
	#NGX_HAVE_DLOPEN
 1

	)

86 #i‚de‡
NGX_HAVE_SCHED_YIELD


87 
	#NGX_HAVE_SCHED_YIELD
 1

	)

91 #i‚de‡
NGX_HAVE_REUSEPORT


92 
	#NGX_HAVE_REUSEPORT
 1

	)

96 #i‚de‡
NGX_HAVE_IP_RECVDSTADDR


97 
	#NGX_HAVE_IP_RECVDSTADDR
 1

	)

101 #i‚de‡
NGX_HAVE_IP_PKTINFO


102 
	#NGX_HAVE_IP_PKTINFO
 1

	)

106 #i‚de‡
NGX_HAVE_IPV6_RECVPKTINFO


107 
	#NGX_HAVE_IPV6_RECVPKTINFO
 1

	)

111 #i‚de‡
NGX_HAVE_TCP_FASTOPEN


112 
	#NGX_HAVE_TCP_FASTOPEN
 1

	)

116 #i‚de‡
NGX_HAVE_UNIX_DOMAIN


117 
	#NGX_HAVE_UNIX_DOMAIN
 1

	)

121 #i‚de‡
NGX_PTR_SIZE


122 
	#NGX_PTR_SIZE
 8

	)

126 #i‚de‡
NGX_SIG_ATOMIC_T_SIZE


127 
	#NGX_SIG_ATOMIC_T_SIZE
 4

	)

131 #i‚de‡
NGX_HAVE_LITTLE_ENDIAN


132 
	#NGX_HAVE_LITTLE_ENDIAN
 1

	)

136 #i‚de‡
NGX_MAX_SIZE_T_VALUE


137 
	#NGX_MAX_SIZE_T_VALUE
 9223372036854775807LL

	)

141 #i‚de‡
NGX_SIZE_T_LEN


142 
	#NGX_SIZE_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

146 #i‚de‡
NGX_MAX_OFF_T_VALUE


147 
	#NGX_MAX_OFF_T_VALUE
 9223372036854775807LL

	)

151 #i‚de‡
NGX_OFF_T_LEN


152 
	#NGX_OFF_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

156 #i‚de‡
NGX_TIME_T_SIZE


157 
	#NGX_TIME_T_SIZE
 8

	)

161 #i‚de‡
NGX_TIME_T_LEN


162 
	#NGX_TIME_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

166 #i‚de‡
NGX_MAX_TIME_T_VALUE


167 
	#NGX_MAX_TIME_T_VALUE
 9223372036854775807LL

	)

171 #i‚de‡
NGX_HAVE_INET6


172 
	#NGX_HAVE_INET6
 1

	)

176 #i‚de‡
NGX_HAVE_PREAD


177 
	#NGX_HAVE_PREAD
 1

	)

181 #i‚de‡
NGX_HAVE_PWRITE


182 
	#NGX_HAVE_PWRITE
 1

	)

186 #i‚de‡
NGX_SYS_NERR


187 
	#NGX_SYS_NERR
 107

	)

191 #i‚de‡
NGX_HAVE_LOCALTIME_R


192 
	#NGX_HAVE_LOCALTIME_R
 1

	)

196 #i‚de‡
NGX_HAVE_CLOCK_MONOTONIC


197 
	#NGX_HAVE_CLOCK_MONOTONIC
 1

	)

201 #i‚de‡
NGX_HAVE_POSIX_MEMALIGN


202 
	#NGX_HAVE_POSIX_MEMALIGN
 1

	)

206 #i‚de‡
NGX_HAVE_MAP_ANON


207 
	#NGX_HAVE_MAP_ANON
 1

	)

211 #i‚de‡
NGX_HAVE_SYSVSHM


212 
	#NGX_HAVE_SYSVSHM
 1

	)

216 #i‚de‡
NGX_HAVE_MSGHDR_MSG_CONTROL


217 
	#NGX_HAVE_MSGHDR_MSG_CONTROL
 1

	)

221 #i‚de‡
NGX_HAVE_FIONBIO


222 
	#NGX_HAVE_FIONBIO
 1

	)

226 #i‚de‡
NGX_HAVE_GMTOFF


227 
	#NGX_HAVE_GMTOFF
 1

	)

231 #i‚de‡
NGX_HAVE_D_NAMLEN


232 
	#NGX_HAVE_D_NAMLEN
 1

	)

236 #i‚de‡
NGX_HAVE_D_TYPE


237 
	#NGX_HAVE_D_TYPE
 1

	)

241 #i‚de‡
NGX_HAVE_SC_NPROCESSORS_ONLN


242 
	#NGX_HAVE_SC_NPROCESSORS_ONLN
 1

	)

246 #i‚de‡
NGX_HAVE_OPENAT


247 
	#NGX_HAVE_OPENAT
 1

	)

251 #i‚de‡
NGX_HAVE_GETADDRINFO


252 
	#NGX_HAVE_GETADDRINFO
 1

	)

256 #i‚de‡
NGX_HTTP_CACHE


257 
	#NGX_HTTP_CACHE
 1

	)

261 #i‚de‡
NGX_HTTP_GZIP


262 
	#NGX_HTTP_GZIP
 1

	)

266 #i‚de‡
NGX_HTTP_SSI


267 
	#NGX_HTTP_SSI
 1

	)

271 #i‚de‡
NGX_CRYPT


272 
	#NGX_CRYPT
 1

	)

276 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


277 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

281 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


282 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

286 #i‚de‡
NGX_HTTP_UPSTREAM_ZONE


287 
	#NGX_HTTP_UPSTREAM_ZONE
 1

	)

291 #i‚de‡
NGX_PCRE


292 
	#NGX_PCRE
 1

	)

296 #i‚de‡
NGX_HAVE_PCRE_JIT


297 
	#NGX_HAVE_PCRE_JIT
 1

	)

301 #i‚de‡
NGX_ZLIB


302 
	#NGX_ZLIB
 1

	)

306 #i‚de‡
NGX_PREFIX


307 
	#NGX_PREFIX
 "/u§/loˇl/ngöx/"

	)

311 #i‚de‡
NGX_CONF_PREFIX


312 
	#NGX_CONF_PREFIX
 "c⁄f/"

	)

316 #i‚de‡
NGX_SBIN_PATH


317 
	#NGX_SBIN_PATH
 "sbö/ngöx"

	)

321 #i‚de‡
NGX_CONF_PATH


322 
	#NGX_CONF_PATH
 "c⁄f/ngöx.c⁄f"

	)

326 #i‚de‡
NGX_PID_PATH


327 
	#NGX_PID_PATH
 "logs/ngöx.pid"

	)

331 #i‚de‡
NGX_LOCK_PATH


332 
	#NGX_LOCK_PATH
 "logs/ngöx.lock"

	)

336 #i‚de‡
NGX_ERROR_LOG_PATH


337 
	#NGX_ERROR_LOG_PATH
 "logs/îr‹.log"

	)

341 #i‚de‡
NGX_HTTP_LOG_PATH


342 
	#NGX_HTTP_LOG_PATH
 "logs/ac˚ss.log"

	)

346 #i‚de‡
NGX_HTTP_CLIENT_TEMP_PATH


347 
	#NGX_HTTP_CLIENT_TEMP_PATH
 "˛õ¡_body_ãmp"

	)

351 #i‚de‡
NGX_HTTP_PROXY_TEMP_PATH


352 
	#NGX_HTTP_PROXY_TEMP_PATH
 "¥oxy_ãmp"

	)

356 #i‚de‡
NGX_HTTP_FASTCGI_TEMP_PATH


357 
	#NGX_HTTP_FASTCGI_TEMP_PATH
 "Á°cgi_ãmp"

	)

361 #i‚de‡
NGX_HTTP_UWSGI_TEMP_PATH


362 
	#NGX_HTTP_UWSGI_TEMP_PATH
 "uwsgi_ãmp"

	)

366 #i‚de‡
NGX_HTTP_SCGI_TEMP_PATH


367 
	#NGX_HTTP_SCGI_TEMP_PATH
 "scgi_ãmp"

	)

371 #i‚de‡
NGX_SUPPRESS_WARN


372 
	#NGX_SUPPRESS_WARN
 1

	)

376 #i‚de‡
NGX_SMP


377 
	#NGX_SMP
 1

	)

381 #i‚de‡
NGX_USER


382 
	#NGX_USER
 "nobody"

	)

386 #i‚de‡
NGX_GROUP


387 
	#NGX_GROUP
 "nobody"

	)

	@objs/ngx_auto_headers.h

3 #i‚de‡
NGX_HAVE_UNISTD_H


4 
	#NGX_HAVE_UNISTD_H
 1

	)

8 #i‚de‡
NGX_HAVE_INTTYPES_H


9 
	#NGX_HAVE_INTTYPES_H
 1

	)

13 #i‚de‡
NGX_HAVE_LIMITS_H


14 
	#NGX_HAVE_LIMITS_H
 1

	)

18 #i‚de‡
NGX_HAVE_SYS_FILIO_H


19 
	#NGX_HAVE_SYS_FILIO_H
 1

	)

23 #i‚de‡
NGX_HAVE_SYS_PARAM_H


24 
	#NGX_HAVE_SYS_PARAM_H
 1

	)

28 #i‚de‡
NGX_HAVE_SYS_MOUNT_H


29 
	#NGX_HAVE_SYS_MOUNT_H
 1

	)

33 #i‚de‡
NGX_HAVE_SYS_STATVFS_H


34 
	#NGX_HAVE_SYS_STATVFS_H
 1

	)

38 #i‚de‡
NGX_DARWIN


39 
	#NGX_DARWIN
 1

	)

	@objs/ngx_modules.c

2 
	~<ngx_c⁄fig.h
>

3 
	~<ngx_c‹e.h
>

7 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

8 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

9 
ngx_moduÀ_t
 
ngx_c⁄f_moduÀ
;

10 
ngx_moduÀ_t
 
ngx_ªgex_moduÀ
;

11 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

12 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

13 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

14 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

15 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

16 
ngx_moduÀ_t
 
ngx_hâp_log_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_hâp_°©ic_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_hâp_autoödex_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_hâp_ödex_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_hâp_múr‹_moduÀ
;

22 
ngx_moduÀ_t
 
ngx_hâp_åy_fûes_moduÀ
;

23 
ngx_moduÀ_t
 
ngx_hâp_auth_basic_moduÀ
;

24 
ngx_moduÀ_t
 
ngx_hâp_ac˚ss_moduÀ
;

25 
ngx_moduÀ_t
 
ngx_hâp_limô_c⁄n_moduÀ
;

26 
ngx_moduÀ_t
 
ngx_hâp_limô_ªq_moduÀ
;

27 
ngx_moduÀ_t
 
ngx_hâp_geo_moduÀ
;

28 
ngx_moduÀ_t
 
ngx_hâp_m≠_moduÀ
;

29 
ngx_moduÀ_t
 
ngx_hâp_•lô_˛õ¡s_moduÀ
;

30 
ngx_moduÀ_t
 
ngx_hâp_ª„ªr_moduÀ
;

31 
ngx_moduÀ_t
 
ngx_hâp_ªwrôe_moduÀ
;

32 
ngx_moduÀ_t
 
ngx_hâp_¥oxy_moduÀ
;

33 
ngx_moduÀ_t
 
ngx_hâp_Á°cgi_moduÀ
;

34 
ngx_moduÀ_t
 
ngx_hâp_uwsgi_moduÀ
;

35 
ngx_moduÀ_t
 
ngx_hâp_scgi_moduÀ
;

36 
ngx_moduÀ_t
 
ngx_hâp_memˇched_moduÀ
;

37 
ngx_moduÀ_t
 
ngx_hâp_em±y_gif_moduÀ
;

38 
ngx_moduÀ_t
 
ngx_hâp_brow£r_moduÀ
;

39 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_hash_moduÀ
;

40 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_ù_hash_moduÀ
;

41 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
;

42 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_øndom_moduÀ
;

43 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_kì∑live_moduÀ
;

44 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_z⁄e_moduÀ
;

45 
ngx_moduÀ_t
 
ngx_hâp_wrôe_fûãr_moduÀ
;

46 
ngx_moduÀ_t
 
ngx_hâp_hódî_fûãr_moduÀ
;

47 
ngx_moduÀ_t
 
ngx_hâp_chunked_fûãr_moduÀ
;

48 
ngx_moduÀ_t
 
ngx_hâp_ønge_hódî_fûãr_moduÀ
;

49 
ngx_moduÀ_t
 
ngx_hâp_gzù_fûãr_moduÀ
;

50 
ngx_moduÀ_t
 
ngx_hâp_po°p⁄e_fûãr_moduÀ
;

51 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

52 
ngx_moduÀ_t
 
ngx_hâp_ch¨£t_fûãr_moduÀ
;

53 
ngx_moduÀ_t
 
ngx_hâp_u£rid_fûãr_moduÀ
;

54 
ngx_moduÀ_t
 
ngx_hâp_hódîs_fûãr_moduÀ
;

55 
ngx_moduÀ_t
 
ngx_hâp_c›y_fûãr_moduÀ
;

56 
ngx_moduÀ_t
 
ngx_hâp_ønge_body_fûãr_moduÀ
;

57 
ngx_moduÀ_t
 
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
;

59 
ngx_moduÀ_t
 *
	gngx_moduÀs
[] = {

60 &
ngx_c‹e_moduÀ
,

61 &
ngx_îæog_moduÀ
,

62 &
ngx_c⁄f_moduÀ
,

63 &
ngx_ªgex_moduÀ
,

64 &
ngx_evíts_moduÀ
,

65 &
ngx_evít_c‹e_moduÀ
,

66 &
ngx_kqueue_moduÀ
,

67 &
ngx_hâp_moduÀ
,

68 &
ngx_hâp_c‹e_moduÀ
,

69 &
ngx_hâp_log_moduÀ
,

70 &
ngx_hâp_up°ªam_moduÀ
,

71 &
ngx_hâp_°©ic_moduÀ
,

72 &
ngx_hâp_autoödex_moduÀ
,

73 &
ngx_hâp_ödex_moduÀ
,

74 &
ngx_hâp_múr‹_moduÀ
,

75 &
ngx_hâp_åy_fûes_moduÀ
,

76 &
ngx_hâp_auth_basic_moduÀ
,

77 &
ngx_hâp_ac˚ss_moduÀ
,

78 &
ngx_hâp_limô_c⁄n_moduÀ
,

79 &
ngx_hâp_limô_ªq_moduÀ
,

80 &
ngx_hâp_geo_moduÀ
,

81 &
ngx_hâp_m≠_moduÀ
,

82 &
ngx_hâp_•lô_˛õ¡s_moduÀ
,

83 &
ngx_hâp_ª„ªr_moduÀ
,

84 &
ngx_hâp_ªwrôe_moduÀ
,

85 &
ngx_hâp_¥oxy_moduÀ
,

86 &
ngx_hâp_Á°cgi_moduÀ
,

87 &
ngx_hâp_uwsgi_moduÀ
,

88 &
ngx_hâp_scgi_moduÀ
,

89 &
ngx_hâp_memˇched_moduÀ
,

90 &
ngx_hâp_em±y_gif_moduÀ
,

91 &
ngx_hâp_brow£r_moduÀ
,

92 &
ngx_hâp_up°ªam_hash_moduÀ
,

93 &
ngx_hâp_up°ªam_ù_hash_moduÀ
,

94 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
,

95 &
ngx_hâp_up°ªam_øndom_moduÀ
,

96 &
ngx_hâp_up°ªam_kì∑live_moduÀ
,

97 &
ngx_hâp_up°ªam_z⁄e_moduÀ
,

98 &
ngx_hâp_wrôe_fûãr_moduÀ
,

99 &
ngx_hâp_hódî_fûãr_moduÀ
,

100 &
ngx_hâp_chunked_fûãr_moduÀ
,

101 &
ngx_hâp_ønge_hódî_fûãr_moduÀ
,

102 &
ngx_hâp_gzù_fûãr_moduÀ
,

103 &
ngx_hâp_po°p⁄e_fûãr_moduÀ
,

104 &
ngx_hâp_ssi_fûãr_moduÀ
,

105 &
ngx_hâp_ch¨£t_fûãr_moduÀ
,

106 &
ngx_hâp_u£rid_fûãr_moduÀ
,

107 &
ngx_hâp_hódîs_fûãr_moduÀ
,

108 &
ngx_hâp_c›y_fûãr_moduÀ
,

109 &
ngx_hâp_ønge_body_fûãr_moduÀ
,

110 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
,

111 
NULL


114 *
	gngx_moduÀ_«mes
[] = {

166 
NULL


	@src/core/nginx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_show_vîsi⁄_öfo
();

14 
ngx_öt_t
 
ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_˛ónup_ívú⁄mít
(*
d©a
);

16 
ngx_öt_t
 
ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
);

17 
ngx_öt_t
 
ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_öt_t
 
ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
);

19 *
ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

20 *
ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

21 *
ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

22 *
ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

23 *
ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

24 *
ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

26 *
ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

27 *
c⁄f
);

28 *
ngx_lﬂd_moduÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

29 #i‡(
NGX_HAVE_DLOPEN
)

30 
ngx_u∆ﬂd_moduÀ
(*
d©a
);

34 
ngx_c⁄f_íum_t
 
	gngx_debug_poöts
[] = {

35 { 
ngx_°rög
("°›"), 
NGX_DEBUG_POINTS_STOP
 },

36 { 
ngx_°rög
("ab‹t"), 
NGX_DEBUG_POINTS_ABORT
 },

37 { 
ngx_nuŒ_°rög
, 0 }

41 
ngx_comm™d_t
 
	gngx_c‹e_comm™ds
[] = {

43 { 
ngx_°rög
("daemon"),

44 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

45 
ngx_c⁄f_£t_Êag_¶Ÿ
,

47 
off£tof
(
ngx_c‹e_c⁄f_t
, 
d´m⁄
),

48 
NULL
 },

50 { 
ngx_°rög
("master_process"),

51 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

52 
ngx_c⁄f_£t_Êag_¶Ÿ
,

54 
off£tof
(
ngx_c‹e_c⁄f_t
, 
ma°î
),

55 
NULL
 },

57 { 
ngx_°rög
("timer_resolution"),

58 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

59 
ngx_c⁄f_£t_m£c_¶Ÿ
,

61 
off£tof
(
ngx_c‹e_c⁄f_t
, 
timî_ªsﬁuti⁄
),

62 
NULL
 },

64 { 
ngx_°rög
("pid"),

65 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_°r_¶Ÿ
,

68 
off£tof
(
ngx_c‹e_c⁄f_t
, 
pid
),

69 
NULL
 },

71 { 
ngx_°rög
("lock_file"),

72 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¶Ÿ
,

75 
off£tof
(
ngx_c‹e_c⁄f_t
, 
lock_fûe
),

76 
NULL
 },

78 { 
ngx_°rög
("worker_processes"),

79 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

80 
ngx_£t_w‹kî_¥o˚s£s
,

83 
NULL
 },

85 { 
ngx_°rög
("debug_points"),

86 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_íum_¶Ÿ
,

89 
off£tof
(
ngx_c‹e_c⁄f_t
, 
debug_poöts
),

90 &
ngx_debug_poöts
 },

92 { 
ngx_°rög
("user"),

93 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE12
,

94 
ngx_£t_u£r
,

97 
NULL
 },

99 { 
ngx_°rög
("worker_priority"),

100 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_£t_¥i‹ôy
,

104 
NULL
 },

106 { 
ngx_°rög
("worker_cpu_affinity"),

107 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_1MORE
,

108 
ngx_£t_˝u_afföôy
,

111 
NULL
 },

113 { 
ngx_°rög
("worker_rlimit_nofile"),

114 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_num_¶Ÿ
,

117 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_nofûe
),

118 
NULL
 },

120 { 
ngx_°rög
("worker_rlimit_core"),

121 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_off_¶Ÿ
,

124 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_c‹e
),

125 
NULL
 },

127 { 
ngx_°rög
("worker_shutdown_timeout"),

128 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_m£c_¶Ÿ
,

131 
off£tof
(
ngx_c‹e_c⁄f_t
, 
shutdown_timeout
),

132 
NULL
 },

134 { 
ngx_°rög
("working_directory"),

135 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_c⁄f_£t_°r_¶Ÿ
,

138 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kög_dúe˘‹y
),

139 
NULL
 },

141 { 
ngx_°rög
("env"),

142 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_£t_ív
,

146 
NULL
 },

148 { 
ngx_°rög
("load_module"),

149 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_lﬂd_moduÀ
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_c‹e_moduÀ_t
 
	gngx_c‹e_moduÀ_˘x
 = {

160 
ngx_°rög
("core"),

161 
ngx_c‹e_moduÀ_¸óã_c⁄f
,

162 
ngx_c‹e_moduÀ_öô_c⁄f


166 
ngx_moduÀ_t
 
	gngx_c‹e_moduÀ
 = {

167 
NGX_MODULE_V1
,

168 &
ngx_c‹e_moduÀ_˘x
,

169 
ngx_c‹e_comm™ds
,

170 
NGX_CORE_MODULE
,

171 
NULL
,

172 
NULL
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

177 
NULL
,

178 
NGX_MODULE_V1_PADDING


182 
ngx_uöt_t
 
	gngx_show_hñp
;

183 
ngx_uöt_t
 
	gngx_show_vîsi⁄
;

184 
ngx_uöt_t
 
	gngx_show_c⁄figuª
;

185 
u_ch¨
 *
	gngx_¥efix
;

186 
u_ch¨
 *
	gngx_c⁄f_fûe
;

187 
u_ch¨
 *
	gngx_c⁄f_∑øms
;

188 *
	gngx_sig«l
;

191 **
	gngx_os_ívú⁄
;

194 
ngx_cde˛


195 
	$maö
(
¨gc
, *c⁄° *
¨gv
)

197 
ngx_buf_t
 *
b
;

198 
ngx_log_t
 *
log
;

199 
ngx_uöt_t
 
i
;

200 
ngx_cy˛e_t
 *
cy˛e
, 
öô_cy˛e
;

201 
ngx_c⁄f_dump_t
 *
cd
;

202 
ngx_c‹e_c⁄f_t
 *
ccf
;

204 
	`ngx_debug_öô
();

206 i‡(
	`ngx_°ªº‹_öô
(Ë!
NGX_OK
) {

210 i‡(
	`ngx_gë_›ti⁄s
(
¨gc
, 
¨gv
Ë!
NGX_OK
) {

214 i‡(
ngx_show_vîsi⁄
) {

215 
	`ngx_show_vîsi⁄_öfo
();

217 i‡(!
ngx_ã°_c⁄fig
) {

222  
ngx_max_sockës
 = -1;

224 
	`ngx_time_öô
();

226 #i‡(
NGX_PCRE
)

227 
	`ngx_ªgex_öô
();

230 
ngx_pid
 = 
	`ngx_gëpid
();

231 
ngx_∑ª¡
 = 
	`ngx_gëµid
();

233 
log
 = 
	`ngx_log_öô
(
ngx_¥efix
);

234 i‡(
log
 =
NULL
) {

239 #i‡(
NGX_OPENSSL
)

240 
	`ngx_s¶_öô
(
log
);

248 
	`ngx_memzîo
(&
öô_cy˛e
, (
ngx_cy˛e_t
));

249 
öô_cy˛e
.
log
 =Üog;

250 
ngx_cy˛e
 = &
öô_cy˛e
;

252 
öô_cy˛e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
log
);

253 i‡(
öô_cy˛e
.
poﬁ
 =
NULL
) {

257 i‡(
	`ngx_ßve_¨gv
(&
öô_cy˛e
, 
¨gc
, 
¨gv
Ë!
NGX_OK
) {

261 i‡(
	`ngx_¥o˚ss_›ti⁄s
(&
öô_cy˛e
Ë!
NGX_OK
) {

265 i‡(
	`ngx_os_öô
(
log
Ë!
NGX_OK
) {

273 i‡(
	`ngx_¸c32_èbÀ_öô
(Ë!
NGX_OK
) {

281 
	`ngx_¶ab_sizes_öô
();

283 i‡(
	`ngx_add_öhîôed_sockës
(&
öô_cy˛e
Ë!
NGX_OK
) {

287 i‡(
	`ngx_¥eöô_moduÀs
(Ë!
NGX_OK
) {

291 
cy˛e
 = 
	`ngx_öô_cy˛e
(&
öô_cy˛e
);

292 i‡(
cy˛e
 =
NULL
) {

293 i‡(
ngx_ã°_c⁄fig
) {

294 
	`ngx_log_°dîr
(0, "configuration file %sÅest failed",

295 
öô_cy˛e
.
c⁄f_fûe
.
d©a
);

301 i‡(
ngx_ã°_c⁄fig
) {

302 i‡(!
ngx_quõt_mode
) {

303 
	`ngx_log_°dîr
(0, "configuration file %sÅest is successful",

304 
cy˛e
->
c⁄f_fûe
.
d©a
);

307 i‡(
ngx_dump_c⁄fig
) {

308 
cd
 = 
cy˛e
->
c⁄fig_dump
.
ñts
;

310 
i
 = 0; i < 
cy˛e
->
c⁄fig_dump
.
√…s
; i++) {

312 
	`ngx_wrôe_°dout
("# configuration file ");

313 (Ë
	`ngx_wrôe_fd
(
ngx_°dout
, 
cd
[
i
].
«me
.
d©a
,

314 
cd
[
i
].
«me
.
Àn
);

315 
	`ngx_wrôe_°dout
(":" 
NGX_LINEFEED
);

317 
b
 = 
cd
[
i
].
buf„r
;

319 (Ë
	`ngx_wrôe_fd
(
ngx_°dout
, 
b
->
pos
, b->
œ°
 - b->pos);

320 
	`ngx_wrôe_°dout
(
NGX_LINEFEED
);

327 i‡(
ngx_sig«l
) {

328  
	`ngx_sig«l_¥o˚ss
(
cy˛e
, 
ngx_sig«l
);

331 
	`ngx_os_°©us
(
cy˛e
->
log
);

333 
ngx_cy˛e
 = 
cy˛e
;

335 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

337 i‡(
ccf
->
ma°î
 && 
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

338 
ngx_¥o˚ss
 = 
NGX_PROCESS_MASTER
;

341 #i‡!(
NGX_WIN32
)

343 i‡(
	`ngx_öô_sig«ls
(
cy˛e
->
log
Ë!
NGX_OK
) {

347 i‡(!
ngx_öhîôed
 && 
ccf
->
d´m⁄
) {

348 i‡(
	`ngx_d´m⁄
(
cy˛e
->
log
Ë!
NGX_OK
) {

352 
ngx_d´m⁄ized
 = 1;

355 i‡(
ngx_öhîôed
) {

356 
ngx_d´m⁄ized
 = 1;

361 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
cy˛e
->
log
Ë!
NGX_OK
) {

365 i‡(
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
Ë!
NGX_OK
) {

369 i‡(
log
->
fûe
->
fd
 !
ngx_°dîr
) {

370 i‡(
	`ngx_˛o£_fûe
(
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

371 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

372 
ngx_˛o£_fûe_n
 " built-inÜog failed");

376 
ngx_u£_°dîr
 = 0;

378 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

379 
	`ngx_sögÀ_¥o˚ss_cy˛e
(
cy˛e
);

382 
	`ngx_ma°î_¥o˚ss_cy˛e
(
cy˛e
);

386 
	}
}

390 
	$ngx_show_vîsi⁄_öfo
()

392 
	`ngx_wrôe_°dîr
("ngöx vîsi⁄: " 
NGINX_VER_BUILD
 
NGX_LINEFEED
);

394 i‡(
ngx_show_hñp
) {

395 
	`ngx_wrôe_°dîr
(

397 "[-∞¥efix] [-g dúe˘ives]" 
NGX_LINEFEED


398 
NGX_LINEFEED


399 "O±i⁄s:" 
NGX_LINEFEED


400 " -?,-h :Åhi†hñp" 
NGX_LINEFEED


401 " -v : show vîsi⁄ándÉxô" 
NGX_LINEFEED


403 
NGX_LINEFEED


404 " -à :Åe° c⁄figuøti⁄ándÉxô" 
NGX_LINEFEED


406 
NGX_LINEFEED


408 "durög c⁄figuøti⁄Åe°ög" 
NGX_LINEFEED


410 "°›, quô,Ñe›í,Ññﬂd" 
NGX_LINEFEED


411 #ifde‡
NGX_PREFIX


412 " -∞¥efix : sëÖªfixÖ©h (deÁu…: " 
NGX_PREFIX
 ")"

413 
NGX_LINEFEED


415 " -∞¥efix : sëÖªfixÖ©h (deÁu…: NONE)" 
NGX_LINEFEED


417 " -¯fûíamê : së c⁄figuøti⁄ fûê(deÁu…: " 
NGX_CONF_PATH


418 ")" 
NGX_LINEFEED


420 "fûe" 
NGX_LINEFEED
 NGX_LINEFEED

424 i‡(
ngx_show_c⁄figuª
) {

426 #ifde‡
NGX_COMPILER


427 
	`ngx_wrôe_°dîr
("buûàby " 
NGX_COMPILER
 
NGX_LINEFEED
);

430 #i‡(
NGX_SSL
)

431 i‡(
	`ngx_°rcmp
(
	`ngx_s¶_vîsi⁄
(), 
OPENSSL_VERSION_TEXT
) == 0) {

432 
	`ngx_wrôe_°dîr
("buûàwôh " 
OPENSSL_VERSION_TEXT
 
NGX_LINEFEED
);

434 
	`ngx_wrôe_°dîr
("buûàwôh " 
OPENSSL_VERSION_TEXT


436 
	`ngx_wrôe_°dîr
((*Ë(
uöçå_t
Ë
	`ngx_s¶_vîsi⁄
());

437 
	`ngx_wrôe_°dîr
(")" 
NGX_LINEFEED
);

439 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


440 
	`ngx_wrôe_°dîr
("TLS SNI suµ‹àíabÀd" 
NGX_LINEFEED
);

442 
	`ngx_wrôe_°dîr
("TLS SNI suµ‹àdißbÀd" 
NGX_LINEFEED
);

446 
	`ngx_wrôe_°dîr
("c⁄figuªárgumíts:" 
NGX_CONFIGURE
 
NGX_LINEFEED
);

448 
	}
}

451 
ngx_öt_t


452 
	$ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

454 
u_ch¨
 *
p
, *
v
, *
öhîôed
;

455 
ngx_öt_t
 
s
;

456 
ngx_li°íög_t
 *
ls
;

458 
öhîôed
 = (
u_ch¨
 *Ë
	`gëív
(
NGINX_VAR
);

460 i‡(
öhîôed
 =
NULL
) {

461  
NGX_OK
;

464 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

465 "usög inhîôed sockë†‰om \"%s\"", 
öhîôed
);

467 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, cy˛e->
poﬁ
, 10,

468 (
ngx_li°íög_t
))

469 !
NGX_OK
)

471  
NGX_ERROR
;

474 
p
 = 
öhîôed
, 
v
 =Ö; *p;Ö++) {

475 i‡(*
p
 == ':' || *p == ';') {

476 
s
 = 
	`ngx_©oi
(
v
, 
p
 - v);

477 i‡(
s
 =
NGX_ERROR
) {

478 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

479 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


481 " o‡thêv¨übÀ", 
v
);

485 
v
 = 
p
 + 1;

487 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

488 i‡(
ls
 =
NULL
) {

489  
NGX_ERROR
;

492 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

494 
ls
->
fd
 = (
ngx_sockë_t
Ë
s
;

498 i‡(
v
 !
p
) {

499 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

500 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


501 "Énvú⁄míàv¨übÀ, ign‹ög", 
v
);

504 
ngx_öhîôed
 = 1;

506  
	`ngx_£t_öhîôed_sockës
(
cy˛e
);

507 
	}
}

511 
	$ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
)

513 **
p
, **
ív
;

514 
ngx_°r_t
 *
v¨
;

515 
ngx_uöt_t
 
i
, 
n
;

516 
ngx_c‹e_c⁄f_t
 *
ccf
;

517 
ngx_poﬁ_˛ónup_t
 *
˛n
;

519 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

521 i‡(
œ°
 =
NULL
 && 
ccf
->
ívú⁄mít
) {

522  
ccf
->
ívú⁄mít
;

525 
v¨
 = 
ccf
->
ív
.
ñts
;

527 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

528 i‡(
	`ngx_°rcmp
(
v¨
[
i
].
d©a
, "TZ") == 0

529 || 
	`ngx_°∫cmp
(
v¨
[
i
].
d©a
, "TZ=", 3) == 0)

531 
tz_found
;

535 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

536 i‡(
v¨
 =
NULL
) {

537  
NULL
;

540 
v¨
->
Àn
 = 2;

541 
v¨
->
d©a
 = (
u_ch¨
 *) "TZ";

543 
v¨
 = 
ccf
->
ív
.
ñts
;

545 
tz_found
:

547 
n
 = 0;

549 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

551 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

552 
n
++;

556 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

558 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

559 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

561 
n
++;

567 i‡(
œ°
) {

568 
ív
 = 
	`ngx_Æloc
((*
œ°
 + 
n
 + 1Ë* (*), 
cy˛e
->
log
);

569 i‡(
ív
 =
NULL
) {

570  
NULL
;

573 *
œ°
 = 
n
;

576 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cy˛e
->
poﬁ
, 0);

577 i‡(
˛n
 =
NULL
) {

578  
NULL
;

581 
ív
 = 
	`ngx_Æloc
((
n
 + 1Ë* (*), 
cy˛e
->
log
);

582 i‡(
ív
 =
NULL
) {

583  
NULL
;

586 
˛n
->
h™dÀr
 = 
ngx_˛ónup_ívú⁄mít
;

587 
˛n
->
d©a
 = 
ív
;

590 
n
 = 0;

592 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

594 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

595 
ív
[
n
++] = (*Ë
v¨
[
i
].
d©a
;

599 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

601 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

602 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

604 
ív
[
n
++] = *
p
;

610 
ív
[
n
] = 
NULL
;

612 i‡(
œ°
 =
NULL
) {

613 
ccf
->
ívú⁄mít
 = 
ív
;

614 
ívú⁄
 = 
ív
;

617  
ív
;

618 
	}
}

622 
	$ngx_˛ónup_ívú⁄mít
(*
d©a
)

624 **
ív
 = 
d©a
;

626 i‡(
ívú⁄
 =
ív
) {

636 
	`ngx_‰ì
(
ív
);

637 
	}
}

640 
ngx_pid_t


641 
	$ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
)

643 **
ív
, *
v¨
;

644 
u_ch¨
 *
p
;

645 
ngx_uöt_t
 
i
, 
n
;

646 
ngx_pid_t
 
pid
;

647 
ngx_exec_˘x_t
 
˘x
;

648 
ngx_c‹e_c⁄f_t
 *
ccf
;

649 
ngx_li°íög_t
 *
ls
;

651 
	`ngx_memzîo
(&
˘x
, (
ngx_exec_˘x_t
));

653 
˘x
.
∑th
 = 
¨gv
[0];

654 
˘x
.
«me
 = "new binaryÖrocess";

655 
˘x
.
¨gv
 =árgv;

657 
n
 = 2;

658 
ív
 = 
	`ngx_£t_ívú⁄mít
(
cy˛e
, &
n
);

659 i‡(
ív
 =
NULL
) {

660  
NGX_INVALID_PID
;

663 
v¨
 = 
	`ngx_Æloc
((
NGINX_VAR
)

664 + 
cy˛e
->
li°íög
.
√…s
 * (
NGX_INT32_LEN
 + 1) + 2,

665 
cy˛e
->
log
);

666 i‡(
v¨
 =
NULL
) {

667 
	`ngx_‰ì
(
ív
);

668  
NGX_INVALID_PID
;

671 
p
 = 
	`ngx_˝ymem
(
v¨
, 
NGINX_VAR
 "=", (NGINX_VAR));

673 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

674 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

675 
p
 = 
	`ngx_•rötf
’, "%ud;", 
ls
[
i
].
fd
);

678 *
p
 = '\0';

680 
ív
[
n
++] = 
v¨
;

682 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

686 
ív
[
n
++] = "SPARE=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

694 
ív
[
n
] = 
NULL
;

696 #i‡(
NGX_DEBUG
)

698 **
e
;

699 
e
 = 
ív
; *e;É++) {

700 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "ív: %s", *
e
);

705 
˘x
.
ívp
 = (*c⁄° *Ë
ív
;

707 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

709 i‡(
	`ngx_ª«me_fûe
(
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©aË=
NGX_FILE_ERROR
) {

710 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

711 
ngx_ª«me_fûe_n
 " %sÅo %s failed "

713 
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©a, 
¨gv
[0]);

715 
	`ngx_‰ì
(
ív
);

716 
	`ngx_‰ì
(
v¨
);

718  
NGX_INVALID_PID
;

721 
pid
 = 
	`ngx_execuã
(
cy˛e
, &
˘x
);

723 i‡(
pid
 =
NGX_INVALID_PID
) {

724 i‡(
	`ngx_ª«me_fûe
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.data)

725 =
NGX_FILE_ERROR
)

727 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

728 
ngx_ª«me_fûe_n
 " %s backÅo %s failedáfter "

730 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
¨gv
[0]);

734 
	`ngx_‰ì
(
ív
);

735 
	`ngx_‰ì
(
v¨
);

737  
pid
;

738 
	}
}

741 
ngx_öt_t


742 
	$ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
)

744 
u_ch¨
 *
p
;

745 
ngx_öt_t
 
i
;

747 
i
 = 1; i < 
¨gc
; i++) {

749 
p
 = (
u_ch¨
 *Ë
¨gv
[
i
];

751 i‡(*
p
++ != '-') {

752 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%s\"", 
¨gv
[
i
]);

753  
NGX_ERROR
;

756 *
p
) {

758 *
p
++) {

762 
ngx_show_vîsi⁄
 = 1;

763 
ngx_show_hñp
 = 1;

767 
ngx_show_vîsi⁄
 = 1;

771 
ngx_show_vîsi⁄
 = 1;

772 
ngx_show_c⁄figuª
 = 1;

776 
ngx_ã°_c⁄fig
 = 1;

780 
ngx_ã°_c⁄fig
 = 1;

781 
ngx_dump_c⁄fig
 = 1;

785 
ngx_quõt_mode
 = 1;

789 i‡(*
p
) {

790 
ngx_¥efix
 = 
p
;

791 
√xt
;

794 i‡(
¨gv
[++
i
]) {

795 
ngx_¥efix
 = (
u_ch¨
 *Ë
¨gv
[
i
];

796 
√xt
;

799 
	`ngx_log_°dîr
(0, "option \"-p\"Ñequires directoryÇame");

800  
NGX_ERROR
;

803 i‡(*
p
) {

804 
ngx_c⁄f_fûe
 = 
p
;

805 
√xt
;

808 i‡(
¨gv
[++
i
]) {

809 
ngx_c⁄f_fûe
 = (
u_ch¨
 *Ë
¨gv
[
i
];

810 
√xt
;

813 
	`ngx_log_°dîr
(0, "option \"-c\"Ñequires fileÇame");

814  
NGX_ERROR
;

817 i‡(*
p
) {

818 
ngx_c⁄f_∑øms
 = 
p
;

819 
√xt
;

822 i‡(
¨gv
[++
i
]) {

823 
ngx_c⁄f_∑øms
 = (
u_ch¨
 *Ë
¨gv
[
i
];

824 
√xt
;

827 
	`ngx_log_°dîr
(0, "option \"-g\"ÑequiresÖarameter");

828  
NGX_ERROR
;

831 i‡(*
p
) {

832 
ngx_sig«l
 = (*Ë
p
;

834 } i‡(
¨gv
[++
i
]) {

835 
ngx_sig«l
 = 
¨gv
[
i
];

838 
	`ngx_log_°dîr
(0, "option \"-s\"ÑequiresÖarameter");

839  
NGX_ERROR
;

842 i‡(
	`ngx_°rcmp
(
ngx_sig«l
, "stop") == 0

843 || 
	`ngx_°rcmp
(
ngx_sig«l
, "quit") == 0

844 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reopen") == 0

845 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reload") == 0)

847 
ngx_¥o˚ss
 = 
NGX_PROCESS_SIGNALLER
;

848 
√xt
;

851 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"-†%s\"", 
ngx_sig«l
);

852  
NGX_ERROR
;

855 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%c\"", *(
p
 - 1));

856  
NGX_ERROR
;

860 
√xt
:

865  
NGX_OK
;

866 
	}
}

869 
ngx_öt_t


870 
	$ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
)

872 #i‡(
NGX_FREEBSD
)

874 
ngx_os_¨gv
 = (**Ë
¨gv
;

875 
ngx_¨gc
 = 
¨gc
;

876 
ngx_¨gv
 = (**Ë
¨gv
;

879 
size_t
 
Àn
;

880 
ngx_öt_t
 
i
;

882 
ngx_os_¨gv
 = (**Ë
¨gv
;

883 
ngx_¨gc
 = 
¨gc
;

885 
ngx_¨gv
 = 
	`ngx_Æloc
((
¨gc
 + 1Ë* (*), 
cy˛e
->
log
);

886 i‡(
ngx_¨gv
 =
NULL
) {

887  
NGX_ERROR
;

890 
i
 = 0; i < 
¨gc
; i++) {

891 
Àn
 = 
	`ngx_°æí
(
¨gv
[
i
]) + 1;

893 
ngx_¨gv
[
i
] = 
	`ngx_Æloc
(
Àn
, 
cy˛e
->
log
);

894 i‡(
ngx_¨gv
[
i
] =
NULL
) {

895  
NGX_ERROR
;

898 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_¨gv
[
i
], (u_ch¨ *Ë
¨gv
[i], 
Àn
);

901 
ngx_¨gv
[
i
] = 
NULL
;

905 
ngx_os_ívú⁄
 = 
ívú⁄
;

907  
NGX_OK
;

908 
	}
}

911 
ngx_öt_t


912 
	$ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

914 
u_ch¨
 *
p
;

915 
size_t
 
Àn
;

917 i‡(
ngx_¥efix
) {

918 
Àn
 = 
	`ngx_°æí
(
ngx_¥efix
);

919 
p
 = 
ngx_¥efix
;

921 i‡(
Àn
 && !
	`ngx_∑th_£∑øt‹
(
p
[len - 1])) {

922 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 1);

923 i‡(
p
 =
NULL
) {

924  
NGX_ERROR
;

927 
	`ngx_mem˝y
(
p
, 
ngx_¥efix
, 
Àn
);

928 
p
[
Àn
++] = '/';

931 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

932 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

933 
cy˛e
->
¥efix
.
Àn
 =Üen;

934 
cy˛e
->
¥efix
.
d©a
 = 
p
;

938 #i‚de‡
NGX_PREFIX


940 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
NGX_MAX_PATH
);

941 i‡(
p
 =
NULL
) {

942  
NGX_ERROR
;

945 i‡(
	`ngx_gëcwd
(
p
, 
NGX_MAX_PATH
) == 0) {

946 
	`ngx_log_°dîr
(
ngx_î∫o
, "[emîg]: " 
ngx_gëcwd_n
 " failed");

947  
NGX_ERROR
;

950 
Àn
 = 
	`ngx_°æí
(
p
);

952 
p
[
Àn
++] = '/';

954 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

955 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

956 
cy˛e
->
¥efix
.
Àn
 =Üen;

957 
cy˛e
->
¥efix
.
d©a
 = 
p
;

961 #ifde‡
NGX_CONF_PREFIX


962 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_CONF_PREFIX
);

964 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_PREFIX
);

966 
	`ngx_°r_£t
(&
cy˛e
->
¥efix
, 
NGX_PREFIX
);

971 i‡(
ngx_c⁄f_fûe
) {

972 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_fûe
);

973 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
ngx_c⁄f_fûe
;

976 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_fûe
, 
NGX_CONF_PATH
);

979 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &cy˛e->
c⁄f_fûe
, 0Ë!
NGX_OK
) {

980  
NGX_ERROR
;

983 
p
 = 
cy˛e
->
c⁄f_fûe
.
d©a
 + cy˛e->c⁄f_fûe.
Àn
 - 1;

984 
p
 > 
cy˛e
->
c⁄f_fûe
.
d©a
;

985 
p
--)

987 i‡(
	`ngx_∑th_£∑øt‹
(*
p
)) {

988 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
p
 - cy˛e->
c⁄f_fûe
.
d©a
 + 1;

989 
cy˛e
->
c⁄f_¥efix
.
d©a
 = cy˛e->
c⁄f_fûe
.data;

994 i‡(
ngx_c⁄f_∑øms
) {

995 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_∑øms
);

996 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
ngx_c⁄f_∑øms
;

999 i‡(
ngx_ã°_c⁄fig
) {

1000 
cy˛e
->
log
->
log_Àvñ
 = 
NGX_LOG_INFO
;

1003  
NGX_OK
;

1004 
	}
}

1008 
	$ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1010 
ngx_c‹e_c⁄f_t
 *
ccf
;

1012 
ccf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_c‹e_c⁄f_t
));

1013 i‡(
ccf
 =
NULL
) {

1014  
NULL
;

1028 
ccf
->
d´m⁄
 = 
NGX_CONF_UNSET
;

1029 
ccf
->
ma°î
 = 
NGX_CONF_UNSET
;

1030 
ccf
->
timî_ªsﬁuti⁄
 = 
NGX_CONF_UNSET_MSEC
;

1031 
ccf
->
shutdown_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1033 
ccf
->
w‹kî_¥o˚s£s
 = 
NGX_CONF_UNSET
;

1034 
ccf
->
debug_poöts
 = 
NGX_CONF_UNSET
;

1036 
ccf
->
æimô_nofûe
 = 
NGX_CONF_UNSET
;

1037 
ccf
->
æimô_c‹e
 = 
NGX_CONF_UNSET
;

1039 
ccf
->
u£r
 = (
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
;

1040 
ccf
->
group
 = (
ngx_gid_t
Ë
NGX_CONF_UNSET_UINT
;

1042 i‡(
	`ngx_¨øy_öô
(&
ccf
->
ív
, 
cy˛e
->
poﬁ
, 1, (
ngx_°r_t
))

1043 !
NGX_OK
)

1045  
NULL
;

1048  
ccf
;

1049 
	}
}

1053 
	$ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1055 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1057 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
d´m⁄
, 1);

1058 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
ma°î
, 1);

1059 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
timî_ªsﬁuti⁄
, 0);

1060 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
shutdown_timeout
, 0);

1062 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_¥o˚s£s
, 1);

1063 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
debug_poöts
, 0);

1065 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1067 i‡(!
ccf
->
˝u_afföôy_auto


1068 && 
ccf
->
˝u_afföôy_n


1069 && 
ccf
->
˝u_afföôy_n
 != 1

1070 && 
ccf
->
˝u_afföôy_n
 !(
ngx_uöt_t
Ëccf->
w‹kî_¥o˚s£s
)

1072 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

1081 i‡(
ccf
->
pid
.
Àn
 == 0) {

1082 
	`ngx_°r_£t
(&
ccf
->
pid
, 
NGX_PID_PATH
);

1085 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
pid
, 0Ë!
NGX_OK
) {

1086  
NGX_CONF_ERROR
;

1089 
ccf
->
ﬁdpid
.
Àn
 = ccf->
pid
.À¿+ (
NGX_OLDPID_EXT
);

1091 
ccf
->
ﬁdpid
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, ccf->ﬁdpid.
Àn
);

1092 i‡(
ccf
->
ﬁdpid
.
d©a
 =
NULL
) {

1093  
NGX_CONF_ERROR
;

1096 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, ccf->pid.
Àn
),

1097 
NGX_OLDPID_EXT
, (NGX_OLDPID_EXT));

1100 #i‡!(
NGX_WIN32
)

1102 i‡(
ccf
->
u£r
 =(
uid_t
Ë
NGX_CONF_UNSET_UINT
 && 
	`gëeuid
() == 0) {

1103 
group
 *
gΩ
;

1104 
∑sswd
 *
pwd
;

1106 
	`ngx_£t_î∫o
(0);

1107 
pwd
 = 
	`gëpw«m
(
NGX_USER
);

1108 i‡(
pwd
 =
NULL
) {

1109 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1110 "gëpw«m(\"" 
NGX_USER
 "\") failed");

1111  
NGX_CONF_ERROR
;

1114 
ccf
->
u£∫ame
 = 
NGX_USER
;

1115 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1117 
	`ngx_£t_î∫o
(0);

1118 
gΩ
 = 
	`gëg∫am
(
NGX_GROUP
);

1119 i‡(
gΩ
 =
NULL
) {

1120 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1121 "gëg∫am(\"" 
NGX_GROUP
 "\") failed");

1122  
NGX_CONF_ERROR
;

1125 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1129 i‡(
ccf
->
lock_fûe
.
Àn
 == 0) {

1130 
	`ngx_°r_£t
(&
ccf
->
lock_fûe
, 
NGX_LOCK_PATH
);

1133 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
lock_fûe
, 0Ë!
NGX_OK
) {

1134  
NGX_CONF_ERROR
;

1138 
ngx_°r_t
 
lock_fûe
;

1140 
lock_fûe
 = 
cy˛e
->
ﬁd_cy˛e
->lock_file;

1142 i‡(
lock_fûe
.
Àn
) {

1143 
lock_fûe
.
Àn
--;

1145 i‡(
ccf
->
lock_fûe
.
Àn
 !=Üock_file.len

1146 || 
	`ngx_°∫cmp
(
ccf
->
lock_fûe
.
d©a
,Üock_fûe.d©a,Üock_fûe.
Àn
)

1149 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1153 
cy˛e
->
lock_fûe
.
Àn
 =Üock_file.len + 1;

1154 
lock_fûe
.
Àn
 += (".accept");

1156 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_p°rdup
(cy˛e->
poﬁ
, &lock_file);

1157 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1158  
NGX_CONF_ERROR
;

1162 
cy˛e
->
lock_fûe
.
Àn
 = 
ccf
->lock_file.len + 1;

1163 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_≤Æloc
(cy˛e->
poﬁ
,

1164 
ccf
->
lock_fûe
.
Àn
 + (".accept"));

1165 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1166  
NGX_CONF_ERROR
;

1169 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
cy˛e
->
lock_fûe
.
d©a
, 
ccf
->lock_file.data,

1170 
ccf
->
lock_fûe
.
Àn
),

1177  
NGX_CONF_OK
;

1178 
	}
}

1182 
	$ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1184 #i‡(
NGX_WIN32
)

1186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1189  
NGX_CONF_OK
;

1193 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1195 *
group
;

1196 
∑sswd
 *
pwd
;

1197 
group
 *
gΩ
;

1198 
ngx_°r_t
 *
vÆue
;

1200 i‡(
ccf
->
u£r
 !(
uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1204 i‡(
	`gëeuid
() != 0) {

1205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1209  
NGX_CONF_OK
;

1212 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1214 
ccf
->
u£∫ame
 = (*Ë
vÆue
[1].
d©a
;

1216 
	`ngx_£t_î∫o
(0);

1217 
pwd
 = 
	`gëpw«m
((c⁄° *Ë
vÆue
[1].
d©a
);

1218 i‡(
pwd
 =
NULL
) {

1219 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1220 "gëpw«m(\"%s\"ËÁûed", 
vÆue
[1].
d©a
);

1221  
NGX_CONF_ERROR
;

1224 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1226 
group
 = (*Ë((
cf
->
¨gs
->
√…s
 =2Ë? 
vÆue
[1].
d©a
 : value[2].data);

1228 
	`ngx_£t_î∫o
(0);

1229 
gΩ
 = 
	`gëg∫am
(
group
);

1230 i‡(
gΩ
 =
NULL
) {

1231 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1232 "gëg∫am(\"%s\"ËÁûed", 
group
);

1233  
NGX_CONF_ERROR
;

1236 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1238  
NGX_CONF_OK
;

1241 
	}
}

1245 
	$ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1247 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1249 
ngx_°r_t
 *
vÆue
, *
v¨
;

1250 
ngx_uöt_t
 
i
;

1252 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

1253 i‡(
v¨
 =
NULL
) {

1254  
NGX_CONF_ERROR
;

1257 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1258 *
v¨
 = 
vÆue
[1];

1260 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

1262 i‡(
vÆue
[1].
d©a
[
i
] == '=') {

1264 
v¨
->
Àn
 = 
i
;

1266  
NGX_CONF_OK
;

1270  
NGX_CONF_OK
;

1271 
	}
}

1275 
	$ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1277 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1279 
ngx_°r_t
 *
vÆue
;

1280 
ngx_uöt_t
 
n
, 
möus
;

1282 i‡(
ccf
->
¥i‹ôy
 != 0) {

1286 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1288 i‡(
vÆue
[1].
d©a
[0] == '-') {

1289 
n
 = 1;

1290 
möus
 = 1;

1292 } i‡(
vÆue
[1].
d©a
[0] == '+') {

1293 
n
 = 1;

1294 
möus
 = 0;

1297 
n
 = 0;

1298 
möus
 = 0;

1301 
ccf
->
¥i‹ôy
 = 
	`ngx_©oi
(&
vÆue
[1].
d©a
[
n
], vÆue[1].
Àn
 -Ç);

1302 i‡(
ccf
->
¥i‹ôy
 =
NGX_ERROR
) {

1306 i‡(
möus
) {

1307 
ccf
->
¥i‹ôy
 = -ccf->priority;

1310  
NGX_CONF_OK
;

1311 
	}
}

1315 
	$ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1317 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1318 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1320 
u_ch¨
 
ch
, *
p
;

1321 
ngx_°r_t
 *
vÆue
;

1322 
ngx_uöt_t
 
i
, 
n
;

1323 
ngx_˝u£t_t
 *
mask
;

1325 i‡(
ccf
->
˝u_afföôy
) {

1329 
mask
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (cf->
¨gs
->
√…s
 - 1Ë* (
ngx_˝u£t_t
));

1330 i‡(
mask
 =
NULL
) {

1331  
NGX_CONF_ERROR
;

1334 
ccf
->
˝u_afföôy_n
 = 
cf
->
¨gs
->
√…s
 - 1;

1335 
ccf
->
˝u_afföôy
 = 
mask
;

1337 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1339 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "auto") == 0) {

1341 i‡(
cf
->
¨gs
->
√…s
 > 3) {

1342 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1345  
NGX_CONF_ERROR
;

1348 
ccf
->
˝u_afföôy_auto
 = 1;

1350 
	`CPU_ZERO
(&
mask
[0]);

1351 
i
 = 0; i < (
ngx_uöt_t
Ë
	`ngx_mö
(
ngx_n˝u
, 
CPU_SETSIZE
); i++) {

1352 
	`CPU_SET
(
i
, &
mask
[0]);

1355 
n
 = 2;

1358 
n
 = 1;

1361  ; 
n
 < 
cf
->
¨gs
->
√…s
;Ç++) {

1363 i‡(
vÆue
[
n
].
Àn
 > 
CPU_SETSIZE
) {

1364 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1366 
CPU_SETSIZE
);

1367  
NGX_CONF_ERROR
;

1370 
i
 = 0;

1371 
	`CPU_ZERO
(&
mask
[
n
 - 1]);

1373 
p
 = 
vÆue
[
n
].
d©a
 + vÆue[n].
Àn
 - 1;

1374 
p
 >
vÆue
[
n
].
d©a
;

1375 
p
--)

1377 
ch
 = *
p
;

1379 i‡(
ch
 == ' ') {

1383 
i
++;

1385 i‡(
ch
 == '0') {

1389 i‡(
ch
 == '1') {

1390 
	`CPU_SET
(
i
 - 1, &
mask
[
n
 - 1]);

1394 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1396 
ch
);

1397  
NGX_CONF_ERROR
;

1403 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1408  
NGX_CONF_OK
;

1409 
	}
}

1412 
ngx_˝u£t_t
 *

1413 
	$ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
)

1415 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1416 
ngx_uöt_t
 
i
, 
j
;

1417 
ngx_˝u£t_t
 *
mask
;

1418 
ngx_c‹e_c⁄f_t
 *
ccf
;

1420 
ngx_˝u£t_t
 
ªsu…
;

1422 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

1423 
ngx_c‹e_moduÀ
);

1425 i‡(
ccf
->
˝u_afföôy
 =
NULL
) {

1426  
NULL
;

1429 i‡(
ccf
->
˝u_afföôy_auto
) {

1430 
mask
 = &
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1432 
i
 = 0, 
j
 = 
n
; ; i++) {

1434 i‡(
	`CPU_ISSET
(
i
 % 
CPU_SETSIZE
, 
mask
Ë&& 
j
-- == 0) {

1438 i‡(
i
 =
CPU_SETSIZE
 && 
j
 =
n
) {

1440  
NULL
;

1446 
	`CPU_ZERO
(&
ªsu…
);

1447 
	`CPU_SET
(
i
 % 
CPU_SETSIZE
, &
ªsu…
);

1449  &
ªsu…
;

1452 i‡(
ccf
->
˝u_afföôy_n
 > 
n
) {

1453  &
ccf
->
˝u_afföôy
[
n
];

1456  &
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1460  
NULL
;

1463 
	}
}

1467 
	$ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1469 
ngx_°r_t
 *
vÆue
;

1470 
ngx_c‹e_c⁄f_t
 *
ccf
;

1472 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
c⁄f
;

1474 i‡(
ccf
->
w‹kî_¥o˚s£s
 !
NGX_CONF_UNSET
) {

1478 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1480 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "auto") == 0) {

1481 
ccf
->
w‹kî_¥o˚s£s
 = 
ngx_n˝u
;

1482  
NGX_CONF_OK
;

1485 
ccf
->
w‹kî_¥o˚s£s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1487 i‡(
ccf
->
w‹kî_¥o˚s£s
 =
NGX_ERROR
) {

1491  
NGX_CONF_OK
;

1492 
	}
}

1496 
	$ngx_lﬂd_moduÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1498 #i‡(
NGX_HAVE_DLOPEN
)

1499 *
h™dÀ
;

1500 **
«mes
, **
‹dî
;

1501 
ngx_°r_t
 *
vÆue
, 
fûe
;

1502 
ngx_uöt_t
 
i
;

1503 
ngx_moduÀ_t
 *
moduÀ
, **
moduÀs
;

1504 
ngx_poﬁ_˛ónup_t
 *
˛n
;

1506 i‡(
cf
->
cy˛e
->
moduÀs_u£d
) {

1510 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1512 
fûe
 = 
vÆue
[1];

1514 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 0Ë!
NGX_OK
) {

1515  
NGX_CONF_ERROR
;

1518 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
cy˛e
->
poﬁ
, 0);

1519 i‡(
˛n
 =
NULL
) {

1520  
NGX_CONF_ERROR
;

1523 
h™dÀ
 = 
	`ngx_dl›í
(
fûe
.
d©a
);

1524 i‡(
h™dÀ
 =
NULL
) {

1525 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1526 
ngx_dl›í_n
 " \"%s\" failed (%s)",

1527 
fûe
.
d©a
, 
	`ngx_dÀº‹
());

1528  
NGX_CONF_ERROR
;

1531 
˛n
->
h™dÀr
 = 
ngx_u∆ﬂd_moduÀ
;

1532 
˛n
->
d©a
 = 
h™dÀ
;

1534 
moduÀs
 = 
	`ngx_dlsym
(
h™dÀ
, "ngx_modules");

1535 i‡(
moduÀs
 =
NULL
) {

1536 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1537 
ngx_dlsym_n
 " \"%V\", \"%s\" failed (%s)",

1538 &
vÆue
[1], "ngx_moduÀs", 
	`ngx_dÀº‹
());

1539  
NGX_CONF_ERROR
;

1542 
«mes
 = 
	`ngx_dlsym
(
h™dÀ
, "ngx_module_names");

1543 i‡(
«mes
 =
NULL
) {

1544 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1545 
ngx_dlsym_n
 " \"%V\", \"%s\" failed (%s)",

1546 &
vÆue
[1], "ngx_moduÀ_«mes", 
	`ngx_dÀº‹
());

1547  
NGX_CONF_ERROR
;

1550 
‹dî
 = 
	`ngx_dlsym
(
h™dÀ
, "ngx_module_order");

1552 
i
 = 0; 
moduÀs
[i]; i++) {

1553 
moduÀ
 = 
moduÀs
[
i
];

1554 
moduÀ
->
«me
 = 
«mes
[
i
];

1556 i‡(
	`ngx_add_moduÀ
(
cf
, &
fûe
, 
moduÀ
, 
‹dî
Ë!
NGX_OK
) {

1557  
NGX_CONF_ERROR
;

1560 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "module: %s i:%ui",

1561 
moduÀ
->
«me
, moduÀ->
ödex
);

1564  
NGX_CONF_OK
;

1568 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1571  
NGX_CONF_ERROR
;

1574 
	}
}

1577 #i‡(
NGX_HAVE_DLOPEN
)

1580 
	$ngx_u∆ﬂd_moduÀ
(*
d©a
)

1582 *
h™dÀ
 = 
d©a
;

1584 i‡(
	`ngx_dl˛o£
(
h™dÀ
) != 0) {

1585 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1586 
ngx_dl˛o£_n
 " faûed (%s)", 
	`ngx_dÀº‹
());

1588 
	}
}

	@src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1015002

	)

13 
	#NGINX_VERSION
 "1.15.2"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 #ifde‡
NGX_BUILD


17 
	#NGINX_VER_BUILD
 
NGINX_VER
 " (" 
NGX_BUILD
 ")"

	)

19 
	#NGINX_VER_BUILD
 
NGINX_VER


	)

22 
	#NGINX_VAR
 "NGINX"

	)

23 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@src/core/ngx_array.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_¨øy_t
 *

13 
	$ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_¨øy_t
 *
a
;

17 
a
 = 
	`ngx_∑Œoc
(
p
, (
ngx_¨øy_t
));

18 i‡(
a
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_¨øy_öô
(
a
, 
p
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
a
;

27 
	}
}

31 
	$ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
)

33 
ngx_poﬁ_t
 *
p
;

35 
p
 = 
a
->
poﬁ
;

37 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°
) {

38 
p
->
d
.
œ°
 -
a
->
size
 *á->
«Œoc
;

41 i‡((
u_ch¨
 *Ë
a
 + (
ngx_¨øy_t
Ë=
p
->
d
.
œ°
) {

42 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë
a
;

44 
	}
}

48 
	$ngx_¨øy_push
(
ngx_¨øy_t
 *
a
)

50 *
ñt
, *
√w
;

51 
size_t
 
size
;

52 
ngx_poﬁ_t
 *
p
;

54 i‡(
a
->
√…s
 =a->
«Œoc
) {

58 
size
 = 
a
->sizê*á->
«Œoc
;

60 
p
 = 
a
->
poﬁ
;

62 i‡((
u_ch¨
 *Ë
a
->
ñts
 + 
size
 =
p
->
d
.
œ°


63 && 
p
->
d
.
œ°
 + 
a
->
size
 <p->d.
íd
)

70 
p
->
d
.
œ°
 +
a
->
size
;

71 
a
->
«Œoc
++;

76 
√w
 = 
	`ngx_∑Œoc
(
p
, 2 * 
size
);

77 i‡(
√w
 =
NULL
) {

78  
NULL
;

81 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
, 
size
);

82 
a
->
ñts
 = 
√w
;

83 
a
->
«Œoc
 *= 2;

87 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

88 
a
->
√…s
++;

90  
ñt
;

91 
	}
}

95 
	$ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
)

97 *
ñt
, *
√w
;

98 
size_t
 
size
;

99 
ngx_uöt_t
 
«Œoc
;

100 
ngx_poﬁ_t
 *
p
;

102 
size
 = 
n
 * 
a
->size;

104 i‡(
a
->
√…s
 + 
n
 >á->
«Œoc
) {

108 
p
 = 
a
->
poﬁ
;

110 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°


111 && 
p
->
d
.
œ°
 + 
size
 <p->d.
íd
)

118 
p
->
d
.
œ°
 +
size
;

119 
a
->
«Œoc
 +
n
;

124 
«Œoc
 = 2 * ((
n
 >
a
->nalloc) ?Ç :á->nalloc);

126 
√w
 = 
	`ngx_∑Œoc
(
p
, 
«Œoc
 * 
a
->
size
);

127 i‡(
√w
 =
NULL
) {

128  
NULL
;

131 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
,á->
√…s
 *á->
size
);

132 
a
->
ñts
 = 
√w
;

133 
a
->
«Œoc
 =Çalloc;

137 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

138 
a
->
√…s
 +
n
;

140  
ñt
;

141 
	}
}

	@src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

22 } 
	tngx_¨øy_t
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@src/core/ngx_buf.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_buf_t
 *

13 
	$ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

15 
ngx_buf_t
 *
b
;

17 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

18 i‡(
b
 =
NULL
) {

19  
NULL
;

22 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

23 i‡(
b
->
°¨t
 =
NULL
) {

24  
NULL
;

38 
b
->
pos
 = b->
°¨t
;

39 
b
->
œ°
 = b->
°¨t
;

40 
b
->
íd
 = b->
œ°
 + 
size
;

41 
b
->
ãmp‹¨y
 = 1;

43  
b
;

44 
	}
}

47 
ngx_chaö_t
 *

48 
	$ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
)

50 
ngx_chaö_t
 *
˛
;

52 
˛
 = 
poﬁ
->
chaö
;

54 i‡(
˛
) {

55 
poﬁ
->
chaö
 = 
˛
->
√xt
;

56  
˛
;

59 
˛
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_chaö_t
));

60 i‡(
˛
 =
NULL
) {

61  
NULL
;

64  
˛
;

65 
	}
}

68 
ngx_chaö_t
 *

69 
	$ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
)

71 
u_ch¨
 *
p
;

72 
ngx_öt_t
 
i
;

73 
ngx_buf_t
 *
b
;

74 
ngx_chaö_t
 *
chaö
, *
˛
, **
Œ
;

76 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
bufs
->
num
 * bufs->
size
);

77 i‡(
p
 =
NULL
) {

78  
NULL
;

81 
Œ
 = &
chaö
;

83 
i
 = 0; i < 
bufs
->
num
; i++) {

85 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

86 i‡(
b
 =
NULL
) {

87  
NULL
;

102 
b
->
pos
 = 
p
;

103 
b
->
œ°
 = 
p
;

104 
b
->
ãmp‹¨y
 = 1;

106 
b
->
°¨t
 = 
p
;

107 
p
 +
bufs
->
size
;

108 
b
->
íd
 = 
p
;

110 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

111 i‡(
˛
 =
NULL
) {

112  
NULL
;

115 
˛
->
buf
 = 
b
;

116 *
Œ
 = 
˛
;

117 
Œ
 = &
˛
->
√xt
;

120 *
Œ
 = 
NULL
;

122  
chaö
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
)

129 
ngx_chaö_t
 *
˛
, **
Œ
;

131 
Œ
 = 
chaö
;

133 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

134 
Œ
 = &
˛
->
√xt
;

137 
ö
) {

138 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

139 i‡(
˛
 =
NULL
) {

140 *
Œ
 = 
NULL
;

141  
NGX_ERROR
;

144 
˛
->
buf
 = 
ö
->buf;

145 *
Œ
 = 
˛
;

146 
Œ
 = &
˛
->
√xt
;

147 
ö
 = in->
√xt
;

150 *
Œ
 = 
NULL
;

152  
NGX_OK
;

153 
	}
}

156 
ngx_chaö_t
 *

157 
	$ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
)

159 
ngx_chaö_t
 *
˛
;

161 i‡(*
‰ì
) {

162 
˛
 = *
‰ì
;

163 *
‰ì
 = 
˛
->
√xt
;

164 
˛
->
√xt
 = 
NULL
;

165  
˛
;

168 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
);

169 i‡(
˛
 =
NULL
) {

170  
NULL
;

173 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
p
);

174 i‡(
˛
->
buf
 =
NULL
) {

175  
NULL
;

178 
˛
->
√xt
 = 
NULL
;

180  
˛
;

181 
	}
}

185 
	$ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

186 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
)

188 
ngx_chaö_t
 *
˛
;

190 i‡(*
out
) {

191 i‡(*
busy
 =
NULL
) {

192 *
busy
 = *
out
;

195 
˛
 = *
busy
; cl->
√xt
; cl = cl->next) { }

197 
˛
->
√xt
 = *
out
;

200 *
out
 = 
NULL
;

203 *
busy
) {

204 
˛
 = *
busy
;

206 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

210 i‡(
˛
->
buf
->
èg
 !=Åag) {

211 *
busy
 = 
˛
->
√xt
;

212 
	`ngx_‰ì_chaö
(
p
, 
˛
);

216 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

217 
˛
->
buf
->
œ°
 = cl->buf->
°¨t
;

219 *
busy
 = 
˛
->
√xt
;

220 
˛
->
√xt
 = *
‰ì
;

221 *
‰ì
 = 
˛
;

223 
	}
}

226 
off_t


227 
	$ngx_chaö_cﬂÀs˚_fûe
(
ngx_chaö_t
 **
ö
, 
off_t
 
limô
)

229 
off_t
 
tŸÆ
, 
size
, 
Æig√d
, 
Âªv
;

230 
ngx_fd_t
 
fd
;

231 
ngx_chaö_t
 *
˛
;

233 
tŸÆ
 = 0;

235 
˛
 = *
ö
;

236 
fd
 = 
˛
->
buf
->
fûe
->fd;

239 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

241 i‡(
size
 > 
limô
 - 
tŸÆ
) {

242 
size
 = 
limô
 - 
tŸÆ
;

244 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

245 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

247 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

248 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

251 
tŸÆ
 +
size
;

255 
tŸÆ
 +
size
;

256 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

257 
˛
 = cl->
√xt
;

259 } 
˛


260 && 
˛
->
buf
->
ö_fûe


261 && 
tŸÆ
 < 
limô


262 && 
fd
 =
˛
->
buf
->
fûe
->fd

263 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

265 *
ö
 = 
˛
;

267  
tŸÆ
;

268 
	}
}

271 
ngx_chaö_t
 *

272 
	$ngx_chaö_upd©e_£¡
(
ngx_chaö_t
 *
ö
, 
off_t
 
£¡
)

274 
off_t
 
size
;

276  ; 
ö
; i¿ö->
√xt
) {

278 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

282 i‡(
£¡
 == 0) {

286 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

288 i‡(
£¡
 >
size
) {

289 
£¡
 -
size
;

291 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

292 
ö
->
buf
->
pos
 = in->buf->
œ°
;

295 i‡(
ö
->
buf
->
ö_fûe
) {

296 
ö
->
buf
->
fûe_pos
 = in->buf->
fûe_œ°
;

302 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

303 
ö
->
buf
->
pos
 +(
size_t
Ë
£¡
;

306 i‡(
ö
->
buf
->
ö_fûe
) {

307 
ö
->
buf
->
fûe_pos
 +
£¡
;

313  
ö
;

314 
	}
}

	@src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

76 
	tngx_fûe_t
 *
	tfûe
);

78 
	sngx_ouçut_chaö_˘x_s
 {

79 
ngx_buf_t
 *
buf
;

80 
ngx_chaö_t
 *
ö
;

81 
ngx_chaö_t
 *
‰ì
;

82 
ngx_chaö_t
 *
busy
;

84 
£ndfûe
:1;

85 
dúe˘io
:1;

86 
u«lig√d
:1;

87 
√ed_ö_mem‹y
:1;

88 
√ed_ö_ãmp
:1;

89 
aio
:1;

91 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_COMPAT
)

92 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

93 #i‡(
NGX_HAVE_AIO_SENDFILE
 || 
NGX_COMPAT
)

94 
	`ssize_t
 (*
aio_¥ñﬂd
)(
ngx_buf_t
 *
fûe
);

98 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

99 
	`ngx_öt_t
 (*
thªad_h™dÀr
)(
ngx_thªad_èsk_t
 *
èsk
,

100 
ngx_fûe_t
 *
fûe
);

101 
ngx_thªad_èsk_t
 *
thªad_èsk
;

104 
off_t
 
Æignmít
;

106 
ngx_poﬁ_t
 *
poﬁ
;

107 
ngx_öt_t
 
Æloˇãd
;

108 
ngx_bufs_t
 
bufs
;

109 
ngx_buf_èg_t
 
èg
;

111 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

112 *
fûãr_˘x
;

117 
ngx_chaö_t
 *
out
;

118 
ngx_chaö_t
 **
œ°
;

119 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

120 
ngx_poﬁ_t
 *
poﬁ
;

121 
off_t
 
limô
;

122 } 
	tngx_chaö_wrôî_˘x_t
;

125 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

128 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

129 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

131 
	#ngx_buf_•ecül
(
b
) \

132 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

133 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

135 
	#ngx_buf_sync_⁄ly
(
b
) \

136 (
b
->
sync
 \

137 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

139 
	#ngx_buf_size
(
b
) \

140 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

141 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

143 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

144 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

147 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

148 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

150 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

151 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

152 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

153 
poﬁ
->
chaö
 = 
˛


	)

157 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

158 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

160 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

161 
ngx_chaö_t
 *
ö
);

162 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

163 
	`ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,

164 
ngx_chaö_t
 **
busy
,Çgx_chaö_à**
out
, 
ngx_buf_èg_t
 
èg
);

166 
off_t
 
	`ngx_chaö_cﬂÀs˚_fûe
(
ngx_chaö_t
 **
ö
, off_à
limô
);

168 
ngx_chaö_t
 *
	`ngx_chaö_upd©e_£¡
“gx_chaö_à*
ö
, 
off_t
 
£¡
);

	@src/core/ngx_conf_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

11 
	#NGX_CONF_BUFFER
 4096

	)

13 
ngx_öt_t
 
ngx_c⁄f_add_dump
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

14 
ngx_öt_t
 
ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
,Çgx_öt_à
œ°
);

15 
ngx_öt_t
 
ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
);

19 
ngx_comm™d_t
 
	gngx_c⁄f_comm™ds
[] = {

21 { 
ngx_°rög
("include"),

22 
NGX_ANY_CONF
|
NGX_CONF_TAKE1
,

23 
ngx_c⁄f_ö˛ude
,

26 
NULL
 },

28 
ngx_nuŒ_comm™d


32 
ngx_moduÀ_t
 
	gngx_c⁄f_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 
NULL
,

35 
ngx_c⁄f_comm™ds
,

36 
NGX_CONF_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
ngx_c⁄f_Êush_fûes
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


50 
ngx_uöt_t
 
	g¨gumít_numbî
[] = {

51 
NGX_CONF_NOARGS
,

52 
NGX_CONF_TAKE1
,

53 
NGX_CONF_TAKE2
,

54 
NGX_CONF_TAKE3
,

55 
NGX_CONF_TAKE4
,

56 
NGX_CONF_TAKE5
,

57 
NGX_CONF_TAKE6
,

58 
NGX_CONF_TAKE7


63 
	$ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
)

65 *
rv
;

66 
ngx_°r_t
 *
∑øm
;

67 
ngx_buf_t
 
b
;

68 
ngx_c⁄f_fûe_t
 
c⁄f_fûe
;

70 
∑øm
 = &
cf
->
cy˛e
->
c⁄f_∑øm
;

72 i‡(
∑øm
->
Àn
 == 0) {

73  
NGX_CONF_OK
;

76 
	`ngx_memzîo
(&
c⁄f_fûe
, (
ngx_c⁄f_fûe_t
));

78 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

80 
b
.
°¨t
 = 
∑øm
->
d©a
;

81 
b
.
pos
 = 
∑øm
->
d©a
;

82 
b
.
œ°
 = 
∑øm
->
d©a
 +Ö¨am->
Àn
;

83 
b
.
íd
 = b.
œ°
;

84 
b
.
ãmp‹¨y
 = 1;

86 
c⁄f_fûe
.
fûe
.
fd
 = 
NGX_INVALID_FILE
;

87 
c⁄f_fûe
.
fûe
.
«me
.
d©a
 = 
NULL
;

88 
c⁄f_fûe
.
löe
 = 0;

90 
cf
->
c⁄f_fûe
 = &conf_file;

91 
cf
->
c⁄f_fûe
->
buf„r
 = &
b
;

93 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

95 
cf
->
c⁄f_fûe
 = 
NULL
;

97  
rv
;

98 
	}
}

101 
ngx_öt_t


102 
	$ngx_c⁄f_add_dump
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

104 
off_t
 
size
;

105 
u_ch¨
 *
p
;

106 
uöt32_t
 
hash
;

107 
ngx_buf_t
 *
buf
;

108 
ngx_°r_node_t
 *
¢
;

109 
ngx_c⁄f_dump_t
 *
cd
;

111 
hash
 = 
	`ngx_¸c32_l⁄g
(
fûíame
->
d©a
, fûíame->
Àn
);

113 
¢
 = 
	`ngx_°r_rbåì_lookup
(&
cf
->
cy˛e
->
c⁄fig_dump_rbåì
, 
fûíame
, 
hash
);

115 i‡(
¢
) {

116 
cf
->
c⁄f_fûe
->
dump
 = 
NULL
;

117  
NGX_OK
;

120 
p
 = 
	`ngx_p°rdup
(
cf
->
cy˛e
->
poﬁ
, 
fûíame
);

121 i‡(
p
 =
NULL
) {

122  
NGX_ERROR
;

125 
cd
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
c⁄fig_dump
);

126 i‡(
cd
 =
NULL
) {

127  
NGX_ERROR
;

130 
size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

132 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
cf
->
cy˛e
->
poﬁ
, (
size_t
Ë
size
);

133 i‡(
buf
 =
NULL
) {

134  
NGX_ERROR
;

137 
cd
->
«me
.
d©a
 = 
p
;

138 
cd
->
«me
.
Àn
 = 
fûíame
->len;

139 
cd
->
buf„r
 = 
buf
;

141 
cf
->
c⁄f_fûe
->
dump
 = 
buf
;

143 
¢
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_°r_node_t
));

144 i‡(
¢
 =
NULL
) {

145  
NGX_ERROR
;

148 
¢
->
node
.
key
 = 
hash
;

149 
¢
->
°r
 = 
cd
->
«me
;

151 
	`ngx_rbåì_ö£π
(&
cf
->
cy˛e
->
c⁄fig_dump_rbåì
, &
¢
->
node
);

153  
NGX_OK
;

154 
	}
}

158 
	$ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

160 *
rv
;

161 
ngx_fd_t
 
fd
;

162 
ngx_öt_t
 
rc
;

163 
ngx_buf_t
 
buf
;

164 
ngx_c⁄f_fûe_t
 *
¥ev
, 
c⁄f_fûe
;

166 
∑r£_fûe
 = 0,

167 
∑r£_block
,

168 
∑r£_∑øm


169 } 
ty≥
;

171 #i‡(
NGX_SUPPRESS_WARN
)

172 
fd
 = 
NGX_INVALID_FILE
;

173 
¥ev
 = 
NULL
;

176 i‡(
fûíame
) {

180 
fd
 = 
	`ngx_›í_fûe
(
fûíame
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

182 i‡(
fd
 =
NGX_INVALID_FILE
) {

183 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

184 
ngx_›í_fûe_n
 " \"%s\" failed",

185 
fûíame
->
d©a
);

186  
NGX_CONF_ERROR
;

189 
¥ev
 = 
cf
->
c⁄f_fûe
;

191 
cf
->
c⁄f_fûe
 = &conf_file;

193 i‡(
	`ngx_fd_öfo
(
fd
, &
cf
->
c⁄f_fûe
->
fûe
.
öfo
Ë=
NGX_FILE_ERROR
) {

194 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 
ngx_î∫o
,

195 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûíame
->
d©a
);

198 
cf
->
c⁄f_fûe
->
buf„r
 = &
buf
;

200 
buf
.
°¨t
 = 
	`ngx_Æloc
(
NGX_CONF_BUFFER
, 
cf
->
log
);

201 i‡(
buf
.
°¨t
 =
NULL
) {

202 
Áûed
;

205 
buf
.
pos
 = buf.
°¨t
;

206 
buf
.
œ°
 = buf.
°¨t
;

207 
buf
.
íd
 = buf.
œ°
 + 
NGX_CONF_BUFFER
;

208 
buf
.
ãmp‹¨y
 = 1;

210 
cf
->
c⁄f_fûe
->
fûe
.
fd
 = fd;

211 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn
 = 
fûíame
->len;

212 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
 = 
fûíame
->data;

213 
cf
->
c⁄f_fûe
->
fûe
.
off£t
 = 0;

214 
cf
->
c⁄f_fûe
->
fûe
.
log
 = cf->log;

215 
cf
->
c⁄f_fûe
->
löe
 = 1;

217 
ty≥
 = 
∑r£_fûe
;

219 i‡(
ngx_dump_c⁄fig


220 #i‡(
NGX_DEBUG
)

225 i‡(
	`ngx_c⁄f_add_dump
(
cf
, 
fûíame
Ë!
NGX_OK
) {

226 
Áûed
;

230 
cf
->
c⁄f_fûe
->
dump
 = 
NULL
;

233 } i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

235 
ty≥
 = 
∑r£_block
;

238 
ty≥
 = 
∑r£_∑øm
;

243 
rc
 = 
	`ngx_c⁄f_ªad_tokí
(
cf
);

255 i‡(
rc
 =
NGX_ERROR
) {

256 
d⁄e
;

259 i‡(
rc
 =
NGX_CONF_BLOCK_DONE
) {

261 i‡(
ty≥
 !
∑r£_block
) {

262 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"}\"");

263 
Áûed
;

266 
d⁄e
;

269 i‡(
rc
 =
NGX_CONF_FILE_DONE
) {

271 i‡(
ty≥
 =
∑r£_block
) {

272 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

274 
Áûed
;

277 
d⁄e
;

280 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

282 i‡(
ty≥
 =
∑r£_∑øm
) {

283 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

286 
Áûed
;

292 i‡(
cf
->
h™dÀr
) {

299 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

300 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"{\"");

301 
Áûed
;

304 
rv
 = (*
cf
->
h™dÀr
)(cf, 
NULL
, cf->
h™dÀr_c⁄f
);

305 i‡(
rv
 =
NGX_CONF_OK
) {

309 i‡(
rv
 =
NGX_CONF_ERROR
) {

310 
Áûed
;

313 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, 
rv
);

315 
Áûed
;

319 
rc
 = 
	`ngx_c⁄f_h™dÀr
(
cf
,Ñc);

321 i‡(
rc
 =
NGX_ERROR
) {

322 
Áûed
;

326 
Áûed
:

328 
rc
 = 
NGX_ERROR
;

330 
d⁄e
:

332 i‡(
fûíame
) {

333 i‡(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
) {

334 
	`ngx_‰ì
(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
);

337 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

338 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

339 
ngx_˛o£_fûe_n
 " %s failed",

340 
fûíame
->
d©a
);

341 
rc
 = 
NGX_ERROR
;

344 
cf
->
c⁄f_fûe
 = 
¥ev
;

347 i‡(
rc
 =
NGX_ERROR
) {

348  
NGX_CONF_ERROR
;

351  
NGX_CONF_OK
;

352 
	}
}

355 
ngx_öt_t


356 
	$ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
, 
ngx_öt_t
 
œ°
)

358 *
rv
;

359 *
c⁄f
, **
c⁄Â
;

360 
ngx_uöt_t
 
i
, 
found
;

361 
ngx_°r_t
 *
«me
;

362 
ngx_comm™d_t
 *
cmd
;

364 
«me
 = 
cf
->
¨gs
->
ñts
;

366 
found
 = 0;

368 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

370 
cmd
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
comm™ds
;

371 i‡(
cmd
 =
NULL
) {

375  ; 
cmd
->
«me
.
Àn
; cmd++) {

377 i‡(
«me
->
Àn
 !
cmd
->name.len) {

381 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, 
cmd
->name.data) != 0) {

385 
found
 = 1;

387 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_CONF_MODULE


388 && 
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !cf->
moduÀ_ty≥
)

395 i‡(!(
cmd
->
ty≥
 & 
cf
->
cmd_ty≥
)) {

399 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_OK
) {

400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

402 
«me
->
d©a
);

403  
NGX_ERROR
;

406 i‡((
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_CONF_BLOCK_START
) {

407 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

409 
«me
->
d©a
);

410  
NGX_ERROR
;

415 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_ANY
)) {

417 i‡(
cmd
->
ty≥
 & 
NGX_CONF_FLAG
) {

419 i‡(
cf
->
¨gs
->
√…s
 != 2) {

420 
övÆid
;

423 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_1MORE
) {

425 i‡(
cf
->
¨gs
->
√…s
 < 2) {

426 
övÆid
;

429 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_2MORE
) {

431 i‡(
cf
->
¨gs
->
√…s
 < 3) {

432 
övÆid
;

435 } i‡(
cf
->
¨gs
->
√…s
 > 
NGX_CONF_MAX_ARGS
) {

437 
övÆid
;

439 } i‡(!(
cmd
->
ty≥
 & 
¨gumít_numbî
[
cf
->
¨gs
->
√…s
 - 1]))

441 
övÆid
;

447 
c⁄f
 = 
NULL
;

449 i‡(
cmd
->
ty≥
 & 
NGX_DIRECT_CONF
) {

450 
c⁄f
 = ((**Ë
cf
->
˘x
)[cf->
cy˛e
->
moduÀs
[
i
]->
ödex
];

452 } i‡(
cmd
->
ty≥
 & 
NGX_MAIN_CONF
) {

453 
c⁄f
 = &(((**Ë
cf
->
˘x
)[cf->
cy˛e
->
moduÀs
[
i
]->
ödex
]);

455 } i‡(
cf
->
˘x
) {

456 
c⁄Â
 = *(**Ë((*Ë
cf
->
˘x
 + 
cmd
->
c⁄f
);

458 i‡(
c⁄Â
) {

459 
c⁄f
 = 
c⁄Â
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
];

463 
rv
 = 
cmd
->
	`£t
(
cf
, cmd, 
c⁄f
);

465 i‡(
rv
 =
NGX_CONF_OK
) {

466  
NGX_OK
;

469 i‡(
rv
 =
NGX_CONF_ERROR
) {

470  
NGX_ERROR
;

473 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

474 "\"%s\" dúe˘ivê%s", 
«me
->
d©a
, 
rv
);

476  
NGX_ERROR
;

480 i‡(
found
) {

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "\"%s\" dúe˘ivêi†nŸáŒowed hîe", 
«me
->
d©a
);

484  
NGX_ERROR
;

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "unknow¿dúe˘ivê\"%s\"", 
«me
->
d©a
);

490  
NGX_ERROR
;

492 
övÆid
:

494 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

496 
«me
->
d©a
);

498  
NGX_ERROR
;

499 
	}
}

502 
ngx_öt_t


503 
	$ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
)

505 
u_ch¨
 *
°¨t
, 
ch
, *
§c
, *
d°
;

506 
off_t
 
fûe_size
;

507 
size_t
 
Àn
;

508 
ssize_t
 
n
, 
size
;

509 
ngx_uöt_t
 
found
, 
√ed_•a˚
, 
œ°_•a˚
, 
sh¨p_commít
, 
v¨übÀ
;

510 
ngx_uöt_t
 
quŸed
, 
s_quŸed
, 
d_quŸed
, 
°¨t_löe
;

511 
ngx_°r_t
 *
w‹d
;

512 
ngx_buf_t
 *
b
, *
dump
;

514 
found
 = 0;

515 
√ed_•a˚
 = 0;

516 
œ°_•a˚
 = 1;

517 
sh¨p_commít
 = 0;

518 
v¨übÀ
 = 0;

519 
quŸed
 = 0;

520 
s_quŸed
 = 0;

521 
d_quŸed
 = 0;

523 
cf
->
¨gs
->
√…s
 = 0;

524 
b
 = 
cf
->
c⁄f_fûe
->
buf„r
;

525 
dump
 = 
cf
->
c⁄f_fûe
->dump;

526 
°¨t
 = 
b
->
pos
;

527 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

529 
fûe_size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

533 i‡(
b
->
pos
 >b->
œ°
) {

535 i‡(
cf
->
c⁄f_fûe
->
fûe
.
off£t
 >
fûe_size
) {

537 i‡(
cf
->
¨gs
->
√…s
 > 0 || !
œ°_•a˚
) {

539 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

540 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

543  
NGX_ERROR
;

546 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

549  
NGX_ERROR
;

552  
NGX_CONF_FILE_DONE
;

555 
Àn
 = 
b
->
pos
 - 
°¨t
;

557 i‡(
Àn
 =
NGX_CONF_BUFFER
) {

558 
cf
->
c⁄f_fûe
->
löe
 = 
°¨t_löe
;

560 i‡(
d_quŸed
) {

561 
ch
 = '"';

563 } i‡(
s_quŸed
) {

564 
ch
 = '\'';

567 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

569 10, 
°¨t
);

570  
NGX_ERROR
;

573 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

575 "missögÅîmö©ög \"%c\" ch¨a˘î", 
ch
);

576  
NGX_ERROR
;

579 i‡(
Àn
) {

580 
	`ngx_memmove
(
b
->
°¨t
, sèπ, 
Àn
);

583 
size
 = (
ssize_t
Ë(
fûe_size
 - 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

585 i‡(
size
 > 
b
->
íd
 - (b->
°¨t
 + 
Àn
)) {

586 
size
 = 
b
->
íd
 - (b->
°¨t
 + 
Àn
);

589 
n
 = 
	`ngx_ªad_fûe
(&
cf
->
c⁄f_fûe
->
fûe
, 
b
->
°¨t
 + 
Àn
, 
size
,

590 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

592 i‡(
n
 =
NGX_ERROR
) {

593  
NGX_ERROR
;

596 i‡(
n
 !
size
) {

597 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

598 
ngx_ªad_fûe_n
 "Ñeturned "

600 
n
, 
size
);

601  
NGX_ERROR
;

604 
b
->
pos
 = b->
°¨t
 + 
Àn
;

605 
b
->
œ°
 = b->
pos
 + 
n
;

606 
°¨t
 = 
b
->start;

608 i‡(
dump
) {

609 
dump
->
œ°
 = 
	`ngx_˝ymem
(dump->œ°, 
b
->
pos
, 
size
);

613 
ch
 = *
b
->
pos
++;

615 i‡(
ch
 =
LF
) {

616 
cf
->
c⁄f_fûe
->
löe
++;

618 i‡(
sh¨p_commít
) {

619 
sh¨p_commít
 = 0;

623 i‡(
sh¨p_commít
) {

627 i‡(
quŸed
) {

628 
quŸed
 = 0;

632 i‡(
√ed_•a˚
) {

633 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

634 
œ°_•a˚
 = 1;

635 
√ed_•a˚
 = 0;

639 i‡(
ch
 == ';') {

640  
NGX_OK
;

643 i‡(
ch
 == '{') {

644  
NGX_CONF_BLOCK_START
;

647 i‡(
ch
 == ')') {

648 
œ°_•a˚
 = 1;

649 
√ed_•a˚
 = 0;

652 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

653 "u√x≥˘ed \"%c\"", 
ch
);

654  
NGX_ERROR
;

658 i‡(
œ°_•a˚
) {

659 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

663 
°¨t
 = 
b
->
pos
 - 1;

664 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

666 
ch
) {

670 i‡(
cf
->
¨gs
->
√…s
 == 0) {

671 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

672 "u√x≥˘ed \"%c\"", 
ch
);

673  
NGX_ERROR
;

676 i‡(
ch
 == '{') {

677  
NGX_CONF_BLOCK_START
;

680  
NGX_OK
;

683 i‡(
cf
->
¨gs
->
√…s
 != 0) {

684 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

686  
NGX_ERROR
;

689  
NGX_CONF_BLOCK_DONE
;

692 
sh¨p_commít
 = 1;

696 
quŸed
 = 1;

697 
œ°_•a˚
 = 0;

701 
°¨t
++;

702 
d_quŸed
 = 1;

703 
œ°_•a˚
 = 0;

707 
°¨t
++;

708 
s_quŸed
 = 1;

709 
œ°_•a˚
 = 0;

713 
v¨übÀ
 = 1;

714 
œ°_•a˚
 = 0;

718 
œ°_•a˚
 = 0;

722 i‡(
ch
 ='{' && 
v¨übÀ
) {

726 
v¨übÀ
 = 0;

728 i‡(
ch
 == '\\') {

729 
quŸed
 = 1;

733 i‡(
ch
 == '$') {

734 
v¨übÀ
 = 1;

738 i‡(
d_quŸed
) {

739 i‡(
ch
 == '"') {

740 
d_quŸed
 = 0;

741 
√ed_•a˚
 = 1;

742 
found
 = 1;

745 } i‡(
s_quŸed
) {

746 i‡(
ch
 == '\'') {

747 
s_quŸed
 = 0;

748 
√ed_•a˚
 = 1;

749 
found
 = 1;

752 } i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF


753 || 
ch
 == ';' || ch == '{')

755 
œ°_•a˚
 = 1;

756 
found
 = 1;

759 i‡(
found
) {

760 
w‹d
 = 
	`ngx_¨øy_push
(
cf
->
¨gs
);

761 i‡(
w‹d
 =
NULL
) {

762  
NGX_ERROR
;

765 
w‹d
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
b
->
pos
 - 1 - 
°¨t
 + 1);

766 i‡(
w‹d
->
d©a
 =
NULL
) {

767  
NGX_ERROR
;

770 
d°
 = 
w‹d
->
d©a
, 
§c
 = 
°¨t
, 
Àn
 = 0;

771 
§c
 < 
b
->
pos
 - 1;

772 
Àn
++)

774 i‡(*
§c
 == '\\') {

775 
§c
[1]) {

779 
§c
++;

783 *
d°
++ = '\t';

784 
§c
 += 2;

788 *
d°
++ = '\r';

789 
§c
 += 2;

793 *
d°
++ = '\n';

794 
§c
 += 2;

799 *
d°
++ = *
§c
++;

801 *
d°
 = '\0';

802 
w‹d
->
Àn
 =Üen;

804 i‡(
ch
 == ';') {

805  
NGX_OK
;

808 i‡(
ch
 == '{') {

809  
NGX_CONF_BLOCK_START
;

812 
found
 = 0;

816 
	}
}

820 
	$ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

822 *
rv
;

823 
ngx_öt_t
 
n
;

824 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

825 
ngx_glob_t
 
gl
;

827 
vÆue
 = 
cf
->
¨gs
->
ñts
;

828 
fûe
 = 
vÆue
[1];

830 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

832 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

833  
NGX_CONF_ERROR
;

836 i‡(
	`°Ωbrk
((*Ë
fûe
.
d©a
, "*?["Ë=
NULL
) {

838 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

840  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

843 
	`ngx_memzîo
(&
gl
, (
ngx_glob_t
));

845 
gl
.
∑âîn
 = 
fûe
.
d©a
;

846 
gl
.
log
 = 
cf
->log;

847 
gl
.
ã°
 = 1;

849 i‡(
	`ngx_›í_glob
(&
gl
Ë!
NGX_OK
) {

850 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

851 
ngx_›í_glob_n
 " \"%s\" faûed", 
fûe
.
d©a
);

852  
NGX_CONF_ERROR
;

855 
rv
 = 
NGX_CONF_OK
;

858 
n
 = 
	`ngx_ªad_glob
(&
gl
, &
«me
);

860 i‡(
n
 !
NGX_OK
) {

864 
fûe
.
Àn
 = 
«me
.len++;

865 
fûe
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

866 i‡(
fûe
.
d©a
 =
NULL
) {

867  
NGX_CONF_ERROR
;

870 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

872 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

874 i‡(
rv
 !
NGX_CONF_OK
) {

879 
	`ngx_˛o£_glob
(&
gl
);

881  
rv
;

882 
	}
}

885 
ngx_öt_t


886 
	$ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
c⁄f_¥efix
)

888 
ngx_°r_t
 *
¥efix
;

890 
¥efix
 = 
c⁄f_¥efix
 ? &
cy˛e
->conf_prefix : &cycle->prefix;

892  
	`ngx_gë_fuŒ_«me
(
cy˛e
->
poﬁ
, 
¥efix
, 
«me
);

893 
	}
}

896 
ngx_›í_fûe_t
 *

897 
	$ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

899 
ngx_°r_t
 
fuŒ
;

900 
ngx_uöt_t
 
i
;

901 
ngx_li°_∑π_t
 *
∑π
;

902 
ngx_›í_fûe_t
 *
fûe
;

904 #i‡(
NGX_SUPPRESS_WARN
)

905 
	`ngx_°r_nuŒ
(&
fuŒ
);

908 i‡(
«me
->
Àn
) {

909 
fuŒ
 = *
«me
;

911 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
fuŒ
, 0Ë!
NGX_OK
) {

912  
NULL
;

915 
∑π
 = &
cy˛e
->
›í_fûes
.part;

916 
fûe
 = 
∑π
->
ñts
;

918 
i
 = 0; ; i++) {

920 i‡(
i
 >
∑π
->
√…s
) {

921 i‡(
∑π
->
√xt
 =
NULL
) {

924 
∑π
 =Ö¨t->
√xt
;

925 
fûe
 = 
∑π
->
ñts
;

926 
i
 = 0;

929 i‡(
fuŒ
.
Àn
 !
fûe
[
i
].
«me
.len) {

933 i‡(
	`ngx_°rcmp
(
fuŒ
.
d©a
, 
fûe
[
i
].
«me
.data) == 0) {

934  &
fûe
[
i
];

939 
fûe
 = 
	`ngx_li°_push
(&
cy˛e
->
›í_fûes
);

940 i‡(
fûe
 =
NULL
) {

941  
NULL
;

944 i‡(
«me
->
Àn
) {

945 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

946 
fûe
->
«me
 = 
fuŒ
;

949 
fûe
->
fd
 = 
ngx_°dîr
;

950 
fûe
->
«me
 = *name;

953 
fûe
->
Êush
 = 
NULL
;

954 
fûe
->
d©a
 = 
NULL
;

956  
fûe
;

957 
	}
}

961 
	$ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
)

963 
ngx_uöt_t
 
i
;

964 
ngx_li°_∑π_t
 *
∑π
;

965 
ngx_›í_fûe_t
 *
fûe
;

967 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "flush files");

969 
∑π
 = &
cy˛e
->
›í_fûes
.part;

970 
fûe
 = 
∑π
->
ñts
;

972 
i
 = 0; ; i++) {

974 i‡(
i
 >
∑π
->
√…s
) {

975 i‡(
∑π
->
√xt
 =
NULL
) {

978 
∑π
 =Ö¨t->
√xt
;

979 
fûe
 = 
∑π
->
ñts
;

980 
i
 = 0;

983 i‡(
fûe
[
i
].
Êush
) {

984 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

987 
	}
}

990 
ngx_cde˛


991 
	$ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
, 
ngx_îr_t
 
îr
,

992 c⁄° *
fmt
, ...)

994 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
], *
p
, *
œ°
;

995 
va_li°
 
¨gs
;

997 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

999 
	`va_°¨t
(
¨gs
, 
fmt
);

1000 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
, 
fmt
, 
¨gs
);

1001 
	`va_íd
(
¨gs
);

1003 i‡(
îr
) {

1004 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

1007 i‡(
cf
->
c⁄f_fûe
 =
NULL
) {

1008 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s", 
p
 - 
îr°r
,Érrstr);

1012 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1013 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in commandÜine",

1014 
p
 - 
îr°r
,Érrstr);

1018 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in %s:%ui",

1019 
p
 - 
îr°r
,Érrstr,

1020 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
, cf->c⁄f_fûe->
löe
);

1021 
	}
}

1025 
	$ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1027 *
p
 = 
c⁄f
;

1029 
ngx_°r_t
 *
vÆue
;

1030 
ngx_Êag_t
 *
Â
;

1031 
ngx_c⁄f_po°_t
 *
po°
;

1033 
Â
 = (
ngx_Êag_t
 *Ë(
p
 + 
cmd
->
off£t
);

1035 i‡(*
Â
 !
NGX_CONF_UNSET
) {

1039 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1041 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "on") == 0) {

1042 *
Â
 = 1;

1044 } i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "off") == 0) {

1045 *
Â
 = 0;

1048 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1051 
vÆue
[1].
d©a
, 
cmd
->
«me
.data);

1052  
NGX_CONF_ERROR
;

1055 i‡(
cmd
->
po°
) {

1056 
po°
 = 
cmd
->post;

1057  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
Â
);

1060  
NGX_CONF_OK
;

1061 
	}
}

1065 
	$ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1067 *
p
 = 
c⁄f
;

1069 
ngx_°r_t
 *
fõld
, *
vÆue
;

1070 
ngx_c⁄f_po°_t
 *
po°
;

1072 
fõld
 = (
ngx_°r_t
 *Ë(
p
 + 
cmd
->
off£t
);

1074 i‡(
fõld
->
d©a
) {

1078 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1080 *
fõld
 = 
vÆue
[1];

1082 i‡(
cmd
->
po°
) {

1083 
po°
 = 
cmd
->post;

1084  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
fõld
);

1087  
NGX_CONF_OK
;

1088 
	}
}

1092 
	$ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1094 *
p
 = 
c⁄f
;

1096 
ngx_°r_t
 *
vÆue
, *
s
;

1097 
ngx_¨øy_t
 **
a
;

1098 
ngx_c⁄f_po°_t
 *
po°
;

1100 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1102 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1103 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

1104 i‡(*
a
 =
NULL
) {

1105  
NGX_CONF_ERROR
;

1109 
s
 = 
	`ngx_¨øy_push
(*
a
);

1110 i‡(
s
 =
NULL
) {

1111  
NGX_CONF_ERROR
;

1114 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1116 *
s
 = 
vÆue
[1];

1118 i‡(
cmd
->
po°
) {

1119 
po°
 = 
cmd
->post;

1120  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
s
);

1123  
NGX_CONF_OK
;

1124 
	}
}

1128 
	$ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1130 *
p
 = 
c⁄f
;

1132 
ngx_°r_t
 *
vÆue
;

1133 
ngx_¨øy_t
 **
a
;

1134 
ngx_keyvÆ_t
 *
kv
;

1135 
ngx_c⁄f_po°_t
 *
po°
;

1137 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1139 i‡(*
a
 =
NULL
) {

1140 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_keyvÆ_t
));

1141 i‡(*
a
 =
NULL
) {

1142  
NGX_CONF_ERROR
;

1146 
kv
 = 
	`ngx_¨øy_push
(*
a
);

1147 i‡(
kv
 =
NULL
) {

1148  
NGX_CONF_ERROR
;

1151 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1153 
kv
->
key
 = 
vÆue
[1];

1154 
kv
->
vÆue
 = value[2];

1156 i‡(
cmd
->
po°
) {

1157 
po°
 = 
cmd
->post;

1158  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
kv
);

1161  
NGX_CONF_OK
;

1162 
	}
}

1166 
	$ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1168 *
p
 = 
c⁄f
;

1170 
ngx_öt_t
 *
≈
;

1171 
ngx_°r_t
 *
vÆue
;

1172 
ngx_c⁄f_po°_t
 *
po°
;

1175 
≈
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1177 i‡(*
≈
 !
NGX_CONF_UNSET
) {

1181 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1182 *
≈
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1183 i‡(*
≈
 =
NGX_ERROR
) {

1187 i‡(
cmd
->
po°
) {

1188 
po°
 = 
cmd
->post;

1189  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
≈
);

1192  
NGX_CONF_OK
;

1193 
	}
}

1197 
	$ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1199 *
p
 = 
c⁄f
;

1201 
size_t
 *
•
;

1202 
ngx_°r_t
 *
vÆue
;

1203 
ngx_c⁄f_po°_t
 *
po°
;

1206 
•
 = (
size_t
 *Ë(
p
 + 
cmd
->
off£t
);

1207 i‡(*
•
 !
NGX_CONF_UNSET_SIZE
) {

1211 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1213 *
•
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

1214 i‡(*
•
 =(
size_t
Ë
NGX_ERROR
) {

1218 i‡(
cmd
->
po°
) {

1219 
po°
 = 
cmd
->post;

1220  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1223  
NGX_CONF_OK
;

1224 
	}
}

1228 
	$ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1230 *
p
 = 
c⁄f
;

1232 
off_t
 *
›
;

1233 
ngx_°r_t
 *
vÆue
;

1234 
ngx_c⁄f_po°_t
 *
po°
;

1237 
›
 = (
off_t
 *Ë(
p
 + 
cmd
->
off£t
);

1238 i‡(*
›
 !
NGX_CONF_UNSET
) {

1242 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1244 *
›
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

1245 i‡(*
›
 =(
off_t
Ë
NGX_ERROR
) {

1249 i‡(
cmd
->
po°
) {

1250 
po°
 = 
cmd
->post;

1251  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
›
);

1254  
NGX_CONF_OK
;

1255 
	}
}

1259 
	$ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1261 *
p
 = 
c⁄f
;

1263 
ngx_m£c_t
 *
m•
;

1264 
ngx_°r_t
 *
vÆue
;

1265 
ngx_c⁄f_po°_t
 *
po°
;

1268 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

1269 i‡(*
m•
 !
NGX_CONF_UNSET_MSEC
) {

1273 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1275 *
m•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

1276 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1280 i‡(
cmd
->
po°
) {

1281 
po°
 = 
cmd
->post;

1282  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
m•
);

1285  
NGX_CONF_OK
;

1286 
	}
}

1290 
	$ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1292 *
p
 = 
c⁄f
;

1294 
time_t
 *
•
;

1295 
ngx_°r_t
 *
vÆue
;

1296 
ngx_c⁄f_po°_t
 *
po°
;

1299 
•
 = (
time_t
 *Ë(
p
 + 
cmd
->
off£t
);

1300 i‡(*
•
 !
NGX_CONF_UNSET
) {

1304 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1306 *
•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

1307 i‡(*
•
 =(
time_t
Ë
NGX_ERROR
) {

1311 i‡(
cmd
->
po°
) {

1312 
po°
 = 
cmd
->post;

1313  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1316  
NGX_CONF_OK
;

1317 
	}
}

1321 
	$ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1323 *
p
 = 
c⁄f
;

1325 
ngx_°r_t
 *
vÆue
;

1326 
ngx_bufs_t
 *
bufs
;

1329 
bufs
 = (
ngx_bufs_t
 *Ë(
p
 + 
cmd
->
off£t
);

1330 i‡(
bufs
->
num
) {

1334 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1336 
bufs
->
num
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1337 i‡(
bufs
->
num
 =
NGX_ERROR
 || bufs->num == 0) {

1341 
bufs
->
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

1342 i‡(
bufs
->
size
 =(
size_t
Ë
NGX_ERROR
 || bufs->size == 0) {

1346  
NGX_CONF_OK
;

1347 
	}
}

1351 
	$ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1353 *
p
 = 
c⁄f
;

1355 
ngx_uöt_t
 *
≈
, 
i
;

1356 
ngx_°r_t
 *
vÆue
;

1357 
ngx_c⁄f_íum_t
 *
e
;

1359 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1361 i‡(*
≈
 !
NGX_CONF_UNSET_UINT
) {

1365 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1366 
e
 = 
cmd
->
po°
;

1368 
i
 = 0; 
e
[i].
«me
.
Àn
 != 0; i++) {

1369 i‡(
e
[
i
].
«me
.
Àn
 !
vÆue
[1].len

1370 || 
	`ngx_°rˇ£cmp
(
e
[
i
].
«me
.
d©a
, 
vÆue
[1].data) != 0)

1375 *
≈
 = 
e
[
i
].
vÆue
;

1377  
NGX_CONF_OK
;

1380 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1381 "övÆid vÆuê\"%s\"", 
vÆue
[1].
d©a
);

1383  
NGX_CONF_ERROR
;

1384 
	}
}

1388 
	$ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1390 *
p
 = 
c⁄f
;

1392 
ngx_uöt_t
 *
≈
, 
i
, 
m
;

1393 
ngx_°r_t
 *
vÆue
;

1394 
ngx_c⁄f_bômask_t
 *
mask
;

1397 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1398 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1399 
mask
 = 
cmd
->
po°
;

1401 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1402 
m
 = 0; 
mask
[m].
«me
.
Àn
 != 0; m++) {

1404 i‡(
mask
[
m
].
«me
.
Àn
 !
vÆue
[
i
].len

1405 || 
	`ngx_°rˇ£cmp
(
mask
[
m
].
«me
.
d©a
, 
vÆue
[
i
].data) != 0)

1410 i‡(*
≈
 & 
mask
[
m
].mask) {

1411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1412 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1415 *
≈
 |
mask
[
m
].mask;

1421 i‡(
mask
[
m
].
«me
.
Àn
 == 0) {

1422 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1423 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1425  
NGX_CONF_ERROR
;

1429  
NGX_CONF_OK
;

1430 
	}
}

1436 
	$ngx_c⁄f_unsuµ‹ãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1439 
	}
}

1445 
	$ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1447 
ngx_c⁄f_dïªˇãd_t
 *
d
 = 
po°
;

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1452 
d
->
ﬁd_«me
, d->
√w_«me
);

1454  
NGX_CONF_OK
;

1455 
	}
}

1459 
	$ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1461 
ngx_c⁄f_num_bounds_t
 *
bounds
 = 
po°
;

1462 
ngx_öt_t
 *
≈
 = 
d©a
;

1464 i‡(
bounds
->
high
 == -1) {

1465 i‡(*
≈
 >
bounds
->
low
) {

1466  
NGX_CONF_OK
;

1469 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1471 
bounds
->
low
);

1473  
NGX_CONF_ERROR
;

1476 i‡(*
≈
 >
bounds
->
low
 && *≈ <bounds->
high
) {

1477  
NGX_CONF_OK
;

1480 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1482 
bounds
->
low
, bounds->
high
);

1484  
NGX_CONF_ERROR
;

1485 
	}
}

	@src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_CONF_FILE_H_INCLUDED_


9 
	#_NGX_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

49 
	#NGX_DIRECT_CONF
 0x00010000

	)

51 
	#NGX_MAIN_CONF
 0x01000000

	)

52 
	#NGX_ANY_CONF
 0x1F000000

	)

56 
	#NGX_CONF_UNSET
 -1

	)

57 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

58 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

59 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

60 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

63 
	#NGX_CONF_OK
 
NULL


	)

64 
	#NGX_CONF_ERROR
 (*Ë-1

	)

66 
	#NGX_CONF_BLOCK_START
 1

	)

67 
	#NGX_CONF_BLOCK_DONE
 2

	)

68 
	#NGX_CONF_FILE_DONE
 3

	)

70 
	#NGX_CORE_MODULE
 0x45524F43

	)

71 
	#NGX_CONF_MODULE
 0x464E4F43

	)

74 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

77 
	sngx_comm™d_s
 {

78 
ngx_°r_t
 
	m«me
;

79 
ngx_uöt_t
 
	mty≥
;

80 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

81 
ngx_uöt_t
 
	mc⁄f
;

82 
ngx_uöt_t
 
	moff£t
;

83 *
	mpo°
;

86 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

89 
	sngx_›í_fûe_s
 {

90 
ngx_fd_t
 
	mfd
;

91 
ngx_°r_t
 
	m«me
;

93 (*
	mÊush
)(
ngx_›í_fûe_t
 *
	mfûe
, 
ngx_log_t
 *
	mlog
);

94 *
	md©a
;

99 
ngx_fûe_t
 
	mfûe
;

100 
ngx_buf_t
 *
	mbuf„r
;

101 
ngx_buf_t
 *
	mdump
;

102 
ngx_uöt_t
 
	mlöe
;

103 } 
	tngx_c⁄f_fûe_t
;

107 
ngx_°r_t
 
	m«me
;

108 
ngx_buf_t
 *
	mbuf„r
;

109 } 
	tngx_c⁄f_dump_t
;

112 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

113 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

116 
	sngx_c⁄f_s
 {

117 *
	m«me
;

118 
ngx_¨øy_t
 *
	m¨gs
;

120 
ngx_cy˛e_t
 *
	mcy˛e
;

121 
ngx_poﬁ_t
 *
	mpoﬁ
;

122 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

123 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

124 
ngx_log_t
 *
	mlog
;

126 *
	m˘x
;

127 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

128 
ngx_uöt_t
 
	mcmd_ty≥
;

130 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

131 *
	mh™dÀr_c⁄f
;

135 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

136 *
	td©a
, *
	tc⁄f
);

139 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

140 } 
	tngx_c⁄f_po°_t
;

144 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

145 *
	mﬁd_«me
;

146 *
	m√w_«me
;

147 } 
	tngx_c⁄f_dïªˇãd_t
;

151 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

152 
ngx_öt_t
 
	mlow
;

153 
ngx_öt_t
 
	mhigh
;

154 } 
	tngx_c⁄f_num_bounds_t
;

158 
ngx_°r_t
 
	m«me
;

159 
ngx_uöt_t
 
	mvÆue
;

160 } 
	tngx_c⁄f_íum_t
;

163 
	#NGX_CONF_BITMASK_SET
 1

	)

166 
ngx_°r_t
 
	m«me
;

167 
ngx_uöt_t
 
	mmask
;

168 } 
	tngx_c⁄f_bômask_t
;

172 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

173 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

176 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

180 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

181 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

182 
c⁄f
 = ; \

183 }

	)

185 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

186 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

187 
c⁄f
 = ; \

188 }

	)

190 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

191 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

192 
c⁄f
 = ; \

193 }

	)

195 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

196 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

197 
c⁄f
 = ; \

198 }

	)

200 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

201 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

202 
c⁄f
 = ; \

203 }

	)

205 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

206 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

207 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

208 }

	)

210 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

211 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

212 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

213 }

	)

215 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

216 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

217 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

218 }

	)

220 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

221 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

222 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

223 }

	)

225 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

226 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

227 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

228 }

	)

230 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

231 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

232 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

233 }

	)

235 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

236 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

237 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

238 }

	)

240 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

241 i‡(
c⁄f
.
d©a
 =
NULL
) { \

242 i‡(
¥ev
.
d©a
) { \

243 
c⁄f
.
Àn
 = 
¥ev
.len; \

244 
c⁄f
.
d©a
 = 
¥ev
.data; \

246 
c⁄f
.
Àn
 = () - 1; \

247 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

249 }

	)

251 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

252 i‡(
c⁄f
.
num
 == 0) { \

253 i‡(
¥ev
.
num
) { \

254 
c⁄f
.
num
 = 
¥ev
.num; \

255 
c⁄f
.
size
 = 
¥ev
.size; \

257 
c⁄f
.
num
 = 
deÁu…_num
; \

258 
c⁄f
.
size
 = 
deÁu…_size
; \

260 }

	)

262 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

263 i‡(
c⁄f
 == 0) { \

264 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

265 }

	)

268 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

269 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

270 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

273 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

274 
ngx_uöt_t
 
c⁄f_¥efix
);

275 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

276 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

277 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

280 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

281 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

282 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

283 *
c⁄f
);

284 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

285 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

286 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

287 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

288 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

289 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

290 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

291 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

292 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

	@src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

47 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


48 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

52 #i‡!(
NGX_WIN32
)

54 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

55 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

57 
	#ngx_øndom
 
øndom


	)

60 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

61 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

62 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

63 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

65 #i‡(
NGX_LINUXTHREADS
)

66 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

67 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

69 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

70 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

73 
	#ngx_cde˛


	)

74 
	#ngx_libc_cde˛


	)

95 
öçå_t
 
	tngx_öt_t
;

96 
uöçå_t
 
	tngx_uöt_t
;

97 
öçå_t
 
	tngx_Êag_t
;

100 
	#NGX_INT32_LEN
 (("-2147483648"Ë- 1)

	)

101 
	#NGX_INT64_LEN
 (("-9223372036854775808"Ë- 1)

	)

103 #i‡(
NGX_PTR_SIZE
 == 4)

104 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

105 
	#NGX_MAX_INT_T_VALUE
 2147483647

	)

108 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

109 
	#NGX_MAX_INT_T_VALUE
 9223372036854775807

	)

113 #i‚de‡
NGX_ALIGNMENT


114 
	#NGX_ALIGNMENT
 (Ë

	)

117 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

118 
	#ngx_Æign_±r
(
p
, 
a
) \

119 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

122 
	#ngx_ab‹t
 
ab‹t


	)

126 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

130 #i‚de‡
ngx_ölöe


131 
	#ngx_ölöe
 
ölöe


	)

134 #i‚de‡
INADDR_NONE


135 
	#INADDR_NONE
 ((Ë-1)

	)

138 #ifde‡
MAXHOSTNAMELEN


139 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

141 
	#NGX_MAXHOSTNAMELEN
 256

	)

145 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

146 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

149 #i‡(
NGX_COMPAT
)

151 
	#NGX_COMPAT_BEGIN
(
¶Ÿs
Ë
uöt64_t
 
•¨e
[¶Ÿs];

	)

152 
	#NGX_COMPAT_END


	)

156 
	#NGX_COMPAT_BEGIN
(
¶Ÿs
)

	)

157 
	#NGX_COMPAT_END


	)

	@src/core/ngx_connection.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_os_io_t
 
	gngx_io
;

16 
ngx_døö_c⁄√˘i⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

19 
ngx_li°íög_t
 *

20 
	$ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, 
sockaddr
 *sockaddr,

21 
sockÀn_t
 
sockÀn
)

23 
size_t
 
Àn
;

24 
ngx_li°íög_t
 *
ls
;

25 
sockaddr
 *
ß
;

26 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

28 
ls
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
li°íög
);

29 i‡(
ls
 =
NULL
) {

30  
NULL
;

33 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

35 
ß
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
sockÀn
);

36 i‡(
ß
 =
NULL
) {

37  
NULL
;

40 
	`ngx_mem˝y
(
ß
, 
sockaddr
, 
sockÀn
);

42 
ls
->
sockaddr
 = 
ß
;

43 
ls
->
sockÀn
 = socklen;

45 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
sockÀn
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

46 
ls
->
addr_ãxt
.
Àn
 =Üen;

48 
ls
->
sockaddr
->
ß_Ámûy
) {

49 #i‡(
NGX_HAVE_INET6
)

50 
AF_INET6
:

51 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

54 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

55 
AF_UNIX
:

56 
ls
->
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

57 
Àn
++;

60 
AF_INET
:

61 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

64 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SOCKADDR_STRLEN
;

68 
ls
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

69 i‡(
ls
->
addr_ãxt
.
d©a
 =
NULL
) {

70  
NULL
;

73 
	`ngx_mem˝y
(
ls
->
addr_ãxt
.
d©a
, 
ãxt
, 
Àn
);

75 #i‡!(
NGX_WIN32
)

76 
	`ngx_rbåì_öô
(&
ls
->
rbåì
, &ls->
£¡öñ
, 
ngx_udp_rbåì_ö£π_vÆue
);

79 
ls
->
fd
 = (
ngx_sockë_t
) -1;

80 
ls
->
ty≥
 = 
SOCK_STREAM
;

82 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

83 
ls
->
rcvbuf
 = -1;

84 
ls
->
¢dbuf
 = -1;

86 #i‡(
NGX_HAVE_SETFIB
)

87 
ls
->
£tfib
 = -1;

90 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

91 
ls
->
Á°›í
 = -1;

94  
ls
;

95 
	}
}

98 
ngx_öt_t


99 
	$ngx_˛⁄e_li°íög
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_li°íög_t
 *
ls
)

101 #i‡(
NGX_HAVE_REUSEPORT
)

103 
ngx_öt_t
 
n
;

104 
ngx_c‹e_c⁄f_t
 *
ccf
;

105 
ngx_li°íög_t
 
ﬁs
;

107 i‡(!
ls
->
ªu£p‹t
 ||Üs->
w‹kî
 != 0) {

108  
NGX_OK
;

111 
ﬁs
 = *
ls
;

113 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

115 
n
 = 1;Ç < 
ccf
->
w‹kî_¥o˚s£s
;Ç++) {

119 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

120 i‡(
ls
 =
NULL
) {

121  
NGX_ERROR
;

124 *
ls
 = 
ﬁs
;

125 
ls
->
w‹kî
 = 
n
;

130  
NGX_OK
;

131 
	}
}

134 
ngx_öt_t


135 
	$ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

137 
size_t
 
Àn
;

138 
ngx_uöt_t
 
i
;

139 
ngx_li°íög_t
 *
ls
;

140 
sockÀn_t
 
ﬁí
;

141 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 || 
NGX_HAVE_TCP_FASTOPEN
)

142 
ngx_îr_t
 
îr
;

144 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

145 
ac˚±_fûãr_¨g
 
af
;

147 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

148 
timeout
;

150 #i‡(
NGX_HAVE_REUSEPORT
)

151 
ªu£p‹t
;

154 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

155 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

157 
ls
[
i
].
sockaddr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_sockaddr_t
));

158 i‡(
ls
[
i
].
sockaddr
 =
NULL
) {

159  
NGX_ERROR
;

162 
ls
[
i
].
sockÀn
 = (
ngx_sockaddr_t
);

163 i‡(
	`gësock«me
(
ls
[
i
].
fd
,Üs[i].
sockaddr
, &ls[i].
sockÀn
) == -1) {

164 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

166 "sockë #%d faûed", 
ls
[
i
].
fd
);

167 
ls
[
i
].
ign‹e
 = 1;

171 i‡(
ls
[
i
].
sockÀn
 > (
sockÀn_t
Ë(
ngx_sockaddr_t
)) {

172 
ls
[
i
].
sockÀn
 = (
ngx_sockaddr_t
);

175 
ls
[
i
].
sockaddr
->
ß_Ámûy
) {

177 #i‡(
NGX_HAVE_INET6
)

178 
AF_INET6
:

179 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

180 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

184 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

185 
AF_UNIX
:

186 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

187 
Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

191 
AF_INET
:

192 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

193 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

197 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

199 "™ unsuµ‹ãdÖrŸocﬁ famûy", 
ls
[
i
].
fd
);

200 
ls
[
i
].
ign‹e
 = 1;

204 
ls
[
i
].
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
);

205 i‡(
ls
[
i
].
addr_ãxt
.
d©a
 =
NULL
) {

206  
NGX_ERROR
;

209 
Àn
 = 
	`ngx_sock_¡›
(
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
,

210 
ls
[
i
].
addr_ãxt
.
d©a
, 
Àn
, 1);

211 i‡(
Àn
 == 0) {

212  
NGX_ERROR
;

215 
ls
[
i
].
addr_ãxt
.
Àn
 =Üen;

217 
ls
[
i
].
backlog
 = 
NGX_LISTEN_BACKLOG
;

219 
ﬁí
 = ();

221 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&ls[i].
ty≥
,

222 &
ﬁí
)

225 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

226 "gësock›t(SO_TYPEË%V faûed", &
ls
[
i
].
addr_ãxt
);

227 
ls
[
i
].
ign‹e
 = 1;

231 
ﬁí
 = ();

233 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&ls[i].
rcvbuf
,

234 &
ﬁí
)

237 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

239 &
ls
[
i
].
addr_ãxt
);

241 
ls
[
i
].
rcvbuf
 = -1;

244 
ﬁí
 = ();

246 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&ls[i].
¢dbuf
,

247 &
ﬁí
)

250 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

252 &
ls
[
i
].
addr_ãxt
);

254 
ls
[
i
].
¢dbuf
 = -1;

260 #i‡(
NGX_HAVE_SETFIB
)

262 
ﬁí
 = ();

264 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

265 (*Ë&
ls
[
i
].
£tfib
, &
ﬁí
)

268 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

270 &
ls
[
i
].
addr_ãxt
);

272 
ls
[
i
].
£tfib
 = -1;

278 #i‡(
NGX_HAVE_REUSEPORT
)

280 
ªu£p‹t
 = 0;

281 
ﬁí
 = ();

283 #ifde‡
SO_REUSEPORT_LB


285 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT_LB
,

286 (*Ë&
ªu£p‹t
, &
ﬁí
)

289 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

291 &
ls
[
i
].
addr_ãxt
);

294 
ls
[
i
].
ªu£p‹t
 =Ñeuseport ? 1 : 0;

299 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT
,

300 (*Ë&
ªu£p‹t
, &
ﬁí
)

303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

305 &
ls
[
i
].
addr_ãxt
);

308 
ls
[
i
].
ªu£p‹t
 =Ñeuseport ? 1 : 0;

314 i‡(
ls
[
i
].
ty≥
 !
SOCK_STREAM
) {

318 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

320 
ﬁí
 = ();

322 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_FASTOPEN
,

323 (*Ë&
ls
[
i
].
Á°›í
, &
ﬁí
)

326 
îr
 = 
ngx_sockë_î∫o
;

328 i‡(
îr
 !
NGX_EOPNOTSUPP
 &&Éº !
NGX_ENOPROTOOPT


329 && 
îr
 !
NGX_EINVAL
)

331 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

333 &
ls
[
i
].
addr_ãxt
);

336 
ls
[
i
].
Á°›í
 = -1;

341 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

343 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

344 
ﬁí
 = (
ac˚±_fûãr_¨g
);

346 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
af
, &
ﬁí
)

349 
îr
 = 
ngx_sockë_î∫o
;

351 i‡(
îr
 =
NGX_EINVAL
) {

355 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

357 &
ls
[
i
].
addr_ãxt
);

361 i‡(
ﬁí
 < (
ac˚±_fûãr_¨g
Ë|| 
af
.
af_«me
[0] == '\0') {

365 
ls
[
i
].
ac˚±_fûãr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 16);

366 i‡(
ls
[
i
].
ac˚±_fûãr
 =
NULL
) {

367  
NGX_ERROR
;

370 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
,

371 (
u_ch¨
 *Ë
af
.
af_«me
, 16);

374 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

376 
timeout
 = 0;

377 
ﬁí
 = ();

379 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
timeout
, &
ﬁí
)

382 
îr
 = 
ngx_sockë_î∫o
;

384 i‡(
îr
 =
NGX_EOPNOTSUPP
) {

388 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

390 &
ls
[
i
].
addr_ãxt
);

394 i‡(
ﬁí
 < (Ë|| 
timeout
 == 0) {

398 
ls
[
i
].
de„ºed_ac˚±
 = 1;

402  
NGX_OK
;

403 
	}
}

406 
ngx_öt_t


407 
	$ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

409 
ªu£addr
;

410 
ngx_uöt_t
 
i
, 
åõs
, 
Áûed
;

411 
ngx_îr_t
 
îr
;

412 
ngx_log_t
 *
log
;

413 
ngx_sockë_t
 
s
;

414 
ngx_li°íög_t
 *
ls
;

416 
ªu£addr
 = 1;

417 #i‡(
NGX_SUPPRESS_WARN
)

418 
Áûed
 = 0;

421 
log
 = 
cy˛e
->log;

425 
åõs
 = 5;Åries;Åries--) {

426 
Áûed
 = 0;

430 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

431 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

433 i‡(
ls
[
i
].
ign‹e
) {

437 #i‡(
NGX_HAVE_REUSEPORT
)

439 i‡(
ls
[
i
].
add_ªu£p‹t
) {

447 
ªu£p‹t
 = 1;

449 #ifde‡
SO_REUSEPORT_LB


451 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT_LB
,

452 (c⁄° *Ë&
ªu£p‹t
, ())

455 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

458 &
ls
[
i
].
addr_ãxt
);

463 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT
,

464 (c⁄° *Ë&
ªu£p‹t
, ())

467 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

469 &
ls
[
i
].
addr_ãxt
);

473 
ls
[
i
].
add_ªu£p‹t
 = 0;

477 i‡(
ls
[
i
].
fd
 !(
ngx_sockë_t
) -1) {

481 i‡(
ls
[
i
].
öhîôed
) {

490 
s
 = 
	`ngx_sockë
(
ls
[
i
].
sockaddr
->
ß_Ámûy
,Üs[i].
ty≥
, 0);

492 i‡(
s
 =(
ngx_sockë_t
) -1) {

493 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

494 
ngx_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

495  
NGX_ERROR
;

498 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

499 (c⁄° *Ë&
ªu£addr
, ())

502 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

504 &
ls
[
i
].
addr_ãxt
);

506 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

507 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

508 
ngx_˛o£_sockë_n
 " %V failed",

509 &
ls
[
i
].
addr_ãxt
);

512  
NGX_ERROR
;

515 #i‡(
NGX_HAVE_REUSEPORT
)

517 i‡(
ls
[
i
].
ªu£p‹t
 && !
ngx_ã°_c⁄fig
) {

518 
ªu£p‹t
;

520 
ªu£p‹t
 = 1;

522 #ifde‡
SO_REUSEPORT_LB


524 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEPORT_LB
,

525 (c⁄° *Ë&
ªu£p‹t
, ())

528 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

530 &
ls
[
i
].
addr_ãxt
);

532 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

533 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

534 
ngx_˛o£_sockë_n
 " %V failed",

535 &
ls
[
i
].
addr_ãxt
);

538  
NGX_ERROR
;

543 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEPORT
,

544 (c⁄° *Ë&
ªu£p‹t
, ())

547 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

549 &
ls
[
i
].
addr_ãxt
);

551 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

552 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

553 
ngx_˛o£_sockë_n
 " %V failed",

554 &
ls
[
i
].
addr_ãxt
);

557  
NGX_ERROR
;

563 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

565 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

566 
ùv6⁄ly
;

568 
ùv6⁄ly
 = 
ls
[
i
].ipv6only;

570 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

571 (c⁄° *Ë&
ùv6⁄ly
, ())

574 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

576 &
ls
[
i
].
addr_ãxt
);

582 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

583 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

584 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

585 
ngx_n⁄blockög_n
 " %V failed",

586 &
ls
[
i
].
addr_ãxt
);

588 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

589 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

590 
ngx_˛o£_sockë_n
 " %V failed",

591 &
ls
[
i
].
addr_ãxt
);

594  
NGX_ERROR
;

598 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

599 "böd(Ë%V #%d ", &
ls
[
i
].
addr_ãxt
, 
s
);

601 i‡(
	`böd
(
s
, 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
) == -1) {

602 
îr
 = 
ngx_sockë_î∫o
;

604 i‡(
îr
 !
NGX_EADDRINUSE
 || !
ngx_ã°_c⁄fig
) {

605 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

606 "böd(Ëtÿ%V faûed", &
ls
[
i
].
addr_ãxt
);

609 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

610 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

611 
ngx_˛o£_sockë_n
 " %V failed",

612 &
ls
[
i
].
addr_ãxt
);

615 i‡(
îr
 !
NGX_EADDRINUSE
) {

616  
NGX_ERROR
;

619 i‡(!
ngx_ã°_c⁄fig
) {

620 
Áûed
 = 1;

626 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

628 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

629 
mode_t
 
mode
;

630 
u_ch¨
 *
«me
;

632 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

633 
mode
 = (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
);

635 i‡(
	`chmod
((*Ë
«me
, 
mode
) == -1) {

636 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

637 "chmod(Ë\"%s\" faûed", 
«me
);

640 i‡(
ngx_ã°_c⁄fig
) {

641 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

642 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

643 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

649 i‡(
ls
[
i
].
ty≥
 !
SOCK_STREAM
) {

650 
ls
[
i
].
fd
 = 
s
;

654 i‡(
	`li°í
(
s
, 
ls
[
i
].
backlog
) == -1) {

655 
îr
 = 
ngx_sockë_î∫o
;

663 i‡(
îr
 !
NGX_EADDRINUSE
 || !
ngx_ã°_c⁄fig
) {

664 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

666 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

669 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

670 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

671 
ngx_˛o£_sockë_n
 " %V failed",

672 &
ls
[
i
].
addr_ãxt
);

675 i‡(
îr
 !
NGX_EADDRINUSE
) {

676  
NGX_ERROR
;

679 i‡(!
ngx_ã°_c⁄fig
) {

680 
Áûed
 = 1;

686 
ls
[
i
].
li°í
 = 1;

688 
ls
[
i
].
fd
 = 
s
;

691 i‡(!
Áûed
) {

697 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

700 
	`ngx_m¶ìp
(500);

703 i‡(
Áûed
) {

704 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0, "still couldÇot bind()");

705  
NGX_ERROR
;

708  
NGX_OK
;

709 
	}
}

713 
	$ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

715 
vÆue
;

716 
ngx_uöt_t
 
i
;

717 
ngx_li°íög_t
 *
ls
;

719 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

720 
ac˚±_fûãr_¨g
 
af
;

723 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

724 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

726 
ls
[
i
].
log
 = *ls[i].
logp
;

728 i‡(
ls
[
i
].
rcvbuf
 != -1) {

729 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

730 (c⁄° *Ë&
ls
[
i
].
rcvbuf
, ())

733 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

735 
ls
[
i
].
rcvbuf
, &ls[i].
addr_ãxt
);

739 i‡(
ls
[
i
].
¢dbuf
 != -1) {

740 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

741 (c⁄° *Ë&
ls
[
i
].
¢dbuf
, ())

744 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

746 
ls
[
i
].
¢dbuf
, &ls[i].
addr_ãxt
);

750 i‡(
ls
[
i
].
kì∑live
) {

751 
vÆue
 = (
ls
[
i
].
kì∑live
 == 1) ? 1 : 0;

753 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

754 (c⁄° *Ë&
vÆue
, ())

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

759 
vÆue
, &
ls
[
i
].
addr_ãxt
);

763 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

765 i‡(
ls
[
i
].
kìpidÀ
) {

766 
vÆue
 = 
ls
[
i
].
kìpidÀ
;

768 #i‡(
NGX_KEEPALIVE_FACTOR
)

769 
vÆue
 *
NGX_KEEPALIVE_FACTOR
;

772 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

773 (c⁄° *Ë&
vÆue
, ())

776 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

778 
vÆue
, &
ls
[
i
].
addr_ãxt
);

782 i‡(
ls
[
i
].
kìpötvl
) {

783 
vÆue
 = 
ls
[
i
].
kìpötvl
;

785 #i‡(
NGX_KEEPALIVE_FACTOR
)

786 
vÆue
 *
NGX_KEEPALIVE_FACTOR
;

789 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
,

790 (c⁄° *Ë&
vÆue
, ())

793 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

795 
vÆue
, &
ls
[
i
].
addr_ãxt
);

799 i‡(
ls
[
i
].
kìp˙t
) {

800 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
,

801 (c⁄° *Ë&
ls
[
i
].
kìp˙t
, ())

804 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

806 
ls
[
i
].
kìp˙t
, &ls[i].
addr_ãxt
);

812 #i‡(
NGX_HAVE_SETFIB
)

813 i‡(
ls
[
i
].
£tfib
 != -1) {

814 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

815 (c⁄° *Ë&
ls
[
i
].
£tfib
, ())

818 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

820 
ls
[
i
].
£tfib
, &ls[i].
addr_ãxt
);

825 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

826 i‡(
ls
[
i
].
Á°›í
 != -1) {

827 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_FASTOPEN
,

828 (c⁄° *Ë&
ls
[
i
].
Á°›í
, ())

831 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

833 
ls
[
i
].
Á°›í
, &ls[i].
addr_ãxt
);

840 
t˝_nodñay
 = 1;

842 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

843 (c⁄° *Ë&
t˝_nodñay
, ())

846 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

848 &
ls
[
i
].
addr_ãxt
);

853 i‡(
ls
[
i
].
li°í
) {

857 i‡(
	`li°í
(
ls
[
i
].
fd
,Üs[i].
backlog
) == -1) {

858 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

860 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

869 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

871 #ifde‡
SO_ACCEPTFILTER


873 i‡(
ls
[
i
].
dñëe_de„ºed
) {

874 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, 
NULL
, 0)

877 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

880 &
ls
[
i
].
addr_ãxt
);

882 i‡(
ls
[
i
].
ac˚±_fûãr
) {

883 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

886 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

892 
ls
[
i
].
de„ºed_ac˚±
 = 0;

895 i‡(
ls
[
i
].
add_de„ºed
) {

896 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

897 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
af
.
af_«me
,

898 (
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
, 16);

900 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

901 &
af
, (
ac˚±_fûãr_¨g
))

904 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

907 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

911 
ls
[
i
].
de„ºed_ac˚±
 = 1;

916 #ifde‡
TCP_DEFER_ACCEPT


918 i‡(
ls
[
i
].
add_de„ºed
 ||Üs[i].
dñëe_de„ºed
) {

920 i‡(
ls
[
i
].
add_de„ºed
) {

927 
vÆue
 = 1;

930 
vÆue
 = 0;

933 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
,

934 &
vÆue
, ())

937 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

940 
vÆue
, &
ls
[
i
].
addr_ãxt
);

946 i‡(
ls
[
i
].
add_de„ºed
) {

947 
ls
[
i
].
de„ºed_ac˚±
 = 1;

954 #i‡(
NGX_HAVE_IP_RECVDSTADDR
)

956 i‡(
ls
[
i
].
wûdˇrd


957 && 
ls
[
i
].
ty≥
 =
SOCK_DGRAM


958 && 
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET
)

960 
vÆue
 = 1;

962 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_IP
, 
IP_RECVDSTADDR
,

963 (c⁄° *Ë&
vÆue
, ())

966 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

969 &
ls
[
i
].
addr_ãxt
);

973 #ñi‡(
NGX_HAVE_IP_PKTINFO
)

975 i‡(
ls
[
i
].
wûdˇrd


976 && 
ls
[
i
].
ty≥
 =
SOCK_DGRAM


977 && 
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET
)

979 
vÆue
 = 1;

981 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_IP
, 
IP_PKTINFO
,

982 (c⁄° *Ë&
vÆue
, ())

985 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

988 &
ls
[
i
].
addr_ãxt
);

994 #i‡(
NGX_HAVE_INET6
 && 
NGX_HAVE_IPV6_RECVPKTINFO
)

996 i‡(
ls
[
i
].
wûdˇrd


997 && 
ls
[
i
].
ty≥
 =
SOCK_DGRAM


998 && 
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
)

1000 
vÆue
 = 1;

1002 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_IPV6
, 
IPV6_RECVPKTINFO
,

1003 (c⁄° *Ë&
vÆue
, ())

1006 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

1009 &
ls
[
i
].
addr_ãxt
);

1017 
	}
}

1021 
	$ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

1023 
ngx_uöt_t
 
i
;

1024 
ngx_li°íög_t
 *
ls
;

1025 
ngx_c⁄√˘i⁄_t
 *
c
;

1027 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

1031 
ngx_ac˚±_muãx_hñd
 = 0;

1032 
ngx_u£_ac˚±_muãx
 = 0;

1034 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

1035 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

1037 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

1039 i‡(
c
) {

1040 i‡(
c
->
ªad
->
a˘ive
) {

1041 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1049 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0);

1052 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

1056 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

1058 
c
->
fd
 = (
ngx_sockë_t
) -1;

1061 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1062 "˛o£Üi°íög %V #%d ", &
ls
[
i
].
addr_ãxt
,Üs[i].
fd
);

1064 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

1065 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

1066 
ngx_˛o£_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

1069 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1071 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX


1072 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER


1073 && 
ngx_√w_bö¨y
 == 0)

1075 
u_ch¨
 *
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

1077 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1078 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

1079 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

1085 
ls
[
i
].
fd
 = (
ngx_sockë_t
) -1;

1088 
cy˛e
->
li°íög
.
√…s
 = 0;

1089 
	}
}

1092 
ngx_c⁄√˘i⁄_t
 *

1093 
	$ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
)

1095 
ngx_uöt_t
 
ö°™˚
;

1096 
ngx_evít_t
 *
ªv
, *
wev
;

1097 
ngx_c⁄√˘i⁄_t
 *
c
;

1101 i‡(
ngx_cy˛e
->
fûes
 && (
ngx_uöt_t
Ë
s
 >ngx_cy˛e->
fûes_n
) {

1102 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

1105 
s
, 
ngx_cy˛e
->
fûes_n
);

1106  
NULL
;

1109 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

1111 i‡(
c
 =
NULL
) {

1112 
	`ngx_døö_c⁄√˘i⁄s
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
);

1113 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

1116 i‡(
c
 =
NULL
) {

1117 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

1119 
ngx_cy˛e
->
c⁄√˘i⁄_n
);

1121  
NULL
;

1124 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
->
d©a
;

1125 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
--;

1127 i‡(
ngx_cy˛e
->
fûes
 &&Çgx_cy˛e->fûes[
s
] =
NULL
) {

1128 
ngx_cy˛e
->
fûes
[
s
] = 
c
;

1131 
ªv
 = 
c
->
ªad
;

1132 
wev
 = 
c
->
wrôe
;

1134 
	`ngx_memzîo
(
c
, (
ngx_c⁄√˘i⁄_t
));

1136 
c
->
ªad
 = 
ªv
;

1137 
c
->
wrôe
 = 
wev
;

1138 
c
->
fd
 = 
s
;

1139 
c
->
log
 =Üog;

1141 
ö°™˚
 = 
ªv
->instance;

1143 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

1144 
	`ngx_memzîo
(
wev
, (
ngx_evít_t
));

1146 
ªv
->
ö°™˚
 = !instance;

1147 
wev
->
ö°™˚
 = !instance;

1149 
ªv
->
ödex
 = 
NGX_INVALID_INDEX
;

1150 
wev
->
ödex
 = 
NGX_INVALID_INDEX
;

1152 
ªv
->
d©a
 = 
c
;

1153 
wev
->
d©a
 = 
c
;

1155 
wev
->
wrôe
 = 1;

1157  
c
;

1158 
	}
}

1162 
	$ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

1164 
c
->
d©a
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

1165 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
;

1166 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
++;

1168 i‡(
ngx_cy˛e
->
fûes
 &&Çgx_cy˛e->fûes[
c
->
fd
] == c) {

1169 
ngx_cy˛e
->
fûes
[
c
->
fd
] = 
NULL
;

1171 
	}
}

1175 
	$ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

1177 
ngx_îr_t
 
îr
;

1178 
ngx_uöt_t
 
log_îr‹
, 
Àvñ
;

1179 
ngx_sockë_t
 
fd
;

1181 i‡(
c
->
fd
 =(
ngx_sockë_t
) -1) {

1182 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "connectionálready closed");

1186 i‡(
c
->
ªad
->
timî_£t
) {

1187 
	`ngx_dñ_timî
(
c
->
ªad
);

1190 i‡(
c
->
wrôe
->
timî_£t
) {

1191 
	`ngx_dñ_timî
(
c
->
wrôe
);

1194 i‡(!
c
->
sh¨ed
) {

1195 i‡(
ngx_dñ_c⁄n
) {

1196 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

1199 i‡(
c
->
ªad
->
a˘ive
 || c->ªad->
dißbÀd
) {

1200 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

1203 i‡(
c
->
wrôe
->
a˘ive
 || c->wrôe->
dißbÀd
) {

1204 
	`ngx_dñ_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLOSE_EVENT
);

1209 i‡(
c
->
ªad
->
po°ed
) {

1210 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

1213 i‡(
c
->
wrôe
->
po°ed
) {

1214 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

1217 
c
->
ªad
->
˛o£d
 = 1;

1218 
c
->
wrôe
->
˛o£d
 = 1;

1220 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

1222 
log_îr‹
 = 
c
->log_error;

1224 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

1226 
fd
 = 
c
->fd;

1227 
c
->
fd
 = (
ngx_sockë_t
) -1;

1229 i‡(
c
->
sh¨ed
) {

1233 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

1235 
îr
 = 
ngx_sockë_î∫o
;

1237 i‡(
îr
 =
NGX_ECONNRESET
 ||Éº =
NGX_ENOTCONN
) {

1239 
log_îr‹
) {

1241 
NGX_ERROR_INFO
:

1242 
Àvñ
 = 
NGX_LOG_INFO
;

1245 
NGX_ERROR_ERR
:

1246 
Àvñ
 = 
NGX_LOG_ERR
;

1250 
Àvñ
 = 
NGX_LOG_CRIT
;

1254 
Àvñ
 = 
NGX_LOG_CRIT
;

1257 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ngx_˛o£_sockë_n
 " %d faûed", 
fd
);

1259 
	}
}

1263 
	$ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
)

1265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1266 "ªußbÀ c⁄√˘i⁄: %ui", 
ªußbÀ
);

1268 i‡(
c
->
ªußbÀ
) {

1269 
	`ngx_queue_ªmove
(&
c
->
queue
);

1270 
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_n
--;

1272 #i‡(
NGX_STAT_STUB
)

1273 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, -1);

1277 
c
->
ªußbÀ
 =Ñeusable;

1279 i‡(
ªußbÀ
) {

1282 
	`ngx_queue_ö£π_hód
(

1283 (
ngx_queue_t
 *Ë&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
, &
c
->
queue
);

1284 
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_n
++;

1286 #i‡(
NGX_STAT_STUB
)

1287 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, 1);

1290 
	}
}

1294 
	$ngx_døö_c⁄√˘i⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

1296 
ngx_uöt_t
 
i
, 
n
;

1297 
ngx_queue_t
 *
q
;

1298 
ngx_c⁄√˘i⁄_t
 *
c
;

1300 
n
 = 
	`ngx_max
(
	`ngx_mö
(32, 
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_n
 / 8), 1);

1302 
i
 = 0; i < 
n
; i++) {

1303 i‡(
	`ngx_queue_em±y
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
)) {

1307 
q
 = 
	`ngx_queue_œ°
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

1308 
c
 = 
	`ngx_queue_d©a
(
q
, 
ngx_c⁄√˘i⁄_t
, 
queue
);

1310 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1313 
c
->
˛o£
 = 1;

1314 
c
->
ªad
->
	`h™dÀr
(c->read);

1316 
	}
}

1320 
	$ngx_˛o£_idÀ_c⁄√˘i⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

1322 
ngx_uöt_t
 
i
;

1323 
ngx_c⁄√˘i⁄_t
 *
c
;

1325 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

1327 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

1331 i‡(
c
[
i
].
fd
 !(
ngx_sockë_t
Ë-1 && c[i].
idÀ
) {

1332 
c
[
i
].
˛o£
 = 1;

1333 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

1336 
	}
}

1339 
ngx_öt_t


1340 
	$ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

1341 
ngx_uöt_t
 
p‹t
)

1343 
sockÀn_t
 
Àn
;

1344 
ngx_uöt_t
 
addr
;

1345 
ngx_sockaddr_t
 
ß
;

1346 
sockaddr_ö
 *
sö
;

1347 #i‡(
NGX_HAVE_INET6
)

1348 
ngx_uöt_t
 
i
;

1349 
sockaddr_ö6
 *
sö6
;

1352 
addr
 = 0;

1354 i‡(
c
->
loˇl_sockÀn
) {

1355 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

1357 #i‡(
NGX_HAVE_INET6
)

1358 
AF_INET6
:

1359 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

1361 
i
 = 0; 
addr
 == 0 && i < 16; i++) {

1362 
addr
 |
sö6
->
sö6_addr
.
s6_addr
[
i
];

1368 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1369 
AF_UNIX
:

1370 
addr
 = 1;

1375 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

1376 
addr
 = 
sö
->
sö_addr
.
s_addr
;

1381 i‡(
addr
 == 0) {

1383 
Àn
 = (
ngx_sockaddr_t
);

1385 i‡(
	`gësock«me
(
c
->
fd
, &
ß
.
sockaddr
, &
Àn
) == -1) {

1386 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, "getsockname() failed");

1387  
NGX_ERROR
;

1390 
c
->
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
Àn
);

1391 i‡(
c
->
loˇl_sockaddr
 =
NULL
) {

1392  
NGX_ERROR
;

1395 
	`ngx_mem˝y
(
c
->
loˇl_sockaddr
, &
ß
, 
Àn
);

1397 
c
->
loˇl_sockÀn
 = 
Àn
;

1400 i‡(
s
 =
NULL
) {

1401  
NGX_OK
;

1404 
s
->
Àn
 = 
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
,

1405 
s
->
d©a
, s->
Àn
, 
p‹t
);

1407  
NGX_OK
;

1408 
	}
}

1411 
ngx_öt_t


1412 
	$ngx_t˝_nodñay
(
ngx_c⁄√˘i⁄_t
 *
c
)

1414 
t˝_nodñay
;

1416 i‡(
c
->
t˝_nodñay
 !
NGX_TCP_NODELAY_UNSET
) {

1417  
NGX_OK
;

1420 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0, "tcp_nodelay");

1422 
t˝_nodñay
 = 1;

1424 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

1425 (c⁄° *Ë&
t˝_nodñay
, ())

1428 #i‡(
NGX_SOLARIS
)

1429 i‡(
c
->
log_îr‹
 =
NGX_ERROR_INFO
) {

1432 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

1434 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

1437 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

1439  
NGX_ERROR
;

1443 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

1445  
NGX_ERROR
;

1448 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

1450  
NGX_OK
;

1451 
	}
}

1454 
ngx_öt_t


1455 
	$ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
)

1457 
ngx_uöt_t
 
Àvñ
;

1461 i‡((
îr
 =
NGX_ECONNRESET


1462 #i‡(
NGX_WIN32
)

1463 || 
îr
 =
NGX_ECONNABORTED


1465 Ë&& 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_ECONNRESET
)

1470 #i‡(
NGX_SOLARIS
)

1471 i‡(
îr
 =
NGX_EINVAL
 && 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_EINVAL
) {

1476 i‡(
îr
 == 0

1477 || 
îr
 =
NGX_ECONNRESET


1478 #i‡(
NGX_WIN32
)

1479 || 
îr
 =
NGX_ECONNABORTED


1481 || 
îr
 =
NGX_EPIPE


1483 || 
îr
 =
NGX_ENOTCONN


1484 || 
îr
 =
NGX_ETIMEDOUT


1485 || 
îr
 =
NGX_ECONNREFUSED


1486 || 
îr
 =
NGX_ENETDOWN


1487 || 
îr
 =
NGX_ENETUNREACH


1488 || 
îr
 =
NGX_EHOSTDOWN


1489 || 
îr
 =
NGX_EHOSTUNREACH
)

1491 
c
->
log_îr‹
) {

1493 
NGX_ERROR_IGNORE_EINVAL
:

1494 
NGX_ERROR_IGNORE_ECONNRESET
:

1495 
NGX_ERROR_INFO
:

1496 
Àvñ
 = 
NGX_LOG_INFO
;

1500 
Àvñ
 = 
NGX_LOG_ERR
;

1504 
Àvñ
 = 
NGX_LOG_ALERT
;

1507 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1509  
NGX_ERROR
;

1510 
	}
}

	@src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

31 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

32 
	mkìpidÀ
;

33 
	mkìpötvl
;

34 
	mkìp˙t
;

38 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

40 *
	m£rvîs
;

42 
ngx_log_t
 
	mlog
;

43 
ngx_log_t
 *
	mlogp
;

45 
size_t
 
	mpoﬁ_size
;

47 
size_t
 
	mpo°_ac˚±_buf„r_size
;

49 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

51 
ngx_li°íög_t
 *
	m¥evious
;

52 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

54 
ngx_rbåì_t
 
	mrbåì
;

55 
ngx_rbåì_node_t
 
	m£¡öñ
;

57 
ngx_uöt_t
 
	mw‹kî
;

59 
	m›í
:1;

60 
	mªmaö
:1;

61 
	mign‹e
:1;

63 
	mbound
:1;

64 
	möhîôed
:1;

65 
	mn⁄blockög_ac˚±
:1;

66 
	mli°í
:1;

67 
	mn⁄blockög
:1;

68 
	msh¨ed
:1;

69 
	maddr_¡›
:1;

70 
	mwûdˇrd
:1;

72 #i‡(
NGX_HAVE_INET6
)

73 
	mùv6⁄ly
:1;

75 
	mªu£p‹t
:1;

76 
	madd_ªu£p‹t
:1;

77 
	mkì∑live
:2;

79 
	mde„ºed_ac˚±
:1;

80 
	mdñëe_de„ºed
:1;

81 
	madd_de„ºed
:1;

82 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

83 *
	mac˚±_fûãr
;

85 #i‡(
NGX_HAVE_SETFIB
)

86 
	m£tfib
;

89 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

90 
	mÁ°›í
;

97 
	mNGX_ERROR_ALERT
 = 0,

98 
	mNGX_ERROR_ERR
,

99 
	mNGX_ERROR_INFO
,

100 
	mNGX_ERROR_IGNORE_ECONNRESET
,

101 
	mNGX_ERROR_IGNORE_EINVAL


102 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

106 
	mNGX_TCP_NODELAY_UNSET
 = 0,

107 
	mNGX_TCP_NODELAY_SET
,

108 
	mNGX_TCP_NODELAY_DISABLED


109 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

113 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

114 
	mNGX_TCP_NOPUSH_SET
,

115 
	mNGX_TCP_NOPUSH_DISABLED


116 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

119 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

120 
	#NGX_SSL_BUFFERED
 0x01

	)

121 
	#NGX_HTTP_V2_BUFFERED
 0x02

	)

124 
	sngx_c⁄√˘i⁄_s
 {

125 *
	md©a
;

126 
ngx_evít_t
 *
	mªad
;

127 
ngx_evít_t
 *
	mwrôe
;

129 
ngx_sockë_t
 
	mfd
;

131 
ngx_ªcv_±
 
	mªcv
;

132 
ngx_£nd_±
 
	m£nd
;

133 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

134 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

136 
ngx_li°íög_t
 *
	mli°íög
;

138 
off_t
 
	m£¡
;

140 
ngx_log_t
 *
	mlog
;

142 
ngx_poﬁ_t
 *
	mpoﬁ
;

144 
	mty≥
;

146 
sockaddr
 *
	msockaddr
;

147 
sockÀn_t
 
	msockÀn
;

148 
ngx_°r_t
 
	maddr_ãxt
;

150 
ngx_°r_t
 
	m¥oxy_¥Ÿocﬁ_addr
;

151 
ö_p‹t_t
 
	m¥oxy_¥Ÿocﬁ_p‹t
;

153 #i‡(
NGX_SSL
 || 
NGX_COMPAT
)

154 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

157 
ngx_udp_c⁄√˘i⁄_t
 *
	mudp
;

159 
sockaddr
 *
	mloˇl_sockaddr
;

160 
sockÀn_t
 
	mloˇl_sockÀn
;

162 
ngx_buf_t
 *
	mbuf„r
;

164 
ngx_queue_t
 
	mqueue
;

166 
ngx_©omic_uöt_t
 
	mnumbî
;

168 
ngx_uöt_t
 
	mªque°s
;

170 
	mbuf„ªd
:8;

172 
	mlog_îr‹
:3;

174 
	mtimedout
:1;

175 
	mîr‹
:1;

176 
	mde°royed
:1;

178 
	midÀ
:1;

179 
	mªußbÀ
:1;

180 
	m˛o£
:1;

181 
	msh¨ed
:1;

183 
	m£ndfûe
:1;

184 
	m¢dlow©
:1;

185 
	mt˝_nodñay
:2;

186 
	mt˝_n›ush
:2;

188 
	m√ed_œ°_buf
:1;

190 #i‡(
NGX_HAVE_AIO_SENDFILE
 || 
NGX_COMPAT
)

191 
	mbusy_cou¡
:2;

194 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

195 
ngx_thªad_èsk_t
 *
	m£ndfûe_èsk
;

200 
	#ngx_£t_c⁄√˘i⁄_log
(
c
, 
l
) \

202 
c
->
log
->
fûe
 = 
l
->file; \

203 
c
->
log
->
√xt
 = 
l
->next; \

204 
c
->
log
->
wrôî
 = 
l
->writer; \

205 
c
->
log
->
wd©a
 = 
l
->wdata; \

206 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) { \

207 
c
->
log
->
log_Àvñ
 = 
l
->log_level; \

208 }

	)

211 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, 
sockaddr
 *sockaddr,

212 
sockÀn_t
 
sockÀn
);

213 
ngx_öt_t
 
ngx_˛⁄e_li°íög
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_li°íög_t
 *
ls
);

214 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

215 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

216 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

217 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

218 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

219 
ngx_˛o£_idÀ_c⁄√˘i⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

220 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

221 
ngx_uöt_t
 
p‹t
);

222 
ngx_öt_t
 
ngx_t˝_nodñay
(
ngx_c⁄√˘i⁄_t
 *
c
);

223 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

225 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

226 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

228 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

16 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

17 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

18 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

19 
ngx_chaö_s
 
	tngx_chaö_t
;

20 
ngx_log_s
 
	tngx_log_t
;

21 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

22 
ngx_comm™d_s
 
	tngx_comm™d_t
;

23 
ngx_fûe_s
 
	tngx_fûe_t
;

24 
ngx_evít_s
 
	tngx_evít_t
;

25 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

26 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

27 
ngx_thªad_èsk_s
 
	tngx_thªad_èsk_t
;

28 
ngx_s¶_s
 
	tngx_s¶_t
;

29 
ngx_s¶_c⁄√˘i⁄_s
 
	tngx_s¶_c⁄√˘i⁄_t
;

30 
ngx_udp_c⁄√˘i⁄_s
 
	tngx_udp_c⁄√˘i⁄_t
;

32 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

33 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

36 
	#NGX_OK
 0

	)

37 
	#NGX_ERROR
 -1

	)

38 
	#NGX_AGAIN
 -2

	)

39 
	#NGX_BUSY
 -3

	)

40 
	#NGX_DONE
 -4

	)

41 
	#NGX_DECLINED
 -5

	)

42 
	#NGX_ABORT
 -6

	)

45 
	~<ngx_î∫o.h
>

46 
	~<ngx_©omic.h
>

47 
	~<ngx_thªad.h
>

48 
	~<ngx_rbåì.h
>

49 
	~<ngx_time.h
>

50 
	~<ngx_sockë.h
>

51 
	~<ngx_°rög.h
>

52 
	~<ngx_fûes.h
>

53 
	~<ngx_shmem.h
>

54 
	~<ngx_¥o˚ss.h
>

55 
	~<ngx_u£r.h
>

56 
	~<ngx_dl›í.h
>

57 
	~<ngx_∑r£.h
>

58 
	~<ngx_∑r£_time.h
>

59 
	~<ngx_log.h
>

60 
	~<ngx_Æloc.h
>

61 
	~<ngx_∑Œoc.h
>

62 
	~<ngx_buf.h
>

63 
	~<ngx_queue.h
>

64 
	~<ngx_¨øy.h
>

65 
	~<ngx_li°.h
>

66 
	~<ngx_hash.h
>

67 
	~<ngx_fûe.h
>

68 
	~<ngx_¸c.h
>

69 
	~<ngx_¸c32.h
>

70 
	~<ngx_murmurhash.h
>

71 #i‡(
NGX_PCRE
)

72 
	~<ngx_ªgex.h
>

74 
	~<ngx_ødix_åì.h
>

75 
	~<ngx_times.h
>

76 
	~<ngx_rwlock.h
>

77 
	~<ngx_shmtx.h
>

78 
	~<ngx_¶ab.h
>

79 
	~<ngx_öë.h
>

80 
	~<ngx_cy˛e.h
>

81 
	~<ngx_ªsﬁvî.h
>

82 #i‡(
NGX_OPENSSL
)

83 
	~<ngx_evít_›ís¶.h
>

85 
	~<ngx_¥o˚ss_cy˛e.h
>

86 
	~<ngx_c⁄f_fûe.h
>

87 
	~<ngx_moduÀ.h
>

88 
	~<ngx_›í_fûe_ˇche.h
>

89 
	~<ngx_os.h
>

90 
	~<ngx_c⁄√˘i⁄.h
>

91 
	~<ngx_sy¶og.h
>

92 
	~<ngx_¥oxy_¥Ÿocﬁ.h
>

95 
	#LF
 (
u_ch¨
Ë'\n'

	)

96 
	#CR
 (
u_ch¨
Ë'\r'

	)

97 
	#CRLF
 "\r\n"

	)

100 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

101 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

102 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

104 
	`ngx_˝uöfo
();

106 #i‡(
NGX_HAVE_OPENAT
)

107 
	#NGX_DISABLE_SYMLINKS_OFF
 0

	)

108 
	#NGX_DISABLE_SYMLINKS_ON
 1

	)

109 
	#NGX_DISABLE_SYMLINKS_NOTOWNER
 2

	)

	@src/core/ngx_cpuinfo.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(–
__i386__
 || 
__amd64__
 ) && ( 
__GNUC__
 || 
__INTEL_COMPILER
 ))

15 
ngx_ölöe
 
ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
);

18 #i‡–
__i386__
 )

20 
ngx_ölöe
 

21 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

30 
	`__asm__
 (

42 : : "a" (
i
), "D" (
buf
) : "ecx", "edx", "esi", "memory" );

43 
	}
}

49 
ngx_ölöe
 

50 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

52 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

54 
	`__asm__
 (

58 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
Ë: "a" (
i
) );

60 
buf
[0] = 
óx
;

61 
buf
[1] = 
ebx
;

62 
buf
[2] = 
edx
;

63 
buf
[3] = 
ecx
;

64 
	}
}

73 
	$ngx_˝uöfo
()

75 
u_ch¨
 *
víd‹
;

76 
uöt32_t
 
vbuf
[5], 
˝u
[4], 
modñ
;

78 
vbuf
[0] = 0;

79 
vbuf
[1] = 0;

80 
vbuf
[2] = 0;

81 
vbuf
[3] = 0;

82 
vbuf
[4] = 0;

84 
	`ngx_˝uid
(0, 
vbuf
);

86 
víd‹
 = (
u_ch¨
 *Ë&
vbuf
[1];

88 i‡(
vbuf
[0] == 0) {

92 
	`ngx_˝uid
(1, 
˝u
);

94 i‡(
	`ngx_°rcmp
(
víd‹
, "GenuineIntel") == 0) {

96 (
˝u
[0] & 0xf00) >> 8) {

100 
ngx_ˇchñöe_size
 = 32;

105 
ngx_ˇchñöe_size
 = 32;

107 
modñ
 = ((
˝u
[0] & 0xf0000) >> 8) | (cpu[0] & 0xf0);

109 i‡(
modñ
 >= 0xd0) {

111 
ngx_ˇchñöe_size
 = 64;

121 
ngx_ˇchñöe_size
 = 128;

125 } i‡(
	`ngx_°rcmp
(
víd‹
, "AuthenticAMD") == 0) {

126 
ngx_ˇchñöe_size
 = 64;

128 
	}
}

134 
	$ngx_˝uöfo
()

136 
	}
}

	@src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@src/core/ngx_crc32.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

26 
uöt32_t
 
	gngx_¸c32_èbÀ16
[] = {

34 
uöt32_t
 
	gngx_¸c32_èbÀ256
[] = {

102 
uöt32_t
 *
	gngx_¸c32_èbÀ_sh‹t
 = 
ngx_¸c32_èbÀ16
;

105 
ngx_öt_t


106 
	$ngx_¸c32_èbÀ_öô
()

108 *
p
;

110 i‡(((
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t


111 & ~((
uöçå_t
Ë
ngx_ˇchñöe_size
 - 1))

112 =(
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t
)

114  
NGX_OK
;

117 
p
 = 
	`ngx_Æloc
(16 * (
uöt32_t
Ë+ 
ngx_ˇchñöe_size
, 
ngx_cy˛e
->
log
);

118 i‡(
p
 =
NULL
) {

119  
NGX_ERROR
;

122 
p
 = 
	`ngx_Æign_±r
’, 
ngx_ˇchñöe_size
);

124 
	`ngx_mem˝y
(
p
, 
ngx_¸c32_èbÀ16
, 16 * (
uöt32_t
));

126 
ngx_¸c32_èbÀ_sh‹t
 = 
p
;

128  
NGX_OK
;

129 
	}
}

	@src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@src/core/ngx_crypt.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_¸y±.h
>

10 
	~<ngx_md5.h
>

11 
	~<ngx_sha1.h
>

14 #i‡(
NGX_CRYPT
)

16 
ngx_öt_t
 
ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

18 
ngx_öt_t
 
ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

19 
u_ch¨
 **
í¸y±ed
);

20 
ngx_öt_t
 
ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

22 
ngx_öt_t
 
ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

23 
u_ch¨
 **
í¸y±ed
);

26 
u_ch¨
 *
ngx_¸y±_to64
(u_ch¨ *
p
, 
uöt32_t
 
v
, 
size_t
 
n
);

29 
ngx_öt_t


30 
	$ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

32 i‡(
	`ngx_°∫cmp
(
ß…
, "$apr1$", ("$apr1$") - 1) == 0) {

33  
	`ngx_¸y±_≠r1
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

35 } i‡(
	`ngx_°∫cmp
(
ß…
, "{PLAIN}", ("{PLAIN}") - 1) == 0) {

36  
	`ngx_¸y±_∂aö
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

38 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SSHA}", ("{SSHA}") - 1) == 0) {

39  
	`ngx_¸y±_ssha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

41 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SHA}", ("{SHA}") - 1) == 0) {

42  
	`ngx_¸y±_sha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

47  
	`ngx_libc_¸y±
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

48 
	}
}

51 
ngx_öt_t


52 
	$ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

54 
ngx_öt_t
 
n
;

55 
ngx_uöt_t
 
i
;

56 
u_ch¨
 *
p
, *
œ°
, 
föÆ
[16];

57 
size_t
 
ß…Àn
, 
keyÀn
;

58 
ngx_md5_t
 
md5
, 
˘x1
;

62 
keyÀn
 = 
	`ngx_°æí
(
key
);

66 
ß…
 += ("$apr1$") - 1;

67 
œ°
 = 
ß…
 + 8;

68 
p
 = 
ß…
; *∞&& *∞!'$' &&Ö < 
œ°
;Ö++) { }

69 
ß…Àn
 = 
p
 - 
ß…
;

73 
	`ngx_md5_öô
(&
md5
);

74 
	`ngx_md5_upd©e
(&
md5
, 
key
, 
keyÀn
);

75 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) "$apr1$", ("$apr1$") - 1);

76 
	`ngx_md5_upd©e
(&
md5
, 
ß…
, 
ß…Àn
);

78 
	`ngx_md5_öô
(&
˘x1
);

79 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

80 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

81 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

82 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

84 
n
 = 
keyÀn
;Ç > 0;Ç -= 16) {

85 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 
n
 > 16 ? 16 :Ç);

88 
	`ngx_memzîo
(
föÆ
, (final));

90 
i
 = 
keyÀn
; i; i >>= 1) {

91 i‡(
i
 & 1) {

92 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 1);

95 
	`ngx_md5_upd©e
(&
md5
, 
key
, 1);

99 
	`ngx_md5_föÆ
(
föÆ
, &
md5
);

101 
i
 = 0; i < 1000; i++) {

102 
	`ngx_md5_öô
(&
˘x1
);

104 i‡(
i
 & 1) {

105 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

108 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

111 i‡(
i
 % 3) {

112 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

115 i‡(
i
 % 7) {

116 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

119 i‡(
i
 & 1) {

120 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

123 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

126 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

131 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("$≠r1$"Ë- 1 + 
ß…Àn
 + 1 + 22 + 1);

132 i‡(*
í¸y±ed
 =
NULL
) {

133  
NGX_ERROR
;

136 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "$apr1$", ("$apr1$") - 1);

137 
p
 = 
	`ngx_c›y
’, 
ß…
, 
ß…Àn
);

138 *
p
++ = '$';

140 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 0]<<16) | (final[ 6]<<8) | final[12], 4);

141 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 1]<<16) | (final[ 7]<<8) | final[13], 4);

142 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 2]<<16) | (final[ 8]<<8) | final[14], 4);

143 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 3]<<16) | (final[ 9]<<8) | final[15], 4);

144 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 4]<<16) | (final[10]<<8) | final[ 5], 4);

145 
p
 = 
	`ngx_¸y±_to64
’, 
föÆ
[11], 2);

146 *
p
 = '\0';

148  
NGX_OK
;

149 
	}
}

152 
u_ch¨
 *

153 
	$ngx_¸y±_to64
(
u_ch¨
 *
p
, 
uöt32_t
 
v
, 
size_t
 
n
)

155 
u_ch¨
 
ôﬂ64
[] =

158 
n
--) {

159 *
p
++ = 
ôﬂ64
[
v
 & 0x3f];

160 
v
 >>= 6;

163  
p
;

164 
	}
}

167 
ngx_öt_t


168 
	$ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

170 
size_t
 
Àn
;

171 
u_ch¨
 *
p
;

173 
Àn
 = 
	`ngx_°æí
(
key
);

175 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("{PLAIN}"Ë- 1 + 
Àn
 + 1);

176 i‡(*
í¸y±ed
 =
NULL
) {

177  
NGX_ERROR
;

180 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{PLAIN}", ("{PLAIN}") - 1);

181 
	`ngx_mem˝y
(
p
, 
key
, 
Àn
 + 1);

183  
NGX_OK
;

184 
	}
}

187 
ngx_öt_t


188 
	$ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

190 
size_t
 
Àn
;

191 
ngx_öt_t
 
rc
;

192 
ngx_°r_t
 
ícoded
, 
decoded
;

193 
ngx_sha1_t
 
sha1
;

199 
ícoded
.
d©a
 = 
ß…
 + ("{SSHA}") - 1;

200 
ícoded
.
Àn
 = 
	`ngx_°æí
”ncoded.
d©a
);

202 
Àn
 = 
	`ngx_max
(
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len), 20);

204 
decoded
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

205 i‡(
decoded
.
d©a
 =
NULL
) {

206  
NGX_ERROR
;

209 
rc
 = 
	`ngx_decode_ba£64
(&
decoded
, &
ícoded
);

211 i‡(
rc
 !
NGX_OK
 || 
decoded
.
Àn
 < 20) {

212 
decoded
.
Àn
 = 20;

217 
	`ngx_sha1_öô
(&
sha1
);

218 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

219 
	`ngx_sha1_upd©e
(&
sha1
, 
decoded
.
d©a
 + 20, decoded.
Àn
 - 20);

220 
	`ngx_sha1_föÆ
(
decoded
.
d©a
, &
sha1
);

224 
Àn
 = ("{SSHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

226 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

227 i‡(*
í¸y±ed
 =
NULL
) {

228  
NGX_ERROR
;

231 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SSHA}", ("{SSHA}") - 1);

232 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

233 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

235  
NGX_OK
;

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

242 
size_t
 
Àn
;

243 
ngx_°r_t
 
ícoded
, 
decoded
;

244 
ngx_sha1_t
 
sha1
;

245 
u_ch¨
 
dige°
[20];

249 
decoded
.
Àn
 = (
dige°
);

250 
decoded
.
d©a
 = 
dige°
;

252 
	`ngx_sha1_öô
(&
sha1
);

253 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

254 
	`ngx_sha1_föÆ
(
dige°
, &
sha1
);

256 
Àn
 = ("{SHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

258 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

259 i‡(*
í¸y±ed
 =
NULL
) {

260  
NGX_ERROR
;

263 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SHA}", ("{SHA}") - 1);

264 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

265 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

267  
NGX_OK
;

268 
	}
}

	@src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@src/core/ngx_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
);

14 
ngx_öt_t
 
ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
,

15 
ngx_shm_z⁄e_t
 *
shm_z⁄e
);

16 
ngx_öt_t
 
ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
);

17 
ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
);

18 
ngx_shutdown_timî_h™dÀr
(
ngx_evít_t
 *
ev
);

21 vﬁ©ûê
ngx_cy˛e_t
 *
	gngx_cy˛e
;

22 
ngx_¨øy_t
 
	gngx_ﬁd_cy˛es
;

24 
ngx_poﬁ_t
 *
	gngx_ãmp_poﬁ
;

25 
ngx_evít_t
 
	gngx_˛ó√r_evít
;

26 
ngx_evít_t
 
	gngx_shutdown_evít
;

28 
ngx_uöt_t
 
	gngx_ã°_c⁄fig
;

29 
ngx_uöt_t
 
	gngx_dump_c⁄fig
;

30 
ngx_uöt_t
 
	gngx_quõt_mode
;

34 
ngx_c⁄√˘i⁄_t
 
	gdumb
;

38 
ngx_cy˛e_t
 *

39 
	$ngx_öô_cy˛e
(
ngx_cy˛e_t
 *
ﬁd_cy˛e
)

41 *
rv
;

42 **
£nv
;

43 
ngx_uöt_t
 
i
, 
n
;

44 
ngx_log_t
 *
log
;

45 
ngx_time_t
 *
ç
;

46 
ngx_c⁄f_t
 
c⁄f
;

47 
ngx_poﬁ_t
 *
poﬁ
;

48 
ngx_cy˛e_t
 *
cy˛e
, **
ﬁd
;

49 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
oshm_z⁄e
;

50 
ngx_li°_∑π_t
 *
∑π
, *
›¨t
;

51 
ngx_›í_fûe_t
 *
fûe
;

52 
ngx_li°íög_t
 *
ls
, *
∆s
;

53 
ngx_c‹e_c⁄f_t
 *
ccf
, *
ﬁd_ccf
;

54 
ngx_c‹e_moduÀ_t
 *
moduÀ
;

55 
ho°«me
[
NGX_MAXHOSTNAMELEN
];

57 
	`ngx_timez⁄e_upd©e
();

61 
ç
 = 
	`ngx_timeofday
();

62 
ç
->
£c
 = 0;

64 
	`ngx_time_upd©e
();

67 
log
 = 
ﬁd_cy˛e
->log;

69 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

70 i‡(
poﬁ
 =
NULL
) {

71  
NULL
;

73 
poﬁ
->
log
 =Üog;

75 
cy˛e
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_cy˛e_t
));

76 i‡(
cy˛e
 =
NULL
) {

77 
	`ngx_de°roy_poﬁ
(
poﬁ
);

78  
NULL
;

81 
cy˛e
->
poﬁ
 =Öool;

82 
cy˛e
->
log
 =Üog;

83 
cy˛e
->
ﬁd_cy˛e
 = old_cycle;

85 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
ﬁd_cy˛e
->conf_prefix.len;

86 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_prefix);

87 i‡(
cy˛e
->
c⁄f_¥efix
.
d©a
 =
NULL
) {

88 
	`ngx_de°roy_poﬁ
(
poﬁ
);

89  
NULL
;

92 
cy˛e
->
¥efix
.
Àn
 = 
ﬁd_cy˛e
->prefix.len;

93 
cy˛e
->
¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->prefix);

94 i‡(
cy˛e
->
¥efix
.
d©a
 =
NULL
) {

95 
	`ngx_de°roy_poﬁ
(
poﬁ
);

96  
NULL
;

99 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
ﬁd_cy˛e
->conf_file.len;

100 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ﬁd_cy˛e
->c⁄f_fûe.
Àn
 + 1);

101 i‡(
cy˛e
->
c⁄f_fûe
.
d©a
 =
NULL
) {

102 
	`ngx_de°roy_poﬁ
(
poﬁ
);

103  
NULL
;

105 
	`ngx_˝y°∫
(
cy˛e
->
c⁄f_fûe
.
d©a
, 
ﬁd_cy˛e
->conf_file.data,

106 
ﬁd_cy˛e
->
c⁄f_fûe
.
Àn
 + 1);

108 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
ﬁd_cy˛e
->conf_param.len;

109 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_param);

110 i‡(
cy˛e
->
c⁄f_∑øm
.
d©a
 =
NULL
) {

111 
	`ngx_de°roy_poﬁ
(
poﬁ
);

112  
NULL
;

116 
n
 = 
ﬁd_cy˛e
->
∑ths
.
√…s
 ? old_cycle->paths.nelts : 10;

118 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
∑ths
, 
poﬁ
, 
n
, (
ngx_∑th_t
 *))

119 !
NGX_OK
)

121 
	`ngx_de°roy_poﬁ
(
poﬁ
);

122  
NULL
;

125 
	`ngx_memzîo
(
cy˛e
->
∑ths
.
ñts
, 
n
 * (
ngx_∑th_t
 *));

128 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
c⁄fig_dump
, 
poﬁ
, 1, (
ngx_c⁄f_dump_t
))

129 !
NGX_OK
)

131 
	`ngx_de°roy_poﬁ
(
poﬁ
);

132  
NULL
;

135 
	`ngx_rbåì_öô
(&
cy˛e
->
c⁄fig_dump_rbåì
, &cy˛e->
c⁄fig_dump_£¡öñ
,

136 
ngx_°r_rbåì_ö£π_vÆue
);

138 i‡(
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
) {

139 
n
 = 
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
;

140 
∑π
 = 
ﬁd_cy˛e
->
›í_fûes
.∑π.
√xt
;Öart;Öart =Öart->next) {

141 
n
 +
∑π
->
√…s
;

145 
n
 = 20;

148 i‡(
	`ngx_li°_öô
(&
cy˛e
->
›í_fûes
, 
poﬁ
, 
n
, (
ngx_›í_fûe_t
))

149 !
NGX_OK
)

151 
	`ngx_de°roy_poﬁ
(
poﬁ
);

152  
NULL
;

156 i‡(
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
) {

157 
n
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
;

158 
∑π
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.∑π.
√xt
;Öart;Öart =Öart->next)

160 
n
 +
∑π
->
√…s
;

164 
n
 = 1;

167 i‡(
	`ngx_li°_öô
(&
cy˛e
->
sh¨ed_mem‹y
, 
poﬁ
, 
n
, (
ngx_shm_z⁄e_t
))

168 !
NGX_OK
)

170 
	`ngx_de°roy_poﬁ
(
poﬁ
);

171  
NULL
;

174 
n
 = 
ﬁd_cy˛e
->
li°íög
.
√…s
 ? old_cycle->listening.nelts : 10;

176 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, 
poﬁ
, 
n
, (
ngx_li°íög_t
))

177 !
NGX_OK
)

179 
	`ngx_de°roy_poﬁ
(
poﬁ
);

180  
NULL
;

183 
	`ngx_memzîo
(
cy˛e
->
li°íög
.
ñts
, 
n
 * (
ngx_li°íög_t
));

186 
	`ngx_queue_öô
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

189 
cy˛e
->
c⁄f_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ngx_max_moduÀ
 * (*));

190 i‡(
cy˛e
->
c⁄f_˘x
 =
NULL
) {

191 
	`ngx_de°roy_poﬁ
(
poﬁ
);

192  
NULL
;

196 i‡(
	`gëho°«me
(
ho°«me
, 
NGX_MAXHOSTNAMELEN
) == -1) {

197 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "gethostname() failed");

198 
	`ngx_de°roy_poﬁ
(
poﬁ
);

199  
NULL
;

204 
ho°«me
[
NGX_MAXHOSTNAMELEN
 - 1] = '\0';

205 
cy˛e
->
ho°«me
.
Àn
 = 
	`ngx_°æí
(hostname);

207 
cy˛e
->
ho°«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, cy˛e->ho°«me.
Àn
);

208 i‡(
cy˛e
->
ho°«me
.
d©a
 =
NULL
) {

209 
	`ngx_de°roy_poﬁ
(
poﬁ
);

210  
NULL
;

213 
	`ngx_°æow
(
cy˛e
->
ho°«me
.
d©a
, (
u_ch¨
 *Ëho°«me, cy˛e->ho°«me.
Àn
);

216 i‡(
	`ngx_cy˛e_moduÀs
(
cy˛e
Ë!
NGX_OK
) {

217 
	`ngx_de°roy_poﬁ
(
poﬁ
);

218  
NULL
;

222 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

223 i‡(
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

227 
moduÀ
 = 
cy˛e
->
moduÀs
[
i
]->
˘x
;

229 i‡(
moduÀ
->
¸óã_c⁄f
) {

230 
rv
 = 
moduÀ
->
	`¸óã_c⁄f
(
cy˛e
);

231 i‡(
rv
 =
NULL
) {

232 
	`ngx_de°roy_poﬁ
(
poﬁ
);

233  
NULL
;

235 
cy˛e
->
c⁄f_˘x
[cy˛e->
moduÀs
[
i
]->
ödex
] = 
rv
;

240 
£nv
 = 
ívú⁄
;

243 
	`ngx_memzîo
(&
c⁄f
, (
ngx_c⁄f_t
));

245 
c⁄f
.
¨gs
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 10, (
ngx_°r_t
));

246 i‡(
c⁄f
.
¨gs
 =
NULL
) {

247 
	`ngx_de°roy_poﬁ
(
poﬁ
);

248  
NULL
;

251 
c⁄f
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

252 i‡(
c⁄f
.
ãmp_poﬁ
 =
NULL
) {

253 
	`ngx_de°roy_poﬁ
(
poﬁ
);

254  
NULL
;

258 
c⁄f
.
˘x
 = 
cy˛e
->
c⁄f_˘x
;

259 
c⁄f
.
cy˛e
 = cycle;

260 
c⁄f
.
poﬁ
 =Öool;

261 
c⁄f
.
log
 =Üog;

262 
c⁄f
.
moduÀ_ty≥
 = 
NGX_CORE_MODULE
;

263 
c⁄f
.
cmd_ty≥
 = 
NGX_MAIN_CONF
;

266 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

269 i‡(
	`ngx_c⁄f_∑øm
(&
c⁄f
Ë!
NGX_CONF_OK
) {

270 
ívú⁄
 = 
£nv
;

271 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

272  
NULL
;

275 i‡(
	`ngx_c⁄f_∑r£
(&
c⁄f
, &
cy˛e
->
c⁄f_fûe
Ë!
NGX_CONF_OK
) {

276 
ívú⁄
 = 
£nv
;

277 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

278  
NULL
;

281 i‡(
ngx_ã°_c⁄fig
 && !
ngx_quõt_mode
) {

282 
	`ngx_log_°dîr
(0, "the configuration file %s syntax is ok",

283 
cy˛e
->
c⁄f_fûe
.
d©a
);

286 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

287 i‡(
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

291 
moduÀ
 = 
cy˛e
->
moduÀs
[
i
]->
˘x
;

293 i‡(
moduÀ
->
öô_c⁄f
) {

294 i‡(
moduÀ
->
	`öô_c⁄f
(
cy˛e
,

295 
cy˛e
->
c⁄f_˘x
[cy˛e->
moduÀs
[
i
]->
ödex
])

296 =
NGX_CONF_ERROR
)

298 
ívú⁄
 = 
£nv
;

299 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

300  
NULL
;

305 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SIGNALLER
) {

306  
cy˛e
;

309 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

311 i‡(
ngx_ã°_c⁄fig
) {

313 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

314 
Áûed
;

317 } i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

324 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

325 
ngx_c‹e_moduÀ
);

326 i‡(
ccf
->
pid
.
Àn
 !
ﬁd_ccf
->pid.len

327 || 
	`ngx_°rcmp
(
ccf
->
pid
.
d©a
, 
ﬁd_ccf
->pid.data) != 0)

331 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

332 
Áûed
;

335 
	`ngx_dñëe_pidfûe
(
ﬁd_cy˛e
);

340 i‡(
	`ngx_ã°_lockfûe
(
cy˛e
->
lock_fûe
.
d©a
, 
log
Ë!
NGX_OK
) {

341 
Áûed
;

345 i‡(
	`ngx_¸óã_∑ths
(
cy˛e
, 
ccf
->
u£r
Ë!
NGX_OK
) {

346 
Áûed
;

350 i‡(
	`ngx_log_›í_deÁu…
(
cy˛e
Ë!
NGX_OK
) {

351 
Áûed
;

356 
∑π
 = &
cy˛e
->
›í_fûes
.part;

357 
fûe
 = 
∑π
->
ñts
;

359 
i
 = 0; ; i++) {

361 i‡(
i
 >
∑π
->
√…s
) {

362 i‡(
∑π
->
√xt
 =
NULL
) {

365 
∑π
 =Ö¨t->
√xt
;

366 
fûe
 = 
∑π
->
ñts
;

367 
i
 = 0;

370 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

374 
fûe
[
i
].
fd
 = 
	`ngx_›í_fûe
(fûe[i].
«me
.
d©a
,

375 
NGX_FILE_APPEND
,

376 
NGX_FILE_CREATE_OR_OPEN
,

377 
NGX_FILE_DEFAULT_ACCESS
);

379 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

381 &
fûe
[
i
], fûe[i].
fd
, fûe[i].
«me
.
d©a
);

383 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
) {

384 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

385 
ngx_›í_fûe_n
 " \"%s\" failed",

386 
fûe
[
i
].
«me
.
d©a
);

387 
Áûed
;

390 #i‡!(
NGX_WIN32
)

391 i‡(
	`f˙é
(
fûe
[
i
].
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

392 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

394 
fûe
[
i
].
«me
.
d©a
);

395 
Áûed
;

400 
cy˛e
->
log
 = &cy˛e->
√w_log
;

401 
poﬁ
->
log
 = &
cy˛e
->
√w_log
;

406 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

407 
shm_z⁄e
 = 
∑π
->
ñts
;

409 
i
 = 0; ; i++) {

411 i‡(
i
 >
∑π
->
√…s
) {

412 i‡(
∑π
->
√xt
 =
NULL
) {

415 
∑π
 =Ö¨t->
√xt
;

416 
shm_z⁄e
 = 
∑π
->
ñts
;

417 
i
 = 0;

420 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

421 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

423 &
shm_z⁄e
[
i
].
shm
.
«me
);

424 
Áûed
;

427 
shm_z⁄e
[
i
].
shm
.
log
 = 
cy˛e
->log;

429 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

430 
oshm_z⁄e
 = 
›¨t
->
ñts
;

432 
n
 = 0; ;Ç++) {

434 i‡(
n
 >
›¨t
->
√…s
) {

435 i‡(
›¨t
->
√xt
 =
NULL
) {

438 
›¨t
 = o∑π->
√xt
;

439 
oshm_z⁄e
 = 
›¨t
->
ñts
;

440 
n
 = 0;

443 i‡(
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
oshm_z⁄e
[
n
].shm.name.len) {

447 i‡(
	`ngx_°∫cmp
(
shm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

448 
oshm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

449 
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

455 i‡(
shm_z⁄e
[
i
].
èg
 =
oshm_z⁄e
[
n
].tag

456 && 
shm_z⁄e
[
i
].
shm
.
size
 =
oshm_z⁄e
[
n
].shm.size

457 && !
shm_z⁄e
[
i
].
n‹eu£
)

459 
shm_z⁄e
[
i
].
shm
.
addr
 = 
oshm_z⁄e
[
n
].shm.addr;

460 #i‡(
NGX_WIN32
)

461 
shm_z⁄e
[
i
].
shm
.
h™dÀ
 = 
oshm_z⁄e
[
n
].shm.handle;

464 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
oshm_z⁄e
[
n
].
d©a
)

465 !
NGX_OK
)

467 
Áûed
;

470 
shm_z⁄e_found
;

476 i‡(
	`ngx_shm_Æloc
(&
shm_z⁄e
[
i
].
shm
Ë!
NGX_OK
) {

477 
Áûed
;

480 i‡(
	`ngx_öô_z⁄e_poﬁ
(
cy˛e
, &
shm_z⁄e
[
i
]Ë!
NGX_OK
) {

481 
Áûed
;

484 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
NULL
Ë!
NGX_OK
) {

485 
Áûed
;

488 
shm_z⁄e_found
:

496 i‡(
ﬁd_cy˛e
->
li°íög
.
√…s
) {

497 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

498 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

499 
ls
[
i
].
ªmaö
 = 0;

502 
∆s
 = 
cy˛e
->
li°íög
.
ñts
;

503 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

505 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

506 i‡(
ls
[
i
].
ign‹e
) {

510 i‡(
ls
[
i
].
ªmaö
) {

514 i‡(
ls
[
i
].
ty≥
 !
∆s
[
n
].type) {

518 i‡(
	`ngx_cmp_sockaddr
(
∆s
[
n
].
sockaddr
,Çls[n].
sockÀn
,

519 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
, 1)

520 =
NGX_OK
)

522 
∆s
[
n
].
fd
 = 
ls
[
i
].fd;

523 
∆s
[
n
].
¥evious
 = &
ls
[
i
];

524 
ls
[
i
].
ªmaö
 = 1;

526 i‡(
ls
[
i
].
backlog
 !
∆s
[
n
].backlog) {

527 
∆s
[
n
].
li°í
 = 1;

530 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

536 
∆s
[
n
].
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

538 i‡(
ls
[
i
].
ac˚±_fûãr
 && 
∆s
[
n
].accept_filter) {

539 i‡(
	`ngx_°rcmp
(
ls
[
i
].
ac˚±_fûãr
,

540 
∆s
[
n
].
ac˚±_fûãr
)

543 
∆s
[
n
].
dñëe_de„ºed
 = 1;

544 
∆s
[
n
].
add_de„ºed
 = 1;

547 } i‡(
ls
[
i
].
ac˚±_fûãr
) {

548 
∆s
[
n
].
dñëe_de„ºed
 = 1;

550 } i‡(
∆s
[
n
].
ac˚±_fûãr
) {

551 
∆s
[
n
].
add_de„ºed
 = 1;

555 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

557 i‡(
ls
[
i
].
de„ºed_ac˚±
 && !
∆s
[
n
].deferred_accept) {

558 
∆s
[
n
].
dñëe_de„ºed
 = 1;

560 } i‡(
ls
[
i
].
de„ºed_ac˚±
 !
∆s
[
n
].deferred_accept)

562 
∆s
[
n
].
add_de„ºed
 = 1;

566 #i‡(
NGX_HAVE_REUSEPORT
)

567 i‡(
∆s
[
n
].
ªu£p‹t
 && !
ls
[
i
].reuseport) {

568 
∆s
[
n
].
add_ªu£p‹t
 = 1;

576 i‡(
∆s
[
n
].
fd
 =(
ngx_sockë_t
) -1) {

577 
∆s
[
n
].
›í
 = 1;

578 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

579 i‡(
∆s
[
n
].
ac˚±_fûãr
) {

580 
∆s
[
n
].
add_de„ºed
 = 1;

583 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

584 i‡(
∆s
[
n
].
de„ºed_ac˚±
) {

585 
∆s
[
n
].
add_de„ºed
 = 1;

592 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

593 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

594 
ls
[
i
].
›í
 = 1;

595 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

596 i‡(
ls
[
i
].
ac˚±_fûãr
) {

597 
ls
[
i
].
add_de„ºed
 = 1;

600 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

601 i‡(
ls
[
i
].
de„ºed_ac˚±
) {

602 
ls
[
i
].
add_de„ºed
 = 1;

608 i‡(
	`ngx_›í_li°íög_sockës
(
cy˛e
Ë!
NGX_OK
) {

609 
Áûed
;

612 i‡(!
ngx_ã°_c⁄fig
) {

613 
	`ngx_c⁄figuª_li°íög_sockës
(
cy˛e
);

619 i‡(!
ngx_u£_°dîr
) {

620 (Ë
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
);

623 
poﬁ
->
log
 = 
cy˛e
->log;

625 i‡(
	`ngx_öô_moduÀs
(
cy˛e
Ë!
NGX_OK
) {

627 
	`exô
(1);

635 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

636 
oshm_z⁄e
 = 
›¨t
->
ñts
;

638 
i
 = 0; ; i++) {

640 i‡(
i
 >
›¨t
->
√…s
) {

641 i‡(
›¨t
->
√xt
 =
NULL
) {

642 
ﬁd_shm_z⁄e_d⁄e
;

644 
›¨t
 = o∑π->
√xt
;

645 
oshm_z⁄e
 = 
›¨t
->
ñts
;

646 
i
 = 0;

649 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

650 
shm_z⁄e
 = 
∑π
->
ñts
;

652 
n
 = 0; ;Ç++) {

654 i‡(
n
 >
∑π
->
√…s
) {

655 i‡(
∑π
->
√xt
 =
NULL
) {

658 
∑π
 =Ö¨t->
√xt
;

659 
shm_z⁄e
 = 
∑π
->
ñts
;

660 
n
 = 0;

663 i‡(
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
shm_z⁄e
[
n
].shm.name.len) {

667 i‡(
	`ngx_°∫cmp
(
oshm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

668 
shm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

669 
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

675 i‡(
oshm_z⁄e
[
i
].
èg
 =
shm_z⁄e
[
n
].tag

676 && 
oshm_z⁄e
[
i
].
shm
.
size
 =
shm_z⁄e
[
n
].shm.size

677 && !
oshm_z⁄e
[
i
].
n‹eu£
)

679 
live_shm_z⁄e
;

685 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
i
].
shm
);

687 
live_shm_z⁄e
:

692 
ﬁd_shm_z⁄e_d⁄e
:

697 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

698 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

700 i‡(
ls
[
i
].
ªmaö
 ||Üs[i].
fd
 =(
ngx_sockë_t
) -1) {

704 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

705 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

706 
ngx_˛o£_sockë_n
 "Üistening socket on %V failed",

707 &
ls
[
i
].
addr_ãxt
);

710 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

712 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

713 
u_ch¨
 *
«me
;

715 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

717 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

718 "dñëög sockë %s", 
«me
);

720 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

721 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

722 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

732 
∑π
 = &
ﬁd_cy˛e
->
›í_fûes
.part;

733 
fûe
 = 
∑π
->
ñts
;

735 
i
 = 0; ; i++) {

737 i‡(
i
 >
∑π
->
√…s
) {

738 i‡(
∑π
->
√xt
 =
NULL
) {

741 
∑π
 =Ö¨t->
√xt
;

742 
fûe
 = 
∑π
->
ñts
;

743 
i
 = 0;

746 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

750 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

751 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

752 
ngx_˛o£_fûe_n
 " \"%s\" failed",

753 
fûe
[
i
].
«me
.
d©a
);

757 
	`ngx_de°roy_poﬁ
(
c⁄f
.
ãmp_poﬁ
);

759 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_MASTER
 || 
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

761 
	`ngx_de°roy_poﬁ
(
ﬁd_cy˛e
->
poﬁ
);

762 
cy˛e
->
ﬁd_cy˛e
 = 
NULL
;

764  
cy˛e
;

768 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

769 
ngx_ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
cy˛e
->
log
);

770 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

771 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

773 
	`exô
(1);

776 
n
 = 10;

778 i‡(
	`ngx_¨øy_öô
(&
ngx_ﬁd_cy˛es
, 
ngx_ãmp_poﬁ
, 
n
,

779 (
ngx_cy˛e_t
 *))

780 !
NGX_OK
)

782 
	`exô
(1);

785 
	`ngx_memzîo
(
ngx_ﬁd_cy˛es
.
ñts
, 
n
 * (
ngx_cy˛e_t
 *));

787 
ngx_˛ó√r_evít
.
h™dÀr
 = 
ngx_˛ón_ﬁd_cy˛es
;

788 
ngx_˛ó√r_evít
.
log
 = 
cy˛e
->log;

789 
ngx_˛ó√r_evít
.
d©a
 = &
dumb
;

790 
dumb
.
fd
 = (
ngx_sockë_t
) -1;

793 
ngx_ãmp_poﬁ
->
log
 = 
cy˛e
->log;

795 
ﬁd
 = 
	`ngx_¨øy_push
(&
ngx_ﬁd_cy˛es
);

796 i‡(
ﬁd
 =
NULL
) {

797 
	`exô
(1);

799 *
ﬁd
 = 
ﬁd_cy˛e
;

801 i‡(!
ngx_˛ó√r_evít
.
timî_£t
) {

802 
	`ngx_add_timî
(&
ngx_˛ó√r_evít
, 30000);

803 
ngx_˛ó√r_evít
.
timî_£t
 = 1;

806  
cy˛e
;

809 
Áûed
:

811 i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

812 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

813 
ngx_c‹e_moduÀ
);

814 i‡(
ﬁd_ccf
->
ívú⁄mít
) {

815 
ívú⁄
 = 
ﬁd_ccf
->
ívú⁄mít
;

821 
∑π
 = &
cy˛e
->
›í_fûes
.part;

822 
fûe
 = 
∑π
->
ñts
;

824 
i
 = 0; ; i++) {

826 i‡(
i
 >
∑π
->
√…s
) {

827 i‡(
∑π
->
√xt
 =
NULL
) {

830 
∑π
 =Ö¨t->
√xt
;

831 
fûe
 = 
∑π
->
ñts
;

832 
i
 = 0;

835 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

839 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

840 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

841 
ngx_˛o£_fûe_n
 " \"%s\" failed",

842 
fûe
[
i
].
«me
.
d©a
);

846 i‡(
ngx_ã°_c⁄fig
) {

847 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

848  
NULL
;

851 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

852 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

853 i‡(
ls
[
i
].
fd
 =(
ngx_sockë_t
Ë-1 || !ls[i].
›í
) {

857 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

858 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

859 
ngx_˛o£_sockë_n
 " %V failed",

860 &
ls
[
i
].
addr_ãxt
);

864 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

866  
NULL
;

867 
	}
}

871 
	$ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
)

873 
	`ngx_de°roy_poﬁ
(
c⁄f
->
ãmp_poﬁ
);

874 
	`ngx_de°roy_poﬁ
(
c⁄f
->
poﬁ
);

875 
	}
}

878 
ngx_öt_t


879 
	$ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_shm_z⁄e_t
 *
zn
)

881 
u_ch¨
 *
fûe
;

882 
ngx_¶ab_poﬁ_t
 *
•
;

884 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

886 i‡(
zn
->
shm
.
exi°s
) {

888 i‡(
•
 =•->
addr
) {

889  
NGX_OK
;

892 #i‡(
NGX_WIN32
)

896 i‡(
	`ngx_shm_ªm≠
(&
zn
->
shm
, 
•
->
addr
Ë!
NGX_OK
) {

897  
NGX_ERROR
;

900 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

902 i‡(
•
 =•->
addr
) {

903  
NGX_OK
;

908 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

910 &
zn
->
shm
.
«me
, 
•
->
addr
, sp);

911  
NGX_ERROR
;

914 
•
->
íd
 = 
zn
->
shm
.
addr
 + zn->shm.
size
;

915 
•
->
mö_shi·
 = 3;

916 
•
->
addr
 = 
zn
->
shm
.addr;

918 #i‡(
NGX_HAVE_ATOMIC_OPS
)

920 
fûe
 = 
NULL
;

924 
fûe
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, cy˛e->
lock_fûe
.
Àn
 + 
zn
->
shm
.
«me
.len);

925 i‡(
fûe
 =
NULL
) {

926  
NGX_ERROR
;

929 (Ë
	`ngx_•rötf
(
fûe
, "%V%V%Z", &
cy˛e
->
lock_fûe
, &
zn
->
shm
.
«me
);

933 i‡(
	`ngx_shmtx_¸óã
(&
•
->
muãx
, &•->
lock
, 
fûe
Ë!
NGX_OK
) {

934  
NGX_ERROR
;

937 
	`ngx_¶ab_öô
(
•
);

939  
NGX_OK
;

940 
	}
}

943 
ngx_öt_t


944 
	$ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

946 
size_t
 
Àn
;

947 
ngx_uöt_t
 
¸óã
;

948 
ngx_fûe_t
 
fûe
;

949 
u_ch¨
 
pid
[
NGX_INT64_LEN
 + 2];

951 i‡(
ngx_¥o˚ss
 > 
NGX_PROCESS_MASTER
) {

952  
NGX_OK
;

955 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

957 
fûe
.
«me
 = *name;

958 
fûe
.
log
 =Üog;

960 
¸óã
 = 
ngx_ã°_c⁄fig
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

962 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
,

963 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

965 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

966 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

967 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

968  
NGX_ERROR
;

971 i‡(!
ngx_ã°_c⁄fig
) {

972 
Àn
 = 
	`ngx_¢¥ötf
(
pid
, 
NGX_INT64_LEN
 + 2, "%P%N", 
ngx_pid
) -Öid;

974 i‡(
	`ngx_wrôe_fûe
(&
fûe
, 
pid
, 
Àn
, 0Ë=
NGX_ERROR
) {

975  
NGX_ERROR
;

979 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

980 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

981 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

984  
NGX_OK
;

985 
	}
}

989 
	$ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
)

991 
u_ch¨
 *
«me
;

992 
ngx_c‹e_c⁄f_t
 *
ccf
;

994 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

996 
«me
 = 
ngx_√w_bö¨y
 ? 
ccf
->
ﬁdpid
.
d©a
 : ccf->
pid
.data;

998 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

999 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1000 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1002 
	}
}

1005 
ngx_öt_t


1006 
	$ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
)

1008 
ssize_t
 
n
;

1009 
ngx_pid_t
 
pid
;

1010 
ngx_fûe_t
 
fûe
;

1011 
ngx_c‹e_c⁄f_t
 *
ccf
;

1012 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 2];

1014 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "signalÖrocess started");

1016 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1018 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1020 
fûe
.
«me
 = 
ccf
->
pid
;

1021 
fûe
.
log
 = 
cy˛e
->log;

1023 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

1024 
NGX_FILE_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1026 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1027 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 
ngx_î∫o
,

1028 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1032 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
NGX_INT64_LEN
 + 2, 0);

1034 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1035 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1036 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1039 i‡(
n
 =
NGX_ERROR
) {

1043 
n
-- && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

1045 
pid
 = 
	`ngx_©oi
(
buf
, ++
n
);

1047 i‡(
pid
 =(
ngx_pid_t
Ë
NGX_ERROR
) {

1048 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 0,

1050 
n
, 
buf
, 
fûe
.
«me
.
d©a
);

1054  
	`ngx_os_sig«l_¥o˚ss
(
cy˛e
, 
sig
, 
pid
);

1056 
	}
}

1059 
ngx_öt_t


1060 
	$ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
)

1062 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

1063 
ngx_fd_t
 
fd
;

1065 
fd
 = 
	`ngx_›í_fûe
(
fûe
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

1066 
NGX_FILE_DEFAULT_ACCESS
);

1068 i‡(
fd
 =
NGX_INVALID_FILE
) {

1069 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1070 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
);

1071  
NGX_ERROR
;

1074 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1075 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1076 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
);

1079 i‡(
	`ngx_dñëe_fûe
(
fûe
Ë=
NGX_FILE_ERROR
) {

1080 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1081 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
fûe
);

1086  
NGX_OK
;

1087 
	}
}

1091 
	$ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

1093 
ngx_fd_t
 
fd
;

1094 
ngx_uöt_t
 
i
;

1095 
ngx_li°_∑π_t
 *
∑π
;

1096 
ngx_›í_fûe_t
 *
fûe
;

1098 
∑π
 = &
cy˛e
->
›í_fûes
.part;

1099 
fûe
 = 
∑π
->
ñts
;

1101 
i
 = 0; ; i++) {

1103 i‡(
i
 >
∑π
->
√…s
) {

1104 i‡(
∑π
->
√xt
 =
NULL
) {

1107 
∑π
 =Ö¨t->
√xt
;

1108 
fûe
 = 
∑π
->
ñts
;

1109 
i
 = 0;

1112 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

1116 i‡(
fûe
[
i
].
Êush
) {

1117 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

1120 
fd
 = 
	`ngx_›í_fûe
(
fûe
[
i
].
«me
.
d©a
, 
NGX_FILE_APPEND
,

1121 
NGX_FILE_CREATE_OR_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1123 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

1125 
fûe
[
i
].
«me
.
d©a
, fûe[i].
fd
, fd);

1127 i‡(
fd
 =
NGX_INVALID_FILE
) {

1128 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1129 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1133 #i‡!(
NGX_WIN32
)

1134 i‡(
u£r
 !(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1135 
ngx_fûe_öfo_t
 
fi
;

1137 i‡(
	`ngx_fûe_öfo
(
fûe
[
i
].
«me
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1138 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1139 
ngx_fûe_öfo_n
 " \"%s\" failed",

1140 
fûe
[
i
].
«me
.
d©a
);

1142 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1143 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1144 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1145 
fûe
[
i
].
«me
.
d©a
);

1151 i‡(
fi
.
°_uid
 !
u£r
) {

1152 i‡(
	`chown
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
u£r
, -1) == -1) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1155 
fûe
[
i
].
«me
.
d©a
, 
u£r
);

1157 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1158 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1159 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1160 
fûe
[
i
].
«me
.
d©a
);

1167 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
)) != (S_IRUSR|S_IWUSR)) {

1169 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
);

1171 i‡(
	`chmod
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

1172 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1173 "chmod(Ë\"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1175 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1176 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1177 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1178 
fûe
[
i
].
«me
.
d©a
);

1186 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

1187 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1189 
fûe
[
i
].
«me
.
d©a
);

1191 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1192 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1193 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1194 
fûe
[
i
].
«me
.
d©a
);

1201 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

1202 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1203 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1204 
fûe
[
i
].
«me
.
d©a
);

1207 
fûe
[
i
].
fd
 = fd;

1210 (Ë
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
);

1211 
	}
}

1214 
ngx_shm_z⁄e_t
 *

1215 
	$ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
size_t
 
size
, *
èg
)

1217 
ngx_uöt_t
 
i
;

1218 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1219 
ngx_li°_∑π_t
 *
∑π
;

1221 
∑π
 = &
cf
->
cy˛e
->
sh¨ed_mem‹y
.part;

1222 
shm_z⁄e
 = 
∑π
->
ñts
;

1224 
i
 = 0; ; i++) {

1226 i‡(
i
 >
∑π
->
√…s
) {

1227 i‡(
∑π
->
√xt
 =
NULL
) {

1230 
∑π
 =Ö¨t->
√xt
;

1231 
shm_z⁄e
 = 
∑π
->
ñts
;

1232 
i
 = 0;

1235 i‡(
«me
->
Àn
 !
shm_z⁄e
[
i
].
shm
.name.len) {

1239 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
shm_z⁄e
[
i
].
shm
.«me.d©a,Çame->
Àn
)

1245 i‡(
èg
 !
shm_z⁄e
[
i
].tag) {

1246 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1249 &
shm_z⁄e
[
i
].
shm
.
«me
);

1250  
NULL
;

1253 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

1254 
shm_z⁄e
[
i
].
shm
.
size
 = size;

1257 i‡(
size
 && sizê!
shm_z⁄e
[
i
].
shm
.size) {

1258 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1261 
size
, &
shm_z⁄e
[
i
].
shm
.
«me
, shm_zone[i].shm.size);

1262  
NULL
;

1265  &
shm_z⁄e
[
i
];

1268 
shm_z⁄e
 = 
	`ngx_li°_push
(&
cf
->
cy˛e
->
sh¨ed_mem‹y
);

1270 i‡(
shm_z⁄e
 =
NULL
) {

1271  
NULL
;

1274 
shm_z⁄e
->
d©a
 = 
NULL
;

1275 
shm_z⁄e
->
shm
.
log
 = 
cf
->
cy˛e
->log;

1276 
shm_z⁄e
->
shm
.
size
 = size;

1277 
shm_z⁄e
->
shm
.
«me
 = *name;

1278 
shm_z⁄e
->
shm
.
exi°s
 = 0;

1279 
shm_z⁄e
->
öô
 = 
NULL
;

1280 
shm_z⁄e
->
èg
 =Åag;

1281 
shm_z⁄e
->
n‹eu£
 = 0;

1283  
shm_z⁄e
;

1284 
	}
}

1288 
	$ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
)

1290 
ngx_uöt_t
 
i
, 
n
, 
found
, 
live
;

1291 
ngx_log_t
 *
log
;

1292 
ngx_cy˛e_t
 **
cy˛e
;

1294 
log
 = 
ngx_cy˛e
->log;

1295 
ngx_ãmp_poﬁ
->
log
 =Üog;

1297 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "clean old cycles");

1299 
live
 = 0;

1301 
cy˛e
 = 
ngx_ﬁd_cy˛es
.
ñts
;

1302 
i
 = 0; i < 
ngx_ﬁd_cy˛es
.
√…s
; i++) {

1304 i‡(
cy˛e
[
i
] =
NULL
) {

1308 
found
 = 0;

1310 
n
 = 0;Ç < 
cy˛e
[
i
]->
c⁄√˘i⁄_n
;Ç++) {

1311 i‡(
cy˛e
[
i
]->
c⁄√˘i⁄s
[
n
].
fd
 !(
ngx_sockë_t
) -1) {

1312 
found
 = 1;

1314 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "livêfd:%ui", 
n
);

1320 i‡(
found
) {

1321 
live
 = 1;

1325 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "˛ó¿ﬁd cy˛e: %ui", 
i
);

1327 
	`ngx_de°roy_poﬁ
(
cy˛e
[
i
]->
poﬁ
);

1328 
cy˛e
[
i
] = 
NULL
;

1331 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "ﬁd cy˛e†°©us: %ui", 
live
);

1333 i‡(
live
) {

1334 
	`ngx_add_timî
(
ev
, 30000);

1337 
	`ngx_de°roy_poﬁ
(
ngx_ãmp_poﬁ
);

1338 
ngx_ãmp_poﬁ
 = 
NULL
;

1339 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

1341 
	}
}

1345 
	$ngx_£t_shutdown_timî
(
ngx_cy˛e_t
 *
cy˛e
)

1347 
ngx_c‹e_c⁄f_t
 *
ccf
;

1349 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1351 i‡(
ccf
->
shutdown_timeout
) {

1352 
ngx_shutdown_evít
.
h™dÀr
 = 
ngx_shutdown_timî_h™dÀr
;

1353 
ngx_shutdown_evít
.
d©a
 = 
cy˛e
;

1354 
ngx_shutdown_evít
.
log
 = 
cy˛e
->log;

1355 
ngx_shutdown_evít
.
ˇn˚œbÀ
 = 1;

1357 
	`ngx_add_timî
(&
ngx_shutdown_evít
, 
ccf
->
shutdown_timeout
);

1359 
	}
}

1363 
	$ngx_shutdown_timî_h™dÀr
(
ngx_evít_t
 *
ev
)

1365 
ngx_uöt_t
 
i
;

1366 
ngx_cy˛e_t
 *
cy˛e
;

1367 
ngx_c⁄√˘i⁄_t
 *
c
;

1369 
cy˛e
 = 
ev
->
d©a
;

1371 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

1373 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

1375 i‡(
c
[
i
].
fd
 =(
ngx_sockë_t
) -1

1376 || 
c
[
i
].
ªad
 =
NULL


1377 || 
c
[
i
].
ªad
->
ac˚±


1378 || 
c
[
i
].
ªad
->
ch™√l


1379 || 
c
[
i
].
ªad
->
ªsﬁvî
)

1384 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1385 "*%uA shutdow¿timeout", 
c
[
i
].
numbî
);

1387 
c
[
i
].
˛o£
 = 1;

1388 
c
[
i
].
îr‹
 = 1;

1390 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

1392 
	}
}

	@src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 
NGX_DEFAULT_POOL_SIZE


	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

34 *
sync
;

35 
ngx_uöt_t
 
n‹eu£
;

39 
	sngx_cy˛e_s
 {

40 ****
c⁄f_˘x
;

41 
ngx_poﬁ_t
 *
poﬁ
;

43 
ngx_log_t
 *
log
;

44 
ngx_log_t
 
√w_log
;

46 
ngx_uöt_t
 
log_u£_°dîr
;

48 
ngx_c⁄√˘i⁄_t
 **
fûes
;

49 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

50 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

52 
ngx_moduÀ_t
 **
moduÀs
;

53 
ngx_uöt_t
 
moduÀs_n
;

54 
ngx_uöt_t
 
moduÀs_u£d
;

56 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

57 
ngx_uöt_t
 
ªußbÀ_c⁄√˘i⁄s_n
;

59 
ngx_¨øy_t
 
li°íög
;

60 
ngx_¨øy_t
 
∑ths
;

62 
ngx_¨øy_t
 
c⁄fig_dump
;

63 
ngx_rbåì_t
 
c⁄fig_dump_rbåì
;

64 
ngx_rbåì_node_t
 
c⁄fig_dump_£¡öñ
;

66 
ngx_li°_t
 
›í_fûes
;

67 
ngx_li°_t
 
sh¨ed_mem‹y
;

69 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

70 
ngx_uöt_t
 
fûes_n
;

72 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

73 
ngx_evít_t
 *
ªad_evíts
;

74 
ngx_evít_t
 *
wrôe_evíts
;

76 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

78 
ngx_°r_t
 
c⁄f_fûe
;

79 
ngx_°r_t
 
c⁄f_∑øm
;

80 
ngx_°r_t
 
c⁄f_¥efix
;

81 
ngx_°r_t
 
¥efix
;

82 
ngx_°r_t
 
lock_fûe
;

83 
ngx_°r_t
 
ho°«me
;

88 
ngx_Êag_t
 
d´m⁄
;

89 
ngx_Êag_t
 
ma°î
;

91 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

92 
ngx_m£c_t
 
shutdown_timeout
;

94 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

95 
ngx_öt_t
 
debug_poöts
;

97 
ngx_öt_t
 
æimô_nofûe
;

98 
off_t
 
æimô_c‹e
;

100 
¥i‹ôy
;

102 
ngx_uöt_t
 
˝u_afföôy_auto
;

103 
ngx_uöt_t
 
˝u_afföôy_n
;

104 
ngx_˝u£t_t
 *
˝u_afföôy
;

106 *
u£∫ame
;

107 
ngx_uid_t
 
u£r
;

108 
ngx_gid_t
 
group
;

110 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

111 
ngx_°r_t
 
lock_fûe
;

113 
ngx_°r_t
 
pid
;

114 
ngx_°r_t
 
ﬁdpid
;

116 
ngx_¨øy_t
 
ív
;

117 **
ívú⁄mít
;

119 
ngx_uöt_t
 
å™•¨ít
;

120 } 
	tngx_c‹e_c⁄f_t
;

123 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

126 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

127 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

128 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

129 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

130 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

131 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

132 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

133 
ngx_˝u£t_t
 *
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

134 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

135 
size_t
 
size
, *
èg
);

136 
	`ngx_£t_shutdown_timî
(
ngx_cy˛e_t
 *
cy˛e
);

139 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

140 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

141 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

142 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

143 
ngx_uöt_t
 
ngx_dump_c⁄fig
;

144 
ngx_uöt_t
 
ngx_quõt_mode
;

	@src/core/ngx_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
);

15 
ngx_©omic_t
 
	gãmp_numbî
 = 0;

16 
ngx_©omic_t
 *
	gngx_ãmp_numbî
 = &
ãmp_numbî
;

17 
ngx_©omic_öt_t
 
	gngx_øndom_numbî
 = 123456;

20 
ngx_öt_t


21 
	$ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,Çgx_°r_à*
«me
)

23 
size_t
 
Àn
;

24 
u_ch¨
 *
p
, *
n
;

25 
ngx_öt_t
 
rc
;

27 
rc
 = 
	`ngx_ã°_fuŒ_«me
(
«me
);

29 i‡(
rc
 =
NGX_OK
) {

30  
rc
;

33 
Àn
 = 
¥efix
->len;

35 #i‡(
NGX_WIN32
)

37 i‡(
rc
 == 2) {

38 
Àn
 = 
rc
;

43 
n
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 
«me
->len + 1);

44 i‡(
n
 =
NULL
) {

45  
NGX_ERROR
;

48 
p
 = 
	`ngx_˝ymem
(
n
, 
¥efix
->
d©a
, 
Àn
);

49 
	`ngx_˝y°∫
(
p
, 
«me
->
d©a
,Çame->
Àn
 + 1);

51 
«me
->
Àn
 +=Üen;

52 
«me
->
d©a
 = 
n
;

54  
NGX_OK
;

55 
	}
}

58 
ngx_öt_t


59 
	$ngx_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
)

61 #i‡(
NGX_WIN32
)

62 
u_ch¨
 
c0
, 
c1
;

64 
c0
 = 
«me
->
d©a
[0];

66 i‡(
«me
->
Àn
 < 2) {

67 i‡(
c0
 == '/') {

71  
NGX_DECLINED
;

74 
c1
 = 
«me
->
d©a
[1];

76 i‡(
c1
 == ':') {

77 
c0
 |= 0x20;

79 i‡((
c0
 >= 'a' && c0 <= 'z')) {

80  
NGX_OK
;

83  
NGX_DECLINED
;

86 i‡(
c1
 == '/') {

87  
NGX_OK
;

90 i‡(
c0
 == '/') {

94  
NGX_DECLINED
;

98 i‡(
«me
->
d©a
[0] == '/') {

99  
NGX_OK
;

102  
NGX_DECLINED
;

105 
	}
}

108 
ssize_t


109 
	$ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
)

111 
ngx_öt_t
 
rc
;

113 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

114 
rc
 = 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

115 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
);

117 i‡(
rc
 !
NGX_OK
) {

118  
rc
;

121 i‡(
tf
->
log_Àvñ
) {

122 
	`ngx_log_îr‹
(
tf
->
log_Àvñ
,Åf->
fûe
.
log
, 0, "%s %V",

123 
tf
->
w¨n
, &tf->
fûe
.
«me
);

127 #i‡(
NGX_THREADS
 && 
NGX_HAVE_PWRITEV
)

129 i‡(
tf
->
thªad_wrôe
) {

130  
	`ngx_thªad_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,

131 
tf
->
poﬁ
);

136  
	`ngx_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,Åf->
poﬁ
);

137 
	}
}

140 
ngx_öt_t


141 
	$ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
, 
ngx_poﬁ_t
 *
poﬁ
,

142 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,Çgx_uöt_à
ac˚ss
)

144 
size_t
 
Àvñs
;

145 
u_ch¨
 *
p
;

146 
uöt32_t
 
n
;

147 
ngx_îr_t
 
îr
;

148 
ngx_°r_t
 
«me
;

149 
ngx_uöt_t
 
¥efix
;

150 
ngx_poﬁ_˛ónup_t
 *
˛n
;

151 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

153 i‡(
fûe
->
«me
.
Àn
) {

154 
«me
 = 
fûe
->name;

155 
Àvñs
 = 0;

156 
¥efix
 = 1;

159 
«me
 = 
∑th
->name;

160 
Àvñs
 = 
∑th
->
Àn
;

161 
¥efix
 = 0;

164 
fûe
->
«me
.
Àn
 =Çame.À¿+ 1 + 
Àvñs
 + 10;

166 
fûe
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, fûe->«me.
Àn
 + 1);

167 i‡(
fûe
->
«me
.
d©a
 =
NULL
) {

168  
NGX_ERROR
;

172 
i
 = 0; i < 
fûe
->
«me
.
Àn
; i++) {

173 
fûe
->
«me
.
d©a
[
i
] = 'X';

177 
p
 = 
	`ngx_˝ymem
(
fûe
->
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

179 i‡(
¥efix
) {

180 *
p
 = '.';

183 
p
 +1 + 
Àvñs
;

185 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0);

187 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

188 i‡(
˛n
 =
NULL
) {

189  
NGX_ERROR
;

193 (Ë
	`ngx_•rötf
(
p
, "%010uD%Z", 
n
);

195 i‡(!
¥efix
) {

196 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
fûe
->
«me
.
d©a
, fûe->«me.
Àn
);

199 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

200 "hashedÖ©h: %s", 
fûe
->
«me
.
d©a
);

202 
fûe
->
fd
 = 
	`ngx_›í_ãmpfûe
(fûe->
«me
.
d©a
, 
≥rsi°ít
, 
ac˚ss
);

204 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

205 "ãm∞fd:%d", 
fûe
->
fd
);

207 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

209 
˛n
->
h™dÀr
 = 
˛ón
 ? 
ngx_poﬁ_dñëe_fûe
 : 
ngx_poﬁ_˛ónup_fûe
;

210 
˛nf
 = 
˛n
->
d©a
;

212 
˛nf
->
fd
 = 
fûe
->fd;

213 
˛nf
->
«me
 = 
fûe
->«me.
d©a
;

214 
˛nf
->
log
 = 
poﬁ
->log;

216  
NGX_OK
;

219 
îr
 = 
ngx_î∫o
;

221 i‡(
îr
 =
NGX_EEXIST_FILE
) {

222 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(1);

226 i‡((
∑th
->
Àvñ
[0] =0Ë|| (
îr
 !
NGX_ENOPATH
)) {

227 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

228 
ngx_›í_ãmpfûe_n
 " \"%s\" failed",

229 
fûe
->
«me
.
d©a
);

230  
NGX_ERROR
;

233 i‡(
	`ngx_¸óã_∑th
(
fûe
, 
∑th
Ë=
NGX_ERROR
) {

234  
NGX_ERROR
;

237 
	}
}

241 
	$ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
)

243 
size_t
 
i
, 
Àvñ
;

244 
ngx_uöt_t
 
n
;

246 
i
 = 
∑th
->
«me
.
Àn
 + 1;

248 
fûe
[
∑th
->
«me
.
Àn
 +Öath->len] = '/';

250 
n
 = 0;Ç < 
NGX_MAX_PATH_LEVEL
;Ç++) {

251 
Àvñ
 = 
∑th
->Àvñ[
n
];

253 i‡(
Àvñ
 == 0) {

257 
Àn
 -
Àvñ
;

258 
fûe
[
i
 - 1] = '/';

259 
	`ngx_mem˝y
(&
fûe
[
i
], &fûe[
Àn
], 
Àvñ
);

260 
i
 +
Àvñ
 + 1;

262 
	}
}

265 
ngx_öt_t


266 
	$ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
)

268 
size_t
 
pos
;

269 
ngx_îr_t
 
îr
;

270 
ngx_uöt_t
 
i
;

272 
pos
 = 
∑th
->
«me
.
Àn
;

274 
i
 = 0; i < 
NGX_MAX_PATH_LEVEL
; i++) {

275 i‡(
∑th
->
Àvñ
[
i
] == 0) {

279 
pos
 +
∑th
->
Àvñ
[
i
] + 1;

281 
fûe
->
«me
.
d©a
[
pos
] = '\0';

283 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

284 "ãm∞fûe: \"%s\"", 
fûe
->
«me
.
d©a
);

286 i‡(
	`ngx_¸óã_dú
(
fûe
->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

287 
îr
 = 
ngx_î∫o
;

288 i‡(
îr
 !
NGX_EEXIST
) {

289 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

290 
ngx_¸óã_dú_n
 " \"%s\" failed",

291 
fûe
->
«me
.
d©a
);

292  
NGX_ERROR
;

296 
fûe
->
«me
.
d©a
[
pos
] = '/';

299  
NGX_OK
;

300 
	}
}

303 
ngx_îr_t


304 
	$ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
)

306 
u_ch¨
 *
p
, 
ch
;

307 
ngx_îr_t
 
îr
;

309 
îr
 = 0;

311 #i‡(
NGX_WIN32
)

312 
p
 = 
dú
 + 3;

314 
p
 = 
dú
 + 1;

317  ; *
p
;Ö++) {

318 
ch
 = *
p
;

320 i‡(
ch
 != '/') {

324 *
p
 = '\0';

326 i‡(
	`ngx_¸óã_dú
(
dú
, 
ac˚ss
Ë=
NGX_FILE_ERROR
) {

327 
îr
 = 
ngx_î∫o
;

329 
îr
) {

330 
NGX_EEXIST
:

331 
îr
 = 0;

332 
NGX_EACCES
:

336  
îr
;

340 *
p
 = '/';

343  
îr
;

344 
	}
}

347 
ngx_©omic_uöt_t


348 
	$ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
)

350 
ngx_©omic_uöt_t
 
n
, 
add
;

352 
add
 = 
cﬁlisi⁄
 ? 
ngx_øndom_numbî
 : 1;

354 
n
 = 
	`ngx_©omic_„tch_add
(
ngx_ãmp_numbî
, 
add
);

356  
n
 + 
add
;

357 
	}
}

361 
	$ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

363 *
p
 = 
c⁄f
;

365 
ssize_t
 
Àvñ
;

366 
ngx_°r_t
 *
vÆue
;

367 
ngx_uöt_t
 
i
, 
n
;

368 
ngx_∑th_t
 *
∑th
, **
¶Ÿ
;

370 
¶Ÿ
 = (
ngx_∑th_t
 **Ë(
p
 + 
cmd
->
off£t
);

372 i‡(*
¶Ÿ
) {

376 
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

377 i‡(
∑th
 =
NULL
) {

378  
NGX_CONF_ERROR
;

381 
vÆue
 = 
cf
->
¨gs
->
ñts
;

383 
∑th
->
«me
 = 
vÆue
[1];

385 i‡(
∑th
->
«me
.
d©a
[∑th->«me.
Àn
 - 1] == '/') {

386 
∑th
->
«me
.
Àn
--;

389 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
->
«me
, 0Ë!
NGX_OK
) {

390  
NGX_CONF_ERROR
;

393 
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

394 
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

396 
i
 = 0, 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
; i++,Ç++) {

397 
Àvñ
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
, vÆue[n].
Àn
);

398 i‡(
Àvñ
 =
NGX_ERROR
 ||Üevel == 0) {

402 
∑th
->
Àvñ
[
i
] =Üevel;

403 
∑th
->
Àn
 +
Àvñ
 + 1;

406 i‡(
∑th
->
Àn
 > 10 + 
i
) {

410 *
¶Ÿ
 = 
∑th
;

412 i‡(
	`ngx_add_∑th
(
cf
, 
¶Ÿ
Ë=
NGX_ERROR
) {

413  
NGX_CONF_ERROR
;

416  
NGX_CONF_OK
;

417 
	}
}

421 
	$ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,Çgx_∑th_à*
¥ev
,

422 
ngx_∑th_öô_t
 *
öô
)

424 
ngx_uöt_t
 
i
;

426 i‡(*
∑th
) {

427  
NGX_CONF_OK
;

430 i‡(
¥ev
) {

431 *
∑th
 = 
¥ev
;

432  
NGX_CONF_OK
;

435 *
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

436 i‡(*
∑th
 =
NULL
) {

437  
NGX_CONF_ERROR
;

440 (*
∑th
)->
«me
 = 
öô
->name;

442 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &(*
∑th
)->
«me
, 0Ë!
NGX_OK
) {

443  
NGX_CONF_ERROR
;

446 
i
 = 0; i < 
NGX_MAX_PATH_LEVEL
; i++) {

447 (*
∑th
)->
Àvñ
[
i
] = 
öô
->level[i];

448 (*
∑th
)->
Àn
 +
öô
->
Àvñ
[
i
] + (init->level[i] ? 1 : 0);

451 i‡(
	`ngx_add_∑th
(
cf
, 
∑th
Ë!
NGX_OK
) {

452  
NGX_CONF_ERROR
;

455  
NGX_CONF_OK
;

456 
	}
}

460 
	$ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

462 *
c⁄Â
 = 
c⁄f
;

464 
u_ch¨
 *
p
;

465 
ngx_°r_t
 *
vÆue
;

466 
ngx_uöt_t
 
i
, 
right
, 
shi·
, *
ac˚ss
, 
u£r
;

468 
ac˚ss
 = (
ngx_uöt_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

470 i‡(*
ac˚ss
 !
NGX_CONF_UNSET_UINT
) {

474 
vÆue
 = 
cf
->
¨gs
->
ñts
;

476 *
ac˚ss
 = 0;

477 
u£r
 = 0600;

479 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

481 
p
 = 
vÆue
[
i
].
d©a
;

483 i‡(
	`ngx_°∫cmp
(
p
, "user:", ("user:") - 1) == 0) {

484 
shi·
 = 6;

485 
p
 += ("user:") - 1;

486 
u£r
 = 0;

488 } i‡(
	`ngx_°∫cmp
(
p
, "group:", ("group:") - 1) == 0) {

489 
shi·
 = 3;

490 
p
 += ("group:") - 1;

492 } i‡(
	`ngx_°∫cmp
(
p
, "all:", ("all:") - 1) == 0) {

493 
shi·
 = 0;

494 
p
 += ("all:") - 1;

497 
övÆid
;

500 i‡(
	`ngx_°rcmp
(
p
, "rw") == 0) {

501 
right
 = 6;

503 } i‡(
	`ngx_°rcmp
(
p
, "r") == 0) {

504 
right
 = 4;

507 
övÆid
;

510 *
ac˚ss
 |
right
 << 
shi·
;

513 *
ac˚ss
 |
u£r
;

515  
NGX_CONF_OK
;

517 
övÆid
:

519 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

521  
NGX_CONF_ERROR
;

522 
	}
}

525 
ngx_öt_t


526 
	$ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
)

528 
ngx_uöt_t
 
i
, 
n
;

529 
ngx_∑th_t
 *
∑th
, **
p
;

531 
∑th
 = *
¶Ÿ
;

533 
p
 = 
cf
->
cy˛e
->
∑ths
.
ñts
;

534 
i
 = 0; i < 
cf
->
cy˛e
->
∑ths
.
√…s
; i++) {

535 i‡(
p
[
i
]->
«me
.
Àn
 =
∑th
->name.len

536 && 
	`ngx_°rcmp
(
p
[
i
]->
«me
.
d©a
, 
∑th
->name.data) == 0)

538 i‡(
p
[
i
]->
d©a
 !
∑th
->data) {

539 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

542 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

543  
NGX_ERROR
;

546 
n
 = 0;Ç < 
NGX_MAX_PATH_LEVEL
;Ç++) {

547 i‡(
p
[
i
]->
Àvñ
[
n
] !
∑th
->level[n]) {

548 i‡(
∑th
->
c⁄f_fûe
 =
NULL
) {

549 i‡(
p
[
i
]->
c⁄f_fûe
 =
NULL
) {

550 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

555 &
p
[
i
]->
«me
);

556  
NGX_ERROR
;

559 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

564 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

565  
NGX_ERROR
;

568 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

571 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

572  
NGX_ERROR
;

575 i‡(
p
[
i
]->
Àvñ
[
n
] == 0) {

580 *
¶Ÿ
 = 
p
[
i
];

582  
NGX_OK
;

586 
p
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
∑ths
);

587 i‡(
p
 =
NULL
) {

588  
NGX_ERROR
;

591 *
p
 = 
∑th
;

593  
NGX_OK
;

594 
	}
}

597 
ngx_öt_t


598 
	$ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

600 
ngx_îr_t
 
îr
;

601 
ngx_uöt_t
 
i
;

602 
ngx_∑th_t
 **
∑th
;

604 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

605 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

607 i‡(
	`ngx_¸óã_dú
(
∑th
[
i
]->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

608 
îr
 = 
ngx_î∫o
;

609 i‡(
îr
 !
NGX_EEXIST
) {

610 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
îr
,

611 
ngx_¸óã_dú_n
 " \"%s\" failed",

612 
∑th
[
i
]->
«me
.
d©a
);

613  
NGX_ERROR
;

617 i‡(
u£r
 =(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

621 #i‡!(
NGX_WIN32
)

623 
ngx_fûe_öfo_t
 
fi
;

625 i‡(
	`ngx_fûe_öfo
(
∑th
[
i
]->
«me
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

627 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

628  
NGX_ERROR
;

631 i‡(
fi
.
°_uid
 !
u£r
) {

632 i‡(
	`chown
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
u£r
, -1) == -1) {

633 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

635 
∑th
[
i
]->
«me
.
d©a
, 
u£r
);

636  
NGX_ERROR
;

640 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

641 !(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

643 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
);

645 i‡(
	`chmod
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

646 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

647 "chmod(Ë\"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

648  
NGX_ERROR
;

655  
NGX_OK
;

656 
	}
}

659 
ngx_öt_t


660 
	$ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
, 
ngx_ext_ª«me_fûe_t
 *
ext
)

662 
u_ch¨
 *
«me
;

663 
ngx_îr_t
 
îr
;

664 
ngx_c›y_fûe_t
 
cf
;

666 #i‡!(
NGX_WIN32
)

668 i‡(
ext
->
ac˚ss
) {

669 i‡(
	`ngx_ch™ge_fûe_ac˚ss
(
§c
->
d©a
, 
ext
->
ac˚ss
Ë=
NGX_FILE_ERROR
) {

670 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

671 
ngx_ch™ge_fûe_ac˚ss_n
 " \"%s\" faûed", 
§c
->
d©a
);

672 
îr
 = 0;

673 
Áûed
;

679 i‡(
ext
->
time
 != -1) {

680 i‡(
	`ngx_£t_fûe_time
(
§c
->
d©a
, 
ext
->
fd
,Éxt->
time
Ë!
NGX_OK
) {

681 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

682 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
§c
->
d©a
);

683 
îr
 = 0;

684 
Áûed
;

688 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

689  
NGX_OK
;

692 
îr
 = 
ngx_î∫o
;

694 i‡(
îr
 =
NGX_ENOPATH
) {

696 i‡(!
ext
->
¸óã_∑th
) {

697 
Áûed
;

700 
îr
 = 
	`ngx_¸óã_fuŒ_∑th
(
to
->
d©a
, 
	`ngx_dú_ac˚ss
(
ext
->
∑th_ac˚ss
));

702 i‡(
îr
) {

703 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

704 
ngx_¸óã_dú_n
 " \"%s\" faûed", 
to
->
d©a
);

705 
îr
 = 0;

706 
Áûed
;

709 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

710  
NGX_OK
;

713 
îr
 = 
ngx_î∫o
;

716 #i‡(
NGX_WIN32
)

718 i‡(
îr
 =
NGX_EEXIST
 ||Éº =
NGX_EEXIST_FILE
) {

719 
îr
 = 
	`ngx_wö32_ª«me_fûe
(
§c
, 
to
, 
ext
->
log
);

721 i‡(
îr
 == 0) {

722  
NGX_OK
;

728 i‡(
îr
 =
NGX_EXDEV
) {

730 
cf
.
size
 = -1;

731 
cf
.
buf_size
 = 0;

732 
cf
.
ac˚ss
 = 
ext
->access;

733 
cf
.
time
 = 
ext
->time;

734 
cf
.
log
 = 
ext
->log;

736 
«me
 = 
	`ngx_Æloc
(
to
->
Àn
 + 1 + 10 + 1, 
ext
->
log
);

737 i‡(
«me
 =
NULL
) {

738  
NGX_ERROR
;

741 (Ë
	`ngx_•rötf
(
«me
, "%*s.%010uD%Z", 
to
->
Àn
,Åo->
d©a
,

742 (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0));

744 i‡(
	`ngx_c›y_fûe
(
§c
->
d©a
, 
«me
, &
cf
Ë=
NGX_OK
) {

746 i‡(
	`ngx_ª«me_fûe
(
«me
, 
to
->
d©a
Ë!
NGX_FILE_ERROR
) {

747 
	`ngx_‰ì
(
«me
);

749 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

750 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

751 
ngx_dñëe_fûe_n
 " \"%s\" failed",

752 
§c
->
d©a
);

753  
NGX_ERROR
;

756  
NGX_OK
;

759 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

760 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

761 
«me
, 
to
->
d©a
);

763 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

764 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

765 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

770 
	`ngx_‰ì
(
«me
);

772 
îr
 = 0;

775 
Áûed
:

777 i‡(
ext
->
dñëe_fûe
) {

778 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

779 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

780 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
§c
->
d©a
);

784 i‡(
îr
) {

785 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

786 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

787 
§c
->
d©a
, 
to
->data);

790  
NGX_ERROR
;

791 
	}
}

794 
ngx_öt_t


795 
	$ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
)

797 *
buf
;

798 
off_t
 
size
;

799 
size_t
 
Àn
;

800 
ssize_t
 
n
;

801 
ngx_fd_t
 
fd
, 
nfd
;

802 
ngx_öt_t
 
rc
;

803 
ngx_fûe_öfo_t
 
fi
;

805 
rc
 = 
NGX_ERROR
;

806 
buf
 = 
NULL
;

807 
nfd
 = 
NGX_INVALID_FILE
;

809 
fd
 = 
	`ngx_›í_fûe
(
‰om
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

811 i‡(
fd
 =
NGX_INVALID_FILE
) {

812 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

813 
ngx_›í_fûe_n
 " \"%s\" faûed", 
‰om
);

814 
Áûed
;

817 i‡(
cf
->
size
 != -1) {

818 
size
 = 
cf
->size;

821 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

822 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

823 
ngx_fd_öfo_n
 " \"%s\" faûed", 
‰om
);

825 
Áûed
;

828 
size
 = 
	`ngx_fûe_size
(&
fi
);

831 
Àn
 = 
cf
->
buf_size
 ? cf->buf_size : 65536;

833 i‡((
off_t
Ë
Àn
 > 
size
) {

834 
Àn
 = (
size_t
Ë
size
;

837 
buf
 = 
	`ngx_Æloc
(
Àn
, 
cf
->
log
);

838 i‡(
buf
 =
NULL
) {

839 
Áûed
;

842 
nfd
 = 
	`ngx_›í_fûe
(
to
, 
NGX_FILE_WRONLY
, 
NGX_FILE_CREATE_OR_OPEN
,

843 
cf
->
ac˚ss
);

845 i‡(
nfd
 =
NGX_INVALID_FILE
) {

846 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

847 
ngx_›í_fûe_n
 " \"%s\" faûed", 
to
);

848 
Áûed
;

851 
size
 > 0) {

853 i‡((
off_t
Ë
Àn
 > 
size
) {

854 
Àn
 = (
size_t
Ë
size
;

857 
n
 = 
	`ngx_ªad_fd
(
fd
, 
buf
, 
Àn
);

859 i‡(
n
 == -1) {

860 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

861 
ngx_ªad_fd_n
 " \"%s\" faûed", 
‰om
);

862 
Áûed
;

865 i‡((
size_t
Ë
n
 !
Àn
) {

866 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

867 
ngx_ªad_fd_n
 " hasÑead only %z of %O from %s",

868 
n
, 
size
, 
‰om
);

869 
Áûed
;

872 
n
 = 
	`ngx_wrôe_fd
(
nfd
, 
buf
, 
Àn
);

874 i‡(
n
 == -1) {

875 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

876 
ngx_wrôe_fd_n
 " \"%s\" faûed", 
to
);

877 
Áûed
;

880 i‡((
size_t
Ë
n
 !
Àn
) {

881 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

882 
ngx_wrôe_fd_n
 " has written only %z of %OÅo %s",

883 
n
, 
size
, 
to
);

884 
Áûed
;

887 
size
 -
n
;

890 i‡(
cf
->
time
 != -1) {

891 i‡(
	`ngx_£t_fûe_time
(
to
, 
nfd
, 
cf
->
time
Ë!
NGX_OK
) {

892 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

893 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
to
);

894 
Áûed
;

898 
rc
 = 
NGX_OK
;

900 
Áûed
:

902 i‡(
nfd
 !
NGX_INVALID_FILE
) {

903 i‡(
	`ngx_˛o£_fûe
(
nfd
Ë=
NGX_FILE_ERROR
) {

904 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

905 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
to
);

909 i‡(
fd
 !
NGX_INVALID_FILE
) {

910 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

911 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

912 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
‰om
);

916 i‡(
buf
) {

917 
	`ngx_‰ì
(
buf
);

920  
rc
;

921 
	}
}

942 
ngx_öt_t


943 
	$ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
)

945 *
d©a
, *
¥ev
;

946 
u_ch¨
 *
p
, *
«me
;

947 
size_t
 
Àn
;

948 
ngx_öt_t
 
rc
;

949 
ngx_îr_t
 
îr
;

950 
ngx_°r_t
 
fûe
, 
buf
;

951 
ngx_dú_t
 
dú
;

953 
	`ngx_°r_nuŒ
(&
buf
);

955 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

956 "wÆkÅªê\"%V\"", 
åì
);

958 i‡(
	`ngx_›í_dú
(
åì
, &
dú
Ë=
NGX_ERROR
) {

959 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

960 
ngx_›í_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

961  
NGX_ERROR
;

964 
¥ev
 = 
˘x
->
d©a
;

966 i‡(
˘x
->
Æloc
) {

967 
d©a
 = 
	`ngx_Æloc
(
˘x
->
Æloc
, ctx->
log
);

968 i‡(
d©a
 =
NULL
) {

969 
Áûed
;

972 i‡(
˘x
->
	`öô_h™dÀr
(
d©a
, 
¥ev
Ë=
NGX_ABORT
) {

973 
Áûed
;

976 
˘x
->
d©a
 = data;

979 
d©a
 = 
NULL
;

984 
	`ngx_£t_î∫o
(0);

986 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

987 
îr
 = 
ngx_î∫o
;

989 i‡(
îr
 =
NGX_ENOMOREFILES
) {

990 
rc
 = 
NGX_OK
;

993 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
îr
,

994 
ngx_ªad_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

995 
rc
 = 
NGX_ERROR
;

998 
d⁄e
;

1001 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

1002 
«me
 = 
	`ngx_de_«me
(&
dú
);

1004 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1005 "åìÇamê%uz:\"%s\"", 
Àn
, 
«me
);

1007 i‡(
Àn
 =1 && 
«me
[0] == '.') {

1011 i‡(
Àn
 =2 && 
«me
[0] == '.' &&Çame[1] == '.') {

1015 
fûe
.
Àn
 = 
åì
->len + 1 +Üen;

1017 i‡(
fûe
.
Àn
 + 
NGX_DIR_MASK_LEN
 > 
buf
.len) {

1019 i‡(
buf
.
Àn
) {

1020 
	`ngx_‰ì
(
buf
.
d©a
);

1023 
buf
.
Àn
 = 
åì
->À¿+ 1 +Üí + 
NGX_DIR_MASK_LEN
;

1025 
buf
.
d©a
 = 
	`ngx_Æloc
(buf.
Àn
 + 1, 
˘x
->
log
);

1026 i‡(
buf
.
d©a
 =
NULL
) {

1027 
Áûed
;

1031 
p
 = 
	`ngx_˝ymem
(
buf
.
d©a
, 
åì
->d©a,Åªe->
Àn
);

1032 *
p
++ = '/';

1033 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 + 1);

1035 
fûe
.
d©a
 = 
buf
.data;

1037 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1038 "åìÖ©h \"%s\"", 
fûe
.
d©a
);

1040 i‡(!
dú
.
vÆid_öfo
) {

1041 i‡(
	`ngx_de_öfo
(
fûe
.
d©a
, &
dú
Ë=
NGX_FILE_ERROR
) {

1042 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1043 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûe
.
d©a
);

1048 i‡(
	`ngx_de_is_fûe
(&
dú
)) {

1050 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1051 "åì fûê\"%s\"", 
fûe
.
d©a
);

1053 
˘x
->
size
 = 
	`ngx_de_size
(&
dú
);

1054 
˘x
->
fs_size
 = 
	`ngx_de_fs_size
(&
dú
);

1055 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1056 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1058 i‡(
˘x
->
	`fûe_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1059 
Áûed
;

1062 } i‡(
	`ngx_de_is_dú
(&
dú
)) {

1064 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1065 "åìÉ¡î dú \"%s\"", 
fûe
.
d©a
);

1067 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1068 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1070 
rc
 = 
˘x
->
	`¥e_åì_h™dÀr
(˘x, &
fûe
);

1072 i‡(
rc
 =
NGX_ABORT
) {

1073 
Áûed
;

1076 i‡(
rc
 =
NGX_DECLINED
) {

1077 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1078 "åì skù dú \"%s\"", 
fûe
.
d©a
);

1082 i‡(
	`ngx_wÆk_åì
(
˘x
, &
fûe
Ë=
NGX_ABORT
) {

1083 
Áûed
;

1086 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1087 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1089 i‡(
˘x
->
	`po°_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1090 
Áûed
;

1095 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1096 "åì s≥cü»\"%s\"", 
fûe
.
d©a
);

1098 i‡(
˘x
->
	`•ec_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1099 
Áûed
;

1104 
Áûed
:

1106 
rc
 = 
NGX_ABORT
;

1108 
d⁄e
:

1110 i‡(
buf
.
Àn
) {

1111 
	`ngx_‰ì
(
buf
.
d©a
);

1114 i‡(
d©a
) {

1115 
	`ngx_‰ì
(
d©a
);

1116 
˘x
->
d©a
 = 
¥ev
;

1119 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

1120 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1121 
ngx_˛o£_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

1124  
rc
;

1125 
	}
}

	@src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

27 
ngx_öt_t
 (*
thªad_h™dÀr
)(
ngx_thªad_èsk_t
 *
	mèsk
,

28 
ngx_fûe_t
 *
	mfûe
);

29 *
	mthªad_˘x
;

30 
ngx_thªad_èsk_t
 *
	mthªad_èsk
;

33 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_COMPAT
)

34 
ngx_evít_aio_t
 *
	maio
;

37 
	mvÆid_öfo
:1;

38 
	mdúe˘io
:1;

42 
	#NGX_MAX_PATH_LEVEL
 3

	)

45 
	$ngx_m£c_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

46 
	$ngx_m£c_t
 (*
	tngx_∑th_purgî_±
Ë(*
	td©a
);

47 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

51 
ngx_°r_t
 
«me
;

52 
size_t
 
Àn
;

53 
size_t
 
Àvñ
[
NGX_MAX_PATH_LEVEL
];

55 
ngx_∑th_m™agî_±
 
m™agî
;

56 
ngx_∑th_purgî_±
 
purgî
;

57 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

58 *
d©a
;

60 
u_ch¨
 *
c⁄f_fûe
;

61 
ngx_uöt_t
 
löe
;

62 } 
	tngx_∑th_t
;

66 
ngx_°r_t
 
«me
;

67 
size_t
 
Àvñ
[
NGX_MAX_PATH_LEVEL
];

68 } 
	tngx_∑th_öô_t
;

72 
ngx_fûe_t
 
fûe
;

73 
off_t
 
off£t
;

74 
ngx_∑th_t
 *
∑th
;

75 
ngx_poﬁ_t
 *
poﬁ
;

76 *
w¨n
;

78 
ngx_uöt_t
 
ac˚ss
;

80 
log_Àvñ
:8;

81 
≥rsi°ít
:1;

82 
˛ón
:1;

83 
thªad_wrôe
:1;

84 } 
	tngx_ãmp_fûe_t
;

88 
ngx_uöt_t
 
ac˚ss
;

89 
ngx_uöt_t
 
∑th_ac˚ss
;

90 
time_t
 
time
;

91 
ngx_fd_t
 
fd
;

93 
¸óã_∑th
:1;

94 
dñëe_fûe
:1;

96 
ngx_log_t
 *
log
;

97 } 
	tngx_ext_ª«me_fûe_t
;

101 
off_t
 
size
;

102 
size_t
 
buf_size
;

104 
ngx_uöt_t
 
ac˚ss
;

105 
time_t
 
time
;

107 
ngx_log_t
 *
log
;

108 } 
	tngx_c›y_fûe_t
;

111 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

113 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

114 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

116 
	sngx_åì_˘x_s
 {

117 
off_t
 
size
;

118 
off_t
 
fs_size
;

119 
ngx_uöt_t
 
ac˚ss
;

120 
time_t
 
mtime
;

122 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

123 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

124 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

125 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

126 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

128 *
d©a
;

129 
size_t
 
Æloc
;

131 
ngx_log_t
 *
log
;

135 
ngx_öt_t
 
	`ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,

136 
ngx_°r_t
 *
«me
);

138 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

139 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

140 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

141 
ngx_uöt_t
 
ac˚ss
);

142 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

143 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

144 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

145 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

146 
ngx_öt_t
 
	`ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

147 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

148 
ngx_ext_ª«me_fûe_t
 *
ext
);

149 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

150 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

152 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

154 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

155 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

156 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

157 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

160 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

161 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@src/core/ngx_hash.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

15 
ngx_uöt_t
 
i
;

16 
ngx_hash_ñt_t
 *
ñt
;

19 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "hf:\"%*s\"", 
Àn
, 
«me
);

22 
ñt
 = 
hash
->
buckës
[
key
 % hash->
size
];

24 i‡(
ñt
 =
NULL
) {

25  
NULL
;

28 
ñt
->
vÆue
) {

29 i‡(
Àn
 !(
size_t
Ë
ñt
->len) {

30 
√xt
;

33 
i
 = 0; i < 
Àn
; i++) {

34 i‡(
«me
[
i
] !
ñt
->name[i]) {

35 
√xt
;

39  
ñt
->
vÆue
;

41 
√xt
:

43 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

48  
NULL
;

49 
	}
}

53 
	$ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

55 *
vÆue
;

56 
ngx_uöt_t
 
i
, 
n
, 
key
;

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "wch:\"%*s\"", 
Àn
, 
«me
);

62 
n
 = 
Àn
;

64 
n
) {

65 i‡(
«me
[
n
 - 1] == '.') {

69 
n
--;

72 
key
 = 0;

74 
i
 = 
n
; i < 
Àn
; i++) {

75 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

79 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

82 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, &
«me
[
n
], 
Àn
 -Ç);

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

88 i‡(
vÆue
) {

101 i‡((
uöçå_t
Ë
vÆue
 & 2) {

103 i‡(
n
 == 0) {

107 i‡((
uöçå_t
Ë
vÆue
 & 1) {

108  
NULL
;

111 
hwc
 = (
ngx_hash_wûdˇrd_t
 *)

112 ((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

113  
hwc
->
vÆue
;

116 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

118 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hwc
, 
«me
, 
n
 - 1);

120 i‡(
vÆue
) {

121  
vÆue
;

124  
hwc
->
vÆue
;

127 i‡((
uöçå_t
Ë
vÆue
 & 1) {

129 i‡(
n
 == 0) {

133  
NULL
;

136  (*Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

139  
vÆue
;

142  
hwc
->
vÆue
;

143 
	}
}

147 
	$ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

149 *
vÆue
;

150 
ngx_uöt_t
 
i
, 
key
;

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "w˘:\"%*s\"", 
Àn
, 
«me
);

156 
key
 = 0;

158 
i
 = 0; i < 
Àn
; i++) {

159 i‡(
«me
[
i
] == '.') {

163 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

166 i‡(
i
 =
Àn
) {

167  
NULL
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

174 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, 
«me
, 
i
);

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

180 i‡(
vÆue
) {

188 i‡((
uöçå_t
Ë
vÆue
 & 2) {

190 
i
++;

192 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

194 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hwc
, &
«me
[
i
], 
Àn
 - i);

196 i‡(
vÆue
) {

197  
vÆue
;

200  
hwc
->
vÆue
;

203  
vÆue
;

206  
hwc
->
vÆue
;

207 
	}
}

211 
	$ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
,

212 
size_t
 
Àn
)

214 *
vÆue
;

216 i‡(
hash
->hash.
buckës
) {

217 
vÆue
 = 
	`ngx_hash_föd
(&
hash
->hash, 
key
, 
«me
, 
Àn
);

219 i‡(
vÆue
) {

220  
vÆue
;

224 i‡(
Àn
 == 0) {

225  
NULL
;

228 i‡(
hash
->
wc_hód
 && hash->wc_hód->hash.
buckës
) {

229 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hash
->
wc_hód
, 
«me
, 
Àn
);

231 i‡(
vÆue
) {

232  
vÆue
;

236 i‡(
hash
->
wc_èû
 && hash->wc_èû->hash.
buckës
) {

237 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hash
->
wc_èû
, 
«me
, 
Àn
);

239 i‡(
vÆue
) {

240  
vÆue
;

244  
NULL
;

245 
	}
}

248 
	#NGX_HASH_ELT_SIZE
(
«me
) \

249 ((*Ë+ 
	`ngx_Æign
((
«me
)->
key
.
Àn
 + 2, (*)))

	)

251 
ngx_öt_t


252 
	$ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
, 
ngx_uöt_t
 
√…s
)

254 
u_ch¨
 *
ñts
;

255 
size_t
 
Àn
;

256 
u_sh‹t
 *
ã°
;

257 
ngx_uöt_t
 
i
, 
n
, 
key
, 
size
, 
°¨t
, 
buckë_size
;

258 
ngx_hash_ñt_t
 *
ñt
, **
buckës
;

260 i‡(
höô
->
max_size
 == 0) {

261 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

264 
höô
->
«me
, höô->«me, höô->
max_size
);

265  
NGX_ERROR
;

268 
n
 = 0;Ç < 
√…s
;Ç++) {

269 i‡(
höô
->
buckë_size
 < 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]) + (*))

271 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

274 
höô
->
«me
, höô->«me, höô->
buckë_size
);

275  
NGX_ERROR
;

279 
ã°
 = 
	`ngx_Æloc
(
höô
->
max_size
 * (
u_sh‹t
), höô->
poﬁ
->
log
);

280 i‡(
ã°
 =
NULL
) {

281  
NGX_ERROR
;

284 
buckë_size
 = 
höô
->bucket_size - (*);

286 
°¨t
 = 
√…s
 / (
buckë_size
 / (2 * (*)));

287 
°¨t
 = start ? start : 1;

289 i‡(
höô
->
max_size
 > 10000 && 
√…s
 && hinit->max_size /Çelts < 100) {

290 
°¨t
 = 
höô
->
max_size
 - 1000;

293 
size
 = 
°¨t
; sizê<
höô
->
max_size
; size++) {

295 
	`ngx_memzîo
(
ã°
, 
size
 * (
u_sh‹t
));

297 
n
 = 0;Ç < 
√…s
;Ç++) {

298 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

302 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

303 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

306 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

308 
size
, 
key
, 
ã°
[key], &
«mes
[
n
].key);

311 i‡(
ã°
[
key
] > (
u_sh‹t
Ë
buckë_size
) {

312 
√xt
;

316 
found
;

318 
√xt
:

323 
size
 = 
höô
->
max_size
;

325 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
höô
->
poﬁ
->
log
, 0,

329 
höô
->
«me
, höô->«me, höô->
max_size
,

330 
höô
->
«me
, höô->
buckë_size
, hinit->name);

332 
found
:

334 
i
 = 0; i < 
size
; i++) {

335 
ã°
[
i
] = (*);

338 
n
 = 0;Ç < 
√…s
;Ç++) {

339 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

343 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

344 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

347 
Àn
 = 0;

349 
i
 = 0; i < 
size
; i++) {

350 i‡(
ã°
[
i
] == (*)) {

354 
ã°
[
i
] = (
u_sh‹t
Ë(
	`ngx_Æign
—e°[i], 
ngx_ˇchñöe_size
));

356 
Àn
 +
ã°
[
i
];

359 i‡(
höô
->
hash
 =
NULL
) {

360 
höô
->
hash
 = 
	`ngx_pˇŒoc
(höô->
poﬁ
, (
ngx_hash_wûdˇrd_t
)

361 + 
size
 * (
ngx_hash_ñt_t
 *));

362 i‡(
höô
->
hash
 =
NULL
) {

363 
	`ngx_‰ì
(
ã°
);

364  
NGX_ERROR
;

367 
buckës
 = (
ngx_hash_ñt_t
 **)

368 ((
u_ch¨
 *Ë
höô
->
hash
 + (
ngx_hash_wûdˇrd_t
));

371 
buckës
 = 
	`ngx_pˇŒoc
(
höô
->
poﬁ
, 
size
 * (
ngx_hash_ñt_t
 *));

372 i‡(
buckës
 =
NULL
) {

373 
	`ngx_‰ì
(
ã°
);

374  
NGX_ERROR
;

378 
ñts
 = 
	`ngx_∑Œoc
(
höô
->
poﬁ
, 
Àn
 + 
ngx_ˇchñöe_size
);

379 i‡(
ñts
 =
NULL
) {

380 
	`ngx_‰ì
(
ã°
);

381  
NGX_ERROR
;

384 
ñts
 = 
	`ngx_Æign_±r
”…s, 
ngx_ˇchñöe_size
);

386 
i
 = 0; i < 
size
; i++) {

387 i‡(
ã°
[
i
] == (*)) {

391 
buckës
[
i
] = (
ngx_hash_ñt_t
 *Ë
ñts
;

392 
ñts
 +
ã°
[
i
];

395 
i
 = 0; i < 
size
; i++) {

396 
ã°
[
i
] = 0;

399 
n
 = 0;Ç < 
√…s
;Ç++) {

400 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

404 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

405 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
key
] + 
ã°
[key]);

407 
ñt
->
vÆue
 = 
«mes
[
n
].value;

408 
ñt
->
Àn
 = (
u_sh‹t
Ë
«mes
[
n
].
key
.len;

410 
	`ngx_°æow
(
ñt
->
«me
, 
«mes
[
n
].
key
.
d©a
,Çames[n].key.
Àn
);

412 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

415 
i
 = 0; i < 
size
; i++) {

416 i‡(
buckës
[
i
] =
NULL
) {

420 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
i
] + 
ã°
[i]);

422 
ñt
->
vÆue
 = 
NULL
;

425 
	`ngx_‰ì
(
ã°
);

427 
höô
->
hash
->
buckës
 = buckets;

428 
höô
->
hash
->
size
 = size;

432 
i
 = 0; i < 
size
; i++) {

433 
ngx_°r_t
 
vÆ
;

434 
ngx_uöt_t
 
key
;

436 
ñt
 = 
buckës
[
i
];

438 i‡(
ñt
 =
NULL
) {

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

440 "%ui: NULL", 
i
);

444 
ñt
->
vÆue
) {

445 
vÆ
.
Àn
 = 
ñt
->len;

446 
vÆ
.
d©a
 = &
ñt
->
«me
[0];

448 
key
 = 
höô
->
	`key
(
vÆ
.
d©a
, vÆ.
Àn
);

450 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

451 "%ui: %∞\"%V\" %ui", 
i
, 
ñt
, &
vÆ
, 
key
);

453 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

460  
NGX_OK
;

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

466 
ngx_uöt_t
 
√…s
)

468 
size_t
 
Àn
, 
dŸ_Àn
;

469 
ngx_uöt_t
 
i
, 
n
, 
dŸ
;

470 
ngx_¨øy_t
 
cuº_«mes
, 
√xt_«mes
;

471 
ngx_hash_key_t
 *
«me
, *
√xt_«me
;

472 
ngx_hash_öô_t
 
h
;

473 
ngx_hash_wûdˇrd_t
 *
wdc
;

475 i‡(
	`ngx_¨øy_öô
(&
cuº_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

476 (
ngx_hash_key_t
))

477 !
NGX_OK
)

479  
NGX_ERROR
;

482 i‡(
	`ngx_¨øy_öô
(&
√xt_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

483 (
ngx_hash_key_t
))

484 !
NGX_OK
)

486  
NGX_ERROR
;

489 
n
 = 0;Ç < 
√…s
;Ç = 
i
) {

492 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

493 "wc0: \"%V\"", &
«mes
[
n
].
key
);

496 
dŸ
 = 0;

498 
Àn
 = 0;Üí < 
«mes
[
n
].
key
.len;Üen++) {

499 i‡(
«mes
[
n
].
key
.
d©a
[
Àn
] == '.') {

500 
dŸ
 = 1;

505 
«me
 = 
	`ngx_¨øy_push
(&
cuº_«mes
);

506 i‡(
«me
 =
NULL
) {

507  
NGX_ERROR
;

510 
«me
->
key
.
Àn
 =Üen;

511 
«me
->
key
.
d©a
 = 
«mes
[
n
].key.data;

512 
«me
->
key_hash
 = 
höô
->
	`key
“ame->
key
.
d©a
,Çame->key.
Àn
);

513 
«me
->
vÆue
 = 
«mes
[
n
].value;

516 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

517 "wc1: \"%V\" %ui", &
«me
->
key
, 
dŸ
);

520 
dŸ_Àn
 = 
Àn
 + 1;

522 i‡(
dŸ
) {

523 
Àn
++;

526 
√xt_«mes
.
√…s
 = 0;

528 i‡(
«mes
[
n
].
key
.
Àn
 !=Üen) {

529 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

530 i‡(
√xt_«me
 =
NULL
) {

531  
NGX_ERROR
;

534 
√xt_«me
->
key
.
Àn
 = 
«mes
[
n
].key.len -Üen;

535 
√xt_«me
->
key
.
d©a
 = 
«mes
[
n
].key.d©®+ 
Àn
;

536 
√xt_«me
->
key_hash
 = 0;

537 
√xt_«me
->
vÆue
 = 
«mes
[
n
].value;

540 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

541 "wc2: \"%V\"", &
√xt_«me
->
key
);

545 
i
 = 
n
 + 1; i < 
√…s
; i++) {

546 i‡(
	`ngx_°∫cmp
(
«mes
[
n
].
key
.
d©a
,Çames[
i
].key.d©a, 
Àn
) != 0) {

550 i‡(!
dŸ


551 && 
«mes
[
i
].
key
.
Àn
 >Üen

552 && 
«mes
[
i
].
key
.
d©a
[
Àn
] != '.')

557 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

558 i‡(
√xt_«me
 =
NULL
) {

559  
NGX_ERROR
;

562 
√xt_«me
->
key
.
Àn
 = 
«mes
[
i
].key.À¿- 
dŸ_Àn
;

563 
√xt_«me
->
key
.
d©a
 = 
«mes
[
i
].key.d©®+ 
dŸ_Àn
;

564 
√xt_«me
->
key_hash
 = 0;

565 
√xt_«me
->
vÆue
 = 
«mes
[
i
].value;

568 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

569 "wc3: \"%V\"", &
√xt_«me
->
key
);

573 i‡(
√xt_«mes
.
√…s
) {

575 
h
 = *
höô
;

576 
h
.
hash
 = 
NULL
;

578 i‡(
	`ngx_hash_wûdˇrd_öô
(&
h
, (
ngx_hash_key_t
 *Ë
√xt_«mes
.
ñts
,

579 
√xt_«mes
.
√…s
)

580 !
NGX_OK
)

582  
NGX_ERROR
;

585 
wdc
 = (
ngx_hash_wûdˇrd_t
 *Ë
h
.
hash
;

587 i‡(
«mes
[
n
].
key
.
Àn
 ==Üen) {

588 
wdc
->
vÆue
 = 
«mes
[
n
].value;

591 
«me
->
vÆue
 = (*Ë((
uöçå_t
Ë
wdc
 | (
dŸ
 ? 3 : 2));

593 } i‡(
dŸ
) {

594 
«me
->
vÆue
 = (*Ë((
uöçå_t
)Çame->value | 1);

598 i‡(
	`ngx_hash_öô
(
höô
, (
ngx_hash_key_t
 *Ë
cuº_«mes
.
ñts
,

599 
cuº_«mes
.
√…s
)

600 !
NGX_OK
)

602  
NGX_ERROR
;

605  
NGX_OK
;

606 
	}
}

609 
ngx_uöt_t


610 
	$ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

612 
ngx_uöt_t
 
i
, 
key
;

614 
key
 = 0;

616 
i
 = 0; i < 
Àn
; i++) {

617 
key
 = 
	`ngx_hash
(key, 
d©a
[
i
]);

620  
key
;

621 
	}
}

624 
ngx_uöt_t


625 
	$ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

627 
ngx_uöt_t
 
i
, 
key
;

629 
key
 = 0;

631 
i
 = 0; i < 
Àn
; i++) {

632 
key
 = 
	`ngx_hash
(key, 
	`ngx_tﬁowî
(
d©a
[
i
]));

635  
key
;

636 
	}
}

639 
ngx_uöt_t


640 
	$ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

642 
ngx_uöt_t
 
key
;

644 
key
 = 0;

646 
n
--) {

647 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

648 
key
 = 
	`ngx_hash
(key, *
d°
);

649 
d°
++;

650 
§c
++;

653  
key
;

654 
	}
}

657 
ngx_öt_t


658 
	$ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
)

660 
ngx_uöt_t
 
asize
;

662 i‡(
ty≥
 =
NGX_HASH_SMALL
) {

663 
asize
 = 4;

664 
ha
->
hsize
 = 107;

667 
asize
 = 
NGX_HASH_LARGE_ASIZE
;

668 
ha
->
hsize
 = 
NGX_HASH_LARGE_HSIZE
;

671 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys
, ha->
ãmp_poﬁ
, 
asize
, (
ngx_hash_key_t
))

672 !
NGX_OK
)

674  
NGX_ERROR
;

677 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_hód
, ha->
ãmp_poﬁ
, 
asize
,

678 (
ngx_hash_key_t
))

679 !
NGX_OK
)

681  
NGX_ERROR
;

684 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_èû
, ha->
ãmp_poﬁ
, 
asize
,

685 (
ngx_hash_key_t
))

686 !
NGX_OK
)

688  
NGX_ERROR
;

691 
ha
->
keys_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
, (
ngx_¨øy_t
Ë* ha->
hsize
);

692 i‡(
ha
->
keys_hash
 =
NULL
) {

693  
NGX_ERROR
;

696 
ha
->
dns_wc_hód_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

697 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

698 i‡(
ha
->
dns_wc_hód_hash
 =
NULL
) {

699  
NGX_ERROR
;

702 
ha
->
dns_wc_èû_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

703 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

704 i‡(
ha
->
dns_wc_èû_hash
 =
NULL
) {

705  
NGX_ERROR
;

708  
NGX_OK
;

709 
	}
}

712 
ngx_öt_t


713 
	$ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
, *
vÆue
,

714 
ngx_uöt_t
 
Êags
)

716 
size_t
 
Àn
;

717 
u_ch¨
 *
p
;

718 
ngx_°r_t
 *
«me
;

719 
ngx_uöt_t
 
i
, 
k
, 
n
, 
skù
, 
œ°
;

720 
ngx_¨øy_t
 *
keys
, *
hwc
;

721 
ngx_hash_key_t
 *
hk
;

723 
œ°
 = 
key
->
Àn
;

725 i‡(
Êags
 & 
NGX_HASH_WILDCARD_KEY
) {

732 
n
 = 0;

734 
i
 = 0; i < 
key
->
Àn
; i++) {

736 i‡(
key
->
d©a
[
i
] == '*') {

737 i‡(++
n
 > 1) {

738  
NGX_DECLINED
;

742 i‡(
key
->
d©a
[
i
] == '.' && key->data[i + 1] == '.') {

743  
NGX_DECLINED
;

746 i‡(
key
->
d©a
[
i
] == '\0') {

747  
NGX_DECLINED
;

751 i‡(
key
->
Àn
 > 1 && key->
d©a
[0] == '.') {

752 
skù
 = 1;

753 
wûdˇrd
;

756 i‡(
key
->
Àn
 > 2) {

758 i‡(
key
->
d©a
[0] == '*' && key->data[1] == '.') {

759 
skù
 = 2;

760 
wûdˇrd
;

763 i‡(
key
->
d©a
[
i
 - 2] == '.' && key->data[i - 1] == '*') {

764 
skù
 = 0;

765 
œ°
 -= 2;

766 
wûdˇrd
;

770 i‡(
n
) {

771  
NGX_DECLINED
;

777 
k
 = 0;

779 
i
 = 0; i < 
œ°
; i++) {

780 i‡(!(
Êags
 & 
NGX_HASH_READONLY_KEY
)) {

781 
key
->
d©a
[
i
] = 
	`ngx_tﬁowî
(key->data[i]);

783 
k
 = 
	`ngx_hash
(k, 
key
->
d©a
[
i
]);

786 
k
 %
ha
->
hsize
;

790 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

792 i‡(
«me
) {

793 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

794 i‡(
œ°
 !
«me
[
i
].
Àn
) {

798 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, 
«me
[
i
].d©a, 
œ°
) == 0) {

799  
NGX_BUSY
;

804 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

805 (
ngx_°r_t
))

806 !
NGX_OK
)

808  
NGX_ERROR
;

812 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

813 i‡(
«me
 =
NULL
) {

814  
NGX_ERROR
;

817 *
«me
 = *
key
;

819 
hk
 = 
	`ngx_¨øy_push
(&
ha
->
keys
);

820 i‡(
hk
 =
NULL
) {

821  
NGX_ERROR
;

824 
hk
->
key
 = *key;

825 
hk
->
key_hash
 = 
	`ngx_hash_key
(
key
->
d©a
, 
œ°
);

826 
hk
->
vÆue
 = value;

828  
NGX_OK
;

831 
wûdˇrd
:

835 
k
 = 
	`ngx_hash_°æow
(&
key
->
d©a
[
skù
], &key->d©a[skù], 
œ°
 - skip);

837 
k
 %
ha
->
hsize
;

839 i‡(
skù
 == 1) {

843 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

845 i‡(
«me
) {

846 
Àn
 = 
œ°
 - 
skù
;

848 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

849 i‡(
Àn
 !
«me
[
i
].len) {

853 i‡(
	`ngx_°∫cmp
(&
key
->
d©a
[1], 
«me
[
i
].d©a, 
Àn
) == 0) {

854  
NGX_BUSY
;

859 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

860 (
ngx_°r_t
))

861 !
NGX_OK
)

863  
NGX_ERROR
;

867 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

868 i‡(
«me
 =
NULL
) {

869  
NGX_ERROR
;

872 
«me
->
Àn
 = 
œ°
 - 1;

873 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

874 i‡(
«me
->
d©a
 =
NULL
) {

875  
NGX_ERROR
;

878 
	`ngx_mem˝y
(
«me
->
d©a
, &
key
->d©a[1],Çame->
Àn
);

882 i‡(
skù
) {

889 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

890 i‡(
p
 =
NULL
) {

891  
NGX_ERROR
;

894 
Àn
 = 0;

895 
n
 = 0;

897 
i
 = 
œ°
 - 1; i; i--) {

898 i‡(
key
->
d©a
[
i
] == '.') {

899 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[
i
 + 1], 
Àn
);

900 
n
 +
Àn
;

901 
p
[
n
++] = '.';

902 
Àn
 = 0;

906 
Àn
++;

909 i‡(
Àn
) {

910 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[1], 
Àn
);

911 
n
 +
Àn
;

914 
p
[
n
] = '\0';

916 
hwc
 = &
ha
->
dns_wc_hód
;

917 
keys
 = &
ha
->
dns_wc_hód_hash
[
k
];

923 
œ°
++;

925 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

926 i‡(
p
 =
NULL
) {

927  
NGX_ERROR
;

930 
	`ngx_˝y°∫
(
p
, 
key
->
d©a
, 
œ°
);

932 
hwc
 = &
ha
->
dns_wc_èû
;

933 
keys
 = &
ha
->
dns_wc_èû_hash
[
k
];

939 
«me
 = 
keys
->
ñts
;

941 i‡(
«me
) {

942 
Àn
 = 
œ°
 - 
skù
;

944 
i
 = 0; i < 
keys
->
√…s
; i++) {

945 i‡(
Àn
 !
«me
[
i
].len) {

949 i‡(
	`ngx_°∫cmp
(
key
->
d©a
 + 
skù
, 
«me
[
i
].d©a, 
Àn
) == 0) {

950  
NGX_BUSY
;

955 i‡(
	`ngx_¨øy_öô
(
keys
, 
ha
->
ãmp_poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
)

957  
NGX_ERROR
;

961 
«me
 = 
	`ngx_¨øy_push
(
keys
);

962 i‡(
«me
 =
NULL
) {

963  
NGX_ERROR
;

966 
«me
->
Àn
 = 
œ°
 - 
skù
;

967 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

968 i‡(
«me
->
d©a
 =
NULL
) {

969  
NGX_ERROR
;

972 
	`ngx_mem˝y
(
«me
->
d©a
, 
key
->d©®+ 
skù
,Çame->
Àn
);

977 
hk
 = 
	`ngx_¨øy_push
(
hwc
);

978 i‡(
hk
 =
NULL
) {

979  
NGX_ERROR
;

982 
hk
->
key
.
Àn
 = 
œ°
 - 1;

983 
hk
->
key
.
d©a
 = 
p
;

984 
hk
->
key_hash
 = 0;

985 
hk
->
vÆue
 = value;

987  
NGX_OK
;

988 
	}
}

	@src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@src/core/ngx_inet.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

13 
ngx_öt_t
 
ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

14 
ngx_öt_t
 
ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

17 
ö_addr_t


18 
	$ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

20 
u_ch¨
 *
p
, 
c
;

21 
ö_addr_t
 
addr
;

22 
ngx_uöt_t
 
o˘ë
, 
n
;

24 
addr
 = 0;

25 
o˘ë
 = 0;

26 
n
 = 0;

28 
p
 = 
ãxt
;Ö <Åexà+ 
Àn
;Ö++) {

29 
c
 = *
p
;

31 i‡(
c
 >= '0' && c <= '9') {

32 
o˘ë
 = o˘ë * 10 + (
c
 - '0');

34 i‡(
o˘ë
 > 255) {

35  
INADDR_NONE
;

41 i‡(
c
 == '.') {

42 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

43 
o˘ë
 = 0;

44 
n
++;

48  
INADDR_NONE
;

51 i‡(
n
 == 3) {

52 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

53  
	`ht⁄l
(
addr
);

56  
INADDR_NONE
;

57 
	}
}

60 #i‡(
NGX_HAVE_INET6
)

62 
ngx_öt_t


63 
	$ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
)

65 
u_ch¨
 
c
, *
zîo
, *
digô
, *
s
, *
d
;

66 
size_t
 
Àn4
;

67 
ngx_uöt_t
 
n
, 
nibbÀs
, 
w‹d
;

69 i‡(
Àn
 == 0) {

70  
NGX_ERROR
;

73 
zîo
 = 
NULL
;

74 
digô
 = 
NULL
;

75 
Àn4
 = 0;

76 
nibbÀs
 = 0;

77 
w‹d
 = 0;

78 
n
 = 8;

80 i‡(
p
[0] == ':') {

81 
p
++;

82 
Àn
--;

85  ; 
Àn
;Üen--) {

86 
c
 = *
p
++;

88 i‡(
c
 == ':') {

89 i‡(
nibbÀs
) {

90 
digô
 = 
p
;

91 
Àn4
 = 
Àn
;

92 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

93 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

95 i‡(--
n
) {

96 
nibbÀs
 = 0;

97 
w‹d
 = 0;

102 i‡(
zîo
 =
NULL
) {

103 
digô
 = 
p
;

104 
Àn4
 = 
Àn
;

105 
zîo
 = 
addr
;

110  
NGX_ERROR
;

113 i‡(
c
 ='.' && 
nibbÀs
) {

114 i‡(
n
 < 2 || 
digô
 =
NULL
) {

115  
NGX_ERROR
;

118 
w‹d
 = 
	`ngx_öë_addr
(
digô
, 
Àn4
 - 1);

119 i‡(
w‹d
 =
INADDR_NONE
) {

120  
NGX_ERROR
;

123 
w‹d
 = 
	`¡ohl
(word);

124 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 24) & 0xff);

125 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 16) & 0xff);

126 
n
--;

130 i‡(++
nibbÀs
 > 4) {

131  
NGX_ERROR
;

134 i‡(
c
 >= '0' && c <= '9') {

135 
w‹d
 = w‹d * 16 + (
c
 - '0');

139 
c
 |= 0x20;

141 i‡(
c
 >= 'a' && c <= 'f') {

142 
w‹d
 = w‹d * 16 + (
c
 - 'a') + 10;

146  
NGX_ERROR
;

149 i‡(
nibbÀs
 =0 && 
zîo
 =
NULL
) {

150  
NGX_ERROR
;

153 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

154 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

156 i‡(--
n
) {

157 i‡(
zîo
) {

158 
n
 *= 2;

159 
s
 = 
addr
 - 1;

160 
d
 = 
s
 + 
n
;

161 
s
 >
zîo
) {

162 *
d
-- = *
s
--;

164 
	`ngx_memzîo
(
zîo
, 
n
);

165  
NGX_OK
;

169 i‡(
zîo
 =
NULL
) {

170  
NGX_OK
;

174  
NGX_ERROR
;

175 
	}
}

180 
size_t


181 
	$ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
,

182 
ngx_uöt_t
 
p‹t
)

184 
u_ch¨
 *
p
;

185 #i‡(
NGX_HAVE_INET6
 || 
NGX_HAVE_UNIX_DOMAIN
)

186 
size_t
 
n
;

188 
sockaddr_ö
 *
sö
;

189 #i‡(
NGX_HAVE_INET6
)

190 
sockaddr_ö6
 *
sö6
;

192 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

193 
sockaddr_un
 *
ßun
;

196 
ß
->
ß_Ámûy
) {

198 
AF_INET
:

200 
sö
 = (
sockaddr_ö
 *Ë
ß
;

201 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

203 i‡(
p‹t
) {

204 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud:%d",

205 
p
[0],Ö[1],Ö[2],Ö[3], 
	`¡ohs
(
sö
->
sö_p‹t
));

207 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

208 
p
[0],Ö[1],Ö[2],Ö[3]);

211  (
p
 - 
ãxt
);

213 #i‡(
NGX_HAVE_INET6
)

215 
AF_INET6
:

217 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

219 
n
 = 0;

221 i‡(
p‹t
) {

222 
ãxt
[
n
++] = '[';

225 
n
 = 
	`ngx_öë6_¡›
(
sö6
->
sö6_addr
.
s6_addr
, &
ãxt
[n], 
Àn
);

227 i‡(
p‹t
) {

228 
n
 = 
	`ngx_•rötf
(&
ãxt
[1 +Ç], "]:%d",

229 
	`¡ohs
(
sö6
->
sö6_p‹t
)Ë- 
ãxt
;

232  
n
;

235 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

237 
AF_UNIX
:

238 
ßun
 = (
sockaddr_un
 *Ë
ß
;

242 i‡(
sockÀn
 <(
sockÀn_t
Ë
	`off£tof
(
sockaddr_un
, 
sun_∑th
)) {

243 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%Z");

246 
n
 = 
	`ngx_°∫Àn
((
u_ch¨
 *Ë
ßun
->
sun_∑th
,

247 
sockÀn
 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
));

248 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%*s%Z", 
n
, 
ßun
->
sun_∑th
);

253  (
p
 - 
ãxt
 - 1);

260 
	}
}

263 
size_t


264 
	$ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

266 
u_ch¨
 *
p
;

268 
Ámûy
) {

270 
AF_INET
:

272 
p
 = 
addr
;

274  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

275 
p
[0],Ö[1],Ö[2],Ö[3])

276 - 
ãxt
;

278 #i‡(
NGX_HAVE_INET6
)

280 
AF_INET6
:

281  
	`ngx_öë6_¡›
(
addr
, 
ãxt
, 
Àn
);

288 
	}
}

291 #i‡(
NGX_HAVE_INET6
)

293 
size_t


294 
	$ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, 
size_t
 
Àn
)

296 
u_ch¨
 *
d°
;

297 
size_t
 
max
, 
n
;

298 
ngx_uöt_t
 
i
, 
zîo
, 
œ°
;

300 i‡(
Àn
 < 
NGX_INET6_ADDRSTRLEN
) {

304 
zîo
 = (
ngx_uöt_t
) -1;

305 
œ°
 = (
ngx_uöt_t
) -1;

306 
max
 = 1;

307 
n
 = 0;

309 
i
 = 0; i < 16; i += 2) {

311 i‡(
p
[
i
] ||Ö[i + 1]) {

313 i‡(
max
 < 
n
) {

314 
zîo
 = 
œ°
;

315 
max
 = 
n
;

318 
n
 = 0;

322 i‡(
n
++ == 0) {

323 
œ°
 = 
i
;

327 i‡(
max
 < 
n
) {

328 
zîo
 = 
œ°
;

329 
max
 = 
n
;

332 
d°
 = 
ãxt
;

333 
n
 = 16;

335 i‡(
zîo
 == 0) {

337 i‡((
max
 =5 && 
p
[10] == 0xff &&Ö[11] == 0xff)

338 || (
max
 == 6)

339 || (
max
 =7 && 
p
[14] != 0 &&Ö[15] != 1))

341 
n
 = 12;

344 *
d°
++ = ':';

347 
i
 = 0; i < 
n
; i += 2) {

349 i‡(
i
 =
zîo
) {

350 *
d°
++ = ':';

351 
i
 +(
max
 - 1) * 2;

355 
d°
 = 
	`ngx_•rötf
(d°, "%xd", 
p
[
i
] * 256 +Ö[i + 1]);

357 i‡(
i
 < 14) {

358 *
d°
++ = ':';

362 i‡(
n
 == 12) {

363 
d°
 = 
	`ngx_•rötf
(d°, "%ud.%ud.%ud.%ud", 
p
[12],Ö[13],Ö[14],Ö[15]);

366  
d°
 - 
ãxt
;

367 
	}
}

372 
ngx_öt_t


373 
	$ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
)

375 
u_ch¨
 *
addr
, *
mask
, *
œ°
;

376 
size_t
 
Àn
;

377 
ngx_öt_t
 
shi·
;

378 #i‡(
NGX_HAVE_INET6
)

379 
ngx_öt_t
 
rc
;

380 
ngx_uöt_t
 
s
, 
i
;

383 
addr
 = 
ãxt
->
d©a
;

384 
œ°
 = 
addr
 + 
ãxt
->
Àn
;

386 
mask
 = 
	`ngx_°æchr
(
addr
, 
œ°
, '/');

387 
Àn
 = (
mask
 ? mask : 
œ°
Ë- 
addr
;

389 
cidr
->
u
.
ö
.
addr
 = 
	`ngx_öë_addr
◊ddr, 
Àn
);

391 i‡(
cidr
->
u
.
ö
.
addr
 !
INADDR_NONE
) {

392 
cidr
->
Ámûy
 = 
AF_INET
;

394 i‡(
mask
 =
NULL
) {

395 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

396  
NGX_OK
;

399 #i‡(
NGX_HAVE_INET6
)

400 } i‡(
	`ngx_öë6_addr
(
addr
, 
Àn
, 
cidr
->
u
.
ö6
.addr.
s6_addr
Ë=
NGX_OK
) {

401 
cidr
->
Ámûy
 = 
AF_INET6
;

403 i‡(
mask
 =
NULL
) {

404 
	`ngx_mem£t
(
cidr
->
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

405  
NGX_OK
;

410  
NGX_ERROR
;

413 
mask
++;

415 
shi·
 = 
	`ngx_©oi
(
mask
, 
œ°
 - mask);

416 i‡(
shi·
 =
NGX_ERROR
) {

417  
NGX_ERROR
;

420 
cidr
->
Ámûy
) {

422 #i‡(
NGX_HAVE_INET6
)

423 
AF_INET6
:

424 i‡(
shi·
 > 128) {

425  
NGX_ERROR
;

428 
addr
 = 
cidr
->
u
.
ö6
.addr.
s6_addr
;

429 
mask
 = 
cidr
->
u
.
ö6
.mask.
s6_addr
;

430 
rc
 = 
NGX_OK
;

432 
i
 = 0; i < 16; i++) {

434 
s
 = (
shi·
 > 8) ? 8 : shift;

435 
shi·
 -
s
;

437 
mask
[
i
] = (
u_ch¨
Ë(0xffu << (8 - 
s
));

439 i‡(
addr
[
i
] !◊ddr[i] & 
mask
[i])) {

440 
rc
 = 
NGX_DONE
;

441 
addr
[
i
] &
mask
[i];

445  
rc
;

449 i‡(
shi·
 > 32) {

450  
NGX_ERROR
;

453 i‡(
shi·
) {

454 
cidr
->
u
.
ö
.
mask
 = 
	`ht⁄l
((
uöt32_t
Ë(0xffffffffu << (32 - 
shi·
)));

458 
cidr
->
u
.
ö
.
mask
 = 0;

461 i‡(
cidr
->
u
.
ö
.
addr
 =(cidr->u.ö.add∏& cidr->u.ö.
mask
)) {

462  
NGX_OK
;

465 
cidr
->
u
.
ö
.
addr
 &cidr->u.ö.
mask
;

467  
NGX_DONE
;

469 
	}
}

472 
ngx_öt_t


473 
	$ngx_cidr_m©ch
(
sockaddr
 *
ß
, 
ngx_¨øy_t
 *
cidrs
)

475 #i‡(
NGX_HAVE_INET6
)

476 
u_ch¨
 *
p
;

478 
ö_addr_t
 
öaddr
;

479 
ngx_cidr_t
 *
cidr
;

480 
ngx_uöt_t
 
Ámûy
, 
i
;

481 #i‡(
NGX_HAVE_INET6
)

482 
ngx_uöt_t
 
n
;

483 
ö6_addr
 *
öaddr6
;

486 #i‡(
NGX_SUPPRESS_WARN
)

487 
öaddr
 = 0;

488 #i‡(
NGX_HAVE_INET6
)

489 
öaddr6
 = 
NULL
;

493 
Ámûy
 = 
ß
->
ß_Ámûy
;

495 i‡(
Ámûy
 =
AF_INET
) {

496 
öaddr
 = ((
sockaddr_ö
 *Ë
ß
)->
sö_addr
.
s_addr
;

499 #i‡(
NGX_HAVE_INET6
)

500 i‡(
Ámûy
 =
AF_INET6
) {

501 
öaddr6
 = &((
sockaddr_ö6
 *Ë
ß
)->
sö6_addr
;

503 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

504 
Ámûy
 = 
AF_INET
;

506 
p
 = 
öaddr6
->
s6_addr
;

508 
öaddr
 = 
p
[12] << 24;

509 
öaddr
 +
p
[13] << 16;

510 
öaddr
 +
p
[14] << 8;

511 
öaddr
 +
p
[15];

513 
öaddr
 = 
	`ht⁄l
(inaddr);

518 
cidr
 = 
cidrs
->
ñts
, 
i
 = 0; i < cidrs->
√…s
; i++) {

519 i‡(
cidr
[
i
].
Ámûy
 != family) {

520 
√xt
;

523 
Ámûy
) {

525 #i‡(
NGX_HAVE_INET6
)

526 
AF_INET6
:

527 
n
 = 0;Ç < 16;Ç++) {

528 i‡((
öaddr6
->
s6_addr
[
n
] & 
cidr
[
i
].
u
.
ö6
.
mask
.s6_addr[n])

529 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

531 
√xt
;

537 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

538 
AF_UNIX
:

543 i‡((
öaddr
 & 
cidr
[
i
].
u
.
ö
.
mask
Ë!cidr[i].u.ö.
addr
) {

544 
√xt
;

549  
NGX_OK
;

551 
√xt
:

555  
NGX_DECLINED
;

556 
	}
}

559 
ngx_öt_t


560 
	$ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

562 
ö_addr_t
 
öaddr
;

563 
ngx_uöt_t
 
Ámûy
;

564 
sockaddr_ö
 *
sö
;

565 #i‡(
NGX_HAVE_INET6
)

566 
ö6_addr
 
öaddr6
;

567 
sockaddr_ö6
 *
sö6
;

573 
	`ngx_memzîo
(&
öaddr6
, (
ö6_addr
));

576 
öaddr
 = 
	`ngx_öë_addr
(
ãxt
, 
Àn
);

578 i‡(
öaddr
 !
INADDR_NONE
) {

579 
Ámûy
 = 
AF_INET
;

580 
Àn
 = (
sockaddr_ö
);

582 #i‡(
NGX_HAVE_INET6
)

583 } i‡(
	`ngx_öë6_addr
(
ãxt
, 
Àn
, 
öaddr6
.
s6_addr
Ë=
NGX_OK
) {

584 
Ámûy
 = 
AF_INET6
;

585 
Àn
 = (
sockaddr_ö6
);

589  
NGX_DECLINED
;

592 
addr
->
sockaddr
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Àn
);

593 i‡(
addr
->
sockaddr
 =
NULL
) {

594  
NGX_ERROR
;

597 
addr
->
sockaddr
->
ß_Ámûy
 = (
u_ch¨
Ë
Ámûy
;

598 
addr
->
sockÀn
 = 
Àn
;

600 
Ámûy
) {

602 #i‡(
NGX_HAVE_INET6
)

603 
AF_INET6
:

604 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

605 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
öaddr6
.s6_addr, 16);

610 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

611 
sö
->
sö_addr
.
s_addr
 = 
öaddr
;

615  
NGX_OK
;

616 
	}
}

619 
ngx_öt_t


620 
	$ngx_∑r£_addr_p‹t
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

621 
size_t
 
Àn
)

623 
u_ch¨
 *
p
, *
œ°
;

624 
size_t
 
∂í
;

625 
ngx_öt_t
 
rc
, 
p‹t
;

627 
rc
 = 
	`ngx_∑r£_addr
(
poﬁ
, 
addr
, 
ãxt
, 
Àn
);

629 i‡(
rc
 !
NGX_DECLINED
) {

630  
rc
;

633 
œ°
 = 
ãxt
 + 
Àn
;

635 #i‡(
NGX_HAVE_INET6
)

636 i‡(
Àn
 && 
ãxt
[0] == '[') {

638 
p
 = 
	`ngx_°æchr
(
ãxt
, 
œ°
, ']');

640 i‡(
p
 =
NULL
 ||Ö =
œ°
 - 1 || *++p != ':') {

641  
NGX_DECLINED
;

644 
ãxt
++;

645 
Àn
 -= 2;

651 
p
 = 
	`ngx_°æchr
(
ãxt
, 
œ°
, ':');

653 i‡(
p
 =
NULL
) {

654  
NGX_DECLINED
;

658 
p
++;

659 
∂í
 = 
œ°
 - 
p
;

661 
p‹t
 = 
	`ngx_©oi
(
p
, 
∂í
);

663 i‡(
p‹t
 < 1 ||Öort > 65535) {

664  
NGX_DECLINED
;

667 
Àn
 -
∂í
 + 1;

669 
rc
 = 
	`ngx_∑r£_addr
(
poﬁ
, 
addr
, 
ãxt
, 
Àn
);

671 i‡(
rc
 !
NGX_OK
) {

672  
rc
;

675 
	`ngx_öë_£t_p‹t
(
addr
->
sockaddr
, (
ö_p‹t_t
Ë
p‹t
);

677  
NGX_OK
;

678 
	}
}

681 
ngx_öt_t


682 
	$ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

684 
u_ch¨
 *
p
;

685 
size_t
 
Àn
;

687 
p
 = 
u
->
uæ
.
d©a
;

688 
Àn
 = 
u
->
uæ
.len;

690 i‡(
Àn
 >5 && 
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "unix:", 5) == 0) {

691  
	`ngx_∑r£_unix_domaö_uæ
(
poﬁ
, 
u
);

694 i‡(
Àn
 && 
p
[0] == '[') {

695  
	`ngx_∑r£_öë6_uæ
(
poﬁ
, 
u
);

698  
	`ngx_∑r£_öë_uæ
(
poﬁ
, 
u
);

699 
	}
}

702 
ngx_öt_t


703 
	$ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

705 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

706 
u_ch¨
 *
∑th
, *
uri
, *
œ°
;

707 
size_t
 
Àn
;

708 
sockaddr_un
 *
ßun
;

710 
Àn
 = 
u
->
uæ
.len;

711 
∑th
 = 
u
->
uæ
.
d©a
;

713 
∑th
 += 5;

714 
Àn
 -= 5;

716 i‡(
u
->
uri_∑π
) {

718 
œ°
 = 
∑th
 + 
Àn
;

719 
uri
 = 
	`ngx_°æchr
(
∑th
, 
œ°
, ':');

721 i‡(
uri
) {

722 
Àn
 = 
uri
 - 
∑th
;

723 
uri
++;

724 
u
->
uri
.
Àn
 = 
œ°
 - uri;

725 
u
->
uri
.
d©a
 = uri;

729 i‡(
Àn
 == 0) {

730 
u
->
îr
 = "noÖath inÅhe unix domain socket";

731  
NGX_ERROR
;

734 
u
->
ho°
.
Àn
 =Üen++;

735 
u
->
ho°
.
d©a
 = 
∑th
;

737 i‡(
Àn
 > (
ßun
->
sun_∑th
)) {

738 
u
->
îr
 = "tooÜongÖath inÅhe unix domain socket";

739  
NGX_ERROR
;

742 
u
->
sockÀn
 = (
sockaddr_un
);

743 
ßun
 = (
sockaddr_un
 *Ë&
u
->
sockaddr
;

744 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

745 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

747 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

748 i‡(
u
->
addrs
 =
NULL
) {

749  
NGX_ERROR
;

752 
ßun
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_un
));

753 i‡(
ßun
 =
NULL
) {

754  
NGX_ERROR
;

757 
u
->
Ámûy
 = 
AF_UNIX
;

758 
u
->
«ddrs
 = 1;

760 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

761 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

763 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ßun
;

764 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_un
);

765 
u
->
addrs
[0].
«me
.
Àn
 =Üen + 4;

766 
u
->
addrs
[0].
«me
.
d©a
 = u->
uæ
.data;

768  
NGX_OK
;

772 
u
->
îr
 = "the unix domain socketsáreÇot supported onÅhisÖlatform";

774  
NGX_ERROR
;

777 
	}
}

780 
ngx_öt_t


781 
	$ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

783 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
, *
¨gs
;

784 
size_t
 
Àn
;

785 
ngx_öt_t
 
n
;

786 
sockaddr_ö
 *
sö
;

787 #i‡(
NGX_HAVE_INET6
)

788 
sockaddr_ö6
 *
sö6
;

791 
u
->
sockÀn
 = (
sockaddr_ö
);

792 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

793 
sö
->
sö_Ámûy
 = 
AF_INET
;

795 
u
->
Ámûy
 = 
AF_INET
;

797 
ho°
 = 
u
->
uæ
.
d©a
;

799 
œ°
 = 
ho°
 + 
u
->
uæ
.
Àn
;

801 
p‹t
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ':');

803 
uri
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '/');

805 
¨gs
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '?');

807 i‡(
¨gs
) {

808 i‡(
uri
 =
NULL
 || 
¨gs
 < uri) {

809 
uri
 = 
¨gs
;

813 i‡(
uri
) {

814 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

815 
u
->
îr
 = "invalid host";

816  
NGX_ERROR
;

819 
u
->
uri
.
Àn
 = 
œ°
 - uri;

820 
u
->
uri
.
d©a
 = uri;

822 
œ°
 = 
uri
;

824 i‡(
uri
 < 
p‹t
) {

825 
p‹t
 = 
NULL
;

829 i‡(
p‹t
) {

830 
p‹t
++;

832 
Àn
 = 
œ°
 - 
p‹t
;

834 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

836 i‡(
n
 < 1 ||Ç > 65535) {

837 
u
->
îr
 = "invalidÖort";

838  
NGX_ERROR
;

841 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

842 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

844 
u
->
p‹t_ãxt
.
Àn
 =Üen;

845 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

847 
œ°
 = 
p‹t
 - 1;

850 i‡(
uri
 =
NULL
) {

852 i‡(
u
->
li°í
) {

856 
n
 = 
	`ngx_©oi
(
ho°
, 
œ°
 - host);

858 i‡(
n
 !
NGX_ERROR
) {

860 i‡(
n
 < 1 ||Ç > 65535) {

861 
u
->
îr
 = "invalidÖort";

862  
NGX_ERROR
;

865 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

866 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

868 
u
->
p‹t_ãxt
.
Àn
 = 
œ°
 - 
ho°
;

869 
u
->
p‹t_ãxt
.
d©a
 = 
ho°
;

871 
u
->
wûdˇrd
 = 1;

873  
NGX_OK
;

878 
u
->
no_p‹t
 = 1;

879 
u
->
p‹t
 = u->
deÁu…_p‹t
;

880 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

883 
Àn
 = 
œ°
 - 
ho°
;

885 i‡(
Àn
 == 0) {

886 
u
->
îr
 = "no host";

887  
NGX_ERROR
;

890 
u
->
ho°
.
Àn
 =Üen;

891 
u
->
ho°
.
d©a
 = host;

893 i‡(
u
->
li°í
 && 
Àn
 =1 && *
ho°
 == '*') {

894 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

895 
u
->
wûdˇrd
 = 1;

896  
NGX_OK
;

899 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
ho°
, 
Àn
);

901 i‡(
sö
->
sö_addr
.
s_addr
 !
INADDR_NONE
) {

903 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

904 
u
->
wûdˇrd
 = 1;

907 
u
->
«ddrs
 = 1;

909 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

910 i‡(
u
->
addrs
 =
NULL
) {

911  
NGX_ERROR
;

914 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

915 i‡(
sö
 =
NULL
) {

916  
NGX_ERROR
;

919 
	`ngx_mem˝y
(
sö
, &
u
->
sockaddr
, (
sockaddr_ö
));

921 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

922 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

924 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

925 i‡(
p
 =
NULL
) {

926  
NGX_ERROR
;

929 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

930 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

931 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

933  
NGX_OK
;

936 i‡(
u
->
no_ªsﬁve
) {

937  
NGX_OK
;

940 i‡(
	`ngx_öë_ªsﬁve_ho°
(
poﬁ
, 
u
Ë!
NGX_OK
) {

941  
NGX_ERROR
;

944 
u
->
Ámûy
 = u->
addrs
[0].
sockaddr
->
ß_Ámûy
;

945 
u
->
sockÀn
 = u->
addrs
[0].socklen;

946 
	`ngx_mem˝y
(&
u
->
sockaddr
, u->
addrs
[0].sockaddr, u->addrs[0].
sockÀn
);

948 
u
->
Ámûy
) {

950 #i‡(
NGX_HAVE_INET6
)

951 
AF_INET6
:

952 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

954 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

955 
u
->
wûdˇrd
 = 1;

962 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

964 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

965 
u
->
wûdˇrd
 = 1;

971  
NGX_OK
;

972 
	}
}

975 
ngx_öt_t


976 
	$ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

978 #i‡(
NGX_HAVE_INET6
)

979 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
;

980 
size_t
 
Àn
;

981 
ngx_öt_t
 
n
;

982 
sockaddr_ö6
 *
sö6
;

984 
u
->
sockÀn
 = (
sockaddr_ö6
);

985 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

986 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

988 
ho°
 = 
u
->
uæ
.
d©a
 + 1;

990 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

992 
p
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ']');

994 i‡(
p
 =
NULL
) {

995 
u
->
îr
 = "invalid host";

996  
NGX_ERROR
;

999 
p‹t
 = 
p
 + 1;

1001 
uri
 = 
	`ngx_°æchr
(
p‹t
, 
œ°
, '/');

1003 i‡(
uri
) {

1004 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

1005 
u
->
îr
 = "invalid host";

1006  
NGX_ERROR
;

1009 
u
->
uri
.
Àn
 = 
œ°
 - uri;

1010 
u
->
uri
.
d©a
 = uri;

1012 
œ°
 = 
uri
;

1015 i‡(
p‹t
 < 
œ°
) {

1016 i‡(*
p‹t
 != ':') {

1017 
u
->
îr
 = "invalid host";

1018  
NGX_ERROR
;

1021 
p‹t
++;

1023 
Àn
 = 
œ°
 - 
p‹t
;

1025 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

1027 i‡(
n
 < 1 ||Ç > 65535) {

1028 
u
->
îr
 = "invalidÖort";

1029  
NGX_ERROR
;

1032 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

1033 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

1035 
u
->
p‹t_ãxt
.
Àn
 =Üen;

1036 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

1039 
u
->
no_p‹t
 = 1;

1040 
u
->
p‹t
 = u->
deÁu…_p‹t
;

1041 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

1044 
Àn
 = 
p
 - 
ho°
;

1046 i‡(
Àn
 == 0) {

1047 
u
->
îr
 = "no host";

1048  
NGX_ERROR
;

1051 
u
->
ho°
.
Àn
 =Üen + 2;

1052 
u
->
ho°
.
d©a
 = host - 1;

1054 i‡(
	`ngx_öë6_addr
(
ho°
, 
Àn
, 
sö6
->
sö6_addr
.
s6_addr
Ë!
NGX_OK
) {

1055 
u
->
îr
 = "invalid IPv6áddress";

1056  
NGX_ERROR
;

1059 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

1060 
u
->
wûdˇrd
 = 1;

1063 
u
->
Ámûy
 = 
AF_INET6
;

1064 
u
->
«ddrs
 = 1;

1066 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

1067 i‡(
u
->
addrs
 =
NULL
) {

1068  
NGX_ERROR
;

1071 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö6
));

1072 i‡(
sö6
 =
NULL
) {

1073  
NGX_ERROR
;

1076 
	`ngx_mem˝y
(
sö6
, &
u
->
sockaddr
, (
sockaddr_ö6
));

1078 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö6
;

1079 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö6
);

1081 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

1082 i‡(
p
 =
NULL
) {

1083  
NGX_ERROR
;

1086 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1087 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

1088 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1090  
NGX_OK
;

1094 
u
->
îr
 = "the INET6 socketsáreÇot supported onÅhisÖlatform";

1096  
NGX_ERROR
;

1099 
	}
}

1102 #i‡(
NGX_HAVE_GETADDRINFO
 && 
NGX_HAVE_INET6
)

1104 
ngx_öt_t


1105 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

1107 
u_ch¨
 *
p
, *
ho°
;

1108 
size_t
 
Àn
;

1109 
ö_p‹t_t
 
p‹t
;

1110 
ngx_uöt_t
 
i
;

1111 
addröfo
 
höts
, *
ªs
, *
Ω
;

1112 
sockaddr_ö
 *
sö
;

1113 
sockaddr_ö6
 *
sö6
;

1115 
p‹t
 = 
	`ht⁄s
(
u
->port);

1117 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

1118 i‡(
ho°
 =
NULL
) {

1119  
NGX_ERROR
;

1122 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

1124 
	`ngx_memzîo
(&
höts
, (
addröfo
));

1125 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

1126 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1127 #ifde‡
AI_ADDRCONFIG


1128 
höts
.
ai_Êags
 = 
AI_ADDRCONFIG
;

1131 i‡(
	`gëaddröfo
((*Ë
ho°
, 
NULL
, &
höts
, &
ªs
) != 0) {

1132 
u
->
îr
 = "hostÇot found";

1133 
	`ngx_‰ì
(
ho°
);

1134  
NGX_ERROR
;

1137 
	`ngx_‰ì
(
ho°
);

1139 
i
 = 0, 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1141 
Ω
->
ai_Ámûy
) {

1143 
AF_INET
:

1144 
AF_INET6
:

1151 
i
++;

1154 i‡(
i
 == 0) {

1155 
u
->
îr
 = "hostÇot found";

1156 
Áûed
;

1161 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1162 i‡(
u
->
addrs
 =
NULL
) {

1163 
Áûed
;

1166 
u
->
«ddrs
 = 
i
;

1168 
i
 = 0;

1172 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1174 i‡(
Ω
->
ai_Ámûy
 !
AF_INET
) {

1178 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1179 i‡(
sö
 =
NULL
) {

1180 
Áûed
;

1183 
	`ngx_mem˝y
(
sö
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1185 
sö
->
sö_p‹t
 = 
p‹t
;

1187 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1188 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1190 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1192 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1193 i‡(
p
 =
NULL
) {

1194 
Áûed
;

1197 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
Ω
->
ai_addæí
, 
p
,Üen, 1);

1199 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1200 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1202 
i
++;

1205 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1207 i‡(
Ω
->
ai_Ámûy
 !
AF_INET6
) {

1211 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1212 i‡(
sö6
 =
NULL
) {

1213 
Áûed
;

1216 
	`ngx_mem˝y
(
sö6
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1218 
sö6
->
sö6_p‹t
 = 
p‹t
;

1220 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö6
;

1221 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1223 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

1225 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1226 i‡(
p
 =
NULL
) {

1227 
Áûed
;

1230 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö6
, 
Ω
->
ai_addæí
, 
p
,

1231 
Àn
, 1);

1233 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1234 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1236 
i
++;

1239 
	`‰ìaddröfo
(
ªs
);

1240  
NGX_OK
;

1242 
Áûed
:

1244 
	`‰ìaddröfo
(
ªs
);

1245  
NGX_ERROR
;

1246 
	}
}

1250 
ngx_öt_t


1251 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

1253 
u_ch¨
 *
p
, *
ho°
;

1254 
size_t
 
Àn
;

1255 
ö_p‹t_t
 
p‹t
;

1256 
ö_addr_t
 
ö_addr
;

1257 
ngx_uöt_t
 
i
;

1258 
ho°ít
 *
h
;

1259 
sockaddr_ö
 *
sö
;

1263 
p‹t
 = 
	`ht⁄s
(
u
->port);

1265 
ö_addr
 = 
	`ngx_öë_addr
(
u
->
ho°
.
d©a
, u->ho°.
Àn
);

1267 i‡(
ö_addr
 =
INADDR_NONE
) {

1268 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

1269 i‡(
ho°
 =
NULL
) {

1270  
NGX_ERROR
;

1273 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

1275 
h
 = 
	`gëho°by«me
((*Ë
ho°
);

1277 
	`ngx_‰ì
(
ho°
);

1279 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

1280 
u
->
îr
 = "hostÇot found";

1281  
NGX_ERROR
;

1284 
i
 = 0; 
h
->
h_addr_li°
[i] !
NULL
; i++) { }

1288 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1289 i‡(
u
->
addrs
 =
NULL
) {

1290  
NGX_ERROR
;

1293 
u
->
«ddrs
 = 
i
;

1295 
i
 = 0; i < 
u
->
«ddrs
; i++) {

1297 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1298 i‡(
sö
 =
NULL
) {

1299  
NGX_ERROR
;

1302 
sö
->
sö_Ámûy
 = 
AF_INET
;

1303 
sö
->
sö_p‹t
 = 
p‹t
;

1304 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[
i
]);

1306 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1307 
u
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

1309 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1311 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1312 i‡(
p
 =
NULL
) {

1313  
NGX_ERROR
;

1316 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
,

1317 (
sockaddr_ö
), 
p
, 
Àn
, 1);

1319 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1320 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1327 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

1328 i‡(
u
->
addrs
 =
NULL
) {

1329  
NGX_ERROR
;

1332 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1333 i‡(
sö
 =
NULL
) {

1334  
NGX_ERROR
;

1337 
u
->
«ddrs
 = 1;

1339 
sö
->
sö_Ámûy
 = 
AF_INET
;

1340 
sö
->
sö_p‹t
 = 
p‹t
;

1341 
sö
->
sö_addr
.
s_addr
 = 
ö_addr
;

1343 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

1344 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

1346 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

1347 i‡(
p
 =
NULL
) {

1348  
NGX_ERROR
;

1351 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1352 &
u
->
ho°
, 
	`¡ohs
(
p‹t
)Ë- 
p
;

1353 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1356  
NGX_OK
;

1357 
	}
}

1362 
ngx_öt_t


1363 
	$ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

1364 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
)

1366 
sockaddr_ö
 *
sö1
, *
sö2
;

1367 #i‡(
NGX_HAVE_INET6
)

1368 
sockaddr_ö6
 *
sö61
, *
sö62
;

1370 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1371 
size_t
 
Àn
;

1372 
sockaddr_un
 *
ßun1
, *
ßun2
;

1375 i‡(
ß1
->
ß_Ámûy
 !
ß2
->sa_family) {

1376  
NGX_DECLINED
;

1379 
ß1
->
ß_Ámûy
) {

1381 #i‡(
NGX_HAVE_INET6
)

1382 
AF_INET6
:

1384 
sö61
 = (
sockaddr_ö6
 *Ë
ß1
;

1385 
sö62
 = (
sockaddr_ö6
 *Ë
ß2
;

1387 i‡(
cmp_p‹t
 && 
sö61
->
sö6_p‹t
 !
sö62
->sin6_port) {

1388  
NGX_DECLINED
;

1391 i‡(
	`ngx_memcmp
(&
sö61
->
sö6_addr
, &
sö62
->sin6_addr, 16) != 0) {

1392  
NGX_DECLINED
;

1398 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1399 
AF_UNIX
:

1401 
ßun1
 = (
sockaddr_un
 *Ë
ß1
;

1402 
ßun2
 = (
sockaddr_un
 *Ë
ß2
;

1404 i‡(
¶í1
 < 
¶í2
) {

1405 
Àn
 = 
¶í1
 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1408 
Àn
 = 
¶í2
 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1411 i‡(
Àn
 > (
ßun1
->
sun_∑th
)) {

1412 
Àn
 = (
ßun1
->
sun_∑th
);

1415 i‡(
	`ngx_memcmp
(&
ßun1
->
sun_∑th
, &
ßun2
->sun_∑th, 
Àn
) != 0) {

1416  
NGX_DECLINED
;

1424 
sö1
 = (
sockaddr_ö
 *Ë
ß1
;

1425 
sö2
 = (
sockaddr_ö
 *Ë
ß2
;

1427 i‡(
cmp_p‹t
 && 
sö1
->
sö_p‹t
 !
sö2
->sin_port) {

1428  
NGX_DECLINED
;

1431 i‡(
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr) {

1432  
NGX_DECLINED
;

1438  
NGX_OK
;

1439 
	}
}

1442 
ö_p‹t_t


1443 
	$ngx_öë_gë_p‹t
(
sockaddr
 *
ß
)

1445 
sockaddr_ö
 *
sö
;

1446 #i‡(
NGX_HAVE_INET6
)

1447 
sockaddr_ö6
 *
sö6
;

1450 
ß
->
ß_Ámûy
) {

1452 #i‡(
NGX_HAVE_INET6
)

1453 
AF_INET6
:

1454 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

1455  
	`¡ohs
(
sö6
->
sö6_p‹t
);

1458 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1459 
AF_UNIX
:

1464 
sö
 = (
sockaddr_ö
 *Ë
ß
;

1465  
	`¡ohs
(
sö
->
sö_p‹t
);

1467 
	}
}

1471 
	$ngx_öë_£t_p‹t
(
sockaddr
 *
ß
, 
ö_p‹t_t
 
p‹t
)

1473 
sockaddr_ö
 *
sö
;

1474 #i‡(
NGX_HAVE_INET6
)

1475 
sockaddr_ö6
 *
sö6
;

1478 
ß
->
ß_Ámûy
) {

1480 #i‡(
NGX_HAVE_INET6
)

1481 
AF_INET6
:

1482 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

1483 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1487 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1488 
AF_UNIX
:

1493 
sö
 = (
sockaddr_ö
 *Ë
ß
;

1494 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1497 
	}
}

	@src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

17 
	#NGX_INET6_ADDRSTRLEN
 \

18 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

19 
	#NGX_UNIX_ADDRSTRLEN
 \

21 (
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

23 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

24 
	#NGX_SOCKADDR_STRLEN
 
NGX_UNIX_ADDRSTRLEN


	)

25 #ñi‡(
NGX_HAVE_INET6
)

26 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + ("[]:65535"Ë- 1)

	)

28 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET_ADDRSTRLEN
 + (":65535"Ë- 1)

	)

32 
	#NGX_SOCKADDRLEN
 (
ngx_sockaddr_t
)

	)

36 
sockaddr
 
	msockaddr
;

37 
sockaddr_ö
 
	msockaddr_ö
;

38 #i‡(
NGX_HAVE_INET6
)

39 
sockaddr_ö6
 
	msockaddr_ö6
;

41 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

42 
sockaddr_un
 
	msockaddr_un
;

44 } 
	tngx_sockaddr_t
;

48 
ö_addr_t
 
	maddr
;

49 
ö_addr_t
 
	mmask
;

50 } 
	tngx_ö_cidr_t
;

53 #i‡(
NGX_HAVE_INET6
)

56 
ö6_addr
 
	maddr
;

57 
ö6_addr
 
	mmask
;

58 } 
	tngx_ö6_cidr_t
;

64 
ngx_uöt_t
 
	mÁmûy
;

66 
ngx_ö_cidr_t
 
	mö
;

67 #i‡(
NGX_HAVE_INET6
)

68 
ngx_ö6_cidr_t
 
	mö6
;

70 } 
	mu
;

71 } 
	tngx_cidr_t
;

75 
sockaddr
 *
	msockaddr
;

76 
sockÀn_t
 
	msockÀn
;

77 
ngx_°r_t
 
	m«me
;

78 } 
	tngx_addr_t
;

82 
ngx_°r_t
 
	muæ
;

83 
ngx_°r_t
 
	mho°
;

84 
ngx_°r_t
 
	mp‹t_ãxt
;

85 
ngx_°r_t
 
	muri
;

87 
ö_p‹t_t
 
	mp‹t
;

88 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

89 
	mÁmûy
;

91 
	mli°í
:1;

92 
	muri_∑π
:1;

93 
	mno_ªsﬁve
:1;

95 
	mno_p‹t
:1;

96 
	mwûdˇrd
:1;

98 
sockÀn_t
 
	msockÀn
;

99 
ngx_sockaddr_t
 
	msockaddr
;

101 
ngx_addr_t
 *
	maddrs
;

102 
ngx_uöt_t
 
	m«ddrs
;

104 *
	mîr
;

105 } 
	tngx_uæ_t
;

108 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

109 #i‡(
NGX_HAVE_INET6
)

110 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

111 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

113 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
,

114 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
);

115 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

116 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

117 
ngx_öt_t
 
ngx_cidr_m©ch
(
sockaddr
 *
ß
, 
ngx_¨øy_t
 *
cidrs
);

118 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

119 
size_t
 
Àn
);

120 
ngx_öt_t
 
ngx_∑r£_addr_p‹t
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
,

121 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

122 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

123 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

124 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

125 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
);

126 
ö_p‹t_t
 
ngx_öë_gë_p‹t
(
sockaddr
 *
ß
);

127 
ngx_öë_£t_p‹t
(
sockaddr
 *
ß
, 
ö_p‹t_t
 
p‹t
);

	@src/core/ngx_list.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_li°_t
 *

13 
	$ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_li°_t
 *
li°
;

17 
li°
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_li°_t
));

18 i‡(
li°
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_li°_öô
(
li°
, 
poﬁ
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
li°
;

27 
	}
}

31 
	$ngx_li°_push
(
ngx_li°_t
 *
l
)

33 *
ñt
;

34 
ngx_li°_∑π_t
 *
œ°
;

36 
œ°
 = 
l
->last;

38 i‡(
œ°
->
√…s
 =
l
->
«Œoc
) {

42 
œ°
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
, (
ngx_li°_∑π_t
));

43 i‡(
œ°
 =
NULL
) {

44  
NULL
;

47 
œ°
->
ñts
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
,Ü->
«Œoc
 *Ü->
size
);

48 i‡(
œ°
->
ñts
 =
NULL
) {

49  
NULL
;

52 
œ°
->
√…s
 = 0;

53 
œ°
->
√xt
 = 
NULL
;

55 
l
->
œ°
->
√xt
 =Üast;

56 
l
->
œ°
 =Üast;

59 
ñt
 = (*Ë
œ°
->
ñts
 + 
l
->
size
 *Üa°->
√…s
;

60 
œ°
->
√…s
++;

62  
ñt
;

63 
	}
}

	@src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@src/core/ngx_log.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

13 *
ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
);

14 
ngx_log_ö£π
(
ngx_log_t
 *
log
,Çgx_log_à*
√w_log
);

17 #i‡(
NGX_DEBUG
)

19 
ngx_log_mem‹y_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
,

20 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

21 
ngx_log_mem‹y_˛ónup
(*
d©a
);

25 
u_ch¨
 *
	m°¨t
;

26 
u_ch¨
 *
	míd
;

27 
u_ch¨
 *
	mpos
;

28 
ngx_©omic_t
 
	mwrôãn
;

29 } 
	tngx_log_mem‹y_buf_t
;

34 
ngx_comm™d_t
 
	gngx_îæog_comm™ds
[] = {

36 { 
ngx_°rög
("error_log"),

37 
NGX_MAIN_CONF
|
NGX_CONF_1MORE
,

38 
ngx_îr‹_log
,

41 
NULL
 },

43 
ngx_nuŒ_comm™d


47 
ngx_c‹e_moduÀ_t
 
	gngx_îæog_moduÀ_˘x
 = {

48 
ngx_°rög
("errlog"),

49 
NULL
,

50 
NULL


54 
ngx_moduÀ_t
 
	gngx_îæog_moduÀ
 = {

55 
NGX_MODULE_V1
,

56 &
ngx_îæog_moduÀ_˘x
,

57 
ngx_îæog_comm™ds
,

58 
NGX_CORE_MODULE
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NGX_MODULE_V1_PADDING


70 
ngx_log_t
 
	gngx_log
;

71 
ngx_›í_fûe_t
 
	gngx_log_fûe
;

72 
ngx_uöt_t
 
	gngx_u£_°dîr
 = 1;

75 
ngx_°r_t
 
	gîr_Àvñs
[] = {

76 
ngx_nuŒ_°rög
,

77 
ngx_°rög
("emerg"),

78 
ngx_°rög
("alert"),

79 
ngx_°rög
("crit"),

80 
ngx_°rög
("error"),

81 
ngx_°rög
("warn"),

82 
ngx_°rög
("notice"),

83 
ngx_°rög
("info"),

84 
ngx_°rög
("debug")

87 c⁄° *
	gdebug_Àvñs
[] = {

93 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

96 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

97 c⁄° *
fmt
, ...)

102 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

103 c⁄° *
fmt
, 
va_li°
 
¨gs
)

107 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

108 
va_li°
 
¨gs
;

110 
u_ch¨
 *
p
, *
œ°
, *
msg
;

111 
ssize_t
 
n
;

112 
ngx_uöt_t
 
wrŸe_°dîr
, 
debug_c⁄√˘i⁄
;

113 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

115 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

117 
p
 = 
	`ngx_˝ymem
(
îr°r
, 
ngx_ˇched_îr_log_time
.
d©a
,

118 
ngx_ˇched_îr_log_time
.
Àn
);

120 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, " [%V] ", &
îr_Àvñs
[
Àvñ
]);

123 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%P#" 
NGX_TID_T_FMT
 ": ",

124 
ngx_log_pid
, 
ngx_log_tid
);

126 i‡(
log
->
c⁄√˘i⁄
) {

127 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "*%uA ", 
log
->
c⁄√˘i⁄
);

130 
msg
 = 
p
;

132 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

134 
	`va_°¨t
(
¨gs
, 
fmt
);

135 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

136 
	`va_íd
(
¨gs
);

140 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

144 i‡(
îr
) {

145 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

148 i‡(
Àvñ
 !
NGX_LOG_DEBUG
 && 
log
->
h™dÀr
) {

149 
p
 = 
log
->
	`h™dÀr
÷og,Ö, 
œ°
 -Ö);

152 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

153 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

156 
	`ngx_löe„ed
(
p
);

158 
wrŸe_°dîr
 = 0;

159 
debug_c⁄√˘i⁄
 = (
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
) != 0;

161 
log
) {

163 i‡(
log
->
log_Àvñ
 < 
Àvñ
 && !
debug_c⁄√˘i⁄
) {

167 i‡(
log
->
wrôî
) {

168 
log
->
	`wrôî
÷og, 
Àvñ
, 
îr°r
, 
p
 -Érrstr);

169 
√xt
;

172 i‡(
	`ngx_time
(Ë=
log
->
disk_fuŒ_time
) {

180 
√xt
;

183 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
îr°r
, 
p
 -Érrstr);

185 i‡(
n
 =-1 && 
ngx_î∫o
 =
NGX_ENOSPC
) {

186 
log
->
disk_fuŒ_time
 = 
	`ngx_time
();

189 i‡(
log
->
fûe
->
fd
 =
ngx_°dîr
) {

190 
wrŸe_°dîr
 = 1;

193 
√xt
:

195 
log
 =Üog->
√xt
;

198 i‡(!
ngx_u£_°dîr


199 || 
Àvñ
 > 
NGX_LOG_WARN


200 || 
wrŸe_°dîr
)

205 
msg
 -(7 + 
îr_Àvñs
[
Àvñ
].
Àn
 + 3);

207 (Ë
	`ngx_•rötf
(
msg
, "ngöx: [%V] ", &
îr_Àvñs
[
Àvñ
]);

209 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
msg
, 
p
 - msg);

210 
	}
}

213 #i‡!(
NGX_HAVE_VARIADIC_MACROS
)

215 
ngx_cde˛


216 
	$ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

217 c⁄° *
fmt
, ...)

219 
va_li°
 
¨gs
;

221 i‡(
log
->
log_Àvñ
 >
Àvñ
) {

222 
	`va_°¨t
(
¨gs
, 
fmt
);

223 
	`ngx_log_îr‹_c‹e
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨gs
);

224 
	`va_íd
(
¨gs
);

226 
	}
}

229 
ngx_cde˛


230 
	$ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

232 
va_li°
 
¨gs
;

234 
	`va_°¨t
(
¨gs
, 
fmt
);

235 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
îr
, 
fmt
, 
¨gs
);

236 
	`va_íd
(
¨gs
);

237 
	}
}

242 
ngx_cde˛


243 
	$ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

245 
u_ch¨
 *
p
;

246 
va_li°
 
¨gs
;

247 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

249 
	`va_°¨t
(
¨gs
, 
fmt
);

250 
p
 = 
	`ngx_v¢¥ötf
(
îr°r
, ”º°rË- 1, 
fmt
, 
¨gs
);

251 
	`va_íd
(
¨gs
);

253 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

254 "%*s", 
p
 - 
îr°r
,Érrstr);

255 
	}
}

258 
ngx_cde˛


259 
	$ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

261 
u_ch¨
 *
p
, *
œ°
;

262 
va_li°
 
¨gs
;

263 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

265 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

267 
p
 = 
	`ngx_˝ymem
(
îr°r
, "nginx: ", 7);

269 
	`va_°¨t
(
¨gs
, 
fmt
);

270 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

271 
	`va_íd
(
¨gs
);

273 i‡(
îr
) {

274 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

277 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

278 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

281 
	`ngx_löe„ed
(
p
);

283 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
îr°r
, 
p
 -Érrstr);

284 
	}
}

287 
u_ch¨
 *

288 
	$ngx_log_î∫o
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
)

290 i‡(
buf
 > 
œ°
 - 50) {

294 
buf
 = 
œ°
 - 50;

295 *
buf
++ = '.';

296 *
buf
++ = '.';

297 *
buf
++ = '.';

300 #i‡(
NGX_WIN32
)

301 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, ((Ë
îr
 < 0x80000000)

302 ? " (%d: " : " (%Xd: ", 
îr
);

304 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, " (%d: ", 
îr
);

307 
buf
 = 
	`ngx_°ªº‹
(
îr
, buf, 
œ°
 - buf);

309 i‡(
buf
 < 
œ°
) {

310 *
buf
++ = ')';

313  
buf
;

314 
	}
}

317 
ngx_log_t
 *

318 
	$ngx_log_öô
(
u_ch¨
 *
¥efix
)

320 
u_ch¨
 *
p
, *
«me
;

321 
size_t
 
∆í
, 
∂í
;

323 
ngx_log
.
fûe
 = &
ngx_log_fûe
;

324 
ngx_log
.
log_Àvñ
 = 
NGX_LOG_NOTICE
;

326 
«me
 = (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
;

333 
∆í
 = 
	`ngx_°æí
(
«me
);

335 i‡(
∆í
 == 0) {

336 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

337  &
ngx_log
;

340 
p
 = 
NULL
;

342 #i‡(
NGX_WIN32
)

343 i‡(
«me
[1] != ':') {

345 i‡(
«me
[0] != '/') {

348 i‡(
¥efix
) {

349 
∂í
 = 
	`ngx_°æí
(
¥efix
);

352 #ifde‡
NGX_PREFIX


353 
¥efix
 = (
u_ch¨
 *Ë
NGX_PREFIX
;

354 
∂í
 = 
	`ngx_°æí
(
¥efix
);

356 
∂í
 = 0;

360 i‡(
∂í
) {

361 
«me
 = 
	`mÆloc
(
∂í
 + 
∆í
 + 2);

362 i‡(
«me
 =
NULL
) {

363  
NULL
;

366 
p
 = 
	`ngx_˝ymem
(
«me
, 
¥efix
, 
∂í
);

368 i‡(!
	`ngx_∑th_£∑øt‹
(*(
p
 - 1))) {

369 *
p
++ = '/';

372 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
, 
∆í
 + 1);

374 
p
 = 
«me
;

378 
ngx_log_fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
,

379 
NGX_FILE_CREATE_OR_OPEN
,

380 
NGX_FILE_DEFAULT_ACCESS
);

382 i‡(
ngx_log_fûe
.
fd
 =
NGX_INVALID_FILE
) {

383 
	`ngx_log_°dîr
(
ngx_î∫o
,

385 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

386 #i‡(
NGX_WIN32
)

387 
	`ngx_evít_log
(
ngx_î∫o
,

389 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

392 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

395 i‡(
p
) {

396 
	`ngx_‰ì
(
p
);

399  &
ngx_log
;

400 
	}
}

403 
ngx_öt_t


404 
	$ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
)

406 
ngx_log_t
 *
log
;

407 
ngx_°r_t
 
îr‹_log
 = 
	`ngx_°rög
(
NGX_ERROR_LOG_PATH
);

409 i‡(
	`ngx_log_gë_fûe_log
(&
cy˛e
->
√w_log
Ë!
NULL
) {

410  
NGX_OK
;

413 i‡(
cy˛e
->
√w_log
.
log_Àvñ
 != 0) {

416 
log
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_log_t
));

417 i‡(
log
 =
NULL
) {

418  
NGX_ERROR
;

423 
log
 = &
cy˛e
->
√w_log
;

426 
log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

428 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cy˛e
, &
îr‹_log
);

429 i‡(
log
->
fûe
 =
NULL
) {

430  
NGX_ERROR
;

433 i‡(
log
 !&
cy˛e
->
√w_log
) {

434 
	`ngx_log_ö£π
(&
cy˛e
->
√w_log
, 
log
);

437  
NGX_OK
;

438 
	}
}

441 
ngx_öt_t


442 
	$ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
)

444 
ngx_fd_t
 
fd
;

446 i‡(
cy˛e
->
log_u£_°dîr
) {

447  
NGX_OK
;

451 
fd
 = 
	`ngx_log_gë_fûe_log
(
cy˛e
->
log
)->
fûe
->fd;

453 i‡(
fd
 !
ngx_°dîr
) {

454 i‡(
	`ngx_£t_°dîr
(
fd
Ë=
NGX_FILE_ERROR
) {

455 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

456 
ngx_£t_°dîr_n
 " failed");

458  
NGX_ERROR
;

462  
NGX_OK
;

463 
	}
}

466 
ngx_log_t
 *

467 
	$ngx_log_gë_fûe_log
(
ngx_log_t
 *
hód
)

469 
ngx_log_t
 *
log
;

471 
log
 = 
hód
;Üog;Üog =Üog->
√xt
) {

472 i‡(
log
->
fûe
 !
NULL
) {

473  
log
;

477  
NULL
;

478 
	}
}

482 
	$ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
)

484 
ngx_uöt_t
 
i
, 
n
, 
d
, 
found
;

485 
ngx_°r_t
 *
vÆue
;

487 i‡(
cf
->
¨gs
->
√…s
 == 2) {

488 
log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

489  
NGX_CONF_OK
;

492 
vÆue
 = 
cf
->
¨gs
->
ñts
;

494 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

495 
found
 = 0;

497 
n
 = 1;Ç <
NGX_LOG_DEBUG
;Ç++) {

498 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
îr_Àvñs
[
n
].data) == 0) {

500 i‡(
log
->
log_Àvñ
 != 0) {

501 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

503 &
vÆue
[
i
]);

504  
NGX_CONF_ERROR
;

507 
log
->
log_Àvñ
 = 
n
;

508 
found
 = 1;

513 
n
 = 0, 
d
 = 
NGX_LOG_DEBUG_FIRST
; d <
NGX_LOG_DEBUG_LAST
; d <<= 1) {

514 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
debug_Àvñs
[
n
++]) == 0) {

515 i‡(
log
->
log_Àvñ
 & ~
NGX_LOG_DEBUG_ALL
) {

516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

518 &
vÆue
[
i
]);

519  
NGX_CONF_ERROR
;

522 
log
->
log_Àvñ
 |
d
;

523 
found
 = 1;

529 i‡(!
found
) {

530 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

531 "övÆidÜogÜevñ \"%V\"", &
vÆue
[
i
]);

532  
NGX_CONF_ERROR
;

536 i‡(
log
->
log_Àvñ
 =
NGX_LOG_DEBUG
) {

537 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

540  
NGX_CONF_OK
;

541 
	}
}

545 
	$ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

547 
ngx_log_t
 *
dummy
;

549 
dummy
 = &
cf
->
cy˛e
->
√w_log
;

551  
	`ngx_log_£t_log
(
cf
, &
dummy
);

552 
	}
}

556 
	$ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
)

558 
ngx_log_t
 *
√w_log
;

559 
ngx_°r_t
 *
vÆue
, 
«me
;

560 
ngx_sy¶og_≥î_t
 *
≥î
;

562 i‡(*
hód
 !
NULL
 && (*hód)->
log_Àvñ
 == 0) {

563 
√w_log
 = *
hód
;

567 
√w_log
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_log_t
));

568 i‡(
√w_log
 =
NULL
) {

569  
NGX_CONF_ERROR
;

572 i‡(*
hód
 =
NULL
) {

573 *
hód
 = 
√w_log
;

577 
vÆue
 = 
cf
->
¨gs
->
ñts
;

579 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

580 
	`ngx_°r_nuŒ
(&
«me
);

581 
cf
->
cy˛e
->
log_u£_°dîr
 = 1;

583 
√w_log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
«me
);

584 i‡(
√w_log
->
fûe
 =
NULL
) {

585  
NGX_CONF_ERROR
;

588 } i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "memory:", 7) == 0) {

590 #i‡(
NGX_DEBUG
)

591 
size_t
 
size
, 
√eded
;

592 
ngx_poﬁ_˛ónup_t
 *
˛n
;

593 
ngx_log_mem‹y_buf_t
 *
buf
;

595 
vÆue
[1].
Àn
 -= 7;

596 
vÆue
[1].
d©a
 += 7;

598 
√eded
 = ("MEMLOG :" 
NGX_LINEFEED
)

599 + 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn


600 + 
NGX_SIZE_T_LEN


601 + 
NGX_INT_T_LEN


602 + 
NGX_MAX_ERROR_STR
;

604 
size
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

606 i‡(
size
 =(
size_t
Ë
NGX_ERROR
 || sizê< 
√eded
) {

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

608 "övÆid buf„∏sizê\"%V\"", &
vÆue
[1]);

609  
NGX_CONF_ERROR
;

612 
buf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_log_mem‹y_buf_t
));

613 i‡(
buf
 =
NULL
) {

614  
NGX_CONF_ERROR
;

617 
buf
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

618 i‡(
buf
->
°¨t
 =
NULL
) {

619  
NGX_CONF_ERROR
;

622 
buf
->
íd
 = buf->
°¨t
 + 
size
;

624 
buf
->
pos
 = 
	`ngx_¶¥ötf
(buf->
°¨t
, buf->
íd
, "MEMLOG %uz %V:%ui%N",

625 
size
, &
cf
->
c⁄f_fûe
->
fûe
.
«me
,

626 
cf
->
c⁄f_fûe
->
löe
);

628 
	`ngx_mem£t
(
buf
->
pos
, ' ', buf->
íd
 - buf->pos);

630 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

631 i‡(
˛n
 =
NULL
) {

632  
NGX_CONF_ERROR
;

635 
˛n
->
d©a
 = 
√w_log
;

636 
˛n
->
h™dÀr
 = 
ngx_log_mem‹y_˛ónup
;

638 
√w_log
->
wrôî
 = 
ngx_log_mem‹y_wrôî
;

639 
√w_log
->
wd©a
 = 
buf
;

642 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

644  
NGX_CONF_ERROR
;

647 } i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "syslog:", 7) == 0) {

648 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_sy¶og_≥î_t
));

649 i‡(
≥î
 =
NULL
) {

650  
NGX_CONF_ERROR
;

653 i‡(
	`ngx_sy¶og_¥o˚ss_c⁄f
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

654  
NGX_CONF_ERROR
;

657 
√w_log
->
wrôî
 = 
ngx_sy¶og_wrôî
;

658 
√w_log
->
wd©a
 = 
≥î
;

661 
√w_log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

662 i‡(
√w_log
->
fûe
 =
NULL
) {

663  
NGX_CONF_ERROR
;

667 i‡(
	`ngx_log_£t_Àvñs
(
cf
, 
√w_log
Ë!
NGX_CONF_OK
) {

668  
NGX_CONF_ERROR
;

671 i‡(*
hód
 !
√w_log
) {

672 
	`ngx_log_ö£π
(*
hód
, 
√w_log
);

675  
NGX_CONF_OK
;

676 
	}
}

680 
	$ngx_log_ö£π
(
ngx_log_t
 *
log
,Çgx_log_à*
√w_log
)

682 
ngx_log_t
 
tmp
;

684 i‡(
√w_log
->
log_Àvñ
 > 
log
->log_level) {

691 
tmp
 = *
log
;

692 *
log
 = *
√w_log
;

693 *
√w_log
 = 
tmp
;

695 
log
->
√xt
 = 
√w_log
;

699 
log
->
√xt
) {

700 i‡(
√w_log
->
log_Àvñ
 > 
log
->
√xt
->log_level) {

701 
√w_log
->
√xt
 = 
log
->next;

702 
log
->
√xt
 = 
√w_log
;

706 
log
 =Üog->
√xt
;

709 
log
->
√xt
 = 
√w_log
;

710 
	}
}

713 #i‡(
NGX_DEBUG
)

716 
	$ngx_log_mem‹y_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

717 
size_t
 
Àn
)

719 
u_ch¨
 *
p
;

720 
size_t
 
avaû
, 
wrôãn
;

721 
ngx_log_mem‹y_buf_t
 *
mem
;

723 
mem
 = 
log
->
wd©a
;

725 i‡(
mem
 =
NULL
) {

729 
wrôãn
 = 
	`ngx_©omic_„tch_add
(&
mem
->wrôãn, 
Àn
);

731 
p
 = 
mem
->
pos
 + 
wrôãn
 % (mem->
íd
 - mem->pos);

733 
avaû
 = 
mem
->
íd
 - 
p
;

735 i‡(
avaû
 >
Àn
) {

736 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

739 
	`ngx_mem˝y
(
p
, 
buf
, 
avaû
);

740 
	`ngx_mem˝y
(
mem
->
pos
, 
buf
 + 
avaû
, 
Àn
 -ávail);

742 
	}
}

746 
	$ngx_log_mem‹y_˛ónup
(*
d©a
)

748 
ngx_log_t
 *
log
 = 
d©a
;

750 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "destroy memoryÜog buffer");

752 
log
->
wd©a
 = 
NULL
;

753 
	}
}

	@src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_STREAM
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_STREAM


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

46 (*
	tngx_log_wrôî_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tngx_uöt_t
 
	tÀvñ
,

47 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

50 
	sngx_log_s
 {

51 
ngx_uöt_t
 
log_Àvñ
;

52 
ngx_›í_fûe_t
 *
fûe
;

54 
ngx_©omic_uöt_t
 
c⁄√˘i⁄
;

56 
time_t
 
disk_fuŒ_time
;

58 
ngx_log_h™dÀr_±
 
h™dÀr
;

59 *
d©a
;

61 
ngx_log_wrôî_±
 
wrôî
;

62 *
wd©a
;

70 *
a˘i⁄
;

72 
ngx_log_t
 *
√xt
;

76 
	#NGX_MAX_ERROR_STR
 2048

	)

81 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

83 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

85 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

86 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

88 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

89 c⁄° *
fmt
, ...);

91 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

92 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

93 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

97 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

99 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

101 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

102 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

104 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

105 c⁄° *
fmt
, ...);

107 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

108 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

109 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

115 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

117 
ngx_cde˛
 
	`ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

118 c⁄° *
fmt
, ...);

119 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

120 c⁄° *
fmt
, 
va_li°
 
¨gs
);

121 
ngx_cde˛
 
	`ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

122 c⁄° *
fmt
, ...);

130 #i‡(
NGX_DEBUG
)

132 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

134 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

135 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

137 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

138 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

140 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

141 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

143 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

144 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

146 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

147 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

149 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

150 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

152 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

153 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

154 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

155 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

157 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

158 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

159 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

160 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

162 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

163 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

164 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

165 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

170 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

171 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

172 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

174 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

175 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

176 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

178 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

179 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

180 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

182 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

183 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

184 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

186 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

187 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

188 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

190 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

191 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

192 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

194 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

195 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

196 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

197 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

199 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

200 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

201 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

202 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

203 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

205 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

206 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

207 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

208 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

209 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

215 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

216 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

217 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

218 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

219 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

220 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

221 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

222 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

223 
¨g6
, 
¨g7
)

	)

224 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

225 
¨g6
, 
¨g7
, 
¨g8
)

	)

231 
ngx_log_t
 *
	`ngx_log_öô
(
u_ch¨
 *
¥efix
);

232 
ngx_cde˛
 
	`ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

233 
ngx_cde˛
 
	`ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

234 
u_ch¨
 *
	`ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

235 
ngx_öt_t
 
	`ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
);

236 
ngx_öt_t
 
	`ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
);

237 
ngx_log_t
 *
	`ngx_log_gë_fûe_log
“gx_log_à*
hód
);

238 *
	`ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
);

250 
ngx_ölöe
 

251 
	$ngx_wrôe_°dîr
(*
ãxt
)

253 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`ngx_°æí
(text));

254 
	}
}

257 
ngx_ölöe
 

258 
	$ngx_wrôe_°dout
(*
ãxt
)

260 (Ë
	`ngx_wrôe_fd
(
ngx_°dout
, 
ãxt
, 
	`ngx_°æí
(text));

261 
	}
}

264 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

265 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@src/core/ngx_md5.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_md5.h
>

14 c⁄° 
u_ch¨
 *
ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

15 
size_t
 
size
);

19 
	$ngx_md5_öô
(
ngx_md5_t
 *
˘x
)

21 
˘x
->
a
 = 0x67452301;

22 
˘x
->
b
 = 0xefcdab89;

23 
˘x
->
c
 = 0x98badcfe;

24 
˘x
->
d
 = 0x10325476;

26 
˘x
->
byãs
 = 0;

27 
	}
}

31 
	$ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

33 
size_t
 
u£d
, 
‰ì
;

35 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

36 
˘x
->
byãs
 +
size
;

38 i‡(
u£d
) {

39 
‰ì
 = 64 - 
u£d
;

41 i‡(
size
 < 
‰ì
) {

42 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

46 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

47 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

48 
size
 -
‰ì
;

49 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

52 i‡(
size
 >= 64) {

53 
d©a
 = 
	`ngx_md5_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

54 
size
 &= 0x3f;

57 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

58 
	}
}

62 
	$ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
)

64 
size_t
 
u£d
, 
‰ì
;

66 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

68 
˘x
->
buf„r
[
u£d
++] = 0x80;

70 
‰ì
 = 64 - 
u£d
;

72 i‡(
‰ì
 < 8) {

73 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

74 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

75 
u£d
 = 0;

76 
‰ì
 = 64;

79 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

81 
˘x
->
byãs
 <<= 3;

82 
˘x
->
buf„r
[56] = (
u_ch¨
Ë˘x->
byãs
;

83 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

84 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

85 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

86 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

87 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

88 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

89 
˘x
->
buf„r
[63] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

91 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

93 
ªsu…
[0] = (
u_ch¨
Ë
˘x
->
a
;

94 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

95 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

96 
ªsu…
[3] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

97 
ªsu…
[4] = (
u_ch¨
Ë
˘x
->
b
;

98 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

99 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

100 
ªsu…
[7] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

101 
ªsu…
[8] = (
u_ch¨
Ë
˘x
->
c
;

102 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

103 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

104 
ªsu…
[11] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

105 
ªsu…
[12] = (
u_ch¨
Ë
˘x
->
d
;

106 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

107 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

108 
ªsu…
[15] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

110 
	`ngx_memzîo
(
˘x
, (*ctx));

111 
	}
}

122 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

123 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

124 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

125 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

131 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

132 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

133 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

134 (
a
Ë+(
b
)

	)

145 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

147 
	#SET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

148 
	#GET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

152 
	#SET
(
n
) \

153 (
block
[
n
] = \

154 (
uöt32_t
Ë
p
[
n
 * 4] | \

155 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 8) | \

156 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 16) | \

157 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] << 24))

	)

159 
	#GET
(
n
Ë
block
[n]

	)

169 c⁄° 
u_ch¨
 *

170 
	$ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

172 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

173 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

174 c⁄° 
u_ch¨
 *
p
;

175 #i‡!(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

176 
uöt32_t
 
block
[16];

179 
p
 = 
d©a
;

181 
a
 = 
˘x
->a;

182 
b
 = 
˘x
->b;

183 
c
 = 
˘x
->c;

184 
d
 = 
˘x
->d;

187 
ßved_a
 = 
a
;

188 
ßved_b
 = 
b
;

189 
ßved_c
 = 
c
;

190 
ßved_d
 = 
d
;

194 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7);

195 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12);

196 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17);

197 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22);

198 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7);

199 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12);

200 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17);

201 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22);

202 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7);

203 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12);

204 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17);

205 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22);

206 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7);

207 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12);

208 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17);

209 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22);

213 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5);

214 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9);

215 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14);

216 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20);

217 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5);

218 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9);

219 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14);

220 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20);

221 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5);

222 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9);

223 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14);

224 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20);

225 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5);

226 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9);

227 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14);

228 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20);

232 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4);

233 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11);

234 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16);

235 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23);

236 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4);

237 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11);

238 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16);

239 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23);

240 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4);

241 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11);

242 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16);

243 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23);

244 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4);

245 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11);

246 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16);

247 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23);

251 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6);

252 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10);

253 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15);

254 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21);

255 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6);

256 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10);

257 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15);

258 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21);

259 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6);

260 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10);

261 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15);

262 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21);

263 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6);

264 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10);

265 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15);

266 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21);

268 
a
 +
ßved_a
;

269 
b
 +
ßved_b
;

270 
c
 +
ßved_c
;

271 
d
 +
ßved_d
;

273 
p
 += 64;

275 } 
size
 -= 64);

277 
˘x
->
a
 =á;

278 
˘x
->
b
 = b;

279 
˘x
->
c
 = c;

280 
˘x
->
d
 = d;

282  
p
;

283 
	}
}

	@src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
uöt64_t
 
	mbyãs
;

18 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

19 
u_ch¨
 
	mbuf„r
[64];

20 } 
	tngx_md5_t
;

23 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

24 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

25 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@src/core/ngx_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

13 
	#NGX_MAX_DYNAMIC_MODULES
 128

	)

16 
ngx_uöt_t
 
ngx_moduÀ_ödex
(
ngx_cy˛e_t
 *
cy˛e
);

17 
ngx_uöt_t
 
ngx_moduÀ_˘x_ödex
(
ngx_cy˛e_t
 *
cy˛e
,Çgx_uöt_à
ty≥
,

18 
ngx_uöt_t
 
ödex
);

21 
ngx_uöt_t
 
	gngx_max_moduÀ
;

22 
ngx_uöt_t
 
	gngx_moduÀs_n
;

25 
ngx_öt_t


26 
	$ngx_¥eöô_moduÀs
()

28 
ngx_uöt_t
 
i
;

30 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

31 
ngx_moduÀs
[
i
]->
ödex
 = i;

32 
ngx_moduÀs
[
i
]->
«me
 = 
ngx_moduÀ_«mes
[i];

35 
ngx_moduÀs_n
 = 
i
;

36 
ngx_max_moduÀ
 = 
ngx_moduÀs_n
 + 
NGX_MAX_DYNAMIC_MODULES
;

38  
NGX_OK
;

39 
	}
}

42 
ngx_öt_t


43 
	$ngx_cy˛e_moduÀs
(
ngx_cy˛e_t
 *
cy˛e
)

50 
cy˛e
->
moduÀs
 = 
	`ngx_pˇŒoc
(cy˛e->
poﬁ
, (
ngx_max_moduÀ
 + 1)

51 * (
ngx_moduÀ_t
 *));

52 i‡(
cy˛e
->
moduÀs
 =
NULL
) {

53  
NGX_ERROR
;

56 
	`ngx_mem˝y
(
cy˛e
->
moduÀs
, 
ngx_moduÀs
,

57 
ngx_moduÀs_n
 * (
ngx_moduÀ_t
 *));

59 
cy˛e
->
moduÀs_n
 = 
ngx_moduÀs_n
;

61  
NGX_OK
;

62 
	}
}

65 
ngx_öt_t


66 
	$ngx_öô_moduÀs
(
ngx_cy˛e_t
 *
cy˛e
)

68 
ngx_uöt_t
 
i
;

70 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

71 i‡(
cy˛e
->
moduÀs
[
i
]->
öô_moduÀ
) {

72 i‡(
cy˛e
->
moduÀs
[
i
]->
	`öô_moduÀ
(cy˛eË!
NGX_OK
) {

73  
NGX_ERROR
;

78  
NGX_OK
;

79 
	}
}

82 
ngx_öt_t


83 
	$ngx_cou¡_moduÀs
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ty≥
)

85 
ngx_uöt_t
 
i
, 
√xt
, 
max
;

86 
ngx_moduÀ_t
 *
moduÀ
;

88 
√xt
 = 0;

89 
max
 = 0;

93 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

94 
moduÀ
 = 
cy˛e
->
moduÀs
[
i
];

96 i‡(
moduÀ
->
ty≥
 !=Åype) {

100 i‡(
moduÀ
->
˘x_ödex
 !
NGX_MODULE_UNSET_INDEX
) {

104 i‡(
moduÀ
->
˘x_ödex
 > 
max
) {

105 
max
 = 
moduÀ
->
˘x_ödex
;

108 i‡(
moduÀ
->
˘x_ödex
 =
√xt
) {

109 
√xt
++;

117 
moduÀ
->
˘x_ödex
 = 
	`ngx_moduÀ_˘x_ödex
(
cy˛e
, 
ty≥
, 
√xt
);

119 i‡(
moduÀ
->
˘x_ödex
 > 
max
) {

120 
max
 = 
moduÀ
->
˘x_ödex
;

123 
√xt
 = 
moduÀ
->
˘x_ödex
 + 1;

133 i‡(
cy˛e
->
ﬁd_cy˛e
 && cy˛e->ﬁd_cy˛e->
moduÀs
) {

135 
i
 = 0; 
cy˛e
->
ﬁd_cy˛e
->
moduÀs
[i]; i++) {

136 
moduÀ
 = 
cy˛e
->
ﬁd_cy˛e
->
moduÀs
[
i
];

138 i‡(
moduÀ
->
ty≥
 !=Åype) {

142 i‡(
moduÀ
->
˘x_ödex
 > 
max
) {

143 
max
 = 
moduÀ
->
˘x_ödex
;

150 
cy˛e
->
moduÀs_u£d
 = 1;

152  
max
 + 1;

153 
	}
}

156 
ngx_öt_t


157 
	$ngx_add_moduÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
, 
ngx_moduÀ_t
 *
moduÀ
,

158 **
‹dî
)

160 *
rv
;

161 
ngx_uöt_t
 
i
, 
m
, 
bef‹e
;

162 
ngx_c‹e_moduÀ_t
 *
c‹e_moduÀ
;

164 i‡(
cf
->
cy˛e
->
moduÀs_n
 >
ngx_max_moduÀ
) {

165 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

167  
NGX_ERROR
;

170 i‡(
moduÀ
->
vîsi⁄
 !
ngöx_vîsi⁄
) {

171 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

173 
fûe
, 
moduÀ
->
vîsi⁄
, (
ngx_uöt_t
Ë
ngöx_vîsi⁄
);

174  
NGX_ERROR
;

177 i‡(
	`ngx_°rcmp
(
moduÀ
->
sig«tuª
, 
NGX_MODULE_SIGNATURE
) != 0) {

178 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

180 
fûe
);

181  
NGX_ERROR
;

184 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

185 i‡(
	`ngx_°rcmp
(
cf
->
cy˛e
->
moduÀs
[
m
]->
«me
, 
moduÀ
->name) == 0) {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

188 
moduÀ
->
«me
);

189  
NGX_ERROR
;

197 i‡(
moduÀ
->
ödex
 =
NGX_MODULE_UNSET_INDEX
) {

198 
moduÀ
->
ödex
 = 
	`ngx_moduÀ_ödex
(
cf
->
cy˛e
);

200 i‡(
moduÀ
->
ödex
 >
ngx_max_moduÀ
) {

201 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

203  
NGX_ERROR
;

211 
bef‹e
 = 
cf
->
cy˛e
->
moduÀs_n
;

213 i‡(
‹dî
) {

214 
i
 = 0; 
‹dî
[i]; i++) {

215 i‡(
	`ngx_°rcmp
(
‹dî
[
i
], 
moduÀ
->
«me
) == 0) {

216 
i
++;

221  ; 
‹dî
[
i
]; i++) {

224 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0,

226 
moduÀ
->
«me
, 
‹dî
[
i
]);

229 
m
 = 0; m < 
bef‹e
; m++) {

230 i‡(
	`ngx_°rcmp
(
cf
->
cy˛e
->
moduÀs
[
m
]->
«me
, 
‹dî
[
i
]) == 0) {

232 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0,

234 
moduÀ
->
«me
, 
‹dî
[
i
], 
m
);

236 
bef‹e
 = 
m
;

245 i‡(
bef‹e
 !
cf
->
cy˛e
->
moduÀs_n
) {

246 
	`ngx_memmove
(&
cf
->
cy˛e
->
moduÀs
[
bef‹e
 + 1],

247 &
cf
->
cy˛e
->
moduÀs
[
bef‹e
],

248 (
cf
->
cy˛e
->
moduÀs_n
 - 
bef‹e
Ë* (
ngx_moduÀ_t
 *));

251 
cf
->
cy˛e
->
moduÀs
[
bef‹e
] = 
moduÀ
;

252 
cf
->
cy˛e
->
moduÀs_n
++;

254 i‡(
moduÀ
->
ty≥
 =
NGX_CORE_MODULE
) {

263 
c‹e_moduÀ
 = 
moduÀ
->
˘x
;

265 i‡(
c‹e_moduÀ
->
¸óã_c⁄f
) {

266 
rv
 = 
c‹e_moduÀ
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

267 i‡(
rv
 =
NULL
) {

268  
NGX_ERROR
;

271 
cf
->
cy˛e
->
c⁄f_˘x
[
moduÀ
->
ödex
] = 
rv
;

275  
NGX_OK
;

276 
	}
}

279 
ngx_uöt_t


280 
	$ngx_moduÀ_ödex
(
ngx_cy˛e_t
 *
cy˛e
)

282 
ngx_uöt_t
 
i
, 
ödex
;

283 
ngx_moduÀ_t
 *
moduÀ
;

285 
ödex
 = 0;

287 
agaö
:

291 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

292 
moduÀ
 = 
cy˛e
->
moduÀs
[
i
];

294 i‡(
moduÀ
->
ödex
 == index) {

295 
ödex
++;

296 
agaö
;

302 i‡(
cy˛e
->
ﬁd_cy˛e
 && cy˛e->ﬁd_cy˛e->
moduÀs
) {

304 
i
 = 0; 
cy˛e
->
ﬁd_cy˛e
->
moduÀs
[i]; i++) {

305 
moduÀ
 = 
cy˛e
->
ﬁd_cy˛e
->
moduÀs
[
i
];

307 i‡(
moduÀ
->
ödex
 == index) {

308 
ödex
++;

309 
agaö
;

314  
ödex
;

315 
	}
}

318 
ngx_uöt_t


319 
	$ngx_moduÀ_˘x_ödex
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ty≥
,Çgx_uöt_à
ödex
)

321 
ngx_uöt_t
 
i
;

322 
ngx_moduÀ_t
 *
moduÀ
;

324 
agaö
:

328 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

329 
moduÀ
 = 
cy˛e
->
moduÀs
[
i
];

331 i‡(
moduÀ
->
ty≥
 !=Åype) {

335 i‡(
moduÀ
->
˘x_ödex
 =
ödex
) {

336 
ödex
++;

337 
agaö
;

343 i‡(
cy˛e
->
ﬁd_cy˛e
 && cy˛e->ﬁd_cy˛e->
moduÀs
) {

345 
i
 = 0; 
cy˛e
->
ﬁd_cy˛e
->
moduÀs
[i]; i++) {

346 
moduÀ
 = 
cy˛e
->
ﬁd_cy˛e
->
moduÀs
[
i
];

348 i‡(
moduÀ
->
ty≥
 !=Åype) {

352 i‡(
moduÀ
->
˘x_ödex
 =
ödex
) {

353 
ödex
++;

354 
agaö
;

359  
ödex
;

360 
	}
}

	@src/core/ngx_module.h

9 #i‚de‡
_NGX_MODULE_H_INCLUDED_


10 
	#_NGX_MODULE_H_INCLUDED_


	)

13 
	~<ngx_c⁄fig.h
>

14 
	~<ngx_c‹e.h
>

15 
	~<ngöx.h
>

18 
	#NGX_MODULE_UNSET_INDEX
 (
ngx_uöt_t
Ë-1

	)

21 
	#NGX_MODULE_SIGNATURE_0
 \

22 
	`ngx_vÆue
(
NGX_PTR_SIZE
) "," \

23 
	`ngx_vÆue
(
NGX_SIG_ATOMIC_T_SIZE
) "," \

24 
	`ngx_vÆue
(
NGX_TIME_T_SIZE
Ë","

	)

26 #i‡(
NGX_HAVE_KQUEUE
)

27 
	#NGX_MODULE_SIGNATURE_1
 "1"

	)

29 
	#NGX_MODULE_SIGNATURE_1
 "0"

	)

32 #i‡(
NGX_HAVE_IOCP
)

33 
	#NGX_MODULE_SIGNATURE_2
 "1"

	)

35 
	#NGX_MODULE_SIGNATURE_2
 "0"

	)

38 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_COMPAT
)

39 
	#NGX_MODULE_SIGNATURE_3
 "1"

	)

41 
	#NGX_MODULE_SIGNATURE_3
 "0"

	)

44 #i‡(
NGX_HAVE_AIO_SENDFILE
 || 
NGX_COMPAT
)

45 
	#NGX_MODULE_SIGNATURE_4
 "1"

	)

47 
	#NGX_MODULE_SIGNATURE_4
 "0"

	)

50 #i‡(
NGX_HAVE_EVENTFD
)

51 
	#NGX_MODULE_SIGNATURE_5
 "1"

	)

53 
	#NGX_MODULE_SIGNATURE_5
 "0"

	)

56 #i‡(
NGX_HAVE_EPOLL
)

57 
	#NGX_MODULE_SIGNATURE_6
 "1"

	)

59 
	#NGX_MODULE_SIGNATURE_6
 "0"

	)

62 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

63 
	#NGX_MODULE_SIGNATURE_7
 "1"

	)

65 
	#NGX_MODULE_SIGNATURE_7
 "0"

	)

68 #i‡(
NGX_HAVE_INET6
)

69 
	#NGX_MODULE_SIGNATURE_8
 "1"

	)

71 
	#NGX_MODULE_SIGNATURE_8
 "0"

	)

74 
	#NGX_MODULE_SIGNATURE_9
 "1"

	)

75 
	#NGX_MODULE_SIGNATURE_10
 "1"

	)

77 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

78 
	#NGX_MODULE_SIGNATURE_11
 "1"

	)

80 
	#NGX_MODULE_SIGNATURE_11
 "0"

	)

83 
	#NGX_MODULE_SIGNATURE_12
 "1"

	)

85 #i‡(
NGX_HAVE_SETFIB
)

86 
	#NGX_MODULE_SIGNATURE_13
 "1"

	)

88 
	#NGX_MODULE_SIGNATURE_13
 "0"

	)

91 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

92 
	#NGX_MODULE_SIGNATURE_14
 "1"

	)

94 
	#NGX_MODULE_SIGNATURE_14
 "0"

	)

97 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

98 
	#NGX_MODULE_SIGNATURE_15
 "1"

	)

100 
	#NGX_MODULE_SIGNATURE_15
 "0"

	)

103 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

104 
	#NGX_MODULE_SIGNATURE_16
 "1"

	)

106 
	#NGX_MODULE_SIGNATURE_16
 "0"

	)

109 
	#NGX_MODULE_SIGNATURE_17
 "0"

	)

110 
	#NGX_MODULE_SIGNATURE_18
 "0"

	)

112 #i‡(
NGX_HAVE_OPENAT
)

113 
	#NGX_MODULE_SIGNATURE_19
 "1"

	)

115 
	#NGX_MODULE_SIGNATURE_19
 "0"

	)

118 #i‡(
NGX_HAVE_ATOMIC_OPS
)

119 
	#NGX_MODULE_SIGNATURE_20
 "1"

	)

121 
	#NGX_MODULE_SIGNATURE_20
 "0"

	)

124 #i‡(
NGX_HAVE_POSIX_SEM
)

125 
	#NGX_MODULE_SIGNATURE_21
 "1"

	)

127 
	#NGX_MODULE_SIGNATURE_21
 "0"

	)

130 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

131 
	#NGX_MODULE_SIGNATURE_22
 "1"

	)

133 
	#NGX_MODULE_SIGNATURE_22
 "0"

	)

136 #i‡(
NGX_PCRE
)

137 
	#NGX_MODULE_SIGNATURE_23
 "1"

	)

139 
	#NGX_MODULE_SIGNATURE_23
 "0"

	)

142 #i‡(
NGX_HTTP_SSL
 || 
NGX_COMPAT
)

143 
	#NGX_MODULE_SIGNATURE_24
 "1"

	)

145 
	#NGX_MODULE_SIGNATURE_24
 "0"

	)

148 
	#NGX_MODULE_SIGNATURE_25
 "1"

	)

150 #i‡(
NGX_HTTP_GZIP
)

151 
	#NGX_MODULE_SIGNATURE_26
 "1"

	)

153 
	#NGX_MODULE_SIGNATURE_26
 "0"

	)

156 
	#NGX_MODULE_SIGNATURE_27
 "1"

	)

158 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

159 
	#NGX_MODULE_SIGNATURE_28
 "1"

	)

161 
	#NGX_MODULE_SIGNATURE_28
 "0"

	)

164 #i‡(
NGX_HTTP_REALIP
)

165 
	#NGX_MODULE_SIGNATURE_29
 "1"

	)

167 
	#NGX_MODULE_SIGNATURE_29
 "0"

	)

170 #i‡(
NGX_HTTP_HEADERS
)

171 
	#NGX_MODULE_SIGNATURE_30
 "1"

	)

173 
	#NGX_MODULE_SIGNATURE_30
 "0"

	)

176 #i‡(
NGX_HTTP_DAV
)

177 
	#NGX_MODULE_SIGNATURE_31
 "1"

	)

179 
	#NGX_MODULE_SIGNATURE_31
 "0"

	)

182 #i‡(
NGX_HTTP_CACHE
)

183 
	#NGX_MODULE_SIGNATURE_32
 "1"

	)

185 
	#NGX_MODULE_SIGNATURE_32
 "0"

	)

188 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

189 
	#NGX_MODULE_SIGNATURE_33
 "1"

	)

191 
	#NGX_MODULE_SIGNATURE_33
 "0"

	)

194 #i‡(
NGX_COMPAT
)

195 
	#NGX_MODULE_SIGNATURE_34
 "1"

	)

197 
	#NGX_MODULE_SIGNATURE_34
 "0"

	)

200 
	#NGX_MODULE_SIGNATURE
 \

201 
NGX_MODULE_SIGNATURE_0
 
NGX_MODULE_SIGNATURE_1
 
NGX_MODULE_SIGNATURE_2
 \

202 
NGX_MODULE_SIGNATURE_3
 
NGX_MODULE_SIGNATURE_4
 
NGX_MODULE_SIGNATURE_5
 \

203 
NGX_MODULE_SIGNATURE_6
 
NGX_MODULE_SIGNATURE_7
 
NGX_MODULE_SIGNATURE_8
 \

204 
NGX_MODULE_SIGNATURE_9
 
NGX_MODULE_SIGNATURE_10
 
NGX_MODULE_SIGNATURE_11
 \

205 
NGX_MODULE_SIGNATURE_12
 
NGX_MODULE_SIGNATURE_13
 
NGX_MODULE_SIGNATURE_14
 \

206 
NGX_MODULE_SIGNATURE_15
 
NGX_MODULE_SIGNATURE_16
 
NGX_MODULE_SIGNATURE_17
 \

207 
NGX_MODULE_SIGNATURE_18
 
NGX_MODULE_SIGNATURE_19
 
NGX_MODULE_SIGNATURE_20
 \

208 
NGX_MODULE_SIGNATURE_21
 
NGX_MODULE_SIGNATURE_22
 
NGX_MODULE_SIGNATURE_23
 \

209 
NGX_MODULE_SIGNATURE_24
 
NGX_MODULE_SIGNATURE_25
 
NGX_MODULE_SIGNATURE_26
 \

210 
NGX_MODULE_SIGNATURE_27
 
NGX_MODULE_SIGNATURE_28
 
NGX_MODULE_SIGNATURE_29
 \

211 
NGX_MODULE_SIGNATURE_30
 
NGX_MODULE_SIGNATURE_31
 
NGX_MODULE_SIGNATURE_32
 \

212 
NGX_MODULE_SIGNATURE_33
 
NGX_MODULE_SIGNATURE_34


	)

215 
	#NGX_MODULE_V1
 \

216 
NGX_MODULE_UNSET_INDEX
, NGX_MODULE_UNSET_INDEX, \

217 
NULL
, 0, 0, 
ngöx_vîsi⁄
, 
NGX_MODULE_SIGNATURE


	)

219 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

222 
	sngx_moduÀ_s
 {

223 
ngx_uöt_t
 
	m˘x_ödex
;

224 
ngx_uöt_t
 
	mödex
;

226 *
	m«me
;

228 
ngx_uöt_t
 
	m•¨e0
;

229 
ngx_uöt_t
 
	m•¨e1
;

231 
ngx_uöt_t
 
	mvîsi⁄
;

232 c⁄° *
	msig«tuª
;

234 *
	m˘x
;

235 
ngx_comm™d_t
 *
	mcomm™ds
;

236 
ngx_uöt_t
 
	mty≥
;

238 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

240 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

242 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

243 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

244 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

245 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

247 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

249 
uöçå_t
 
	m•¨e_hook0
;

250 
uöçå_t
 
	m•¨e_hook1
;

251 
uöçå_t
 
	m•¨e_hook2
;

252 
uöçå_t
 
	m•¨e_hook3
;

253 
uöçå_t
 
	m•¨e_hook4
;

254 
uöçå_t
 
	m•¨e_hook5
;

255 
uöçå_t
 
	m•¨e_hook6
;

256 
uöçå_t
 
	m•¨e_hook7
;

261 
ngx_°r_t
 
	m«me
;

262 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

263 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

264 } 
	tngx_c‹e_moduÀ_t
;

267 
ngx_öt_t
 
ngx_¥eöô_moduÀs
();

268 
ngx_öt_t
 
ngx_cy˛e_moduÀs
(
ngx_cy˛e_t
 *
cy˛e
);

269 
ngx_öt_t
 
ngx_öô_moduÀs
(
ngx_cy˛e_t
 *
cy˛e
);

270 
ngx_öt_t
 
ngx_cou¡_moduÀs
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ty≥
);

273 
ngx_öt_t
 
ngx_add_moduÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
,

274 
ngx_moduÀ_t
 *
moduÀ
, **
‹dî
);

277 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

278 
ngx_uöt_t
 
ngx_max_moduÀ
;

280 *
ngx_moduÀ_«mes
[];

	@src/core/ngx_murmurhash.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
uöt32_t


12 
	$ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

14 
uöt32_t
 
h
, 
k
;

16 
h
 = 0 ^ 
Àn
;

18 
Àn
 >= 4) {

19 
k
 = 
d©a
[0];

20 
k
 |
d©a
[1] << 8;

21 
k
 |
d©a
[2] << 16;

22 
k
 |
d©a
[3] << 24;

24 
k
 *= 0x5bd1e995;

25 
k
 ^= k >> 24;

26 
k
 *= 0x5bd1e995;

28 
h
 *= 0x5bd1e995;

29 
h
 ^
k
;

31 
d©a
 += 4;

32 
Àn
 -= 4;

35 
Àn
) {

37 
h
 ^
d©a
[2] << 16;

40 
h
 ^
d©a
[1] << 8;

43 
h
 ^
d©a
[0];

44 
h
 *= 0x5bd1e995;

47 
h
 ^= h >> 13;

48 
h
 *= 0x5bd1e995;

49 
h
 ^= h >> 15;

51  
h
;

52 
	}
}

	@src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@src/core/ngx_open_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

21 
	#NGX_MIN_READ_AHEAD
 (128 * 1024)

	)

24 
ngx_›í_fûe_ˇche_˛ónup
(*
d©a
);

25 #i‡(
NGX_HAVE_OPENAT
)

26 
ngx_fd_t
 
ngx_›í©_fûe_ow√r
“gx_fd_à
©_fd
, c⁄° 
u_ch¨
 *
«me
,

27 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
);

28 #i‡(
NGX_HAVE_O_PATH
)

29 
ngx_öt_t
 
ngx_fûe_o_∑th_öfo
(
ngx_fd_t
 
fd
, 
ngx_fûe_öfo_t
 *
fi
,

30 
ngx_log_t
 *
log
);

33 
ngx_fd_t
 
ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
,

34 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,

35 
ngx_öt_t
 
ac˚ss
, 
ngx_log_t
 *
log
);

36 
ngx_öt_t
 
ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
,

37 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
,

39 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

40 
ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

41 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

42 
ngx_›í_fûe_˛ónup
(*
d©a
);

43 
ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

44 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
);

45 
ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
);

46 
ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

47 
ngx_uöt_t
 
n
, 
ngx_log_t
 *
log
);

48 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

49 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

50 
ngx_ˇched_›í_fûe_t
 *

51 
ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

52 
uöt32_t
 
hash
);

53 
ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
);

56 
ngx_›í_fûe_ˇche_t
 *

57 
	$ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
)

59 
ngx_poﬁ_˛ónup_t
 *
˛n
;

60 
ngx_›í_fûe_ˇche_t
 *
ˇche
;

62 
ˇche
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_›í_fûe_ˇche_t
));

63 i‡(
ˇche
 =
NULL
) {

64  
NULL
;

67 
	`ngx_rbåì_öô
(&
ˇche
->
rbåì
, &ˇche->
£¡öñ
,

68 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
);

70 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

72 
ˇche
->
cuºít
 = 0;

73 
ˇche
->
max
 = max;

74 
ˇche
->
öa˘ive
 = inactive;

76 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, 0);

77 i‡(
˛n
 =
NULL
) {

78  
NULL
;

81 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_˛ónup
;

82 
˛n
->
d©a
 = 
ˇche
;

84  
ˇche
;

85 
	}
}

89 
	$ngx_›í_fûe_ˇche_˛ónup
(*
d©a
)

91 
ngx_›í_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

93 
ngx_queue_t
 *
q
;

94 
ngx_ˇched_›í_fûe_t
 *
fûe
;

96 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

101 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

105 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

107 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

109 
	`ngx_queue_ªmove
(
q
);

111 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

113 
ˇche
->
cuºít
--;

115 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

116 "dñëêˇched o≥¿fûe: %s", 
fûe
->
«me
);

118 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

119 
fûe
->
˛o£
 = 1;

120 
fûe
->
cou¡
 = 0;

121 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
ngx_cy˛e
->
log
);

124 
	`ngx_‰ì
(
fûe
->
«me
);

125 
	`ngx_‰ì
(
fûe
);

129 i‡(
ˇche
->
cuºít
) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

132 
ˇche
->
cuºít
);

135 i‡(
ˇche
->
rbåì
.
roŸ
 !ˇche->rbåì.
£¡öñ
) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

140 
	}
}

143 
ngx_öt_t


144 
	$ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

145 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
)

147 
time_t
 
now
;

148 
uöt32_t
 
hash
;

149 
ngx_öt_t
 
rc
;

150 
ngx_fûe_öfo_t
 
fi
;

151 
ngx_poﬁ_˛ónup_t
 *
˛n
;

152 
ngx_ˇched_›í_fûe_t
 *
fûe
;

153 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

154 
ngx_›í_fûe_ˇche_˛ónup_t
 *
of˛n
;

156 
of
->
fd
 = 
NGX_INVALID_FILE
;

157 
of
->
îr
 = 0;

159 i‡(
ˇche
 =
NULL
) {

161 i‡(
of
->
ã°_⁄ly
) {

163 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
poﬁ
->
log
)

164 =
NGX_FILE_ERROR
)

166  
NGX_ERROR
;

169 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

170 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

171 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

172 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

173 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

174 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

175 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

176 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

178  
NGX_OK
;

181 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

182 i‡(
˛n
 =
NULL
) {

183  
NGX_ERROR
;

186 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

188 i‡(
rc
 =
NGX_OK
 && !
of
->
is_dú
) {

189 
˛n
->
h™dÀr
 = 
ngx_poﬁ_˛ónup_fûe
;

190 
˛nf
 = 
˛n
->
d©a
;

192 
˛nf
->
fd
 = 
of
->fd;

193 
˛nf
->
«me
 =Çame->
d©a
;

194 
˛nf
->
log
 = 
poﬁ
->log;

197  
rc
;

200 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_›í_fûe_ˇche_˛ónup_t
));

201 i‡(
˛n
 =
NULL
) {

202  
NGX_ERROR
;

205 
now
 = 
	`ngx_time
();

207 
hash
 = 
	`ngx_¸c32_l⁄g
(
«me
->
d©a
,Çame->
Àn
);

209 
fûe
 = 
	`ngx_›í_fûe_lookup
(
ˇche
, 
«me
, 
hash
);

211 i‡(
fûe
) {

213 
fûe
->
u£s
++;

215 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

217 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
 && fûe->
îr
 =0 && !fûe->
is_dú
) {

221 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

223 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

224 
Áûed
;

227 
add_evít
;

230 i‡(
fûe
->
u£_evít


231 || (
fûe
->
evít
 =
NULL


232 && (
of
->
uniq
 =0 || of->uniq =
fûe
->uniq)

233 && 
now
 - 
fûe
->
¸óãd
 < 
of
->
vÆid


234 #i‡(
NGX_HAVE_OPENAT
)

235 && 
of
->
dißbÀ_symlöks
 =
fûe
->disable_symlinks

236 && 
of
->
dißbÀ_symlöks_‰om
 =
fûe
->disable_symlinks_from

240 i‡(
fûe
->
îr
 == 0) {

242 
of
->
fd
 = 
fûe
->fd;

243 
of
->
uniq
 = 
fûe
->uniq;

244 
of
->
mtime
 = 
fûe
->mtime;

245 
of
->
size
 = 
fûe
->size;

247 
of
->
is_dú
 = 
fûe
->is_dir;

248 
of
->
is_fûe
 = 
fûe
->is_file;

249 
of
->
is_lök
 = 
fûe
->is_link;

250 
of
->
is_exec
 = 
fûe
->is_exec;

251 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

253 i‡(!
fûe
->
is_dú
) {

254 
fûe
->
cou¡
++;

255 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

259 
of
->
îr
 = 
fûe
->err;

260 #i‡(
NGX_HAVE_OPENAT
)

261 
of
->
Áûed
 = 
fûe
->
dißbÀ_symlöks
 ? 
ngx_›í©_fûe_n


262 : 
ngx_›í_fûe_n
;

264 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

268 
found
;

271 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

273 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
);

275 i‡(
fûe
->
is_dú
) {

283 
of
->
ã°_dú
 = 1;

286 
of
->
fd
 = 
fûe
->fd;

287 
of
->
uniq
 = 
fûe
->uniq;

289 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

291 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

292 
Áûed
;

295 i‡(
of
->
is_dú
) {

297 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

298 
upd©e
;

303 } i‡(
of
->
îr
 == 0) {

305 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

306 
add_evít
;

309 i‡(
of
->
uniq
 =
fûe
->uniq) {

311 i‡(
fûe
->
evít
) {

312 
fûe
->
u£_evít
 = 1;

315 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

317 
upd©e
;

324 i‡(
fûe
->
îr
 || fûe->
is_dú
) {

325 
upd©e
;

331 i‡(
fûe
->
cou¡
 == 0) {

333 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

335 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

337 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

340 
add_evít
;

343 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

345 
ˇche
->
cuºít
--;

347 
fûe
->
˛o£
 = 1;

349 
¸óã
;

354 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

356 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

357 
Áûed
;

360 
¸óã
:

362 i‡(
ˇche
->
cuºít
 >ˇche->
max
) {

363 
	`ngx_expúe_ﬁd_ˇched_fûes
(
ˇche
, 0, 
poﬁ
->
log
);

366 
fûe
 = 
	`ngx_Æloc
((
ngx_ˇched_›í_fûe_t
), 
poﬁ
->
log
);

368 i‡(
fûe
 =
NULL
) {

369 
Áûed
;

372 
fûe
->
«me
 = 
	`ngx_Æloc
“ame->
Àn
 + 1, 
poﬁ
->
log
);

374 i‡(
fûe
->
«me
 =
NULL
) {

375 
	`ngx_‰ì
(
fûe
);

376 
fûe
 = 
NULL
;

377 
Áûed
;

380 
	`ngx_˝y°∫
(
fûe
->
«me
,Çame->
d©a
,Çame->
Àn
 + 1);

382 
fûe
->
node
.
key
 = 
hash
;

384 
	`ngx_rbåì_ö£π
(&
ˇche
->
rbåì
, &
fûe
->
node
);

386 
ˇche
->
cuºít
++;

388 
fûe
->
u£s
 = 1;

389 
fûe
->
cou¡
 = 0;

390 
fûe
->
u£_evít
 = 0;

391 
fûe
->
evít
 = 
NULL
;

393 
add_evít
:

395 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

397 
upd©e
:

399 
fûe
->
fd
 = 
of
->fd;

400 
fûe
->
îr
 = 
of
->err;

401 #i‡(
NGX_HAVE_OPENAT
)

402 
fûe
->
dißbÀ_symlöks
 = 
of
->disable_symlinks;

403 
fûe
->
dißbÀ_symlöks_‰om
 = 
of
->disable_symlinks_from;

406 i‡(
of
->
îr
 == 0) {

407 
fûe
->
uniq
 = 
of
->uniq;

408 
fûe
->
mtime
 = 
of
->mtime;

409 
fûe
->
size
 = 
of
->size;

411 
fûe
->
˛o£
 = 0;

413 
fûe
->
is_dú
 = 
of
->is_dir;

414 
fûe
->
is_fûe
 = 
of
->is_file;

415 
fûe
->
is_lök
 = 
of
->is_link;

416 
fûe
->
is_exec
 = 
of
->is_exec;

417 
fûe
->
is_dúe˘io
 = 
of
->is_directio;

419 i‡(!
of
->
is_dú
) {

420 
fûe
->
cou¡
++;

424 
fûe
->
¸óãd
 = 
now
;

426 
found
:

428 
fûe
->
ac˚s£d
 = 
now
;

430 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

432 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

434 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
, fûe->
u£s
);

436 i‡(
of
->
îr
 == 0) {

438 i‡(!
of
->
is_dú
) {

439 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_˛ónup
;

440 
of˛n
 = 
˛n
->
d©a
;

442 
of˛n
->
ˇche
 = cache;

443 
of˛n
->
fûe
 = file;

444 
of˛n
->
mö_u£s
 = 
of
->min_uses;

445 
of˛n
->
log
 = 
poﬁ
->log;

448  
NGX_OK
;

451  
NGX_ERROR
;

453 
Áûed
:

455 i‡(
fûe
) {

456 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

458 
ˇche
->
cuºít
--;

460 i‡(
fûe
->
cou¡
 == 0) {

462 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

463 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

464 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

465 
ngx_˛o£_fûe_n
 " \"%s\" failed",

466 
fûe
->
«me
);

470 
	`ngx_‰ì
(
fûe
->
«me
);

471 
	`ngx_‰ì
(
fûe
);

474 
fûe
->
˛o£
 = 1;

478 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

479 i‡(
	`ngx_˛o£_fûe
(
of
->
fd
Ë=
NGX_FILE_ERROR
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

481 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

485  
NGX_ERROR
;

486 
	}
}

489 #i‡(
NGX_HAVE_OPENAT
)

491 
ngx_fd_t


492 
	$ngx_›í©_fûe_ow√r
(
ngx_fd_t
 
©_fd
, c⁄° 
u_ch¨
 *
«me
,

493 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

495 
ngx_fd_t
 
fd
;

496 
ngx_îr_t
 
îr
;

497 
ngx_fûe_öfo_t
 
fi
, 
©fi
;

511 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
);

513 i‡(
fd
 =
NGX_INVALID_FILE
) {

514  
NGX_INVALID_FILE
;

517 i‡(
	`ngx_fûe_©_öfo
(
©_fd
, 
«me
, &
©fi
, 
AT_SYMLINK_NOFOLLOW
)

518 =
NGX_FILE_ERROR
)

520 
îr
 = 
ngx_î∫o
;

521 
Áûed
;

524 #i‡(
NGX_HAVE_O_PATH
)

525 i‡(
	`ngx_fûe_o_∑th_öfo
(
fd
, &
fi
, 
log
Ë=
NGX_ERROR
) {

526 
îr
 = 
ngx_î∫o
;

527 
Áûed
;

530 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

531 
îr
 = 
ngx_î∫o
;

532 
Áûed
;

536 i‡(
fi
.
°_uid
 !
©fi
.st_uid) {

537 
îr
 = 
NGX_ELOOP
;

538 
Áûed
;

541  
fd
;

543 
Áûed
:

545 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

547 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
);

550 
	`ngx_£t_î∫o
(
îr
);

552  
NGX_INVALID_FILE
;

553 
	}
}

556 #i‡(
NGX_HAVE_O_PATH
)

558 
ngx_öt_t


559 
	$ngx_fûe_o_∑th_öfo
(
ngx_fd_t
 
fd
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

561 
ngx_uöt_t
 
u£_f°©
 = 1;

585 i‡(
u£_f°©
) {

586 i‡(
	`ngx_fd_öfo
(
fd
, 
fi
Ë!
NGX_FILE_ERROR
) {

587  
NGX_OK
;

590 i‡(
ngx_î∫o
 !
NGX_EBADF
) {

591  
NGX_ERROR
;

594 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

598 
u£_f°©
 = 0;

601 i‡(
	`ngx_fûe_©_öfo
(
fd
, "", 
fi
, 
AT_EMPTY_PATH
Ë!
NGX_FILE_ERROR
) {

602  
NGX_OK
;

605  
NGX_ERROR
;

606 
	}
}

613 
ngx_fd_t


614 
	$ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

615 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

617 
ngx_fd_t
 
fd
;

619 #i‡!(
NGX_HAVE_OPENAT
)

621 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

623 i‡(
fd
 =
NGX_INVALID_FILE
) {

624 
of
->
îr
 = 
ngx_î∫o
;

625 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

626  
NGX_INVALID_FILE
;

629  
fd
;

633 
u_ch¨
 *
p
, *
˝
, *
íd
;

634 
ngx_fd_t
 
©_fd
;

635 
ngx_°r_t
 
©_«me
;

637 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

638 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

640 i‡(
fd
 =
NGX_INVALID_FILE
) {

641 
of
->
îr
 = 
ngx_î∫o
;

642 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

643  
NGX_INVALID_FILE
;

646  
fd
;

649 
p
 = 
«me
->
d©a
;

650 
íd
 = 
p
 + 
«me
->
Àn
;

652 
©_«me
 = *
«me
;

654 i‡(
of
->
dißbÀ_symlöks_‰om
) {

656 
˝
 = 
p
 + 
of
->
dißbÀ_symlöks_‰om
;

658 *
˝
 = '\0';

660 
©_fd
 = 
	`ngx_›í_fûe
(
p
, 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

661 
NGX_FILE_OPEN
, 0);

663 *
˝
 = '/';

665 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

666 
of
->
îr
 = 
ngx_î∫o
;

667 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

668  
NGX_INVALID_FILE
;

671 
©_«me
.
Àn
 = 
of
->
dißbÀ_symlöks_‰om
;

672 
p
 = 
˝
 + 1;

674 } i‡(*
p
 == '/') {

676 
©_fd
 = 
	`ngx_›í_fûe
("/",

677 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

678 
NGX_FILE_OPEN
, 0);

680 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

681 
of
->
îr
 = 
ngx_î∫o
;

682 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

683  
NGX_INVALID_FILE
;

686 
©_«me
.
Àn
 = 1;

687 
p
++;

690 
©_fd
 = 
NGX_AT_FDCWD
;

694 
˝
 = 
	`ngx_°æchr
(
p
, 
íd
, '/');

695 i‡(
˝
 =
NULL
) {

699 i‡(
˝
 =
p
) {

700 
p
++;

704 *
˝
 = '\0';

706 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER
) {

707 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
,

708 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

709 
NGX_FILE_OPEN
, 0, 
log
);

712 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
,

713 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
|
NGX_FILE_NOFOLLOW
,

714 
NGX_FILE_OPEN
, 0);

717 *
˝
 = '/';

719 i‡(
fd
 =
NGX_INVALID_FILE
) {

720 
of
->
îr
 = 
ngx_î∫o
;

721 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

722 
Áûed
;

725 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

726 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

727 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

730 
p
 = 
˝
 + 1;

731 
©_fd
 = 
fd
;

732 
©_«me
.
Àn
 = 
˝
 -át_«me.
d©a
;

735 i‡(
p
 =
íd
) {

748 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, ".", 
mode
, 
¸óã
, 
ac˚ss
);

749 
d⁄e
;

752 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER


753 && !(
¸óã
 & (
NGX_FILE_CREATE_OR_OPEN
|
NGX_FILE_TRUNCATE
)))

755 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
, 
mode
, 
¸óã
, 
ac˚ss
, 
log
);

758 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
, 
mode
|
NGX_FILE_NOFOLLOW
, 
¸óã
, 
ac˚ss
);

761 
d⁄e
:

763 i‡(
fd
 =
NGX_INVALID_FILE
) {

764 
of
->
îr
 = 
ngx_î∫o
;

765 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

768 
Áûed
:

770 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

771 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

772 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

775  
fd
;

777 
	}
}

780 
ngx_öt_t


781 
	$ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

782 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

784 
ngx_öt_t
 
rc
;

786 #i‡!(
NGX_HAVE_OPENAT
)

788 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

790 i‡(
rc
 =
NGX_FILE_ERROR
) {

791 
of
->
îr
 = 
ngx_î∫o
;

792 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

793  
NGX_FILE_ERROR
;

796  
rc
;

800 
ngx_fd_t
 
fd
;

802 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

804 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

806 i‡(
rc
 =
NGX_FILE_ERROR
) {

807 
of
->
îr
 = 
ngx_î∫o
;

808 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

809  
NGX_FILE_ERROR
;

812  
rc
;

815 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

816 
NGX_FILE_OPEN
, 0, 
log
);

818 i‡(
fd
 =
NGX_INVALID_FILE
) {

819  
NGX_FILE_ERROR
;

822 
rc
 = 
	`ngx_fd_öfo
(
fd
, 
fi
);

824 i‡(
rc
 =
NGX_FILE_ERROR
) {

825 
of
->
îr
 = 
ngx_î∫o
;

826 
of
->
Áûed
 = 
ngx_fd_öfo_n
;

829 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

830 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

831 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

834  
rc
;

836 
	}
}

839 
ngx_öt_t


840 
	$ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

841 
ngx_log_t
 *
log
)

843 
ngx_fd_t
 
fd
;

844 
ngx_fûe_öfo_t
 
fi
;

846 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

848 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

849 
of
->
fd
 = 
NGX_INVALID_FILE
;

850  
NGX_ERROR
;

853 i‡(
of
->
uniq
 =
	`ngx_fûe_uniq
(&
fi
)) {

854 
d⁄e
;

857 } i‡(
of
->
ã°_dú
) {

859 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

860 
of
->
fd
 = 
NGX_INVALID_FILE
;

861  
NGX_ERROR
;

864 i‡(
	`ngx_is_dú
(&
fi
)) {

865 
d⁄e
;

869 i‡(!
of
->
log
) {

876 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

877 
NGX_FILE_OPEN
, 0, 
log
);

880 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_APPEND
,

881 
NGX_FILE_CREATE_OR_OPEN
,

882 
NGX_FILE_DEFAULT_ACCESS
, 
log
);

885 i‡(
fd
 =
NGX_INVALID_FILE
) {

886 
of
->
fd
 = 
NGX_INVALID_FILE
;

887  
NGX_ERROR
;

890 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

891 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 
ngx_î∫o
,

892 
ngx_fd_öfo_n
 " \"%V\" faûed", 
«me
);

894 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

895 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

896 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

899 
of
->
fd
 = 
NGX_INVALID_FILE
;

901  
NGX_ERROR
;

904 i‡(
	`ngx_is_dú
(&
fi
)) {

905 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

907 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

910 
of
->
fd
 = 
NGX_INVALID_FILE
;

913 
of
->
fd
 = fd;

915 i‡(
of
->
ªad_ahód
 && 
	`ngx_fûe_size
(&
fi
Ë> 
NGX_MIN_READ_AHEAD
) {

916 i‡(
	`ngx_ªad_ahód
(
fd
, 
of
->
ªad_ahód
Ë=
NGX_ERROR
) {

917 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

918 
ngx_ªad_ahód_n
 " \"%V\" faûed", 
«me
);

922 i‡(
of
->
dúe˘io
 <
	`ngx_fûe_size
(&
fi
)) {

923 i‡(
	`ngx_dúe˘io_⁄
(
fd
Ë=
NGX_FILE_ERROR
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

925 
ngx_dúe˘io_⁄_n
 " \"%V\" faûed", 
«me
);

928 
of
->
is_dúe˘io
 = 1;

933 
d⁄e
:

935 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

936 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

937 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

938 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

939 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

940 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

941 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

942 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

944  
NGX_OK
;

945 
	}
}

954 
	$ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

955 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

957 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

959 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_VNODE_EVENT
)

960 || !
of
->
evíts


961 || 
fûe
->
evít


962 || 
of
->
fd
 =
NGX_INVALID_FILE


963 || 
fûe
->
u£s
 < 
of
->
mö_u£s
)

968 
fûe
->
u£_evít
 = 0;

970 
fûe
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
log
);

971 i‡(
fûe
->
evít
=
NULL
) {

975 
„v
 = 
	`ngx_Æloc
((
ngx_›í_fûe_ˇche_evít_t
), 
log
);

976 i‡(
„v
 =
NULL
) {

977 
	`ngx_‰ì
(
fûe
->
evít
);

978 
fûe
->
evít
 = 
NULL
;

982 
„v
->
fd
 = 
of
->fd;

983 
„v
->
fûe
 = file;

984 
„v
->
ˇche
 = cache;

986 
fûe
->
evít
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_ªmove
;

987 
fûe
->
evít
->
d©a
 = 
„v
;

995 
fûe
->
evít
->
log
 = 
ngx_cy˛e
->log;

997 i‡(
	`ngx_add_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
, 
NGX_ONESHOT_EVENT
)

998 !
NGX_OK
)

1000 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1001 
	`ngx_‰ì
(
fûe
->
evít
);

1002 
fûe
->
evít
 = 
NULL
;

1014 
	}
}

1018 
	$ngx_›í_fûe_˛ónup
(*
d©a
)

1020 
ngx_›í_fûe_ˇche_˛ónup_t
 *
c
 = 
d©a
;

1022 
c
->
fûe
->
cou¡
--;

1024 
	`ngx_˛o£_ˇched_fûe
(
c
->
ˇche
, c->
fûe
, c->
mö_u£s
, c->
log
);

1027 
	`ngx_expúe_ﬁd_ˇched_fûes
(
c
->
ˇche
, 1, c->
log
);

1028 
	}
}

1032 
	$ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

1033 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
)

1035 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1037 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
u£s
, fûe->
˛o£
);

1039 i‡(!
fûe
->
˛o£
) {

1041 
fûe
->
ac˚s£d
 = 
	`ngx_time
();

1043 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1045 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

1047 i‡(
fûe
->
u£s
 >
mö_u£s
 || fûe->
cou¡
) {

1052 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

1054 i‡(
fûe
->
cou¡
) {

1058 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

1060 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

1061 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1062 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
);

1065 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

1068 i‡(!
fûe
->
˛o£
) {

1072 
	`ngx_‰ì
(
fûe
->
«me
);

1073 
	`ngx_‰ì
(
fûe
);

1074 
	}
}

1078 
	$ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
)

1080 i‡(
fûe
->
evít
 =
NULL
) {

1084 (Ë
	`ngx_dñ_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
,

1085 
fûe
->
cou¡
 ? 
NGX_FLUSH_EVENT
 : 
NGX_CLOSE_EVENT
);

1087 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1088 
	`ngx_‰ì
(
fûe
->
evít
);

1089 
fûe
->
evít
 = 
NULL
;

1090 
fûe
->
u£_evít
 = 0;

1091 
	}
}

1095 
	$ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_uöt_t
 
n
,

1096 
ngx_log_t
 *
log
)

1098 
time_t
 
now
;

1099 
ngx_queue_t
 *
q
;

1100 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1102 
now
 = 
	`ngx_time
();

1110 
n
 < 3) {

1112 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

1116 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

1118 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

1120 i‡(
n
++ !0 && 
now
 - 
fûe
->
ac˚s£d
 <
ˇche
->
öa˘ive
) {

1124 
	`ngx_queue_ªmove
(
q
);

1126 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

1128 
ˇche
->
cuºít
--;

1130 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1131 "expúêˇched o≥¿fûe: %s", 
fûe
->
«me
);

1133 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

1134 
fûe
->
˛o£
 = 1;

1135 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
log
);

1138 
	`ngx_‰ì
(
fûe
->
«me
);

1139 
	`ngx_‰ì
(
fûe
);

1142 
	}
}

1146 
	$ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1147 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1149 
ngx_rbåì_node_t
 **
p
;

1150 
ngx_ˇched_›í_fûe_t
 *
fûe
, *
fûe_ãmp
;

1154 i‡(
node
->
key
 < 
ãmp
->key) {

1156 
p
 = &
ãmp
->
À·
;

1158 } i‡(
node
->
key
 > 
ãmp
->key) {

1160 
p
 = &
ãmp
->
right
;

1164 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1165 
fûe_ãmp
 = (
ngx_ˇched_›í_fûe_t
 *Ë
ãmp
;

1167 
p
 = (
	`ngx_°rcmp
(
fûe
->
«me
, 
fûe_ãmp
->name) < 0)

1168 ? &
ãmp
->
À·
 : &ãmp->
right
;

1171 i‡(*
p
 =
£¡öñ
) {

1175 
ãmp
 = *
p
;

1178 *
p
 = 
node
;

1179 
node
->
∑ª¡
 = 
ãmp
;

1180 
node
->
À·
 = 
£¡öñ
;

1181 
node
->
right
 = 
£¡öñ
;

1182 
	`ngx_rbt_ªd
(
node
);

1183 
	}
}

1186 
ngx_ˇched_›í_fûe_t
 *

1187 
	$ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

1188 
uöt32_t
 
hash
)

1190 
ngx_öt_t
 
rc
;

1191 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1192 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1194 
node
 = 
ˇche
->
rbåì
.
roŸ
;

1195 
£¡öñ
 = 
ˇche
->
rbåì
.sentinel;

1197 
node
 !
£¡öñ
) {

1199 i‡(
hash
 < 
node
->
key
) {

1200 
node
 =Çode->
À·
;

1204 i‡(
hash
 > 
node
->
key
) {

1205 
node
 =Çode->
right
;

1211 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1213 
rc
 = 
	`ngx_°rcmp
(
«me
->
d©a
, 
fûe
->name);

1215 i‡(
rc
 == 0) {

1216  
fûe
;

1219 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1222  
NULL
;

1223 
	}
}

1227 
	$ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
)

1229 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1230 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

1232 
„v
 = 
ev
->
d©a
;

1233 
fûe
 = 
„v
->file;

1235 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1237 
	`ngx_rbåì_dñëe
(&
„v
->
ˇche
->
rbåì
, &
fûe
->
node
);

1239 
„v
->
ˇche
->
cuºít
--;

1242 
fûe
->
evít
 = 
NULL
;

1243 
fûe
->
u£_evít
 = 0;

1245 
fûe
->
˛o£
 = 1;

1247 
	`ngx_˛o£_ˇched_fûe
(
„v
->
ˇche
, 
fûe
, 0, 
ev
->
log
);

1251 
	`ngx_‰ì
(
ev
->
d©a
);

1252 
	`ngx_‰ì
(
ev
);

1253 
	}
}

	@src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 #i‡(
NGX_HAVE_OPENAT
)

36 
size_t
 
	mdißbÀ_symlöks_‰om
;

37 
	mdißbÀ_symlöks
:2;

40 
	mã°_dú
:1;

41 
	mã°_⁄ly
:1;

42 
	mlog
:1;

43 
	mîr‹s
:1;

44 
	mevíts
:1;

46 
	mis_dú
:1;

47 
	mis_fûe
:1;

48 
	mis_lök
:1;

49 
	mis_exec
:1;

50 
	mis_dúe˘io
:1;

51 } 
	tngx_›í_fûe_öfo_t
;

54 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

56 
	sngx_ˇched_›í_fûe_s
 {

57 
ngx_rbåì_node_t
 
	mnode
;

58 
ngx_queue_t
 
	mqueue
;

60 
u_ch¨
 *
	m«me
;

61 
time_t
 
	m¸óãd
;

62 
time_t
 
	mac˚s£d
;

64 
ngx_fd_t
 
	mfd
;

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mmtime
;

67 
off_t
 
	msize
;

68 
ngx_îr_t
 
	mîr
;

70 
uöt32_t
 
	mu£s
;

72 #i‡(
NGX_HAVE_OPENAT
)

73 
size_t
 
	mdißbÀ_symlöks_‰om
;

74 
	mdißbÀ_symlöks
:2;

77 
	mcou¡
:24;

78 
	m˛o£
:1;

79 
	mu£_evít
:1;

81 
	mis_dú
:1;

82 
	mis_fûe
:1;

83 
	mis_lök
:1;

84 
	mis_exec
:1;

85 
	mis_dúe˘io
:1;

87 
ngx_evít_t
 *
	mevít
;

92 
ngx_rbåì_t
 
	mrbåì
;

93 
ngx_rbåì_node_t
 
	m£¡öñ
;

94 
ngx_queue_t
 
	mexpúe_queue
;

96 
ngx_uöt_t
 
	mcuºít
;

97 
ngx_uöt_t
 
	mmax
;

98 
time_t
 
	möa˘ive
;

99 } 
	tngx_›í_fûe_ˇche_t
;

103 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

104 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

105 
ngx_uöt_t
 
	mmö_u£s
;

106 
ngx_log_t
 *
	mlog
;

107 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

113 *
	md©a
;

114 
ngx_evít_t
 *
	mªad
;

115 
ngx_evít_t
 *
	mwrôe
;

116 
ngx_fd_t
 
	mfd
;

118 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

119 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

120 } 
	tngx_›í_fûe_ˇche_evít_t
;

123 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

124 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

125 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

126 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/core/ngx_output_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
	#NGX_SENDFILE_LIMIT
 4096

	)

27 
	#NGX_NONE
 1

	)

30 
ngx_ölöe
 
ngx_öt_t


31 
ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
);

32 #i‡(
NGX_HAVE_AIO_SENDFILE
)

33 
ngx_öt_t
 
ngx_ouçut_chaö_aio_£tup
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

34 
ngx_fûe_t
 *
fûe
);

36 
ngx_öt_t
 
ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
,

37 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
);

38 
ngx_öt_t
 
ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

39 
off_t
 
bsize
);

40 
ngx_öt_t
 
ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

41 
off_t
 
bsize
);

42 
ngx_öt_t
 
ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
);

45 
ngx_öt_t


46 
	$ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

48 
off_t
 
bsize
;

49 
ngx_öt_t
 
rc
, 
œ°
;

50 
ngx_chaö_t
 *
˛
, *
out
, **
œ°_out
;

52 i‡(
˘x
->
ö
 =
NULL
 && ctx->
busy
 == NULL

53 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

54 && !
˘x
->
aio


64 i‡(
ö
 =
NULL
) {

65  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

68 i‡(
ö
->
√xt
 =
NULL


69 #i‡(
NGX_SENDFILE_LIMIT
)

70 && !(
ö
->
buf
->
ö_fûe
 && in->buf->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

72 && 
	`ngx_ouçut_chaö_as_is
(
˘x
, 
ö
->
buf
))

74  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

80 i‡(
ö
) {

81 i‡(
	`ngx_ouçut_chaö_add_c›y
(
˘x
->
poﬁ
, &˘x->
ö
, inË=
NGX_ERROR
) {

82  
NGX_ERROR
;

86 
out
 = 
NULL
;

87 
œ°_out
 = &
out
;

88 
œ°
 = 
NGX_NONE
;

92 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

93 i‡(
˘x
->
aio
) {

94  
NGX_AGAIN
;

98 
˘x
->
ö
) {

105 
bsize
 = 
	`ngx_buf_size
(
˘x
->
ö
->
buf
);

107 i‡(
bsize
 =0 && !
	`ngx_buf_•ecül
(
˘x
->
ö
->
buf
)) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

112 
˘x
->
ö
->
buf
->
ãmp‹¨y
,

113 
˘x
->
ö
->
buf
->
ªcy˛ed
,

114 
˘x
->
ö
->
buf
->
ö_fûe
,

115 
˘x
->
ö
->
buf
->
°¨t
,

116 
˘x
->
ö
->
buf
->
pos
,

117 
˘x
->
ö
->
buf
->
œ°
,

118 
˘x
->
ö
->
buf
->
fûe
,

119 
˘x
->
ö
->
buf
->
fûe_pos
,

120 
˘x
->
ö
->
buf
->
fûe_œ°
);

122 
	`ngx_debug_poöt
();

124 
˘x
->
ö
 = ctx->ö->
√xt
;

129 i‡(
	`ngx_ouçut_chaö_as_is
(
˘x
, ctx->
ö
->
buf
)) {

133 
˛
 = 
˘x
->
ö
;

134 
˘x
->
ö
 = 
˛
->
√xt
;

136 *
œ°_out
 = 
˛
;

137 
œ°_out
 = &
˛
->
√xt
;

138 
˛
->
√xt
 = 
NULL
;

143 i‡(
˘x
->
buf
 =
NULL
) {

145 
rc
 = 
	`ngx_ouçut_chaö_Æign_fûe_buf
(
˘x
, 
bsize
);

147 i‡(
rc
 =
NGX_ERROR
) {

148  
NGX_ERROR
;

151 i‡(
rc
 !
NGX_OK
) {

153 i‡(
˘x
->
‰ì
) {

157 
˛
 = 
˘x
->
‰ì
;

158 
˘x
->
buf
 = 
˛
->buf;

159 
˘x
->
‰ì
 = 
˛
->
√xt
;

161 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
˛
);

163 } i‡(
out
 || 
˘x
->
Æloˇãd
 =˘x->
bufs
.
num
) {

167 } i‡(
	`ngx_ouçut_chaö_gë_buf
(
˘x
, 
bsize
Ë!
NGX_OK
) {

168  
NGX_ERROR
;

173 
rc
 = 
	`ngx_ouçut_chaö_c›y_buf
(
˘x
);

175 i‡(
rc
 =
NGX_ERROR
) {

176  
rc
;

179 i‡(
rc
 =
NGX_AGAIN
) {

180 i‡(
out
) {

184  
rc
;

189 i‡(
	`ngx_buf_size
(
˘x
->
ö
->
buf
) == 0) {

190 
˘x
->
ö
 = ctx->ö->
√xt
;

193 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

194 i‡(
˛
 =
NULL
) {

195  
NGX_ERROR
;

198 
˛
->
buf
 = 
˘x
->buf;

199 
˛
->
√xt
 = 
NULL
;

200 *
œ°_out
 = 
˛
;

201 
œ°_out
 = &
˛
->
√xt
;

202 
˘x
->
buf
 = 
NULL
;

205 i‡(
out
 =
NULL
 && 
œ°
 !
NGX_NONE
) {

207 i‡(
˘x
->
ö
) {

208  
NGX_AGAIN
;

211  
œ°
;

214 
œ°
 = 
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
out
);

216 i‡(
œ°
 =
NGX_ERROR
 ||Üa° =
NGX_DONE
) {

217  
œ°
;

220 
	`ngx_chaö_upd©e_chaös
(
˘x
->
poﬁ
, &˘x->
‰ì
, &˘x->
busy
, &
out
,

221 
˘x
->
èg
);

222 
œ°_out
 = &
out
;

224 
	}
}

227 
ngx_ölöe
 
ngx_öt_t


228 
	$ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
)

230 
ngx_uöt_t
 
£ndfûe
;

232 i‡(
	`ngx_buf_•ecül
(
buf
)) {

236 #i‡(
NGX_THREADS
)

237 i‡(
buf
->
ö_fûe
) {

238 
buf
->
fûe
->
thªad_h™dÀr
 = 
˘x
->thread_handler;

239 
buf
->
fûe
->
thªad_˘x
 = 
˘x
->
fûãr_˘x
;

243 i‡(
buf
->
ö_fûe
 && buf->
fûe
->
dúe˘io
) {

247 
£ndfûe
 = 
˘x
->sendfile;

249 #i‡(
NGX_SENDFILE_LIMIT
)

251 i‡(
buf
->
ö_fûe
 && buf->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

252 
£ndfûe
 = 0;

257 i‡(!
£ndfûe
) {

259 i‡(!
	`ngx_buf_ö_mem‹y
(
buf
)) {

263 
buf
->
ö_fûe
 = 0;

266 #i‡(
NGX_HAVE_AIO_SENDFILE
)

267 i‡(
˘x
->
aio_¥ñﬂd
 && 
buf
->
ö_fûe
) {

268 (Ë
	`ngx_ouçut_chaö_aio_£tup
(
˘x
, 
buf
->
fûe
);

272 i‡(
˘x
->
√ed_ö_mem‹y
 && !
	`ngx_buf_ö_mem‹y
(
buf
)) {

276 i‡(
˘x
->
√ed_ö_ãmp
 && (
buf
->
mem‹y
 || buf->
mm≠
)) {

281 
	}
}

284 #i‡(
NGX_HAVE_AIO_SENDFILE
)

286 
ngx_öt_t


287 
	$ngx_ouçut_chaö_aio_£tup
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

289 
ngx_evít_aio_t
 *
aio
;

291 i‡(
fûe
->
aio
 =
NULL
 && 
	`ngx_fûe_aio_öô
(fûe, 
˘x
->
poﬁ
Ë!
NGX_OK
) {

292  
NGX_ERROR
;

295 
aio
 = 
fûe
->aio;

297 
aio
->
d©a
 = 
˘x
->
fûãr_˘x
;

298 
aio
->
¥ñﬂd_h™dÀr
 = 
˘x
->
aio_¥ñﬂd
;

300  
NGX_OK
;

301 
	}
}

306 
ngx_öt_t


307 
	$ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

308 
ngx_chaö_t
 *
ö
)

310 
ngx_chaö_t
 *
˛
, **
Œ
;

311 #i‡(
NGX_SENDFILE_LIMIT
)

312 
ngx_buf_t
 *
b
, *
buf
;

315 
Œ
 = 
chaö
;

317 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

318 
Œ
 = &
˛
->
√xt
;

321 
ö
) {

323 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

324 i‡(
˛
 =
NULL
) {

325  
NGX_ERROR
;

328 #i‡(
NGX_SENDFILE_LIMIT
)

330 
buf
 = 
ö
->buf;

332 i‡(
buf
->
ö_fûe


333 && 
buf
->
fûe_pos
 < 
NGX_SENDFILE_LIMIT


334 && 
buf
->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

338 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

339 i‡(
b
 =
NULL
) {

340  
NGX_ERROR
;

343 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

345 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

346 
buf
->
pos
 +(
ssize_t
Ë(
NGX_SENDFILE_LIMIT
 - buf->
fûe_pos
);

347 
b
->
œ°
 = 
buf
->
pos
;

350 
buf
->
fûe_pos
 = 
NGX_SENDFILE_LIMIT
;

351 
b
->
fûe_œ°
 = 
NGX_SENDFILE_LIMIT
;

353 
˛
->
buf
 = 
b
;

356 
˛
->
buf
 = buf;

357 
ö
 = in->
√xt
;

361 
˛
->
buf
 = 
ö
->buf;

362 
ö
 = in->
√xt
;

366 
˛
->
√xt
 = 
NULL
;

367 *
Œ
 = 
˛
;

368 
Œ
 = &
˛
->
√xt
;

371  
NGX_OK
;

372 
	}
}

375 
ngx_öt_t


376 
	$ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

378 
size_t
 
size
;

379 
ngx_buf_t
 *
ö
;

381 
ö
 = 
˘x
->ö->
buf
;

383 i‡(
ö
->
fûe
 =
NULL
 || !ö->fûe->
dúe˘io
) {

384  
NGX_DECLINED
;

387 
˘x
->
dúe˘io
 = 1;

389 
size
 = (
size_t
Ë(
ö
->
fûe_pos
 - (ö->fûe_po†& ~(
˘x
->
Æignmít
 - 1)));

391 i‡(
size
 == 0) {

393 i‡(
bsize
 >(
off_t
Ë
˘x
->
bufs
.
size
) {

394  
NGX_DECLINED
;

397 
size
 = (
size_t
Ë
bsize
;

400 
size
 = (
size_t
Ë
˘x
->
Æignmít
 - size;

402 i‡((
off_t
Ë
size
 > 
bsize
) {

403 
size
 = (
size_t
Ë
bsize
;

407 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 
size
);

408 i‡(
˘x
->
buf
 =
NULL
) {

409  
NGX_ERROR
;

417 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

418 
˘x
->
u«lig√d
 = 1;

421  
NGX_OK
;

422 
	}
}

425 
ngx_öt_t


426 
	$ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

428 
size_t
 
size
;

429 
ngx_buf_t
 *
b
, *
ö
;

430 
ngx_uöt_t
 
ªcy˛ed
;

432 
ö
 = 
˘x
->ö->
buf
;

433 
size
 = 
˘x
->
bufs
.size;

434 
ªcy˛ed
 = 1;

436 i‡(
ö
->
œ°_ö_chaö
) {

438 i‡(
bsize
 < (
off_t
Ë
size
) {

445 
size
 = (
size_t
Ë
bsize
;

446 
ªcy˛ed
 = 0;

448 } i‡(!
˘x
->
dúe˘io


449 && 
˘x
->
bufs
.
num
 == 1

450 && (
bsize
 < (
off_t
Ë(
size
 + size / 4)))

458 
size
 = (
size_t
Ë
bsize
;

459 
ªcy˛ed
 = 0;

463 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
poﬁ
);

464 i‡(
b
 =
NULL
) {

465  
NGX_ERROR
;

468 i‡(
˘x
->
dúe˘io
) {

475 
b
->
°¨t
 = 
	`ngx_pmemÆign
(
˘x
->
poﬁ
, 
size
, (
size_t
Ë˘x->
Æignmít
);

476 i‡(
b
->
°¨t
 =
NULL
) {

477  
NGX_ERROR
;

481 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

482 i‡(
b
->
°¨t
 =
NULL
) {

483  
NGX_ERROR
;

487 
b
->
pos
 = b->
°¨t
;

488 
b
->
œ°
 = b->
°¨t
;

489 
b
->
íd
 = b->
œ°
 + 
size
;

490 
b
->
ãmp‹¨y
 = 1;

491 
b
->
èg
 = 
˘x
->tag;

492 
b
->
ªcy˛ed
 =Ñecycled;

494 
˘x
->
buf
 = 
b
;

495 
˘x
->
Æloˇãd
++;

497  
NGX_OK
;

498 
	}
}

501 
ngx_öt_t


502 
	$ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
)

504 
off_t
 
size
;

505 
ssize_t
 
n
;

506 
ngx_buf_t
 *
§c
, *
d°
;

507 
ngx_uöt_t
 
£ndfûe
;

509 
§c
 = 
˘x
->
ö
->
buf
;

510 
d°
 = 
˘x
->
buf
;

512 
size
 = 
	`ngx_buf_size
(
§c
);

513 
size
 = 
	`ngx_mö
(size, 
d°
->
íd
 - d°->
pos
);

515 
£ndfûe
 = 
˘x
->£ndfûê&& !˘x->
dúe˘io
;

517 #i‡(
NGX_SENDFILE_LIMIT
)

519 i‡(
§c
->
ö_fûe
 && src->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

520 
£ndfûe
 = 0;

525 i‡(
	`ngx_buf_ö_mem‹y
(
§c
)) {

526 
	`ngx_mem˝y
(
d°
->
pos
, 
§c
->pos, (
size_t
Ë
size
);

527 
§c
->
pos
 +(
size_t
Ë
size
;

528 
d°
->
œ°
 +(
size_t
Ë
size
;

530 i‡(
§c
->
ö_fûe
) {

532 i‡(
£ndfûe
) {

533 
d°
->
ö_fûe
 = 1;

534 
d°
->
fûe
 = 
§c
->file;

535 
d°
->
fûe_pos
 = 
§c
->file_pos;

536 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
size
;

539 
d°
->
ö_fûe
 = 0;

542 
§c
->
fûe_pos
 +
size
;

545 
d°
->
ö_fûe
 = 0;

548 i‡(
§c
->
pos
 =§c->
œ°
) {

549 
d°
->
Êush
 = 
§c
->flush;

550 
d°
->
œ°_buf
 = 
§c
->last_buf;

551 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

556 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

558 i‡(
˘x
->
u«lig√d
) {

559 i‡(
	`ngx_dúe˘io_off
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

560 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

561 
ngx_dúe˘io_off_n
 " \"%s\" failed",

562 
§c
->
fûe
->
«me
.
d©a
);

568 #i‡(
NGX_HAVE_FILE_AIO
)

569 i‡(
˘x
->
aio_h™dÀr
) {

570 
n
 = 
	`ngx_fûe_aio_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

571 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

572 i‡(
n
 =
NGX_AGAIN
) {

573 
˘x
->
	`aio_h™dÀr
(˘x, 
§c
->
fûe
);

574  
NGX_AGAIN
;

579 #i‡(
NGX_THREADS
)

580 i‡(
˘x
->
thªad_h™dÀr
) {

581 
§c
->
fûe
->
thªad_èsk
 = 
˘x
->thread_task;

582 
§c
->
fûe
->
thªad_h™dÀr
 = 
˘x
->thread_handler;

583 
§c
->
fûe
->
thªad_˘x
 = 
˘x
->
fûãr_˘x
;

585 
n
 = 
	`ngx_thªad_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

586 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

587 i‡(
n
 =
NGX_AGAIN
) {

588 
˘x
->
thªad_èsk
 = 
§c
->
fûe
->thread_task;

589  
NGX_AGAIN
;

595 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

596 
§c
->
fûe_pos
);

599 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

601 i‡(
˘x
->
u«lig√d
) {

602 
ngx_îr_t
 
îr
;

604 
îr
 = 
ngx_î∫o
;

606 i‡(
	`ngx_dúe˘io_⁄
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

607 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

608 
ngx_dúe˘io_⁄_n
 " \"%s\" failed",

609 
§c
->
fûe
->
«me
.
d©a
);

612 
	`ngx_£t_î∫o
(
îr
);

614 
˘x
->
u«lig√d
 = 0;

619 i‡(
n
 =
NGX_ERROR
) {

620  (
ngx_öt_t
Ë
n
;

623 i‡(
n
 !
size
) {

624 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

625 
ngx_ªad_fûe_n
 "Ñead only %z of %O from \"%s\"",

626 
n
, 
size
, 
§c
->
fûe
->
«me
.
d©a
);

627  
NGX_ERROR
;

630 
d°
->
œ°
 +
n
;

632 i‡(
£ndfûe
) {

633 
d°
->
ö_fûe
 = 1;

634 
d°
->
fûe
 = 
§c
->file;

635 
d°
->
fûe_pos
 = 
§c
->file_pos;

636 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
n
;

639 
d°
->
ö_fûe
 = 0;

642 
§c
->
fûe_pos
 +
n
;

644 i‡(
§c
->
fûe_pos
 =§c->
fûe_œ°
) {

645 
d°
->
Êush
 = 
§c
->flush;

646 
d°
->
œ°_buf
 = 
§c
->last_buf;

647 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

651  
NGX_OK
;

652 
	}
}

655 
ngx_öt_t


656 
	$ngx_chaö_wrôî
(*
d©a
, 
ngx_chaö_t
 *
ö
)

658 
ngx_chaö_wrôî_˘x_t
 *
˘x
 = 
d©a
;

660 
off_t
 
size
;

661 
ngx_chaö_t
 *
˛
, *
 
, *
chaö
;

662 
ngx_c⁄√˘i⁄_t
 *
c
;

664 
c
 = 
˘x
->
c⁄√˘i⁄
;

666 
size
 = 0; 
ö
; i¿ö->
√xt
) {

669 i‡(
	`ngx_buf_size
(
ö
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(in->buf)) {

671 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

674 
ö
->
buf
->
ãmp‹¨y
,

675 
ö
->
buf
->
ªcy˛ed
,

676 
ö
->
buf
->
ö_fûe
,

677 
ö
->
buf
->
°¨t
,

678 
ö
->
buf
->
pos
,

679 
ö
->
buf
->
œ°
,

680 
ö
->
buf
->
fûe
,

681 
ö
->
buf
->
fûe_pos
,

682 
ö
->
buf
->
fûe_œ°
);

684 
	`ngx_debug_poöt
();

690 
size
 +
	`ngx_buf_size
(
ö
->
buf
);

692 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

694 
ö
->
buf
->
Êush
, 
	`ngx_buf_size
(in->buf));

696 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

697 i‡(
˛
 =
NULL
) {

698  
NGX_ERROR
;

701 
˛
->
buf
 = 
ö
->buf;

702 
˛
->
√xt
 = 
NULL
;

703 *
˘x
->
œ°
 = 
˛
;

704 
˘x
->
œ°
 = &
˛
->
√xt
;

707 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

708 "chaö wrôî in: %p", 
˘x
->
out
);

710 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

713 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

715 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

718 
˛
->
buf
->
ãmp‹¨y
,

719 
˛
->
buf
->
ªcy˛ed
,

720 
˛
->
buf
->
ö_fûe
,

721 
˛
->
buf
->
°¨t
,

722 
˛
->
buf
->
pos
,

723 
˛
->
buf
->
œ°
,

724 
˛
->
buf
->
fûe
,

725 
˛
->
buf
->
fûe_pos
,

726 
˛
->
buf
->
fûe_œ°
);

728 
	`ngx_debug_poöt
();

734 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

737 i‡(
size
 =0 && !
c
->
buf„ªd
) {

738  
NGX_OK
;

741 
chaö
 = 
c
->
	`£nd_chaö
(c, 
˘x
->
out
, ctx->
limô
);

743 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

744 "chaö wrôî out: %p", 
chaö
);

746 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

747  
NGX_ERROR
;

750 
˛
 = 
˘x
->
out
; c»&& c»!
chaö
; ) {

751 
 
 = 
˛
;

752 
˛
 = cl->
√xt
;

753 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
 
);

756 
˘x
->
out
 = 
chaö
;

758 i‡(
˘x
->
out
 =
NULL
) {

759 
˘x
->
œ°
 = &˘x->
out
;

761 i‡(!
c
->
buf„ªd
) {

762  
NGX_OK
;

766  
NGX_AGAIN
;

767 
	}
}

	@src/core/ngx_palloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_ölöe
 *
ngx_∑Œoc_smÆl
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
,

13 
ngx_uöt_t
 
Æign
);

14 *
ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

15 *
ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

18 
ngx_poﬁ_t
 *

19 
	$ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
)

21 
ngx_poﬁ_t
 *
p
;

23 
p
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
size
, 
log
);

24 i‡(
p
 =
NULL
) {

25  
NULL
;

28 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

29 
p
->
d
.
íd
 = (
u_ch¨
 *Ë∞+ 
size
;

30 
p
->
d
.
√xt
 = 
NULL
;

31 
p
->
d
.
Áûed
 = 0;

33 
size
 = sizê- (
ngx_poﬁ_t
);

34 
p
->
max
 = (
size
 < 
NGX_MAX_ALLOC_FROM_POOL
) ? size : NGX_MAX_ALLOC_FROM_POOL;

36 
p
->
cuºít
 =Ö;

37 
p
->
chaö
 = 
NULL
;

38 
p
->
œrge
 = 
NULL
;

39 
p
->
˛ónup
 = 
NULL
;

40 
p
->
log
 =Üog;

42  
p
;

43 
	}
}

47 
	$ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

49 
ngx_poﬁ_t
 *
p
, *
n
;

50 
ngx_poﬁ_œrge_t
 *
l
;

51 
ngx_poﬁ_˛ónup_t
 *
c
;

53 
c
 = 
poﬁ
->
˛ónup
; c; c = c->
√xt
) {

54 i‡(
c
->
h™dÀr
) {

55 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

56 "ru¿˛ónup: %p", 
c
);

57 
c
->
	`h™dÀr
(c->
d©a
);

61 #i‡(
NGX_DEBUG
)

68 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

69 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0, "‰ì: %p", 
l
->
Æloc
);

72 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

73 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

74 "‰ì: %p, unu£d: %uz", 
p
,Ö->
d
.
íd
 -Ö->d.
œ°
);

76 i‡(
n
 =
NULL
) {

83 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

84 i‡(
l
->
Æloc
) {

85 
	`ngx_‰ì
(
l
->
Æloc
);

89 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

90 
	`ngx_‰ì
(
p
);

92 i‡(
n
 =
NULL
) {

96 
	}
}

100 
	$ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

102 
ngx_poﬁ_t
 *
p
;

103 
ngx_poﬁ_œrge_t
 *
l
;

105 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

106 i‡(
l
->
Æloc
) {

107 
	`ngx_‰ì
(
l
->
Æloc
);

111 
p
 = 
poﬁ
;Ö;Ö =Ö->
d
.
√xt
) {

112 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

113 
p
->
d
.
Áûed
 = 0;

116 
poﬁ
->
cuºít
 =Öool;

117 
poﬁ
->
chaö
 = 
NULL
;

118 
poﬁ
->
œrge
 = 
NULL
;

119 
	}
}

123 
	$ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

125 #i‡!(
NGX_DEBUG_PALLOC
)

126 i‡(
size
 <
poﬁ
->
max
) {

127  
	`ngx_∑Œoc_smÆl
(
poﬁ
, 
size
, 1);

131  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

132 
	}
}

136 
	$ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

138 #i‡!(
NGX_DEBUG_PALLOC
)

139 i‡(
size
 <
poﬁ
->
max
) {

140  
	`ngx_∑Œoc_smÆl
(
poﬁ
, 
size
, 0);

144  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

145 
	}
}

148 
ngx_ölöe
 *

149 
	$ngx_∑Œoc_smÆl
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, 
ngx_uöt_t
 
Æign
)

151 
u_ch¨
 *
m
;

152 
ngx_poﬁ_t
 *
p
;

154 
p
 = 
poﬁ
->
cuºít
;

157 
m
 = 
p
->
d
.
œ°
;

159 i‡(
Æign
) {

160 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

163 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

164 
p
->
d
.
œ°
 = 
m
 + 
size
;

166  
m
;

169 
p
 =Ö->
d
.
√xt
;

171 } 
p
);

173  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

174 
	}
}

178 
	$ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

180 
u_ch¨
 *
m
;

181 
size_t
 
psize
;

182 
ngx_poﬁ_t
 *
p
, *
√w
;

184 
psize
 = (
size_t
Ë(
poﬁ
->
d
.
íd
 - (
u_ch¨
 *)Öool);

186 
m
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
psize
, 
poﬁ
->
log
);

187 i‡(
m
 =
NULL
) {

188  
NULL
;

191 
√w
 = (
ngx_poﬁ_t
 *Ë
m
;

193 
√w
->
d
.
íd
 = 
m
 + 
psize
;

194 
√w
->
d
.
√xt
 = 
NULL
;

195 
√w
->
d
.
Áûed
 = 0;

197 
m
 +(
ngx_poﬁ_d©a_t
);

198 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

199 
√w
->
d
.
œ°
 = 
m
 + 
size
;

201 
p
 = 
poﬁ
->
cuºít
;Ö->
d
.
√xt
;Ö =Ö->d.next) {

202 i‡(
p
->
d
.
Áûed
++ > 4) {

203 
poﬁ
->
cuºít
 = 
p
->
d
.
√xt
;

207 
p
->
d
.
√xt
 = 
√w
;

209  
m
;

210 
	}
}

214 
	$ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

216 *
p
;

217 
ngx_uöt_t
 
n
;

218 
ngx_poﬁ_œrge_t
 *
œrge
;

220 
p
 = 
	`ngx_Æloc
(
size
, 
poﬁ
->
log
);

221 i‡(
p
 =
NULL
) {

222  
NULL
;

225 
n
 = 0;

227 
œrge
 = 
poﬁ
->œrge;Ü¨ge;Ü¨gêœrge->
√xt
) {

228 i‡(
œrge
->
Æloc
 =
NULL
) {

229 
œrge
->
Æloc
 = 
p
;

230  
p
;

233 i‡(
n
++ > 3) {

238 
œrge
 = 
	`ngx_∑Œoc_smÆl
(
poﬁ
, (
ngx_poﬁ_œrge_t
), 1);

239 i‡(
œrge
 =
NULL
) {

240 
	`ngx_‰ì
(
p
);

241  
NULL
;

244 
œrge
->
Æloc
 = 
p
;

245 
œrge
->
√xt
 = 
poﬁ
->large;

246 
poﬁ
->
œrge
 =Üarge;

248  
p
;

249 
	}
}

253 
	$ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
)

255 *
p
;

256 
ngx_poﬁ_œrge_t
 *
œrge
;

258 
p
 = 
	`ngx_memÆign
(
Æignmít
, 
size
, 
poﬁ
->
log
);

259 i‡(
p
 =
NULL
) {

260  
NULL
;

263 
œrge
 = 
	`ngx_∑Œoc_smÆl
(
poﬁ
, (
ngx_poﬁ_œrge_t
), 1);

264 i‡(
œrge
 =
NULL
) {

265 
	`ngx_‰ì
(
p
);

266  
NULL
;

269 
œrge
->
Æloc
 = 
p
;

270 
œrge
->
√xt
 = 
poﬁ
->large;

271 
poﬁ
->
œrge
 =Üarge;

273  
p
;

274 
	}
}

277 
ngx_öt_t


278 
	$ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
)

280 
ngx_poﬁ_œrge_t
 *
l
;

282 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

283 i‡(
p
 =
l
->
Æloc
) {

284 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

285 "‰ì: %p", 
l
->
Æloc
);

286 
	`ngx_‰ì
(
l
->
Æloc
);

287 
l
->
Æloc
 = 
NULL
;

289  
NGX_OK
;

293  
NGX_DECLINED
;

294 
	}
}

298 
	$ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

300 *
p
;

302 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

303 i‡(
p
) {

304 
	`ngx_memzîo
(
p
, 
size
);

307  
p
;

308 
	}
}

311 
ngx_poﬁ_˛ónup_t
 *

312 
	$ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
)

314 
ngx_poﬁ_˛ónup_t
 *
c
;

316 
c
 = 
	`ngx_∑Œoc
(
p
, (
ngx_poﬁ_˛ónup_t
));

317 i‡(
c
 =
NULL
) {

318  
NULL
;

321 i‡(
size
) {

322 
c
->
d©a
 = 
	`ngx_∑Œoc
(
p
, 
size
);

323 i‡(
c
->
d©a
 =
NULL
) {

324  
NULL
;

328 
c
->
d©a
 = 
NULL
;

331 
c
->
h™dÀr
 = 
NULL
;

332 
c
->
√xt
 = 
p
->
˛ónup
;

334 
p
->
˛ónup
 = 
c
;

336 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
p
->
log
, 0, "add cÀ™up: %p", 
c
);

338  
c
;

339 
	}
}

343 
	$ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
)

345 
ngx_poﬁ_˛ónup_t
 *
c
;

346 
ngx_poﬁ_˛ónup_fûe_t
 *
cf
;

348 
c
 = 
p
->
˛ónup
; c; c = c->
√xt
) {

349 i‡(
c
->
h™dÀr
 =
ngx_poﬁ_˛ónup_fûe
) {

351 
cf
 = 
c
->
d©a
;

353 i‡(
cf
->
fd
 == fd) {

354 
c
->
	`h™dÀr
(
cf
);

355 
c
->
h™dÀr
 = 
NULL
;

360 
	}
}

364 
	$ngx_poﬁ_˛ónup_fûe
(*
d©a
)

366 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

368 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d",

369 
c
->
fd
);

371 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

373 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

375 
	}
}

379 
	$ngx_poﬁ_dñëe_fûe
(*
d©a
)

381 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

383 
ngx_îr_t
 
îr
;

385 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d %s",

386 
c
->
fd
, c->
«me
);

388 i‡(
	`ngx_dñëe_fûe
(
c
->
«me
Ë=
NGX_FILE_ERROR
) {

389 
îr
 = 
ngx_î∫o
;

391 i‡(
îr
 !
NGX_ENOENT
) {

392 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
îr
,

393 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

397 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

399 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

401 
	}
}

407 
	$ngx_gë_ˇched_block
(
size_t
 
size
)

409 *
p
;

410 
ngx_ˇched_block_¶Ÿ_t
 *
¶Ÿ
;

412 i‡(
ngx_cy˛e
->
ˇche
 =
NULL
) {

413  
NULL
;

416 
¶Ÿ
 = &
ngx_cy˛e
->
ˇche
[(
size
 + 
ngx_∑gesize
 - 1) /Çgx_pagesize];

418 
¶Ÿ
->
åõs
++;

420 i‡(
¶Ÿ
->
numbî
) {

421 
p
 = 
¶Ÿ
->
block
;

422 
¶Ÿ
->
block
 = slŸ->block->
√xt
;

423 
¶Ÿ
->
numbî
--;

424  
p
;

427  
NULL
;

428 
	}
}

	@src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

77 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

79 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

80 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

81 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

82 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

83 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

86 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

87 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

88 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

89 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@src/core/ngx_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ssize_t


13 
	$ngx_∑r£_size
(
ngx_°r_t
 *
löe
)

15 
u_ch¨
 
unô
;

16 
size_t
 
Àn
;

17 
ssize_t
 
size
, 
sˇÀ
, 
max
;

19 
Àn
 = 
löe
->len;

21 i‡(
Àn
 == 0) {

22  
NGX_ERROR
;

25 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

27 
unô
) {

30 
Àn
--;

31 
max
 = 
NGX_MAX_SIZE_T_VALUE
 / 1024;

32 
sˇÀ
 = 1024;

37 
Àn
--;

38 
max
 = 
NGX_MAX_SIZE_T_VALUE
 / (1024 * 1024);

39 
sˇÀ
 = 1024 * 1024;

43 
max
 = 
NGX_MAX_SIZE_T_VALUE
;

44 
sˇÀ
 = 1;

47 
size
 = 
	`ngx_©osz
(
löe
->
d©a
, 
Àn
);

48 i‡(
size
 =
NGX_ERROR
 || sizê> 
max
) {

49  
NGX_ERROR
;

52 
size
 *
sˇÀ
;

54  
size
;

55 
	}
}

58 
off_t


59 
	$ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
)

61 
u_ch¨
 
unô
;

62 
off_t
 
off£t
, 
sˇÀ
, 
max
;

63 
size_t
 
Àn
;

65 
Àn
 = 
löe
->len;

67 i‡(
Àn
 == 0) {

68  
NGX_ERROR
;

71 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

73 
unô
) {

76 
Àn
--;

77 
max
 = 
NGX_MAX_OFF_T_VALUE
 / 1024;

78 
sˇÀ
 = 1024;

83 
Àn
--;

84 
max
 = 
NGX_MAX_OFF_T_VALUE
 / (1024 * 1024);

85 
sˇÀ
 = 1024 * 1024;

90 
Àn
--;

91 
max
 = 
NGX_MAX_OFF_T_VALUE
 / (1024 * 1024 * 1024);

92 
sˇÀ
 = 1024 * 1024 * 1024;

96 
max
 = 
NGX_MAX_OFF_T_VALUE
;

97 
sˇÀ
 = 1;

100 
off£t
 = 
	`ngx_©oof
(
löe
->
d©a
, 
Àn
);

101 i‡(
off£t
 =
NGX_ERROR
 || off£à> 
max
) {

102  
NGX_ERROR
;

105 
off£t
 *
sˇÀ
;

107  
off£t
;

108 
	}
}

111 
ngx_öt_t


112 
	$ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
)

114 
u_ch¨
 *
p
, *
œ°
;

115 
ngx_öt_t
 
vÆue
, 
tŸÆ
, 
sˇÀ
;

116 
ngx_öt_t
 
max
, 
cutoff
, 
cuéim
;

117 
ngx_uöt_t
 
vÆid
;

119 
°_°¨t
 = 0,

120 
°_yór
,

121 
°_m⁄th
,

122 
°_wìk
,

123 
°_day
,

124 
°_hour
,

125 
°_mö
,

126 
°_£c
,

127 
°_m£c
,

128 
°_œ°


129 } 
°ï
;

131 
vÆid
 = 0;

132 
vÆue
 = 0;

133 
tŸÆ
 = 0;

134 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

135 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

136 
°ï
 = 
is_£c
 ? 
°_°¨t
 : 
°_m⁄th
;

138 
p
 = 
löe
->
d©a
;

139 
œ°
 = 
p
 + 
löe
->
Àn
;

141 
p
 < 
œ°
) {

143 i‡(*
p
 >= '0' && *p <= '9') {

144 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
p
 - '0' > 
cuéim
)) {

145  
NGX_ERROR
;

148 
vÆue
 = vÆuê* 10 + (*
p
++ - '0');

149 
vÆid
 = 1;

153 *
p
++) {

156 i‡(
°ï
 > 
°_°¨t
) {

157  
NGX_ERROR
;

159 
°ï
 = 
°_yór
;

160 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24 * 365);

161 
sˇÀ
 = 60 * 60 * 24 * 365;

165 i‡(
°ï
 >
°_m⁄th
) {

166  
NGX_ERROR
;

168 
°ï
 = 
°_m⁄th
;

169 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24 * 30);

170 
sˇÀ
 = 60 * 60 * 24 * 30;

174 i‡(
°ï
 >
°_wìk
) {

175  
NGX_ERROR
;

177 
°ï
 = 
°_wìk
;

178 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24 * 7);

179 
sˇÀ
 = 60 * 60 * 24 * 7;

183 i‡(
°ï
 >
°_day
) {

184  
NGX_ERROR
;

186 
°ï
 = 
°_day
;

187 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24);

188 
sˇÀ
 = 60 * 60 * 24;

192 i‡(
°ï
 >
°_hour
) {

193  
NGX_ERROR
;

195 
°ï
 = 
°_hour
;

196 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60);

197 
sˇÀ
 = 60 * 60;

201 i‡(
p
 < 
œ°
 && *p == 's') {

202 i‡(
is_£c
 || 
°ï
 >
°_m£c
) {

203  
NGX_ERROR
;

205 
p
++;

206 
°ï
 = 
°_m£c
;

207 
max
 = 
NGX_MAX_INT_T_VALUE
;

208 
sˇÀ
 = 1;

212 i‡(
°ï
 >
°_mö
) {

213  
NGX_ERROR
;

215 
°ï
 = 
°_mö
;

216 
max
 = 
NGX_MAX_INT_T_VALUE
 / 60;

217 
sˇÀ
 = 60;

221 i‡(
°ï
 >
°_£c
) {

222  
NGX_ERROR
;

224 
°ï
 = 
°_£c
;

225 
max
 = 
NGX_MAX_INT_T_VALUE
;

226 
sˇÀ
 = 1;

230 i‡(
°ï
 >
°_£c
) {

231  
NGX_ERROR
;

233 
°ï
 = 
°_œ°
;

234 
max
 = 
NGX_MAX_INT_T_VALUE
;

235 
sˇÀ
 = 1;

239  
NGX_ERROR
;

242 i‡(
°ï
 !
°_m£c
 && !
is_£c
) {

243 
sˇÀ
 *= 1000;

244 
max
 /= 1000;

247 i‡(
vÆue
 > 
max
) {

248  
NGX_ERROR
;

251 
vÆue
 *
sˇÀ
;

253 i‡(
tŸÆ
 > 
NGX_MAX_INT_T_VALUE
 - 
vÆue
) {

254  
NGX_ERROR
;

257 
tŸÆ
 +
vÆue
;

259 
vÆue
 = 0;

261 
p
 < 
œ°
 && *p == ' ') {

262 
p
++;

266 i‡(!
vÆid
) {

267  
NGX_ERROR
;

270 i‡(!
is_£c
) {

271 i‡(
vÆue
 > 
NGX_MAX_INT_T_VALUE
 / 1000) {

272  
NGX_ERROR
;

275 
vÆue
 *= 1000;

278 i‡(
tŸÆ
 > 
NGX_MAX_INT_T_VALUE
 - 
vÆue
) {

279  
NGX_ERROR
;

282  
tŸÆ
 + 
vÆue
;

283 
	}
}

	@src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

17 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

18 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@src/core/ngx_parse_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gmday
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

14 
time_t


15 
	$ngx_∑r£_hâp_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
)

17 
u_ch¨
 *
p
, *
íd
;

18 
ngx_öt_t
 
m⁄th
;

19 
ngx_uöt_t
 
day
, 
yór
, 
hour
, 
mö
, 
£c
;

20 
uöt64_t
 
time
;

22 
no
 = 0,

23 
rfc822
,

24 
rfc850
,

25 
isoc


26 } 
fmt
;

28 
fmt
 = 0;

29 
íd
 = 
vÆue
 + 
Àn
;

31 #i‡(
NGX_SUPPRESS_WARN
)

32 
day
 = 32;

33 
yór
 = 2038;

36 
p
 = 
vÆue
;Ö < 
íd
;Ö++) {

37 i‡(*
p
 == ',') {

41 i‡(*
p
 == ' ') {

42 
fmt
 = 
isoc
;

47 
p
++;Ö < 
íd
;Ö++) {

48 i‡(*
p
 != ' ') {

53 i‡(
íd
 - 
p
 < 18) {

54  
NGX_ERROR
;

57 i‡(
fmt
 !
isoc
) {

58 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

59  
NGX_ERROR
;

62 
day
 = (*
p
 - '0') * 10 + (*(p + 1) - '0');

63 
p
 += 2;

65 i‡(*
p
 == ' ') {

66 i‡(
íd
 - 
p
 < 18) {

67  
NGX_ERROR
;

69 
fmt
 = 
rfc822
;

71 } i‡(*
p
 == '-') {

72 
fmt
 = 
rfc850
;

75  
NGX_ERROR
;

78 
p
++;

81 *
p
) {

84 
m⁄th
 = *(
p
 + 1) == 'a' ? 0 : *(p + 2) == 'n' ? 5 : 6;

88 
m⁄th
 = 1;

92 
m⁄th
 = *(
p
 + 2) == 'r' ? 2 : 4;

96 
m⁄th
 = *(
p
 + 1) == 'p' ? 3 : 7;

100 
m⁄th
 = 8;

104 
m⁄th
 = 9;

108 
m⁄th
 = 10;

112 
m⁄th
 = 11;

116  
NGX_ERROR
;

119 
p
 += 3;

121 i‡((
fmt
 =
rfc822
 && *
p
 !' 'Ë|| (fmà=
rfc850
 && *p != '-')) {

122  
NGX_ERROR
;

125 
p
++;

127 i‡(
fmt
 =
rfc822
) {

128 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

129 || *(
p
 + 2) < '0' || *(p + 2) > '9'

130 || *(
p
 + 3) < '0' || *(p + 3) > '9')

132  
NGX_ERROR
;

135 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

136 + (*(
p
 + 2) - '0') * 10 + (*(p + 3) - '0');

137 
p
 += 4;

139 } i‡(
fmt
 =
rfc850
) {

140 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

141  
NGX_ERROR
;

144 
yór
 = (*
p
 - '0') * 10 + (*(p + 1) - '0');

145 
yór
 += (year < 70) ? 2000 : 1900;

146 
p
 += 2;

149 i‡(
fmt
 =
isoc
) {

150 i‡(*
p
 == ' ') {

151 
p
++;

154 i‡(*
p
 < '0' || *p > '9') {

155  
NGX_ERROR
;

158 
day
 = *
p
++ - '0';

160 i‡(*
p
 != ' ') {

161 i‡(*
p
 < '0' || *p > '9') {

162  
NGX_ERROR
;

165 
day
 = day * 10 + (*
p
++ - '0');

168 i‡(
íd
 - 
p
 < 14) {

169  
NGX_ERROR
;

173 i‡(*
p
++ != ' ') {

174  
NGX_ERROR
;

177 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

178  
NGX_ERROR
;

181 
hour
 = (*
p
 - '0') * 10 + (*(p + 1) - '0');

182 
p
 += 2;

184 i‡(*
p
++ != ':') {

185  
NGX_ERROR
;

188 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

189  
NGX_ERROR
;

192 
mö
 = (*
p
 - '0') * 10 + (*(p + 1) - '0');

193 
p
 += 2;

195 i‡(*
p
++ != ':') {

196  
NGX_ERROR
;

199 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

200  
NGX_ERROR
;

203 
£c
 = (*
p
 - '0') * 10 + (*(p + 1) - '0');

205 i‡(
fmt
 =
isoc
) {

206 
p
 += 2;

208 i‡(*
p
++ != ' ') {

209  
NGX_ERROR
;

212 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

213 || *(
p
 + 2) < '0' || *(p + 2) > '9'

214 || *(
p
 + 3) < '0' || *(p + 3) > '9')

216  
NGX_ERROR
;

219 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

220 + (*(
p
 + 2) - '0') * 10 + (*(p + 3) - '0');

223 i‡(
hour
 > 23 || 
mö
 > 59 || 
£c
 > 59) {

224  
NGX_ERROR
;

227 i‡(
day
 =29 && 
m⁄th
 == 1) {

228 i‡((
yór
 & 3) || ((year % 100 == 0) && (year % 400) != 0)) {

229  
NGX_ERROR
;

232 } i‡(
day
 > 
mday
[
m⁄th
]) {

233  
NGX_ERROR
;

241 i‡(--
m⁄th
 <= 0) {

242 
m⁄th
 += 12;

243 
yór
 -= 1;

248 
time
 = (
uöt64_t
) (

251 365 * 
yór
 + year / 4 - year / 100 + year / 400

255 + 367 * 
m⁄th
 / 12 - 30

259 + 
day
 - 1

266 - 719527 + 31 + 28Ë* 86400 + 
hour
 * 3600 + 
mö
 * 60 + 
£c
;

268 #i‡(
NGX_TIME_T_SIZE
 <= 4)

270 i‡(
time
 > 0x7fffffff) {

271  
NGX_ERROR
;

276  (
time_t
Ë
time
;

277 
	}
}

	@src/core/ngx_parse_time.h

8 #i‚de‡
_NGX_PARSE_TIME_H_INCLUDED_


9 
	#_NGX_PARSE_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
time_t
 
ngx_∑r£_hâp_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

19 
	#ngx_hâp_∑r£_time
(
vÆue
, 
Àn
Ë
	`ngx_∑r£_hâp_time
(vÆue,Üí)

	)

	@src/core/ngx_proxy_protocol.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	#NGX_PROXY_PROTOCOL_AF_INET
 1

	)

13 
	#NGX_PROXY_PROTOCOL_AF_INET6
 2

	)

16 
	#ngx_¥oxy_¥Ÿocﬁ_∑r£_uöt16
(
p
Ë(’)[0] << 8 | (p)[1])

	)

20 
u_ch¨
 
	msig«tuª
[12];

21 
u_ch¨
 
	mvîsi⁄_comm™d
;

22 
u_ch¨
 
	mÁmûy_å™•‹t
;

23 
u_ch¨
 
	mÀn
[2];

24 } 
	tngx_¥oxy_¥Ÿocﬁ_hódî_t
;

28 
u_ch¨
 
	m§c_addr
[4];

29 
u_ch¨
 
	md°_addr
[4];

30 
u_ch¨
 
	m§c_p‹t
[2];

31 
u_ch¨
 
	md°_p‹t
[2];

32 } 
	tngx_¥oxy_¥Ÿocﬁ_öë_addrs_t
;

36 
u_ch¨
 
	m§c_addr
[16];

37 
u_ch¨
 
	md°_addr
[16];

38 
u_ch¨
 
	m§c_p‹t
[2];

39 
u_ch¨
 
	md°_p‹t
[2];

40 } 
	tngx_¥oxy_¥Ÿocﬁ_öë6_addrs_t
;

43 
u_ch¨
 *
ngx_¥oxy_¥Ÿocﬁ_v2_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, u_ch¨ *
buf
,

44 
u_ch¨
 *
œ°
);

47 
u_ch¨
 *

48 
	$ngx_¥oxy_¥Ÿocﬁ_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, u_ch¨ *
œ°
)

50 
size_t
 
Àn
;

51 
u_ch¨
 
ch
, *
p
, *
addr
, *
p‹t
;

52 
ngx_öt_t
 
n
;

54 c⁄° 
u_ch¨
 
sig«tuª
[] = "\r\n\r\n\0\r\nQUIT\n";

56 
p
 = 
buf
;

57 
Àn
 = 
œ°
 - 
buf
;

59 i‡(
Àn
 >(
ngx_¥oxy_¥Ÿocﬁ_hódî_t
)

60 && 
	`memcmp
(
p
, 
sig«tuª
, (signature) - 1) == 0)

62  
	`ngx_¥oxy_¥Ÿocﬁ_v2_ªad
(
c
, 
buf
, 
œ°
);

65 i‡(
Àn
 < 8 || 
	`ngx_°∫cmp
(
p
, "PROXY ", 6) != 0) {

66 
övÆid
;

69 
p
 += 6;

70 
Àn
 -= 6;

72 i‡(
Àn
 >7 && 
	`ngx_°∫cmp
(
p
, "UNKNOWN", 7) == 0) {

73 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

75 
p
 += 7;

76 
skù
;

79 i‡(
Àn
 < 5 || 
	`ngx_°∫cmp
(
p
, "TCP", 3) != 0

80 || (
p
[3] != '4' &&Ö[3] != '6') ||Ö[4] != ' ')

82 
övÆid
;

85 
p
 += 5;

86 
addr
 = 
p
;

89 i‡(
p
 =
œ°
) {

90 
övÆid
;

93 
ch
 = *
p
++;

95 i‡(
ch
 == ' ') {

99 i‡(
ch
 != ':' && ch != '.'

100 && (
ch
 < 'a' || ch > 'f')

101 && (
ch
 < 'A' || ch > 'F')

102 && (
ch
 < '0' || ch > '9'))

104 
övÆid
;

108 
Àn
 = 
p
 - 
addr
 - 1;

109 
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
Àn
);

111 i‡(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 =
NULL
) {

112  
NULL
;

115 
	`ngx_mem˝y
(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
, 
addr
, 
Àn
);

116 
c
->
¥oxy_¥Ÿocﬁ_addr
.
Àn
 =Üen;

119 i‡(
p
 =
œ°
) {

120 
övÆid
;

123 i‡(*
p
++ == ' ') {

128 
p‹t
 = 
p
;

131 i‡(
p
 =
œ°
) {

132 
övÆid
;

135 i‡(*
p
++ == ' ') {

140 
Àn
 = 
p
 - 
p‹t
 - 1;

142 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

144 i‡(
n
 < 0 ||Ç > 65535) {

145 
övÆid
;

148 
c
->
¥oxy_¥Ÿocﬁ_p‹t
 = (
ö_p‹t_t
Ë
n
;

150 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

151 "PROXYÖrŸocﬁáddªss: %V %d", &
c
->
¥oxy_¥Ÿocﬁ_addr
,

152 
c
->
¥oxy_¥Ÿocﬁ_p‹t
);

154 
skù
:

156  ; 
p
 < 
œ°
 - 1;Ö++) {

157 i‡(
p
[0] =
CR
 &&Ö[1] =
LF
) {

158  
p
 + 2;

162 
övÆid
:

164 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

165 "brokí hódî: \"%*s\"", (
size_t
Ë(
œ°
 - 
buf
), buf);

167  
NULL
;

168 
	}
}

171 
u_ch¨
 *

172 
	$ngx_¥oxy_¥Ÿocﬁ_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, u_ch¨ *
œ°
)

174 
ngx_uöt_t
 
p‹t
, 
Õ‹t
;

176 i‡(
œ°
 - 
buf
 < 
NGX_PROXY_PROTOCOL_MAX_HEADER
) {

177  
NULL
;

180 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

181  
NULL
;

184 
c
->
sockaddr
->
ß_Ámûy
) {

186 
AF_INET
:

187 
buf
 = 
	`ngx_˝ymem
(buf, "PROXY TCP4 ", ("PROXY TCP4 ") - 1);

190 #i‡(
NGX_HAVE_INET6
)

191 
AF_INET6
:

192 
buf
 = 
	`ngx_˝ymem
(buf, "PROXY TCP6 ", ("PROXY TCP6 ") - 1);

197  
	`ngx_˝ymem
(
buf
, "PROXY UNKNOWN" 
CRLF
,

198 ("PROXY UNKNOWN" 
CRLF
) - 1);

201 
buf
 +
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, buf, 
œ°
 - buf, 0);

203 *
buf
++ = ' ';

205 
buf
 +
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
, buf, 
œ°
 - buf,

208 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
c
->
sockaddr
);

209 
Õ‹t
 = 
	`ngx_öë_gë_p‹t
(
c
->
loˇl_sockaddr
);

211  
	`ngx_¶¥ötf
(
buf
, 
œ°
, " %uò%ui" 
CRLF
, 
p‹t
, 
Õ‹t
);

212 
	}
}

215 
u_ch¨
 *

216 
	$ngx_¥oxy_¥Ÿocﬁ_v2_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, u_ch¨ *
œ°
)

218 
u_ch¨
 *
íd
;

219 
size_t
 
Àn
;

220 
sockÀn_t
 
sockÀn
;

221 
ngx_uöt_t
 
vîsi⁄
, 
comm™d
, 
Ámûy
, 
å™•‹t
;

222 
ngx_sockaddr_t
 
sockaddr
;

223 
ngx_¥oxy_¥Ÿocﬁ_hódî_t
 *
hódî
;

224 
ngx_¥oxy_¥Ÿocﬁ_öë_addrs_t
 *
ö
;

225 #i‡(
NGX_HAVE_INET6
)

226 
ngx_¥oxy_¥Ÿocﬁ_öë6_addrs_t
 *
ö6
;

229 
hódî
 = (
ngx_¥oxy_¥Ÿocﬁ_hódî_t
 *Ë
buf
;

231 
buf
 +(
ngx_¥oxy_¥Ÿocﬁ_hódî_t
);

233 
vîsi⁄
 = 
hódî
->
vîsi⁄_comm™d
 >> 4;

235 i‡(
vîsi⁄
 != 2) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

237 "unknow¿PROXYÖrŸocﬁ vîsi⁄: %ui", 
vîsi⁄
);

238  
NULL
;

241 
Àn
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£_uöt16
(
hódî
->len);

243 i‡((
size_t
Ë(
œ°
 - 
buf
Ë< 
Àn
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0, "header isÅooÜarge");

245  
NULL
;

248 
íd
 = 
buf
 + 
Àn
;

250 
comm™d
 = 
hódî
->
vîsi⁄_comm™d
 & 0x0f;

253 i‡(
comm™d
 != 1) {

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

255 "PROXYÖrŸocﬁ v2 unsuµ‹ãd comm™d %ui", 
comm™d
);

256  
íd
;

259 
å™•‹t
 = 
hódî
->
Ámûy_å™•‹t
 & 0x0f;

262 i‡(
å™•‹t
 != 1) {

263 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

265 
å™•‹t
);

266  
íd
;

269 
Ámûy
 = 
hódî
->
Ámûy_å™•‹t
 >> 4;

271 
Ámûy
) {

273 
NGX_PROXY_PROTOCOL_AF_INET
:

275 i‡((
size_t
Ë(
íd
 - 
buf
Ë< (
ngx_¥oxy_¥Ÿocﬁ_öë_addrs_t
)) {

276  
NULL
;

279 
ö
 = (
ngx_¥oxy_¥Ÿocﬁ_öë_addrs_t
 *Ë
buf
;

281 
sockaddr
.
sockaddr_ö
.
sö_Ámûy
 = 
AF_INET
;

282 
sockaddr
.
sockaddr_ö
.
sö_p‹t
 = 0;

283 
	`mem˝y
(&
sockaddr
.
sockaddr_ö
.
sö_addr
, 
ö
->
§c_addr
, 4);

285 
c
->
¥oxy_¥Ÿocﬁ_p‹t
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£_uöt16
(
ö
->
§c_p‹t
);

287 
sockÀn
 = (
sockaddr_ö
);

289 
buf
 +(
ngx_¥oxy_¥Ÿocﬁ_öë_addrs_t
);

293 #i‡(
NGX_HAVE_INET6
)

295 
NGX_PROXY_PROTOCOL_AF_INET6
:

297 i‡((
size_t
Ë(
íd
 - 
buf
Ë< (
ngx_¥oxy_¥Ÿocﬁ_öë6_addrs_t
)) {

298  
NULL
;

301 
ö6
 = (
ngx_¥oxy_¥Ÿocﬁ_öë6_addrs_t
 *Ë
buf
;

303 
sockaddr
.
sockaddr_ö6
.
sö6_Ámûy
 = 
AF_INET6
;

304 
sockaddr
.
sockaddr_ö6
.
sö6_p‹t
 = 0;

305 
	`mem˝y
(&
sockaddr
.
sockaddr_ö6
.
sö6_addr
, 
ö6
->
§c_addr
, 16);

307 
c
->
¥oxy_¥Ÿocﬁ_p‹t
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£_uöt16
(
ö6
->
§c_p‹t
);

309 
sockÀn
 = (
sockaddr_ö6
);

311 
buf
 +(
ngx_¥oxy_¥Ÿocﬁ_öë6_addrs_t
);

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

320 
Ámûy
);

321  
íd
;

324 
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

325 i‡(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 =
NULL
) {

326  
NULL
;

329 
c
->
¥oxy_¥Ÿocﬁ_addr
.
Àn
 = 
	`ngx_sock_¡›
(&
sockaddr
.sockaddr, 
sockÀn
,

330 
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
,

331 
NGX_SOCKADDR_STRLEN
, 0);

333 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

334 "PROXYÖrŸocﬁ v2áddªss: %V %d", &
c
->
¥oxy_¥Ÿocﬁ_addr
,

335 
c
->
¥oxy_¥Ÿocﬁ_p‹t
);

337 i‡(
buf
 < 
íd
) {

338 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

339 "PROXYÖrŸocﬁ v2 %z byã†o‡év ign‹ed", 
íd
 - 
buf
);

342  
íd
;

343 
	}
}

	@src/core/ngx_proxy_protocol.h

8 #i‚de‡
_NGX_PROXY_PROTOCOL_H_INCLUDED_


9 
	#_NGX_PROXY_PROTOCOL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_PROXY_PROTOCOL_MAX_HEADER
 107

	)

19 
u_ch¨
 *
ngx_¥oxy_¥Ÿocﬁ_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, u_ch¨ *
buf
,

20 
u_ch¨
 *
œ°
);

21 
u_ch¨
 *
ngx_¥oxy_¥Ÿocﬁ_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, u_ch¨ *
buf
,

22 
u_ch¨
 *
œ°
);

	@src/core/ngx_queue.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

17 
ngx_queue_t
 *

18 
	$ngx_queue_middÀ
(
ngx_queue_t
 *
queue
)

20 
ngx_queue_t
 *
middÀ
, *
√xt
;

22 
middÀ
 = 
	`ngx_queue_hód
(
queue
);

24 i‡(
middÀ
 =
	`ngx_queue_œ°
(
queue
)) {

25  
middÀ
;

28 
√xt
 = 
	`ngx_queue_hód
(
queue
);

31 
middÀ
 = 
	`ngx_queue_√xt
(middle);

33 
√xt
 = 
	`ngx_queue_√xt
(next);

35 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

36  
middÀ
;

39 
√xt
 = 
	`ngx_queue_√xt
(next);

41 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

42  
middÀ
;

45 
	}
}

51 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

52 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *))

54 
ngx_queue_t
 *
q
, *
¥ev
, *
√xt
;

56 
q
 = 
	`ngx_queue_hód
(
queue
);

58 i‡(
q
 =
	`ngx_queue_œ°
(
queue
)) {

62 
q
 = 
	`ngx_queue_√xt
(q); q !
	`ngx_queue_£¡öñ
(
queue
); q = 
√xt
) {

64 
¥ev
 = 
	`ngx_queue_¥ev
(
q
);

65 
√xt
 = 
	`ngx_queue_√xt
(
q
);

67 
	`ngx_queue_ªmove
(
q
);

70 i‡(
	`cmp
(
¥ev
, 
q
) <= 0) {

74 
¥ev
 = 
	`ngx_queue_¥ev
(prev);

76 } 
¥ev
 !
	`ngx_queue_£¡öñ
(
queue
));

78 
	`ngx_queue_ö£π_a·î
(
¥ev
, 
q
);

80 
	}
}

	@src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
√xt

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@src/core/ngx_radix_tree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_ødix_node_t
 *
ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
);

15 
ngx_ødix_åì_t
 *

16 
	$ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_öt_t
 
¥óŒoˇã
)

18 
uöt32_t
 
key
, 
mask
, 
öc
;

19 
ngx_ødix_åì_t
 *
åì
;

21 
åì
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_ødix_åì_t
));

22 i‡(
åì
 =
NULL
) {

23  
NULL
;

26 
åì
->
poﬁ
 =Öool;

27 
åì
->
‰ì
 = 
NULL
;

28 
åì
->
°¨t
 = 
NULL
;

29 
åì
->
size
 = 0;

31 
åì
->
roŸ
 = 
	`ngx_ødix_Æloc
(tree);

32 i‡(
åì
->
roŸ
 =
NULL
) {

33  
NULL
;

36 
åì
->
roŸ
->
right
 = 
NULL
;

37 
åì
->
roŸ
->
À·
 = 
NULL
;

38 
åì
->
roŸ
->
∑ª¡
 = 
NULL
;

39 
åì
->
roŸ
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

41 i‡(
¥óŒoˇã
 == 0) {

42  
åì
;

62 i‡(
¥óŒoˇã
 == -1) {

63 
ngx_∑gesize
 / (
ngx_ødix_node_t
)) {

67 
¥óŒoˇã
 = 6;

72 
¥óŒoˇã
 = 7;

77 
¥óŒoˇã
 = 8;

81 
mask
 = 0;

82 
öc
 = 0x80000000;

84 
¥óŒoˇã
--) {

86 
key
 = 0;

87 
mask
 >>= 1;

88 
mask
 |= 0x80000000;

91 i‡(
	`ngx_ødix32åì_ö£π
(
åì
, 
key
, 
mask
, 
NGX_RADIX_NO_VALUE
)

92 !
NGX_OK
)

94  
NULL
;

97 
key
 +
öc
;

99 } 
key
);

101 
öc
 >>= 1;

104  
åì
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
,

110 
uöçå_t
 
vÆue
)

112 
uöt32_t
 
bô
;

113 
ngx_ødix_node_t
 *
node
, *
√xt
;

115 
bô
 = 0x80000000;

117 
node
 = 
åì
->
roŸ
;

118 
√xt
 = 
åì
->
roŸ
;

120 
bô
 & 
mask
) {

121 i‡(
key
 & 
bô
) {

122 
√xt
 = 
node
->
right
;

125 
√xt
 = 
node
->
À·
;

128 i‡(
√xt
 =
NULL
) {

132 
bô
 >>= 1;

133 
node
 = 
√xt
;

136 i‡(
√xt
) {

137 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

138  
NGX_BUSY
;

141 
node
->
vÆue
 = value;

142  
NGX_OK
;

145 
bô
 & 
mask
) {

146 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

147 i‡(
√xt
 =
NULL
) {

148  
NGX_ERROR
;

151 
√xt
->
right
 = 
NULL
;

152 
√xt
->
À·
 = 
NULL
;

153 
√xt
->
∑ª¡
 = 
node
;

154 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

156 i‡(
key
 & 
bô
) {

157 
node
->
right
 = 
√xt
;

160 
node
->
À·
 = 
√xt
;

163 
bô
 >>= 1;

164 
node
 = 
√xt
;

167 
node
->
vÆue
 = value;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
)

176 
uöt32_t
 
bô
;

177 
ngx_ødix_node_t
 *
node
;

179 
bô
 = 0x80000000;

180 
node
 = 
åì
->
roŸ
;

182 
node
 && (
bô
 & 
mask
)) {

183 i‡(
key
 & 
bô
) {

184 
node
 =Çode->
right
;

187 
node
 =Çode->
À·
;

190 
bô
 >>= 1;

193 i‡(
node
 =
NULL
) {

194  
NGX_ERROR
;

197 i‡(
node
->
right
 ||Çode->
À·
) {

198 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

199 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

200  
NGX_OK
;

203  
NGX_ERROR
;

207 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

208 
node
->
∑ª¡
->
right
 = 
NULL
;

211 
node
->
∑ª¡
->
À·
 = 
NULL
;

214 
node
->
right
 = 
åì
->
‰ì
;

215 
åì
->
‰ì
 = 
node
;

217 
node
 =Çode->
∑ª¡
;

219 i‡(
node
->
right
 ||Çode->
À·
) {

223 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

227 i‡(
node
->
∑ª¡
 =
NULL
) {

232  
NGX_OK
;

233 
	}
}

236 
uöçå_t


237 
	$ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
)

239 
uöt32_t
 
bô
;

240 
uöçå_t
 
vÆue
;

241 
ngx_ødix_node_t
 *
node
;

243 
bô
 = 0x80000000;

244 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

245 
node
 = 
åì
->
roŸ
;

247 
node
) {

248 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

249 
vÆue
 = 
node
->value;

252 i‡(
key
 & 
bô
) {

253 
node
 =Çode->
right
;

256 
node
 =Çode->
À·
;

259 
bô
 >>= 1;

262  
vÆue
;

263 
	}
}

266 #i‡(
NGX_HAVE_INET6
)

268 
ngx_öt_t


269 
	$ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
,

270 
uöçå_t
 
vÆue
)

272 
u_ch¨
 
bô
;

273 
ngx_uöt_t
 
i
;

274 
ngx_ødix_node_t
 *
node
, *
√xt
;

276 
i
 = 0;

277 
bô
 = 0x80;

279 
node
 = 
åì
->
roŸ
;

280 
√xt
 = 
åì
->
roŸ
;

282 
bô
 & 
mask
[
i
]) {

283 i‡(
key
[
i
] & 
bô
) {

284 
√xt
 = 
node
->
right
;

287 
√xt
 = 
node
->
À·
;

290 i‡(
√xt
 =
NULL
) {

294 
bô
 >>= 1;

295 
node
 = 
√xt
;

297 i‡(
bô
 == 0) {

298 i‡(++
i
 == 16) {

302 
bô
 = 0x80;

306 i‡(
√xt
) {

307 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

308  
NGX_BUSY
;

311 
node
->
vÆue
 = value;

312  
NGX_OK
;

315 
bô
 & 
mask
[
i
]) {

316 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

317 i‡(
√xt
 =
NULL
) {

318  
NGX_ERROR
;

321 
√xt
->
right
 = 
NULL
;

322 
√xt
->
À·
 = 
NULL
;

323 
√xt
->
∑ª¡
 = 
node
;

324 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

326 i‡(
key
[
i
] & 
bô
) {

327 
node
->
right
 = 
√xt
;

330 
node
->
À·
 = 
√xt
;

333 
bô
 >>= 1;

334 
node
 = 
√xt
;

336 i‡(
bô
 == 0) {

337 i‡(++
i
 == 16) {

341 
bô
 = 0x80;

345 
node
->
vÆue
 = value;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
)

354 
u_ch¨
 
bô
;

355 
ngx_uöt_t
 
i
;

356 
ngx_ødix_node_t
 *
node
;

358 
i
 = 0;

359 
bô
 = 0x80;

360 
node
 = 
åì
->
roŸ
;

362 
node
 && (
bô
 & 
mask
[
i
])) {

363 i‡(
key
[
i
] & 
bô
) {

364 
node
 =Çode->
right
;

367 
node
 =Çode->
À·
;

370 
bô
 >>= 1;

372 i‡(
bô
 == 0) {

373 i‡(++
i
 == 16) {

377 
bô
 = 0x80;

381 i‡(
node
 =
NULL
) {

382  
NGX_ERROR
;

385 i‡(
node
->
right
 ||Çode->
À·
) {

386 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

387 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

388  
NGX_OK
;

391  
NGX_ERROR
;

395 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

396 
node
->
∑ª¡
->
right
 = 
NULL
;

399 
node
->
∑ª¡
->
À·
 = 
NULL
;

402 
node
->
right
 = 
åì
->
‰ì
;

403 
åì
->
‰ì
 = 
node
;

405 
node
 =Çode->
∑ª¡
;

407 i‡(
node
->
right
 ||Çode->
À·
) {

411 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

415 i‡(
node
->
∑ª¡
 =
NULL
) {

420  
NGX_OK
;

421 
	}
}

424 
uöçå_t


425 
	$ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
)

427 
u_ch¨
 
bô
;

428 
uöçå_t
 
vÆue
;

429 
ngx_uöt_t
 
i
;

430 
ngx_ødix_node_t
 *
node
;

432 
i
 = 0;

433 
bô
 = 0x80;

434 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

435 
node
 = 
åì
->
roŸ
;

437 
node
) {

438 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

439 
vÆue
 = 
node
->value;

442 i‡(
key
[
i
] & 
bô
) {

443 
node
 =Çode->
right
;

446 
node
 =Çode->
À·
;

449 
bô
 >>= 1;

451 i‡(
bô
 == 0) {

452 
i
++;

453 
bô
 = 0x80;

457  
vÆue
;

458 
	}
}

463 
ngx_ødix_node_t
 *

464 
	$ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
)

466 
ngx_ødix_node_t
 *
p
;

468 i‡(
åì
->
‰ì
) {

469 
p
 = 
åì
->
‰ì
;

470 
åì
->
‰ì
 =Åªe->‰ì->
right
;

471  
p
;

474 i‡(
åì
->
size
 < (
ngx_ødix_node_t
)) {

475 
åì
->
°¨t
 = 
	`ngx_pmemÆign
—ªe->
poﬁ
, 
ngx_∑gesize
,Çgx_pagesize);

476 i‡(
åì
->
°¨t
 =
NULL
) {

477  
NULL
;

480 
åì
->
size
 = 
ngx_∑gesize
;

483 
p
 = (
ngx_ødix_node_t
 *Ë
åì
->
°¨t
;

484 
åì
->
°¨t
 +(
ngx_ødix_node_t
);

485 
åì
->
size
 -(
ngx_ødix_node_t
);

487  
p
;

488 
	}
}

	@src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

40 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

41 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

42 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

43 
uöt32_t
 
key
, uöt32_à
mask
);

44 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_öt_t
 
ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

48 
u_ch¨
 *
key
, u_ch¨ *
mask
, 
uöçå_t
 
vÆue
);

49 
ngx_öt_t
 
ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

50 
u_ch¨
 *
key
, u_ch¨ *
mask
);

51 
uöçå_t
 
ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
);

	@src/core/ngx_rbtree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

19 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

20 
ngx_ölöe
 
ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

21 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

25 
	$ngx_rbåì_ö£π
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
)

27 
ngx_rbåì_node_t
 **
roŸ
, *
ãmp
, *
£¡öñ
;

31 
roŸ
 = &
åì
->root;

32 
£¡öñ
 = 
åì
->sentinel;

34 i‡(*
roŸ
 =
£¡öñ
) {

35 
node
->
∑ª¡
 = 
NULL
;

36 
node
->
À·
 = 
£¡öñ
;

37 
node
->
right
 = 
£¡öñ
;

38 
	`ngx_rbt_bœck
(
node
);

39 *
roŸ
 = 
node
;

44 
åì
->
	`ö£π
(*
roŸ
, 
node
, 
£¡öñ
);

48 
node
 !*
roŸ
 && 
	`ngx_rbt_is_ªd
“ode->
∑ª¡
)) {

50 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

51 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

53 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

54 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

55 
	`ngx_rbt_bœck
(
ãmp
);

56 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

57 
node
 =Çode->
∑ª¡
->parent;

60 i‡(
node
 =node->
∑ª¡
->
right
) {

61 
node
 =Çode->
∑ª¡
;

62 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

65 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

66 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

67 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

71 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

73 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

74 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

75 
	`ngx_rbt_bœck
(
ãmp
);

76 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

77 
node
 =Çode->
∑ª¡
->parent;

80 i‡(
node
 =node->
∑ª¡
->
À·
) {

81 
node
 =Çode->
∑ª¡
;

82 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

85 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

86 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

87 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

92 
	`ngx_rbt_bœck
(*
roŸ
);

93 
	}
}

97 
	$ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

98 
ngx_rbåì_node_t
 *
£¡öñ
)

100 
ngx_rbåì_node_t
 **
p
;

104 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

106 i‡(*
p
 =
£¡öñ
) {

110 
ãmp
 = *
p
;

113 *
p
 = 
node
;

114 
node
->
∑ª¡
 = 
ãmp
;

115 
node
->
À·
 = 
£¡öñ
;

116 
node
->
right
 = 
£¡öñ
;

117 
	`ngx_rbt_ªd
(
node
);

118 
	}
}

122 
	$ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

123 
ngx_rbåì_node_t
 *
£¡öñ
)

125 
ngx_rbåì_node_t
 **
p
;

138 
p
 = ((
ngx_rbåì_key_öt_t
Ë(
node
->
key
 - 
ãmp
->key) < 0)

139 ? &
ãmp
->
À·
 : &ãmp->
right
;

141 i‡(*
p
 =
£¡öñ
) {

145 
ãmp
 = *
p
;

148 *
p
 = 
node
;

149 
node
->
∑ª¡
 = 
ãmp
;

150 
node
->
À·
 = 
£¡öñ
;

151 
node
->
right
 = 
£¡öñ
;

152 
	`ngx_rbt_ªd
(
node
);

153 
	}
}

157 
	$ngx_rbåì_dñëe
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
)

159 
ngx_uöt_t
 
ªd
;

160 
ngx_rbåì_node_t
 **
roŸ
, *
£¡öñ
, *
sub°
, *
ãmp
, *
w
;

164 
roŸ
 = &
åì
->root;

165 
£¡öñ
 = 
åì
->sentinel;

167 i‡(
node
->
À·
 =
£¡öñ
) {

168 
ãmp
 = 
node
->
right
;

169 
sub°
 = 
node
;

171 } i‡(
node
->
right
 =
£¡öñ
) {

172 
ãmp
 = 
node
->
À·
;

173 
sub°
 = 
node
;

176 
sub°
 = 
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

178 i‡(
sub°
->
À·
 !
£¡öñ
) {

179 
ãmp
 = 
sub°
->
À·
;

181 
ãmp
 = 
sub°
->
right
;

185 i‡(
sub°
 =*
roŸ
) {

186 *
roŸ
 = 
ãmp
;

187 
	`ngx_rbt_bœck
(
ãmp
);

190 
node
->
À·
 = 
NULL
;

191 
node
->
right
 = 
NULL
;

192 
node
->
∑ª¡
 = 
NULL
;

193 
node
->
key
 = 0;

198 
ªd
 = 
	`ngx_rbt_is_ªd
(
sub°
);

200 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

201 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

204 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

207 i‡(
sub°
 =
node
) {

209 
ãmp
->
∑ª¡
 = 
sub°
->parent;

213 i‡(
sub°
->
∑ª¡
 =
node
) {

214 
ãmp
->
∑ª¡
 = 
sub°
;

217 
ãmp
->
∑ª¡
 = 
sub°
->parent;

220 
sub°
->
À·
 = 
node
->left;

221 
sub°
->
right
 = 
node
->right;

222 
sub°
->
∑ª¡
 = 
node
->parent;

223 
	`ngx_rbt_c›y_cﬁ‹
(
sub°
, 
node
);

225 i‡(
node
 =*
roŸ
) {

226 *
roŸ
 = 
sub°
;

229 i‡(
node
 =node->
∑ª¡
->
À·
) {

230 
node
->
∑ª¡
->
À·
 = 
sub°
;

232 
node
->
∑ª¡
->
right
 = 
sub°
;

236 i‡(
sub°
->
À·
 !
£¡öñ
) {

237 
sub°
->
À·
->
∑ª¡
 = subst;

240 i‡(
sub°
->
right
 !
£¡öñ
) {

241 
sub°
->
right
->
∑ª¡
 = subst;

246 
node
->
À·
 = 
NULL
;

247 
node
->
right
 = 
NULL
;

248 
node
->
∑ª¡
 = 
NULL
;

249 
node
->
key
 = 0;

251 i‡(
ªd
) {

257 
ãmp
 !*
roŸ
 && 
	`ngx_rbt_is_bœck
(temp)) {

259 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

260 
w
 = 
ãmp
->
∑ª¡
->
right
;

262 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

263 
	`ngx_rbt_bœck
(
w
);

264 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

265 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

266 
w
 = 
ãmp
->
∑ª¡
->
right
;

269 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

270 
	`ngx_rbt_ªd
(
w
);

271 
ãmp
 =Åemp->
∑ª¡
;

274 i‡(
	`ngx_rbt_is_bœck
(
w
->
right
)) {

275 
	`ngx_rbt_bœck
(
w
->
À·
);

276 
	`ngx_rbt_ªd
(
w
);

277 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

278 
w
 = 
ãmp
->
∑ª¡
->
right
;

281 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

282 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

283 
	`ngx_rbt_bœck
(
w
->
right
);

284 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

285 
ãmp
 = *
roŸ
;

289 
w
 = 
ãmp
->
∑ª¡
->
À·
;

291 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

292 
	`ngx_rbt_bœck
(
w
);

293 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

294 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

295 
w
 = 
ãmp
->
∑ª¡
->
À·
;

298 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

299 
	`ngx_rbt_ªd
(
w
);

300 
ãmp
 =Åemp->
∑ª¡
;

303 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
)) {

304 
	`ngx_rbt_bœck
(
w
->
right
);

305 
	`ngx_rbt_ªd
(
w
);

306 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

307 
w
 = 
ãmp
->
∑ª¡
->
À·
;

310 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

311 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

312 
	`ngx_rbt_bœck
(
w
->
À·
);

313 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

314 
ãmp
 = *
roŸ
;

319 
	`ngx_rbt_bœck
(
ãmp
);

320 
	}
}

323 
ngx_ölöe
 

324 
	$ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

325 
ngx_rbåì_node_t
 *
node
)

327 
ngx_rbåì_node_t
 *
ãmp
;

329 
ãmp
 = 
node
->
right
;

330 
node
->
right
 = 
ãmp
->
À·
;

332 i‡(
ãmp
->
À·
 !
£¡öñ
) {

333 
ãmp
->
À·
->
∑ª¡
 = 
node
;

336 
ãmp
->
∑ª¡
 = 
node
->parent;

338 i‡(
node
 =*
roŸ
) {

339 *
roŸ
 = 
ãmp
;

341 } i‡(
node
 =node->
∑ª¡
->
À·
) {

342 
node
->
∑ª¡
->
À·
 = 
ãmp
;

345 
node
->
∑ª¡
->
right
 = 
ãmp
;

348 
ãmp
->
À·
 = 
node
;

349 
node
->
∑ª¡
 = 
ãmp
;

350 
	}
}

353 
ngx_ölöe
 

354 
	$ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

355 
ngx_rbåì_node_t
 *
node
)

357 
ngx_rbåì_node_t
 *
ãmp
;

359 
ãmp
 = 
node
->
À·
;

360 
node
->
À·
 = 
ãmp
->
right
;

362 i‡(
ãmp
->
right
 !
£¡öñ
) {

363 
ãmp
->
right
->
∑ª¡
 = 
node
;

366 
ãmp
->
∑ª¡
 = 
node
->parent;

368 i‡(
node
 =*
roŸ
) {

369 *
roŸ
 = 
ãmp
;

371 } i‡(
node
 =node->
∑ª¡
->
right
) {

372 
node
->
∑ª¡
->
right
 = 
ãmp
;

375 
node
->
∑ª¡
->
À·
 = 
ãmp
;

378 
ãmp
->
right
 = 
node
;

379 
node
->
∑ª¡
 = 
ãmp
;

380 
	}
}

383 
ngx_rbåì_node_t
 *

384 
	$ngx_rbåì_√xt
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
)

386 
ngx_rbåì_node_t
 *
roŸ
, *
£¡öñ
, *
∑ª¡
;

388 
£¡öñ
 = 
åì
->sentinel;

390 i‡(
node
->
right
 !
£¡öñ
) {

391  
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

394 
roŸ
 = 
åì
->root;

397 
∑ª¡
 = 
node
->parent;

399 i‡(
node
 =
roŸ
) {

400  
NULL
;

403 i‡(
node
 =
∑ª¡
->
À·
) {

404  
∑ª¡
;

407 
node
 = 
∑ª¡
;

409 
	}
}

	@src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
);

52 
	`ngx_rbåì_dñëe
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

54 
ngx_rbåì_node_t
 *
£¡öñ
);

55 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

56 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

57 
ngx_rbåì_node_t
 *
	`ngx_rbåì_√xt
(
ngx_rbåì_t
 *
åì
,

58 
ngx_rbåì_node_t
 *
node
);

61 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

62 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

63 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

64 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

65 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

70 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

73 
ngx_ölöe
 
ngx_rbåì_node_t
 *

74 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

76 
node
->
À·
 !
£¡öñ
) {

77 
node
 =Çode->
À·
;

80  
node
;

81 
	}
}

	@src/core/ngx_regex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
ngx_Êag_t
 
	mp¸e_jô
;

14 } 
	tngx_ªgex_c⁄f_t
;

17 * 
ngx_libc_cde˛
 
ngx_ªgex_mÆloc
(
size_t
 
size
);

18 
ngx_libc_cde˛
 
ngx_ªgex_‰ì
(*
p
);

19 #i‡(
NGX_HAVE_PCRE_JIT
)

20 
ngx_p¸e_‰ì_°udõs
(*
d©a
);

23 
ngx_öt_t
 
ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 *
ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

28 *
ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

29 
ngx_c⁄f_po°_t
 
	gngx_ªgex_p¸e_jô_po°
 = { 
ngx_ªgex_p¸e_jô
 };

32 
ngx_comm™d_t
 
	gngx_ªgex_comm™ds
[] = {

34 { 
ngx_°rög
("pcre_jit"),

35 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

36 
ngx_c⁄f_£t_Êag_¶Ÿ
,

38 
off£tof
(
ngx_ªgex_c⁄f_t
, 
p¸e_jô
),

39 &
ngx_ªgex_p¸e_jô_po°
 },

41 
ngx_nuŒ_comm™d


45 
ngx_c‹e_moduÀ_t
 
	gngx_ªgex_moduÀ_˘x
 = {

46 
ngx_°rög
("regex"),

47 
ngx_ªgex_¸óã_c⁄f
,

48 
ngx_ªgex_öô_c⁄f


52 
ngx_moduÀ_t
 
	gngx_ªgex_moduÀ
 = {

53 
NGX_MODULE_V1
,

54 &
ngx_ªgex_moduÀ_˘x
,

55 
ngx_ªgex_comm™ds
,

56 
NGX_CORE_MODULE
,

57 
NULL
,

58 
ngx_ªgex_moduÀ_öô
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NGX_MODULE_V1_PADDING


68 
ngx_poﬁ_t
 *
	gngx_p¸e_poﬁ
;

69 
ngx_li°_t
 *
	gngx_p¸e_°udõs
;

73 
	$ngx_ªgex_öô
()

75 
p¸e_mÆloc
 = 
ngx_ªgex_mÆloc
;

76 
p¸e_‰ì
 = 
ngx_ªgex_‰ì
;

77 
	}
}

80 
ngx_ölöe
 

81 
	$ngx_ªgex_mÆloc_öô
(
ngx_poﬁ_t
 *
poﬁ
)

83 
ngx_p¸e_poﬁ
 = 
poﬁ
;

84 
	}
}

87 
ngx_ölöe
 

88 
	$ngx_ªgex_mÆloc_d⁄e
()

90 
ngx_p¸e_poﬁ
 = 
NULL
;

91 
	}
}

94 
ngx_öt_t


95 
	$ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
)

97 
n
, 
îroff
;

98 *
p
;

99 
p¸e
 *
ª
;

100 c⁄° *
îr°r
;

101 
ngx_ªgex_ñt_t
 *
ñt
;

103 
	`ngx_ªgex_mÆloc_öô
(
rc
->
poﬁ
);

105 
ª
 = 
	`p¸e_compûe
((c⁄° *Ë
rc
->
∑âîn
.
d©a
, (Ërc->
›ti⁄s
,

106 &
îr°r
, &
îroff
, 
NULL
);

109 
	`ngx_ªgex_mÆloc_d⁄e
();

111 i‡(
ª
 =
NULL
) {

112 i‡((
size_t
Ë
îroff
 =
rc
->
∑âîn
.
Àn
) {

113 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

115 
îr°r
, &
rc
->
∑âîn
)

116 - 
rc
->
îr
.
d©a
;

119 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

121 
îr°r
, &
rc
->
∑âîn
,Ñc->∑âîn.
d©a
 + 
îroff
)

122 - 
rc
->
îr
.
d©a
;

125  
NGX_ERROR
;

128 
rc
->
ªgex
 = 
	`ngx_pˇŒoc
‘c->
poﬁ
, (
ngx_ªgex_t
));

129 i‡(
rc
->
ªgex
 =
NULL
) {

130 
nomem
;

133 
rc
->
ªgex
->
code
 = 
ª
;

137 i‡(
ngx_p¸e_°udõs
 !
NULL
) {

138 
ñt
 = 
	`ngx_li°_push
(
ngx_p¸e_°udõs
);

139 i‡(
ñt
 =
NULL
) {

140 
nomem
;

143 
ñt
->
ªgex
 = 
rc
->regex;

144 
ñt
->
«me
 = 
rc
->
∑âîn
.
d©a
;

147 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_CAPTURECOUNT
, &
rc
->
ˇ±uªs
);

148 i‡(
n
 < 0) {

149 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_CAPTURECOUNT) failed: %d";

150 
Áûed
;

153 i‡(
rc
->
ˇ±uªs
 == 0) {

154  
NGX_OK
;

157 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMECOUNT
, &
rc
->
«med_ˇ±uªs
);

158 i‡(
n
 < 0) {

159 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMECOUNT) failed: %d";

160 
Áûed
;

163 i‡(
rc
->
«med_ˇ±uªs
 == 0) {

164  
NGX_OK
;

167 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMEENTRYSIZE
, &
rc
->
«me_size
);

168 i‡(
n
 < 0) {

169 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMEENTRYSIZE) failed: %d";

170 
Áûed
;

173 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMETABLE
, &
rc
->
«mes
);

174 i‡(
n
 < 0) {

175 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMETABLE) failed: %d";

176 
Áûed
;

179  
NGX_OK
;

181 
Áûed
:

183 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->îr.Àn, 
p
, &rc->
∑âîn
, 
n
)

184 - 
rc
->
îr
.
d©a
;

185  
NGX_ERROR
;

187 
nomem
:

189 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

191 &
rc
->
∑âîn
)

192 - 
rc
->
îr
.
d©a
;

193  
NGX_ERROR
;

194 
	}
}

197 
ngx_öt_t


198 
	$ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
)

200 
ngx_öt_t
 
n
;

201 
ngx_uöt_t
 
i
;

202 
ngx_ªgex_ñt_t
 *
ª
;

204 
ª
 = 
a
->
ñts
;

206 
i
 = 0; i < 
a
->
√…s
; i++) {

208 
n
 = 
	`ngx_ªgex_exec
(
ª
[
i
].
ªgex
, 
s
, 
NULL
, 0);

210 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

214 i‡(
n
 < 0) {

215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

216 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%s\"",

217 
n
, 
s
, 
ª
[
i
].
«me
);

218  
NGX_ERROR
;

223  
NGX_OK
;

226  
NGX_DECLINED
;

227 
	}
}

230 * 
ngx_libc_cde˛


231 
	$ngx_ªgex_mÆloc
(
size_t
 
size
)

233 
ngx_poﬁ_t
 *
poﬁ
;

234 
poﬁ
 = 
ngx_p¸e_poﬁ
;

236 i‡(
poﬁ
) {

237  
	`ngx_∑Œoc
(
poﬁ
, 
size
);

240  
NULL
;

241 
	}
}

244 
ngx_libc_cde˛


245 
	$ngx_ªgex_‰ì
(*
p
)

248 
	}
}

251 #i‡(
NGX_HAVE_PCRE_JIT
)

254 
	$ngx_p¸e_‰ì_°udõs
(*
d©a
)

256 
ngx_li°_t
 *
°udõs
 = 
d©a
;

258 
ngx_uöt_t
 
i
;

259 
ngx_li°_∑π_t
 *
∑π
;

260 
ngx_ªgex_ñt_t
 *
ñts
;

262 
∑π
 = &
°udõs
->part;

263 
ñts
 = 
∑π
->elts;

265 
i
 = 0; ; i++) {

267 i‡(
i
 >
∑π
->
√…s
) {

268 i‡(
∑π
->
√xt
 =
NULL
) {

272 
∑π
 =Ö¨t->
√xt
;

273 
ñts
 = 
∑π
->elts;

274 
i
 = 0;

277 i‡(
ñts
[
i
].
ªgex
->
exåa
 !
NULL
) {

278 
	`p¸e_‰ì_°udy
(
ñts
[
i
].
ªgex
->
exåa
);

281 
	}
}

286 
ngx_öt_t


287 
	$ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

289 
›t
;

290 c⁄° *
îr°r
;

291 
ngx_uöt_t
 
i
;

292 
ngx_li°_∑π_t
 *
∑π
;

293 
ngx_ªgex_ñt_t
 *
ñts
;

295 
›t
 = 0;

297 #i‡(
NGX_HAVE_PCRE_JIT
)

299 
ngx_ªgex_c⁄f_t
 *
rcf
;

300 
ngx_poﬁ_˛ónup_t
 *
˛n
;

302 
rcf
 = (
ngx_ªgex_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ªgex_moduÀ
);

304 i‡(
rcf
->
p¸e_jô
) {

305 
›t
 = 
PCRE_STUDY_JIT_COMPILE
;

313 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cy˛e
->
poﬁ
, 0);

314 i‡(
˛n
 =
NULL
) {

315  
NGX_ERROR
;

318 
˛n
->
h™dÀr
 = 
ngx_p¸e_‰ì_°udõs
;

319 
˛n
->
d©a
 = 
ngx_p¸e_°udõs
;

324 
	`ngx_ªgex_mÆloc_öô
(
cy˛e
->
poﬁ
);

326 
∑π
 = &
ngx_p¸e_°udõs
->part;

327 
ñts
 = 
∑π
->elts;

329 
i
 = 0; ; i++) {

331 i‡(
i
 >
∑π
->
√…s
) {

332 i‡(
∑π
->
√xt
 =
NULL
) {

336 
∑π
 =Ö¨t->
√xt
;

337 
ñts
 = 
∑π
->elts;

338 
i
 = 0;

341 
ñts
[
i
].
ªgex
->
exåa
 = 
	`p¸e_°udy
”…s[i].ªgex->
code
, 
›t
, &
îr°r
);

343 i‡(
îr°r
 !
NULL
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

346 
îr°r
, 
ñts
[
i
].
«me
);

349 #i‡(
NGX_HAVE_PCRE_JIT
)

350 i‡(
›t
 & 
PCRE_STUDY_JIT_COMPILE
) {

351 
jô
, 
n
;

353 
jô
 = 0;

354 
n
 = 
	`p¸e_fuŒöfo
(
ñts
[
i
].
ªgex
->
code
,É…s[i].ªgex->
exåa
,

355 
PCRE_INFO_JIT
, &
jô
);

357 i‡(
n
 !0 || 
jô
 != 1) {

358 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
cy˛e
->
log
, 0,

360 
ñts
[
i
].
«me
);

366 
	`ngx_ªgex_mÆloc_d⁄e
();

368 
ngx_p¸e_°udõs
 = 
NULL
;

370  
NGX_OK
;

371 
	}
}

375 
	$ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

377 
ngx_ªgex_c⁄f_t
 *
rcf
;

379 
rcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_ªgex_c⁄f_t
));

380 i‡(
rcf
 =
NULL
) {

381  
NULL
;

384 
rcf
->
p¸e_jô
 = 
NGX_CONF_UNSET
;

386 
ngx_p¸e_°udõs
 = 
	`ngx_li°_¸óã
(
cy˛e
->
poﬁ
, 8, (
ngx_ªgex_ñt_t
));

387 i‡(
ngx_p¸e_°udõs
 =
NULL
) {

388  
NULL
;

391  
rcf
;

392 
	}
}

396 
	$ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

398 
ngx_ªgex_c⁄f_t
 *
rcf
 = 
c⁄f
;

400 
	`ngx_c⁄f_öô_vÆue
(
rcf
->
p¸e_jô
, 0);

402  
NGX_CONF_OK
;

403 
	}
}

407 
	$ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

409 
ngx_Êag_t
 *
Â
 = 
d©a
;

411 i‡(*
Â
 == 0) {

412  
NGX_CONF_OK
;

415 #i‡(
NGX_HAVE_PCRE_JIT
)

417 
jô
, 
r
;

419 
jô
 = 0;

420 
r
 = 
	`p¸e_c⁄fig
(
PCRE_CONFIG_JIT
, &
jô
);

422 i‡(
r
 !0 || 
jô
 != 1) {

423 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

425 *
Â
 = 0;

429 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

431 *
Â
 = 0;

434  
NGX_CONF_OK
;

435 
	}
}

	@src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

24 
p¸e
 *
	mcode
;

25 
p¸e_exåa
 *
	mexåa
;

26 } 
	tngx_ªgex_t
;

30 
ngx_°r_t
 
	m∑âîn
;

31 
ngx_poﬁ_t
 *
	mpoﬁ
;

32 
ngx_öt_t
 
	m›ti⁄s
;

34 
ngx_ªgex_t
 *
	mªgex
;

35 
	mˇ±uªs
;

36 
	m«med_ˇ±uªs
;

37 
	m«me_size
;

38 
u_ch¨
 *
	m«mes
;

39 
ngx_°r_t
 
	mîr
;

40 } 
	tngx_ªgex_compûe_t
;

44 
ngx_ªgex_t
 *
	mªgex
;

45 
u_ch¨
 *
	m«me
;

46 } 
	tngx_ªgex_ñt_t
;

49 
ngx_ªgex_öô
();

50 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

52 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

53 
	`p¸e_exec
(
ª
->
code
,Ñe->
exåa
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

54 
ˇ±uªs
, 
size
)

	)

55 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

57 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@src/core/ngx_resolver.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_RESOLVER_UDP_SIZE
 4096

	)

15 
	#NGX_RESOLVER_TCP_RSIZE
 (2 + 65535)

	)

16 
	#NGX_RESOLVER_TCP_WSIZE
 8192

	)

20 
u_ch¨
 
	midít_hi
;

21 
u_ch¨
 
	midít_lo
;

22 
u_ch¨
 
	mÊags_hi
;

23 
u_ch¨
 
	mÊags_lo
;

24 
u_ch¨
 
	mnqs_hi
;

25 
u_ch¨
 
	mnqs_lo
;

26 
u_ch¨
 
	m«n_hi
;

27 
u_ch¨
 
	m«n_lo
;

28 
u_ch¨
 
	m¬s_hi
;

29 
u_ch¨
 
	m¬s_lo
;

30 
u_ch¨
 
	m«r_hi
;

31 
u_ch¨
 
	m«r_lo
;

32 } 
	tngx_ªsﬁvî_hdr_t
;

36 
u_ch¨
 
	mty≥_hi
;

37 
u_ch¨
 
	mty≥_lo
;

38 
u_ch¨
 
	m˛ass_hi
;

39 
u_ch¨
 
	m˛ass_lo
;

40 } 
	tngx_ªsﬁvî_qs_t
;

44 
u_ch¨
 
	mty≥_hi
;

45 
u_ch¨
 
	mty≥_lo
;

46 
u_ch¨
 
	m˛ass_hi
;

47 
u_ch¨
 
	m˛ass_lo
;

48 
u_ch¨
 
	mâl
[4];

49 
u_ch¨
 
	mÀn_hi
;

50 
u_ch¨
 
	mÀn_lo
;

51 } 
	tngx_ªsﬁvî_™_t
;

54 
	#ngx_ªsﬁvî_node
(
n
) \

55 (
ngx_ªsﬁvî_node_t
 *) \

56 ((
u_ch¨
 *Ë(
n
Ë- 
	`off£tof
(
ngx_ªsﬁvî_node_t
, 
node
))

	)

59 
ngx_öt_t
 
ngx_udp_c⁄√˘
(
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
);

60 
ngx_öt_t
 
ngx_t˝_c⁄√˘
(
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
);

63 
ngx_ªsﬁvî_˛ónup
(*
d©a
);

64 
ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
);

65 
ngx_öt_t
 
ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
,

66 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

67 
ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

68 
ngx_queue_t
 *
queue
);

69 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
,

70 
ngx_ªsﬁvî_node_t
 *
∫
);

71 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_udp_quîy
(
ngx_ªsﬁvî_t
 *
r
,

72 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
, 
u_ch¨
 *
quîy
, 
u_sh‹t
 
qÀn
);

73 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_t˝_quîy
(
ngx_ªsﬁvî_t
 *
r
,

74 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
, 
u_ch¨
 *
quîy
, 
u_sh‹t
 
qÀn
);

75 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_t
 *
r
,

76 
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_°r_t
 *
«me
);

77 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_§v_quîy
(
ngx_ªsﬁvî_t
 *
r
,

78 
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_°r_t
 *
«me
);

79 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_t
 *
r
,

80 
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_addr_t
 *
addr
);

81 
ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
);

82 
time_t
 
ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

83 
ngx_queue_t
 *
queue
);

84 
ngx_uöt_t
 
ngx_ªsﬁvî_ª£nd_em±y
(
ngx_ªsﬁvî_t
 *
r
);

85 
ngx_ªsﬁvî_udp_ªad
(
ngx_evít_t
 *
ªv
);

86 
ngx_ªsﬁvî_t˝_wrôe
(
ngx_evít_t
 *
wev
);

87 
ngx_ªsﬁvî_t˝_ªad
(
ngx_evít_t
 *
ªv
);

88 
ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
,

89 
size_t
 
n
, 
ngx_uöt_t
 
t˝
);

90 
ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

91 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
qty≥
,

92 
ngx_uöt_t
 
«n
,Çgx_uöt_à
åunc
,Çgx_uöt_à
™s
);

93 
ngx_ªsﬁvî_¥o˚ss_§v
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

94 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,

95 
ngx_uöt_t
 
åunc
,Çgx_uöt_à
™s
);

96 
ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

97 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
);

98 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
,

99 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

100 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_§v
(
ngx_ªsﬁvî_t
 *
r
,

101 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

102 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
,

103 
ö_addr_t
 
addr
);

104 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

105 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

106 
ngx_öt_t
 
ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
,

107 
u_ch¨
 *
buf
, u_ch¨ *
§c
, u_ch¨ *
œ°
);

108 
ngx_öt_t
 
ngx_ªsﬁvî_£t_timeout
(
ngx_ªsﬁvî_t
 *
r
,

109 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

110 
ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
);

111 
ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
);

112 *
ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

113 *
ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

114 
ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

115 
ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

116 *
ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
);

117 
ngx_ªsﬁvî_addr_t
 *
ngx_ªsﬁvî_exp‹t
(
ngx_ªsﬁvî_t
 *
r
,

118 
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_uöt_t
 
rŸ©e
);

119 
ngx_ªsﬁvî_ªp‹t_§v
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

120 
u_ch¨
 *
ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

121 
ngx_ªsﬁvî_ªsﬁve_§v_«mes
(
ngx_ªsﬁvî_˘x_t
 *
˘x
,

122 
ngx_ªsﬁvî_node_t
 *
∫
);

123 
ngx_ªsﬁvî_§v_«mes_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

124 
ngx_öt_t
 
ngx_ªsﬁvî_cmp_§vs
(c⁄° *
⁄e
, c⁄° *
two
);

126 #i‡(
NGX_HAVE_INET6
)

127 
ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

128 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

129 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr6
(
ngx_ªsﬁvî_t
 *
r
,

130 
ö6_addr
 *
addr
, 
uöt32_t
 
hash
);

134 
ngx_ªsﬁvî_t
 *

135 
	$ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
, 
ngx_uöt_t
 
n
)

137 
ngx_°r_t
 
s
;

138 
ngx_uæ_t
 
u
;

139 
ngx_uöt_t
 
i
, 
j
;

140 
ngx_ªsﬁvî_t
 *
r
;

141 
ngx_poﬁ_˛ónup_t
 *
˛n
;

142 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

144 
r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_ªsﬁvî_t
));

145 i‡(
r
 =
NULL
) {

146  
NULL
;

149 
r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

150 i‡(
r
->
evít
 =
NULL
) {

151  
NULL
;

154 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

155 i‡(
˛n
 =
NULL
) {

156  
NULL
;

159 
˛n
->
h™dÀr
 = 
ngx_ªsﬁvî_˛ónup
;

160 
˛n
->
d©a
 = 
r
;

162 
	`ngx_rbåì_öô
(&
r
->
«me_rbåì
, &r->
«me_£¡öñ
,

163 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

165 
	`ngx_rbåì_öô
(&
r
->
§v_rbåì
, &r->
§v_£¡öñ
,

166 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

168 
	`ngx_rbåì_öô
(&
r
->
addr_rbåì
, &r->
addr_£¡öñ
,

169 
ngx_rbåì_ö£π_vÆue
);

171 
	`ngx_queue_öô
(&
r
->
«me_ª£nd_queue
);

172 
	`ngx_queue_öô
(&
r
->
§v_ª£nd_queue
);

173 
	`ngx_queue_öô
(&
r
->
addr_ª£nd_queue
);

175 
	`ngx_queue_öô
(&
r
->
«me_expúe_queue
);

176 
	`ngx_queue_öô
(&
r
->
§v_expúe_queue
);

177 
	`ngx_queue_öô
(&
r
->
addr_expúe_queue
);

179 #i‡(
NGX_HAVE_INET6
)

180 
r
->
ùv6
 = 1;

182 
	`ngx_rbåì_öô
(&
r
->
addr6_rbåì
, &r->
addr6_£¡öñ
,

183 
ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
);

185 
	`ngx_queue_öô
(&
r
->
addr6_ª£nd_queue
);

187 
	`ngx_queue_öô
(&
r
->
addr6_expúe_queue
);

190 
r
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_ª£nd_h™dÀr
;

191 
r
->
evít
->
d©a
 =Ñ;

192 
r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

193 
r
->
evít
->
ˇn˚œbÀ
 = 1;

194 
r
->
idít
 = -1;

196 
r
->
ª£nd_timeout
 = 5;

197 
r
->
t˝_timeout
 = 5;

198 
r
->
expúe
 = 30;

199 
r
->
vÆid
 = 0;

201 
r
->
log
 = &
cf
->
cy˛e
->
√w_log
;

202 
r
->
log_Àvñ
 = 
NGX_LOG_ERR
;

204 i‡(
n
) {

205 i‡(
	`ngx_¨øy_öô
(&
r
->
c⁄√˘i⁄s
, 
cf
->
poﬁ
, 
n
,

206 (
ngx_ªsﬁvî_c⁄√˘i⁄_t
))

207 !
NGX_OK
)

209  
NULL
;

213 
i
 = 0; i < 
n
; i++) {

214 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "valid=", 6) == 0) {

215 
s
.
Àn
 = 
«mes
[
i
].len - 6;

216 
s
.
d©a
 = 
«mes
[
i
].data + 6;

218 
r
->
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

220 i‡(
r
->
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

221 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

222 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

223  
NULL
;

229 #i‡(
NGX_HAVE_INET6
)

230 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "ipv6=", 5) == 0) {

232 i‡(
	`ngx_°rcmp
(&
«mes
[
i
].
d©a
[5], "on") == 0) {

233 
r
->
ùv6
 = 1;

235 } i‡(
	`ngx_°rcmp
(&
«mes
[
i
].
d©a
[5], "off") == 0) {

236 
r
->
ùv6
 = 0;

239 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

240 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

241  
NULL
;

248 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

250 
u
.
uæ
 = 
«mes
[
i
];

251 
u
.
deÁu…_p‹t
 = 53;

253 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

254 i‡(
u
.
îr
) {

255 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

257 
u
.
îr
, &u.
uæ
);

260  
NULL
;

263 
ªc
 = 
	`ngx_¨øy_push_n
(&
r
->
c⁄√˘i⁄s
, 
u
.
«ddrs
);

264 i‡(
ªc
 =
NULL
) {

265  
NULL
;

268 
	`ngx_memzîo
(
ªc
, 
u
.
«ddrs
 * (
ngx_ªsﬁvî_c⁄√˘i⁄_t
));

270 
j
 = 0; j < 
u
.
«ddrs
; j++) {

271 
ªc
[
j
].
sockaddr
 = 
u
.
addrs
[j].sockaddr;

272 
ªc
[
j
].
sockÀn
 = 
u
.
addrs
[j].socklen;

273 
ªc
[
j
].
£rvî
 = 
u
.
addrs
[j].
«me
;

274 
ªc
[
j
].
ªsﬁvî
 = 
r
;

278 i‡(
n
 && 
r
->
c⁄√˘i⁄s
.
√…s
 == 0) {

279 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "noÇame servers defined");

280  
NULL
;

283  
r
;

284 
	}
}

288 
	$ngx_ªsﬁvî_˛ónup
(*
d©a
)

290 
ngx_ªsﬁvî_t
 *
r
 = 
d©a
;

292 
ngx_uöt_t
 
i
;

293 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

295 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "cleanupÑesolver");

297 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
«me_rbåì
);

299 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
§v_rbåì
);

301 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr_rbåì
);

303 #i‡(
NGX_HAVE_INET6
)

304 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr6_rbåì
);

307 i‡(
r
->
evít
->
timî_£t
) {

308 
	`ngx_dñ_timî
(
r
->
evít
);

311 
ªc
 = 
r
->
c⁄√˘i⁄s
.
ñts
;

313 
i
 = 0; i < 
r
->
c⁄√˘i⁄s
.
√…s
; i++) {

314 i‡(
ªc
[
i
].
udp
) {

315 
	`ngx_˛o£_c⁄√˘i⁄
(
ªc
[
i
].
udp
);

318 i‡(
ªc
[
i
].
t˝
) {

319 
	`ngx_˛o£_c⁄√˘i⁄
(
ªc
[
i
].
t˝
);

322 i‡(
ªc
[
i
].
ªad_buf
) {

323 
	`ngx_ªsﬁvî_‰ì
(
r
, 
ªc
[
i
].
ªad_buf
->
°¨t
);

324 
	`ngx_ªsﬁvî_‰ì
(
r
, 
ªc
[
i
].
ªad_buf
);

327 i‡(
ªc
[
i
].
wrôe_buf
) {

328 
	`ngx_ªsﬁvî_‰ì
(
r
, 
ªc
[
i
].
wrôe_buf
->
°¨t
);

329 
	`ngx_ªsﬁvî_‰ì
(
r
, 
ªc
[
i
].
wrôe_buf
);

332 
	}
}

336 
	$ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
)

338 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

339 
ngx_ªsﬁvî_node_t
 *
∫
;

341 
åì
->
roŸ
 !åì->
£¡öñ
) {

343 
∫
 = 
	`ngx_ªsﬁvî_node
(
	`ngx_rbåì_mö
(
åì
->
roŸ
,Åªe->
£¡öñ
));

345 
	`ngx_queue_ªmove
(&
∫
->
queue
);

347 
˘x
 = 
∫
->
waôög
; ctx; ctx = 
√xt
) {

348 
√xt
 = 
˘x
->next;

350 i‡(
˘x
->
evít
) {

351 i‡(
˘x
->
evít
->
timî_£t
) {

352 
	`ngx_dñ_timî
(
˘x
->
evít
);

355 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

358 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

361 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

363 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

365 
	}
}

368 
ngx_ªsﬁvî_˘x_t
 *

369 
	$ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
ãmp
)

371 
ö_addr_t
 
addr
;

372 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

374 i‡(
ãmp
) {

375 
addr
 = 
	`ngx_öë_addr
(
ãmp
->
«me
.
d©a
,Åemp->«me.
Àn
);

377 i‡(
addr
 !
INADDR_NONE
) {

378 
ãmp
->
ªsﬁvî
 = 
r
;

379 
ãmp
->
°©e
 = 
NGX_OK
;

380 
ãmp
->
«ddrs
 = 1;

381 
ãmp
->
addrs
 = &ãmp->
addr
;

382 
ãmp
->
addr
.
sockaddr
 = (sockadd∏*Ë&ãmp->
sö
;

383 
ãmp
->
addr
.
sockÀn
 = (
sockaddr_ö
);

384 
	`ngx_memzîo
(&
ãmp
->
sö
, (
sockaddr_ö
));

385 
ãmp
->
sö
.
sö_Ámûy
 = 
AF_INET
;

386 
ãmp
->
sö
.
sö_addr
.
s_addr
 = 
addr
;

387 
ãmp
->
quick
 = 1;

389  
ãmp
;

393 i‡(
r
->
c⁄√˘i⁄s
.
√…s
 == 0) {

394  
NGX_NO_RESOLVER
;

397 
˘x
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_ªsﬁvî_˘x_t
));

399 i‡(
˘x
) {

400 
˘x
->
ªsﬁvî
 = 
r
;

403  
˘x
;

404 
	}
}

407 
ngx_öt_t


408 
	$ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

410 
size_t
 
¶í
;

411 
ngx_öt_t
 
rc
;

412 
ngx_°r_t
 
«me
;

413 
ngx_ªsﬁvî_t
 *
r
;

415 
r
 = 
˘x
->
ªsﬁvî
;

417 i‡(
˘x
->
«me
.
Àn
 > 0 && ctx->«me.
d©a
[ctx->name.len - 1] == '.') {

418 
˘x
->
«me
.
Àn
--;

421 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

422 "ªsﬁve: \"%V\"", &
˘x
->
«me
);

424 i‡(
˘x
->
quick
) {

425 
˘x
->
	`h™dÀr
(ctx);

426  
NGX_OK
;

429 i‡(
˘x
->
£rvi˚
.
Àn
) {

430 
¶í
 = 
˘x
->
£rvi˚
.
Àn
;

432 i‡(
	`ngx_°æchr
(
˘x
->
£rvi˚
.
d©a
,

433 
˘x
->
£rvi˚
.
d©a
 + ctx->£rvi˚.
Àn
, '.')

434 =
NULL
)

436 
¶í
 += ("_._tcp") - 1;

439 
«me
.
Àn
 = 
¶í
 + 1 + 
˘x
->name.len;

441 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_Æloc
(
r
,Çame.
Àn
);

442 i‡(
«me
.
d©a
 =
NULL
) {

443 
Áûed
;

446 i‡(
¶í
 =
˘x
->
£rvi˚
.
Àn
) {

447 
	`ngx_•rötf
(
«me
.
d©a
, "%V.%V", &
˘x
->
£rvi˚
, &ctx->name);

450 
	`ngx_•rötf
(
«me
.
d©a
, "_%V._t˝.%V", &
˘x
->
£rvi˚
, &ctx->name);

455 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
, &
«me
);

457 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

462 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
, &˘x->
«me
);

465 i‡(
rc
 =
NGX_OK
) {

466  
NGX_OK
;

471 i‡(
rc
 =
NGX_AGAIN
) {

472  
NGX_OK
;

477 i‡(
˘x
->
evít
) {

478 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

481 
Áûed
:

483 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

485  
NGX_ERROR
;

486 
	}
}

490 
	$ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

492 
ngx_uöt_t
 
i
;

493 
ngx_ªsﬁvî_t
 *
r
;

494 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

495 
ngx_ªsﬁvî_node_t
 *
∫
;

497 
r
 = 
˘x
->
ªsﬁvî
;

499 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

500 "ªsﬁvê«mêd⁄e: %i", 
˘x
->
°©e
);

502 i‡(
˘x
->
quick
) {

506 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

507 
	`ngx_dñ_timî
(
˘x
->
evít
);

512 i‡(
˘x
->
n§vs
) {

513 
i
 = 0; i < 
˘x
->
n§vs
; i++) {

514 i‡(
˘x
->
§vs
[
i
].ctx) {

515 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
->
§vs
[
i
].ctx);

518 i‡(
˘x
->
§vs
[
i
].
addrs
) {

519 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
§vs
[
i
].
addrs
->
sockaddr
);

520 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
§vs
[
i
].
addrs
);

523 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
§vs
[
i
].
«me
.
d©a
);

526 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
§vs
);

529 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

531 
∫
 = 
˘x
->
node
;

533 i‡(
∫
) {

534 
p
 = &
∫
->
waôög
;

535 
w
 = 
∫
->
waôög
;

537 
w
) {

538 i‡(
w
 =
˘x
) {

539 *
p
 = 
w
->
√xt
;

541 
d⁄e
;

544 
p
 = &
w
->
√xt
;

545 
w
 = w->
√xt
;

548 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

549 "couldÇŸ c™˚»%VÑesﬁvög", &
˘x
->
«me
);

553 
d⁄e
:

555 i‡(
˘x
->
£rvi˚
.
Àn
) {

556 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
§v_rbåì
, &r->
§v_expúe_queue
);

559 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
«me_rbåì
, &r->
«me_expúe_queue
);

566 i‡(
˘x
->
evít
) {

567 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

570 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

574 i‡(
r
->
evít
->
timî_£t
 && 
	`ngx_ªsﬁvî_ª£nd_em±y
(r)) {

575 
	`ngx_dñ_timî
(
r
->
evít
);

577 
	}
}

580 
ngx_öt_t


581 
	$ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
,

582 
ngx_°r_t
 *
«me
)

584 
uöt32_t
 
hash
;

585 
ngx_öt_t
 
rc
;

586 
ngx_°r_t
 
˙ame
;

587 
ngx_uöt_t
 
i
, 
«ddrs
;

588 
ngx_queue_t
 *
ª£nd_queue
, *
expúe_queue
;

589 
ngx_rbåì_t
 *
åì
;

590 
ngx_ªsﬁvî_˘x_t
 *
√xt
, *
œ°
;

591 
ngx_ªsﬁvî_addr_t
 *
addrs
;

592 
ngx_ªsﬁvî_node_t
 *
∫
;

594 
	`ngx_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

596 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
->
d©a
,Çame->
Àn
);

598 i‡(
˘x
->
£rvi˚
.
Àn
) {

599 
∫
 = 
	`ngx_ªsﬁvî_lookup_§v
(
r
, 
«me
, 
hash
);

601 
åì
 = &
r
->
§v_rbåì
;

602 
ª£nd_queue
 = &
r
->
§v_ª£nd_queue
;

603 
expúe_queue
 = &
r
->
§v_expúe_queue
;

606 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, 
«me
, 
hash
);

608 
åì
 = &
r
->
«me_rbåì
;

609 
ª£nd_queue
 = &
r
->
«me_ª£nd_queue
;

610 
expúe_queue
 = &
r
->
«me_expúe_queue
;

613 i‡(
∫
) {

616 
œ°
 = 
˘x
;Üa°->
√xt
;Üast =Üast->next);

618 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

620 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

622 
	`ngx_queue_ªmove
(&
∫
->
queue
);

624 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

626 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

628 
«ddrs
 = (
∫
->«ddr†=(
u_sh‹t
) -1) ? 0 :Ñn->naddrs;

629 #i‡(
NGX_HAVE_INET6
)

630 
«ddrs
 +(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) ? 0 :Ñn->naddrs6;

633 i‡(
«ddrs
) {

635 i‡(
«ddrs
 =1 && 
∫
->naddrs == 1) {

636 
addrs
 = 
NULL
;

639 
addrs
 = 
	`ngx_ªsﬁvî_exp‹t
(
r
, 
∫
, 1);

640 i‡(
addrs
 =
NULL
) {

641  
NGX_ERROR
;

645 
œ°
->
√xt
 = 
∫
->
waôög
;

646 
∫
->
waôög
 = 
NULL
;

651 
˘x
->
°©e
 = 
NGX_OK
;

652 
˘x
->
vÆid
 = 
∫
->valid;

653 
˘x
->
«ddrs
 =Çaddrs;

655 i‡(
addrs
 =
NULL
) {

656 
˘x
->
addrs
 = &˘x->
addr
;

657 
˘x
->
addr
.
sockaddr
 = (sockadd∏*Ë&˘x->
sö
;

658 
˘x
->
addr
.
sockÀn
 = (
sockaddr_ö
);

659 
	`ngx_memzîo
(&
˘x
->
sö
, (
sockaddr_ö
));

660 
˘x
->
sö
.
sö_Ámûy
 = 
AF_INET
;

661 
˘x
->
sö
.
sö_addr
.
s_addr
 = 
∫
->
u
.
addr
;

664 
˘x
->
addrs
 =áddrs;

667 
√xt
 = 
˘x
->next;

669 
˘x
->
	`h™dÀr
(ctx);

671 
˘x
 = 
√xt
;

672 } 
˘x
);

674 i‡(
addrs
 !
NULL
) {

675 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
->
sockaddr
);

676 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

679  
NGX_OK
;

682 i‡(
∫
->
n§vs
) {

683 
œ°
->
√xt
 = 
∫
->
waôög
;

684 
∫
->
waôög
 = 
NULL
;

689 
√xt
 = 
˘x
->next;

691 
	`ngx_ªsﬁvî_ªsﬁve_§v_«mes
(
˘x
, 
∫
);

693 
˘x
 = 
√xt
;

694 } 
˘x
);

696  
NGX_OK
;

701 i‡(
˘x
->
ªcursi⁄
++ < 
NGX_RESOLVER_MAX_RECURSION
) {

703 
˙ame
.
Àn
 = 
∫
->
˙Àn
;

704 
˙ame
.
d©a
 = 
∫
->
u
.cname;

706  
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
, &
˙ame
);

709 
œ°
->
√xt
 = 
∫
->
waôög
;

710 
∫
->
waôög
 = 
NULL
;

715 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

716 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

717 
√xt
 = 
˘x
->next;

719 
˘x
->
	`h™dÀr
(ctx);

721 
˘x
 = 
√xt
;

722 } 
˘x
);

724  
NGX_OK
;

727 i‡(
∫
->
waôög
) {

728 i‡(
	`ngx_ªsﬁvî_£t_timeout
(
r
, 
˘x
Ë!
NGX_OK
) {

729  
NGX_ERROR
;

732 
œ°
->
√xt
 = 
∫
->
waôög
;

733 
∫
->
waôög
 = 
˘x
;

734 
˘x
->
°©e
 = 
NGX_AGAIN
;

735 
˘x
->
async
 = 1;

738 
˘x
->
node
 = 
∫
;

739 
˘x
 = ctx->
√xt
;

740 } 
˘x
);

742  
NGX_AGAIN
;

745 
	`ngx_queue_ªmove
(&
∫
->
queue
);

749 i‡(
∫
->
quîy
) {

750 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

751 
∫
->
quîy
 = 
NULL
;

752 #i‡(
NGX_HAVE_INET6
)

753 
∫
->
quîy6
 = 
NULL
;

757 i‡(
∫
->
˙Àn
) {

758 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

761 i‡(
∫
->
«ddrs
 > 1 &&Ñn->«ddr†!(
u_sh‹t
) -1) {

762 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

765 #i‡(
NGX_HAVE_INET6
)

766 i‡(
∫
->
«ddrs6
 > 1 &&Ñn->«ddrs6 !(
u_sh‹t
) -1) {

767 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u6
.
addrs6
);

771 i‡(
∫
->
n§vs
) {

772 
i
 = 0; i < (
ngx_uöt_t
Ë
∫
->
n§vs
; i++) {

773 i‡(
∫
->
u
.
§vs
[
i
].
«me
.
d©a
) {

774 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
§vs
[
i
].
«me
.
d©a
);

778 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
§vs
);

785 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

786 i‡(
∫
 =
NULL
) {

787  
NGX_ERROR
;

790 
∫
->
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
,Çame->
d©a
,Çame->
Àn
);

791 i‡(
∫
->
«me
 =
NULL
) {

792 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

793  
NGX_ERROR
;

796 
∫
->
node
.
key
 = 
hash
;

797 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
->
Àn
;

798 
∫
->
quîy
 = 
NULL
;

799 #i‡(
NGX_HAVE_INET6
)

800 
∫
->
quîy6
 = 
NULL
;

803 
	`ngx_rbåì_ö£π
(
åì
, &
∫
->
node
);

806 i‡(
˘x
->
£rvi˚
.
Àn
) {

807 
rc
 = 
	`ngx_ªsﬁvî_¸óã_§v_quîy
(
r
, 
∫
, 
«me
);

810 
rc
 = 
	`ngx_ªsﬁvî_¸óã_«me_quîy
(
r
, 
∫
, 
«me
);

813 i‡(
rc
 =
NGX_ERROR
) {

814 
Áûed
;

817 i‡(
rc
 =
NGX_DECLINED
) {

818 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

820 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

821 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

822 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

825 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

826 
√xt
 = 
˘x
->next;

828 
˘x
->
	`h™dÀr
(ctx);

830 
˘x
 = 
√xt
;

831 } 
˘x
);

833  
NGX_OK
;

836 
∫
->
œ°_c⁄√˘i⁄
 = 
r
->last_connection++;

837 i‡(
r
->
œ°_c⁄√˘i⁄
 =r->
c⁄√˘i⁄s
.
√…s
) {

838 
r
->
œ°_c⁄√˘i⁄
 = 0;

841 
∫
->
«ddrs
 = (
u_sh‹t
) -1;

842 
∫
->
t˝
 = 0;

843 #i‡(
NGX_HAVE_INET6
)

844 
∫
->
«ddrs6
 = 
r
->
ùv6
 ? (
u_sh‹t
) -1 : 0;

845 
∫
->
t˝6
 = 0;

847 
∫
->
n§vs
 = 0;

849 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

853 
∫
->
œ°_c⁄√˘i⁄
++;

854 i‡(
∫
->
œ°_c⁄√˘i⁄
 =
r
->
c⁄√˘i⁄s
.
√…s
) {

855 
∫
->
œ°_c⁄√˘i⁄
 = 0;

858 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

861 i‡(
	`ngx_ªsﬁvî_£t_timeout
(
r
, 
˘x
Ë!
NGX_OK
) {

862 
Áûed
;

865 i‡(
	`ngx_ªsﬁvî_ª£nd_em±y
(
r
)) {

866 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

869 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

871 
	`ngx_queue_ö£π_hód
(
ª£nd_queue
, &
∫
->
queue
);

873 
∫
->
code
 = 0;

874 
∫
->
˙Àn
 = 0;

875 
∫
->
vÆid
 = 0;

876 
∫
->
âl
 = 
NGX_MAX_UINT32_VALUE
;

877 
∫
->
waôög
 = 
˘x
;

879 
˘x
->
°©e
 = 
NGX_AGAIN
;

880 
˘x
->
async
 = 1;

883 
˘x
->
node
 = 
∫
;

884 
˘x
 = ctx->
√xt
;

885 } 
˘x
);

887  
NGX_AGAIN
;

889 
Áûed
:

891 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

893 i‡(
∫
->
quîy
) {

894 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

897 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

899 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

901  
NGX_ERROR
;

902 
	}
}

905 
ngx_öt_t


906 
	$ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

908 
u_ch¨
 *
«me
;

909 
ö_addr_t
 
addr
;

910 
ngx_queue_t
 *
ª£nd_queue
, *
expúe_queue
;

911 
ngx_rbåì_t
 *
åì
;

912 
ngx_ªsﬁvî_t
 *
r
;

913 
sockaddr_ö
 *
sö
;

914 
ngx_ªsﬁvî_node_t
 *
∫
;

915 #i‡(
NGX_HAVE_INET6
)

916 
uöt32_t
 
hash
;

917 
sockaddr_ö6
 *
sö6
;

920 #i‡(
NGX_SUPPRESS_WARN
)

921 
addr
 = 0;

922 #i‡(
NGX_HAVE_INET6
)

923 
hash
 = 0;

924 
sö6
 = 
NULL
;

928 
r
 = 
˘x
->
ªsﬁvî
;

930 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

932 #i‡(
NGX_HAVE_INET6
)

933 
AF_INET6
:

934 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

935 
hash
 = 
	`ngx_¸c32_sh‹t
(
sö6
->
sö6_addr
.
s6_addr
, 16);

939 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
sö6
->
sö6_addr
, 
hash
);

941 
åì
 = &
r
->
addr6_rbåì
;

942 
ª£nd_queue
 = &
r
->
addr6_ª£nd_queue
;

943 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

949 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

950 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

954 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

956 
åì
 = &
r
->
addr_rbåì
;

957 
ª£nd_queue
 = &
r
->
addr_ª£nd_queue
;

958 
expúe_queue
 = &
r
->
addr_expúe_queue
;

961 i‡(
∫
) {

963 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

965 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

967 
	`ngx_queue_ªmove
(&
∫
->
queue
);

969 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

971 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

973 
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Ñn->
∆í
);

974 i‡(
«me
 =
NULL
) {

975 
Áûed
;

978 
˘x
->
«me
.
Àn
 = 
∫
->
∆í
;

979 
˘x
->
«me
.
d©a
 =Çame;

983 
˘x
->
°©e
 = 
NGX_OK
;

984 
˘x
->
vÆid
 = 
∫
->valid;

986 
˘x
->
	`h™dÀr
(ctx);

988 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
);

990  
NGX_OK
;

993 i‡(
∫
->
waôög
) {

994 i‡(
	`ngx_ªsﬁvî_£t_timeout
(
r
, 
˘x
Ë!
NGX_OK
) {

995  
NGX_ERROR
;

998 
˘x
->
√xt
 = 
∫
->
waôög
;

999 
∫
->
waôög
 = 
˘x
;

1000 
˘x
->
°©e
 = 
NGX_AGAIN
;

1001 
˘x
->
async
 = 1;

1002 
˘x
->
node
 = 
∫
;

1006  
NGX_OK
;

1009 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1011 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1012 
∫
->
quîy
 = 
NULL
;

1013 #i‡(
NGX_HAVE_INET6
)

1014 
∫
->
quîy6
 = 
NULL
;

1018 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

1019 i‡(
∫
 =
NULL
) {

1020 
Áûed
;

1023 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

1025 #i‡(
NGX_HAVE_INET6
)

1026 
AF_INET6
:

1027 
∫
->
addr6
 = 
sö6
->
sö6_addr
;

1028 
∫
->
node
.
key
 = 
hash
;

1033 
∫
->
node
.
key
 = 
addr
;

1036 
∫
->
quîy
 = 
NULL
;

1037 #i‡(
NGX_HAVE_INET6
)

1038 
∫
->
quîy6
 = 
NULL
;

1041 
	`ngx_rbåì_ö£π
(
åì
, &
∫
->
node
);

1044 i‡(
	`ngx_ªsﬁvî_¸óã_addr_quîy
(
r
, 
∫
, &
˘x
->
addr
Ë!
NGX_OK
) {

1045 
Áûed
;

1048 
∫
->
œ°_c⁄√˘i⁄
 = 
r
->last_connection++;

1049 i‡(
r
->
œ°_c⁄√˘i⁄
 =r->
c⁄√˘i⁄s
.
√…s
) {

1050 
r
->
œ°_c⁄√˘i⁄
 = 0;

1053 
∫
->
«ddrs
 = (
u_sh‹t
) -1;

1054 
∫
->
t˝
 = 0;

1055 #i‡(
NGX_HAVE_INET6
)

1056 
∫
->
«ddrs6
 = (
u_sh‹t
) -1;

1057 
∫
->
t˝6
 = 0;

1059 
∫
->
n§vs
 = 0;

1061 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

1065 
∫
->
œ°_c⁄√˘i⁄
++;

1066 i‡(
∫
->
œ°_c⁄√˘i⁄
 =
r
->
c⁄√˘i⁄s
.
√…s
) {

1067 
∫
->
œ°_c⁄√˘i⁄
 = 0;

1070 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

1073 i‡(
	`ngx_ªsﬁvî_£t_timeout
(
r
, 
˘x
Ë!
NGX_OK
) {

1074 
Áûed
;

1077 i‡(
	`ngx_ªsﬁvî_ª£nd_em±y
(
r
)) {

1078 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

1081 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

1083 
	`ngx_queue_ö£π_hód
(
ª£nd_queue
, &
∫
->
queue
);

1085 
∫
->
code
 = 0;

1086 
∫
->
˙Àn
 = 0;

1087 
∫
->
«me
 = 
NULL
;

1088 
∫
->
∆í
 = 0;

1089 
∫
->
vÆid
 = 0;

1090 
∫
->
âl
 = 
NGX_MAX_UINT32_VALUE
;

1091 
∫
->
waôög
 = 
˘x
;

1095 
˘x
->
°©e
 = 
NGX_AGAIN
;

1096 
˘x
->
async
 = 1;

1097 
˘x
->
node
 = 
∫
;

1099  
NGX_OK
;

1101 
Áûed
:

1103 i‡(
∫
) {

1104 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1106 i‡(
∫
->
quîy
) {

1107 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1110 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

1115 i‡(
˘x
->
evít
) {

1116 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

1119 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

1121  
NGX_ERROR
;

1122 
	}
}

1126 
	$ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1128 
ngx_queue_t
 *
expúe_queue
;

1129 
ngx_rbåì_t
 *
åì
;

1130 
ngx_ªsﬁvî_t
 *
r
;

1131 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

1132 
ngx_ªsﬁvî_node_t
 *
∫
;

1134 
r
 = 
˘x
->
ªsﬁvî
;

1136 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

1138 #i‡(
NGX_HAVE_INET6
)

1139 
AF_INET6
:

1140 
åì
 = &
r
->
addr6_rbåì
;

1141 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

1146 
åì
 = &
r
->
addr_rbåì
;

1147 
expúe_queue
 = &
r
->
addr_expúe_queue
;

1150 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1151 "ªsﬁvêadd∏d⁄e: %i", 
˘x
->
°©e
);

1153 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

1154 
	`ngx_dñ_timî
(
˘x
->
evít
);

1159 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

1161 
∫
 = 
˘x
->
node
;

1163 i‡(
∫
) {

1164 
p
 = &
∫
->
waôög
;

1165 
w
 = 
∫
->
waôög
;

1167 
w
) {

1168 i‡(
w
 =
˘x
) {

1169 *
p
 = 
w
->
√xt
;

1171 
d⁄e
;

1174 
p
 = &
w
->
√xt
;

1175 
w
 = w->
√xt
;

1180 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

1181 
ngx_°r_t
 
addπext
;

1183 
addπext
.
d©a
 = 
ãxt
;

1184 
addπext
.
Àn
 = 
	`ngx_sock_¡›
(
˘x
->
addr
.
sockaddr
, ctx->addr.
sockÀn
,

1185 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

1187 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

1188 "couldÇŸ c™˚»%VÑesﬁvög", &
addπext
);

1192 
d⁄e
:

1194 
	`ngx_ªsﬁvî_expúe
(
r
, 
åì
, 
expúe_queue
);

1200 i‡(
˘x
->
evít
) {

1201 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

1204 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

1208 i‡(
r
->
evít
->
timî_£t
 && 
	`ngx_ªsﬁvî_ª£nd_em±y
(r)) {

1209 
	`ngx_dñ_timî
(
r
->
evít
);

1211 
	}
}

1215 
	$ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

1217 
time_t
 
now
;

1218 
ngx_uöt_t
 
i
;

1219 
ngx_queue_t
 *
q
;

1220 
ngx_ªsﬁvî_node_t
 *
∫
;

1222 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolverÉxpire");

1224 
now
 = 
	`ngx_time
();

1226 
i
 = 0; i < 2; i++) {

1227 i‡(
	`ngx_queue_em±y
(
queue
)) {

1231 
q
 = 
	`ngx_queue_œ°
(
queue
);

1233 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1235 i‡(
now
 <
∫
->
expúe
) {

1239 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1240 "ªsﬁvîÉxpúê\"%*s\"", (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

1242 
	`ngx_queue_ªmove
(
q
);

1244 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1246 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1248 
	}
}

1251 
ngx_öt_t


1252 
	$ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

1254 
ngx_öt_t
 
rc
;

1255 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

1257 
ªc
 = 
r
->
c⁄√˘i⁄s
.
ñts
;

1258 
ªc
 = &ªc[
∫
->
œ°_c⁄√˘i⁄
];

1260 i‡(
ªc
->
log
.
h™dÀr
 =
NULL
) {

1261 
ªc
->
log
 = *
r
->log;

1262 
ªc
->
log
.
h™dÀr
 = 
ngx_ªsﬁvî_log_îr‹
;

1263 
ªc
->
log
.
d©a
 =Ñec;

1264 
ªc
->
log
.
a˘i⁄
 = "resolving";

1267 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1268 
rc
 = 
∫
->
t˝
 ? 
	`ngx_ªsﬁvî_£nd_t˝_quîy
(
r
, 
ªc
,Ñn->
quîy
,Ñn->
qÀn
)

1269 : 
	`ngx_ªsﬁvî_£nd_udp_quîy
(
r
, 
ªc
, 
∫
->
quîy
,Ñn->
qÀn
);

1271 i‡(
rc
 !
NGX_OK
) {

1272  
rc
;

1276 #i‡(
NGX_HAVE_INET6
)

1278 i‡(
∫
->
quîy6
 &&Ñn->
«ddrs6
 =(
u_sh‹t
) -1) {

1279 
rc
 = 
∫
->
t˝6


1280 ? 
	`ngx_ªsﬁvî_£nd_t˝_quîy
(
r
, 
ªc
, 
∫
->
quîy6
,Ñn->
qÀn
)

1281 : 
	`ngx_ªsﬁvî_£nd_udp_quîy
(
r
, 
ªc
, 
∫
->
quîy6
,Ñn->
qÀn
);

1283 i‡(
rc
 !
NGX_OK
) {

1284  
rc
;

1290  
NGX_OK
;

1291 
	}
}

1294 
ngx_öt_t


1295 
	$ngx_ªsﬁvî_£nd_udp_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
,

1296 
u_ch¨
 *
quîy
, 
u_sh‹t
 
qÀn
)

1298 
ssize_t
 
n
;

1300 i‡(
ªc
->
udp
 =
NULL
) {

1301 i‡(
	`ngx_udp_c⁄√˘
(
ªc
Ë!
NGX_OK
) {

1302  
NGX_ERROR
;

1305 
ªc
->
udp
->
d©a
 =Ñec;

1306 
ªc
->
udp
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_udp_ªad
;

1307 
ªc
->
udp
->
ªad
->
ªsﬁvî
 = 1;

1310 
n
 = 
	`ngx_£nd
(
ªc
->
udp
, 
quîy
, 
qÀn
);

1312 i‡(
n
 =
NGX_ERROR
) {

1313 
Áûed
;

1316 i‡((
size_t
Ë
n
 !(size_tË
qÀn
) {

1317 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
ªc
->
log
, 0, "send() incomplete");

1318 
Áûed
;

1321  
NGX_OK
;

1323 
Áûed
:

1325 
	`ngx_˛o£_c⁄√˘i⁄
(
ªc
->
udp
);

1326 
ªc
->
udp
 = 
NULL
;

1328  
NGX_ERROR
;

1329 
	}
}

1332 
ngx_öt_t


1333 
	$ngx_ªsﬁvî_£nd_t˝_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
,

1334 
u_ch¨
 *
quîy
, 
u_sh‹t
 
qÀn
)

1336 
ngx_buf_t
 *
b
;

1337 
ngx_öt_t
 
rc
;

1339 
rc
 = 
NGX_OK
;

1341 i‡(
ªc
->
t˝
 =
NULL
) {

1342 
b
 = 
ªc
->
ªad_buf
;

1344 i‡(
b
 =
NULL
) {

1345 
b
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_buf_t
));

1346 i‡(
b
 =
NULL
) {

1347  
NGX_ERROR
;

1350 
b
->
°¨t
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
NGX_RESOLVER_TCP_RSIZE
);

1351 i‡(
b
->
°¨t
 =
NULL
) {

1352 
	`ngx_ªsﬁvî_‰ì
(
r
, 
b
);

1353  
NGX_ERROR
;

1356 
b
->
íd
 = b->
°¨t
 + 
NGX_RESOLVER_TCP_RSIZE
;

1358 
ªc
->
ªad_buf
 = 
b
;

1361 
b
->
pos
 = b->
°¨t
;

1362 
b
->
œ°
 = b->
°¨t
;

1364 
b
 = 
ªc
->
wrôe_buf
;

1366 i‡(
b
 =
NULL
) {

1367 
b
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_buf_t
));

1368 i‡(
b
 =
NULL
) {

1369  
NGX_ERROR
;

1372 
b
->
°¨t
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
NGX_RESOLVER_TCP_WSIZE
);

1373 i‡(
b
->
°¨t
 =
NULL
) {

1374 
	`ngx_ªsﬁvî_‰ì
(
r
, 
b
);

1375  
NGX_ERROR
;

1378 
b
->
íd
 = b->
°¨t
 + 
NGX_RESOLVER_TCP_WSIZE
;

1380 
ªc
->
wrôe_buf
 = 
b
;

1383 
b
->
pos
 = b->
°¨t
;

1384 
b
->
œ°
 = b->
°¨t
;

1386 
rc
 = 
	`ngx_t˝_c⁄√˘
(
ªc
);

1387 i‡(
rc
 =
NGX_ERROR
) {

1388  
NGX_ERROR
;

1391 
ªc
->
t˝
->
d©a
 =Ñec;

1392 
ªc
->
t˝
->
wrôe
->
h™dÀr
 = 
ngx_ªsﬁvî_t˝_wrôe
;

1393 
ªc
->
t˝
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_t˝_ªad
;

1394 
ªc
->
t˝
->
ªad
->
ªsﬁvî
 = 1;

1396 
	`ngx_add_timî
(
ªc
->
t˝
->
wrôe
, (
ngx_m£c_t
Ë(
r
->
t˝_timeout
 * 1000));

1399 
b
 = 
ªc
->
wrôe_buf
;

1401 i‡(
b
->
íd
 - b->
œ°
 < 2 + 
qÀn
) {

1402 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
ªc
->
log
, 0, "buffer overflow");

1403  
NGX_ERROR
;

1406 *
b
->
œ°
++ = (
u_ch¨
Ë(
qÀn
 >> 8);

1407 *
b
->
œ°
++ = (
u_ch¨
Ë
qÀn
;

1408 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
quîy
, 
qÀn
);

1410 i‡(
rc
 =
NGX_OK
) {

1411 
	`ngx_ªsﬁvî_t˝_wrôe
(
ªc
->
t˝
->
wrôe
);

1414  
NGX_OK
;

1415 
	}
}

1419 
	$ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
)

1421 
time_t
 
timî
, 
©imî
, 
°imî
, 
¡imî
;

1422 #i‡(
NGX_HAVE_INET6
)

1423 
time_t
 
a6timî
;

1425 
ngx_ªsﬁvî_t
 *
r
;

1427 
r
 = 
ev
->
d©a
;

1429 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1434 
¡imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
«me_rbåì
, &r->
«me_ª£nd_queue
);

1436 
°imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
§v_rbåì
, &r->
§v_ª£nd_queue
);

1442 
©imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr_rbåì
, &r->
addr_ª£nd_queue
);

1446 #i‡(
NGX_HAVE_INET6
)

1450 
a6timî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr6_rbåì
, &r->
addr6_ª£nd_queue
);

1456 
timî
 = 
¡imî
;

1458 i‡(
timî
 == 0) {

1459 
timî
 = 
©imî
;

1461 } i‡(
©imî
) {

1462 
timî
 = 
	`ngx_mö
—imî, 
©imî
);

1465 i‡(
timî
 == 0) {

1466 
timî
 = 
°imî
;

1468 } i‡(
°imî
) {

1469 
timî
 = 
	`ngx_mö
—imî, 
°imî
);

1472 #i‡(
NGX_HAVE_INET6
)

1474 i‡(
timî
 == 0) {

1475 
timî
 = 
a6timî
;

1477 } i‡(
a6timî
) {

1478 
timî
 = 
	`ngx_mö
—imî, 
a6timî
);

1483 i‡(
timî
) {

1484 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë(
timî
 * 1000));

1486 
	}
}

1489 
time_t


1490 
	$ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

1492 
time_t
 
now
;

1493 
ngx_queue_t
 *
q
;

1494 
ngx_ªsﬁvî_node_t
 *
∫
;

1496 
now
 = 
	`ngx_time
();

1499 i‡(
	`ngx_queue_em±y
(
queue
)) {

1503 
q
 = 
	`ngx_queue_œ°
(
queue
);

1505 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1507 i‡(
now
 < 
∫
->
expúe
) {

1508  
∫
->
expúe
 - 
now
;

1511 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1513 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
,Ñn->
waôög
);

1515 
	`ngx_queue_ªmove
(
q
);

1517 i‡(
∫
->
waôög
) {

1519 i‡(++
∫
->
œ°_c⁄√˘i⁄
 =
r
->
c⁄√˘i⁄s
.
√…s
) {

1520 
∫
->
œ°_c⁄√˘i⁄
 = 0;

1523 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

1525 
∫
->
expúe
 = 
now
 + 
r
->
ª£nd_timeout
;

1527 
	`ngx_queue_ö£π_hód
(
queue
, 
q
);

1532 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1534 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1536 
	}
}

1539 
ngx_uöt_t


1540 
	$ngx_ªsﬁvî_ª£nd_em±y
(
ngx_ªsﬁvî_t
 *
r
)

1542  
	`ngx_queue_em±y
(&
r
->
«me_ª£nd_queue
)

1543 && 
	`ngx_queue_em±y
(&
r
->
§v_ª£nd_queue
)

1544 #i‡(
NGX_HAVE_INET6
)

1545 && 
	`ngx_queue_em±y
(&
r
->
addr6_ª£nd_queue
)

1547 && 
	`ngx_queue_em±y
(&
r
->
addr_ª£nd_queue
);

1548 
	}
}

1552 
	$ngx_ªsﬁvî_udp_ªad
(
ngx_evít_t
 *
ªv
)

1554 
ssize_t
 
n
;

1555 
ngx_c⁄√˘i⁄_t
 *
c
;

1556 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

1557 
u_ch¨
 
buf
[
NGX_RESOLVER_UDP_SIZE
];

1559 
c
 = 
ªv
->
d©a
;

1560 
ªc
 = 
c
->
d©a
;

1563 
n
 = 
	`ngx_udp_ªcv
(
c
, 
buf
, 
NGX_RESOLVER_UDP_SIZE
);

1565 i‡(
n
 < 0) {

1569 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ªc
->
ªsﬁvî
, 
buf
, 
n
, 0);

1571 } 
ªv
->
ªady
);

1572 
	}
}

1576 
	$ngx_ªsﬁvî_t˝_wrôe
(
ngx_evít_t
 *
wev
)

1578 
off_t
 
£¡
;

1579 
ssize_t
 
n
;

1580 
ngx_buf_t
 *
b
;

1581 
ngx_ªsﬁvî_t
 *
r
;

1582 
ngx_c⁄√˘i⁄_t
 *
c
;

1583 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

1585 
c
 = 
wev
->
d©a
;

1586 
ªc
 = 
c
->
d©a
;

1587 
b
 = 
ªc
->
wrôe_buf
;

1588 
r
 = 
ªc
->
ªsﬁvî
;

1590 i‡(
wev
->
timedout
) {

1591 
Áûed
;

1594 
£¡
 = 
c
->sent;

1596 
wev
->
ªady
 && 
b
->
pos
 < b->
œ°
) {

1597 
n
 = 
	`ngx_£nd
(
c
, 
b
->
pos
, b->
œ°
 - b->pos);

1599 i‡(
n
 =
NGX_AGAIN
) {

1603 i‡(
n
 =
NGX_ERROR
) {

1604 
Áûed
;

1607 
b
->
pos
 +
n
;

1610 i‡(
b
->
pos
 !b->
°¨t
) {

1611 
b
->
œ°
 = 
	`ngx_movemem
(b->
°¨t
, b->
pos
, b->last - b->pos);

1612 
b
->
pos
 = b->
°¨t
;

1615 i‡(
c
->
£¡
 != sent) {

1616 
	`ngx_add_timî
(
wev
, (
ngx_m£c_t
Ë(
r
->
t˝_timeout
 * 1000));

1619 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

1620 
Áûed
;

1625 
Áûed
:

1627 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1628 
ªc
->
t˝
 = 
NULL
;

1629 
	}
}

1633 
	$ngx_ªsﬁvî_t˝_ªad
(
ngx_evít_t
 *
ªv
)

1635 
u_ch¨
 *
p
;

1636 
size_t
 
size
;

1637 
ssize_t
 
n
;

1638 
u_sh‹t
 
qÀn
;

1639 
ngx_buf_t
 *
b
;

1640 
ngx_ªsﬁvî_t
 *
r
;

1641 
ngx_c⁄√˘i⁄_t
 *
c
;

1642 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

1644 
c
 = 
ªv
->
d©a
;

1645 
ªc
 = 
c
->
d©a
;

1646 
b
 = 
ªc
->
ªad_buf
;

1647 
r
 = 
ªc
->
ªsﬁvî
;

1649 
ªv
->
ªady
) {

1650 
n
 = 
	`ngx_ªcv
(
c
, 
b
->
œ°
, b->
íd
 - b->last);

1652 i‡(
n
 =
NGX_AGAIN
) {

1656 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

1657 
Áûed
;

1660 
b
->
œ°
 +
n
;

1663 
p
 = 
b
->
pos
;

1664 
size
 = 
b
->
œ°
 - 
p
;

1666 i‡(
size
 < 2) {

1670 
qÀn
 = (
u_sh‹t
Ë*
p
++ << 8;

1671 
qÀn
 +*
p
++;

1673 i‡(
size
 < (
size_t
Ë(2 + 
qÀn
)) {

1677 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
r
, 
p
, 
qÀn
, 1);

1679 
b
->
pos
 +2 + 
qÀn
;

1682 i‡(
b
->
pos
 !b->
°¨t
) {

1683 
b
->
œ°
 = 
	`ngx_movemem
(b->
°¨t
, b->
pos
, b->last - b->pos);

1684 
b
->
pos
 = b->
°¨t
;

1688 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1689 
Áûed
;

1694 
Áûed
:

1696 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1697 
ªc
->
t˝
 = 
NULL
;

1698 
	}
}

1702 
	$ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

1703 
ngx_uöt_t
 
t˝
)

1705 *
îr
;

1706 
ngx_uöt_t
 
i
, 
times
, 
idít
, 
qidít
, 
Êags
, 
code
, 
nqs
, 
«n
, 
åunc
,

1707 
qty≥
, 
q˛ass
;

1708 #i‡(
NGX_HAVE_INET6
)

1709 
ngx_uöt_t
 
qidít6
;

1711 
ngx_queue_t
 *
q
;

1712 
ngx_ªsﬁvî_qs_t
 *
qs
;

1713 
ngx_ªsﬁvî_hdr_t
 *
ª•⁄£
;

1714 
ngx_ªsﬁvî_node_t
 *
∫
;

1716 i‡(
n
 < (
ngx_ªsﬁvî_hdr_t
)) {

1717 
sh‹t_ª•⁄£
;

1720 
ª•⁄£
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
buf
;

1722 
idít
 = (
ª•⁄£
->
idít_hi
 << 8Ë+Ñe•⁄£->
idít_lo
;

1723 
Êags
 = (
ª•⁄£
->
Êags_hi
 << 8Ë+Ñe•⁄£->
Êags_lo
;

1724 
nqs
 = (
ª•⁄£
->
nqs_hi
 << 8Ë+Ñe•⁄£->
nqs_lo
;

1725 
«n
 = (
ª•⁄£
->
«n_hi
 << 8Ë+Ñe•⁄£->
«n_lo
;

1726 
åunc
 = 
Êags
 & 0x0200;

1728 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1730 
idít
, 
Êags
, 
nqs
, 
«n
,

1731 (
ª•⁄£
->
¬s_hi
 << 8Ë+Ñe•⁄£->
¬s_lo
,

1732 (
ª•⁄£
->
«r_hi
 << 8Ë+Ñe•⁄£->
«r_lo
);

1735 i‡((
Êags
 & 0xf870Ë!0x8000 || (
åunc
 && 
t˝
)) {

1736 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1738 
t˝
 ? "TCP" : "UDP", 
idít
, 
Êags
);

1742 
code
 = 
Êags
 & 0xf;

1744 i‡(
code
 =
NGX_RESOLVE_FORMERR
) {

1746 
times
 = 0;

1748 
q
 = 
	`ngx_queue_hód
(&
r
->
«me_ª£nd_queue
);

1749 
q
 !
	`ngx_queue_£¡öñ
(&
r
->
«me_ª£nd_queue
Ë&& 
times
++ < 100;

1750 
q
 = 
	`ngx_queue_√xt
(q))

1752 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1753 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1755 i‡(
qidít
 =
idít
) {

1756 
dns_îr‹_«me
;

1759 #i‡(
NGX_HAVE_INET6
)

1760 i‡(
∫
->
quîy6
) {

1761 
qidít6
 = (
∫
->
quîy6
[0] << 8) +Ñn->query6[1];

1763 i‡(
qidít6
 =
idít
) {

1764 
dns_îr‹_«me
;

1770 
dns_îr‹
;

1773 i‡(
code
 > 
NGX_RESOLVE_REFUSED
) {

1774 
dns_îr‹
;

1777 i‡(
nqs
 != 1) {

1778 
îr
 = "invalidÇumber of questions in DNSÑesponse";

1779 
d⁄e
;

1782 
i
 = (
ngx_ªsﬁvî_hdr_t
);

1784 
i
 < (
ngx_uöt_t
Ë
n
) {

1785 i‡(
buf
[
i
] == '\0') {

1786 
found
;

1789 
i
 +1 + 
buf
[i];

1792 
sh‹t_ª•⁄£
;

1794 
found
:

1796 i‡(
i
++ =(
ngx_ªsﬁvî_hdr_t
)) {

1797 
îr
 = "zero-length domainÇame in DNSÑesponse";

1798 
d⁄e
;

1801 i‡(
i
 + (
ngx_ªsﬁvî_qs_t
Ë+ 
«n
 * (2 + (
ngx_ªsﬁvî_™_t
))

1802 > (
ngx_uöt_t
Ë
n
)

1804 
sh‹t_ª•⁄£
;

1807 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë&
buf
[
i
];

1809 
qty≥
 = (
qs
->
ty≥_hi
 << 8Ë+ qs->
ty≥_lo
;

1810 
q˛ass
 = (
qs
->
˛ass_hi
 << 8Ë+ qs->
˛ass_lo
;

1812 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1813 "ªsﬁvî DNSÑe•⁄£ qt:%uò˛:%ui", 
qty≥
, 
q˛ass
);

1815 i‡(
q˛ass
 != 1) {

1816 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1817 "unknow¿quîy cœs†%uòö DNSÑe•⁄£", 
q˛ass
);

1821 
qty≥
) {

1823 
NGX_RESOLVE_A
:

1824 #i‡(
NGX_HAVE_INET6
)

1825 
NGX_RESOLVE_AAAA
:

1828 
	`ngx_ªsﬁvî_¥o˚ss_a
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
qty≥
, 
«n
, 
åunc
,

1829 
i
 + (
ngx_ªsﬁvî_qs_t
));

1833 
NGX_RESOLVE_SRV
:

1835 
	`ngx_ªsﬁvî_¥o˚ss_§v
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
, 
åunc
,

1836 
i
 + (
ngx_ªsﬁvî_qs_t
));

1840 
NGX_RESOLVE_PTR
:

1842 
	`ngx_ªsﬁvî_¥o˚ss_±r
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
);

1847 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1848 "unknow¿quîyÅy≥ %uòö DNSÑe•⁄£", 
qty≥
);

1854 
sh‹t_ª•⁄£
:

1856 
îr
 = "short DNSÑesponse";

1858 
d⁄e
:

1860 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1864 
dns_îr‹_«me
:

1866 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1868 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
,

1869 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

1872 
dns_îr‹
:

1874 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1876 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
);

1878 
	}
}

1882 
	$ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

1883 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
qty≥
,

1884 
ngx_uöt_t
 
«n
,Çgx_uöt_à
åunc
,Çgx_uöt_à
™s
)

1886 *
îr
;

1887 
u_ch¨
 *
˙ame
;

1888 
size_t
 
Àn
;

1889 
öt32_t
 
âl
;

1890 
uöt32_t
 
hash
;

1891 
ö_addr_t
 *
addr
;

1892 
ngx_°r_t
 
«me
;

1893 
ngx_uöt_t
 
ty≥
, 
˛ass
, 
qidít
, 
«ddrs
, 
a
, 
i
, 
j
, 
°¨t
;

1894 #i‡(
NGX_HAVE_INET6
)

1895 
ö6_addr
 *
addr6
;

1897 
ngx_ªsﬁvî_™_t
 *
™
;

1898 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1899 
ngx_ªsﬁvî_node_t
 *
∫
;

1900 
ngx_ªsﬁvî_addr_t
 *
addrs
;

1901 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

1903 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
,

1904 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
n
)

1905 !
NGX_OK
)

1910 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

1912 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

1916 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
«me
, 
hash
);

1918 i‡(
∫
 =
NULL
) {

1919 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1920 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1921 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1922 
Áûed
;

1925 
qty≥
) {

1927 #i‡(
NGX_HAVE_INET6
)

1928 
NGX_RESOLVE_AAAA
:

1930 i‡(
∫
->
quîy6
 =
NULL
 ||Ñn->
«ddrs6
 !(
u_sh‹t
) -1) {

1931 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1932 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1933 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1934 
Áûed
;

1937 i‡(
åunc
 && 
∫
->
t˝6
) {

1938 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1939 
Áûed
;

1942 
qidít
 = (
∫
->
quîy6
[0] << 8) +Ñn->query6[1];

1949 i‡(
∫
->
quîy
 =
NULL
 ||Ñn->
«ddrs
 !(
u_sh‹t
) -1) {

1950 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1951 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1952 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1953 
Áûed
;

1956 i‡(
åunc
 && 
∫
->
t˝
) {

1957 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1958 
Áûed
;

1961 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1964 i‡(
idít
 !
qidít
) {

1965 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1967 
idít
, &
«me
, 
qidít
);

1968 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1969 
Áûed
;

1972 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1974 i‡(
åunc
) {

1976 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1978 i‡(
∫
->
waôög
 =
NULL
) {

1979 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

1980 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1981 
√xt
;

1984 
ªc
 = 
r
->
c⁄√˘i⁄s
.
ñts
;

1985 
ªc
 = &ªc[
∫
->
œ°_c⁄√˘i⁄
];

1987 
qty≥
) {

1989 #i‡(
NGX_HAVE_INET6
)

1990 
NGX_RESOLVE_AAAA
:

1992 
∫
->
t˝6
 = 1;

1994 (Ë
	`ngx_ªsﬁvî_£nd_t˝_quîy
(
r
, 
ªc
, 
∫
->
quîy6
,Ñn->
qÀn
);

2001 
∫
->
t˝
 = 1;

2003 (Ë
	`ngx_ªsﬁvî_£nd_t˝_quîy
(
r
, 
ªc
, 
∫
->
quîy
,Ñn->
qÀn
);

2006 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

2008 
	`ngx_queue_ö£π_hód
(&
r
->
«me_ª£nd_queue
, &
∫
->
queue
);

2010 
√xt
;

2013 i‡(
code
 =0 && 
∫
->code) {

2014 
code
 = 
∫
->code;

2017 i‡(
code
 =0 && 
«n
 == 0) {

2019 #i‡(
NGX_HAVE_INET6
)

2020 
qty≥
) {

2022 
NGX_RESOLVE_AAAA
:

2024 
∫
->
«ddrs6
 = 0;

2026 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

2027 
√xt
;

2030 i‡(
∫
->
«ddrs
) {

2031 
exp‹t
;

2038 
∫
->
«ddrs
 = 0;

2040 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

2041 
√xt
;

2044 i‡(
∫
->
«ddrs6
) {

2045 
exp‹t
;

2050 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

2053 i‡(
code
) {

2055 #i‡(
NGX_HAVE_INET6
)

2056 
qty≥
) {

2058 
NGX_RESOLVE_AAAA
:

2060 
∫
->
«ddrs6
 = 0;

2062 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

2063 
∫
->
code
 = (
u_ch¨
) code;

2064 
√xt
;

2071 
∫
->
«ddrs
 = 0;

2073 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

2074 
∫
->
code
 = (
u_ch¨
) code;

2075 
√xt
;

2080 
√xt
 = 
∫
->
waôög
;

2081 
∫
->
waôög
 = 
NULL
;

2083 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2085 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

2089 
√xt
) {

2090 
˘x
 = 
√xt
;

2091 
˘x
->
°©e
 = 
code
;

2092 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

2093 
√xt
 = 
˘x
->next;

2095 
˘x
->
	`h™dÀr
(ctx);

2098 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

2103 
i
 = 
™s
;

2104 
«ddrs
 = 0;

2105 
˙ame
 = 
NULL
;

2107 
a
 = 0;á < 
«n
;á++) {

2109 
°¨t
 = 
i
;

2111 
i
 < 
n
) {

2113 i‡(
buf
[
i
] & 0xc0) {

2114 
i
 += 2;

2115 
found
;

2118 i‡(
buf
[
i
] == 0) {

2119 
i
++;

2120 
ã°_Àngth
;

2123 
i
 +1 + 
buf
[i];

2126 
sh‹t_ª•⁄£
;

2128 
ã°_Àngth
:

2130 i‡(
i
 - 
°¨t
 < 2) {

2131 
îr
 = "invalidÇame in DNSÑesponse";

2132 
övÆid
;

2135 
found
:

2137 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
n
) {

2138 
sh‹t_ª•⁄£
;

2141 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

2143 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

2144 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

2145 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

2146 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

2147 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

2149 i‡(
˛ass
 != 1) {

2150 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2151 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

2152 
Áûed
;

2155 i‡(
âl
 < 0) {

2156 
âl
 = 0;

2159 
∫
->
âl
 = 
	`ngx_mö
‘n->âl, (
uöt32_t
)Åtl);

2161 
i
 +(
ngx_ªsﬁvî_™_t
);

2163 
ty≥
) {

2165 
NGX_RESOLVE_A
:

2167 i‡(
qty≥
 !
NGX_RESOLVE_A
) {

2168 
îr
 = "unexpected AÑecord in DNSÑesponse";

2169 
övÆid
;

2172 i‡(
Àn
 != 4) {

2173 
îr
 = "invalid AÑecord in DNSÑesponse";

2174 
övÆid
;

2177 i‡(
i
 + 4 > 
n
) {

2178 
sh‹t_ª•⁄£
;

2181 
«ddrs
++;

2185 #i‡(
NGX_HAVE_INET6
)

2186 
NGX_RESOLVE_AAAA
:

2188 i‡(
qty≥
 !
NGX_RESOLVE_AAAA
) {

2189 
îr
 = "unexpected AAAAÑecord in DNSÑesponse";

2190 
övÆid
;

2193 i‡(
Àn
 != 16) {

2194 
îr
 = "invalid AAAAÑecord in DNSÑesponse";

2195 
övÆid
;

2198 i‡(
i
 + 16 > 
n
) {

2199 
sh‹t_ª•⁄£
;

2202 
«ddrs
++;

2207 
NGX_RESOLVE_CNAME
:

2209 
˙ame
 = &
buf
[
i
];

2213 
NGX_RESOLVE_DNAME
:

2219 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2220 "u√x≥˘ed RRÅy≥ %ui", 
ty≥
);

2223 
i
 +
Àn
;

2226 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

2228 
«ddrs
, 
˙ame
, 
∫
->
âl
);

2230 i‡(
«ddrs
) {

2232 
qty≥
) {

2234 #i‡(
NGX_HAVE_INET6
)

2235 
NGX_RESOLVE_AAAA
:

2237 i‡(
«ddrs
 == 1) {

2238 
addr6
 = &
∫
->
u6
.addr6;

2239 
∫
->
«ddrs6
 = 1;

2242 
addr6
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö6_addr
));

2243 i‡(
addr6
 =
NULL
) {

2244 
Áûed
;

2247 
∫
->
u6
.
addrs6
 = 
addr6
;

2248 
∫
->
«ddrs6
 = (
u_sh‹t
Ë
«ddrs
;

2251 #i‡(
NGX_SUPPRESS_WARN
)

2252 
addr
 = 
NULL
;

2260 i‡(
«ddrs
 == 1) {

2261 
addr
 = &
∫
->
u
.addr;

2262 
∫
->
«ddrs
 = 1;

2265 
addr
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö_addr_t
));

2266 i‡(
addr
 =
NULL
) {

2267 
Áûed
;

2270 
∫
->
u
.
addrs
 = 
addr
;

2271 
∫
->
«ddrs
 = (
u_sh‹t
)Çaddrs;

2274 #i‡(
NGX_HAVE_INET6
 && 
NGX_SUPPRESS_WARN
)

2275 
addr6
 = 
NULL
;

2279 
j
 = 0;

2280 
i
 = 
™s
;

2282 
a
 = 0;á < 
«n
;á++) {

2286 i‡(
buf
[
i
] & 0xc0) {

2287 
i
 += 2;

2291 i‡(
buf
[
i
] == 0) {

2292 
i
++;

2296 
i
 +1 + 
buf
[i];

2299 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

2301 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

2302 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

2304 
i
 +(
ngx_ªsﬁvî_™_t
);

2306 i‡(
ty≥
 =
NGX_RESOLVE_A
) {

2308 
addr
[
j
] = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

2309 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

2311 i‡(++
j
 =
«ddrs
) {

2313 #i‡(
NGX_HAVE_INET6
)

2314 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

2315 
√xt
;

2323 #i‡(
NGX_HAVE_INET6
)

2324 i‡(
ty≥
 =
NGX_RESOLVE_AAAA
) {

2326 
	`ngx_mem˝y
(
addr6
[
j
].
s6_addr
, &
buf
[
i
], 16);

2328 i‡(++
j
 =
«ddrs
) {

2330 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

2331 
√xt
;

2339 
i
 +
Àn
;

2343 
qty≥
) {

2345 #i‡(
NGX_HAVE_INET6
)

2346 
NGX_RESOLVE_AAAA
:

2348 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

2349 
∫
->
«ddrs6
 = 0;

2357 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

2358 
∫
->
«ddrs
 = 0;

2362 i‡(
∫
->
«ddrs
 !(
u_sh‹t
) -1

2363 #i‡(
NGX_HAVE_INET6
)

2364 && 
∫
->
«ddrs6
 !(
u_sh‹t
) -1

2366 && 
∫
->
«ddrs


2367 #i‡(
NGX_HAVE_INET6
)

2368 + 
∫
->
«ddrs6


2373 #i‡(
NGX_HAVE_INET6
)

2374 
exp‹t
:

2377 
«ddrs
 = 
∫
->naddrs;

2378 #i‡(
NGX_HAVE_INET6
)

2379 
«ddrs
 +
∫
->
«ddrs6
;

2382 i‡(
«ddrs
 =1 && 
∫
->naddrs == 1) {

2383 
addrs
 = 
NULL
;

2386 
addrs
 = 
	`ngx_ªsﬁvî_exp‹t
(
r
, 
∫
, 0);

2387 i‡(
addrs
 =
NULL
) {

2388 
Áûed
;

2392 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2394 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

2395 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

2397 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

2399 
√xt
 = 
∫
->
waôög
;

2400 
∫
->
waôög
 = 
NULL
;

2404 
√xt
) {

2405 
˘x
 = 
√xt
;

2406 
˘x
->
°©e
 = 
NGX_OK
;

2407 
˘x
->
vÆid
 = 
∫
->valid;

2408 
˘x
->
«ddrs
 =Çaddrs;

2410 i‡(
addrs
 =
NULL
) {

2411 
˘x
->
addrs
 = &˘x->
addr
;

2412 
˘x
->
addr
.
sockaddr
 = (sockadd∏*Ë&˘x->
sö
;

2413 
˘x
->
addr
.
sockÀn
 = (
sockaddr_ö
);

2414 
	`ngx_memzîo
(&
˘x
->
sö
, (
sockaddr_ö
));

2415 
˘x
->
sö
.
sö_Ámûy
 = 
AF_INET
;

2416 
˘x
->
sö
.
sö_addr
.
s_addr
 = 
∫
->
u
.
addr
;

2419 
˘x
->
addrs
 =áddrs;

2422 
√xt
 = 
˘x
->next;

2424 
˘x
->
	`h™dÀr
(ctx);

2427 i‡(
addrs
 !
NULL
) {

2428 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
->
sockaddr
);

2429 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

2432 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

2433 
∫
->
quîy
 = 
NULL
;

2434 #i‡(
NGX_HAVE_INET6
)

2435 
∫
->
quîy6
 = 
NULL
;

2441 i‡(
˙ame
) {

2445 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1

2446 #i‡(
NGX_HAVE_INET6
)

2447 || 
∫
->
«ddrs6
 =(
u_sh‹t
) -1

2451 
√xt
;

2454 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, bu‡+ 
n
Ë!
NGX_OK
) {

2455 
Áûed
;

2458 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

2459 "ªsﬁvî c«me:\"%V\"", &
«me
);

2461 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2463 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

2464 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

2466 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

2467 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

2469 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

2471 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

2472 
∫
->
quîy
 = 
NULL
;

2473 #i‡(
NGX_HAVE_INET6
)

2474 
∫
->
quîy6
 = 
NULL
;

2477 
˘x
 = 
∫
->
waôög
;

2478 
∫
->
waôög
 = 
NULL
;

2480 i‡(
˘x
) {

2482 i‡(
˘x
->
ªcursi⁄
++ >
NGX_RESOLVER_MAX_RECURSION
) {

2487 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

2488 
√xt
 = 
˘x
->next;

2490 
˘x
->
	`h™dÀr
(ctx);

2492 
˘x
 = 
√xt
;

2493 } 
˘x
);

2498 
√xt
 = 
˘x
;Çext;Çext =Çext->next) {

2499 
√xt
->
node
 = 
NULL
;

2502 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
, &
«me
);

2510 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2514 
sh‹t_ª•⁄£
:

2516 
îr
 = "short DNSÑesponse";

2518 
övÆid
:

2522 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

2526 
Áûed
:

2528 
√xt
:

2533 
	}
}

2537 
	$ngx_ªsﬁvî_¥o˚ss_§v
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

2538 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,

2539 
ngx_uöt_t
 
åunc
,Çgx_uöt_à
™s
)

2541 *
îr
;

2542 
u_ch¨
 *
˙ame
;

2543 
size_t
 
Àn
;

2544 
öt32_t
 
âl
;

2545 
uöt32_t
 
hash
;

2546 
ngx_°r_t
 
«me
;

2547 
ngx_uöt_t
 
ty≥
, 
qidít
, 
˛ass
, 
°¨t
, 
n§vs
, 
a
, 
i
, 
j
;

2548 
ngx_ªsﬁvî_™_t
 *
™
;

2549 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

2550 
ngx_ªsﬁvî_§v_t
 *
§vs
;

2551 
ngx_ªsﬁvî_node_t
 *
∫
;

2552 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

2554 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
,

2555 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
n
)

2556 !
NGX_OK
)

2561 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

2563 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

2565 
∫
 = 
	`ngx_ªsﬁvî_lookup_§v
(
r
, &
«me
, 
hash
);

2567 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

2568 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2569 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

2570 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

2571 
Áûed
;

2574 i‡(
åunc
 && 
∫
->
t˝
) {

2575 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

2576 
Áûed
;

2579 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

2581 i‡(
idít
 !
qidít
) {

2582 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2584 
idít
, &
«me
, 
qidít
);

2585 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

2586 
Áûed
;

2589 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

2591 i‡(
åunc
) {

2593 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2595 i‡(
∫
->
waôög
 =
NULL
) {

2596 
	`ngx_rbåì_dñëe
(&
r
->
§v_rbåì
, &
∫
->
node
);

2597 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

2601 
ªc
 = 
r
->
c⁄√˘i⁄s
.
ñts
;

2602 
ªc
 = &ªc[
∫
->
œ°_c⁄√˘i⁄
];

2604 
∫
->
t˝
 = 1;

2606 (Ë
	`ngx_ªsﬁvî_£nd_t˝_quîy
(
r
, 
ªc
, 
∫
->
quîy
,Ñn->
qÀn
);

2608 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

2610 
	`ngx_queue_ö£π_hód
(&
r
->
§v_ª£nd_queue
, &
∫
->
queue
);

2615 i‡(
code
 =0 && 
∫
->code) {

2616 
code
 = 
∫
->code;

2619 i‡(
code
 =0 && 
«n
 == 0) {

2620 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

2623 i‡(
code
) {

2624 
√xt
 = 
∫
->
waôög
;

2625 
∫
->
waôög
 = 
NULL
;

2627 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2629 
	`ngx_rbåì_dñëe
(&
r
->
§v_rbåì
, &
∫
->
node
);

2631 
√xt
) {

2632 
˘x
 = 
√xt
;

2633 
˘x
->
°©e
 = 
code
;

2634 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

2635 
√xt
 = 
˘x
->next;

2637 
˘x
->
	`h™dÀr
(ctx);

2640 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

2645 
i
 = 
™s
;

2646 
n§vs
 = 0;

2647 
˙ame
 = 
NULL
;

2649 
a
 = 0;á < 
«n
;á++) {

2651 
°¨t
 = 
i
;

2653 
i
 < 
n
) {

2655 i‡(
buf
[
i
] & 0xc0) {

2656 
i
 += 2;

2657 
found
;

2660 i‡(
buf
[
i
] == 0) {

2661 
i
++;

2662 
ã°_Àngth
;

2665 
i
 +1 + 
buf
[i];

2668 
sh‹t_ª•⁄£
;

2670 
ã°_Àngth
:

2672 i‡(
i
 - 
°¨t
 < 2) {

2673 
îr
 = "invalidÇame DNSÑesponse";

2674 
övÆid
;

2677 
found
:

2679 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
n
) {

2680 
sh‹t_ª•⁄£
;

2683 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

2685 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

2686 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

2687 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

2688 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

2689 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

2691 i‡(
˛ass
 != 1) {

2692 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2693 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

2694 
Áûed
;

2697 i‡(
âl
 < 0) {

2698 
âl
 = 0;

2701 
∫
->
âl
 = 
	`ngx_mö
‘n->âl, (
uöt32_t
)Åtl);

2703 
i
 +(
ngx_ªsﬁvî_™_t
);

2705 
ty≥
) {

2707 
NGX_RESOLVE_SRV
:

2709 i‡(
i
 + 6 > 
n
) {

2710 
sh‹t_ª•⁄£
;

2713 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, 
NULL
, 
buf
, &buf[
i
 + 6], bu‡+ 
n
)

2714 !
NGX_OK
)

2716 
Áûed
;

2719 
n§vs
++;

2723 
NGX_RESOLVE_CNAME
:

2725 
˙ame
 = &
buf
[
i
];

2729 
NGX_RESOLVE_DNAME
:

2735 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2736 "u√x≥˘ed RRÅy≥ %ui", 
ty≥
);

2739 
i
 +
Àn
;

2742 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

2744 
n§vs
, 
˙ame
, 
∫
->
âl
);

2746 i‡(
n§vs
) {

2748 
§vs
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n§vs
 * (
ngx_ªsﬁvî_§v_t
));

2749 i‡(
§vs
 =
NULL
) {

2750 
Áûed
;

2753 
∫
->
u
.
§vs
 = srvs;

2754 
∫
->
n§vs
 = (
u_sh‹t
)Çsrvs;

2756 
j
 = 0;

2757 
i
 = 
™s
;

2759 
a
 = 0;á < 
«n
;á++) {

2763 i‡(
buf
[
i
] & 0xc0) {

2764 
i
 += 2;

2768 i‡(
buf
[
i
] == 0) {

2769 
i
++;

2773 
i
 +1 + 
buf
[i];

2776 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

2778 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

2779 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

2781 
i
 +(
ngx_ªsﬁvî_™_t
);

2783 i‡(
ty≥
 =
NGX_RESOLVE_SRV
) {

2785 
§vs
[
j
].
¥i‹ôy
 = (
buf
[
i
] << 8) + buf[i + 1];

2786 
§vs
[
j
].
weight
 = (
buf
[
i
 + 2] << 8) + buf[i + 3];

2788 i‡(
§vs
[
j
].
weight
 == 0) {

2789 
§vs
[
j
].
weight
 = 1;

2792 
§vs
[
j
].
p‹t
 = (
buf
[
i
 + 4] << 8) + buf[i + 5];

2794 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
§vs
[
j
].
«me
, 
buf
, &buf[
i
 + 6],

2795 
buf
 + 
n
)

2796 !
NGX_OK
)

2798 
Áûed
;

2801 
j
++;

2804 
i
 +
Àn
;

2807 
	`ngx_s‹t
(
§vs
, 
n§vs
, (
ngx_ªsﬁvî_§v_t
),

2808 
ngx_ªsﬁvî_cmp_§vs
);

2810 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

2811 
∫
->
quîy
 = 
NULL
;

2813 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2815 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

2816 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

2818 
	`ngx_queue_ö£π_hód
(&
r
->
§v_expúe_queue
, &
∫
->
queue
);

2820 
√xt
 = 
∫
->
waôög
;

2821 
∫
->
waôög
 = 
NULL
;

2823 
√xt
) {

2824 
˘x
 = 
√xt
;

2825 
√xt
 = 
˘x
->next;

2827 
	`ngx_ªsﬁvî_ªsﬁve_§v_«mes
(
˘x
, 
∫
);

2833 
∫
->
n§vs
 = 0;

2835 i‡(
˙ame
) {

2839 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, bu‡+ 
n
Ë!
NGX_OK
) {

2840 
Áûed
;

2843 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

2844 "ªsﬁvî c«me:\"%V\"", &
«me
);

2846 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2848 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

2849 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

2851 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

2852 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

2854 
	`ngx_queue_ö£π_hód
(&
r
->
§v_expúe_queue
, &
∫
->
queue
);

2856 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

2857 
∫
->
quîy
 = 
NULL
;

2858 #i‡(
NGX_HAVE_INET6
)

2859 
∫
->
quîy6
 = 
NULL
;

2862 
˘x
 = 
∫
->
waôög
;

2863 
∫
->
waôög
 = 
NULL
;

2865 i‡(
˘x
) {

2867 i‡(
˘x
->
ªcursi⁄
++ >
NGX_RESOLVER_MAX_RECURSION
) {

2872 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

2873 
√xt
 = 
˘x
->next;

2875 
˘x
->
	`h™dÀr
(ctx);

2877 
˘x
 = 
√xt
;

2878 } 
˘x
);

2883 
√xt
 = 
˘x
;Çext;Çext =Çext->next) {

2884 
√xt
->
node
 = 
NULL
;

2887 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
, &
«me
);

2895 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, "no SRVÅype in DNSÑesponse");

2899 
sh‹t_ª•⁄£
:

2901 
îr
 = "short DNSÑesponse";

2903 
övÆid
:

2907 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

2911 
Áûed
:

2916 
	}
}

2920 
	$ngx_ªsﬁvî_ªsﬁve_§v_«mes
(
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ngx_ªsﬁvî_node_t
 *
∫
)

2922 
ngx_uöt_t
 
i
;

2923 
ngx_ªsﬁvî_t
 *
r
;

2924 
ngx_ªsﬁvî_˘x_t
 *
c˘x
;

2925 
ngx_ªsﬁvî_§v_«me_t
 *
§vs
;

2927 
r
 = 
˘x
->
ªsﬁvî
;

2929 
˘x
->
node
 = 
NULL
;

2930 
˘x
->
°©e
 = 
NGX_OK
;

2931 
˘x
->
vÆid
 = 
∫
->valid;

2932 
˘x
->
cou¡
 = 
∫
->
n§vs
;

2934 
§vs
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
∫
->
n§vs
 * (
ngx_ªsﬁvî_§v_«me_t
));

2935 i‡(
§vs
 =
NULL
) {

2936 
Áûed
;

2939 
˘x
->
§vs
 = srvs;

2940 
˘x
->
n§vs
 = 
∫
->nsrvs;

2942 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

2943 
	`ngx_dñ_timî
(
˘x
->
evít
);

2946 
i
 = 0; i < (
ngx_uöt_t
Ë
∫
->
n§vs
; i++) {

2947 
§vs
[
i
].
«me
.
d©a
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
∫
->
u
.§vs[i].«me.
Àn
);

2948 i‡(
§vs
[
i
].
«me
.
d©a
 =
NULL
) {

2949 
Áûed
;

2952 
§vs
[
i
].
«me
.
Àn
 = 
∫
->
u
.srvs[i].name.len;

2953 
	`ngx_mem˝y
(
§vs
[
i
].
«me
.
d©a
, 
∫
->
u
.srvs[i].name.data,

2954 
§vs
[
i
].
«me
.
Àn
);

2956 
c˘x
 = 
	`ngx_ªsﬁve_°¨t
(
r
, 
NULL
);

2957 i‡(
c˘x
 =
NULL
) {

2958 
Áûed
;

2961 
c˘x
->
«me
 = 
§vs
[
i
].name;

2962 
c˘x
->
h™dÀr
 = 
ngx_ªsﬁvî_§v_«mes_h™dÀr
;

2963 
c˘x
->
d©a
 = 
˘x
;

2964 
c˘x
->
§vs
 = &§vs[
i
];

2965 
c˘x
->
timeout
 = 
˘x
->timeout;

2967 
§vs
[
i
].
¥i‹ôy
 = 
∫
->
u
.srvs[i].priority;

2968 
§vs
[
i
].
weight
 = 
∫
->
u
.srvs[i].weight;

2969 
§vs
[
i
].
p‹t
 = 
∫
->
u
.srvs[i].port;

2970 
§vs
[
i
].
˘x
 = 
c˘x
;

2972 i‡(
	`ngx_ªsﬁve_«me
(
c˘x
Ë=
NGX_ERROR
) {

2973 
§vs
[
i
].
˘x
 = 
NULL
;

2974 
Áûed
;

2980 
Áûed
:

2982 
˘x
->
°©e
 = 
NGX_ERROR
;

2983 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

2985 
˘x
->
	`h™dÀr
(ctx);

2986 
	}
}

2990 
	$ngx_ªsﬁvî_§v_«mes_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
c˘x
)

2992 
ngx_uöt_t
 
i
;

2993 
ngx_addr_t
 *
addrs
;

2994 
ngx_ªsﬁvî_t
 *
r
;

2995 
ngx_sockaddr_t
 *
sockaddr
;

2996 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

2997 
ngx_ªsﬁvî_§v_«me_t
 *
§v
;

2999 
r
 = 
c˘x
->
ªsﬁvî
;

3000 
˘x
 = 
c˘x
->
d©a
;

3001 
§v
 = 
c˘x
->
§vs
;

3003 
˘x
->
cou¡
--;

3004 
˘x
->
async
 |
c˘x
->async;

3006 
§v
->
˘x
 = 
NULL
;

3007 
§v
->
°©e
 = 
c˘x
->state;

3009 i‡(
c˘x
->
«ddrs
) {

3011 
˘x
->
vÆid
 = 
	`ngx_mö
(˘x->vÆid, 
c˘x
->valid);

3013 
addrs
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
c˘x
->
«ddrs
 * (
ngx_addr_t
));

3014 i‡(
addrs
 =
NULL
) {

3015 
§v
->
°©e
 = 
NGX_ERROR
;

3016 
d⁄e
;

3019 
sockaddr
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
c˘x
->
«ddrs
 * (
ngx_sockaddr_t
));

3020 i‡(
sockaddr
 =
NULL
) {

3021 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

3022 
§v
->
°©e
 = 
NGX_ERROR
;

3023 
d⁄e
;

3026 
i
 = 0; i < 
c˘x
->
«ddrs
; i++) {

3027 
addrs
[
i
].
sockaddr
 = &sockaddr[i].sockaddr;

3028 
addrs
[
i
].
sockÀn
 = 
c˘x
->addrs[i].socklen;

3030 
	`ngx_mem˝y
(&
sockaddr
[
i
], 
c˘x
->
addrs
[i].sockaddr,

3031 
addrs
[
i
].
sockÀn
);

3033 
	`ngx_öë_£t_p‹t
(
addrs
[
i
].
sockaddr
, 
§v
->
p‹t
);

3036 
§v
->
addrs
 =áddrs;

3037 
§v
->
«ddrs
 = 
c˘x
->naddrs;

3040 
d⁄e
:

3042 
	`ngx_ªsﬁve_«me_d⁄e
(
c˘x
);

3044 i‡(
˘x
->
cou¡
 == 0) {

3045 
	`ngx_ªsﬁvî_ªp‹t_§v
(
r
, 
˘x
);

3047 
	}
}

3051 
	$ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

3052 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
)

3054 *
îr
;

3055 
size_t
 
Àn
;

3056 
ö_addr_t
 
addr
;

3057 
öt32_t
 
âl
;

3058 
ngx_öt_t
 
o˘ë
;

3059 
ngx_°r_t
 
«me
;

3060 
ngx_uöt_t
 
mask
, 
ty≥
, 
˛ass
, 
qidít
, 
a
, 
i
, 
°¨t
;

3061 
ngx_queue_t
 *
expúe_queue
;

3062 
ngx_rbåì_t
 *
åì
;

3063 
ngx_ªsﬁvî_™_t
 *
™
;

3064 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

3065 
ngx_ªsﬁvî_node_t
 *
∫
;

3066 #i‡(
NGX_HAVE_INET6
)

3067 
uöt32_t
 
hash
;

3068 
ngx_öt_t
 
digô
;

3069 
ö6_addr
 
addr6
;

3072 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
,

3073 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
n
)

3074 !
NGX_OK
)

3079 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

3083 
addr
 = 0;

3084 
i
 = (
ngx_ªsﬁvî_hdr_t
);

3086 
mask
 = 0; mask < 32; mask += 8) {

3087 
Àn
 = 
buf
[
i
++];

3089 
o˘ë
 = 
	`ngx_©oi
(&
buf
[
i
], 
Àn
);

3090 i‡(
o˘ë
 =
NGX_ERROR
 || octet > 255) {

3091 
övÆid_ö_addr_¨∑
;

3094 
addr
 +
o˘ë
 << 
mask
;

3095 
i
 +
Àn
;

3098 i‡(
	`ngx_°rˇ£cmp
(&
buf
[
i
], (
u_ch¨
 *) "\7in-addr\4arpa") == 0) {

3099 
i
 += ("\7in-addr\4arpa");

3103 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

3105 
åì
 = &
r
->
addr_rbåì
;

3106 
expúe_queue
 = &
r
->
addr_expúe_queue
;

3108 
vÆid
;

3111 
övÆid_ö_addr_¨∑
:

3113 #i‡(
NGX_HAVE_INET6
)

3115 
i
 = (
ngx_ªsﬁvî_hdr_t
);

3117 
o˘ë
 = 15; octet >= 0; octet--) {

3118 i‡(
buf
[
i
++] != '\1') {

3119 
övÆid_ù6_¨∑
;

3122 
digô
 = 
	`ngx_hextoi
(&
buf
[
i
++], 1);

3123 i‡(
digô
 =
NGX_ERROR
) {

3124 
övÆid_ù6_¨∑
;

3127 
addr6
.
s6_addr
[
o˘ë
] = (
u_ch¨
Ë
digô
;

3129 i‡(
buf
[
i
++] != '\1') {

3130 
övÆid_ù6_¨∑
;

3133 
digô
 = 
	`ngx_hextoi
(&
buf
[
i
++], 1);

3134 i‡(
digô
 =
NGX_ERROR
) {

3135 
övÆid_ù6_¨∑
;

3138 
addr6
.
s6_addr
[
o˘ë
] +(
u_ch¨
Ë(
digô
 * 16);

3141 i‡(
	`ngx_°rˇ£cmp
(&
buf
[
i
], (
u_ch¨
 *) "\3ip6\4arpa") == 0) {

3142 
i
 += ("\3ip6\4arpa");

3146 
hash
 = 
	`ngx_¸c32_sh‹t
(
addr6
.
s6_addr
, 16);

3147 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
addr6
, 
hash
);

3149 
åì
 = &
r
->
addr6_rbåì
;

3150 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

3152 
vÆid
;

3155 
övÆid_ù6_¨∑
:

3158 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

3160 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

3163 
vÆid
:

3165 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

3166 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

3167 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

3168 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

3169 
Áûed
;

3172 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

3174 i‡(
idít
 !
qidít
) {

3175 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

3177 
idít
, &
«me
, 
qidít
);

3178 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

3179 
Áûed
;

3182 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

3184 i‡(
code
 =0 && 
«n
 == 0) {

3185 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

3188 i‡(
code
) {

3189 
√xt
 = 
∫
->
waôög
;

3190 
∫
->
waôög
 = 
NULL
;

3192 
	`ngx_queue_ªmove
(&
∫
->
queue
);

3194 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

3198 
√xt
) {

3199 
˘x
 = 
√xt
;

3200 
˘x
->
°©e
 = 
code
;

3201 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

3202 
√xt
 = 
˘x
->next;

3204 
˘x
->
	`h™dÀr
(ctx);

3207 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

3212 
i
 +(
ngx_ªsﬁvî_qs_t
);

3214 
a
 = 0;á < 
«n
;á++) {

3216 
°¨t
 = 
i
;

3218 
i
 < 
n
) {

3220 i‡(
buf
[
i
] & 0xc0) {

3221 
i
 += 2;

3222 
found
;

3225 i‡(
buf
[
i
] == 0) {

3226 
i
++;

3227 
ã°_Àngth
;

3230 
i
 +1 + 
buf
[i];

3233 
sh‹t_ª•⁄£
;

3235 
ã°_Àngth
:

3237 i‡(
i
 - 
°¨t
 < 2) {

3238 
îr
 = "invalidÇame in DNSÑesponse";

3239 
övÆid
;

3242 
found
:

3244 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
n
) {

3245 
sh‹t_ª•⁄£
;

3248 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

3250 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

3251 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

3252 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

3253 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

3254 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

3256 i‡(
˛ass
 != 1) {

3257 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

3258 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

3259 
Áûed
;

3262 i‡(
âl
 < 0) {

3263 
âl
 = 0;

3266 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

3268 
ty≥
, 
˛ass
, 
Àn
);

3270 
i
 +(
ngx_ªsﬁvî_™_t
);

3272 
ty≥
) {

3274 
NGX_RESOLVE_PTR
:

3276 
±r
;

3278 
NGX_RESOLVE_CNAME
:

3284 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

3285 "u√x≥˘ed RRÅy≥ %ui", 
ty≥
);

3288 
i
 +
Àn
;

3293 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

3297 
±r
:

3299 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, bu‡+ 
i
, bu‡+ 
n
Ë!
NGX_OK
) {

3300 
Áûed
;

3303 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvîán:%V", &
«me
);

3305 i‡(
«me
.
Àn
 !(
size_t
Ë
∫
->
∆í


3306 || 
	`ngx_°∫cmp
(
«me
.
d©a
, 
∫
->«me,Çame.
Àn
) != 0)

3308 i‡(
∫
->
∆í
) {

3309 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

3312 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
.
Àn
;

3313 
∫
->
«me
 =Çame.
d©a
;

3315 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Çame.
Àn
);

3316 i‡(
«me
.
d©a
 =
NULL
) {

3317 
Áûed
;

3321 
	`ngx_queue_ªmove
(&
∫
->
queue
);

3323 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

3324 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

3326 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

3328 
√xt
 = 
∫
->
waôög
;

3329 
∫
->
waôög
 = 
NULL
;

3333 
√xt
) {

3334 
˘x
 = 
√xt
;

3335 
˘x
->
°©e
 = 
NGX_OK
;

3336 
˘x
->
vÆid
 = 
∫
->valid;

3337 
˘x
->
«me
 =Çame;

3338 
√xt
 = 
˘x
->next;

3340 
˘x
->
	`h™dÀr
(ctx);

3343 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

3347 
sh‹t_ª•⁄£
:

3349 
îr
 = "short DNSÑesponse";

3351 
övÆid
:

3355 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

3359 
Áûed
:

3364 
	}
}

3367 
ngx_ªsﬁvî_node_t
 *

3368 
	$ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

3370 
ngx_öt_t
 
rc
;

3371 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

3372 
ngx_ªsﬁvî_node_t
 *
∫
;

3374 
node
 = 
r
->
«me_rbåì
.
roŸ
;

3375 
£¡öñ
 = 
r
->
«me_rbåì
.sentinel;

3377 
node
 !
£¡öñ
) {

3379 i‡(
hash
 < 
node
->
key
) {

3380 
node
 =Çode->
À·
;

3384 i‡(
hash
 > 
node
->
key
) {

3385 
node
 =Çode->
right
;

3391 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

3393 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

3395 i‡(
rc
 == 0) {

3396  
∫
;

3399 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

3404  
NULL
;

3405 
	}
}

3408 
ngx_ªsﬁvî_node_t
 *

3409 
	$ngx_ªsﬁvî_lookup_§v
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

3411 
ngx_öt_t
 
rc
;

3412 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

3413 
ngx_ªsﬁvî_node_t
 *
∫
;

3415 
node
 = 
r
->
§v_rbåì
.
roŸ
;

3416 
£¡öñ
 = 
r
->
§v_rbåì
.sentinel;

3418 
node
 !
£¡öñ
) {

3420 i‡(
hash
 < 
node
->
key
) {

3421 
node
 =Çode->
À·
;

3425 i‡(
hash
 > 
node
->
key
) {

3426 
node
 =Çode->
right
;

3432 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

3434 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

3436 i‡(
rc
 == 0) {

3437  
∫
;

3440 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

3445  
NULL
;

3446 
	}
}

3449 
ngx_ªsﬁvî_node_t
 *

3450 
	$ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 
addr
)

3452 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

3454 
node
 = 
r
->
addr_rbåì
.
roŸ
;

3455 
£¡öñ
 = 
r
->
addr_rbåì
.sentinel;

3457 
node
 !
£¡öñ
) {

3459 i‡(
addr
 < 
node
->
key
) {

3460 
node
 =Çode->
À·
;

3464 i‡(
addr
 > 
node
->
key
) {

3465 
node
 =Çode->
right
;

3471  
	`ngx_ªsﬁvî_node
(
node
);

3476  
NULL
;

3477 
	}
}

3480 #i‡(
NGX_HAVE_INET6
)

3482 
ngx_ªsﬁvî_node_t
 *

3483 
	$ngx_ªsﬁvî_lookup_addr6
(
ngx_ªsﬁvî_t
 *
r
, 
ö6_addr
 *
addr
,

3484 
uöt32_t
 
hash
)

3486 
ngx_öt_t
 
rc
;

3487 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

3488 
ngx_ªsﬁvî_node_t
 *
∫
;

3490 
node
 = 
r
->
addr6_rbåì
.
roŸ
;

3491 
£¡öñ
 = 
r
->
addr6_rbåì
.sentinel;

3493 
node
 !
£¡öñ
) {

3495 i‡(
hash
 < 
node
->
key
) {

3496 
node
 =Çode->
À·
;

3500 i‡(
hash
 > 
node
->
key
) {

3501 
node
 =Çode->
right
;

3507 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

3509 
rc
 = 
	`ngx_memcmp
(
addr
, &
∫
->
addr6
, 16);

3511 i‡(
rc
 == 0) {

3512  
∫
;

3515 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

3520  
NULL
;

3521 
	}
}

3527 
	$ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

3528 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

3530 
ngx_rbåì_node_t
 **
p
;

3531 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

3535 i‡(
node
->
key
 < 
ãmp
->key) {

3537 
p
 = &
ãmp
->
À·
;

3539 } i‡(
node
->
key
 > 
ãmp
->key) {

3541 
p
 = &
ãmp
->
right
;

3545 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

3546 
∫_ãmp
 = 
	`ngx_ªsﬁvî_node
(
ãmp
);

3548 
p
 = (
	`ngx_memn2cmp
(
∫
->
«me
, 
∫_ãmp
->«me,Ñn->
∆í
,Ñn_temp->nlen)

3549 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

3552 i‡(*
p
 =
£¡öñ
) {

3556 
ãmp
 = *
p
;

3559 *
p
 = 
node
;

3560 
node
->
∑ª¡
 = 
ãmp
;

3561 
node
->
À·
 = 
£¡öñ
;

3562 
node
->
right
 = 
£¡öñ
;

3563 
	`ngx_rbt_ªd
(
node
);

3564 
	}
}

3567 #i‡(
NGX_HAVE_INET6
)

3570 
	$ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

3571 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

3573 
ngx_rbåì_node_t
 **
p
;

3574 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

3578 i‡(
node
->
key
 < 
ãmp
->key) {

3580 
p
 = &
ãmp
->
À·
;

3582 } i‡(
node
->
key
 > 
ãmp
->key) {

3584 
p
 = &
ãmp
->
right
;

3588 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

3589 
∫_ãmp
 = 
	`ngx_ªsﬁvî_node
(
ãmp
);

3591 
p
 = (
	`ngx_memcmp
(&
∫
->
addr6
, &
∫_ãmp
->addr6, 16)

3592 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

3595 i‡(*
p
 =
£¡öñ
) {

3599 
ãmp
 = *
p
;

3602 *
p
 = 
node
;

3603 
node
->
∑ª¡
 = 
ãmp
;

3604 
node
->
À·
 = 
£¡öñ
;

3605 
node
->
right
 = 
£¡öñ
;

3606 
	`ngx_rbt_ªd
(
node
);

3607 
	}
}

3612 
ngx_öt_t


3613 
	$ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
,

3614 
ngx_°r_t
 *
«me
)

3616 
u_ch¨
 *
p
, *
s
;

3617 
size_t
 
Àn
, 
∆í
;

3618 
ngx_uöt_t
 
idít
;

3619 
ngx_ªsﬁvî_qs_t
 *
qs
;

3620 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

3622 
∆í
 = 
«me
->
Àn
 ? (1 +Çame->len + 1) : 1;

3624 
Àn
 = (
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

3626 #i‡(
NGX_HAVE_INET6
)

3627 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
,Ñ->
ùv6
 ? 
Àn
 * 2 :Üen);

3629 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

3631 i‡(
p
 =
NULL
) {

3632  
NGX_ERROR
;

3635 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

3636 
∫
->
quîy
 = 
p
;

3638 #i‡(
NGX_HAVE_INET6
)

3639 i‡(
r
->
ùv6
) {

3640 
∫
->
quîy6
 = 
p
 + 
Àn
;

3644 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

3646 
idít
 = 
	`ngx_øndom
();

3648 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

3649 "ªsﬁve: \"%V\" A %i", 
«me
, 
idít
 & 0xffff);

3651 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

3652 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

3655 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

3658 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

3659 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

3660 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

3661 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

3663 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

3665 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

3668 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = 
NGX_RESOLVE_A
;

3671 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

3675 
Àn
 = 0;

3676 
p
--;

3677 *
p
-- = '\0';

3679 i‡(
«me
->
Àn
 == 0) {

3680  
NGX_DECLINED
;

3683 
s
 = 
«me
->
d©a
 +Çame->
Àn
 - 1; s >=Çame->data; s--) {

3684 i‡(*
s
 != '.') {

3685 *
p
 = *
s
;

3686 
Àn
++;

3689 i‡(
Àn
 == 0 ||Üen > 255) {

3690  
NGX_DECLINED
;

3693 *
p
 = (
u_ch¨
Ë
Àn
;

3694 
Àn
 = 0;

3697 
p
--;

3700 i‡(
Àn
 == 0 ||Üen > 255) {

3701  
NGX_DECLINED
;

3704 *
p
 = (
u_ch¨
Ë
Àn
;

3706 #i‡(
NGX_HAVE_INET6
)

3707 i‡(!
r
->
ùv6
) {

3708  
NGX_OK
;

3711 
p
 = 
∫
->
quîy6
;

3713 
	`ngx_mem˝y
(
p
, 
∫
->
quîy
,Ñn->
qÀn
);

3715 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

3717 
idít
 = 
	`ngx_øndom
();

3719 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

3720 "ªsﬁve: \"%V\" AAAA %i", 
«me
, 
idít
 & 0xffff);

3722 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

3723 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

3725 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

3727 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

3729 
qs
->
ty≥_lo
 = 
NGX_RESOLVE_AAAA
;

3732  
NGX_OK
;

3733 
	}
}

3736 
ngx_öt_t


3737 
	$ngx_ªsﬁvî_¸óã_§v_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
,

3738 
ngx_°r_t
 *
«me
)

3740 
u_ch¨
 *
p
, *
s
;

3741 
size_t
 
Àn
, 
∆í
;

3742 
ngx_uöt_t
 
idít
;

3743 
ngx_ªsﬁvî_qs_t
 *
qs
;

3744 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

3746 
∆í
 = 
«me
->
Àn
 ? (1 +Çame->len + 1) : 1;

3748 
Àn
 = (
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

3750 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

3751 i‡(
p
 =
NULL
) {

3752  
NGX_ERROR
;

3755 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

3756 
∫
->
quîy
 = 
p
;

3758 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

3760 
idít
 = 
	`ngx_øndom
();

3762 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

3763 "ªsﬁve: \"%V\" SRV %i", 
«me
, 
idít
 & 0xffff);

3765 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

3766 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

3769 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

3772 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

3773 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

3774 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

3775 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

3777 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

3779 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

3782 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = 
NGX_RESOLVE_SRV
;

3785 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

3789 
Àn
 = 0;

3790 
p
--;

3791 *
p
-- = '\0';

3793 i‡(
«me
->
Àn
 == 0) {

3794  
NGX_DECLINED
;

3797 
s
 = 
«me
->
d©a
 +Çame->
Àn
 - 1; s >=Çame->data; s--) {

3798 i‡(*
s
 != '.') {

3799 *
p
 = *
s
;

3800 
Àn
++;

3803 i‡(
Àn
 == 0 ||Üen > 255) {

3804  
NGX_DECLINED
;

3807 *
p
 = (
u_ch¨
Ë
Àn
;

3808 
Àn
 = 0;

3811 
p
--;

3814 i‡(
Àn
 == 0 ||Üen > 255) {

3815  
NGX_DECLINED
;

3818 *
p
 = (
u_ch¨
Ë
Àn
;

3820  
NGX_OK
;

3821 
	}
}

3824 
ngx_öt_t


3825 
	$ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
,

3826 
ngx_ªsﬁvî_addr_t
 *
addr
)

3828 
u_ch¨
 *
p
, *
d
;

3829 
size_t
 
Àn
;

3830 
ö_addr_t
 
öaddr
;

3831 
ngx_öt_t
 
n
;

3832 
ngx_uöt_t
 
idít
;

3833 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

3834 
sockaddr_ö
 *
sö
;

3835 #i‡(
NGX_HAVE_INET6
)

3836 
sockaddr_ö6
 *
sö6
;

3839 
addr
->
sockaddr
->
ß_Ámûy
) {

3841 #i‡(
NGX_HAVE_INET6
)

3842 
AF_INET6
:

3843 
Àn
 = (
ngx_ªsﬁvî_hdr_t
)

3845 + (
ngx_ªsﬁvî_qs_t
);

3851 
Àn
 = (
ngx_ªsﬁvî_hdr_t
)

3853 + (
ngx_ªsﬁvî_qs_t
);

3856 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

3857 i‡(
p
 =
NULL
) {

3858  
NGX_ERROR
;

3861 
∫
->
quîy
 = 
p
;

3862 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

3864 
idít
 = 
	`ngx_øndom
();

3866 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

3867 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

3870 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

3873 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

3874 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

3875 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

3876 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

3878 
p
 +(
ngx_ªsﬁvî_hdr_t
);

3880 
addr
->
sockaddr
->
ß_Ámûy
) {

3882 #i‡(
NGX_HAVE_INET6
)

3883 
AF_INET6
:

3884 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

3886 
n
 = 15;Ç >= 0;Ç--) {

3887 
p
 = 
	`ngx_•rötf
(p, "\1%xd\1%xd",

3888 
sö6
->
sö6_addr
.
s6_addr
[
n
] & 0xf,

3889 (
sö6
->
sö6_addr
.
s6_addr
[
n
] >> 4) & 0xf);

3892 
p
 = 
	`ngx_˝ymem
(p, "\3ip6\4arpa\0", 10);

3899 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

3900 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

3902 
n
 = 0;Ç < 32;Ç += 8) {

3903 
d
 = 
	`ngx_•rötf
(&
p
[1], "%ud", (
öaddr
 >> 
n
) & 0xff);

3904 *
p
 = (
u_ch¨
Ë(
d
 - &p[1]);

3905 
p
 = 
d
;

3908 
p
 = 
	`ngx_˝ymem
(p, "\7in-addr\4arpa\0", 14);

3912 
p
 = 
	`ngx_˝ymem
(p, "\0\14\0\1", 4);

3914 
∫
->
qÀn
 = (
u_sh‹t
Ë(
p
 -Ñn->
quîy
);

3916  
NGX_OK
;

3917 
	}
}

3920 
ngx_öt_t


3921 
	$ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
buf
, u_ch¨ *
§c
,

3922 
u_ch¨
 *
œ°
)

3924 *
îr
;

3925 
u_ch¨
 *
p
, *
d°
;

3926 
ssize_t
 
Àn
;

3927 
ngx_uöt_t
 
i
, 
n
;

3929 
p
 = 
§c
;

3930 
Àn
 = -1;

3937 
i
 = 0; i < 128; i++) {

3938 
n
 = *
p
++;

3940 i‡(
n
 == 0) {

3941 
d⁄e
;

3944 i‡(
n
 & 0xc0) {

3945 
n
 = (“ & 0x3fË<< 8Ë+ *
p
;

3946 
p
 = &
buf
[
n
];

3949 
Àn
 +1 + 
n
;

3950 
p
 = &p[
n
];

3953 i‡(
p
 >
œ°
) {

3954 
îr
 = "name is out ofÑesponse";

3955 
övÆid
;

3959 
îr
 = "compressionÖointersÜoop";

3961 
övÆid
:

3963 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

3965  
NGX_ERROR
;

3967 
d⁄e
:

3969 i‡(
«me
 =
NULL
) {

3970  
NGX_OK
;

3973 i‡(
Àn
 == -1) {

3974 
	`ngx_°r_nuŒ
(
«me
);

3975  
NGX_OK
;

3978 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

3979 i‡(
d°
 =
NULL
) {

3980  
NGX_ERROR
;

3983 
«me
->
d©a
 = 
d°
;

3985 
n
 = *
§c
++;

3988 i‡(
n
 & 0xc0) {

3989 
n
 = (“ & 0x3fË<< 8Ë+ *
§c
;

3990 
§c
 = &
buf
[
n
];

3992 
n
 = *
§c
++;

3995 
	`ngx_°æow
(
d°
, 
§c
, 
n
);

3996 
d°
 +
n
;

3997 
§c
 +
n
;

3999 
n
 = *
§c
++;

4001 i‡(
n
 != 0) {

4002 *
d°
++ = '.';

4006 i‡(
n
 == 0) {

4007 
«me
->
Àn
 = 
d°
 -Çame->
d©a
;

4008  
NGX_OK
;

4011 
	}
}

4014 
ngx_öt_t


4015 
	$ngx_ªsﬁvî_£t_timeout
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

4017 i‡(
˘x
->
evít
 || ctx->
timeout
 == 0) {

4018  
NGX_OK
;

4021 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

4022 i‡(
˘x
->
evít
 =
NULL
) {

4023  
NGX_ERROR
;

4026 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

4027 
˘x
->
evít
->
d©a
 = ctx;

4028 
˘x
->
evít
->
log
 = 
r
->log;

4029 
˘x
->
evít
->
ˇn˚œbÀ
 = ctx->cancelable;

4030 
˘x
->
idít
 = -1;

4032 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

4034  
NGX_OK
;

4035 
	}
}

4039 
	$ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
)

4041 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

4043 
˘x
 = 
ev
->
d©a
;

4045 
˘x
->
°©e
 = 
NGX_RESOLVE_TIMEDOUT
;

4047 
˘x
->
	`h™dÀr
(ctx);

4048 
	}
}

4052 
	$ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

4054 
ngx_uöt_t
 
i
;

4058 i‡(
∫
->
quîy
) {

4059 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

4062 i‡(
∫
->
«me
) {

4063 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
«me
);

4066 i‡(
∫
->
˙Àn
) {

4067 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

4070 i‡(
∫
->
«ddrs
 > 1 &&Ñn->«ddr†!(
u_sh‹t
) -1) {

4071 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

4074 #i‡(
NGX_HAVE_INET6
)

4075 i‡(
∫
->
«ddrs6
 > 1 &&Ñn->«ddrs6 !(
u_sh‹t
) -1) {

4076 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u6
.
addrs6
);

4080 i‡(
∫
->
n§vs
) {

4081 
i
 = 0; i < (
ngx_uöt_t
Ë
∫
->
n§vs
; i++) {

4082 i‡(
∫
->
u
.
§vs
[
i
].
«me
.
d©a
) {

4083 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
§vs
[
i
].
«me
.
d©a
);

4087 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
§vs
);

4090 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
);

4093 
	}
}

4097 
	$ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

4099 
u_ch¨
 *
p
;

4103 
p
 = 
	`ngx_Æloc
(
size
, 
r
->
log
);

4107  
p
;

4108 
	}
}

4112 
	$ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

4114 
u_ch¨
 *
p
;

4116 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

4118 i‡(
p
) {

4119 
	`ngx_memzîo
(
p
, 
size
);

4122  
p
;

4123 
	}
}

4127 
	$ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

4131 
	`ngx_‰ì
(
p
);

4134 
	}
}

4138 
	$ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

4140 
	`ngx_‰ì
(
p
);

4141 
	}
}

4145 
	$ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
)

4147 *
d°
;

4149 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

4151 i‡(
d°
 =
NULL
) {

4152  
d°
;

4155 
	`ngx_mem˝y
(
d°
, 
§c
, 
size
);

4157  
d°
;

4158 
	}
}

4161 
ngx_ªsﬁvî_addr_t
 *

4162 
	$ngx_ªsﬁvî_exp‹t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
,

4163 
ngx_uöt_t
 
rŸ©e
)

4165 
ngx_uöt_t
 
d
, 
i
, 
j
, 
n
;

4166 
ö_addr_t
 *
addr
;

4167 
ngx_sockaddr_t
 *
sockaddr
;

4168 
sockaddr_ö
 *
sö
;

4169 
ngx_ªsﬁvî_addr_t
 *
d°
;

4170 #i‡(
NGX_HAVE_INET6
)

4171 
ö6_addr
 *
addr6
;

4172 
sockaddr_ö6
 *
sö6
;

4175 
n
 = 
∫
->
«ddrs
;

4176 #i‡(
NGX_HAVE_INET6
)

4177 
n
 +
∫
->
«ddrs6
;

4180 
d°
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n
 * (
ngx_ªsﬁvî_addr_t
));

4181 i‡(
d°
 =
NULL
) {

4182  
NULL
;

4185 
sockaddr
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n
 * (
ngx_sockaddr_t
));

4186 i‡(
sockaddr
 =
NULL
) {

4187 
	`ngx_ªsﬁvî_‰ì
(
r
, 
d°
);

4188  
NULL
;

4191 
i
 = 0;

4192 
d
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
n
 : 0;

4194 i‡(
∫
->
«ddrs
) {

4195 
j
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
∫
->
«ddrs
 : 0;

4197 
addr
 = (
∫
->
«ddrs
 =1Ë? &∫->
u
.add∏:Ñn->u.
addrs
;

4200 
sö
 = &
sockaddr
[
d
].
sockaddr_ö
;

4201 
sö
->
sö_Ámûy
 = 
AF_INET
;

4202 
sö
->
sö_addr
.
s_addr
 = 
addr
[
j
++];

4203 
d°
[
d
].
sockaddr
 = (sockadd∏*Ë
sö
;

4204 
d°
[
d
++].
sockÀn
 = (
sockaddr_ö
);

4206 i‡(
d
 =
n
) {

4207 
d
 = 0;

4210 i‡(
j
 =(
ngx_uöt_t
Ë
∫
->
«ddrs
) {

4211 
j
 = 0;

4213 } ++
i
 < (
ngx_uöt_t
Ë
∫
->
«ddrs
);

4216 #i‡(
NGX_HAVE_INET6
)

4217 i‡(
∫
->
«ddrs6
) {

4218 
j
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
∫
->
«ddrs6
 : 0;

4220 
addr6
 = (
∫
->
«ddrs6
 =1Ë? &∫->
u6
.addr6 :Ñn->u6.
addrs6
;

4223 
sö6
 = &
sockaddr
[
d
].
sockaddr_ö6
;

4224 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

4225 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
addr6
[
j
++].s6_addr, 16);

4226 
d°
[
d
].
sockaddr
 = (sockadd∏*Ë
sö6
;

4227 
d°
[
d
++].
sockÀn
 = (
sockaddr_ö6
);

4229 i‡(
d
 =
n
) {

4230 
d
 = 0;

4233 i‡(
j
 =
∫
->
«ddrs6
) {

4234 
j
 = 0;

4236 } ++
i
 < 
n
);

4240  
d°
;

4241 
	}
}

4245 
	$ngx_ªsﬁvî_ªp‹t_§v
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

4247 
ngx_uöt_t
 
«ddrs
, 
n§vs
, 
nw
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
, 
w
;

4248 
ngx_ªsﬁvî_addr_t
 *
addrs
;

4249 
ngx_ªsﬁvî_§v_«me_t
 *
§vs
;

4251 
§vs
 = 
˘x
->srvs;

4252 
n§vs
 = 
˘x
->nsrvs;

4254 
«ddrs
 = 0;

4256 
i
 = 0; i < 
n§vs
; i++) {

4257 i‡(
§vs
[
i
].
°©e
 =
NGX_ERROR
) {

4258 
˘x
->
°©e
 = 
NGX_ERROR
;

4259 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

4261 
˘x
->
	`h™dÀr
(ctx);

4265 
«ddrs
 +
§vs
[
i
].naddrs;

4268 i‡(
«ddrs
 == 0) {

4269 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

4270 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

4272 
˘x
->
	`h™dÀr
(ctx);

4276 
addrs
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
«ddrs
 * (
ngx_ªsﬁvî_addr_t
));

4277 i‡(
addrs
 =
NULL
) {

4278 
˘x
->
°©e
 = 
NGX_ERROR
;

4279 
˘x
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->valid ?Ñ->valid : 10);

4281 
˘x
->
	`h™dÀr
(ctx);

4285 
i
 = 0;

4286 
n
 = 0;

4289 
nw
 = 0;

4291 
j
 = 
i
; j < 
n§vs
; j++) {

4292 i‡(
§vs
[
j
].
¥i‹ôy
 !§vs[
i
].priority) {

4296 
nw
 +
§vs
[
j
].
«ddrs
 * srvs[j].
weight
;

4299 i‡(
nw
 == 0) {

4300 
√xt_§v
;

4303 
w
 = 
	`ngx_øndom
(Ë% 
nw
;

4305 
k
 = 
i
; k < 
j
; k++) {

4306 i‡(
w
 < 
§vs
[
k
].
«ddrs
 * srvs[k].
weight
) {

4310 
w
 -
§vs
[
k
].
«ddrs
 * srvs[k].
weight
;

4313 
l
 = 
i
;Ü < 
j
;Ü++) {

4315 
m
 = 0; m < 
§vs
[
k
].
«ddrs
; m++) {

4316 
addrs
[
n
].
sockÀn
 = 
§vs
[
k
].addrs[
m
].socklen;

4317 
addrs
[
n
].
sockaddr
 = 
§vs
[
k
].addrs[
m
].sockaddr;

4318 
addrs
[
n
].
«me
 = 
§vs
[
k
].name;

4319 
addrs
[
n
].
¥i‹ôy
 = 
§vs
[
k
].priority;

4320 
addrs
[
n
].
weight
 = 
§vs
[
k
].weight;

4321 
n
++;

4324 i‡(++
k
 =
j
) {

4325 
k
 = 
i
;

4329 
√xt_§v
:

4331 
i
 = 
j
;

4333 } 
i
 < 
˘x
->
n§vs
);

4335 
˘x
->
°©e
 = 
NGX_OK
;

4336 
˘x
->
addrs
 =áddrs;

4337 
˘x
->
«ddrs
 =Çaddrs;

4339 
˘x
->
	`h™dÀr
(ctx);

4341 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

4342 
	}
}

4346 
	$ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
)

4348 *
îr‹s
[] = {

4356 i‡(
îr
 > 0 &&Érr < 6) {

4357  
îr‹s
[
îr
 - 1];

4360 i‡(
îr
 =
NGX_RESOLVE_TIMEDOUT
) {

4365 
	}
}

4368 
u_ch¨
 *

4369 
	$ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

4371 
u_ch¨
 *
p
;

4372 
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
;

4374 
p
 = 
buf
;

4376 i‡(
log
->
a˘i⁄
) {

4377 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

4378 
Àn
 -
p
 - 
buf
;

4381 
ªc
 = 
log
->
d©a
;

4383 i‡(
ªc
) {

4384 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñesﬁvî: %V", &
ªc
->
£rvî
);

4387  
p
;

4388 
	}
}

4391 
ngx_öt_t


4392 
	$ngx_udp_c⁄√˘
(
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
)

4394 
rc
;

4395 
ngx_öt_t
 
evít
;

4396 
ngx_evít_t
 *
ªv
, *
wev
;

4397 
ngx_sockë_t
 
s
;

4398 
ngx_c⁄√˘i⁄_t
 *
c
;

4400 
s
 = 
	`ngx_sockë
(
ªc
->
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

4402 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 0, "UDP sockë %d", 
s
);

4404 i‡(
s
 =(
ngx_sockë_t
) -1) {

4405 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4406 
ngx_sockë_n
 " failed");

4407  
NGX_ERROR
;

4410 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
ªc
->
log
);

4412 i‡(
c
 =
NULL
) {

4413 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

4414 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4415 
ngx_˛o£_sockë_n
 " failed");

4418  
NGX_ERROR
;

4421 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

4422 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4423 
ngx_n⁄blockög_n
 " failed");

4425 
Áûed
;

4428 
ªv
 = 
c
->
ªad
;

4429 
wev
 = 
c
->
wrôe
;

4431 
ªv
->
log
 = &
ªc
->log;

4432 
wev
->
log
 = &
ªc
->log;

4434 
ªc
->
udp
 = 
c
;

4436 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

4438 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 0,

4439 "c⁄√˘Åÿ%V, fd:%d #%uA", &
ªc
->
£rvî
, 
s
, 
c
->
numbî
);

4441 
rc
 = 
	`c⁄√˘
(
s
, 
ªc
->
sockaddr
,Ñec->
sockÀn
);

4445 i‡(
rc
 == -1) {

4446 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4449 
Áûed
;

4453 
wev
->
ªady
 = 1;

4455 
evít
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) ?

4456  
NGX_CLEAR_EVENT
:

4457  
NGX_LEVEL_EVENT
;

4460 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

4461 
Áûed
;

4464  
NGX_OK
;

4466 
Áûed
:

4468 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

4469 
ªc
->
udp
 = 
NULL
;

4471  
NGX_ERROR
;

4472 
	}
}

4475 
ngx_öt_t


4476 
	$ngx_t˝_c⁄√˘
(
ngx_ªsﬁvî_c⁄√˘i⁄_t
 *
ªc
)

4478 
rc
;

4479 
ngx_öt_t
 
evít
;

4480 
ngx_îr_t
 
îr
;

4481 
ngx_uöt_t
 
Àvñ
;

4482 
ngx_sockë_t
 
s
;

4483 
ngx_evít_t
 *
ªv
, *
wev
;

4484 
ngx_c⁄√˘i⁄_t
 *
c
;

4486 
s
 = 
	`ngx_sockë
(
ªc
->
sockaddr
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

4488 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 0, "TCP sockë %d", 
s
);

4490 i‡(
s
 =(
ngx_sockë_t
) -1) {

4491 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4492 
ngx_sockë_n
 " failed");

4493  
NGX_ERROR
;

4496 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
ªc
->
log
);

4498 i‡(
c
 =
NULL
) {

4499 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

4500 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4501 
ngx_˛o£_sockë_n
 " failed");

4504  
NGX_ERROR
;

4507 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

4508 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4509 
ngx_n⁄blockög_n
 " failed");

4511 
Áûed
;

4514 
ªv
 = 
c
->
ªad
;

4515 
wev
 = 
c
->
wrôe
;

4517 
ªv
->
log
 = &
ªc
->log;

4518 
wev
->
log
 = &
ªc
->log;

4520 
ªc
->
t˝
 = 
c
;

4522 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

4524 i‡(
ngx_add_c⁄n
) {

4525 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

4526 
Áûed
;

4530 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 0,

4531 "c⁄√˘Åÿ%V, fd:%d #%uA", &
ªc
->
£rvî
, 
s
, 
c
->
numbî
);

4533 
rc
 = 
	`c⁄√˘
(
s
, 
ªc
->
sockaddr
,Ñec->
sockÀn
);

4535 i‡(
rc
 == -1) {

4536 
îr
 = 
ngx_sockë_î∫o
;

4539 i‡(
îr
 !
NGX_EINPROGRESS


4540 #i‡(
NGX_WIN32
)

4542 && 
îr
 !
NGX_EAGAIN


4546 i‡(
îr
 =
NGX_ECONNREFUSED


4547 #i‡(
NGX_LINUX
)

4552 || 
îr
 =
NGX_EAGAIN


4554 || 
îr
 =
NGX_ECONNRESET


4555 || 
îr
 =
NGX_ENETDOWN


4556 || 
îr
 =
NGX_ENETUNREACH


4557 || 
îr
 =
NGX_EHOSTDOWN


4558 || 
îr
 =
NGX_EHOSTUNREACH
)

4560 
Àvñ
 = 
NGX_LOG_ERR
;

4563 
Àvñ
 = 
NGX_LOG_CRIT
;

4566 
	`ngx_log_îr‹
(
Àvñ
, &
ªc
->
log
, 
îr
, "connect()Åo %V failed",

4567 &
ªc
->
£rvî
);

4569 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

4570 
ªc
->
t˝
 = 
NULL
;

4572  
NGX_ERROR
;

4576 i‡(
ngx_add_c⁄n
) {

4577 i‡(
rc
 == -1) {

4581  
NGX_AGAIN
;

4584 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 0, "connected");

4586 
wev
->
ªady
 = 1;

4588  
NGX_OK
;

4591 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

4593 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4594 "c⁄√˘(): %d", 
rc
);

4596 i‡(
	`ngx_blockög
(
s
) == -1) {

4597 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
ªc
->
log
, 
ngx_sockë_î∫o
,

4598 
ngx_blockög_n
 " failed");

4599 
Áûed
;

4609 
ªv
->
ªady
 = 1;

4610 
wev
->
ªady
 = 1;

4612  
NGX_OK
;

4615 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

4619 
evít
 = 
NGX_CLEAR_EVENT
;

4625 
evít
 = 
NGX_LEVEL_EVENT
;

4628 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

4629 
Áûed
;

4632 i‡(
rc
 == -1) {

4636 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

4637 
Áûed
;

4640  
NGX_AGAIN
;

4643 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, &
ªc
->
log
, 0, "connected");

4645 
wev
->
ªady
 = 1;

4647  
NGX_OK
;

4649 
Áûed
:

4651 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

4652 
ªc
->
t˝
 = 
NULL
;

4654  
NGX_ERROR
;

4655 
	}
}

4658 
ngx_öt_t


4659 
	$ngx_ªsﬁvî_cmp_§vs
(c⁄° *
⁄e
, c⁄° *
two
)

4661 
ngx_öt_t
 
p1
, 
p2
;

4662 
ngx_ªsﬁvî_§v_t
 *
fú°
, *
£c⁄d
;

4664 
fú°
 = (
ngx_ªsﬁvî_§v_t
 *Ë
⁄e
;

4665 
£c⁄d
 = (
ngx_ªsﬁvî_§v_t
 *Ë
two
;

4667 
p1
 = 
fú°
->
¥i‹ôy
;

4668 
p2
 = 
£c⁄d
->
¥i‹ôy
;

4670  
p1
 - 
p2
;

4671 
	}
}

	@src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 #i‡(
NGX_HAVE_INET6
)

22 
	#NGX_RESOLVE_AAAA
 28

	)

24 
	#NGX_RESOLVE_SRV
 33

	)

25 
	#NGX_RESOLVE_DNAME
 39

	)

27 
	#NGX_RESOLVE_FORMERR
 1

	)

28 
	#NGX_RESOLVE_SERVFAIL
 2

	)

29 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

30 
	#NGX_RESOLVE_NOTIMP
 4

	)

31 
	#NGX_RESOLVE_REFUSED
 5

	)

32 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

35 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

37 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

40 
ngx_ªsﬁvî_s
 
	tngx_ªsﬁvî_t
;

44 
ngx_c⁄√˘i⁄_t
 *
	mudp
;

45 
ngx_c⁄√˘i⁄_t
 *
	mt˝
;

46 
sockaddr
 *
	msockaddr
;

47 
sockÀn_t
 
	msockÀn
;

48 
ngx_°r_t
 
	m£rvî
;

49 
ngx_log_t
 
	mlog
;

50 
ngx_buf_t
 *
	mªad_buf
;

51 
ngx_buf_t
 *
	mwrôe_buf
;

52 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

53 } 
	tngx_ªsﬁvî_c⁄√˘i⁄_t
;

56 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

58 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

62 
sockaddr
 *sockaddr;

63 
sockÀn_t
 
sockÀn
;

64 
ngx_°r_t
 
«me
;

65 
u_sh‹t
 
¥i‹ôy
;

66 
u_sh‹t
 
weight
;

67 } 
	tngx_ªsﬁvî_addr_t
;

71 
ngx_°r_t
 
«me
;

72 
u_sh‹t
 
¥i‹ôy
;

73 
u_sh‹t
 
weight
;

74 
u_sh‹t
 
p‹t
;

75 } 
	tngx_ªsﬁvî_§v_t
;

79 
ngx_°r_t
 
«me
;

80 
u_sh‹t
 
¥i‹ôy
;

81 
u_sh‹t
 
weight
;

82 
u_sh‹t
 
p‹t
;

84 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

85 
ngx_öt_t
 
°©e
;

87 
ngx_uöt_t
 
«ddrs
;

88 
ngx_addr_t
 *
addrs
;

89 } 
	tngx_ªsﬁvî_§v_«me_t
;

93 
ngx_rbåì_node_t
 
node
;

94 
ngx_queue_t
 
queue
;

97 
u_ch¨
 *
«me
;

99 #i‡(
NGX_HAVE_INET6
)

101 
ö6_addr
 
addr6
;

104 
u_sh‹t
 
∆í
;

105 
u_sh‹t
 
qÀn
;

107 
u_ch¨
 *
quîy
;

108 #i‡(
NGX_HAVE_INET6
)

109 
u_ch¨
 *
quîy6
;

113 
ö_addr_t
 
addr
;

114 
ö_addr_t
 *
addrs
;

115 
u_ch¨
 *
˙ame
;

116 
ngx_ªsﬁvî_§v_t
 *
§vs
;

117 } 
u
;

119 
u_ch¨
 
code
;

120 
u_sh‹t
 
«ddrs
;

121 
u_sh‹t
 
n§vs
;

122 
u_sh‹t
 
˙Àn
;

124 #i‡(
NGX_HAVE_INET6
)

126 
ö6_addr
 
addr6
;

127 
ö6_addr
 *
addrs6
;

128 } 
u6
;

130 
u_sh‹t
 
«ddrs6
;

133 
time_t
 
expúe
;

134 
time_t
 
vÆid
;

135 
uöt32_t
 
âl
;

137 
t˝
:1;

138 #i‡(
NGX_HAVE_INET6
)

139 
t˝6
:1;

142 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

144 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

145 } 
	tngx_ªsﬁvî_node_t
;

148 
	sngx_ªsﬁvî_s
 {

150 
ngx_evít_t
 *
evít
;

151 *
dummy
;

152 
ngx_log_t
 *
log
;

155 
ngx_öt_t
 
idít
;

158 
ngx_¨øy_t
 
c⁄√˘i⁄s
;

159 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

161 
ngx_rbåì_t
 
«me_rbåì
;

162 
ngx_rbåì_node_t
 
«me_£¡öñ
;

164 
ngx_rbåì_t
 
§v_rbåì
;

165 
ngx_rbåì_node_t
 
§v_£¡öñ
;

167 
ngx_rbåì_t
 
addr_rbåì
;

168 
ngx_rbåì_node_t
 
addr_£¡öñ
;

170 
ngx_queue_t
 
«me_ª£nd_queue
;

171 
ngx_queue_t
 
§v_ª£nd_queue
;

172 
ngx_queue_t
 
addr_ª£nd_queue
;

174 
ngx_queue_t
 
«me_expúe_queue
;

175 
ngx_queue_t
 
§v_expúe_queue
;

176 
ngx_queue_t
 
addr_expúe_queue
;

178 #i‡(
NGX_HAVE_INET6
)

179 
ngx_uöt_t
 
ùv6
;

180 
ngx_rbåì_t
 
addr6_rbåì
;

181 
ngx_rbåì_node_t
 
addr6_£¡öñ
;

182 
ngx_queue_t
 
addr6_ª£nd_queue
;

183 
ngx_queue_t
 
addr6_expúe_queue
;

186 
time_t
 
ª£nd_timeout
;

187 
time_t
 
t˝_timeout
;

188 
time_t
 
expúe
;

189 
time_t
 
vÆid
;

191 
ngx_uöt_t
 
log_Àvñ
;

195 
	sngx_ªsﬁvî_˘x_s
 {

196 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

197 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

198 
ngx_ªsﬁvî_node_t
 *
node
;

201 
ngx_öt_t
 
idít
;

203 
ngx_öt_t
 
°©e
;

204 
ngx_°r_t
 
«me
;

205 
ngx_°r_t
 
£rvi˚
;

207 
time_t
 
vÆid
;

208 
ngx_uöt_t
 
«ddrs
;

209 
ngx_ªsﬁvî_addr_t
 *
addrs
;

210 
ngx_ªsﬁvî_addr_t
 
addr
;

211 
sockaddr_ö
 
sö
;

213 
ngx_uöt_t
 
cou¡
;

214 
ngx_uöt_t
 
n§vs
;

215 
ngx_ªsﬁvî_§v_«me_t
 *
§vs
;

217 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

218 *
d©a
;

219 
ngx_m£c_t
 
timeout
;

221 
quick
:1;

222 
async
:1;

223 
ˇn˚œbÀ
:1;

224 
ngx_uöt_t
 
ªcursi⁄
;

225 
ngx_evít_t
 *
evít
;

229 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
,

230 
ngx_uöt_t
 
n
);

231 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

232 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

233 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

234 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

235 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

236 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

237 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@src/core/ngx_rwlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
	#NGX_RWLOCK_SPIN
 2048

	)

16 
	#NGX_RWLOCK_WLOCK
 ((
ngx_©omic_uöt_t
Ë-1)

	)

20 
	$ngx_rwlock_wlock
(
ngx_©omic_t
 *
lock
)

22 
ngx_uöt_t
 
i
, 
n
;

26 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
NGX_RWLOCK_WLOCK
)) {

30 i‡(
ngx_n˝u
 > 1) {

32 
n
 = 1;Ç < 
NGX_RWLOCK_SPIN
;Ç <<= 1) {

34 
i
 = 0; i < 
n
; i++) {

35 
	`ngx_˝u_∑u£
();

38 i‡(*
lock
 == 0

39 && 
	`ngx_©omic_cmp_£t
(
lock
, 0, 
NGX_RWLOCK_WLOCK
))

46 
	`ngx_sched_yõld
();

48 
	}
}

52 
	$ngx_rwlock_æock
(
ngx_©omic_t
 *
lock
)

54 
ngx_uöt_t
 
i
, 
n
;

55 
ngx_©omic_uöt_t
 
ªadîs
;

58 
ªadîs
 = *
lock
;

60 i‡(
ªadîs
 !
NGX_RWLOCK_WLOCK


61 && 
	`ngx_©omic_cmp_£t
(
lock
, 
ªadîs
,Ñeaders + 1))

66 i‡(
ngx_n˝u
 > 1) {

68 
n
 = 1;Ç < 
NGX_RWLOCK_SPIN
;Ç <<= 1) {

70 
i
 = 0; i < 
n
; i++) {

71 
	`ngx_˝u_∑u£
();

74 
ªadîs
 = *
lock
;

76 i‡(
ªadîs
 !
NGX_RWLOCK_WLOCK


77 && 
	`ngx_©omic_cmp_£t
(
lock
, 
ªadîs
,Ñeaders + 1))

84 
	`ngx_sched_yõld
();

86 
	}
}

90 
	$ngx_rwlock_u∆ock
(
ngx_©omic_t
 *
lock
)

92 
ngx_©omic_uöt_t
 
ªadîs
;

94 
ªadîs
 = *
lock
;

96 i‡(
ªadîs
 =
NGX_RWLOCK_WLOCK
) {

97 (Ë
	`ngx_©omic_cmp_£t
(
lock
, 
NGX_RWLOCK_WLOCK
, 0);

103 i‡(
	`ngx_©omic_cmp_£t
(
lock
, 
ªadîs
,Ñeaders - 1)) {

107 
ªadîs
 = *
lock
;

109 
	}
}

113 
	$ngx_rwlock_downgøde
(
ngx_©omic_t
 *
lock
)

115 i‡(*
lock
 =
NGX_RWLOCK_WLOCK
) {

116 *
lock
 = 1;

118 
	}
}

123 #i‡(
NGX_HTTP_UPSTREAM_ZONE
 || 
NGX_STREAM_UPSTREAM_ZONE
)

125 #îr‹ 
ngx_©omic_cmp_£t
(Ë
is
 
nŸ
 
deföed
!

	@src/core/ngx_rwlock.h

8 #i‚de‡
_NGX_RWLOCK_H_INCLUDED_


9 
	#_NGX_RWLOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rwlock_wlock
(
ngx_©omic_t
 *
lock
);

17 
ngx_rwlock_æock
(
ngx_©omic_t
 *
lock
);

18 
ngx_rwlock_u∆ock
(
ngx_©omic_t
 *
lock
);

19 
ngx_rwlock_downgøde
(
ngx_©omic_t
 *
lock
);

	@src/core/ngx_sha1.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_sha1.h
>

15 c⁄° 
u_ch¨
 *
ngx_sha1_body
(
ngx_sha1_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

16 
size_t
 
size
);

20 
	$ngx_sha1_öô
(
ngx_sha1_t
 *
˘x
)

22 
˘x
->
a
 = 0x67452301;

23 
˘x
->
b
 = 0xefcdab89;

24 
˘x
->
c
 = 0x98badcfe;

25 
˘x
->
d
 = 0x10325476;

26 
˘x
->
e
 = 0xc3d2e1f0;

28 
˘x
->
byãs
 = 0;

29 
	}
}

33 
	$ngx_sha1_upd©e
(
ngx_sha1_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

35 
size_t
 
u£d
, 
‰ì
;

37 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

38 
˘x
->
byãs
 +
size
;

40 i‡(
u£d
) {

41 
‰ì
 = 64 - 
u£d
;

43 i‡(
size
 < 
‰ì
) {

44 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

48 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

49 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

50 
size
 -
‰ì
;

51 (Ë
	`ngx_sha1_body
(
˘x
, ctx->
buf„r
, 64);

54 i‡(
size
 >= 64) {

55 
d©a
 = 
	`ngx_sha1_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

56 
size
 &= 0x3f;

59 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

60 
	}
}

64 
	$ngx_sha1_föÆ
(
u_ch¨
 
ªsu…
[20], 
ngx_sha1_t
 *
˘x
)

66 
size_t
 
u£d
, 
‰ì
;

68 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

70 
˘x
->
buf„r
[
u£d
++] = 0x80;

72 
‰ì
 = 64 - 
u£d
;

74 i‡(
‰ì
 < 8) {

75 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

76 (Ë
	`ngx_sha1_body
(
˘x
, ctx->
buf„r
, 64);

77 
u£d
 = 0;

78 
‰ì
 = 64;

81 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

83 
˘x
->
byãs
 <<= 3;

84 
˘x
->
buf„r
[56] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

85 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

86 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

87 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

88 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

89 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

90 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

91 
˘x
->
buf„r
[63] = (
u_ch¨
Ë˘x->
byãs
;

93 (Ë
	`ngx_sha1_body
(
˘x
, ctx->
buf„r
, 64);

95 
ªsu…
[0] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

96 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

97 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

98 
ªsu…
[3] = (
u_ch¨
Ë
˘x
->
a
;

99 
ªsu…
[4] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

100 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

101 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

102 
ªsu…
[7] = (
u_ch¨
Ë
˘x
->
b
;

103 
ªsu…
[8] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

104 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

105 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

106 
ªsu…
[11] = (
u_ch¨
Ë
˘x
->
c
;

107 
ªsu…
[12] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

108 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

109 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

110 
ªsu…
[15] = (
u_ch¨
Ë
˘x
->
d
;

111 
ªsu…
[16] = (
u_ch¨
Ë(
˘x
->
e
 >> 24);

112 
ªsu…
[17] = (
u_ch¨
Ë(
˘x
->
e
 >> 16);

113 
ªsu…
[18] = (
u_ch¨
Ë(
˘x
->
e
 >> 8);

114 
ªsu…
[19] = (
u_ch¨
Ë
˘x
->
e
;

116 
	`ngx_memzîo
(
˘x
, (*ctx));

117 
	}
}

124 
	#ROTATE
(
bôs
, 
w‹d
Ë(((w‹dË<< (bôs)Ë| ((w‹dË>> (32 - (bôs))))

	)

126 
	#F1
(
b
, 
c
, 
d
Ë(((bË& (c)Ë| ((~(b)Ë& (d)))

	)

127 
	#F2
(
b
, 
c
, 
d
Ë((bË^ (cË^ (d))

	)

128 
	#F3
(
b
, 
c
, 
d
Ë(((bË& (c)Ë| ((bË& (d)Ë| ((cË& (d)))

	)

130 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w
, 
t
) \

131 
ãmp
 = 
	`ROTATE
(5, (
a
)Ë+ 
	`f
((
b
), (
c
), (
d
)Ë+ (
e
Ë+ (
w
Ë+ (
t
); \

132 (
e
Ë(
d
); \

133 (
d
Ë(
c
); \

134 (
c
Ë
	`ROTATE
(30, (
b
)); \

135 (
b
Ë(
a
); \

136 (
a
Ë
ãmp
;

	)

144 
	#GET
(
n
) \

145 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] | \

146 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 8) | \

147 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 16) | \

148 ((
uöt32_t
Ë
p
[
n
 * 4] << 24))

	)

156 c⁄° 
u_ch¨
 *

157 
	$ngx_sha1_body
(
ngx_sha1_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

159 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
ãmp
;

160 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
, 
ßved_e
;

161 
uöt32_t
 
w‹ds
[80];

162 
ngx_uöt_t
 
i
;

163 c⁄° 
u_ch¨
 *
p
;

165 
p
 = 
d©a
;

167 
a
 = 
˘x
->a;

168 
b
 = 
˘x
->b;

169 
c
 = 
˘x
->c;

170 
d
 = 
˘x
->d;

171 
e
 = 
˘x
->e;

174 
ßved_a
 = 
a
;

175 
ßved_b
 = 
b
;

176 
ßved_c
 = 
c
;

177 
ßved_d
 = 
d
;

178 
ßved_e
 = 
e
;

182 
i
 = 0; i < 16; i++) {

183 
w‹ds
[
i
] = 
	`GET
(i);

186 
i
 = 16; i < 80; i++) {

187 
w‹ds
[
i
] = 
	`ROTATE
(1, words[i - 3] ^ words[i - 8] ^ words[i - 14]

188 ^ 
w‹ds
[
i
 - 16]);

193 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[0], 0x5a827999);

194 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[1], 0x5a827999);

195 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[2], 0x5a827999);

196 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[3], 0x5a827999);

197 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[4], 0x5a827999);

198 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[5], 0x5a827999);

199 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[6], 0x5a827999);

200 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[7], 0x5a827999);

201 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[8], 0x5a827999);

202 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[9], 0x5a827999);

203 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[10], 0x5a827999);

204 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[11], 0x5a827999);

205 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[12], 0x5a827999);

206 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[13], 0x5a827999);

207 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[14], 0x5a827999);

208 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[15], 0x5a827999);

209 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[16], 0x5a827999);

210 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[17], 0x5a827999);

211 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[18], 0x5a827999);

212 
	`STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[19], 0x5a827999);

214 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[20], 0x6ed9eba1);

215 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[21], 0x6ed9eba1);

216 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[22], 0x6ed9eba1);

217 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[23], 0x6ed9eba1);

218 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[24], 0x6ed9eba1);

219 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[25], 0x6ed9eba1);

220 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[26], 0x6ed9eba1);

221 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[27], 0x6ed9eba1);

222 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[28], 0x6ed9eba1);

223 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[29], 0x6ed9eba1);

224 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[30], 0x6ed9eba1);

225 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[31], 0x6ed9eba1);

226 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[32], 0x6ed9eba1);

227 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[33], 0x6ed9eba1);

228 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[34], 0x6ed9eba1);

229 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[35], 0x6ed9eba1);

230 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[36], 0x6ed9eba1);

231 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[37], 0x6ed9eba1);

232 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[38], 0x6ed9eba1);

233 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[39], 0x6ed9eba1);

235 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[40], 0x8f1bbcdc);

236 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[41], 0x8f1bbcdc);

237 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[42], 0x8f1bbcdc);

238 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[43], 0x8f1bbcdc);

239 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[44], 0x8f1bbcdc);

240 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[45], 0x8f1bbcdc);

241 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[46], 0x8f1bbcdc);

242 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[47], 0x8f1bbcdc);

243 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[48], 0x8f1bbcdc);

244 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[49], 0x8f1bbcdc);

245 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[50], 0x8f1bbcdc);

246 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[51], 0x8f1bbcdc);

247 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[52], 0x8f1bbcdc);

248 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[53], 0x8f1bbcdc);

249 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[54], 0x8f1bbcdc);

250 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[55], 0x8f1bbcdc);

251 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[56], 0x8f1bbcdc);

252 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[57], 0x8f1bbcdc);

253 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[58], 0x8f1bbcdc);

254 
	`STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[59], 0x8f1bbcdc);

256 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[60], 0xca62c1d6);

257 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[61], 0xca62c1d6);

258 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[62], 0xca62c1d6);

259 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[63], 0xca62c1d6);

260 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[64], 0xca62c1d6);

261 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[65], 0xca62c1d6);

262 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[66], 0xca62c1d6);

263 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[67], 0xca62c1d6);

264 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[68], 0xca62c1d6);

265 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[69], 0xca62c1d6);

266 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[70], 0xca62c1d6);

267 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[71], 0xca62c1d6);

268 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[72], 0xca62c1d6);

269 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[73], 0xca62c1d6);

270 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[74], 0xca62c1d6);

271 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[75], 0xca62c1d6);

272 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[76], 0xca62c1d6);

273 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[77], 0xca62c1d6);

274 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[78], 0xca62c1d6);

275 
	`STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
e
, 
w‹ds
[79], 0xca62c1d6);

277 
a
 +
ßved_a
;

278 
b
 +
ßved_b
;

279 
c
 +
ßved_c
;

280 
d
 +
ßved_d
;

281 
e
 +
ßved_e
;

283 
p
 += 64;

285 } 
size
 -= 64);

287 
˘x
->
a
 =á;

288 
˘x
->
b
 = b;

289 
˘x
->
c
 = c;

290 
˘x
->
d
 = d;

291 
˘x
->
e
 =É;

293  
p
;

294 
	}
}

	@src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
uöt64_t
 
	mbyãs
;

18 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
, 
	me
, 
	mf
;

19 
u_ch¨
 
	mbuf„r
[64];

20 } 
	tngx_sha1_t
;

23 
ngx_sha1_öô
(
ngx_sha1_t
 *
˘x
);

24 
ngx_sha1_upd©e
(
ngx_sha1_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

25 
ngx_sha1_föÆ
(
u_ch¨
 
ªsu…
[20], 
ngx_sha1_t
 *
˘x
);

	@src/core/ngx_shmtx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
);

18 
ngx_öt_t


19 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

21 
mtx
->
lock
 = &
addr
->lock;

23 i‡(
mtx
->
•ö
 =(
ngx_uöt_t
) -1) {

24  
NGX_OK
;

27 
mtx
->
•ö
 = 2048;

29 #i‡(
NGX_HAVE_POSIX_SEM
)

31 
mtx
->
waô
 = &
addr
->wait;

33 i‡(
	`£m_öô
(&
mtx
->
£m
, 1, 0) == -1) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

37 
mtx
->
£m≠h‹e
 = 1;

42  
NGX_OK
;

43 
	}
}

47 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

49 #i‡(
NGX_HAVE_POSIX_SEM
)

51 i‡(
mtx
->
£m≠h‹e
) {

52 i‡(
	`£m_de°roy
(&
mtx
->
£m
) == -1) {

53 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

59 
	}
}

62 
ngx_uöt_t


63 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

65  (*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
));

66 
	}
}

70 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

72 
ngx_uöt_t
 
i
, 
n
;

74 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtxÜock");

78 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

82 i‡(
ngx_n˝u
 > 1) {

84 
n
 = 1;Ç < 
mtx
->
•ö
;Ç <<= 1) {

86 
i
 = 0; i < 
n
; i++) {

87 
	`ngx_˝u_∑u£
();

90 i‡(*
mtx
->
lock
 == 0

91 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 0, 
ngx_pid
))

98 #i‡(
NGX_HAVE_POSIX_SEM
)

100 i‡(
mtx
->
£m≠h‹e
) {

101 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, 1);

103 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

104 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, -1);

108 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

109 "shmtx waô %uA", *
mtx
->
waô
);

111 
	`£m_waô
(&
mtx
->
£m
) == -1) {

112 
ngx_îr_t
 
îr
;

114 
îr
 = 
ngx_î∫o
;

116 i‡(
îr
 !
NGX_EINTR
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

123 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

131 
	`ngx_sched_yõld
();

133 
	}
}

137 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

139 i‡(
mtx
->
•ö
 !(
ngx_uöt_t
) -1) {

140 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtx unlock");

143 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
ngx_pid
, 0)) {

144 
	`ngx_shmtx_wakeup
(
mtx
);

146 
	}
}

149 
ngx_uöt_t


150 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

152 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

155 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
pid
, 0)) {

156 
	`ngx_shmtx_wakeup
(
mtx
);

161 
	}
}

165 
	$ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
)

167 #i‡(
NGX_HAVE_POSIX_SEM
)

168 
ngx_©omic_uöt_t
 
waô
;

170 i‡(!
mtx
->
£m≠h‹e
) {

176 
waô
 = *
mtx
->wait;

178 i‡((
ngx_©omic_öt_t
Ë
waô
 <= 0) {

182 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
waô
, wait, wait - 1)) {

187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

188 "shmtx wakê%uA", 
waô
);

190 i‡(
	`£m_po°
(&
mtx
->
£m
) == -1) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

196 
	}
}

202 
ngx_öt_t


203 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

205 i‡(
mtx
->
«me
) {

207 i‡(
	`ngx_°rcmp
(
«me
, 
mtx
->name) == 0) {

208 
mtx
->
«me
 =Çame;

209  
NGX_OK
;

212 
	`ngx_shmtx_de°roy
(
mtx
);

215 
mtx
->
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

216 
NGX_FILE_DEFAULT_ACCESS
);

218 i‡(
mtx
->
fd
 =
NGX_INVALID_FILE
) {

219 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

220 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

221  
NGX_ERROR
;

224 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

225 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

226 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

229 
mtx
->
«me
 =Çame;

231  
NGX_OK
;

232 
	}
}

236 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

238 i‡(
	`ngx_˛o£_fûe
(
mtx
->
fd
Ë=
NGX_FILE_ERROR
) {

239 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

240 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
mtx
->
«me
);

242 
	}
}

245 
ngx_uöt_t


246 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

248 
ngx_îr_t
 
îr
;

250 
îr
 = 
	`ngx_åylock_fd
(
mtx
->
fd
);

252 i‡(
îr
 == 0) {

256 i‡(
îr
 =
NGX_EAGAIN
) {

260 #i‡
__osf__


262 i‡(
îr
 =
NGX_EACCES
) {

268 
	`ngx_log_ab‹t
(
îr
, 
ngx_åylock_fd_n
 " %†Áûed", 
mtx
->
«me
);

271 
	}
}

275 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

277 
ngx_îr_t
 
îr
;

279 
îr
 = 
	`ngx_lock_fd
(
mtx
->
fd
);

281 i‡(
îr
 == 0) {

285 
	`ngx_log_ab‹t
(
îr
, 
ngx_lock_fd_n
 " %†Áûed", 
mtx
->
«me
);

286 
	}
}

290 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

292 
ngx_îr_t
 
îr
;

294 
îr
 = 
	`ngx_u∆ock_fd
(
mtx
->
fd
);

296 i‡(
îr
 == 0) {

300 
	`ngx_log_ab‹t
(
îr
, 
ngx_u∆ock_fd_n
 " %†Áûed", 
mtx
->
«me
);

301 
	}
}

304 
ngx_uöt_t


305 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

308 
	}
}

	@src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
ngx_©omic_t
 
	mlock
;

18 #i‡(
NGX_HAVE_POSIX_SEM
)

19 
ngx_©omic_t
 
	mwaô
;

21 } 
	tngx_shmtx_sh_t
;

25 #i‡(
NGX_HAVE_ATOMIC_OPS
)

26 
ngx_©omic_t
 *
	mlock
;

27 #i‡(
NGX_HAVE_POSIX_SEM
)

28 
ngx_©omic_t
 *
	mwaô
;

29 
ngx_uöt_t
 
	m£m≠h‹e
;

30 
£m_t
 
	m£m
;

33 
ngx_fd_t
 
	mfd
;

34 
u_ch¨
 *
	m«me
;

36 
ngx_uöt_t
 
	m•ö
;

37 } 
	tngx_shmtx_t
;

40 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
,

41 
u_ch¨
 *
«me
);

42 
ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
);

43 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

44 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

45 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

46 
ngx_uöt_t
 
ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
);

	@src/core/ngx_slab.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
	#NGX_SLAB_PAGE_MASK
 3

	)

12 
	#NGX_SLAB_PAGE
 0

	)

13 
	#NGX_SLAB_BIG
 1

	)

14 
	#NGX_SLAB_EXACT
 2

	)

15 
	#NGX_SLAB_SMALL
 3

	)

17 #i‡(
NGX_PTR_SIZE
 == 4)

19 
	#NGX_SLAB_PAGE_FREE
 0

	)

20 
	#NGX_SLAB_PAGE_BUSY
 0xffffffff

	)

21 
	#NGX_SLAB_PAGE_START
 0x80000000

	)

23 
	#NGX_SLAB_SHIFT_MASK
 0x0000000f

	)

24 
	#NGX_SLAB_MAP_MASK
 0xffff0000

	)

25 
	#NGX_SLAB_MAP_SHIFT
 16

	)

27 
	#NGX_SLAB_BUSY
 0xffffffff

	)

31 
	#NGX_SLAB_PAGE_FREE
 0

	)

32 
	#NGX_SLAB_PAGE_BUSY
 0xffffffffffffffff

	)

33 
	#NGX_SLAB_PAGE_START
 0x8000000000000000

	)

35 
	#NGX_SLAB_SHIFT_MASK
 0x000000000000000f

	)

36 
	#NGX_SLAB_MAP_MASK
 0xffffffff00000000

	)

37 
	#NGX_SLAB_MAP_SHIFT
 32

	)

39 
	#NGX_SLAB_BUSY
 0xffffffffffffffff

	)

44 
	#ngx_¶ab_¶Ÿs
(
poﬁ
) \

45 (
ngx_¶ab_∑ge_t
 *Ë((
u_ch¨
 *Ë(
poﬁ
Ë+ (
ngx_¶ab_poﬁ_t
))

	)

47 
	#ngx_¶ab_∑ge_ty≥
(
∑ge
Ë(’age)->
¥ev
 & 
NGX_SLAB_PAGE_MASK
)

	)

49 
	#ngx_¶ab_∑ge_¥ev
(
∑ge
) \

50 (
ngx_¶ab_∑ge_t
 *Ë((
∑ge
)->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
)

	)

52 
	#ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
) \

53 ((((
∑ge
Ë- (
poﬁ
)->
∑ges
Ë<< 
ngx_∑gesize_shi·
) \

54 + (
uöçå_t
Ë(
poﬁ
)->
°¨t
)

	)

57 #i‡(
NGX_DEBUG_MALLOC
)

59 
	#ngx_¶ab_junk
(
p
, 
size
Ë
	`ngx_mem£t
’, 0xA5, size)

	)

61 #ñi‡(
NGX_HAVE_DEBUG_MALLOC
)

63 
	#ngx_¶ab_junk
(
p
, 
size
) \

64 i‡(
ngx_debug_mÆloc
Ë
	`ngx_mem£t
(
p
, 0xA5, 
size
)

	)

68 
	#ngx_¶ab_junk
(
p
, 
size
)

	)

72 
ngx_¶ab_∑ge_t
 *
ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
,

73 
ngx_uöt_t
 
∑ges
);

74 
ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

75 
ngx_uöt_t
 
∑ges
);

76 
ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
,

77 *
ãxt
);

80 
ngx_uöt_t
 
	gngx_¶ab_max_size
;

81 
ngx_uöt_t
 
	gngx_¶ab_exa˘_size
;

82 
ngx_uöt_t
 
	gngx_¶ab_exa˘_shi·
;

86 
	$ngx_¶ab_sizes_öô
()

88 
ngx_uöt_t
 
n
;

90 
ngx_¶ab_max_size
 = 
ngx_∑gesize
 / 2;

91 
ngx_¶ab_exa˘_size
 = 
ngx_∑gesize
 / (8 * (
uöçå_t
));

92 
n
 = 
ngx_¶ab_exa˘_size
;Ç >>1; 
ngx_¶ab_exa˘_shi·
++) {

95 
	}
}

99 
	$ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
)

101 
u_ch¨
 *
p
;

102 
size_t
 
size
;

103 
ngx_öt_t
 
m
;

104 
ngx_uöt_t
 
i
, 
n
, 
∑ges
;

105 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

107 
poﬁ
->
mö_size
 = (
size_t
Ë1 <<Öoﬁ->
mö_shi·
;

109 
¶Ÿs
 = 
	`ngx_¶ab_¶Ÿs
(
poﬁ
);

111 
p
 = (
u_ch¨
 *Ë
¶Ÿs
;

112 
size
 = 
poﬁ
->
íd
 - 
p
;

114 
	`ngx_¶ab_junk
(
p
, 
size
);

116 
n
 = 
ngx_∑gesize_shi·
 - 
poﬁ
->
mö_shi·
;

118 
i
 = 0; i < 
n
; i++) {

120 
¶Ÿs
[
i
].
¶ab
 = 0;

121 
¶Ÿs
[
i
].
√xt
 = &slots[i];

122 
¶Ÿs
[
i
].
¥ev
 = 0;

125 
p
 +
n
 * (
ngx_¶ab_∑ge_t
);

127 
poﬁ
->
°©s
 = (
ngx_¶ab_°©_t
 *Ë
p
;

128 
	`ngx_memzîo
(
poﬁ
->
°©s
, 
n
 * (
ngx_¶ab_°©_t
));

130 
p
 +
n
 * (
ngx_¶ab_°©_t
);

132 
size
 -
n
 * ((
ngx_¶ab_∑ge_t
Ë+ (
ngx_¶ab_°©_t
));

134 
∑ges
 = (
ngx_uöt_t
Ë(
size
 / (
ngx_∑gesize
 + (
ngx_¶ab_∑ge_t
)));

136 
poﬁ
->
∑ges
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

137 
	`ngx_memzîo
(
poﬁ
->
∑ges
,Öage†* (
ngx_¶ab_∑ge_t
));

139 
∑ge
 = 
poﬁ
->
∑ges
;

142 
poﬁ
->
‰ì
.
¶ab
 = 0;

143 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

144 
poﬁ
->
‰ì
.
¥ev
 = 0;

146 
∑ge
->
¶ab
 = 
∑ges
;

147 
∑ge
->
√xt
 = &
poﬁ
->
‰ì
;

148 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

150 
poﬁ
->
°¨t
 = 
	`ngx_Æign_±r
(
p
 + 
∑ges
 * (
ngx_¶ab_∑ge_t
),

151 
ngx_∑gesize
);

153 
m
 = 
∑ges
 - (
poﬁ
->
íd
 -Öoﬁ->
°¨t
Ë/ 
ngx_∑gesize
;

154 i‡(
m
 > 0) {

155 
∑ges
 -
m
;

156 
∑ge
->
¶ab
 = 
∑ges
;

159 
poﬁ
->
œ°
 =Öoﬁ->
∑ges
 +Öages;

160 
poﬁ
->
p‰ì
 = 
∑ges
;

162 
poﬁ
->
log_nomem
 = 1;

163 
poﬁ
->
log_˘x
 = &poﬁ->
zîo
;

164 
poﬁ
->
zîo
 = '\0';

165 
	}
}

169 
	$ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

171 *
p
;

173 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

175 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

177 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

179  
p
;

180 
	}
}

184 
	$ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

186 
size_t
 
s
;

187 
uöçå_t
 
p
, 
m
, 
mask
, *
bôm≠
;

188 
ngx_uöt_t
 
i
, 
n
, 
¶Ÿ
, 
shi·
, 
m≠
;

189 
ngx_¶ab_∑ge_t
 *
∑ge
, *
¥ev
, *
¶Ÿs
;

191 i‡(
size
 > 
ngx_¶ab_max_size
) {

193 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

194 "¶abáŒoc: %uz", 
size
);

196 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, (
size
 >> 
ngx_∑gesize_shi·
)

197 + ((
size
 % 
ngx_∑gesize
) ? 1 : 0));

198 i‡(
∑ge
) {

199 
p
 = 
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
);

202 
p
 = 0;

205 
d⁄e
;

208 i‡(
size
 > 
poﬁ
->
mö_size
) {

209 
shi·
 = 1;

210 
s
 = 
size
 - 1; s >>1; 
shi·
++) { }

211 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

214 
shi·
 = 
poﬁ
->
mö_shi·
;

215 
¶Ÿ
 = 0;

218 
poﬁ
->
°©s
[
¶Ÿ
].
ªqs
++;

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

221 "¶abáŒoc: %uz slŸ: %ui", 
size
, 
¶Ÿ
);

223 
¶Ÿs
 = 
	`ngx_¶ab_¶Ÿs
(
poﬁ
);

224 
∑ge
 = 
¶Ÿs
[
¶Ÿ
].
√xt
;

226 i‡(
∑ge
->
√xt
 !=Öage) {

228 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

230 
bôm≠
 = (
uöçå_t
 *Ë
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
);

232 
m≠
 = (
ngx_∑gesize
 >> 
shi·
Ë/ (8 * (
uöçå_t
));

234 
n
 = 0;Ç < 
m≠
;Ç++) {

236 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

238 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

239 i‡(
bôm≠
[
n
] & 
m
) {

243 
bôm≠
[
n
] |
m
;

245 
i
 = (
n
 * 8 * (
uöçå_t
Ë+ iË<< 
shi·
;

247 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

249 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
++;

251 i‡(
bôm≠
[
n
] =
NGX_SLAB_BUSY
) {

252 
n
 =Ç + 1;Ç < 
m≠
;Ç++) {

253 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

254 
d⁄e
;

258 
¥ev
 = 
	`ngx_¶ab_∑ge_¥ev
(
∑ge
);

259 
¥ev
->
√xt
 = 
∑ge
->next;

260 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

262 
∑ge
->
√xt
 = 
NULL
;

263 
∑ge
->
¥ev
 = 
NGX_SLAB_SMALL
;

266 
d⁄e
;

271 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

273 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

274 i‡(
∑ge
->
¶ab
 & 
m
) {

278 
∑ge
->
¶ab
 |
m
;

280 i‡(
∑ge
->
¶ab
 =
NGX_SLAB_BUSY
) {

281 
¥ev
 = 
	`ngx_¶ab_∑ge_¥ev
(
∑ge
);

282 
¥ev
->
√xt
 = 
∑ge
->next;

283 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

285 
∑ge
->
√xt
 = 
NULL
;

286 
∑ge
->
¥ev
 = 
NGX_SLAB_EXACT
;

289 
p
 = 
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
Ë+ (
i
 << 
shi·
);

291 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
++;

293 
d⁄e
;

298 
mask
 = ((
uöçå_t
Ë1 << (
ngx_∑gesize
 >> 
shi·
)) - 1;

299 
mask
 <<
NGX_SLAB_MAP_SHIFT
;

301 
m
 = (
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
, 
i
 = 0;

302 
m
 & 
mask
;

303 
m
 <<1, 
i
++)

305 i‡(
∑ge
->
¶ab
 & 
m
) {

309 
∑ge
->
¶ab
 |
m
;

311 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë=
mask
) {

312 
¥ev
 = 
	`ngx_¶ab_∑ge_¥ev
(
∑ge
);

313 
¥ev
->
√xt
 = 
∑ge
->next;

314 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

316 
∑ge
->
√xt
 = 
NULL
;

317 
∑ge
->
¥ev
 = 
NGX_SLAB_BIG
;

320 
p
 = 
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
Ë+ (
i
 << 
shi·
);

322 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
++;

324 
d⁄e
;

328 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_alloc():Öage is busy");

329 
	`ngx_debug_poöt
();

332 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, 1);

334 i‡(
∑ge
) {

335 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

336 
bôm≠
 = (
uöçå_t
 *Ë
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
);

338 
n
 = (
ngx_∑gesize
 >> 
shi·
) / ((1 << shift) * 8);

340 i‡(
n
 == 0) {

341 
n
 = 1;

346 
i
 = 0; i < (
n
 + 1Ë/ (8 * (
uöçå_t
)); i++) {

347 
bôm≠
[
i
] = 
NGX_SLAB_BUSY
;

350 
m
 = ((
uöçå_t
Ë1 << ((
n
 + 1) % (8 * (uintptr_t)))) - 1;

351 
bôm≠
[
i
] = 
m
;

353 
m≠
 = (
ngx_∑gesize
 >> 
shi·
Ë/ (8 * (
uöçå_t
));

355 
i
 = i + 1; i < 
m≠
; i++) {

356 
bôm≠
[
i
] = 0;

359 
∑ge
->
¶ab
 = 
shi·
;

360 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

361 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

363 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

365 
poﬁ
->
°©s
[
¶Ÿ
].
tŸÆ
 +(
ngx_∑gesize
 >> 
shi·
Ë- 
n
;

367 
p
 = 
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
Ë+ (
n
 << 
shi·
);

369 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
++;

371 
d⁄e
;

373 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

375 
∑ge
->
¶ab
 = 1;

376 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

377 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

379 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

381 
poﬁ
->
°©s
[
¶Ÿ
].
tŸÆ
 +8 * (
uöçå_t
);

383 
p
 = 
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
);

385 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
++;

387 
d⁄e
;

391 
∑ge
->
¶ab
 = ((
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
Ë| 
shi·
;

392 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

393 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

395 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

397 
poﬁ
->
°©s
[
¶Ÿ
].
tŸÆ
 +
ngx_∑gesize
 >> 
shi·
;

399 
p
 = 
	`ngx_¶ab_∑ge_addr
(
poﬁ
, 
∑ge
);

401 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
++;

403 
d⁄e
;

407 
p
 = 0;

409 
poﬁ
->
°©s
[
¶Ÿ
].
Áûs
++;

411 
d⁄e
:

413 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

414 "¶abáŒoc: %p", (*Ë
p
);

416  (*Ë
p
;

417 
	}
}

421 
	$ngx_¶ab_ˇŒoc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

423 *
p
;

425 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

427 
p
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, 
size
);

429 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

431  
p
;

432 
	}
}

436 
	$ngx_¶ab_ˇŒoc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

438 *
p
;

440 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

441 i‡(
p
) {

442 
	`ngx_memzîo
(
p
, 
size
);

445  
p
;

446 
	}
}

450 
	$ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

452 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

454 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
p
);

456 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

457 
	}
}

461 
	$ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

463 
size_t
 
size
;

464 
uöçå_t
 
¶ab
, 
m
, *
bôm≠
;

465 
ngx_uöt_t
 
i
, 
n
, 
ty≥
, 
¶Ÿ
, 
shi·
, 
m≠
;

466 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

468 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶ab fªe: %p", 
p
);

470 i‡((
u_ch¨
 *Ë
p
 < 
poﬁ
->
°¨t
 || (u_ch¨ *Ë∞>Öoﬁ->
íd
) {

471 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_free(): outside ofÖool");

472 
Áû
;

475 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

476 
∑ge
 = &
poﬁ
->
∑ges
[
n
];

477 
¶ab
 = 
∑ge
->slab;

478 
ty≥
 = 
	`ngx_¶ab_∑ge_ty≥
(
∑ge
);

480 
ty≥
) {

482 
NGX_SLAB_SMALL
:

484 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

485 
size
 = (
size_t
Ë1 << 
shi·
;

487 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

488 
wr⁄g_chunk
;

491 
n
 = ((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
;

492 
m
 = (
uöçå_t
Ë1 << (
n
 % (8 * (uintptr_t)));

493 
n
 /8 * (
uöçå_t
);

494 
bôm≠
 = (
uöçå_t
 *)

495 ((
uöçå_t
Ë
p
 & ~((uöçå_tË
ngx_∑gesize
 - 1));

497 i‡(
bôm≠
[
n
] & 
m
) {

498 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

500 i‡(
∑ge
->
√xt
 =
NULL
) {

501 
¶Ÿs
 = 
	`ngx_¶ab_¶Ÿs
(
poﬁ
);

503 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

504 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

506 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

507 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_SMALL
;

510 
bôm≠
[
n
] &~
m
;

512 
n
 = (
ngx_∑gesize
 >> 
shi·
) / ((1 << shift) * 8);

514 i‡(
n
 == 0) {

515 
n
 = 1;

518 
i
 = 
n
 / (8 * (
uöçå_t
));

519 
m
 = ((
uöçå_t
Ë1 << (
n
 % (8 * (uintptr_t)))) - 1;

521 i‡(
bôm≠
[
i
] & ~
m
) {

522 
d⁄e
;

525 
m≠
 = (
ngx_∑gesize
 >> 
shi·
Ë/ (8 * (
uöçå_t
));

527 
i
 = i + 1; i < 
m≠
; i++) {

528 i‡(
bôm≠
[
i
]) {

529 
d⁄e
;

533 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

535 
poﬁ
->
°©s
[
¶Ÿ
].
tŸÆ
 -(
ngx_∑gesize
 >> 
shi·
Ë- 
n
;

537 
d⁄e
;

540 
chunk_Æªady_‰ì
;

542 
NGX_SLAB_EXACT
:

544 
m
 = (
uöçå_t
) 1 <<

545 (((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
ngx_¶ab_exa˘_shi·
);

546 
size
 = 
ngx_¶ab_exa˘_size
;

548 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

549 
wr⁄g_chunk
;

552 i‡(
¶ab
 & 
m
) {

553 
¶Ÿ
 = 
ngx_¶ab_exa˘_shi·
 - 
poﬁ
->
mö_shi·
;

555 i‡(
¶ab
 =
NGX_SLAB_BUSY
) {

556 
¶Ÿs
 = 
	`ngx_¶ab_¶Ÿs
(
poﬁ
);

558 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

559 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

561 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

562 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_EXACT
;

565 
∑ge
->
¶ab
 &~
m
;

567 i‡(
∑ge
->
¶ab
) {

568 
d⁄e
;

571 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

573 
poﬁ
->
°©s
[
¶Ÿ
].
tŸÆ
 -8 * (
uöçå_t
);

575 
d⁄e
;

578 
chunk_Æªady_‰ì
;

580 
NGX_SLAB_BIG
:

582 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

583 
size
 = (
size_t
Ë1 << 
shi·
;

585 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

586 
wr⁄g_chunk
;

589 
m
 = (
uöçå_t
Ë1 << ((((uöçå_tË
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
)

590 + 
NGX_SLAB_MAP_SHIFT
);

592 i‡(
¶ab
 & 
m
) {

593 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

595 i‡(
∑ge
->
√xt
 =
NULL
) {

596 
¶Ÿs
 = 
	`ngx_¶ab_¶Ÿs
(
poﬁ
);

598 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

599 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

601 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

602 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_BIG
;

605 
∑ge
->
¶ab
 &~
m
;

607 i‡(
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
) {

608 
d⁄e
;

611 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

613 
poﬁ
->
°©s
[
¶Ÿ
].
tŸÆ
 -
ngx_∑gesize
 >> 
shi·
;

615 
d⁄e
;

618 
chunk_Æªady_‰ì
;

620 
NGX_SLAB_PAGE
:

622 i‡((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)) {

623 
wr⁄g_chunk
;

626 i‡(!(
¶ab
 & 
NGX_SLAB_PAGE_START
)) {

627 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

629 
Áû
;

632 i‡(
¶ab
 =
NGX_SLAB_PAGE_BUSY
) {

633 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

635 
Áû
;

638 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

639 
size
 = 
¶ab
 & ~
NGX_SLAB_PAGE_START
;

641 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, &poﬁ->
∑ges
[
n
], 
size
);

643 
	`ngx_¶ab_junk
(
p
, 
size
 << 
ngx_∑gesize_shi·
);

652 
d⁄e
:

654 
poﬁ
->
°©s
[
¶Ÿ
].
u£d
--;

656 
	`ngx_¶ab_junk
(
p
, 
size
);

660 
wr⁄g_chunk
:

662 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

665 
Áû
;

667 
chunk_Æªady_‰ì
:

669 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

672 
Áû
:

675 
	}
}

678 
ngx_¶ab_∑ge_t
 *

679 
	$ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
∑ges
)

681 
ngx_¶ab_∑ge_t
 *
∑ge
, *
p
;

683 
∑ge
 = 
poﬁ
->
‰ì
.
√xt
;Öage != &pool->free;Öage =Öage->next) {

685 i‡(
∑ge
->
¶ab
 >
∑ges
) {

687 i‡(
∑ge
->
¶ab
 > 
∑ges
) {

688 
∑ge
[∑ge->
¶ab
 - 1].
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

690 
∑ge
[
∑ges
].
¶ab
 =Öage->slab -Öages;

691 
∑ge
[
∑ges
].
√xt
 =Öage->next;

692 
∑ge
[
∑ges
].
¥ev
 =Öage->prev;

694 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

695 
p
->
√xt
 = &
∑ge
[
∑ges
];

696 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

699 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

700 
p
->
√xt
 = 
∑ge
->next;

701 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

704 
∑ge
->
¶ab
 = 
∑ges
 | 
NGX_SLAB_PAGE_START
;

705 
∑ge
->
√xt
 = 
NULL
;

706 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

708 
poﬁ
->
p‰ì
 -
∑ges
;

710 i‡(--
∑ges
 == 0) {

711  
∑ge
;

714 
p
 = 
∑ge
 + 1; 
∑ges
;Öages--) {

715 
p
->
¶ab
 = 
NGX_SLAB_PAGE_BUSY
;

716 
p
->
√xt
 = 
NULL
;

717 
p
->
¥ev
 = 
NGX_SLAB_PAGE
;

718 
p
++;

721  
∑ge
;

725 i‡(
poﬁ
->
log_nomem
) {

726 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_CRIT
,

730  
NULL
;

731 
	}
}

735 
	$ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

736 
ngx_uöt_t
 
∑ges
)

738 
ngx_¶ab_∑ge_t
 *
¥ev
, *
joö
;

740 
poﬁ
->
p‰ì
 +
∑ges
;

742 
∑ge
->
¶ab
 = 
∑ges
--;

744 i‡(
∑ges
) {

745 
	`ngx_memzîo
(&
∑ge
[1], 
∑ges
 * (
ngx_¶ab_∑ge_t
));

748 i‡(
∑ge
->
√xt
) {

749 
¥ev
 = 
	`ngx_¶ab_∑ge_¥ev
(
∑ge
);

750 
¥ev
->
√xt
 = 
∑ge
->next;

751 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

754 
joö
 = 
∑ge
 +Öage->
¶ab
;

756 i‡(
joö
 < 
poﬁ
->
œ°
) {

758 i‡(
	`ngx_¶ab_∑ge_ty≥
(
joö
Ë=
NGX_SLAB_PAGE
) {

760 i‡(
joö
->
√xt
 !
NULL
) {

761 
∑ges
 +
joö
->
¶ab
;

762 
∑ge
->
¶ab
 +
joö
->slab;

764 
¥ev
 = 
	`ngx_¶ab_∑ge_¥ev
(
joö
);

765 
¥ev
->
√xt
 = 
joö
->next;

766 
joö
->
√xt
->
¥ev
 = join->prev;

768 
joö
->
¶ab
 = 
NGX_SLAB_PAGE_FREE
;

769 
joö
->
√xt
 = 
NULL
;

770 
joö
->
¥ev
 = 
NGX_SLAB_PAGE
;

775 i‡(
∑ge
 > 
poﬁ
->
∑ges
) {

776 
joö
 = 
∑ge
 - 1;

778 i‡(
	`ngx_¶ab_∑ge_ty≥
(
joö
Ë=
NGX_SLAB_PAGE
) {

780 i‡(
joö
->
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

781 
joö
 = 
	`ngx_¶ab_∑ge_¥ev
(join);

784 i‡(
joö
->
√xt
 !
NULL
) {

785 
∑ges
 +
joö
->
¶ab
;

786 
joö
->
¶ab
 +
∑ge
->slab;

788 
¥ev
 = 
	`ngx_¶ab_∑ge_¥ev
(
joö
);

789 
¥ev
->
√xt
 = 
joö
->next;

790 
joö
->
√xt
->
¥ev
 = join->prev;

792 
∑ge
->
¶ab
 = 
NGX_SLAB_PAGE_FREE
;

793 
∑ge
->
√xt
 = 
NULL
;

794 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

796 
∑ge
 = 
joö
;

801 i‡(
∑ges
) {

802 
∑ge
[
∑ges
].
¥ev
 = (
uöçå_t
)Öage;

805 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

806 
∑ge
->
√xt
 = 
poﬁ
->
‰ì
.next;

808 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
)Öage;

810 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

811 
	}
}

815 
	$ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
, *
ãxt
)

817 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 0, "%s%s", 
ãxt
, 
poﬁ
->
log_˘x
);

818 
	}
}

	@src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_uöt_t
 
	mtŸÆ
;

27 
ngx_uöt_t
 
	mu£d
;

29 
ngx_uöt_t
 
	mªqs
;

30 
ngx_uöt_t
 
	mÁûs
;

31 } 
	tngx_¶ab_°©_t
;

35 
ngx_shmtx_sh_t
 
	mlock
;

37 
size_t
 
	mmö_size
;

38 
size_t
 
	mmö_shi·
;

40 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

41 
ngx_¶ab_∑ge_t
 *
	mœ°
;

42 
ngx_¶ab_∑ge_t
 
	m‰ì
;

44 
ngx_¶ab_°©_t
 *
	m°©s
;

45 
ngx_uöt_t
 
	mp‰ì
;

47 
u_ch¨
 *
	m°¨t
;

48 
u_ch¨
 *
	míd
;

50 
ngx_shmtx_t
 
	mmuãx
;

52 
u_ch¨
 *
	mlog_˘x
;

53 
u_ch¨
 
	mzîo
;

55 
	mlog_nomem
:1;

57 *
	md©a
;

58 *
	maddr
;

59 } 
	tngx_¶ab_poﬁ_t
;

62 
ngx_¶ab_sizes_öô
();

63 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

64 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

65 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

66 *
ngx_¶ab_ˇŒoc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

67 *
ngx_¶ab_ˇŒoc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

68 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

69 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@src/core/ngx_spinlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
)

16 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_uöt_t
 
i
, 
n
;

22 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

26 i‡(
ngx_n˝u
 > 1) {

28 
n
 = 1;Ç < 
•ö
;Ç <<= 1) {

30 
i
 = 0; i < 
n
; i++) {

31 
	`ngx_˝u_∑u£
();

34 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

40 
	`ngx_sched_yõld
();

45 #i‡(
NGX_THREADS
)

47 #îr‹ 
	`ngx_•ölock
(Ë
‹
 
	`ngx_©omic_cmp_£t
(Ë
¨e
 
nŸ
 
deföed
 !

53 
	}
}

	@src/core/ngx_string.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *
ngx_•rötf_num
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
,

13 
u_ch¨
 
zîo
, 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
);

14 
ngx_ícode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

15 c⁄° 
u_ch¨
 *
basis
, 
ngx_uöt_t
 
∑ddög
);

16 
ngx_öt_t
 
ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

17 c⁄° 
u_ch¨
 *
basis
);

21 
	$ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

23 
n
) {

24 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

25 
d°
++;

26 
§c
++;

27 
n
--;

29 
	}
}

32 
size_t


33 
	$ngx_°∫Àn
(
u_ch¨
 *
p
, 
size_t
 
n
)

35 
size_t
 
i
;

37 
i
 = 0; i < 
n
; i++) {

39 i‡(
p
[
i
] == '\0') {

40  
i
;

44  
n
;

45 
	}
}

48 
u_ch¨
 *

49 
	$ngx_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

51 i‡(
n
 == 0) {

52  
d°
;

55 --
n
) {

56 *
d°
 = *
§c
;

58 i‡(*
d°
 == '\0') {

59  
d°
;

62 
d°
++;

63 
§c
++;

66 *
d°
 = '\0';

68  
d°
;

69 
	}
}

72 
u_ch¨
 *

73 
	$ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
)

75 
u_ch¨
 *
d°
;

77 
d°
 = 
	`ngx_≤Æloc
(
poﬁ
, 
§c
->
Àn
);

78 i‡(
d°
 =
NULL
) {

79  
NULL
;

82 
	`ngx_mem˝y
(
d°
, 
§c
->
d©a
, src->
Àn
);

84  
d°
;

85 
	}
}

120 
u_ch¨
 * 
ngx_cde˛


121 
	$ngx_•rötf
(
u_ch¨
 *
buf
, c⁄° *
fmt
, ...)

123 
u_ch¨
 *
p
;

124 
va_li°
 
¨gs
;

126 
	`va_°¨t
(
¨gs
, 
fmt
);

127 
p
 = 
	`ngx_v¶¥ötf
(
buf
, (*Ë-1, 
fmt
, 
¨gs
);

128 
	`va_íd
(
¨gs
);

130  
p
;

131 
	}
}

134 
u_ch¨
 * 
ngx_cde˛


135 
	$ngx_¢¥ötf
(
u_ch¨
 *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...)

137 
u_ch¨
 *
p
;

138 
va_li°
 
¨gs
;

140 
	`va_°¨t
(
¨gs
, 
fmt
);

141 
p
 = 
	`ngx_v¶¥ötf
(
buf
, bu‡+ 
max
, 
fmt
, 
¨gs
);

142 
	`va_íd
(
¨gs
);

144  
p
;

145 
	}
}

148 
u_ch¨
 * 
ngx_cde˛


149 
	$ngx_¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, ...)

151 
u_ch¨
 *
p
;

152 
va_li°
 
¨gs
;

154 
	`va_°¨t
(
¨gs
, 
fmt
);

155 
p
 = 
	`ngx_v¶¥ötf
(
buf
, 
œ°
, 
fmt
, 
¨gs
);

156 
	`va_íd
(
¨gs
);

158  
p
;

159 
	}
}

162 
u_ch¨
 *

163 
	$ngx_v¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

165 
u_ch¨
 *
p
, 
zîo
;

166 
d
;

167 
f
;

168 
size_t
 
Àn
, 
¶í
;

169 
öt64_t
 
i64
;

170 
uöt64_t
 
ui64
, 
‰ac
;

171 
ngx_m£c_t
 
ms
;

172 
ngx_uöt_t
 
width
, 
sign
, 
hex
, 
max_width
, 
‰ac_width
, 
sˇÀ
, 
n
;

173 
ngx_°r_t
 *
v
;

174 
ngx_v¨übÀ_vÆue_t
 *
vv
;

176 *
fmt
 && 
buf
 < 
œ°
) {

183 i‡(*
fmt
 == '%') {

185 
i64
 = 0;

186 
ui64
 = 0;

188 
zîo
 = (
u_ch¨
Ë((*++
fmt
 == '0') ? '0' : ' ');

189 
width
 = 0;

190 
sign
 = 1;

191 
hex
 = 0;

192 
max_width
 = 0;

193 
‰ac_width
 = 0;

194 
¶í
 = (
size_t
) -1;

196 *
fmt
 >= '0' && *fmt <= '9') {

197 
width
 = width * 10 + (*
fmt
++ - '0');

202 *
fmt
) {

205 
sign
 = 0;

206 
fmt
++;

210 
max_width
 = 1;

211 
fmt
++;

215 
hex
 = 2;

216 
sign
 = 0;

217 
fmt
++;

221 
hex
 = 1;

222 
sign
 = 0;

223 
fmt
++;

227 
fmt
++;

229 *
fmt
 >= '0' && *fmt <= '9') {

230 
‰ac_width
 = føc_width * 10 + (*
fmt
++ - '0');

236 
¶í
 = 
	`va_¨g
(
¨gs
, 
size_t
);

237 
fmt
++;

248 *
fmt
) {

251 
v
 = 
	`va_¨g
(
¨gs
, 
ngx_°r_t
 *);

253 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
v
->len);

254 
buf
 = 
	`ngx_˝ymem
(buf, 
v
->
d©a
, 
Àn
);

255 
fmt
++;

260 
vv
 = 
	`va_¨g
(
¨gs
, 
ngx_v¨übÀ_vÆue_t
 *);

262 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
vv
->len);

263 
buf
 = 
	`ngx_˝ymem
(buf, 
vv
->
d©a
, 
Àn
);

264 
fmt
++;

269 
p
 = 
	`va_¨g
(
¨gs
, 
u_ch¨
 *);

271 i‡(
¶í
 =(
size_t
) -1) {

272 *
p
 && 
buf
 < 
œ°
) {

273 *
buf
++ = *
p
++;

277 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
¶í
);

278 
buf
 = 
	`ngx_˝ymem
(buf, 
p
, 
Àn
);

281 
fmt
++;

286 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
off_t
);

287 
sign
 = 1;

291 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_pid_t
);

292 
sign
 = 1;

296 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
time_t
);

297 
sign
 = 1;

301 
ms
 = (
ngx_m£c_t
Ë
	`va_¨g
(
¨gs
,Çgx_msec_t);

302 i‡((
ngx_m£c_öt_t
Ë
ms
 == -1) {

303 
sign
 = 1;

304 
i64
 = -1;

306 
sign
 = 0;

307 
ui64
 = (
uöt64_t
Ë
ms
;

312 i‡(
sign
) {

313 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ssize_t
);

315 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
size_t
);

320 i‡(
sign
) {

321 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_öt_t
);

323 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_uöt_t
);

326 i‡(
max_width
) {

327 
width
 = 
NGX_INT_T_LEN
;

333 i‡(
sign
) {

334 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

336 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_öt
);

341 i‡(
sign
) {

342 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

344 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_l⁄g
);

349 i‡(
sign
) {

350 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
öt32_t
);

352 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
uöt32_t
);

357 i‡(
sign
) {

358 
i64
 = 
	`va_¨g
(
¨gs
, 
öt64_t
);

360 
ui64
 = 
	`va_¨g
(
¨gs
, 
uöt64_t
);

365 i‡(
sign
) {

366 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_öt_t
);

368 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_uöt_t
);

371 i‡(
max_width
) {

372 
width
 = 
NGX_ATOMIC_T_LEN
;

378 
f
 = 
	`va_¨g
(
¨gs
, );

380 i‡(
f
 < 0) {

381 *
buf
++ = '-';

382 
f
 = -f;

385 
ui64
 = (
öt64_t
Ë
f
;

386 
‰ac
 = 0;

388 i‡(
‰ac_width
) {

390 
sˇÀ
 = 1;

391 
n
 = 
‰ac_width
;Ç;Ç--) {

392 
sˇÀ
 *= 10;

395 
‰ac
 = (
uöt64_t
Ë((
f
 - (Ë
ui64
Ë* 
sˇÀ
 + 0.5);

397 i‡(
‰ac
 =
sˇÀ
) {

398 
ui64
++;

399 
‰ac
 = 0;

403 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 0, 
width
);

405 i‡(
‰ac_width
) {

406 i‡(
buf
 < 
œ°
) {

407 *
buf
++ = '.';

410 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
‰ac
, '0', 0, 
‰ac_width
);

413 
fmt
++;

417 #i‡!(
NGX_WIN32
)

419 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
æim_t
);

420 
sign
 = 1;

425 
ui64
 = (
uöçå_t
Ë
	`va_¨g
(
¨gs
, *);

426 
hex
 = 2;

427 
sign
 = 0;

428 
zîo
 = '0';

429 
width
 = 2 * (*);

433 
d
 = 
	`va_¨g
(
¨gs
, );

434 *
buf
++ = (
u_ch¨
Ë(
d
 & 0xff);

435 
fmt
++;

440 *
buf
++ = '\0';

441 
fmt
++;

446 #i‡(
NGX_WIN32
)

447 *
buf
++ = 
CR
;

448 i‡(
buf
 < 
œ°
) {

449 *
buf
++ = 
LF
;

452 *
buf
++ = 
LF
;

454 
fmt
++;

459 *
buf
++ = '%';

460 
fmt
++;

465 *
buf
++ = *
fmt
++;

470 i‡(
sign
) {

471 i‡(
i64
 < 0) {

472 *
buf
++ = '-';

473 
ui64
 = (
uöt64_t
Ë-
i64
;

476 
ui64
 = (
uöt64_t
Ë
i64
;

480 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 
hex
, 
width
);

482 
fmt
++;

485 *
buf
++ = *
fmt
++;

489  
buf
;

490 
	}
}

493 
u_ch¨
 *

494 
	$ngx_•rötf_num
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
, u_ch¨ 
zîo
,

495 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
)

497 
u_ch¨
 *
p
, 
ãmp
[
NGX_INT64_LEN
 + 1];

502 
size_t
 
Àn
;

503 
uöt32_t
 
ui32
;

504 
u_ch¨
 
hex
[] = "0123456789abcdef";

505 
u_ch¨
 
HEX
[] = "0123456789ABCDEF";

507 
p
 = 
ãmp
 + 
NGX_INT64_LEN
;

509 i‡(
hexadecimÆ
 == 0) {

511 i‡(
ui64
 <(
uöt64_t
Ë
NGX_MAX_UINT32_VALUE
) {

528 
ui32
 = (
uöt32_t
Ë
ui64
;

531 *--
p
 = (
u_ch¨
Ë(
ui32
 % 10 + '0');

532 } 
ui32
 /= 10);

536 *--
p
 = (
u_ch¨
Ë(
ui64
 % 10 + '0');

537 } 
ui64
 /= 10);

540 } i‡(
hexadecimÆ
 == 1) {

545 *--
p
 = 
hex
[(
uöt32_t
Ë(
ui64
 & 0xf)];

547 } 
ui64
 >>= 4);

554 *--
p
 = 
HEX
[(
uöt32_t
Ë(
ui64
 & 0xf)];

556 } 
ui64
 >>= 4);

561 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

563 
Àn
++ < 
width
 && 
buf
 < 
œ°
) {

564 *
buf
++ = 
zîo
;

569 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

571 i‡(
buf
 + 
Àn
 > 
œ°
) {

572 
Àn
 = 
œ°
 - 
buf
;

575  
	`ngx_˝ymem
(
buf
, 
p
, 
Àn
);

576 
	}
}

586 
ngx_öt_t


587 
	$ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

589 
ngx_uöt_t
 
c1
, 
c2
;

592 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

593 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

595 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

596 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

598 i‡(
c1
 =
c2
) {

600 i‡(
c1
) {

607  
c1
 - 
c2
;

609 
	}
}

612 
ngx_öt_t


613 
	$ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

615 
ngx_uöt_t
 
c1
, 
c2
;

617 
n
) {

618 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

619 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

621 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

622 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

624 i‡(
c1
 =
c2
) {

626 i‡(
c1
) {

627 
n
--;

634  
c1
 - 
c2
;

638 
	}
}

641 
u_ch¨
 *

642 
	$ngx_°∫°r
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
Àn
)

644 
u_ch¨
 
c1
, 
c2
;

645 
size_t
 
n
;

647 
c2
 = *(
u_ch¨
 *Ë
s2
++;

649 
n
 = 
	`ngx_°æí
(
s2
);

653 i‡(
Àn
-- == 0) {

654  
NULL
;

657 
c1
 = *
s1
++;

659 i‡(
c1
 == 0) {

660  
NULL
;

663 } 
c1
 !
c2
);

665 i‡(
n
 > 
Àn
) {

666  
NULL
;

669 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

671  --
s1
;

672 
	}
}

681 
u_ch¨
 *

682 
	$ngx_°r°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

684 
u_ch¨
 
c1
, 
c2
;

686 
c2
 = *(
u_ch¨
 *Ë
s2
++;

690 
c1
 = *
s1
++;

692 i‡(
c1
 == 0) {

693  
NULL
;

696 } 
c1
 !
c2
);

698 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

700  --
s1
;

701 
	}
}

704 
u_ch¨
 *

705 
	$ngx_°rˇ£°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

707 
ngx_uöt_t
 
c1
, 
c2
;

709 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

710 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

714 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

716 i‡(
c1
 == 0) {

717  
NULL
;

720 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

722 } 
c1
 !
c2
);

724 } 
	`ngx_°∫ˇ£cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

726  --
s1
;

727 
	}
}

736 
u_ch¨
 *

737 
	$ngx_°æˇ£°∫
(
u_ch¨
 *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
)

739 
ngx_uöt_t
 
c1
, 
c2
;

741 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

742 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

743 
œ°
 -
n
;

747 i‡(
s1
 >
œ°
) {

748  
NULL
;

751 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

753 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

755 } 
c1
 !
c2
);

757 } 
	`ngx_°∫ˇ£cmp
(
s1
, 
s2
, 
n
) != 0);

759  --
s1
;

760 
	}
}

763 
ngx_öt_t


764 
	$ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

766 i‡(
n
 == 0) {

770 
n
--;

773 i‡(
s1
[
n
] !
s2
[n]) {

774  
s1
[
n
] - 
s2
[n];

777 i‡(
n
 == 0) {

781 
n
--;

783 
	}
}

786 
ngx_öt_t


787 
	$ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

789 
u_ch¨
 
c1
, 
c2
;

791 i‡(
n
 == 0) {

795 
n
--;

798 
c1
 = 
s1
[
n
];

799 i‡(
c1
 >= 'a' && c1 <= 'z') {

800 
c1
 -= 'a' - 'A';

803 
c2
 = 
s2
[
n
];

804 i‡(
c2
 >= 'a' && c2 <= 'z') {

805 
c2
 -= 'a' - 'A';

808 i‡(
c1
 !
c2
) {

809  
c1
 - 
c2
;

812 i‡(
n
 == 0) {

816 
n
--;

818 
	}
}

821 
ngx_öt_t


822 
	$ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
)

824 
size_t
 
n
;

825 
ngx_öt_t
 
m
, 
z
;

827 i‡(
n1
 <
n2
) {

828 
n
 = 
n1
;

829 
z
 = -1;

832 
n
 = 
n2
;

833 
z
 = 1;

836 
m
 = 
	`ngx_memcmp
(
s1
, 
s2
, 
n
);

838 i‡(
m
 || 
n1
 =
n2
) {

839  
m
;

842  
z
;

843 
	}
}

846 
ngx_öt_t


847 
	$ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

849 
ngx_uöt_t
 
c1
, 
c2
;

852 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

853 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

855 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

856 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

858 i‡(
c1
 =
c2
) {

860 i‡(
c1
) {

869 
c1
 = (c1 == '.') ? ' ' : c1;

870 
c2
 = (c2 == '.') ? ' ' : c2;

872  
c1
 - 
c2
;

874 
	}
}

877 
ngx_öt_t


878 
	$ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

880 
ngx_uöt_t
 
c1
, 
c2
;

882 
n
) {

883 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

884 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

886 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

887 
c1
 = 
	`tﬁowî
(c1);

888 
c2
 = 
	`tﬁowî
(c2);

891 i‡(
c1
 =
c2
) {

893 i‡(
c1
) {

894 
n
--;

903 i‡(
c1
 =0 || 
c2
 == 0) {

904  
c1
 - 
c2
;

907 
c1
 = (c1 == '/') ? 0 : c1;

908 
c2
 = (c2 == '/') ? 0 : c2;

910  
c1
 - 
c2
;

914 
	}
}

917 
ngx_öt_t


918 
	$ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

920 
ngx_öt_t
 
vÆue
, 
cutoff
, 
cuéim
;

922 i‡(
n
 == 0) {

923  
NGX_ERROR
;

926 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

927 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

929 
vÆue
 = 0; 
n
--; 
löe
++) {

930 i‡(*
löe
 < '0' || *line > '9') {

931  
NGX_ERROR
;

934 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

935  
NGX_ERROR
;

938 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

941  
vÆue
;

942 
	}
}

947 
ngx_öt_t


948 
	$ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

950 
ngx_öt_t
 
vÆue
, 
cutoff
, 
cuéim
;

951 
ngx_uöt_t
 
dŸ
;

953 i‡(
n
 == 0) {

954  
NGX_ERROR
;

957 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

958 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

960 
dŸ
 = 0;

962 
vÆue
 = 0; 
n
--; 
löe
++) {

964 i‡(
poöt
 == 0) {

965  
NGX_ERROR
;

968 i‡(*
löe
 == '.') {

969 i‡(
dŸ
) {

970  
NGX_ERROR
;

973 
dŸ
 = 1;

977 i‡(*
löe
 < '0' || *line > '9') {

978  
NGX_ERROR
;

981 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

982  
NGX_ERROR
;

985 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

986 
poöt
 -
dŸ
;

989 
poöt
--) {

990 i‡(
vÆue
 > 
cutoff
) {

991  
NGX_ERROR
;

994 
vÆue
 = value * 10;

997  
vÆue
;

998 
	}
}

1001 
ssize_t


1002 
	$ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1004 
ssize_t
 
vÆue
, 
cutoff
, 
cuéim
;

1006 i‡(
n
 == 0) {

1007  
NGX_ERROR
;

1010 
cutoff
 = 
NGX_MAX_SIZE_T_VALUE
 / 10;

1011 
cuéim
 = 
NGX_MAX_SIZE_T_VALUE
 % 10;

1013 
vÆue
 = 0; 
n
--; 
löe
++) {

1014 i‡(*
löe
 < '0' || *line > '9') {

1015  
NGX_ERROR
;

1018 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

1019  
NGX_ERROR
;

1022 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1025  
vÆue
;

1026 
	}
}

1029 
off_t


1030 
	$ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1032 
off_t
 
vÆue
, 
cutoff
, 
cuéim
;

1034 i‡(
n
 == 0) {

1035  
NGX_ERROR
;

1038 
cutoff
 = 
NGX_MAX_OFF_T_VALUE
 / 10;

1039 
cuéim
 = 
NGX_MAX_OFF_T_VALUE
 % 10;

1041 
vÆue
 = 0; 
n
--; 
löe
++) {

1042 i‡(*
löe
 < '0' || *line > '9') {

1043  
NGX_ERROR
;

1046 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

1047  
NGX_ERROR
;

1050 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1053  
vÆue
;

1054 
	}
}

1057 
time_t


1058 
	$ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1060 
time_t
 
vÆue
, 
cutoff
, 
cuéim
;

1062 i‡(
n
 == 0) {

1063  
NGX_ERROR
;

1066 
cutoff
 = 
NGX_MAX_TIME_T_VALUE
 / 10;

1067 
cuéim
 = 
NGX_MAX_TIME_T_VALUE
 % 10;

1069 
vÆue
 = 0; 
n
--; 
löe
++) {

1070 i‡(*
löe
 < '0' || *line > '9') {

1071  
NGX_ERROR
;

1074 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

1075  
NGX_ERROR
;

1078 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1081  
vÆue
;

1082 
	}
}

1085 
ngx_öt_t


1086 
	$ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1088 
u_ch¨
 
c
, 
ch
;

1089 
ngx_öt_t
 
vÆue
, 
cutoff
;

1091 i‡(
n
 == 0) {

1092  
NGX_ERROR
;

1095 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 16;

1097 
vÆue
 = 0; 
n
--; 
löe
++) {

1098 i‡(
vÆue
 > 
cutoff
) {

1099  
NGX_ERROR
;

1102 
ch
 = *
löe
;

1104 i‡(
ch
 >= '0' && ch <= '9') {

1105 
vÆue
 = vÆuê* 16 + (
ch
 - '0');

1109 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1111 i‡(
c
 >= 'a' && c <= 'f') {

1112 
vÆue
 = vÆuê* 16 + (
c
 - 'a' + 10);

1116  
NGX_ERROR
;

1119  
vÆue
;

1120 
	}
}

1123 
u_ch¨
 *

1124 
	$ngx_hex_dump
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

1126 
u_ch¨
 
hex
[] = "0123456789abcdef";

1128 
Àn
--) {

1129 *
d°
++ = 
hex
[*
§c
 >> 4];

1130 *
d°
++ = 
hex
[*
§c
++ & 0xf];

1133  
d°
;

1134 
	}
}

1138 
	$ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1140 
u_ch¨
 
basis64
[] =

1143 
	`ngx_ícode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
, 1);

1144 
	}
}

1148 
	$ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1150 
u_ch¨
 
basis64
[] =

1153 
	`ngx_ícode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
, 0);

1154 
	}
}

1158 
	$ngx_ícode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
,

1159 
ngx_uöt_t
 
∑ddög
)

1161 
u_ch¨
 *
d
, *
s
;

1162 
size_t
 
Àn
;

1164 
Àn
 = 
§c
->len;

1165 
s
 = 
§c
->
d©a
;

1166 
d
 = 
d°
->
d©a
;

1168 
Àn
 > 2) {

1169 *
d
++ = 
basis
[(
s
[0] >> 2) & 0x3f];

1170 *
d
++ = 
basis
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1171 *
d
++ = 
basis
[((
s
[1] & 0x0f) << 2) | (s[2] >> 6)];

1172 *
d
++ = 
basis
[
s
[2] & 0x3f];

1174 
s
 += 3;

1175 
Àn
 -= 3;

1178 i‡(
Àn
) {

1179 *
d
++ = 
basis
[(
s
[0] >> 2) & 0x3f];

1181 i‡(
Àn
 == 1) {

1182 *
d
++ = 
basis
[(
s
[0] & 3) << 4];

1183 i‡(
∑ddög
) {

1184 *
d
++ = '=';

1188 *
d
++ = 
basis
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1189 *
d
++ = 
basis
[(
s
[1] & 0x0f) << 2];

1192 i‡(
∑ddög
) {

1193 *
d
++ = '=';

1197 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1198 
	}
}

1201 
ngx_öt_t


1202 
	$ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1204 
u_ch¨
 
basis64
[] = {

1224  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1225 
	}
}

1228 
ngx_öt_t


1229 
	$ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1231 
u_ch¨
 
basis64
[] = {

1251  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1252 
	}
}

1255 
ngx_öt_t


1256 
	$ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
)

1258 
size_t
 
Àn
;

1259 
u_ch¨
 *
d
, *
s
;

1261 
Àn
 = 0;Üí < 
§c
->len;Üen++) {

1262 i‡(
§c
->
d©a
[
Àn
] == '=') {

1266 i‡(
basis
[
§c
->
d©a
[
Àn
]] == 77) {

1267  
NGX_ERROR
;

1271 i‡(
Àn
 % 4 == 1) {

1272  
NGX_ERROR
;

1275 
s
 = 
§c
->
d©a
;

1276 
d
 = 
d°
->
d©a
;

1278 
Àn
 > 3) {

1279 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1280 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1281 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[2]] << 6 | basis[s[3]]);

1283 
s
 += 4;

1284 
Àn
 -= 4;

1287 i‡(
Àn
 > 1) {

1288 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1291 i‡(
Àn
 > 2) {

1292 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1295 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1297  
NGX_OK
;

1298 
	}
}

1310 
uöt32_t


1311 
	$ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
)

1313 
size_t
 
Àn
;

1314 
uöt32_t
 
u
, 
i
, 
vÆid
;

1316 
u
 = **
p
;

1318 i‡(
u
 >= 0xf0) {

1320 
u
 &= 0x07;

1321 
vÆid
 = 0xffff;

1322 
Àn
 = 3;

1324 } i‡(
u
 >= 0xe0) {

1326 
u
 &= 0x0f;

1327 
vÆid
 = 0x7ff;

1328 
Àn
 = 2;

1330 } i‡(
u
 >= 0xc2) {

1332 
u
 &= 0x1f;

1333 
vÆid
 = 0x7f;

1334 
Àn
 = 1;

1337 (*
p
)++;

1341 i‡(
n
 - 1 < 
Àn
) {

1345 (*
p
)++;

1347 
Àn
) {

1348 
i
 = *(*
p
)++;

1350 i‡(
i
 < 0x80) {

1354 
u
 = (u << 6Ë| (
i
 & 0x3f);

1356 
Àn
--;

1359 i‡(
u
 > 
vÆid
) {

1360  
u
;

1364 
	}
}

1367 
size_t


1368 
	$ngx_utf8_Àngth
(
u_ch¨
 *
p
, 
size_t
 
n
)

1370 
u_ch¨
 
c
, *
œ°
;

1371 
size_t
 
Àn
;

1373 
œ°
 = 
p
 + 
n
;

1375 
Àn
 = 0; 
p
 < 
œ°
;Üen++) {

1377 
c
 = *
p
;

1379 i‡(
c
 < 0x80) {

1380 
p
++;

1384 i‡(
	`ngx_utf8_decode
(&
p
, 
n
) > 0x10ffff) {

1386  
n
;

1390  
Àn
;

1391 
	}
}

1394 
u_ch¨
 *

1395 
	$ngx_utf8_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
)

1397 
u_ch¨
 
c
, *
√xt
;

1399 i‡(
n
 == 0) {

1400  
d°
;

1403 --
n
) {

1405 
c
 = *
§c
;

1406 *
d°
 = 
c
;

1408 i‡(
c
 < 0x80) {

1410 i‡(
c
 != '\0') {

1411 
d°
++;

1412 
§c
++;

1413 
Àn
--;

1418  
d°
;

1421 
√xt
 = 
§c
;

1423 i‡(
	`ngx_utf8_decode
(&
√xt
, 
Àn
) > 0x10ffff) {

1428 
§c
 < 
√xt
) {

1429 *
d°
++ = *
§c
++;

1430 
Àn
--;

1434 *
d°
 = '\0';

1436  
d°
;

1437 
	}
}

1440 
uöçå_t


1441 
	$ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1443 
ngx_uöt_t
 
n
;

1444 
uöt32_t
 *
esˇ≥
;

1445 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

1449 
uöt32_t
 
uri
[] = {

1469 
uöt32_t
 
¨gs
[] = {

1489 
uöt32_t
 
uri_comp⁄ít
[] = {

1509 
uöt32_t
 
html
[] = {

1529 
uöt32_t
 
ª‰esh
[] = {

1549 
uöt32_t
 
memˇched
[] = {

1569 
uöt32_t
 *
m≠
[] =

1570 { 
uri
, 
¨gs
, 
uri_comp⁄ít
, 
html
, 
ª‰esh
, 
memˇched
, memcached };

1573 
esˇ≥
 = 
m≠
[
ty≥
];

1575 i‡(
d°
 =
NULL
) {

1579 
n
 = 0;

1581 
size
) {

1582 i‡(
esˇ≥
[*
§c
 >> 5] & (1U << (*src & 0x1f))) {

1583 
n
++;

1585 
§c
++;

1586 
size
--;

1589  (
uöçå_t
Ë
n
;

1592 
size
) {

1593 i‡(
esˇ≥
[*
§c
 >> 5] & (1U << (*src & 0x1f))) {

1594 *
d°
++ = '%';

1595 *
d°
++ = 
hex
[*
§c
 >> 4];

1596 *
d°
++ = 
hex
[*
§c
 & 0xf];

1597 
§c
++;

1600 *
d°
++ = *
§c
++;

1602 
size
--;

1605  (
uöçå_t
Ë
d°
;

1606 
	}
}

1610 
	$ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1612 
u_ch¨
 *
d
, *
s
, 
ch
, 
c
, 
decoded
;

1614 
sw_usuÆ
 = 0,

1615 
sw_quŸed
,

1616 
sw_quŸed_£c⁄d


1617 } 
°©e
;

1619 
d
 = *
d°
;

1620 
s
 = *
§c
;

1622 
°©e
 = 0;

1623 
decoded
 = 0;

1625 
size
--) {

1627 
ch
 = *
s
++;

1629 
°©e
) {

1630 
sw_usuÆ
:

1631 i‡(
ch
 == '?'

1632 && (
ty≥
 & (
NGX_UNESCAPE_URI
|
NGX_UNESCAPE_REDIRECT
)))

1634 *
d
++ = 
ch
;

1635 
d⁄e
;

1638 i‡(
ch
 == '%') {

1639 
°©e
 = 
sw_quŸed
;

1643 *
d
++ = 
ch
;

1646 
sw_quŸed
:

1648 i‡(
ch
 >= '0' && ch <= '9') {

1649 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1650 
°©e
 = 
sw_quŸed_£c⁄d
;

1654 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1655 i‡(
c
 >= 'a' && c <= 'f') {

1656 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1657 
°©e
 = 
sw_quŸed_£c⁄d
;

1663 
°©e
 = 
sw_usuÆ
;

1665 *
d
++ = 
ch
;

1669 
sw_quŸed_£c⁄d
:

1671 
°©e
 = 
sw_usuÆ
;

1673 i‡(
ch
 >= '0' && ch <= '9') {

1674 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + (ch - '0'));

1676 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1677 i‡(
ch
 > '%' && ch < 0x7f) {

1678 *
d
++ = 
ch
;

1682 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1687 *
d
++ = 
ch
;

1692 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1693 i‡(
c
 >= 'a' && c <= 'f') {

1694 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ (
c
 - 'a') + 10);

1696 i‡(
ty≥
 & 
NGX_UNESCAPE_URI
) {

1697 i‡(
ch
 == '?') {

1698 *
d
++ = 
ch
;

1699 
d⁄e
;

1702 *
d
++ = 
ch
;

1706 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1707 i‡(
ch
 == '?') {

1708 *
d
++ = 
ch
;

1709 
d⁄e
;

1712 i‡(
ch
 > '%' && ch < 0x7f) {

1713 *
d
++ = 
ch
;

1717 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1721 *
d
++ = 
ch
;

1732 
d⁄e
:

1734 *
d°
 = 
d
;

1735 *
§c
 = 
s
;

1736 
	}
}

1739 
uöçå_t


1740 
	$ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1742 
u_ch¨
 
ch
;

1743 
ngx_uöt_t
 
Àn
;

1745 i‡(
d°
 =
NULL
) {

1747 
Àn
 = 0;

1749 
size
) {

1750 *
§c
++) {

1753 
Àn
 += ("&lt;") - 2;

1757 
Àn
 += ("&gt;") - 2;

1761 
Àn
 += ("&amp;") - 2;

1765 
Àn
 += ("&quot;") - 2;

1771 
size
--;

1774  (
uöçå_t
Ë
Àn
;

1777 
size
) {

1778 
ch
 = *
§c
++;

1780 
ch
) {

1783 *
d°
++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';

1787 *
d°
++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';

1791 *
d°
++ = '&'; *dst++ = 'a'; *dst++ = 'm'; *dst++ = 'p';

1792 *
d°
++ = ';';

1796 *
d°
++ = '&'; *dst++ = 'q'; *dst++ = 'u'; *dst++ = 'o';

1797 *
d°
++ = 't'; *dst++ = ';';

1801 *
d°
++ = 
ch
;

1804 
size
--;

1807  (
uöçå_t
Ë
d°
;

1808 
	}
}

1811 
uöçå_t


1812 
	$ngx_esˇ≥_js⁄
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1814 
u_ch¨
 
ch
;

1815 
ngx_uöt_t
 
Àn
;

1817 i‡(
d°
 =
NULL
) {

1818 
Àn
 = 0;

1820 
size
) {

1821 
ch
 = *
§c
++;

1823 i‡(
ch
 == '\\' || ch == '"') {

1824 
Àn
++;

1826 } i‡(
ch
 <= 0x1f) {

1828 
ch
) {

1834 
Àn
++;

1838 
Àn
 += ("\\u001F") - 2;

1842 
size
--;

1845  (
uöçå_t
Ë
Àn
;

1848 
size
) {

1849 
ch
 = *
§c
++;

1851 i‡(
ch
 > 0x1f) {

1853 i‡(
ch
 == '\\' || ch == '"') {

1854 *
d°
++ = '\\';

1857 *
d°
++ = 
ch
;

1860 *
d°
++ = '\\';

1862 
ch
) {

1864 *
d°
++ = 'n';

1868 *
d°
++ = 'r';

1872 *
d°
++ = 't';

1876 *
d°
++ = 'b';

1880 *
d°
++ = 'f';

1884 *
d°
++ = 'u'; *dst++ = '0'; *dst++ = '0';

1885 *
d°
++ = '0' + (
ch
 >> 4);

1887 
ch
 &= 0xf;

1889 *
d°
++ = (
ch
 < 10) ? ('0' + ch) : ('A' + ch - 10);

1893 
size
--;

1896  (
uöçå_t
Ë
d°
;

1897 
	}
}

1901 
	$ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1902 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1904 
ngx_°r_node_t
 *
n
, *
t
;

1905 
ngx_rbåì_node_t
 **
p
;

1909 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1910 
t
 = (
ngx_°r_node_t
 *Ë
ãmp
;

1912 i‡(
node
->
key
 !
ãmp
->key) {

1914 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

1916 } i‡(
n
->
°r
.
Àn
 !
t
->str.len) {

1918 
p
 = (
n
->
°r
.
Àn
 < 
t
->°r.ÀnË? &
ãmp
->
À·
 : &ãmp->
right
;

1921 
p
 = (
	`ngx_memcmp
(
n
->
°r
.
d©a
, 
t
->°r.d©a,Ç->°r.
Àn
) < 0)

1922 ? &
ãmp
->
À·
 : &ãmp->
right
;

1925 i‡(*
p
 =
£¡öñ
) {

1929 
ãmp
 = *
p
;

1932 *
p
 = 
node
;

1933 
node
->
∑ª¡
 = 
ãmp
;

1934 
node
->
À·
 = 
£¡öñ
;

1935 
node
->
right
 = 
£¡öñ
;

1936 
	`ngx_rbt_ªd
(
node
);

1937 
	}
}

1940 
ngx_°r_node_t
 *

1941 
	$ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
vÆ
, 
uöt32_t
 
hash
)

1943 
ngx_öt_t
 
rc
;

1944 
ngx_°r_node_t
 *
n
;

1945 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1947 
node
 = 
rbåì
->
roŸ
;

1948 
£¡öñ
 = 
rbåì
->sentinel;

1950 
node
 !
£¡öñ
) {

1952 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1954 i‡(
hash
 !
node
->
key
) {

1955 
node
 = (
hash
 <Çode->
key
Ë?Çode->
À·
 :Çode->
right
;

1959 i‡(
vÆ
->
Àn
 !
n
->
°r
.len) {

1960 
node
 = (
vÆ
->
Àn
 < 
n
->
°r
.ÀnË?Çode->
À·
 :Çode->
right
;

1964 
rc
 = 
	`ngx_memcmp
(
vÆ
->
d©a
, 
n
->
°r
.d©a, vÆ->
Àn
);

1966 i‡(
rc
 < 0) {

1967 
node
 =Çode->
À·
;

1971 i‡(
rc
 > 0) {

1972 
node
 =Çode->
right
;

1976  
n
;

1979  
NULL
;

1980 
	}
}

1986 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

1987 
	$ngx_öt_t
 (*
cmp
)(const *, const *))

1989 
u_ch¨
 *
p1
, *
p2
, *
p
;

1991 
p
 = 
	`ngx_Æloc
(
size
, 
ngx_cy˛e
->
log
);

1992 i‡(
p
 =
NULL
) {

1996 
p1
 = (
u_ch¨
 *Ë
ba£
 + 
size
;

1997 
p1
 < (
u_ch¨
 *Ë
ba£
 + 
n
 * 
size
;

1998 
p1
 +
size
)

2000 
	`ngx_mem˝y
(
p
, 
p1
, 
size
);

2002 
p2
 = 
p1
;

2003 
p2
 > (
u_ch¨
 *Ë
ba£
 && 
	`cmp
’2 - 
size
, 
p
) > 0;

2004 
p2
 -
size
)

2006 
	`ngx_mem˝y
(
p2
,Ö2 - 
size
, size);

2009 
	`ngx_mem˝y
(
p2
, 
p
, 
size
);

2012 
	`ngx_‰ì
(
p
);

2013 
	}
}

2016 #i‡(
NGX_MEMCPY_LIMIT
)

2019 
	$ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

2021 i‡(
n
 > 
NGX_MEMCPY_LIMIT
) {

2022 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "mem˝y %uz byãs", 
n
);

2023 
	`ngx_debug_poöt
();

2026  
	`mem˝y
(
d°
, 
§c
, 
n
);

2027 
	}
}

	@src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
ãxt

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
size_t
 
ngx_°∫Àn
(
u_ch¨
 *
p
, size_à
n
);

65 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

67 
ngx_ölöe
 
u_ch¨
 *

68 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

70 
p
 < 
œ°
) {

72 i‡(*
p
 =
c
) {

73  
p
;

76 
p
++;

79  
NULL
;

80 
	}
}

88 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

89 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

92 #i‡(
NGX_MEMCPY_LIMIT
)

94 *
ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

95 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

104 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

105 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

110 #i‡–
__INTEL_COMPILER
 >= 800 )

117 
ngx_ölöe
 
u_ch¨
 *

118 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

120 i‡(
Àn
 < 17) {

122 
Àn
) {

123 *
d°
++ = *
§c
++;

124 
Àn
--;

127  
d°
;

130  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

132 
	}
}

136 
	#ngx_c›y
 
ngx_˝ymem


	)

141 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

142 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

146 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

149 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

150 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

152 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

153 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

155 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

156 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

157 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

159 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

160 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

165 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

166 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

169 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

170 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

171 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

172 
ngx_öt_t
 
ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

174 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

176 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

177 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

178 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

179 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

181 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

184 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

185 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

187 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

189 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

190 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

192 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

193 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

194 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

197 
	#NGX_ESCAPE_URI
 0

	)

198 
	#NGX_ESCAPE_ARGS
 1

	)

199 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

200 
	#NGX_ESCAPE_HTML
 3

	)

201 
	#NGX_ESCAPE_REFRESH
 4

	)

202 
	#NGX_ESCAPE_MEMCACHED
 5

	)

203 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

205 
	#NGX_UNESCAPE_URI
 1

	)

206 
	#NGX_UNESCAPE_REDIRECT
 2

	)

208 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

209 
ngx_uöt_t
 
ty≥
);

210 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

211 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

212 
uöçå_t
 
ngx_esˇ≥_js⁄
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

216 
ngx_rbåì_node_t
 
	mnode
;

217 
ngx_°r_t
 
	m°r
;

218 } 
	tngx_°r_node_t
;

221 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

222 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

223 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

224 
uöt32_t
 
hash
);

227 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

228 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

229 
	#ngx_qs‹t
 
qs‹t


	)

232 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

233 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@src/core/ngx_syslog.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_evít.h
>

12 
	#NGX_SYSLOG_MAX_STR
 \

13 
NGX_MAX_ERROR_STR
 + ("<255>Jan 01 00:00:00 ") - 1 \

14 + (
NGX_MAXHOSTNAMELEN
 - 1) + 1 \

15 + 32 + 2

	)

18 *
ngx_sy¶og_∑r£_¨gs
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
);

19 
ngx_öt_t
 
ngx_sy¶og_öô_≥î
(
ngx_sy¶og_≥î_t
 *
≥î
);

20 
ngx_sy¶og_˛ónup
(*
d©a
);

23 *
	gÁcûôõs
[] = {

27 
NULL


31 *
	g£vîôõs
[] = {

32 "emîg", "Æît", "¸ô", "îr‹", "w¨n", "nŸi˚", "öfo", "debug", 
NULL


35 
ngx_log_t
 
	gngx_sy¶og_dummy_log
;

36 
ngx_evít_t
 
	gngx_sy¶og_dummy_evít
;

40 
	$ngx_sy¶og_¥o˚ss_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
)

42 
ngx_poﬁ_˛ónup_t
 *
˛n
;

44 
≥î
->
Ácûôy
 = 
NGX_CONF_UNSET_UINT
;

45 
≥î
->
£vîôy
 = 
NGX_CONF_UNSET_UINT
;

47 i‡(
	`ngx_sy¶og_∑r£_¨gs
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

48  
NGX_CONF_ERROR
;

51 i‡(
≥î
->
£rvî
.
sockaddr
 =
NULL
) {

52 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

54  
NGX_CONF_ERROR
;

57 i‡(
≥î
->
Ácûôy
 =
NGX_CONF_UNSET_UINT
) {

58 
≥î
->
Ácûôy
 = 23;

61 i‡(
≥î
->
£vîôy
 =
NGX_CONF_UNSET_UINT
) {

62 
≥î
->
£vîôy
 = 6;

65 i‡(
≥î
->
èg
.
d©a
 =
NULL
) {

66 
	`ngx_°r_£t
(&
≥î
->
èg
, "nginx");

69 
≥î
->
c⁄n
.
fd
 = (
ngx_sockë_t
) -1;

71 
≥î
->
c⁄n
.
ªad
 = &
ngx_sy¶og_dummy_evít
;

72 
≥î
->
c⁄n
.
wrôe
 = &
ngx_sy¶og_dummy_evít
;

74 
ngx_sy¶og_dummy_evít
.
log
 = &
ngx_sy¶og_dummy_log
;

76 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

77 i‡(
˛n
 =
NULL
) {

78  
NGX_CONF_ERROR
;

81 
˛n
->
d©a
 = 
≥î
;

82 
˛n
->
h™dÀr
 = 
ngx_sy¶og_˛ónup
;

84  
NGX_CONF_OK
;

85 
	}
}

89 
	$ngx_sy¶og_∑r£_¨gs
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
)

91 
u_ch¨
 *
p
, *
comma
, 
c
;

92 
size_t
 
Àn
;

93 
ngx_°r_t
 *
vÆue
;

94 
ngx_uæ_t
 
u
;

95 
ngx_uöt_t
 
i
;

97 
vÆue
 = 
cf
->
¨gs
->
ñts
;

99 
p
 = 
vÆue
[1].
d©a
 + ("syslog:") - 1;

102 
comma
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
p
, ',');

104 i‡(
comma
 !
NULL
) {

105 
Àn
 = 
comma
 - 
p
;

106 *
comma
 = '\0';

109 
Àn
 = 
vÆue
[1].
d©a
 + vÆue[1].À¿- 
p
;

112 i‡(
	`ngx_°∫cmp
(
p
, "server=", 7) == 0) {

114 i‡(
≥î
->
£rvî
.
sockaddr
 !
NULL
) {

115 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

117  
NGX_CONF_ERROR
;

120 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

122 
u
.
uæ
.
d©a
 = 
p
 + 7;

123 
u
.
uæ
.
Àn
 =Üen - 7;

124 
u
.
deÁu…_p‹t
 = 514;

126 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

127 i‡(
u
.
îr
) {

128 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

130 
u
.
îr
, &u.
uæ
);

133  
NGX_CONF_ERROR
;

136 
≥î
->
£rvî
 = 
u
.
addrs
[0];

138 } i‡(
	`ngx_°∫cmp
(
p
, "facility=", 9) == 0) {

140 i‡(
≥î
->
Ácûôy
 !
NGX_CONF_UNSET_UINT
) {

141 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

143  
NGX_CONF_ERROR
;

146 
i
 = 0; 
Ácûôõs
[i] !
NULL
; i++) {

148 i‡(
	`ngx_°rcmp
(
p
 + 9, 
Ácûôõs
[
i
]) == 0) {

149 
≥î
->
Ácûôy
 = 
i
;

150 
√xt
;

154 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

155 "unknow¿sy¶og facûôy \"%s\"", 
p
 + 9);

156  
NGX_CONF_ERROR
;

158 } i‡(
	`ngx_°∫cmp
(
p
, "severity=", 9) == 0) {

160 i‡(
≥î
->
£vîôy
 !
NGX_CONF_UNSET_UINT
) {

161 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

163  
NGX_CONF_ERROR
;

166 
i
 = 0; 
£vîôõs
[i] !
NULL
; i++) {

168 i‡(
	`ngx_°rcmp
(
p
 + 9, 
£vîôõs
[
i
]) == 0) {

169 
≥î
->
£vîôy
 = 
i
;

170 
√xt
;

174 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

175 "unknow¿sy¶og sevîôy \"%s\"", 
p
 + 9);

176  
NGX_CONF_ERROR
;

178 } i‡(
	`ngx_°∫cmp
(
p
, "tag=", 4) == 0) {

180 i‡(
≥î
->
èg
.
d©a
 !
NULL
) {

181 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

183  
NGX_CONF_ERROR
;

190 i‡(
Àn
 - 4 > 32) {

191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

193  
NGX_CONF_ERROR
;

196 
i
 = 4; i < 
Àn
; i++) {

197 
c
 = 
	`ngx_tﬁowî
(
p
[
i
]);

199 i‡(
c
 < '0' || (c > '9' && c < 'a' && c != '_') || c > 'z') {

200 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

204  
NGX_CONF_ERROR
;

208 
≥î
->
èg
.
d©a
 = 
p
 + 4;

209 
≥î
->
èg
.
Àn
 =Üen - 4;

211 } i‡(
Àn
 =10 && 
	`ngx_°∫cmp
(
p
, "nohostname", 10) == 0) {

212 
≥î
->
noho°«me
 = 1;

215 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

216 "unknow¿sy¶ogÖ¨amëî \"%s\"", 
p
);

217  
NGX_CONF_ERROR
;

220 
√xt
:

222 i‡(
comma
 =
NULL
) {

226 
p
 = 
comma
 + 1;

229  
NGX_CONF_OK
;

230 
	}
}

233 
u_ch¨
 *

234 
	$ngx_sy¶og_add_hódî
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
)

236 
ngx_uöt_t
 
¥i
;

238 
¥i
 = 
≥î
->
Ácûôy
 * 8 +Öìr->
£vîôy
;

240 i‡(
≥î
->
noho°«me
) {

241  
	`ngx_•rötf
(
buf
, "<%ui>%V %V: ", 
¥i
, &
ngx_ˇched_sy¶og_time
,

242 &
≥î
->
èg
);

245  
	`ngx_•rötf
(
buf
, "<%ui>%V %V %V: ", 
¥i
, &
ngx_ˇched_sy¶og_time
,

246 &
ngx_cy˛e
->
ho°«me
, &
≥î
->
èg
);

247 
	}
}

251 
	$ngx_sy¶og_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

252 
size_t
 
Àn
)

254 
u_ch¨
 *
p
, 
msg
[
NGX_SYSLOG_MAX_STR
];

255 
ngx_uöt_t
 
hód_Àn
;

256 
ngx_sy¶og_≥î_t
 *
≥î
;

258 
≥î
 = 
log
->
wd©a
;

260 i‡(
≥î
->
busy
) {

264 
≥î
->
busy
 = 1;

265 
≥î
->
£vîôy
 = 
Àvñ
 - 1;

267 
p
 = 
	`ngx_sy¶og_add_hódî
(
≥î
, 
msg
);

268 
hód_Àn
 = 
p
 - 
msg
;

270 
Àn
 -
NGX_LINEFEED_SIZE
;

272 i‡(
Àn
 > 
NGX_SYSLOG_MAX_STR
 - 
hód_Àn
) {

273 
Àn
 = 
NGX_SYSLOG_MAX_STR
 - 
hód_Àn
;

276 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, "%s", 
buf
);

278 (Ë
	`ngx_sy¶og_£nd
(
≥î
, 
msg
, 
p
 - msg);

280 
≥î
->
busy
 = 0;

281 
	}
}

284 
ssize_t


285 
	$ngx_sy¶og_£nd
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

287 
ssize_t
 
n
;

289 i‡(
≥î
->
c⁄n
.
fd
 =(
ngx_sockë_t
) -1) {

290 i‡(
	`ngx_sy¶og_öô_≥î
(
≥î
Ë!
NGX_OK
) {

291  
NGX_ERROR
;

296 
≥î
->
c⁄n
.
log
 = 
ngx_cy˛e
->log;

298 i‡(
ngx_£nd
) {

299 
n
 = 
	`ngx_£nd
(&
≥î
->
c⁄n
, 
buf
, 
Àn
);

303 
n
 = 
ngx_os_io
.
	`£nd
(&
≥î
->
c⁄n
, 
buf
, 
Àn
);

306 i‡(
n
 =
NGX_ERROR
) {

308 i‡(
	`ngx_˛o£_sockë
(
≥î
->
c⁄n
.
fd
) == -1) {

309 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

310 
ngx_˛o£_sockë_n
 " failed");

313 
≥î
->
c⁄n
.
fd
 = (
ngx_sockë_t
) -1;

316  
n
;

317 
	}
}

320 
ngx_öt_t


321 
	$ngx_sy¶og_öô_≥î
(
ngx_sy¶og_≥î_t
 *
≥î
)

323 
ngx_sockë_t
 
fd
;

325 
fd
 = 
	`ngx_sockë
(
≥î
->
£rvî
.
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

326 i‡(
fd
 =(
ngx_sockë_t
) -1) {

327 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

328 
ngx_sockë_n
 " failed");

329  
NGX_ERROR
;

332 i‡(
	`ngx_n⁄blockög
(
fd
) == -1) {

333 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

334 
ngx_n⁄blockög_n
 " failed");

335 
Áûed
;

338 i‡(
	`c⁄√˘
(
fd
, 
≥î
->
£rvî
.
sockaddr
,Öìr->£rvî.
sockÀn
) == -1) {

339 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

341 
Áûed
;

344 
≥î
->
c⁄n
.
fd
 = fd;

347 
≥î
->
c⁄n
.
wrôe
->
ªady
 = 1;

349  
NGX_OK
;

351 
Áûed
:

353 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

354 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

355 
ngx_˛o£_sockë_n
 " failed");

358  
NGX_ERROR
;

359 
	}
}

363 
	$ngx_sy¶og_˛ónup
(*
d©a
)

365 
ngx_sy¶og_≥î_t
 *
≥î
 = 
d©a
;

368 
≥î
->
busy
 = 1;

370 i‡(
≥î
->
c⁄n
.
fd
 =(
ngx_sockë_t
) -1) {

374 i‡(
	`ngx_˛o£_sockë
(
≥î
->
c⁄n
.
fd
) == -1) {

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

376 
ngx_˛o£_sockë_n
 " failed");

378 
	}
}

	@src/core/ngx_syslog.h

7 #i‚de‡
_NGX_SYSLOG_H_INCLUDED_


8 
	#_NGX_SYSLOG_H_INCLUDED_


	)

12 
ngx_uöt_t
 
	mÁcûôy
;

13 
ngx_uöt_t
 
	m£vîôy
;

14 
ngx_°r_t
 
	mèg
;

16 
ngx_addr_t
 
	m£rvî
;

17 
ngx_c⁄√˘i⁄_t
 
	mc⁄n
;

18 
	mbusy
:1;

19 
	mnoho°«me
:1;

20 } 
	tngx_sy¶og_≥î_t
;

23 *
ngx_sy¶og_¥o˚ss_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
);

24 
u_ch¨
 *
ngx_sy¶og_add_hódî
(
ngx_sy¶og_≥î_t
 *
≥î
, u_ch¨ *
buf
);

25 
ngx_sy¶og_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

26 
size_t
 
Àn
);

27 
ssize_t
 
ngx_sy¶og_£nd
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

	@src/core/ngx_thread_pool.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_thªad_poﬁ.h
>

15 
ngx_¨øy_t
 
	mpoﬁs
;

16 } 
	tngx_thªad_poﬁ_c⁄f_t
;

20 
ngx_thªad_èsk_t
 *
	mfú°
;

21 
ngx_thªad_èsk_t
 **
	mœ°
;

22 } 
	tngx_thªad_poﬁ_queue_t
;

24 
	#ngx_thªad_poﬁ_queue_öô
(
q
) \

25 (
q
)->
fú°
 = 
NULL
; \

26 (
q
)->
œ°
 = &(q)->
fú°


	)

29 
	sngx_thªad_poﬁ_s
 {

30 
ngx_thªad_muãx_t
 
	mmtx
;

31 
ngx_thªad_poﬁ_queue_t
 
	mqueue
;

32 
ngx_öt_t
 
	mwaôög
;

33 
ngx_thªad_c⁄d_t
 
	mc⁄d
;

35 
ngx_log_t
 *
	mlog
;

37 
ngx_°r_t
 
	m«me
;

38 
ngx_uöt_t
 
	mthªads
;

39 
ngx_öt_t
 
	mmax_queue
;

41 
u_ch¨
 *
	mfûe
;

42 
ngx_uöt_t
 
	mlöe
;

46 
ngx_öt_t
 
ngx_thªad_poﬁ_öô
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_log_t
 *
log
,

47 
ngx_poﬁ_t
 *
poﬁ
);

48 
ngx_thªad_poﬁ_de°roy
(
ngx_thªad_poﬁ_t
 *
ç
);

49 
ngx_thªad_poﬁ_exô_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

51 *
ngx_thªad_poﬁ_cy˛e
(*
d©a
);

52 
ngx_thªad_poﬁ_h™dÀr
(
ngx_evít_t
 *
ev
);

54 *
ngx_thªad_poﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_thªad_poﬁ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

57 *
ngx_thªad_poﬁ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

59 
ngx_öt_t
 
ngx_thªad_poﬁ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

60 
ngx_thªad_poﬁ_exô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_comm™d_t
 
	gngx_thªad_poﬁ_comm™ds
[] = {

65 { 
ngx_°rög
("thread_pool"),

66 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE23
,

67 
ngx_thªad_poﬁ
,

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_c‹e_moduÀ_t
 
	gngx_thªad_poﬁ_moduÀ_˘x
 = {

77 
ngx_°rög
("thread_pool"),

78 
ngx_thªad_poﬁ_¸óã_c⁄f
,

79 
ngx_thªad_poﬁ_öô_c⁄f


83 
ngx_moduÀ_t
 
	gngx_thªad_poﬁ_moduÀ
 = {

84 
NGX_MODULE_V1
,

85 &
ngx_thªad_poﬁ_moduÀ_˘x
,

86 
ngx_thªad_poﬁ_comm™ds
,

87 
NGX_CORE_MODULE
,

88 
NULL
,

89 
NULL
,

90 
ngx_thªad_poﬁ_öô_w‹kî
,

91 
NULL
,

92 
NULL
,

93 
ngx_thªad_poﬁ_exô_w‹kî
,

94 
NULL
,

95 
NGX_MODULE_V1_PADDING


99 
ngx_°r_t
 
	gngx_thªad_poﬁ_deÁu…
 = 
ngx_°rög
("default");

101 
ngx_uöt_t
 
	gngx_thªad_poﬁ_èsk_id
;

102 
ngx_©omic_t
 
	gngx_thªad_poﬁ_d⁄e_lock
;

103 
ngx_thªad_poﬁ_queue_t
 
	gngx_thªad_poﬁ_d⁄e
;

106 
ngx_öt_t


107 
	$ngx_thªad_poﬁ_öô
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_log_t
 *
log
, 
ngx_poﬁ_t
 *
poﬁ
)

109 
îr
;

110 
±hªad_t
 
tid
;

111 
ngx_uöt_t
 
n
;

112 
±hªad_©å_t
 
©å
;

114 i‡(
ngx_nŸify
 =
NULL
) {

115 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

117  
NGX_ERROR
;

120 
	`ngx_thªad_poﬁ_queue_öô
(&
ç
->
queue
);

122 i‡(
	`ngx_thªad_muãx_¸óã
(&
ç
->
mtx
, 
log
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 i‡(
	`ngx_thªad_c⁄d_¸óã
(&
ç
->
c⁄d
, 
log
Ë!
NGX_OK
) {

127 (Ë
	`ngx_thªad_muãx_de°roy
(&
ç
->
mtx
, 
log
);

128  
NGX_ERROR
;

131 
ç
->
log
 =Üog;

133 
îr
 = 
	`±hªad_©å_öô
(&
©å
);

134 i‡(
îr
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

137  
NGX_ERROR
;

140 
îr
 = 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

141 i‡(
îr
) {

142 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

144  
NGX_ERROR
;

148 
îr
 = 
	`±hªad_©å_£t°acksize
(&
©å
, 
PTHREAD_STACK_MIN
);

149 i‡(
îr
) {

150 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

152  
NGX_ERROR
;

156 
n
 = 0;Ç < 
ç
->
thªads
;Ç++) {

157 
îr
 = 
	`±hªad_¸óã
(&
tid
, &
©å
, 
ngx_thªad_poﬁ_cy˛e
, 
ç
);

158 i‡(
îr
) {

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

161  
NGX_ERROR
;

165 (Ë
	`±hªad_©å_de°roy
(&
©å
);

167  
NGX_OK
;

168 
	}
}

172 
	$ngx_thªad_poﬁ_de°roy
(
ngx_thªad_poﬁ_t
 *
ç
)

174 
ngx_uöt_t
 
n
;

175 
ngx_thªad_èsk_t
 
èsk
;

176 vﬁ©ûê
ngx_uöt_t
 
lock
;

178 
	`ngx_memzîo
(&
èsk
, (
ngx_thªad_èsk_t
));

180 
èsk
.
h™dÀr
 = 
ngx_thªad_poﬁ_exô_h™dÀr
;

181 
èsk
.
˘x
 = (*Ë&
lock
;

183 
n
 = 0;Ç < 
ç
->
thªads
;Ç++) {

184 
lock
 = 1;

186 i‡(
	`ngx_thªad_èsk_po°
(
ç
, &
èsk
Ë!
NGX_OK
) {

190 
lock
) {

191 
	`ngx_sched_yõld
();

194 
èsk
.
evít
.
a˘ive
 = 0;

197 (Ë
	`ngx_thªad_c⁄d_de°roy
(&
ç
->
c⁄d
,Åp->
log
);

199 (Ë
	`ngx_thªad_muãx_de°roy
(&
ç
->
mtx
,Åp->
log
);

200 
	}
}

204 
	$ngx_thªad_poﬁ_exô_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

206 
ngx_uöt_t
 *
lock
 = 
d©a
;

208 *
lock
 = 0;

210 
	`±hªad_exô
(0);

211 
	}
}

214 
ngx_thªad_èsk_t
 *

215 
	$ngx_thªad_èsk_Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

217 
ngx_thªad_èsk_t
 *
èsk
;

219 
èsk
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_thªad_èsk_t
Ë+ 
size
);

220 i‡(
èsk
 =
NULL
) {

221  
NULL
;

224 
èsk
->
˘x
 =Åask + 1;

226  
èsk
;

227 
	}
}

230 
ngx_öt_t


231 
	$ngx_thªad_èsk_po°
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_thªad_èsk_t
 *
èsk
)

233 i‡(
èsk
->
evít
.
a˘ive
) {

234 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ç
->
log
, 0,

235 "èsk #%uòÆªadyá˘ive", 
èsk
->
id
);

236  
NGX_ERROR
;

239 i‡(
	`ngx_thªad_muãx_lock
(&
ç
->
mtx
,Åp->
log
Ë!
NGX_OK
) {

240  
NGX_ERROR
;

243 i‡(
ç
->
waôög
 >ç->
max_queue
) {

244 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ç
->
log
, 0,

248 &
ç
->
«me
,Åp->
waôög
);

249  
NGX_ERROR
;

252 
èsk
->
evít
.
a˘ive
 = 1;

254 
èsk
->
id
 = 
ngx_thªad_poﬁ_èsk_id
++;

255 
èsk
->
√xt
 = 
NULL
;

257 i‡(
	`ngx_thªad_c⁄d_sig«l
(&
ç
->
c⁄d
,Åp->
log
Ë!
NGX_OK
) {

258 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

259  
NGX_ERROR
;

262 *
ç
->
queue
.
œ°
 = 
èsk
;

263 
ç
->
queue
.
œ°
 = &
èsk
->
√xt
;

265 
ç
->
waôög
++;

267 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

269 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

271 
èsk
->
id
, &
ç
->
«me
);

273  
NGX_OK
;

274 
	}
}

278 
	$ngx_thªad_poﬁ_cy˛e
(*
d©a
)

280 
ngx_thªad_poﬁ_t
 *
ç
 = 
d©a
;

282 
îr
;

283 
sig£t_t
 
£t
;

284 
ngx_thªad_èsk_t
 *
èsk
;

287 
	`ngx_time_upd©e
();

290 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

291 "thªad i¿poﬁ \"%V\" sèπed", &
ç
->
«me
);

293 
	`sigfûl£t
(&
£t
);

295 
	`sigdñ£t
(&
£t
, 
SIGILL
);

296 
	`sigdñ£t
(&
£t
, 
SIGFPE
);

297 
	`sigdñ£t
(&
£t
, 
SIGSEGV
);

298 
	`sigdñ£t
(&
£t
, 
SIGBUS
);

300 
îr
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

301 i‡(
îr
) {

302 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ç
->
log
, 
îr
, "pthread_sigmask() failed");

303  
NULL
;

307 i‡(
	`ngx_thªad_muãx_lock
(&
ç
->
mtx
,Åp->
log
Ë!
NGX_OK
) {

308  
NULL
;

312 
ç
->
waôög
--;

314 
ç
->
queue
.
fú°
 =
NULL
) {

315 i‡(
	`ngx_thªad_c⁄d_waô
(&
ç
->
c⁄d
, &ç->
mtx
,Åp->
log
)

316 !
NGX_OK
)

318 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

319  
NULL
;

323 
èsk
 = 
ç
->
queue
.
fú°
;

324 
ç
->
queue
.
fú°
 = 
èsk
->
√xt
;

326 i‡(
ç
->
queue
.
fú°
 =
NULL
) {

327 
ç
->
queue
.
œ°
 = &ç->queue.
fú°
;

330 i‡(
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
Ë!
NGX_OK
) {

331  
NULL
;

335 
	`ngx_time_upd©e
();

338 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

340 
èsk
->
id
, &
ç
->
«me
);

342 
èsk
->
	`h™dÀr
—ask->
˘x
, 
ç
->
log
);

344 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

346 
èsk
->
id
, &
ç
->
«me
);

348 
èsk
->
√xt
 = 
NULL
;

350 
	`ngx_•ölock
(&
ngx_thªad_poﬁ_d⁄e_lock
, 1, 2048);

352 *
ngx_thªad_poﬁ_d⁄e
.
œ°
 = 
èsk
;

353 
ngx_thªad_poﬁ_d⁄e
.
œ°
 = &
èsk
->
√xt
;

355 
	`ngx_mem‹y_b¨rõr
();

357 
	`ngx_u∆ock
(&
ngx_thªad_poﬁ_d⁄e_lock
);

359 (Ë
	`ngx_nŸify
(
ngx_thªad_poﬁ_h™dÀr
);

361 
	}
}

365 
	$ngx_thªad_poﬁ_h™dÀr
(
ngx_evít_t
 *
ev
)

367 
ngx_evít_t
 *
evít
;

368 
ngx_thªad_èsk_t
 *
èsk
;

370 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "threadÖool handler");

372 
	`ngx_•ölock
(&
ngx_thªad_poﬁ_d⁄e_lock
, 1, 2048);

374 
èsk
 = 
ngx_thªad_poﬁ_d⁄e
.
fú°
;

375 
ngx_thªad_poﬁ_d⁄e
.
fú°
 = 
NULL
;

376 
ngx_thªad_poﬁ_d⁄e
.
œ°
 = &ngx_thªad_poﬁ_d⁄e.
fú°
;

378 
	`ngx_mem‹y_b¨rõr
();

380 
	`ngx_u∆ock
(&
ngx_thªad_poﬁ_d⁄e_lock
);

382 
èsk
) {

383 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

384 "ru¿com∂ëi⁄ h™dÀ∏f‹Åask #%ui", 
èsk
->
id
);

386 
evít
 = &
èsk
->event;

387 
èsk
 =Åask->
√xt
;

389 
evít
->
com∂ëe
 = 1;

390 
evít
->
a˘ive
 = 0;

392 
evít
->
	`h™dÀr
(event);

394 
	}
}

398 
	$ngx_thªad_poﬁ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

400 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

402 
tcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_thªad_poﬁ_c⁄f_t
));

403 i‡(
tcf
 =
NULL
) {

404  
NULL
;

407 i‡(
	`ngx_¨øy_öô
(&
tcf
->
poﬁs
, 
cy˛e
->
poﬁ
, 4,

408 (
ngx_thªad_poﬁ_t
 *))

409 !
NGX_OK
)

411  
NULL
;

414  
tcf
;

415 
	}
}

419 
	$ngx_thªad_poﬁ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

421 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
 = 
c⁄f
;

423 
ngx_uöt_t
 
i
;

424 
ngx_thªad_poﬁ_t
 **
çp
;

426 
çp
 = 
tcf
->
poﬁs
.
ñts
;

428 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

430 i‡(
çp
[
i
]->
thªads
) {

434 i‡(
çp
[
i
]->
«me
.
Àn
 =
ngx_thªad_poﬁ_deÁu…
.len

435 && 
	`ngx_°∫cmp
(
çp
[
i
]->
«me
.
d©a
, 
ngx_thªad_poﬁ_deÁu…
.data,

436 
ngx_thªad_poﬁ_deÁu…
.
Àn
)

439 
çp
[
i
]->
thªads
 = 32;

440 
çp
[
i
]->
max_queue
 = 65536;

444 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

446 &
çp
[
i
]->
«me
,Åµ[i]->
fûe
,Åµ[i]->
löe
);

448  
NGX_CONF_ERROR
;

451  
NGX_CONF_OK
;

452 
	}
}

456 
	$ngx_thªad_poﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

458 
ngx_°r_t
 *
vÆue
;

459 
ngx_uöt_t
 
i
;

460 
ngx_thªad_poﬁ_t
 *
ç
;

462 
vÆue
 = 
cf
->
¨gs
->
ñts
;

464 
ç
 = 
	`ngx_thªad_poﬁ_add
(
cf
, &
vÆue
[1]);

466 i‡(
ç
 =
NULL
) {

467  
NGX_CONF_ERROR
;

470 i‡(
ç
->
thªads
) {

471 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

472 "du∂iˇãÅhªadÖoﬁ \"%V\"", &
ç
->
«me
);

473  
NGX_CONF_ERROR
;

476 
ç
->
max_queue
 = 65536;

478 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

480 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "threads=", 8) == 0) {

482 
ç
->
thªads
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 8, vÆue[i].
Àn
 - 8);

484 i‡(
ç
->
thªads
 =(
ngx_uöt_t
Ë
NGX_ERROR
 ||Åp->threads == 0) {

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

486 "övÆidÅhªad†vÆuê\"%V\"", &
vÆue
[
i
]);

487  
NGX_CONF_ERROR
;

493 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_queue=", 10) == 0) {

495 
ç
->
max_queue
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 10, vÆue[i].
Àn
 - 10);

497 i‡(
ç
->
max_queue
 =
NGX_ERROR
) {

498 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

499 "övÆid max_queuêvÆuê\"%V\"", &
vÆue
[
i
]);

500  
NGX_CONF_ERROR
;

507 i‡(
ç
->
thªads
 == 0) {

508 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

510 &
cmd
->
«me
);

511  
NGX_CONF_ERROR
;

514  
NGX_CONF_OK
;

515 
	}
}

518 
ngx_thªad_poﬁ_t
 *

519 
	$ngx_thªad_poﬁ_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

521 
ngx_thªad_poﬁ_t
 *
ç
, **
çp
;

522 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

524 i‡(
«me
 =
NULL
) {

525 
«me
 = &
ngx_thªad_poﬁ_deÁu…
;

528 
ç
 = 
	`ngx_thªad_poﬁ_gë
(
cf
->
cy˛e
, 
«me
);

530 i‡(
ç
) {

531  
ç
;

534 
ç
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_thªad_poﬁ_t
));

535 i‡(
ç
 =
NULL
) {

536  
NULL
;

539 
ç
->
«me
 = *name;

540 
ç
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

541 
ç
->
löe
 = 
cf
->
c⁄f_fûe
->line;

543 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
,

544 
ngx_thªad_poﬁ_moduÀ
);

546 
çp
 = 
	`ngx_¨øy_push
(&
tcf
->
poﬁs
);

547 i‡(
çp
 =
NULL
) {

548  
NULL
;

551 *
çp
 = 
ç
;

553  
ç
;

554 
	}
}

557 
ngx_thªad_poﬁ_t
 *

558 
	$ngx_thªad_poﬁ_gë
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

560 
ngx_uöt_t
 
i
;

561 
ngx_thªad_poﬁ_t
 **
çp
;

562 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

564 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

565 
ngx_thªad_poﬁ_moduÀ
);

567 
çp
 = 
tcf
->
poﬁs
.
ñts
;

569 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

571 i‡(
çp
[
i
]->
«me
.
Àn
 ==Çame->len

572 && 
	`ngx_°∫cmp
(
çp
[
i
]->
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0)

574  
çp
[
i
];

578  
NULL
;

579 
	}
}

582 
ngx_öt_t


583 
	$ngx_thªad_poﬁ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

585 
ngx_uöt_t
 
i
;

586 
ngx_thªad_poﬁ_t
 **
çp
;

587 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

589 i‡(
ngx_¥o˚ss
 !
NGX_PROCESS_WORKER


590 && 
ngx_¥o˚ss
 !
NGX_PROCESS_SINGLE
)

592  
NGX_OK
;

595 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

596 
ngx_thªad_poﬁ_moduÀ
);

598 i‡(
tcf
 =
NULL
) {

599  
NGX_OK
;

602 
	`ngx_thªad_poﬁ_queue_öô
(&
ngx_thªad_poﬁ_d⁄e
);

604 
çp
 = 
tcf
->
poﬁs
.
ñts
;

606 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

607 i‡(
	`ngx_thªad_poﬁ_öô
(
çp
[
i
], 
cy˛e
->
log
, cy˛e->
poﬁ
Ë!
NGX_OK
) {

608  
NGX_ERROR
;

612  
NGX_OK
;

613 
	}
}

617 
	$ngx_thªad_poﬁ_exô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

619 
ngx_uöt_t
 
i
;

620 
ngx_thªad_poﬁ_t
 **
çp
;

621 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

623 i‡(
ngx_¥o˚ss
 !
NGX_PROCESS_WORKER


624 && 
ngx_¥o˚ss
 !
NGX_PROCESS_SINGLE
)

629 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

630 
ngx_thªad_poﬁ_moduÀ
);

632 i‡(
tcf
 =
NULL
) {

636 
çp
 = 
tcf
->
poﬁs
.
ñts
;

638 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

639 
	`ngx_thªad_poﬁ_de°roy
(
çp
[
i
]);

641 
	}
}

	@src/core/ngx_thread_pool.h

8 #i‚de‡
_NGX_THREAD_POOL_H_INCLUDED_


9 
	#_NGX_THREAD_POOL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	sngx_thªad_èsk_s
 {

18 
ngx_thªad_èsk_t
 *
	m√xt
;

19 
ngx_uöt_t
 
	mid
;

20 *
	m˘x
;

21 (*
	mh™dÀr
)(*
	md©a
, 
ngx_log_t
 *
	mlog
);

22 
ngx_evít_t
 
	mevít
;

26 
ngx_thªad_poﬁ_s
 
	tngx_thªad_poﬁ_t
;

29 
ngx_thªad_poﬁ_t
 *
ngx_thªad_poﬁ_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

30 
ngx_thªad_poﬁ_t
 *
ngx_thªad_poﬁ_gë
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

32 
ngx_thªad_èsk_t
 *
ngx_thªad_èsk_Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

33 
ngx_öt_t
 
ngx_thªad_èsk_po°
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_thªad_èsk_t
 *
èsk
);

	@src/core/ngx_times.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_m£c_t
 
ngx_m⁄Ÿ⁄ic_time
(
time_t
 
£c
, 
ngx_uöt_t
 
m£c
);

24 
	#NGX_TIME_SLOTS
 64

	)

26 
ngx_uöt_t
 
	g¶Ÿ
;

27 
ngx_©omic_t
 
	gngx_time_lock
;

29 vﬁ©ûê
ngx_m£c_t
 
	gngx_cuºít_m£c
;

30 vﬁ©ûê
ngx_time_t
 *
	gngx_ˇched_time
;

31 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_îr_log_time
;

32 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_time
;

33 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_time
;

34 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_iso8601
;

35 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_sy¶og_time
;

37 #i‡!(
NGX_WIN32
)

45 
ngx_öt_t
 
	gˇched_gmtoff
;

48 
ngx_time_t
 
	gˇched_time
[
NGX_TIME_SLOTS
];

49 
u_ch¨
 
	gˇched_îr_log_time
[
NGX_TIME_SLOTS
]

51 
u_ch¨
 
	gˇched_hâp_time
[
NGX_TIME_SLOTS
]

53 
u_ch¨
 
	gˇched_hâp_log_time
[
NGX_TIME_SLOTS
]

55 
u_ch¨
 
	gˇched_hâp_log_iso8601
[
NGX_TIME_SLOTS
]

57 
u_ch¨
 
	gˇched_sy¶og_time
[
NGX_TIME_SLOTS
]

61 *
	gwìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

62 *
	gm⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

66 
	$ngx_time_öô
()

68 
ngx_ˇched_îr_log_time
.
Àn
 = ("1970/09/28 12:00:00") - 1;

69 
ngx_ˇched_hâp_time
.
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT") - 1;

70 
ngx_ˇched_hâp_log_time
.
Àn
 = ("28/Sep/1970:12:00:00 +0600") - 1;

71 
ngx_ˇched_hâp_log_iso8601
.
Àn
 = ("1970-09-28T12:00:00+06:00") - 1;

72 
ngx_ˇched_sy¶og_time
.
Àn
 = ("Sep 28 12:00:00") - 1;

74 
ngx_ˇched_time
 = &
ˇched_time
[0];

76 
	`ngx_time_upd©e
();

77 
	}
}

81 
	$ngx_time_upd©e
()

83 
u_ch¨
 *
p0
, *
p1
, *
p2
, *
p3
, *
p4
;

84 
ngx_tm_t
 
tm
, 
gmt
;

85 
time_t
 
£c
;

86 
ngx_uöt_t
 
m£c
;

87 
ngx_time_t
 *
ç
;

88 
timevÆ
 
tv
;

90 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

94 
	`ngx_gëtimeofday
(&
tv
);

96 
£c
 = 
tv
.
tv_£c
;

97 
m£c
 = 
tv
.
tv_u£c
 / 1000;

99 
ngx_cuºít_m£c
 = 
	`ngx_m⁄Ÿ⁄ic_time
(
£c
, 
m£c
);

101 
ç
 = &
ˇched_time
[
¶Ÿ
];

103 i‡(
ç
->
£c
 == sec) {

104 
ç
->
m£c
 = msec;

105 
	`ngx_u∆ock
(&
ngx_time_lock
);

109 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

110 
¶Ÿ
 = 0;

112 
¶Ÿ
++;

115 
ç
 = &
ˇched_time
[
¶Ÿ
];

117 
ç
->
£c
 = sec;

118 
ç
->
m£c
 = msec;

120 
	`ngx_gmtime
(
£c
, &
gmt
);

123 
p0
 = &
ˇched_hâp_time
[
¶Ÿ
][0];

125 (Ë
	`ngx_•rötf
(
p0
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

126 
wìk
[
gmt
.
ngx_tm_wday
], gmt.
ngx_tm_mday
,

127 
m⁄ths
[
gmt
.
ngx_tm_m⁄
 - 1], gmt.
ngx_tm_yór
,

128 
gmt
.
ngx_tm_hour
, gmt.
ngx_tm_mö
, gmt.
ngx_tm_£c
);

130 #i‡(
NGX_HAVE_GETTIMEZONE
)

132 
ç
->
gmtoff
 = 
	`ngx_gëtimez⁄e
();

133 
	`ngx_gmtime
(
£c
 + 
ç
->
gmtoff
 * 60, &
tm
);

135 #ñi‡(
NGX_HAVE_GMTOFF
)

137 
	`ngx_loˇ…ime
(
£c
, &
tm
);

138 
ˇched_gmtoff
 = (
ngx_öt_t
Ë(
tm
.
ngx_tm_gmtoff
 / 60);

139 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

143 
	`ngx_loˇ…ime
(
£c
, &
tm
);

144 
ˇched_gmtoff
 = 
	`ngx_timez⁄e
(
tm
.
ngx_tm_isd°
);

145 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

150 
p1
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

152 (Ë
	`ngx_•rötf
(
p1
, "%4d/%02d/%02d %02d:%02d:%02d",

153 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

154 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

155 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

158 
p2
 = &
ˇched_hâp_log_time
[
¶Ÿ
][0];

160 (Ë
	`ngx_•rötf
(
p2
, "%02d/%s/%d:%02d:%02d:%02d %c%02i%02i",

161 
tm
.
ngx_tm_mday
, 
m⁄ths
[tm.
ngx_tm_m⁄
 - 1],

162 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_hour
,

163 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

164 
ç
->
gmtoff
 < 0 ? '-' : '+',

165 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

167 
p3
 = &
ˇched_hâp_log_iso8601
[
¶Ÿ
][0];

169 (Ë
	`ngx_•rötf
(
p3
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02i:%02i",

170 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

171 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

172 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

173 
ç
->
gmtoff
 < 0 ? '-' : '+',

174 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

176 
p4
 = &
ˇched_sy¶og_time
[
¶Ÿ
][0];

178 (Ë
	`ngx_•rötf
(
p4
, "%s %2d %02d:%02d:%02d",

179 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],Åm.
ngx_tm_mday
,

180 
tm
.
ngx_tm_hour
,Åm.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

182 
	`ngx_mem‹y_b¨rõr
();

184 
ngx_ˇched_time
 = 
ç
;

185 
ngx_ˇched_hâp_time
.
d©a
 = 
p0
;

186 
ngx_ˇched_îr_log_time
.
d©a
 = 
p1
;

187 
ngx_ˇched_hâp_log_time
.
d©a
 = 
p2
;

188 
ngx_ˇched_hâp_log_iso8601
.
d©a
 = 
p3
;

189 
ngx_ˇched_sy¶og_time
.
d©a
 = 
p4
;

191 
	`ngx_u∆ock
(&
ngx_time_lock
);

192 
	}
}

195 
ngx_m£c_t


196 
	$ngx_m⁄Ÿ⁄ic_time
(
time_t
 
£c
, 
ngx_uöt_t
 
m£c
)

198 #i‡(
NGX_HAVE_CLOCK_MONOTONIC
)

199 
time•ec
 
ts
;

201 #i‡
	`deföed
(
CLOCK_MONOTONIC_FAST
)

202 
	`˛ock_gëtime
(
CLOCK_MONOTONIC_FAST
, &
ts
);

204 #ñi‡
	`deföed
(
CLOCK_MONOTONIC_COARSE
)

205 
	`˛ock_gëtime
(
CLOCK_MONOTONIC_COARSE
, &
ts
);

208 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

211 
£c
 = 
ts
.
tv_£c
;

212 
m£c
 = 
ts
.
tv_n£c
 / 1000000;

216  (
ngx_m£c_t
Ë
£c
 * 1000 + 
m£c
;

217 
	}
}

220 #i‡!(
NGX_WIN32
)

223 
	$ngx_time_sigß„_upd©e
()

225 
u_ch¨
 *
p
, *
p2
;

226 
ngx_tm_t
 
tm
;

227 
time_t
 
£c
;

228 
ngx_time_t
 *
ç
;

229 
timevÆ
 
tv
;

231 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

235 
	`ngx_gëtimeofday
(&
tv
);

237 
£c
 = 
tv
.
tv_£c
;

239 
ç
 = &
ˇched_time
[
¶Ÿ
];

241 i‡(
ç
->
£c
 == sec) {

242 
	`ngx_u∆ock
(&
ngx_time_lock
);

246 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

247 
¶Ÿ
 = 0;

249 
¶Ÿ
++;

252 
ç
 = &
ˇched_time
[
¶Ÿ
];

254 
ç
->
£c
 = 0;

256 
	`ngx_gmtime
(
£c
 + 
ˇched_gmtoff
 * 60, &
tm
);

258 
p
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

260 (Ë
	`ngx_•rötf
(
p
, "%4d/%02d/%02d %02d:%02d:%02d",

261 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

262 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

263 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

265 
p2
 = &
ˇched_sy¶og_time
[
¶Ÿ
][0];

267 (Ë
	`ngx_•rötf
(
p2
, "%s %2d %02d:%02d:%02d",

268 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],Åm.
ngx_tm_mday
,

269 
tm
.
ngx_tm_hour
,Åm.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

271 
	`ngx_mem‹y_b¨rõr
();

273 
ngx_ˇched_îr_log_time
.
d©a
 = 
p
;

274 
ngx_ˇched_sy¶og_time
.
d©a
 = 
p2
;

276 
	`ngx_u∆ock
(&
ngx_time_lock
);

277 
	}
}

282 
u_ch¨
 *

283 
	$ngx_hâp_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

285 
ngx_tm_t
 
tm
;

287 
	`ngx_gmtime
(
t
, &
tm
);

289  
	`ngx_•rötf
(
buf
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

290 
wìk
[
tm
.
ngx_tm_wday
],

291 
tm
.
ngx_tm_mday
,

292 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

293 
tm
.
ngx_tm_yór
,

294 
tm
.
ngx_tm_hour
,

295 
tm
.
ngx_tm_mö
,

296 
tm
.
ngx_tm_£c
);

297 
	}
}

300 
u_ch¨
 *

301 
	$ngx_hâp_cookõ_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

303 
ngx_tm_t
 
tm
;

305 
	`ngx_gmtime
(
t
, &
tm
);

312  
	`ngx_•rötf
(
buf
,

313 (
tm
.
ngx_tm_yór
 > 2037) ?

316 
wìk
[
tm
.
ngx_tm_wday
],

317 
tm
.
ngx_tm_mday
,

318 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

319 (
tm
.
ngx_tm_yór
 > 2037) ?Åm.ngx_tm_year:

320 
tm
.
ngx_tm_yór
 % 100,

321 
tm
.
ngx_tm_hour
,

322 
tm
.
ngx_tm_mö
,

323 
tm
.
ngx_tm_£c
);

324 
	}
}

328 
	$ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
)

330 
ngx_öt_t
 
yday
;

331 
ngx_uöt_t
 
£c
, 
mö
, 
hour
, 
mday
, 
m⁄
, 
yór
, 
wday
, 
days
, 
À≠
;

335 i‡(
t
 < 0) {

336 
t
 = 0;

339 
days
 = 
t
 / 86400;

340 
£c
 = 
t
 % 86400;

347 i‡(
days
 > 2932896) {

348 
days
 = 2932896;

349 
£c
 = 86399;

354 
wday
 = (4 + 
days
) % 7;

356 
hour
 = 
£c
 / 3600;

357 
£c
 %= 3600;

358 
mö
 = 
£c
 / 60;

359 
£c
 %= 60;

367 
days
 = days - (31 + 28) + 719527;

376 
yór
 = (
days
 + 2) * 400 / (365 * 400 + 100 - 4 + 1);

378 
yday
 = 
days
 - (365 * 
yór
 + year / 4 - year / 100 + year / 400);

380 i‡(
yday
 < 0) {

381 
À≠
 = (
yór
 % 4 == 0) && (year % 100 || (year % 400 == 0));

382 
yday
 = 365 + 
À≠
 + yday;

383 
yór
--;

394 
m⁄
 = (
yday
 + 31) * 10 / 306;

398 
mday
 = 
yday
 - (367 * 
m⁄
 / 12 - 30) + 1;

400 i‡(
yday
 >= 306) {

402 
yór
++;

403 
m⁄
 -= 10;

413 
m⁄
 += 2;

422 
ç
->
ngx_tm_£c
 = (
ngx_tm_£c_t
Ë
£c
;

423 
ç
->
ngx_tm_mö
 = (
ngx_tm_mö_t
Ë
mö
;

424 
ç
->
ngx_tm_hour
 = (
ngx_tm_hour_t
Ë
hour
;

425 
ç
->
ngx_tm_mday
 = (
ngx_tm_mday_t
Ë
mday
;

426 
ç
->
ngx_tm_m⁄
 = (
ngx_tm_m⁄_t
Ë
m⁄
;

427 
ç
->
ngx_tm_yór
 = (
ngx_tm_yór_t
Ë
yór
;

428 
ç
->
ngx_tm_wday
 = (
ngx_tm_wday_t
Ë
wday
;

429 
	}
}

432 
time_t


433 
	$ngx_√xt_time
(
time_t
 
whí
)

435 
time_t
 
now
, 
√xt
;

436 
tm
Åm;

438 
now
 = 
	`ngx_time
();

440 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

442 
tm
.
tm_hour
 = (Ë(
whí
 / 3600);

443 
whí
 %= 3600;

444 
tm
.
tm_mö
 = (Ë(
whí
 / 60);

445 
tm
.
tm_£c
 = (Ë(
whí
 % 60);

447 
√xt
 = 
	`mktime
(&
tm
);

449 i‡(
√xt
 == -1) {

453 i‡(
√xt
 - 
now
 > 0) {

454  
√xt
;

457 
tm
.
tm_mday
++;

461 
√xt
 = 
	`mktime
(&
tm
);

463 i‡(
√xt
 != -1) {

464  
√xt
;

468 
	}
}

	@src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

43 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_sy¶og_time
;

49 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@src/event/modules/ngx_devpoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_DEVPOLL
)

17 #i‚de‡
POLLREMOVE


18 
	#POLLREMOVE
 0x0800

	)

20 
	#DP_POLL
 0xD001

	)

21 
	#DP_ISPOLLED
 0xD002

	)

23 
	sdvpﬁl
 {

24 
pﬁlfd
 *
	mdp_fds
;

25 
	mdp_nfds
;

26 
	mdp_timeout
;

33 
ngx_uöt_t
 
	mch™ges
;

34 
ngx_uöt_t
 
	mevíts
;

35 } 
	tngx_devpﬁl_c⁄f_t
;

38 
ngx_öt_t
 
ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

39 
ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

40 
ngx_öt_t
 
ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

41 
ngx_uöt_t
 
Êags
);

42 
ngx_öt_t
 
ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

43 
ngx_uöt_t
 
Êags
);

44 
ngx_öt_t
 
ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

45 
ngx_uöt_t
 
Êags
);

46 
ngx_öt_t
 
ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

47 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

49 *
ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

50 *
ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

52 
	gdp
 = -1;

53 
pﬁlfd
 *
	gch™ge_li°
, *
	gevít_li°
;

54 
ngx_uöt_t
 
	gnch™ges
, 
	gmax_ch™ges
, 
	g√víts
;

56 
ngx_evít_t
 **
	gch™ge_ödex
;

59 
ngx_°r_t
 
	gdevpﬁl_«me
 = 
ngx_°rög
("/dev/poll");

61 
ngx_comm™d_t
 
	gngx_devpﬁl_comm™ds
[] = {

63 { 
ngx_°rög
("devpoll_changes"),

64 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_num_¶Ÿ
,

67 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
ch™ges
),

68 
NULL
 },

70 { 
ngx_°rög
("devpoll_events"),

71 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_num_¶Ÿ
,

74 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
evíts
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_evít_moduÀ_t
 
	gngx_devpﬁl_moduÀ_˘x
 = {

82 &
devpﬁl_«me
,

83 
ngx_devpﬁl_¸óã_c⁄f
,

84 
ngx_devpﬁl_öô_c⁄f
,

87 
ngx_devpﬁl_add_evít
,

88 
ngx_devpﬁl_dñ_evít
,

89 
ngx_devpﬁl_add_evít
,

90 
ngx_devpﬁl_dñ_evít
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
ngx_devpﬁl_¥o˚ss_evíts
,

95 
ngx_devpﬁl_öô
,

96 
ngx_devpﬁl_d⁄e
,

101 
ngx_moduÀ_t
 
	gngx_devpﬁl_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_devpﬁl_moduÀ_˘x
,

104 
ngx_devpﬁl_comm™ds
,

105 
NGX_EVENT_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


117 
ngx_öt_t


118 
	$ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

120 
size_t
 
n
;

121 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

123 
dpcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_devpﬁl_moduÀ
);

125 i‡(
dp
 == -1) {

126 
dp
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
);

128 i‡(
dp
 == -1) {

129 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

131  
NGX_ERROR
;

135 i‡(
max_ch™ges
 < 
dpcf
->
ch™ges
) {

136 i‡(
nch™ges
) {

137 
n
 = 
nch™ges
 * (
pﬁlfd
);

138 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

139 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

141  
NGX_ERROR
;

144 
nch™ges
 = 0;

147 i‡(
ch™ge_li°
) {

148 
	`ngx_‰ì
(
ch™ge_li°
);

151 
ch™ge_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
ch™ges
,

152 
cy˛e
->
log
);

153 i‡(
ch™ge_li°
 =
NULL
) {

154  
NGX_ERROR
;

157 i‡(
ch™ge_ödex
) {

158 
	`ngx_‰ì
(
ch™ge_ödex
);

161 
ch™ge_ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 
dpcf
->
ch™ges
,

162 
cy˛e
->
log
);

163 i‡(
ch™ge_ödex
 =
NULL
) {

164  
NGX_ERROR
;

168 
max_ch™ges
 = 
dpcf
->
ch™ges
;

170 i‡(
√víts
 < 
dpcf
->
evíts
) {

171 i‡(
evít_li°
) {

172 
	`ngx_‰ì
(
evít_li°
);

175 
evít_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
evíts
,

176 
cy˛e
->
log
);

177 i‡(
evít_li°
 =
NULL
) {

178  
NGX_ERROR
;

182 
√víts
 = 
dpcf
->
evíts
;

184 
ngx_io
 = 
ngx_os_io
;

186 
ngx_evít_a˘i⁄s
 = 
ngx_devpﬁl_moduÀ_˘x
.
a˘i⁄s
;

188 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

190  
NGX_OK
;

191 
	}
}

195 
	$ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

197 i‡(
	`˛o£
(
dp
) == -1) {

198 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

202 
dp
 = -1;

204 
	`ngx_‰ì
(
ch™ge_li°
);

205 
	`ngx_‰ì
(
evít_li°
);

206 
	`ngx_‰ì
(
ch™ge_ödex
);

208 
ch™ge_li°
 = 
NULL
;

209 
evít_li°
 = 
NULL
;

210 
ch™ge_ödex
 = 
NULL
;

211 
max_ch™ges
 = 0;

212 
nch™ges
 = 0;

213 
√víts
 = 0;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

220 #i‡(
NGX_DEBUG
)

221 
ngx_c⁄√˘i⁄_t
 *
c
;

224 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

225 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

228 #i‡(
NGX_DEBUG
)

229 
c
 = 
ev
->
d©a
;

230 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

231 "devpﬁ»addÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

234 
ev
->
a˘ive
 = 1;

236  
	`ngx_devpﬁl_£t_evít
(
ev
, 
evít
, 0);

237 
	}
}

240 
ngx_öt_t


241 
	$ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

243 
ngx_evít_t
 *
e
;

244 
ngx_c⁄√˘i⁄_t
 *
c
;

246 
c
 = 
ev
->
d©a
;

248 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

249 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

253 "devpﬁ»dñÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

255 i‡(
	`ngx_devpﬁl_£t_evít
(
ev
, 
POLLREMOVE
, 
Êags
Ë=
NGX_ERROR
) {

256  
NGX_ERROR
;

259 
ev
->
a˘ive
 = 0;

261 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

262 
e
 = (
evít
 =
POLLIN
Ë? 
c
->
wrôe
 : c->
ªad
;

264 i‡(
e
) {

265 
e
->
a˘ive
 = 0;

268  
NGX_OK
;

273 i‡(
evít
 =
POLLIN
) {

274 
e
 = 
c
->
wrôe
;

275 
evít
 = 
POLLOUT
;

278 
e
 = 
c
->
ªad
;

279 
evít
 = 
POLLIN
;

282 i‡(
e
 &&É->
a˘ive
) {

283  
	`ngx_devpﬁl_£t_evít
(
e
, 
evít
, 0);

286  
NGX_OK
;

287 
	}
}

290 
ngx_öt_t


291 
	$ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

293 
size_t
 
n
;

294 
ngx_c⁄√˘i⁄_t
 *
c
;

296 
c
 = 
ev
->
d©a
;

298 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

299 "devpﬁ»fd:%dÉv:%04XòÊ:%04Xi", 
c
->
fd
, 
evít
, 
Êags
);

301 i‡(
nch™ges
 >
max_ch™ges
) {

302 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

305 
n
 = 
nch™ges
 * (
pﬁlfd
);

306 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

307 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

309  
NGX_ERROR
;

312 
nch™ges
 = 0;

315 
ch™ge_li°
[
nch™ges
].
fd
 = 
c
->fd;

316 
ch™ge_li°
[
nch™ges
].
evíts
 = (Ë
evít
;

317 
ch™ge_li°
[
nch™ges
].
ªvíts
 = 0;

319 
ch™ge_ödex
[
nch™ges
] = 
ev
;

320 
ev
->
ödex
 = 
nch™ges
;

322 
nch™ges
++;

324 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

325 
n
 = 
nch™ges
 * (
pﬁlfd
);

326 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

327 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

329  
NGX_ERROR
;

332 
nch™ges
 = 0;

335  
NGX_OK
;

336 
	}
}

339 
ngx_öt_t


340 
	$ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

341 
ngx_uöt_t
 
Êags
)

343 
evíts
, 
ªvíts
, 
rc
;

344 
size_t
 
n
;

345 
ngx_fd_t
 
fd
;

346 
ngx_îr_t
 
îr
;

347 
ngx_öt_t
 
i
;

348 
ngx_uöt_t
 
Àvñ
, 
ö°™˚
;

349 
ngx_evít_t
 *
ªv
, *
wev
;

350 
ngx_queue_t
 *
queue
;

351 
ngx_c⁄√˘i⁄_t
 *
c
;

352 
pﬁlfd
 
pfd
;

353 
dvpﬁl
 
dvp
;

357 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

358 "devpﬁ»timî: %M", 
timî
);

360 i‡(
nch™ges
) {

361 
n
 = 
nch™ges
 * (
pﬁlfd
);

362 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

363 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

365  
NGX_ERROR
;

368 
nch™ges
 = 0;

371 
dvp
.
dp_fds
 = 
evít_li°
;

372 
dvp
.
dp_nfds
 = (Ë
√víts
;

373 
dvp
.
dp_timeout
 = 
timî
;

374 
evíts
 = 
	`io˘l
(
dp
, 
DP_POLL
, &
dvp
);

376 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

378 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

379 
	`ngx_time_upd©e
();

382 i‡(
îr
) {

383 i‡(
îr
 =
NGX_EINTR
) {

385 i‡(
ngx_evít_timî_Æ¨m
) {

386 
ngx_evít_timî_Æ¨m
 = 0;

387  
NGX_OK
;

390 
Àvñ
 = 
NGX_LOG_INFO
;

393 
Àvñ
 = 
NGX_LOG_ALERT
;

396 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "ioctl(DP_POLL) failed");

397  
NGX_ERROR
;

400 i‡(
evíts
 == 0) {

401 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

402  
NGX_OK
;

405 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

407  
NGX_ERROR
;

410 
i
 = 0; i < 
evíts
; i++) {

412 
fd
 = 
evít_li°
[
i
].fd;

413 
ªvíts
 = 
evít_li°
[
i
].revents;

415 
c
 = 
ngx_cy˛e
->
fûes
[
fd
];

417 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

419 
pfd
.
fd
 = fd;

420 
pfd
.
evíts
 = 0;

421 
pfd
.
ªvíts
 = 0;

423 
rc
 = 
	`io˘l
(
dp
, 
DP_ISPOLLED
, &
pfd
);

425 
rc
) {

428 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

430 
fd
, 
ªvíts
);

434 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

436 
ªvíts
, 
fd
);

440 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

443 
ªvíts
, 
fd
, 
rc
, 
pfd
.fd,Öfd.revents);

445 
pfd
.
fd
 = fd;

446 
pfd
.
evíts
 = 
POLLREMOVE
;

447 
pfd
.
ªvíts
 = 0;

449 i‡(
	`wrôe
(
dp
, &
pfd
, (
pﬁlfd
))

450 !(
ssize_t
Ë(
pﬁlfd
))

452 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

453 "wrôe(/dev/pﬁlËf‹ %d faûed", 
fd
);

456 i‡(
	`˛o£
(
fd
) == -1) {

457 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

458 "˛o£(%dËÁûed", 
fd
);

467 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

469 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

471 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

472 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

474 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

477 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

478 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

481 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

484 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

491 
ªvíts
 |
POLLIN
|
POLLOUT
;

494 
ªv
 = 
c
->
ªad
;

496 i‡((
ªvíts
 & 
POLLIN
Ë&& 
ªv
->
a˘ive
) {

497 
ªv
->
ªady
 = 1;

499 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

500 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


501 : &
ngx_po°ed_evíts
;

503 
	`ngx_po°_evít
(
ªv
, 
queue
);

506 
ö°™˚
 = 
ªv
->instance;

508 
ªv
->
	`h™dÀr
(rev);

510 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

516 
wev
 = 
c
->
wrôe
;

518 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
wev
->
a˘ive
) {

519 
wev
->
ªady
 = 1;

521 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

522 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

525 
wev
->
	`h™dÀr
(wev);

530  
NGX_OK
;

531 
	}
}

535 
	$ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

537 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

539 
dpcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_devpﬁl_c⁄f_t
));

540 i‡(
dpcf
 =
NULL
) {

541  
NULL
;

544 
dpcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

545 
dpcf
->
evíts
 = 
NGX_CONF_UNSET
;

547  
dpcf
;

548 
	}
}

552 
	$ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

554 
ngx_devpﬁl_c⁄f_t
 *
dpcf
 = 
c⁄f
;

556 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
ch™ges
, 32);

557 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
evíts
, 32);

559  
NGX_CONF_OK
;

560 
	}
}

	@src/event/modules/ngx_epoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EPOLL
)

17 
	#EPOLLIN
 0x001

	)

18 
	#EPOLLPRI
 0x002

	)

19 
	#EPOLLOUT
 0x004

	)

20 
	#EPOLLERR
 0x008

	)

21 
	#EPOLLHUP
 0x010

	)

22 
	#EPOLLRDNORM
 0x040

	)

23 
	#EPOLLRDBAND
 0x080

	)

24 
	#EPOLLWRNORM
 0x100

	)

25 
	#EPOLLWRBAND
 0x200

	)

26 
	#EPOLLMSG
 0x400

	)

28 
	#EPOLLRDHUP
 0x2000

	)

30 
	#EPOLLEXCLUSIVE
 0x10000000

	)

31 
	#EPOLLONESHOT
 0x40000000

	)

32 
	#EPOLLET
 0x80000000

	)

34 
	#EPOLL_CTL_ADD
 1

	)

35 
	#EPOLL_CTL_DEL
 2

	)

36 
	#EPOLL_CTL_MOD
 3

	)

38 
	uïﬁl_d©a
 {

39 *
	m±r
;

40 
	mfd
;

41 
uöt32_t
 
	mu32
;

42 
uöt64_t
 
	mu64
;

43 } 
	tïﬁl_d©a_t
;

45 
	sïﬁl_evít
 {

46 
uöt32_t
 
	mevíts
;

47 
ïﬁl_d©a_t
 
	md©a
;

51 
ïﬁl_¸óã
(
size
);

53 
	$ïﬁl_¸óã
(
size
)

56 
	}
}

59 
ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
);

61 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

64 
	}
}

67 
ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
);

69 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
)

72 
	}
}

74 #i‡(
NGX_HAVE_EVENTFD
)

75 
	#SYS_evítfd
 323

	)

78 #i‡(
NGX_HAVE_FILE_AIO
)

80 
	#SYS_io_£tup
 245

	)

81 
	#SYS_io_de°roy
 246

	)

82 
	#SYS_io_gëevíts
 247

	)

84 
u_öt
 
	taio_c⁄ãxt_t
;

86 
	sio_evít
 {

87 
uöt64_t
 
	md©a
;

88 
uöt64_t
 
	mobj
;

89 
öt64_t
 
	mªs
;

90 
öt64_t
 
	mªs2
;

99 
ngx_uöt_t
 
	mevíts
;

100 
ngx_uöt_t
 
	maio_ªque°s
;

101 } 
	tngx_ïﬁl_c⁄f_t
;

104 
ngx_öt_t
 
ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

105 #i‡(
NGX_HAVE_EVENTFD
)

106 
ngx_öt_t
 
ngx_ïﬁl_nŸify_öô
(
ngx_log_t
 *
log
);

107 
ngx_ïﬁl_nŸify_h™dÀr
(
ngx_evít_t
 *
ev
);

109 #i‡(
NGX_HAVE_EPOLLRDHUP
)

110 
ngx_ïﬁl_ã°_rdhup
(
ngx_cy˛e_t
 *
cy˛e
);

112 
ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

113 
ngx_öt_t
 
ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

114 
ngx_uöt_t
 
Êags
);

115 
ngx_öt_t
 
ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

116 
ngx_uöt_t
 
Êags
);

117 
ngx_öt_t
 
ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

118 
ngx_öt_t
 
ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

119 
ngx_uöt_t
 
Êags
);

120 #i‡(
NGX_HAVE_EVENTFD
)

121 
ngx_öt_t
 
ngx_ïﬁl_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
);

123 
ngx_öt_t
 
ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

124 
ngx_uöt_t
 
Êags
);

126 #i‡(
NGX_HAVE_FILE_AIO
)

127 
ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
);

130 *
ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

131 *
ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

133 
	gï
 = -1;

134 
ïﬁl_evít
 *
	gevít_li°
;

135 
ngx_uöt_t
 
	g√víts
;

137 #i‡(
NGX_HAVE_EVENTFD
)

138 
	gnŸify_fd
 = -1;

139 
ngx_evít_t
 
	gnŸify_evít
;

140 
ngx_c⁄√˘i⁄_t
 
	gnŸify_c⁄n
;

143 #i‡(
NGX_HAVE_FILE_AIO
)

145 
	gngx_evítfd
 = -1;

146 
aio_c⁄ãxt_t
 
	gngx_aio_˘x
 = 0;

148 
ngx_evít_t
 
	gngx_evítfd_evít
;

149 
ngx_c⁄√˘i⁄_t
 
	gngx_evítfd_c⁄n
;

153 #i‡(
NGX_HAVE_EPOLLRDHUP
)

154 
ngx_uöt_t
 
	gngx_u£_ïﬁl_rdhup
;

157 
ngx_°r_t
 
	gïﬁl_«me
 = 
ngx_°rög
("epoll");

159 
ngx_comm™d_t
 
	gngx_ïﬁl_comm™ds
[] = {

161 { 
ngx_°rög
("epoll_events"),

162 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_num_¶Ÿ
,

165 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
evíts
),

166 
NULL
 },

168 { 
ngx_°rög
("worker_aio_requests"),

169 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_c⁄f_£t_num_¶Ÿ
,

172 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
aio_ªque°s
),

173 
NULL
 },

175 
ngx_nuŒ_comm™d


179 
ngx_evít_moduÀ_t
 
	gngx_ïﬁl_moduÀ_˘x
 = {

180 &
ïﬁl_«me
,

181 
ngx_ïﬁl_¸óã_c⁄f
,

182 
ngx_ïﬁl_öô_c⁄f
,

185 
ngx_ïﬁl_add_evít
,

186 
ngx_ïﬁl_dñ_evít
,

187 
ngx_ïﬁl_add_evít
,

188 
ngx_ïﬁl_dñ_evít
,

189 
ngx_ïﬁl_add_c⁄√˘i⁄
,

190 
ngx_ïﬁl_dñ_c⁄√˘i⁄
,

191 #i‡(
NGX_HAVE_EVENTFD
)

192 
ngx_ïﬁl_nŸify
,

194 
NULL
,

196 
ngx_ïﬁl_¥o˚ss_evíts
,

197 
ngx_ïﬁl_öô
,

198 
ngx_ïﬁl_d⁄e
,

202 
ngx_moduÀ_t
 
	gngx_ïﬁl_moduÀ
 = {

203 
NGX_MODULE_V1
,

204 &
ngx_ïﬁl_moduÀ_˘x
,

205 
ngx_ïﬁl_comm™ds
,

206 
NGX_EVENT_MODULE
,

207 
NULL
,

208 
NULL
,

209 
NULL
,

210 
NULL
,

211 
NULL
,

212 
NULL
,

213 
NULL
,

214 
NGX_MODULE_V1_PADDING


218 #i‡(
NGX_HAVE_FILE_AIO
)

227 
	$io_£tup
(
u_öt
 
ƒ_ªqs
, 
aio_c⁄ãxt_t
 *
˘x
)

229  
	`sysˇŒ
(
SYS_io_£tup
, 
ƒ_ªqs
, 
˘x
);

230 
	}
}

234 
	$io_de°roy
(
aio_c⁄ãxt_t
 
˘x
)

236  
	`sysˇŒ
(
SYS_io_de°roy
, 
˘x
);

237 
	}
}

241 
	$io_gëevíts
(
aio_c⁄ãxt_t
 
˘x
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
,

242 
time•ec
 *
tmo
)

244  
	`sysˇŒ
(
SYS_io_gëevíts
, 
˘x
, 
mö_ƒ
, 
ƒ
, 
evíts
, 
tmo
);

245 
	}
}

249 
	$ngx_ïﬁl_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ïﬁl_c⁄f_t
 *
ïcf
)

251 
n
;

252 
ïﬁl_evít
 
ì
;

254 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

255 
ngx_evítfd
 = 
	`evítfd
(0, 0);

257 
ngx_evítfd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

260 i‡(
ngx_evítfd
 == -1) {

261 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

263 
ngx_fûe_aio
 = 0;

267 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

268 "evítfd: %d", 
ngx_evítfd
);

270 
n
 = 1;

272 i‡(
	`io˘l
(
ngx_evítfd
, 
FIONBIO
, &
n
) == -1) {

273 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

275 
Áûed
;

278 i‡(
	`io_£tup
(
ïcf
->
aio_ªque°s
, &
ngx_aio_˘x
) == -1) {

279 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

281 
Áûed
;

284 
ngx_evítfd_evít
.
d©a
 = &
ngx_evítfd_c⁄n
;

285 
ngx_evítfd_evít
.
h™dÀr
 = 
ngx_ïﬁl_evítfd_h™dÀr
;

286 
ngx_evítfd_evít
.
log
 = 
cy˛e
->log;

287 
ngx_evítfd_evít
.
a˘ive
 = 1;

288 
ngx_evítfd_c⁄n
.
fd
 = 
ngx_evítfd
;

289 
ngx_evítfd_c⁄n
.
ªad
 = &
ngx_evítfd_evít
;

290 
ngx_evítfd_c⁄n
.
log
 = 
cy˛e
->log;

292 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

293 
ì
.
d©a
.
±r
 = &
ngx_evítfd_c⁄n
;

295 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
ngx_evítfd
, &
ì
) != -1) {

299 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

302 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

307 
Áûed
:

309 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

310 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

314 
ngx_evítfd
 = -1;

315 
ngx_aio_˘x
 = 0;

316 
ngx_fûe_aio
 = 0;

317 
	}
}

322 
ngx_öt_t


323 
	$ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

325 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

327 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ïﬁl_moduÀ
);

329 i‡(
ï
 == -1) {

330 
ï
 = 
	`ïﬁl_¸óã
(
cy˛e
->
c⁄√˘i⁄_n
 / 2);

332 i‡(
ï
 == -1) {

333 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

335  
NGX_ERROR
;

338 #i‡(
NGX_HAVE_EVENTFD
)

339 i‡(
	`ngx_ïﬁl_nŸify_öô
(
cy˛e
->
log
Ë!
NGX_OK
) {

340 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
.
nŸify
 = 
NULL
;

344 #i‡(
NGX_HAVE_FILE_AIO
)

345 
	`ngx_ïﬁl_aio_öô
(
cy˛e
, 
ïcf
);

348 #i‡(
NGX_HAVE_EPOLLRDHUP
)

349 
	`ngx_ïﬁl_ã°_rdhup
(
cy˛e
);

353 i‡(
√víts
 < 
ïcf
->
evíts
) {

354 i‡(
evít_li°
) {

355 
	`ngx_‰ì
(
evít_li°
);

358 
evít_li°
 = 
	`ngx_Æloc
((
ïﬁl_evít
Ë* 
ïcf
->
evíts
,

359 
cy˛e
->
log
);

360 i‡(
evít_li°
 =
NULL
) {

361  
NGX_ERROR
;

365 
√víts
 = 
ïcf
->
evíts
;

367 
ngx_io
 = 
ngx_os_io
;

369 
ngx_evít_a˘i⁄s
 = 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
;

371 #i‡(
NGX_HAVE_CLEAR_EVENT
)

372 
ngx_evít_Êags
 = 
NGX_USE_CLEAR_EVENT


374 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT


376 |
NGX_USE_GREEDY_EVENT


377 |
NGX_USE_EPOLL_EVENT
;

379  
NGX_OK
;

380 
	}
}

383 #i‡(
NGX_HAVE_EVENTFD
)

385 
ngx_öt_t


386 
	$ngx_ïﬁl_nŸify_öô
(
ngx_log_t
 *
log
)

388 
ïﬁl_evít
 
ì
;

390 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

391 
nŸify_fd
 = 
	`evítfd
(0, 0);

393 
nŸify_fd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

396 i‡(
nŸify_fd
 == -1) {

397 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "eventfd() failed");

398  
NGX_ERROR
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

402 "nŸifyÉvítfd: %d", 
nŸify_fd
);

404 
nŸify_evít
.
h™dÀr
 = 
ngx_ïﬁl_nŸify_h™dÀr
;

405 
nŸify_evít
.
log
 =Üog;

406 
nŸify_evít
.
a˘ive
 = 1;

408 
nŸify_c⁄n
.
fd
 = 
nŸify_fd
;

409 
nŸify_c⁄n
.
ªad
 = &
nŸify_evít
;

410 
nŸify_c⁄n
.
log
 =Üog;

412 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

413 
ì
.
d©a
.
±r
 = &
nŸify_c⁄n
;

415 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
nŸify_fd
, &
ì
) == -1) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

419 i‡(
	`˛o£
(
nŸify_fd
) == -1) {

420 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

424  
NGX_ERROR
;

427  
NGX_OK
;

428 
	}
}

432 
	$ngx_ïﬁl_nŸify_h™dÀr
(
ngx_evít_t
 *
ev
)

434 
ssize_t
 
n
;

435 
uöt64_t
 
cou¡
;

436 
ngx_îr_t
 
îr
;

437 
ngx_evít_h™dÀr_±
 
h™dÀr
;

439 i‡(++
ev
->
ödex
 =
NGX_MAX_UINT32_VALUE
) {

440 
ev
->
ödex
 = 0;

442 
n
 = 
	`ªad
(
nŸify_fd
, &
cou¡
, (
uöt64_t
));

444 
îr
 = 
ngx_î∫o
;

446 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

447 "ªad(Ëevítfd %d: %z cou¡:%uL", 
nŸify_fd
, 
n
, 
cou¡
);

449 i‡((
size_t
Ë
n
 !(
uöt64_t
)) {

450 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
,

451 "ªad(Ëevítfd %d faûed", 
nŸify_fd
);

455 
h™dÀr
 = 
ev
->
d©a
;

456 
	`h™dÀr
(
ev
);

457 
	}
}

462 #i‡(
NGX_HAVE_EPOLLRDHUP
)

465 
	$ngx_ïﬁl_ã°_rdhup
(
ngx_cy˛e_t
 *
cy˛e
)

467 
s
[2], 
evíts
;

468 
ïﬁl_evít
 
ì
;

470 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
s
) == -1) {

471 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

476 
ì
.
evíts
 = 
EPOLLET
|
EPOLLIN
|
EPOLLRDHUP
;

478 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
s
[0], &
ì
) == -1) {

479 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

481 
Áûed
;

484 i‡(
	`˛o£
(
s
[1]) == -1) {

485 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

487 
s
[1] = -1;

488 
Áûed
;

491 
s
[1] = -1;

493 
evíts
 = 
	`ïﬁl_waô
(
ï
, &
ì
, 1, 5000);

495 i‡(
evíts
 == -1) {

496 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

498 
Áûed
;

501 i‡(
evíts
) {

502 
ngx_u£_ïﬁl_rdhup
 = 
ì
.
evíts
 & 
EPOLLRDHUP
;

505 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
NGX_ETIMEDOUT
,

509 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

511 
ngx_u£_ïﬁl_rdhup
 ? "success" : "fail");

513 
Áûed
:

515 i‡(
s
[1] !-1 && 
	`˛o£
(s[1]) == -1) {

516 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

520 i‡(
	`˛o£
(
s
[0]) == -1) {

521 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

524 
	}
}

530 
	$ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

532 i‡(
	`˛o£
(
ï
) == -1) {

533 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

537 
ï
 = -1;

539 #i‡(
NGX_HAVE_EVENTFD
)

541 i‡(
	`˛o£
(
nŸify_fd
) == -1) {

542 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

546 
nŸify_fd
 = -1;

550 #i‡(
NGX_HAVE_FILE_AIO
)

552 i‡(
ngx_evítfd
 != -1) {

554 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

555 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

559 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

560 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

564 
ngx_evítfd
 = -1;

567 
ngx_aio_˘x
 = 0;

571 
	`ngx_‰ì
(
evít_li°
);

573 
evít_li°
 = 
NULL
;

574 
√víts
 = 0;

575 
	}
}

578 
ngx_öt_t


579 
	$ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

581 
›
;

582 
uöt32_t
 
evíts
, 
¥ev
;

583 
ngx_evít_t
 *
e
;

584 
ngx_c⁄√˘i⁄_t
 *
c
;

585 
ïﬁl_evít
 
ì
;

587 
c
 = 
ev
->
d©a
;

589 
evíts
 = (
uöt32_t
Ë
evít
;

591 i‡(
evít
 =
NGX_READ_EVENT
) {

592 
e
 = 
c
->
wrôe
;

593 
¥ev
 = 
EPOLLOUT
;

594 #i‡(
NGX_READ_EVENT
 !
EPOLLIN
|
EPOLLRDHUP
)

595 
evíts
 = 
EPOLLIN
|
EPOLLRDHUP
;

599 
e
 = 
c
->
ªad
;

600 
¥ev
 = 
EPOLLIN
|
EPOLLRDHUP
;

601 #i‡(
NGX_WRITE_EVENT
 !
EPOLLOUT
)

602 
evíts
 = 
EPOLLOUT
;

606 i‡(
e
->
a˘ive
) {

607 
›
 = 
EPOLL_CTL_MOD
;

608 
evíts
 |
¥ev
;

611 
›
 = 
EPOLL_CTL_ADD
;

614 #i‡(
NGX_HAVE_EPOLLEXCLUSIVE
 && 
NGX_HAVE_EPOLLRDHUP
)

615 i‡(
Êags
 & 
NGX_EXCLUSIVE_EVENT
) {

616 
evíts
 &~
EPOLLRDHUP
;

620 
ì
.
evíts
 =Évít†| (
uöt32_t
Ë
Êags
;

621 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

623 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

625 
c
->
fd
, 
›
, 
ì
.
evíts
);

627 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

628 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

629 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

630  
NGX_ERROR
;

633 
ev
->
a˘ive
 = 1;

635 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

638  
NGX_OK
;

639 
	}
}

642 
ngx_öt_t


643 
	$ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

645 
›
;

646 
uöt32_t
 
¥ev
;

647 
ngx_evít_t
 *
e
;

648 
ngx_c⁄√˘i⁄_t
 *
c
;

649 
ïﬁl_evít
 
ì
;

657 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

658 
ev
->
a˘ive
 = 0;

659  
NGX_OK
;

662 
c
 = 
ev
->
d©a
;

664 i‡(
evít
 =
NGX_READ_EVENT
) {

665 
e
 = 
c
->
wrôe
;

666 
¥ev
 = 
EPOLLOUT
;

669 
e
 = 
c
->
ªad
;

670 
¥ev
 = 
EPOLLIN
|
EPOLLRDHUP
;

673 i‡(
e
->
a˘ive
) {

674 
›
 = 
EPOLL_CTL_MOD
;

675 
ì
.
evíts
 = 
¥ev
 | (
uöt32_t
Ë
Êags
;

676 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

679 
›
 = 
EPOLL_CTL_DEL
;

680 
ì
.
evíts
 = 0;

681 
ì
.
d©a
.
±r
 = 
NULL
;

684 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

686 
c
->
fd
, 
›
, 
ì
.
evíts
);

688 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

689 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

690 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

691  
NGX_ERROR
;

694 
ev
->
a˘ive
 = 0;

696  
NGX_OK
;

697 
	}
}

700 
ngx_öt_t


701 
	$ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

703 
ïﬁl_evít
 
ì
;

705 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLOUT
|
EPOLLET
|
EPOLLRDHUP
;

706 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | c->
ªad
->
ö°™˚
);

708 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

709 "ïﬁ»add c⁄√˘i⁄: fd:%dÉv:%08XD", 
c
->
fd
, 
ì
.
evíts
);

711 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
fd
, &
ì
) == -1) {

712 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

713 "ïﬁl_˘l(EPOLL_CTL_ADD, %dËÁûed", 
c
->
fd
);

714  
NGX_ERROR
;

717 
c
->
ªad
->
a˘ive
 = 1;

718 
c
->
wrôe
->
a˘ive
 = 1;

720  
NGX_OK
;

721 
	}
}

724 
ngx_öt_t


725 
	$ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

727 
›
;

728 
ïﬁl_evít
 
ì
;

736 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

737 
c
->
ªad
->
a˘ive
 = 0;

738 
c
->
wrôe
->
a˘ive
 = 0;

739  
NGX_OK
;

742 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

743 "ïﬁ»dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

745 
›
 = 
EPOLL_CTL_DEL
;

746 
ì
.
evíts
 = 0;

747 
ì
.
d©a
.
±r
 = 
NULL
;

749 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

750 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

751 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

752  
NGX_ERROR
;

755 
c
->
ªad
->
a˘ive
 = 0;

756 
c
->
wrôe
->
a˘ive
 = 0;

758  
NGX_OK
;

759 
	}
}

762 #i‡(
NGX_HAVE_EVENTFD
)

764 
ngx_öt_t


765 
	$ngx_ïﬁl_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
)

767 
uöt64_t
 
öc
 = 1;

769 
nŸify_evít
.
d©a
 = 
h™dÀr
;

771 i‡((
size_t
Ë
	`wrôe
(
nŸify_fd
, &
öc
, (
uöt64_t
)) != (uint64_t)) {

772 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
nŸify_evít
.
log
, 
ngx_î∫o
,

773 "wrôe(Ëtÿevítfd %d faûed", 
nŸify_fd
);

774  
NGX_ERROR
;

777  
NGX_OK
;

778 
	}
}

783 
ngx_öt_t


784 
	$ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

786 
evíts
;

787 
uöt32_t
 
ªvíts
;

788 
ngx_öt_t
 
ö°™˚
, 
i
;

789 
ngx_uöt_t
 
Àvñ
;

790 
ngx_îr_t
 
îr
;

791 
ngx_evít_t
 *
ªv
, *
wev
;

792 
ngx_queue_t
 *
queue
;

793 
ngx_c⁄√˘i⁄_t
 *
c
;

797 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

798 "ïﬁ»timî: %M", 
timî
);

800 
evíts
 = 
	`ïﬁl_waô
(
ï
, 
evít_li°
, (Ë
√víts
, 
timî
);

802 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

804 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

805 
	`ngx_time_upd©e
();

808 i‡(
îr
) {

809 i‡(
îr
 =
NGX_EINTR
) {

811 i‡(
ngx_evít_timî_Æ¨m
) {

812 
ngx_evít_timî_Æ¨m
 = 0;

813  
NGX_OK
;

816 
Àvñ
 = 
NGX_LOG_INFO
;

819 
Àvñ
 = 
NGX_LOG_ALERT
;

822 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "epoll_wait() failed");

823  
NGX_ERROR
;

826 i‡(
evíts
 == 0) {

827 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

828  
NGX_OK
;

831 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

833  
NGX_ERROR
;

836 
i
 = 0; i < 
evíts
; i++) {

837 
c
 = 
evít_li°
[
i
].
d©a
.
±r
;

839 
ö°™˚
 = (
uöçå_t
Ë
c
 & 1;

840 
c
 = (
ngx_c⁄√˘i⁄_t
 *Ë((
uöçå_t
) c & (uintptr_t) ~1);

842 
ªv
 = 
c
->
ªad
;

844 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

851 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

852 "ïﬁl: sèÀÉvíà%p", 
c
);

856 
ªvíts
 = 
evít_li°
[
i
].
evíts
;

858 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

860 
c
->
fd
, 
ªvíts
, 
evít_li°
[
i
].
d©a
.
±r
);

862 i‡(
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
)) {

863 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

865 
c
->
fd
, 
ªvíts
);

872 
ªvíts
 |
EPOLLIN
|
EPOLLOUT
;

876 i‡(
ªvíts
 & ~(
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
)) {

877 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

879 
c
->
fd
, 
ªvíts
);

883 i‡((
ªvíts
 & 
EPOLLIN
Ë&& 
ªv
->
a˘ive
) {

885 #i‡(
NGX_HAVE_EPOLLRDHUP
)

886 i‡(
ªvíts
 & 
EPOLLRDHUP
) {

887 
ªv
->
≥ndög_eof
 = 1;

890 
ªv
->
avaûabÀ
 = 1;

893 
ªv
->
ªady
 = 1;

895 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

896 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


897 : &
ngx_po°ed_evíts
;

899 
	`ngx_po°_evít
(
ªv
, 
queue
);

902 
ªv
->
	`h™dÀr
(rev);

906 
wev
 = 
c
->
wrôe
;

908 i‡((
ªvíts
 & 
EPOLLOUT
Ë&& 
wev
->
a˘ive
) {

910 i‡(
c
->
fd
 =-1 || 
wev
->
ö°™˚
 != instance) {

917 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

918 "ïﬁl: sèÀÉvíà%p", 
c
);

922 
wev
->
ªady
 = 1;

923 #i‡(
NGX_THREADS
)

924 
wev
->
com∂ëe
 = 1;

927 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

928 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

931 
wev
->
	`h™dÀr
(wev);

936  
NGX_OK
;

937 
	}
}

940 #i‡(
NGX_HAVE_FILE_AIO
)

943 
	$ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
)

945 
n
, 
evíts
;

946 
i
;

947 
uöt64_t
 
ªady
;

948 
ngx_îr_t
 
îr
;

949 
ngx_evít_t
 *
e
;

950 
ngx_evít_aio_t
 *
aio
;

951 
io_evít
 
evít
[64];

952 
time•ec
 
ts
;

954 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "eventfd handler");

956 
n
 = 
	`ªad
(
ngx_evítfd
, &
ªady
, 8);

958 
îr
 = 
ngx_î∫o
;

960 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "evítfd: %d", 
n
);

962 i‡(
n
 != 8) {

963 i‡(
n
 == -1) {

964 i‡(
îr
 =
NGX_EAGAIN
) {

968 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "read(eventfd) failed");

972 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

973 "ªad”vítfdËªtu∫ed o∆y %d byãs", 
n
);

977 
ts
.
tv_£c
 = 0;

978 
ts
.
tv_n£c
 = 0;

980 
ªady
) {

982 
evíts
 = 
	`io_gëevíts
(
ngx_aio_˘x
, 1, 64, 
evít
, &
ts
);

984 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

985 "io_gëevíts: %d", 
evíts
);

987 i‡(
evíts
 > 0) {

988 
ªady
 -
evíts
;

990 
i
 = 0; i < 
evíts
; i++) {

992 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

994 
evít
[
i
].
d©a
,Évít[i].
obj
,

995 
evít
[
i
].
ªs
,Évít[i].
ªs2
);

997 
e
 = (
ngx_evít_t
 *Ë(
uöçå_t
Ë
evít
[
i
].
d©a
;

999 
e
->
com∂ëe
 = 1;

1000 
e
->
a˘ive
 = 0;

1001 
e
->
ªady
 = 1;

1003 
aio
 = 
e
->
d©a
;

1004 
aio
->
ªs
 = 
evít
[
i
].res;

1006 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

1012 i‡(
evíts
 == 0) {

1017 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1021 
	}
}

1027 
	$ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1029 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

1031 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_ïﬁl_c⁄f_t
));

1032 i‡(
ïcf
 =
NULL
) {

1033  
NULL
;

1036 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

1037 
ïcf
->
aio_ªque°s
 = 
NGX_CONF_UNSET
;

1039  
ïcf
;

1040 
	}
}

1044 
	$ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1046 
ngx_ïﬁl_c⁄f_t
 *
ïcf
 = 
c⁄f
;

1048 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 512);

1049 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
aio_ªque°s
, 32);

1051  
NGX_CONF_OK
;

1052 
	}
}

	@src/event/modules/ngx_eventport_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EVENTPORT
)

15 
	#ush‹t_t
 
u_sh‹t


	)

16 
	#uöt_t
 
u_öt


	)

18 #i‚de‡
CLOCK_REALTIME


19 
	#CLOCK_REALTIME
 0

	)

20 
	t˛ockid_t
;

21 * 
	ttimî_t
;

22 #ñi‡(
NGX_DARWIN
)

23 * 
	ttimî_t
;

28 
	#PORT_SOURCE_AIO
 1

	)

29 
	#PORT_SOURCE_TIMER
 2

	)

30 
	#PORT_SOURCE_USER
 3

	)

31 
	#PORT_SOURCE_FD
 4

	)

32 
	#PORT_SOURCE_ALERT
 5

	)

33 
	#PORT_SOURCE_MQ
 6

	)

35 #i‚de‡
ETIME


36 
	#ETIME
 64

	)

39 
	#SIGEV_PORT
 4

	)

42 
	mp‹ãv_evíts
;

43 
ush‹t_t
 
	mp‹ãv_sour˚
;

44 
ush‹t_t
 
	mp‹ãv_∑d
;

45 
uöçå_t
 
	mp‹ãv_obje˘
;

46 *
	mp‹ãv_u£r
;

47 } 
	tp‹t_evít_t
;

49 
	sp‹t_nŸify
 {

50 
	mp‹äfy_p‹t
;

51 *
	mp‹äfy_u£r
;

52 } 
	tp‹t_nŸify_t
;

54 #i‡(
__FªeBSD__
 && 
__FªeBSD_vîsi⁄
 < 700005Ë|| (
NGX_DARWIN
)

56 
	sôimî•ec
 {

57 
time•ec
 
	mô_öãrvÆ
;

58 
time•ec
 
	mô_vÆue
;

59 } 
	tôimî•ec_t
;

63 
p‹t_¸óã
();

65 
	$p‹t_¸óã
()

68 
	}
}

71 
p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

72 *
u£r
);

74 
	$p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

75 *
u£r
)

78 
	}
}

81 
p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
);

83 
	$p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
)

86 
	}
}

89 
p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

90 
time•ec
 *
timeout
);

92 
	$p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

93 
time•ec
 *
timeout
)

96 
	}
}

98 
p‹t_£nd
(
p‹t
, 
evíts
, *
u£r
);

100 
	$p‹t_£nd
(
p‹t
, 
evíts
, *
u£r
)

103 
	}
}

106 
timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
);

108 
	$timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

111 
	}
}

114 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

115 
ôimî•ec
 *
ovÆue
);

117 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

118 
ôimî•ec
 *
ovÆue
)

121 
	}
}

124 
timî_dñëe
(
timî_t
 
timîid
);

126 
	$timî_dñëe
(
timî_t
 
timîid
)

129 
	}
}

135 
ngx_uöt_t
 
	mevíts
;

136 } 
	tngx_evíç‹t_c⁄f_t
;

139 
ngx_öt_t
 
ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

140 
ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

141 
ngx_öt_t
 
ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

142 
ngx_uöt_t
 
Êags
);

143 
ngx_öt_t
 
ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

144 
ngx_uöt_t
 
Êags
);

145 
ngx_öt_t
 
ngx_evíç‹t_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
);

146 
ngx_öt_t
 
ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

147 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

149 *
ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

150 *
ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

152 
	gï
 = -1;

153 
p‹t_evít_t
 *
	gevít_li°
;

154 
ngx_uöt_t
 
	g√víts
;

155 
timî_t
 
	gevít_timî
 = (timer_t) -1;

156 
ngx_evít_t
 
	gnŸify_evít
;

158 
ngx_°r_t
 
	gevíç‹t_«me
 = 
ngx_°rög
("eventport");

161 
ngx_comm™d_t
 
	gngx_evíç‹t_comm™ds
[] = {

163 { 
ngx_°rög
("eventport_events"),

164 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

165 
ngx_c⁄f_£t_num_¶Ÿ
,

167 
off£tof
(
ngx_evíç‹t_c⁄f_t
, 
evíts
),

168 
NULL
 },

170 
ngx_nuŒ_comm™d


174 
ngx_evít_moduÀ_t
 
	gngx_evíç‹t_moduÀ_˘x
 = {

175 &
evíç‹t_«me
,

176 
ngx_evíç‹t_¸óã_c⁄f
,

177 
ngx_evíç‹t_öô_c⁄f
,

180 
ngx_evíç‹t_add_evít
,

181 
ngx_evíç‹t_dñ_evít
,

182 
ngx_evíç‹t_add_evít
,

183 
ngx_evíç‹t_dñ_evít
,

184 
NULL
,

185 
NULL
,

186 
ngx_evíç‹t_nŸify
,

187 
ngx_evíç‹t_¥o˚ss_evíts
,

188 
ngx_evíç‹t_öô
,

189 
ngx_evíç‹t_d⁄e
,

194 
ngx_moduÀ_t
 
	gngx_evíç‹t_moduÀ
 = {

195 
NGX_MODULE_V1
,

196 &
ngx_evíç‹t_moduÀ_˘x
,

197 
ngx_evíç‹t_comm™ds
,

198 
NGX_EVENT_MODULE
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NGX_MODULE_V1_PADDING


210 
ngx_öt_t


211 
	$ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

213 
p‹t_nŸify_t
 
≤
;

214 
ôimî•ec
 
ôs
;

215 
sigevít
 
£v
;

216 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

218 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíç‹t_moduÀ
);

220 i‡(
ï
 == -1) {

221 
ï
 = 
	`p‹t_¸óã
();

223 i‡(
ï
 == -1) {

224 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

226  
NGX_ERROR
;

229 
nŸify_evít
.
a˘ive
 = 1;

230 
nŸify_evít
.
log
 = 
cy˛e
->log;

233 i‡(
√víts
 < 
ïcf
->
evíts
) {

234 i‡(
evít_li°
) {

235 
	`ngx_‰ì
(
evít_li°
);

238 
evít_li°
 = 
	`ngx_Æloc
((
p‹t_evít_t
Ë* 
ïcf
->
evíts
,

239 
cy˛e
->
log
);

240 i‡(
evít_li°
 =
NULL
) {

241  
NGX_ERROR
;

245 
ngx_evít_Êags
 = 
NGX_USE_EVENTPORT_EVENT
;

247 i‡(
timî
) {

248 
	`ngx_memzîo
(&
≤
, (
p‹t_nŸify_t
));

249 
≤
.
p‹äfy_p‹t
 = 
ï
;

251 
	`ngx_memzîo
(&
£v
, (
sigevít
));

252 
£v
.
sigev_nŸify
 = 
SIGEV_PORT
;

253 #i‡!(
NGX_TEST_BUILD_EVENTPORT
)

254 
£v
.
sigev_vÆue
.
sivÆ_±r
 = &
≤
;

257 i‡(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£v
, &
evít_timî
) == -1) {

258 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

260  
NGX_ERROR
;

263 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 
timî
 / 1000;

264 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

265 
ôs
.
ô_vÆue
.
tv_£c
 = 
timî
 / 1000;

266 
ôs
.
ô_vÆue
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

268 i‡(
	`timî_£âime
(
evít_timî
, 0, &
ôs
, 
NULL
) == -1) {

269 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

271  
NGX_ERROR
;

274 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

277 
√víts
 = 
ïcf
->
evíts
;

279 
ngx_io
 = 
ngx_os_io
;

281 
ngx_evít_a˘i⁄s
 = 
ngx_evíç‹t_moduÀ_˘x
.
a˘i⁄s
;

283  
NGX_OK
;

284 
	}
}

288 
	$ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

290 i‡(
evít_timî
 !(
timî_t
) -1) {

291 i‡(
	`timî_dñëe
(
evít_timî
) == -1) {

292 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

296 
evít_timî
 = (
timî_t
) -1;

299 i‡(
	`˛o£
(
ï
) == -1) {

300 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

304 
ï
 = -1;

306 
	`ngx_‰ì
(
evít_li°
);

308 
evít_li°
 = 
NULL
;

309 
√víts
 = 0;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

316 
ngx_öt_t
 
evíts
, 
¥ev
;

317 
ngx_evít_t
 *
e
;

318 
ngx_c⁄√˘i⁄_t
 *
c
;

320 
c
 = 
ev
->
d©a
;

322 
evíts
 = 
evít
;

324 i‡(
evít
 =
NGX_READ_EVENT
) {

325 
e
 = 
c
->
wrôe
;

326 
¥ev
 = 
POLLOUT
;

327 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

328 
evíts
 = 
POLLIN
;

332 
e
 = 
c
->
ªad
;

333 
¥ev
 = 
POLLIN
;

334 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

335 
evíts
 = 
POLLOUT
;

339 i‡(
e
->
⁄eshŸ
) {

340 
evíts
 |
¥ev
;

343 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

344 "evíç‹àaddÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evíts
);

346 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evíts
,

347 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

350 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

352  
NGX_ERROR
;

355 
ev
->
a˘ive
 = 1;

356 
ev
->
⁄eshŸ
 = 1;

358  
NGX_OK
;

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

365 
ngx_evít_t
 *
e
;

366 
ngx_c⁄√˘i⁄_t
 *
c
;

374 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

375 
ev
->
a˘ive
 = 0;

376 
ev
->
⁄eshŸ
 = 0;

377  
NGX_OK
;

380 
c
 = 
ev
->
d©a
;

382 i‡(
evít
 =
NGX_READ_EVENT
) {

383 
e
 = 
c
->
wrôe
;

384 
evít
 = 
POLLOUT
;

387 
e
 = 
c
->
ªad
;

388 
evít
 = 
POLLIN
;

391 i‡(
e
->
⁄eshŸ
) {

392 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

393 "evíç‹àch™gêevít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

395 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evít
,

396 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

399 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

401  
NGX_ERROR
;

405 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

406 "evíç‹àdñÉvít: fd:%d", 
c
->
fd
);

408 i‡(
	`p‹t_dissocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
) == -1) {

409 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

411  
NGX_ERROR
;

415 
ev
->
a˘ive
 = 0;

416 
ev
->
⁄eshŸ
 = 0;

418  
NGX_OK
;

419 
	}
}

422 
ngx_öt_t


423 
	$ngx_evíç‹t_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
)

425 
nŸify_evít
.
h™dÀr
 = handler;

427 i‡(
	`p‹t_£nd
(
ï
, 0, &
nŸify_evít
) != 0) {

428 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
nŸify_evít
.
log
, 
ngx_î∫o
,

430  
NGX_ERROR
;

433  
NGX_OK
;

434 
	}
}

437 
ngx_öt_t


438 
	$ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

439 
ngx_uöt_t
 
Êags
)

441 
n
, 
ªvíts
;

442 
u_öt
 
evíts
;

443 
ngx_îr_t
 
îr
;

444 
ngx_öt_t
 
ö°™˚
;

445 
ngx_uöt_t
 
i
, 
Àvñ
;

446 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

447 
ngx_queue_t
 *
queue
;

448 
ngx_c⁄√˘i⁄_t
 *
c
;

449 
time•ec
 
ts
, *
ç
;

451 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

452 
ç
 = 
NULL
;

455 
ts
.
tv_£c
 = 
timî
 / 1000;

456 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

457 
ç
 = &
ts
;

460 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

461 "evíç‹àtimî: %M", 
timî
);

463 
evíts
 = 1;

465 
n
 = 
	`p‹t_gën
(
ï
, 
evít_li°
, (
u_öt
Ë
√víts
, &
evíts
, 
ç
);

467 
îr
 = 
ngx_î∫o
;

469 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

470 
	`ngx_time_upd©e
();

473 i‡(
n
 == -1) {

474 i‡(
îr
 =
ETIME
) {

475 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

476  
NGX_OK
;

479 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

481  
NGX_ERROR
;

484 
Àvñ
 = (
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
;

485 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "port_getn() failed");

486  
NGX_ERROR
;

489 i‡(
evíts
 == 0) {

490 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

491  
NGX_OK
;

494 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

496  
NGX_ERROR
;

499 
i
 = 0; i < 
evíts
; i++) {

501 i‡(
evít_li°
[
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_TIMER
) {

502 
	`ngx_time_upd©e
();

506 
ev
 = 
evít_li°
[
i
].
p‹ãv_u£r
;

508 
evít_li°
[
i
].
p‹ãv_sour˚
) {

510 
PORT_SOURCE_FD
:

512 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

513 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

515 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

522 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

523 "evíç‹t: sèÀÉvíà%p", 
ev
);

527 
ªvíts
 = 
evít_li°
[
i
].
p‹ãv_evíts
;

529 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

531 (Ë
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

533 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

534 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

536 (Ë
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

539 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

540 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

542 (Ë
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

545 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

552 
ªvíts
 |
POLLIN
|
POLLOUT
;

555 
c
 = 
ev
->
d©a
;

556 
ªv
 = 
c
->
ªad
;

557 
wev
 = 
c
->
wrôe
;

559 
ªv
->
a˘ive
 = 0;

560 
wev
->
a˘ive
 = 0;

562 i‡(
ªvíts
 & 
POLLIN
) {

563 
ªv
->
ªady
 = 1;

565 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

566 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


567 : &
ngx_po°ed_evíts
;

569 
	`ngx_po°_evít
(
ªv
, 
queue
);

572 
ªv
->
	`h™dÀr
(rev);

574 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

579 i‡(
ªv
->
ac˚±
) {

580 i‡(
ngx_u£_ac˚±_muãx
) {

581 
ngx_ac˚±_evíts
 = 1;

585 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
POLLIN
,

586 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

589 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

591  
NGX_ERROR
;

596 i‡(
ªvíts
 & 
POLLOUT
) {

597 
wev
->
ªady
 = 1;

599 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

600 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

603 
wev
->
	`h™dÀr
(wev);

609 
PORT_SOURCE_USER
:

611 
ev
->
	`h™dÀr
(ev);

616 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

618 (Ë
evít_li°
[
i
].
p‹ãv_obje˘
);

623  
NGX_OK
;

624 
	}
}

628 
	$ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

630 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

632 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evíç‹t_c⁄f_t
));

633 i‡(
ïcf
 =
NULL
) {

634  
NULL
;

637 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

639  
ïcf
;

640 
	}
}

644 
	$ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

646 
ngx_evíç‹t_c⁄f_t
 *
ïcf
 = 
c⁄f
;

648 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 32);

650  
NGX_CONF_OK
;

651 
	}
}

	@src/event/modules/ngx_kqueue_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mch™ges
;

15 
ngx_uöt_t
 
	mevíts
;

16 } 
	tngx_kqueue_c⁄f_t
;

19 
ngx_öt_t
 
ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

20 #ifde‡
EVFILT_USER


21 
ngx_öt_t
 
ngx_kqueue_nŸify_öô
(
ngx_log_t
 *
log
);

23 
ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

24 
ngx_öt_t
 
ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

25 
ngx_uöt_t
 
Êags
);

26 
ngx_öt_t
 
ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

27 
ngx_uöt_t
 
Êags
);

28 
ngx_öt_t
 
ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
fûãr
,

29 
ngx_uöt_t
 
Êags
);

30 #ifde‡
EVFILT_USER


31 
ngx_öt_t
 
ngx_kqueue_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
);

33 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

34 
ngx_uöt_t
 
Êags
);

35 
ngx_ölöe
 
ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
,

36 
kevít
 *
kev
);

38 *
ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

39 *
ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

42 
	gngx_kqueue
 = -1;

44 
kevít
 *
	gch™ge_li°
;

45 
kevít
 *
	gevít_li°
;

46 
ngx_uöt_t
 
	gmax_ch™ges
, 
	gnch™ges
, 
	g√víts
;

48 #ifde‡
EVFILT_USER


49 
ngx_evít_t
 
	gnŸify_evít
;

50 
kevít
 
	gnŸify_kev
;

54 
ngx_°r_t
 
	gkqueue_«me
 = 
ngx_°rög
("kqueue");

56 
ngx_comm™d_t
 
	gngx_kqueue_comm™ds
[] = {

58 { 
ngx_°rög
("kqueue_changes"),

59 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

62 
off£tof
(
ngx_kqueue_c⁄f_t
, 
ch™ges
),

63 
NULL
 },

65 { 
ngx_°rög
("kqueue_events"),

66 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

69 
off£tof
(
ngx_kqueue_c⁄f_t
, 
evíts
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_evít_moduÀ_t
 
	gngx_kqueue_moduÀ_˘x
 = {

77 &
kqueue_«me
,

78 
ngx_kqueue_¸óã_c⁄f
,

79 
ngx_kqueue_öô_c⁄f
,

82 
ngx_kqueue_add_evít
,

83 
ngx_kqueue_dñ_evít
,

84 
ngx_kqueue_add_evít
,

85 
ngx_kqueue_dñ_evít
,

86 
NULL
,

87 
NULL
,

88 #ifde‡
EVFILT_USER


89 
ngx_kqueue_nŸify
,

91 
NULL
,

93 
ngx_kqueue_¥o˚ss_evíts
,

94 
ngx_kqueue_öô
,

95 
ngx_kqueue_d⁄e


100 
ngx_moduÀ_t
 
	gngx_kqueue_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_kqueue_moduÀ_˘x
,

103 
ngx_kqueue_comm™ds
,

104 
NGX_EVENT_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_öt_t


117 
	$ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

119 
ngx_kqueue_c⁄f_t
 *
kcf
;

120 
time•ec
 
ts
;

121 #i‡(
NGX_HAVE_TIMER_EVENT
)

122 
kevít
 
kev
;

125 
kcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_kqueue_moduÀ
);

127 i‡(
ngx_kqueue
 == -1) {

128 
ngx_kqueue
 = 
	`kqueue
();

130 i‡(
ngx_kqueue
 == -1) {

131 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

133  
NGX_ERROR
;

136 #ifde‡
EVFILT_USER


137 i‡(
	`ngx_kqueue_nŸify_öô
(
cy˛e
->
log
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

143 i‡(
max_ch™ges
 < 
kcf
->
ch™ges
) {

144 i‡(
nch™ges
) {

145 
ts
.
tv_£c
 = 0;

146 
ts
.
tv_n£c
 = 0;

148 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

151 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

153  
NGX_ERROR
;

155 
nch™ges
 = 0;

158 i‡(
ch™ge_li°
) {

159 
	`ngx_‰ì
(
ch™ge_li°
);

162 
ch™ge_li°
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

163 
cy˛e
->
log
);

164 i‡(
ch™ge_li°
 =
NULL
) {

165  
NGX_ERROR
;

169 
max_ch™ges
 = 
kcf
->
ch™ges
;

171 i‡(
√víts
 < 
kcf
->
evíts
) {

172 i‡(
evít_li°
) {

173 
	`ngx_‰ì
(
evít_li°
);

176 
evít_li°
 = 
	`ngx_Æloc
(
kcf
->
evíts
 * (
kevít
), 
cy˛e
->
log
);

177 i‡(
evít_li°
 =
NULL
) {

178  
NGX_ERROR
;

182 
ngx_evít_Êags
 = 
NGX_USE_ONESHOT_EVENT


183 |
NGX_USE_KQUEUE_EVENT


184 |
NGX_USE_VNODE_EVENT
;

186 #i‡(
NGX_HAVE_TIMER_EVENT
)

188 i‡(
timî
) {

189 
kev
.
idít
 = 0;

190 
kev
.
fûãr
 = 
EVFILT_TIMER
;

191 
kev
.
Êags
 = 
EV_ADD
|
EV_ENABLE
;

192 
kev
.
fÊags
 = 0;

193 
kev
.
d©a
 = 
timî
;

194 
kev
.
ud©a
 = 0;

196 
ts
.
tv_£c
 = 0;

197 
ts
.
tv_n£c
 = 0;

199 i‡(
	`kevít
(
ngx_kqueue
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

200 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

202  
NGX_ERROR
;

205 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

210 #i‡(
NGX_HAVE_CLEAR_EVENT
)

211 
ngx_evít_Êags
 |
NGX_USE_CLEAR_EVENT
;

213 
ngx_evít_Êags
 |
NGX_USE_LEVEL_EVENT
;

216 #i‡(
NGX_HAVE_LOWAT_EVENT
)

217 
ngx_evít_Êags
 |
NGX_USE_LOWAT_EVENT
;

220 
√víts
 = 
kcf
->
evíts
;

222 
ngx_io
 = 
ngx_os_io
;

224 
ngx_evít_a˘i⁄s
 = 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
;

226  
NGX_OK
;

227 
	}
}

230 #ifde‡
EVFILT_USER


232 
ngx_öt_t


233 
	$ngx_kqueue_nŸify_öô
(
ngx_log_t
 *
log
)

235 
nŸify_kev
.
idít
 = 0;

236 
nŸify_kev
.
fûãr
 = 
EVFILT_USER
;

237 
nŸify_kev
.
d©a
 = 0;

238 
nŸify_kev
.
Êags
 = 
EV_ADD
|
EV_CLEAR
;

239 
nŸify_kev
.
fÊags
 = 0;

240 
nŸify_kev
.
ud©a
 = 0;

242 i‡(
	`kevít
(
ngx_kqueue
, &
nŸify_kev
, 1, 
NULL
, 0, NULL) == -1) {

243 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

245  
NGX_ERROR
;

248 
nŸify_evít
.
a˘ive
 = 1;

249 
nŸify_evít
.
log
 =Üog;

251 
nŸify_kev
.
Êags
 = 0;

252 
nŸify_kev
.
fÊags
 = 
NOTE_TRIGGER
;

253 
nŸify_kev
.
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë&
nŸify_evít
);

255  
NGX_OK
;

256 
	}
}

262 
	$ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

264 i‡(
	`˛o£
(
ngx_kqueue
) == -1) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

269 
ngx_kqueue
 = -1;

271 
	`ngx_‰ì
(
ch™ge_li°
);

272 
	`ngx_‰ì
(
evít_li°
);

274 
ch™ge_li°
 = 
NULL
;

275 
evít_li°
 = 
NULL
;

276 
max_ch™ges
 = 0;

277 
nch™ges
 = 0;

278 
√víts
 = 0;

279 
	}
}

282 
ngx_öt_t


283 
	$ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

285 
ngx_öt_t
 
rc
;

287 
ngx_evít_t
 *
e
;

288 
ngx_c⁄√˘i⁄_t
 *
c
;

291 
ev
->
a˘ive
 = 1;

292 
ev
->
dißbÀd
 = 0;

293 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

297 i‡(
ev
->
ödex
 < 
nch™ges


298 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

299 =(
uöçå_t
Ë
ev
)

301 i‡(
ch™ge_li°
[
ev
->
ödex
].
Êags
 =
EV_DISABLE
) {

308 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

310 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

312 i‡(
ev
->
ödex
 < --
nch™ges
) {

313 
e
 = (
ngx_evít_t
 *)

314 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

315 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

316 
e
->
ödex
 = 
ev
->index;

319  
NGX_OK
;

322 
c
 = 
ev
->
d©a
;

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

325 "¥eviou†evíà⁄ #%d wîênŸÖas£d i¿kî√l", 
c
->
fd
);

327  
NGX_ERROR
;

332 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
EV_ADD
|
EV_ENABLE
|
Êags
);

334  
rc
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

341 
ngx_öt_t
 
rc
;

342 
ngx_evít_t
 *
e
;

344 
ev
->
a˘ive
 = 0;

345 
ev
->
dißbÀd
 = 0;

347 i‡(
ev
->
ödex
 < 
nch™ges


348 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

349 =(
uöçå_t
Ë
ev
)

351 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

353 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

357 
nch™ges
--;

359 i‡(
ev
->
ödex
 < 
nch™ges
) {

360 
e
 = (
ngx_evít_t
 *)

361 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

362 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

363 
e
->
ödex
 = 
ev
->index;

366  
NGX_OK
;

375 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

376  
NGX_OK
;

379 i‡(
Êags
 & 
NGX_DISABLE_EVENT
) {

380 
ev
->
dißbÀd
 = 1;

383 
Êags
 |
EV_DELETE
;

386 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
Êags
);

388  
rc
;

389 
	}
}

392 
ngx_öt_t


393 
	$ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
fûãr
, 
ngx_uöt_t
 
Êags
)

395 
kevít
 *
kev
;

396 
time•ec
 
ts
;

397 
ngx_c⁄√˘i⁄_t
 *
c
;

399 
c
 = 
ev
->
d©a
;

401 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

403 
c
->
fd
, 
fûãr
, 
Êags
);

405 i‡(
nch™ges
 >
max_ch™ges
) {

406 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

409 
ts
.
tv_£c
 = 0;

410 
ts
.
tv_n£c
 = 0;

412 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

415 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

416  
NGX_ERROR
;

419 
nch™ges
 = 0;

422 
kev
 = &
ch™ge_li°
[
nch™ges
];

424 
kev
->
idít
 = 
c
->
fd
;

425 
kev
->
fûãr
 = () filter;

426 
kev
->
Êags
 = (
u_sh‹t
) flags;

427 
kev
->
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë
ev
 |Év->
ö°™˚
);

429 i‡(
fûãr
 =
EVFILT_VNODE
) {

430 
kev
->
fÊags
 = 
NOTE_DELETE
|
NOTE_WRITE
|
NOTE_EXTEND


431 |
NOTE_ATTRIB
|
NOTE_RENAME


432 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 430000) \

433 || 
__FªeBSD_vîsi⁄
 >= 500018

434 |
NOTE_REVOKE


437 
kev
->
d©a
 = 0;

440 #i‡(
NGX_HAVE_LOWAT_EVENT
)

441 i‡(
Êags
 & 
NGX_LOWAT_EVENT
) {

442 
kev
->
fÊags
 = 
NOTE_LOWAT
;

443 
kev
->
d©a
 = 
ev
->
avaûabÀ
;

446 
kev
->
fÊags
 = 0;

447 
kev
->
d©a
 = 0;

450 
kev
->
fÊags
 = 0;

451 
kev
->
d©a
 = 0;

455 
ev
->
ödex
 = 
nch™ges
;

456 
nch™ges
++;

458 i‡(
Êags
 & 
NGX_FLUSH_EVENT
) {

459 
ts
.
tv_£c
 = 0;

460 
ts
.
tv_n£c
 = 0;

462 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "kevent flush");

464 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

467 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

468  
NGX_ERROR
;

471 
nch™ges
 = 0;

474  
NGX_OK
;

475 
	}
}

478 #ifde‡
EVFILT_USER


480 
ngx_öt_t


481 
	$ngx_kqueue_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
)

483 
nŸify_evít
.
h™dÀr
 = handler;

485 i‡(
	`kevít
(
ngx_kqueue
, &
nŸify_kev
, 1, 
NULL
, 0, NULL) == -1) {

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
nŸify_evít
.
log
, 
ngx_î∫o
,

488  
NGX_ERROR
;

491  
NGX_OK
;

492 
	}
}

497 
ngx_öt_t


498 
	$ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

499 
ngx_uöt_t
 
Êags
)

501 
evíts
, 
n
;

502 
ngx_öt_t
 
i
, 
ö°™˚
;

503 
ngx_uöt_t
 
Àvñ
;

504 
ngx_îr_t
 
îr
;

505 
ngx_evít_t
 *
ev
;

506 
ngx_queue_t
 *
queue
;

507 
time•ec
 
ts
, *
ç
;

509 
n
 = (Ë
nch™ges
;

510 
nch™ges
 = 0;

512 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

513 
ç
 = 
NULL
;

517 
ts
.
tv_£c
 = 
timî
 / 1000;

518 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

526 #i‡(
NGX_DARWIN_KEVENT_BUG
)

527 
ts
.
tv_n£c
 <<= 32;

530 
ç
 = &
ts
;

533 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

534 "kevíàtimî: %M, ch™ges: %d", 
timî
, 
n
);

536 
evíts
 = 
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, 
n
, 
evít_li°
, (Ë
√víts
, 
ç
);

538 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

540 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

541 
	`ngx_time_upd©e
();

544 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

545 "kevíàevíts: %d", 
evíts
);

547 i‡(
îr
) {

548 i‡(
îr
 =
NGX_EINTR
) {

550 i‡(
ngx_evít_timî_Æ¨m
) {

551 
ngx_evít_timî_Æ¨m
 = 0;

552  
NGX_OK
;

555 
Àvñ
 = 
NGX_LOG_INFO
;

558 
Àvñ
 = 
NGX_LOG_ALERT
;

561 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "kevent() failed");

562  
NGX_ERROR
;

565 i‡(
evíts
 == 0) {

566 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

567  
NGX_OK
;

570 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

572  
NGX_ERROR
;

575 
i
 = 0; i < 
evíts
; i++) {

577 
	`ngx_kqueue_dump_evít
(
cy˛e
->
log
, &
evít_li°
[
i
]);

579 i‡(
evít_li°
[
i
].
Êags
 & 
EV_ERROR
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
evít_li°
[
i
].
d©a
,

582 (Ë
evít_li°
[
i
].
idít
,Évít_li°[i].
fûãr
,

583 
evít_li°
[
i
].
Êags
);

587 #i‡(
NGX_HAVE_TIMER_EVENT
)

589 i‡(
evít_li°
[
i
].
fûãr
 =
EVFILT_TIMER
) {

590 
	`ngx_time_upd©e
();

596 
ev
 = (
ngx_evít_t
 *Ë
evít_li°
[
i
].
ud©a
;

598 
evít_li°
[
i
].
fûãr
) {

600 
EVFILT_READ
:

601 
EVFILT_WRITE
:

603 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

604 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

606 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

613 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

614 "kevít: sèÀÉvíà%p", 
ev
);

618 i‡(
ev
->
log
 && (ev->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

619 
	`ngx_kqueue_dump_evít
(
ev
->
log
, &
evít_li°
[
i
]);

622 i‡(
ev
->
⁄eshŸ
) {

623 
ev
->
a˘ive
 = 0;

626 
ev
->
avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

628 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

629 
ev
->
≥ndög_eof
 = 1;

630 
ev
->
kq_î∫o
 = 
evít_li°
[
i
].
fÊags
;

633 
ev
->
ªady
 = 1;

637 
EVFILT_VNODE
:

638 
ev
->
kq_vnode
 = 1;

642 
EVFILT_AIO
:

643 
ev
->
com∂ëe
 = 1;

644 
ev
->
ªady
 = 1;

648 #ifde‡
EVFILT_USER


649 
EVFILT_USER
:

654 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

656 
evít_li°
[
i
].
fûãr
);

660 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

661 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


662 : &
ngx_po°ed_evíts
;

664 
	`ngx_po°_evít
(
ev
, 
queue
);

669 
ev
->
	`h™dÀr
(ev);

672  
NGX_OK
;

673 
	}
}

676 
ngx_ölöe
 

677 
	$ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
, 
kevít
 *
kev
)

679 i‡(
kev
->
idít
 > 0x8000000 && kev->ident != () -1) {

680 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

682 (*Ë
kev
->
idít
, kev->
fûãr
,

683 
kev
->
Êags
, kev->
fÊags
,

684 (Ë
kev
->
d©a
, kev->
ud©a
);

687 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

689 (Ë
kev
->
idít
, kev->
fûãr
,

690 
kev
->
Êags
, kev->
fÊags
,

691 (Ë
kev
->
d©a
, kev->
ud©a
);

693 
	}
}

697 
	$ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

699 
ngx_kqueue_c⁄f_t
 *
kcf
;

701 
kcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_kqueue_c⁄f_t
));

702 i‡(
kcf
 =
NULL
) {

703  
NULL
;

706 
kcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

707 
kcf
->
evíts
 = 
NGX_CONF_UNSET
;

709  
kcf
;

710 
	}
}

714 
	$ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

716 
ngx_kqueue_c⁄f_t
 *
kcf
 = 
c⁄f
;

718 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
ch™ges
, 512);

719 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
evíts
, 512);

721  
NGX_CONF_OK
;

722 
	}
}

	@src/event/modules/ngx_poll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 *
ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
pﬁlfd
 *
	gevít_li°
;

25 
ngx_uöt_t
 
	g√víts
;

28 
ngx_°r_t
 
	gpﬁl_«me
 = 
ngx_°rög
("poll");

30 
ngx_evít_moduÀ_t
 
	gngx_pﬁl_moduÀ_˘x
 = {

31 &
pﬁl_«me
,

32 
NULL
,

33 
ngx_pﬁl_öô_c⁄f
,

36 
ngx_pﬁl_add_evít
,

37 
ngx_pﬁl_dñ_evít
,

38 
ngx_pﬁl_add_evít
,

39 
ngx_pﬁl_dñ_evít
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_pﬁl_¥o˚ss_evíts
,

44 
ngx_pﬁl_öô
,

45 
ngx_pﬁl_d⁄e


50 
ngx_moduÀ_t
 
	gngx_pﬁl_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_pﬁl_moduÀ_˘x
,

53 
NULL
,

54 
NGX_EVENT_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
ngx_öt_t


68 
	$ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

70 
pﬁlfd
 *
li°
;

72 i‡(
evít_li°
 =
NULL
) {

73 
√víts
 = 0;

76 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


77 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


78 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

80 
li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
cy˛e
->
c⁄√˘i⁄_n
,

81 
cy˛e
->
log
);

82 i‡(
li°
 =
NULL
) {

83  
NGX_ERROR
;

86 i‡(
evít_li°
) {

87 
	`ngx_mem˝y
(
li°
, 
evít_li°
, (
ngx_evít_t
 *Ë* 
√víts
);

88 
	`ngx_‰ì
(
evít_li°
);

91 
evít_li°
 = 
li°
;

94 
ngx_io
 = 
ngx_os_io
;

96 
ngx_evít_a˘i⁄s
 = 
ngx_pﬁl_moduÀ_˘x
.
a˘i⁄s
;

98 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

100  
NGX_OK
;

101 
	}
}

105 
	$ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

107 
	`ngx_‰ì
(
evít_li°
);

109 
evít_li°
 = 
NULL
;

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

116 
ngx_evít_t
 *
e
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
c
 = 
ev
->
d©a
;

121 
ev
->
a˘ive
 = 1;

123 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

125 "pﬁ»evíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

126  
NGX_OK
;

129 i‡(
evít
 =
NGX_READ_EVENT
) {

130 
e
 = 
c
->
wrôe
;

131 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

132 
evít
 = 
POLLIN
;

136 
e
 = 
c
->
ªad
;

137 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

138 
evít
 = 
POLLOUT
;

142 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

143 "pﬁ»addÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

145 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

146 
evít_li°
[
√víts
].
fd
 = 
c
->fd;

147 
evít_li°
[
√víts
].
evíts
 = (Ë
evít
;

148 
evít_li°
[
√víts
].
ªvíts
 = 0;

150 
ev
->
ödex
 = 
√víts
;

151 
√víts
++;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

155 "pﬁ»add index: %i", 
e
->
ödex
);

157 
evít_li°
[
e
->
ödex
].
evíts
 |(Ë
evít
;

158 
ev
->
ödex
 = 
e
->index;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

168 
ngx_evít_t
 *
e
;

169 
ngx_c⁄√˘i⁄_t
 *
c
;

171 
c
 = 
ev
->
d©a
;

173 
ev
->
a˘ive
 = 0;

175 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

178 
c
->
fd
, 
evít
);

179  
NGX_OK
;

182 i‡(
evít
 =
NGX_READ_EVENT
) {

183 
e
 = 
c
->
wrôe
;

184 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

185 
evít
 = 
POLLIN
;

189 
e
 = 
c
->
ªad
;

190 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

191 
evít
 = 
POLLOUT
;

195 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

196 "pﬁ»dñÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

198 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

199 
√víts
--;

201 i‡(
ev
->
ödex
 < 
√víts
) {

203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

204 "ödex: c›yÉvíà%uòtÿ%i", 
√víts
, 
ev
->
ödex
);

206 
evít_li°
[
ev
->
ödex
] =Évít_li°[
√víts
];

208 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
√víts
].
fd
];

210 i‡(
c
->
fd
 == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

215 i‡(
c
->
ªad
->
ödex
 =
√víts
) {

216 
c
->
ªad
->
ödex
 = 
ev
->index;

219 i‡(
c
->
wrôe
->
ödex
 =
√víts
) {

220 
c
->
wrôe
->
ödex
 = 
ev
->index;

226 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

227 "pﬁ»dñ index: %i", 
e
->
ödex
);

229 
evít_li°
[
e
->
ödex
].
evíts
 &(Ë~
evít
;

232 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

234  
NGX_OK
;

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

241 
ªady
, 
ªvíts
;

242 
ngx_îr_t
 
îr
;

243 
ngx_uöt_t
 
i
, 
found
, 
Àvñ
;

244 
ngx_evít_t
 *
ev
;

245 
ngx_queue_t
 *
queue
;

246 
ngx_c⁄√˘i⁄_t
 *
c
;

250 #i‡(
NGX_DEBUG0
)

251 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

252 
i
 = 0; i < 
√víts
; i++) {

253 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

255 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
);

260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "pﬁ»timî: %M", 
timî
);

262 
ªady
 = 
	`pﬁl
(
evít_li°
, (
u_öt
Ë
√víts
, (Ë
timî
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "pﬁ»ªady %d o‡%ui", 
ªady
, 
√víts
);

273 i‡(
îr
) {

274 i‡(
îr
 =
NGX_EINTR
) {

276 i‡(
ngx_evít_timî_Æ¨m
) {

277 
ngx_evít_timî_Æ¨m
 = 0;

278  
NGX_OK
;

281 
Àvñ
 = 
NGX_LOG_INFO
;

284 
Àvñ
 = 
NGX_LOG_ALERT
;

287 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "poll() failed");

288  
NGX_ERROR
;

291 i‡(
ªady
 == 0) {

292 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

293  
NGX_OK
;

296 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

298  
NGX_ERROR
;

301 
i
 = 0; i < 
√víts
 && 
ªady
; i++) {

303 
ªvíts
 = 
evít_li°
[
i
].revents;

306 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

308 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

310 i‡(
ªvíts
) {

311 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

313 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

317 i‡(
ªvíts
 & 
POLLNVAL
) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

320 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

323 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

326 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

329 i‡(
evít_li°
[
i
].
fd
 == -1) {

337 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
i
].
fd
];

339 i‡(
c
->
fd
 == -1) {

340 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "unexpectedÉvent");

347 i‡(
i
 =
√víts
 - 1) {

348 
√víts
--;

350 
evít_li°
[
i
].
fd
 = -1;

356 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

363 
ªvíts
 |
POLLIN
|
POLLOUT
;

366 
found
 = 0;

368 i‡((
ªvíts
 & 
POLLIN
Ë&& 
c
->
ªad
->
a˘ive
) {

369 
found
 = 1;

371 
ev
 = 
c
->
ªad
;

372 
ev
->
ªady
 = 1;

374 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


375 : &
ngx_po°ed_evíts
;

377 
	`ngx_po°_evít
(
ev
, 
queue
);

380 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
c
->
wrôe
->
a˘ive
) {

381 
found
 = 1;

383 
ev
 = 
c
->
wrôe
;

384 
ev
->
ªady
 = 1;

386 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

389 i‡(
found
) {

390 
ªady
--;

395 i‡(
ªady
 != 0) {

396 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "pollÑeady !=Évents");

399  
NGX_OK
;

400 
	}
}

404 
	$ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

406 
ngx_evít_c⁄f_t
 *
ecf
;

408 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

410 i‡(
ecf
->
u£
 !
ngx_pﬁl_moduÀ
.
˘x_ödex
) {

411  
NGX_CONF_OK
;

414  
NGX_CONF_OK
;

415 
	}
}

	@src/event/modules/ngx_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_öt_t
 
	gmax_fd
;

31 
ngx_uöt_t
 
	g√víts
;

33 
ngx_evít_t
 **
	gevít_ödex
;

36 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

38 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

39 &
£À˘_«me
,

40 
NULL
,

41 
ngx_£À˘_öô_c⁄f
,

44 
ngx_£À˘_add_evít
,

45 
ngx_£À˘_dñ_evít
,

46 
ngx_£À˘_add_evít
,

47 
ngx_£À˘_dñ_evít
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
ngx_£À˘_¥o˚ss_evíts
,

52 
ngx_£À˘_öô
,

53 
ngx_£À˘_d⁄e


58 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_£À˘_moduÀ_˘x
,

61 
NULL
,

62 
NGX_EVENT_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

77 
ngx_evít_t
 **
ödex
;

79 i‡(
evít_ödex
 =
NULL
) {

80 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

81 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

82 
√víts
 = 0;

85 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


86 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


87 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

89 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

90 
cy˛e
->
log
);

91 i‡(
ödex
 =
NULL
) {

92  
NGX_ERROR
;

95 i‡(
evít_ödex
) {

96 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

97 
	`ngx_‰ì
(
evít_ödex
);

100 
evít_ödex
 = 
ödex
;

103 
ngx_io
 = 
ngx_os_io
;

105 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

107 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

109 
max_fd
 = -1;

111  
NGX_OK
;

112 
	}
}

116 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_‰ì
(
evít_ödex
);

120 
evít_ödex
 = 
NULL
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

127 
ngx_c⁄√˘i⁄_t
 *
c
;

129 
c
 = 
ev
->
d©a
;

131 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

132 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

134 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

136 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

137  
NGX_OK
;

140 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

141 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

145 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

146  
NGX_ERROR
;

149 i‡(
evít
 =
NGX_READ_EVENT
) {

150 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

152 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

153 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

156 i‡(
max_fd
 !-1 && max_fd < 
c
->
fd
) {

157 
max_fd
 = 
c
->
fd
;

160 
ev
->
a˘ive
 = 1;

162 
evít_ödex
[
√víts
] = 
ev
;

163 
ev
->
ödex
 = 
√víts
;

164 
√víts
++;

166  
NGX_OK
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

173 
ngx_evít_t
 *
e
;

174 
ngx_c⁄√˘i⁄_t
 *
c
;

176 
c
 = 
ev
->
d©a
;

178 
ev
->
a˘ive
 = 0;

180 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

181  
NGX_OK
;

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

185 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

187 i‡(
evít
 =
NGX_READ_EVENT
) {

188 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

190 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

191 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

194 i‡(
max_fd
 =
c
->
fd
) {

195 
max_fd
 = -1;

198 i‡(
ev
->
ödex
 < --
√víts
) {

199 
e
 = 
evít_ödex
[
√víts
];

200 
evít_ödex
[
ev
->
ödex
] = 
e
;

201 
e
->
ödex
 = 
ev
->index;

204 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

206  
NGX_OK
;

207 
	}
}

210 
ngx_öt_t


211 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

212 
ngx_uöt_t
 
Êags
)

214 
ªady
, 
ƒódy
;

215 
ngx_îr_t
 
îr
;

216 
ngx_uöt_t
 
i
, 
found
;

217 
ngx_evít_t
 *
ev
;

218 
ngx_queue_t
 *
queue
;

219 
timevÆ
 
tv
, *
ç
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

222 i‡(
max_fd
 == -1) {

223 
i
 = 0; i < 
√víts
; i++) {

224 
c
 = 
evít_ödex
[
i
]->
d©a
;

225 i‡(
max_fd
 < 
c
->
fd
) {

226 
max_fd
 = 
c
->
fd
;

230 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

231 "ch™gêmax_fd: %i", 
max_fd
);

234 #i‡(
NGX_DEBUG
)

235 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

236 
i
 = 0; i < 
√víts
; i++) {

237 
ev
 = 
evít_ödex
[
i
];

238 
c
 = 
ev
->
d©a
;

239 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

240 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

243 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

244 "max_fd: %i", 
max_fd
);

248 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

249 
ç
 = 
NULL
;

252 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

253 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

254 
ç
 = &
tv
;

257 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

258 "£À˘Åimî: %M", 
timî
);

260 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

261 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

263 
ªady
 = 
	`£À˘
(
max_fd
 + 1, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

265 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

267 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

268 
	`ngx_time_upd©e
();

271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

272 "£À˘Ñódy %d", 
ªady
);

274 i‡(
îr
) {

275 
ngx_uöt_t
 
Àvñ
;

277 i‡(
îr
 =
NGX_EINTR
) {

279 i‡(
ngx_evít_timî_Æ¨m
) {

280 
ngx_evít_timî_Æ¨m
 = 0;

281  
NGX_OK
;

284 
Àvñ
 = 
NGX_LOG_INFO
;

287 
Àvñ
 = 
NGX_LOG_ALERT
;

290 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "select() failed");

292 i‡(
îr
 =
NGX_EBADF
) {

293 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

296  
NGX_ERROR
;

299 i‡(
ªady
 == 0) {

300 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

301  
NGX_OK
;

304 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

306  
NGX_ERROR
;

309 
ƒódy
 = 0;

311 
i
 = 0; i < 
√víts
; i++) {

312 
ev
 = 
evít_ödex
[
i
];

313 
c
 = 
ev
->
d©a
;

314 
found
 = 0;

316 i‡(
ev
->
wrôe
) {

317 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

318 
found
 = 1;

319 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

320 "£À˘ wrôê%d", 
c
->
fd
);

324 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

325 
found
 = 1;

326 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

327 "£À˘Ñód %d", 
c
->
fd
);

331 i‡(
found
) {

332 
ev
->
ªady
 = 1;

334 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


335 : &
ngx_po°ed_evíts
;

337 
	`ngx_po°_evít
(
ev
, 
queue
);

339 
ƒódy
++;

343 i‡(
ªady
 !
ƒódy
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

345 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

347 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

350  
NGX_OK
;

351 
	}
}

355 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

357 
n
;

358 
sockÀn_t
 
Àn
;

359 
ngx_îr_t
 
îr
;

360 
ngx_sockë_t
 
s
;

362 
s
 = 0; s <
max_fd
; s++) {

364 i‡(
	`FD_ISSET
(
s
, &
ma°î_ªad_fd_£t
) == 0) {

368 
Àn
 = ();

370 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

371 
îr
 = 
ngx_sockë_î∫o
;

373 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

374 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

376 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

380 
s
 = 0; s <
max_fd
; s++) {

382 i‡(
	`FD_ISSET
(
s
, &
ma°î_wrôe_fd_£t
) == 0) {

386 
Àn
 = ();

388 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

389 
îr
 = 
ngx_sockë_î∫o
;

391 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

392 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

394 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

398 
max_fd
 = -1;

399 
	}
}

403 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

405 
ngx_evít_c⁄f_t
 *
ecf
;

407 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

409 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

410  
NGX_CONF_OK
;

415 i‡(
cy˛e
->
c⁄√˘i⁄_n
 > 
FD_SETSIZE
) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

418 "suµ‹ãd by sñe˘(Ëi†%ud", 
FD_SETSIZE
);

419  
NGX_CONF_ERROR
;

422  
NGX_CONF_OK
;

423 
	}
}

	@src/event/modules/ngx_win32_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_uöt_t
 
	gmax_ªad
;

31 
ngx_uöt_t
 
	gmax_wrôe
;

32 
ngx_uöt_t
 
	g√víts
;

34 
ngx_evít_t
 **
	gevít_ödex
;

37 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

39 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

40 &
£À˘_«me
,

41 
NULL
,

42 
ngx_£À˘_öô_c⁄f
,

45 
ngx_£À˘_add_evít
,

46 
ngx_£À˘_dñ_evít
,

47 
ngx_£À˘_add_evít
,

48 
ngx_£À˘_dñ_evít
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
ngx_£À˘_¥o˚ss_evíts
,

53 
ngx_£À˘_öô
,

54 
ngx_£À˘_d⁄e


59 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_£À˘_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 
ngx_öt_t


76 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

78 
ngx_evít_t
 **
ödex
;

80 i‡(
evít_ödex
 =
NULL
) {

81 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

82 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

83 
√víts
 = 0;

86 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


87 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


88 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

90 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

91 
cy˛e
->
log
);

92 i‡(
ödex
 =
NULL
) {

93  
NGX_ERROR
;

96 i‡(
evít_ödex
) {

97 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

98 
	`ngx_‰ì
(
evít_ödex
);

101 
evít_ödex
 = 
ödex
;

104 
ngx_io
 = 
ngx_os_io
;

106 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

108 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

110 
max_ªad
 = 0;

111 
max_wrôe
 = 0;

113  
NGX_OK
;

114 
	}
}

118 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

120 
	`ngx_‰ì
(
evít_ödex
);

122 
evít_ödex
 = 
NULL
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

129 
ngx_c⁄√˘i⁄_t
 *
c
;

131 
c
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

134 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

136 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

138 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

139  
NGX_OK
;

142 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

143 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

147 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

148  
NGX_ERROR
;

151 i‡((
evít
 =
NGX_READ_EVENT
 && 
max_ªad
 >
FD_SETSIZE
)

152 || (
evít
 =
NGX_WRITE_EVENT
 && 
max_wrôe
 >
FD_SETSIZE
))

154 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ev
->
log
, 0,

156 "suµ‹ãd by sñe˘(Ëi†%d", 
FD_SETSIZE
);

157  
NGX_ERROR
;

160 i‡(
evít
 =
NGX_READ_EVENT
) {

161 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

162 
max_ªad
++;

164 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

165 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

166 
max_wrôe
++;

169 
ev
->
a˘ive
 = 1;

171 
evít_ödex
[
√víts
] = 
ev
;

172 
ev
->
ödex
 = 
√víts
;

173 
√víts
++;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

182 
ngx_evít_t
 *
e
;

183 
ngx_c⁄√˘i⁄_t
 *
c
;

185 
c
 = 
ev
->
d©a
;

187 
ev
->
a˘ive
 = 0;

189 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

190  
NGX_OK
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

194 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

196 i‡(
evít
 =
NGX_READ_EVENT
) {

197 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

198 
max_ªad
--;

200 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

201 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

202 
max_wrôe
--;

205 i‡(
ev
->
ödex
 < --
√víts
) {

206 
e
 = 
evít_ödex
[
√víts
];

207 
evít_ödex
[
ev
->
ödex
] = 
e
;

208 
e
->
ödex
 = 
ev
->index;

211 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

219 
ngx_uöt_t
 
Êags
)

221 
ªady
, 
ƒódy
;

222 
ngx_îr_t
 
îr
;

223 
ngx_uöt_t
 
i
, 
found
;

224 
ngx_evít_t
 *
ev
;

225 
ngx_queue_t
 *
queue
;

226 
timevÆ
 
tv
, *
ç
;

227 
ngx_c⁄√˘i⁄_t
 *
c
;

229 #i‡(
NGX_DEBUG
)

230 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

231 
i
 = 0; i < 
√víts
; i++) {

232 
ev
 = 
evít_ödex
[
i
];

233 
c
 = 
ev
->
d©a
;

234 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

235 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

240 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

241 
ç
 = 
NULL
;

244 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

245 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

246 
ç
 = &
tv
;

249 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

250 "£À˘Åimî: %M", 
timî
);

252 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

253 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

255 i‡(
max_ªad
 || 
max_wrôe
) {

256 
ªady
 = 
	`£À˘
(0, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

266 
	`ngx_m¶ìp
(
timî
);

268 
ªady
 = 0;

271 
îr
 = (
ªady
 =-1Ë? 
ngx_sockë_î∫o
 : 0;

273 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

274 
	`ngx_time_upd©e
();

277 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

278 "£À˘Ñódy %d", 
ªady
);

280 i‡(
îr
) {

281 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
, "select() failed");

283 i‡(
îr
 =
WSAENOTSOCK
) {

284 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

287  
NGX_ERROR
;

290 i‡(
ªady
 == 0) {

291 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

292  
NGX_OK
;

295 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

297  
NGX_ERROR
;

300 
ƒódy
 = 0;

302 
i
 = 0; i < 
√víts
; i++) {

303 
ev
 = 
evít_ödex
[
i
];

304 
c
 = 
ev
->
d©a
;

305 
found
 = 0;

307 i‡(
ev
->
wrôe
) {

308 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

309 
found
 = 1;

310 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

311 "£À˘ wrôê%d", 
c
->
fd
);

315 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

316 
found
 = 1;

317 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

318 "£À˘Ñód %d", 
c
->
fd
);

322 i‡(
found
) {

323 
ev
->
ªady
 = 1;

325 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


326 : &
ngx_po°ed_evíts
;

328 
	`ngx_po°_evít
(
ev
, 
queue
);

330 
ƒódy
++;

334 i‡(
ªady
 !
ƒódy
) {

335 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

336 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

338 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

341  
NGX_OK
;

342 
	}
}

346 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

348 
n
;

349 
u_öt
 
i
;

350 
sockÀn_t
 
Àn
;

351 
ngx_îr_t
 
îr
;

352 
ngx_sockë_t
 
s
;

354 
i
 = 0; i < 
ma°î_ªad_fd_£t
.
fd_cou¡
; i++) {

356 
s
 = 
ma°î_ªad_fd_£t
.
fd_¨øy
[
i
];

357 
Àn
 = ();

359 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

360 
îr
 = 
ngx_sockë_î∫o
;

362 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

363 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

365 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

369 
i
 = 0; i < 
ma°î_wrôe_fd_£t
.
fd_cou¡
; i++) {

371 
s
 = 
ma°î_wrôe_fd_£t
.
fd_¨øy
[
i
];

372 
Àn
 = ();

374 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

375 
îr
 = 
ngx_sockë_î∫o
;

377 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

378 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

380 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

383 
	}
}

387 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

389 
ngx_evít_c⁄f_t
 *
ecf
;

391 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

393 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

394  
NGX_CONF_OK
;

397  
NGX_CONF_OK
;

398 
	}
}

	@src/event/ngx_event.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#DEFAULT_CONNECTIONS
 512

	)

16 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_evíç‹t_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_devpﬁl_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_£À˘_moduÀ
;

23 *
ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
ngx_öt_t
 
ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_öt_t
 
ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

31 *
ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

32 *
c⁄f
);

34 *
ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

35 *
ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

38 
ngx_uöt_t
 
	gngx_timî_ªsﬁuti⁄
;

39 
sig_©omic_t
 
	gngx_evít_timî_Æ¨m
;

41 
ngx_uöt_t
 
	gngx_evít_max_moduÀ
;

43 
ngx_uöt_t
 
	gngx_evít_Êags
;

44 
ngx_evít_a˘i⁄s_t
 
	gngx_evít_a˘i⁄s
;

47 
ngx_©omic_t
 
	gc⁄√˘i⁄_cou¡î
 = 1;

48 
ngx_©omic_t
 *
	gngx_c⁄√˘i⁄_cou¡î
 = &
c⁄√˘i⁄_cou¡î
;

51 
ngx_©omic_t
 *
	gngx_ac˚±_muãx_±r
;

52 
ngx_shmtx_t
 
	gngx_ac˚±_muãx
;

53 
ngx_uöt_t
 
	gngx_u£_ac˚±_muãx
;

54 
ngx_uöt_t
 
	gngx_ac˚±_evíts
;

55 
ngx_uöt_t
 
	gngx_ac˚±_muãx_hñd
;

56 
ngx_m£c_t
 
	gngx_ac˚±_muãx_dñay
;

57 
ngx_öt_t
 
	gngx_ac˚±_dißbÀd
;

60 #i‡(
NGX_STAT_STUB
)

62 
ngx_©omic_t
 
	gngx_°©_ac˚±ed0
;

63 
ngx_©omic_t
 *
	gngx_°©_ac˚±ed
 = &
ngx_°©_ac˚±ed0
;

64 
ngx_©omic_t
 
	gngx_°©_h™dÀd0
;

65 
ngx_©omic_t
 *
	gngx_°©_h™dÀd
 = &
ngx_°©_h™dÀd0
;

66 
ngx_©omic_t
 
	gngx_°©_ªque°s0
;

67 
ngx_©omic_t
 *
	gngx_°©_ªque°s
 = &
ngx_°©_ªque°s0
;

68 
ngx_©omic_t
 
	gngx_°©_a˘ive0
;

69 
ngx_©omic_t
 *
	gngx_°©_a˘ive
 = &
ngx_°©_a˘ive0
;

70 
ngx_©omic_t
 
	gngx_°©_ªadög0
;

71 
ngx_©omic_t
 *
	gngx_°©_ªadög
 = &
ngx_°©_ªadög0
;

72 
ngx_©omic_t
 
	gngx_°©_wrôög0
;

73 
ngx_©omic_t
 *
	gngx_°©_wrôög
 = &
ngx_°©_wrôög0
;

74 
ngx_©omic_t
 
	gngx_°©_waôög0
;

75 
ngx_©omic_t
 *
	gngx_°©_waôög
 = &
ngx_°©_waôög0
;

81 
ngx_comm™d_t
 
	gngx_evíts_comm™ds
[] = {

83 { 
ngx_°rög
("events"),

84 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

85 
ngx_evíts_block
,

88 
NULL
 },

90 
ngx_nuŒ_comm™d


94 
ngx_c‹e_moduÀ_t
 
	gngx_evíts_moduÀ_˘x
 = {

95 
ngx_°rög
("events"),

96 
NULL
,

97 
ngx_evít_öô_c⁄f


101 
ngx_moduÀ_t
 
	gngx_evíts_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_evíts_moduÀ_˘x
,

104 
ngx_evíts_comm™ds
,

105 
NGX_CORE_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


117 
ngx_°r_t
 
	gevít_c‹e_«me
 = 
ngx_°rög
("event_core");

120 
ngx_comm™d_t
 
	gngx_evít_c‹e_comm™ds
[] = {

122 { 
ngx_°rög
("worker_connections"),

123 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_evít_c⁄√˘i⁄s
,

127 
NULL
 },

129 { 
ngx_°rög
("use"),

130 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

131 
ngx_evít_u£
,

134 
NULL
 },

136 { 
ngx_°rög
("multi_accept"),

137 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

138 
ngx_c⁄f_£t_Êag_¶Ÿ
,

140 
off£tof
(
ngx_evít_c⁄f_t
, 
mu…i_ac˚±
),

141 
NULL
 },

143 { 
ngx_°rög
("accept_mutex"),

144 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

145 
ngx_c⁄f_£t_Êag_¶Ÿ
,

147 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx
),

148 
NULL
 },

150 { 
ngx_°rög
("accept_mutex_delay"),

151 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

152 
ngx_c⁄f_£t_m£c_¶Ÿ
,

154 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx_dñay
),

155 
NULL
 },

157 { 
ngx_°rög
("debug_connection"),

158 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

159 
ngx_evít_debug_c⁄√˘i⁄
,

162 
NULL
 },

164 
ngx_nuŒ_comm™d


168 
ngx_evít_moduÀ_t
 
	gngx_evít_c‹e_moduÀ_˘x
 = {

169 &
evít_c‹e_«me
,

170 
ngx_evít_c‹e_¸óã_c⁄f
,

171 
ngx_evít_c‹e_öô_c⁄f
,

173 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

177 
ngx_moduÀ_t
 
	gngx_evít_c‹e_moduÀ
 = {

178 
NGX_MODULE_V1
,

179 &
ngx_evít_c‹e_moduÀ_˘x
,

180 
ngx_evít_c‹e_comm™ds
,

181 
NGX_EVENT_MODULE
,

182 
NULL
,

183 
ngx_evít_moduÀ_öô
,

184 
ngx_evít_¥o˚ss_öô
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NGX_MODULE_V1_PADDING


194 
	$ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
)

196 
ngx_uöt_t
 
Êags
;

197 
ngx_m£c_t
 
timî
, 
dñè
;

199 i‡(
ngx_timî_ªsﬁuti⁄
) {

200 
timî
 = 
NGX_TIMER_INFINITE
;

201 
Êags
 = 0;

204 
timî
 = 
	`ngx_evít_föd_timî
();

205 
Êags
 = 
NGX_UPDATE_TIME
;

207 #i‡(
NGX_WIN32
)

211 i‡(
timî
 =
NGX_TIMER_INFINITE
 ||Åimer > 500) {

212 
timî
 = 500;

218 i‡(
ngx_u£_ac˚±_muãx
) {

219 i‡(
ngx_ac˚±_dißbÀd
 > 0) {

220 
ngx_ac˚±_dißbÀd
--;

223 i‡(
	`ngx_åylock_ac˚±_muãx
(
cy˛e
Ë=
NGX_ERROR
) {

227 i‡(
ngx_ac˚±_muãx_hñd
) {

228 
Êags
 |
NGX_POST_EVENTS
;

231 i‡(
timî
 =
NGX_TIMER_INFINITE


232 || 
timî
 > 
ngx_ac˚±_muãx_dñay
)

234 
timî
 = 
ngx_ac˚±_muãx_dñay
;

240 
dñè
 = 
ngx_cuºít_m£c
;

242 (Ë
	`ngx_¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

244 
dñè
 = 
ngx_cuºít_m£c
 - delta;

246 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

247 "timî dñè: %M", 
dñè
);

249 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_ac˚±_evíts
);

251 i‡(
ngx_ac˚±_muãx_hñd
) {

252 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

255 i‡(
dñè
) {

256 
	`ngx_evít_expúe_timîs
();

259 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_evíts
);

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
)

266 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

270 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

271 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_CLEAR_EVENT
)

272 =
NGX_ERROR
)

274  
NGX_ERROR
;

278  
NGX_OK
;

280 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

284 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

285 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
)

286 =
NGX_ERROR
)

288  
NGX_ERROR
;

291  
NGX_OK
;

294 i‡(
ªv
->
a˘ive
 && (ªv->
ªady
 || (
Êags
 & 
NGX_CLOSE_EVENT
))) {

295 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
 | 
Êags
)

296 =
NGX_ERROR
)

298  
NGX_ERROR
;

301  
NGX_OK
;

304 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

308 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

309 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

310  
NGX_ERROR
;

313  
NGX_OK
;

316 i‡(
ªv
->
⁄eshŸ
 && !ªv->
ªady
) {

317 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

318  
NGX_ERROR
;

321  
NGX_OK
;

327  
NGX_OK
;

328 
	}
}

331 
ngx_öt_t


332 
	$ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
)

334 
ngx_c⁄√˘i⁄_t
 *
c
;

336 i‡(
low©
) {

337 
c
 = 
wev
->
d©a
;

339 i‡(
	`ngx_£nd_low©
(
c
, 
low©
Ë=
NGX_ERROR
) {

340  
NGX_ERROR
;

344 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

348 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

349 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
,

350 
NGX_CLEAR_EVENT
 | (
low©
 ? 
NGX_LOWAT_EVENT
 : 0))

351 =
NGX_ERROR
)

353  
NGX_ERROR
;

357  
NGX_OK
;

359 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

363 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

364 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

365 =
NGX_ERROR
)

367  
NGX_ERROR
;

370  
NGX_OK
;

373 i‡(
wev
->
a˘ive
 && wev->
ªady
) {

374 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

375 =
NGX_ERROR
)

377  
NGX_ERROR
;

380  
NGX_OK
;

383 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

387 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

388 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

389  
NGX_ERROR
;

392  
NGX_OK
;

395 i‡(
wev
->
⁄eshŸ
 && wev->
ªady
) {

396 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

397  
NGX_ERROR
;

400  
NGX_OK
;

406  
NGX_OK
;

407 
	}
}

411 
	$ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

413 #i‡(
NGX_HAVE_REUSEPORT
)

414 
ngx_uöt_t
 
i
;

415 
ngx_li°íög_t
 *
ls
;

418 i‡(
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
Ë=
NULL
) {

419 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

421  
NGX_CONF_ERROR
;

424 i‡(
cy˛e
->
c⁄√˘i⁄_n
 < cy˛e->
li°íög
.
√…s
 + 1) {

431 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

434 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
li°íög
.
√…s
);

436  
NGX_CONF_ERROR
;

439 #i‡(
NGX_HAVE_REUSEPORT
)

441 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

442 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

444 i‡(!
ls
[
i
].
ªu£p‹t
 ||Üs[i].
w‹kî
 != 0) {

448 i‡(
	`ngx_˛⁄e_li°íög
(
cy˛e
, &
ls
[
i
]Ë!
NGX_OK
) {

449  
NGX_CONF_ERROR
;

454 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

459  
NGX_CONF_OK
;

460 
	}
}

463 
ngx_öt_t


464 
	$ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

466 ***
cf
;

467 
u_ch¨
 *
sh¨ed
;

468 
size_t
 
size
, 
˛
;

469 
ngx_shm_t
 
shm
;

470 
ngx_time_t
 *
ç
;

471 
ngx_c‹e_c⁄f_t
 *
ccf
;

472 
ngx_evít_c⁄f_t
 *
ecf
;

474 
cf
 = 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
);

475 
ecf
 = (*
cf
)[
ngx_evít_c‹e_moduÀ
.
˘x_ödex
];

477 i‡(!
ngx_ã°_c⁄fig
 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER
) {

478 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

479 "usögÅhê\"%s\"Évíàmëhod", 
ecf
->
«me
);

482 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

484 
ngx_timî_ªsﬁuti⁄
 = 
ccf
->
timî_ªsﬁuti⁄
;

486 #i‡!(
NGX_WIN32
)

488 
ngx_öt_t
 
limô
;

489 
æimô
 
æmt
;

491 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

492 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

496 i‡(
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
æmt
.
æim_cur


497 && (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET


498 || 
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
ccf
->
æimô_nofûe
))

500 
limô
 = (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET
) ?

501 (
ngx_öt_t
Ë
æmt
.
æim_cur
 : 
ccf
->
æimô_nofûe
;

503 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

506 
ecf
->
c⁄√˘i⁄s
, 
limô
);

513 i‡(
ccf
->
ma°î
 == 0) {

514  
NGX_OK
;

517 i‡(
ngx_ac˚±_muãx_±r
) {

518  
NGX_OK
;

524 
˛
 = 128;

526 
size
 = 
˛


527 + 
˛


528 + 
˛
;

530 #i‡(
NGX_STAT_STUB
)

532 
size
 +
˛


533 + 
˛


534 + 
˛


535 + 
˛


536 + 
˛


537 + 
˛


538 + 
˛
;

542 
shm
.
size
 = size;

543 
	`ngx_°r_£t
(&
shm
.
«me
, "nginx_shared_zone");

544 
shm
.
log
 = 
cy˛e
->log;

546 i‡(
	`ngx_shm_Æloc
(&
shm
Ë!
NGX_OK
) {

547  
NGX_ERROR
;

550 
sh¨ed
 = 
shm
.
addr
;

552 
ngx_ac˚±_muãx_±r
 = (
ngx_©omic_t
 *Ë
sh¨ed
;

553 
ngx_ac˚±_muãx
.
•ö
 = (
ngx_uöt_t
) -1;

555 i‡(
	`ngx_shmtx_¸óã
(&
ngx_ac˚±_muãx
, (
ngx_shmtx_sh_t
 *Ë
sh¨ed
,

556 
cy˛e
->
lock_fûe
.
d©a
)

557 !
NGX_OK
)

559  
NGX_ERROR
;

562 
ngx_c⁄√˘i⁄_cou¡î
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 1 * 
˛
);

564 (Ë
	`ngx_©omic_cmp_£t
(
ngx_c⁄√˘i⁄_cou¡î
, 0, 1);

566 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

568 
ngx_c⁄√˘i⁄_cou¡î
, *ngx_connection_counter);

570 
ngx_ãmp_numbî
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 2 * 
˛
);

572 
ç
 = 
	`ngx_timeofday
();

574 
ngx_øndom_numbî
 = (
ç
->
m£c
 << 16Ë+ 
ngx_pid
;

576 #i‡(
NGX_STAT_STUB
)

578 
ngx_°©_ac˚±ed
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 3 * 
˛
);

579 
ngx_°©_h™dÀd
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 4 * 
˛
);

580 
ngx_°©_ªque°s
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 5 * 
˛
);

581 
ngx_°©_a˘ive
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 6 * 
˛
);

582 
ngx_°©_ªadög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 7 * 
˛
);

583 
ngx_°©_wrôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 8 * 
˛
);

584 
ngx_°©_waôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 9 * 
˛
);

588  
NGX_OK
;

589 
	}
}

592 #i‡!(
NGX_WIN32
)

595 
	$ngx_timî_sig«l_h™dÀr
(
signo
)

597 
ngx_evít_timî_Æ¨m
 = 1;

600 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0, "timer signal");

602 
	}
}

607 
ngx_öt_t


608 
	$ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
)

610 
ngx_uöt_t
 
m
, 
i
;

611 
ngx_evít_t
 *
ªv
, *
wev
;

612 
ngx_li°íög_t
 *
ls
;

613 
ngx_c⁄√˘i⁄_t
 *
c
, *
√xt
, *
ﬁd
;

614 
ngx_c‹e_c⁄f_t
 *
ccf
;

615 
ngx_evít_c⁄f_t
 *
ecf
;

616 
ngx_evít_moduÀ_t
 *
moduÀ
;

618 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

619 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

621 i‡(
ccf
->
ma°î
 && ccf->
w‹kî_¥o˚s£s
 > 1 && 
ecf
->
ac˚±_muãx
) {

622 
ngx_u£_ac˚±_muãx
 = 1;

623 
ngx_ac˚±_muãx_hñd
 = 0;

624 
ngx_ac˚±_muãx_dñay
 = 
ecf
->
ac˚±_muãx_dñay
;

627 
ngx_u£_ac˚±_muãx
 = 0;

630 #i‡(
NGX_WIN32
)

637 
ngx_u£_ac˚±_muãx
 = 0;

641 
	`ngx_queue_öô
(&
ngx_po°ed_ac˚±_evíts
);

642 
	`ngx_queue_öô
(&
ngx_po°ed_evíts
);

644 i‡(
	`ngx_evít_timî_öô
(
cy˛e
->
log
Ë=
NGX_ERROR
) {

645  
NGX_ERROR
;

648 
m
 = 0; 
cy˛e
->
moduÀs
[m]; m++) {

649 i‡(
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

653 i‡(
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
 !
ecf
->
u£
) {

657 
moduÀ
 = 
cy˛e
->
moduÀs
[
m
]->
˘x
;

659 i‡(
moduÀ
->
a˘i⁄s
.
	`öô
(
cy˛e
, 
ngx_timî_ªsﬁuti⁄
Ë!
NGX_OK
) {

661 
	`exô
(2);

667 #i‡!(
NGX_WIN32
)

669 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

670 
siga˘i⁄
 
ß
;

671 
ôimîvÆ
 
ôv
;

673 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

674 
ß
.
ß_h™dÀr
 = 
ngx_timî_sig«l_h™dÀr
;

675 
	`sigem±y£t
(&
ß
.
ß_mask
);

677 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) == -1) {

678 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

680  
NGX_ERROR
;

683 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

684 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000) * 1000;

685 
ôv
.
ô_vÆue
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

686 
ôv
.
ô_vÆue
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000 ) * 1000;

688 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

689 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

694 i‡(
ngx_evít_Êags
 & 
NGX_USE_FD_EVENT
) {

695 
æimô
 
æmt
;

697 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

698 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

700  
NGX_ERROR
;

703 
cy˛e
->
fûes_n
 = (
ngx_uöt_t
Ë
æmt
.
æim_cur
;

705 
cy˛e
->
fûes
 = 
	`ngx_ˇŒoc
((
ngx_c⁄√˘i⁄_t
 *Ë* cy˛e->
fûes_n
,

706 
cy˛e
->
log
);

707 i‡(
cy˛e
->
fûes
 =
NULL
) {

708  
NGX_ERROR
;

714 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

715 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

718 
ngx_timî_ªsﬁuti⁄
 = 0;

723 
cy˛e
->
c⁄√˘i⁄s
 =

724 
	`ngx_Æloc
((
ngx_c⁄√˘i⁄_t
Ë* 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
log
);

725 i‡(
cy˛e
->
c⁄√˘i⁄s
 =
NULL
) {

726  
NGX_ERROR
;

729 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

731 
cy˛e
->
ªad_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

732 
cy˛e
->
log
);

733 i‡(
cy˛e
->
ªad_evíts
 =
NULL
) {

734  
NGX_ERROR
;

737 
ªv
 = 
cy˛e
->
ªad_evíts
;

738 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

739 
ªv
[
i
].
˛o£d
 = 1;

740 
ªv
[
i
].
ö°™˚
 = 1;

743 
cy˛e
->
wrôe_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

744 
cy˛e
->
log
);

745 i‡(
cy˛e
->
wrôe_evíts
 =
NULL
) {

746  
NGX_ERROR
;

749 
wev
 = 
cy˛e
->
wrôe_evíts
;

750 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

751 
wev
[
i
].
˛o£d
 = 1;

754 
i
 = 
cy˛e
->
c⁄√˘i⁄_n
;

755 
√xt
 = 
NULL
;

758 
i
--;

760 
c
[
i
].
d©a
 = 
√xt
;

761 
c
[
i
].
ªad
 = &
cy˛e
->
ªad_evíts
[i];

762 
c
[
i
].
wrôe
 = &
cy˛e
->
wrôe_evíts
[i];

763 
c
[
i
].
fd
 = (
ngx_sockë_t
) -1;

765 
√xt
 = &
c
[
i
];

766 } 
i
);

768 
cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
√xt
;

769 
cy˛e
->
‰ì_c⁄√˘i⁄_n
 = cy˛e->
c⁄√˘i⁄_n
;

773 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

774 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

776 #i‡(
NGX_HAVE_REUSEPORT
)

777 i‡(
ls
[
i
].
ªu£p‹t
 &&Üs[i].
w‹kî
 !
ngx_w‹kî
) {

782 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
ls
[
i
].
fd
, 
cy˛e
->
log
);

784 i‡(
c
 =
NULL
) {

785  
NGX_ERROR
;

788 
c
->
ty≥
 = 
ls
[
i
].type;

789 
c
->
log
 = &
ls
[
i
].log;

791 
c
->
li°íög
 = &
ls
[
i
];

792 
ls
[
i
].
c⁄√˘i⁄
 = 
c
;

794 
ªv
 = 
c
->
ªad
;

796 
ªv
->
log
 = 
c
->log;

797 
ªv
->
ac˚±
 = 1;

799 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

800 
ªv
->
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

803 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

804 i‡(
ls
[
i
].
¥evious
) {

811 
ﬁd
 = 
ls
[
i
].
¥evious
->
c⁄√˘i⁄
;

813 i‡(
	`ngx_dñ_evít
(
ﬁd
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
)

814 =
NGX_ERROR
)

816  
NGX_ERROR
;

819 
ﬁd
->
fd
 = (
ngx_sockë_t
) -1;

823 #i‡(
NGX_WIN32
)

825 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

826 
ngx_io˝_c⁄f_t
 *
io˝cf
;

828 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±ex
;

830 i‡(
ngx_u£_ac˚±_muãx
) {

834 i‡(
	`ngx_add_evít
(
ªv
, 0, 
NGX_IOCP_ACCEPT
Ë=
NGX_ERROR
) {

835  
NGX_ERROR
;

838 
ls
[
i
].
log
.
h™dÀr
 = 
ngx_ac˚±ex_log_îr‹
;

840 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

841 i‡(
	`ngx_evít_po°_ac˚±ex
(&
ls
[
i
], 
io˝cf
->
po°_ac˚±ex
)

842 =
NGX_ERROR
)

844  
NGX_ERROR
;

848 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

850 i‡(
ngx_u£_ac˚±_muãx
) {

854 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

855  
NGX_ERROR
;

861 
ªv
->
h™dÀr
 = (
c
->
ty≥
 =
SOCK_STREAM
Ë? 
ngx_evít_ac˚±


862 : 
ngx_evít_ªcvmsg
;

864 #i‡(
NGX_HAVE_REUSEPORT
)

866 i‡(
ls
[
i
].
ªu£p‹t
) {

867 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

868  
NGX_ERROR
;

876 i‡(
ngx_u£_ac˚±_muãx
) {

880 #i‡(
NGX_HAVE_EPOLLEXCLUSIVE
)

882 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
)

883 && 
ccf
->
w‹kî_¥o˚s£s
 > 1)

885 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_EXCLUSIVE_EVENT
)

886 =
NGX_ERROR
)

888  
NGX_ERROR
;

896 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

897  
NGX_ERROR
;

904  
NGX_OK
;

905 
	}
}

908 
ngx_öt_t


909 
	$ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
)

911 
¢dlow©
;

913 #i‡(
NGX_HAVE_LOWAT_EVENT
)

915 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

916 
c
->
wrôe
->
avaûabÀ
 = 
low©
;

917  
NGX_OK
;

922 i‡(
low©
 =0 || 
c
->
¢dlow©
) {

923  
NGX_OK
;

926 
¢dlow©
 = (Ë
low©
;

928 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_SNDLOWAT
,

929 (c⁄° *Ë&
¢dlow©
, ())

932 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

934  
NGX_ERROR
;

937 
c
->
¢dlow©
 = 1;

939  
NGX_OK
;

940 
	}
}

944 
	$ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

946 *
rv
;

947 ***
˘x
;

948 
ngx_uöt_t
 
i
;

949 
ngx_c⁄f_t
 
pcf
;

950 
ngx_evít_moduÀ_t
 *
m
;

952 i‡(*(**Ë
c⁄f
) {

958 
ngx_evít_max_moduÀ
 = 
	`ngx_cou¡_moduÀs
(
cf
->
cy˛e
, 
NGX_EVENT_MODULE
);

960 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*));

961 i‡(
˘x
 =
NULL
) {

962  
NGX_CONF_ERROR
;

965 *
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 
ngx_evít_max_moduÀ
 * (*));

966 i‡(*
˘x
 =
NULL
) {

967  
NGX_CONF_ERROR
;

970 *(**Ë
c⁄f
 = 
˘x
;

972 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

973 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

977 
m
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x
;

979 i‡(
m
->
¸óã_c⁄f
) {

980 (*
˘x
)[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] =

981 
m
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

982 i‡((*
˘x
)[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

983  
NGX_CONF_ERROR
;

988 
pcf
 = *
cf
;

989 
cf
->
˘x
 = ctx;

990 
cf
->
moduÀ_ty≥
 = 
NGX_EVENT_MODULE
;

991 
cf
->
cmd_ty≥
 = 
NGX_EVENT_CONF
;

993 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

995 *
cf
 = 
pcf
;

997 i‡(
rv
 !
NGX_CONF_OK
) {

998  
rv
;

1001 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

1002 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1006 
m
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x
;

1008 i‡(
m
->
öô_c⁄f
) {

1009 
rv
 = 
m
->
	`öô_c⁄f
(
cf
->
cy˛e
,

1010 (*
˘x
)[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
]);

1011 i‡(
rv
 !
NGX_CONF_OK
) {

1012  
rv
;

1017  
NGX_CONF_OK
;

1018 
	}
}

1022 
	$ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1024 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1026 
ngx_°r_t
 *
vÆue
;

1028 i‡(
ecf
->
c⁄√˘i⁄s
 !
NGX_CONF_UNSET_UINT
) {

1032 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1033 
ecf
->
c⁄√˘i⁄s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1034 i‡(
ecf
->
c⁄√˘i⁄s
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

1035 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1036 "övÆidÇumbî \"%V\"", &
vÆue
[1]);

1038  
NGX_CONF_ERROR
;

1041 
cf
->
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1043  
NGX_CONF_OK
;

1044 
	}
}

1048 
	$ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1050 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1052 
ngx_öt_t
 
m
;

1053 
ngx_°r_t
 *
vÆue
;

1054 
ngx_evít_c⁄f_t
 *
ﬁd_ecf
;

1055 
ngx_evít_moduÀ_t
 *
moduÀ
;

1057 i‡(
ecf
->
u£
 !
NGX_CONF_UNSET_UINT
) {

1061 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1063 i‡(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
) {

1064 
ﬁd_ecf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
,

1065 
ngx_evít_c‹e_moduÀ
);

1067 
ﬁd_ecf
 = 
NULL
;

1071 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

1072 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1076 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

1077 i‡(
moduÀ
->
«me
->
Àn
 =
vÆue
[1].len) {

1078 i‡(
	`ngx_°rcmp
(
moduÀ
->
«me
->
d©a
, 
vÆue
[1].data) == 0) {

1079 
ecf
->
u£
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

1080 
ecf
->
«me
 = 
moduÀ
->«me->
d©a
;

1082 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE


1083 && 
ﬁd_ecf


1084 && 
ﬁd_ecf
->
u£
 !
ecf
->use)

1086 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1093 &
vÆue
[1], 
ﬁd_ecf
->
«me
);

1095  
NGX_CONF_ERROR
;

1098  
NGX_CONF_OK
;

1103 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1104 "övÆidÉvíàty≥ \"%V\"", &
vÆue
[1]);

1106  
NGX_CONF_ERROR
;

1107 
	}
}

1111 
	$ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1113 #i‡(
NGX_DEBUG
)

1114 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1116 
ngx_öt_t
 
rc
;

1117 
ngx_°r_t
 *
vÆue
;

1118 
ngx_uæ_t
 
u
;

1119 
ngx_cidr_t
 
c
, *
cidr
;

1120 
ngx_uöt_t
 
i
;

1121 
sockaddr_ö
 *
sö
;

1122 #i‡(
NGX_HAVE_INET6
)

1123 
sockaddr_ö6
 *
sö6
;

1126 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1128 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1130 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

1131 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1132 i‡(
cidr
 =
NULL
) {

1133  
NGX_CONF_ERROR
;

1136 
cidr
->
Ámûy
 = 
AF_UNIX
;

1137  
NGX_CONF_OK
;

1142 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

1144 i‡(
rc
 !
NGX_ERROR
) {

1145 i‡(
rc
 =
NGX_DONE
) {

1146 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1148 &
vÆue
[1]);

1151 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1152 i‡(
cidr
 =
NULL
) {

1153  
NGX_CONF_ERROR
;

1156 *
cidr
 = 
c
;

1158  
NGX_CONF_OK
;

1161 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1162 
u
.
ho°
 = 
vÆue
[1];

1164 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1165 i‡(
u
.
îr
) {

1166 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1168 
u
.
îr
, &u.
ho°
);

1171  
NGX_CONF_ERROR
;

1174 
cidr
 = 
	`ngx_¨øy_push_n
(&
ecf
->
debug_c⁄√˘i⁄
, 
u
.
«ddrs
);

1175 i‡(
cidr
 =
NULL
) {

1176  
NGX_CONF_ERROR
;

1179 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

1181 
i
 = 0; i < 
u
.
«ddrs
; i++) {

1182 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

1184 
cidr
[
i
].
Ámûy
) {

1186 #i‡(
NGX_HAVE_INET6
)

1187 
AF_INET6
:

1188 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1189 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

1190 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

1195 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1196 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

1197 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

1204 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1210  
NGX_CONF_OK
;

1211 
	}
}

1215 
	$ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1217 
ngx_evít_c⁄f_t
 *
ecf
;

1219 
ecf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evít_c⁄f_t
));

1220 i‡(
ecf
 =
NULL
) {

1221  
NULL
;

1224 
ecf
->
c⁄√˘i⁄s
 = 
NGX_CONF_UNSET_UINT
;

1225 
ecf
->
u£
 = 
NGX_CONF_UNSET_UINT
;

1226 
ecf
->
mu…i_ac˚±
 = 
NGX_CONF_UNSET
;

1227 
ecf
->
ac˚±_muãx
 = 
NGX_CONF_UNSET
;

1228 
ecf
->
ac˚±_muãx_dñay
 = 
NGX_CONF_UNSET_MSEC
;

1229 
ecf
->
«me
 = (*Ë
NGX_CONF_UNSET
;

1231 #i‡(
NGX_DEBUG
)

1233 i‡(
	`ngx_¨øy_öô
(&
ecf
->
debug_c⁄√˘i⁄
, 
cy˛e
->
poﬁ
, 4,

1234 (
ngx_cidr_t
)Ë=
NGX_ERROR
)

1236  
NULL
;

1241  
ecf
;

1242 
	}
}

1246 
	$ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1248 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1250 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1251 
fd
;

1253 
ngx_öt_t
 
i
;

1254 
ngx_moduÀ_t
 *
moduÀ
;

1255 
ngx_evít_moduÀ_t
 *
evít_moduÀ
;

1257 
moduÀ
 = 
NULL
;

1259 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1261 
fd
 = 
	`ïﬁl_¸óã
(100);

1263 i‡(
fd
 != -1) {

1264 (Ë
	`˛o£
(
fd
);

1265 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1267 } i‡(
ngx_î∫o
 !
NGX_ENOSYS
) {

1268 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1273 #i‡(
NGX_HAVE_DEVPOLL
Ë&& !(
NGX_TEST_BUILD_DEVPOLL
)

1275 
moduÀ
 = &
ngx_devpﬁl_moduÀ
;

1279 #i‡(
NGX_HAVE_KQUEUE
)

1281 
moduÀ
 = &
ngx_kqueue_moduÀ
;

1285 #i‡(
NGX_HAVE_SELECT
)

1287 i‡(
moduÀ
 =
NULL
) {

1288 
moduÀ
 = &
ngx_£À˘_moduÀ
;

1293 i‡(
moduÀ
 =
NULL
) {

1294 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

1296 i‡(
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1300 
evít_moduÀ
 = 
cy˛e
->
moduÀs
[
i
]->
˘x
;

1302 i‡(
	`ngx_°rcmp
(
evít_moduÀ
->
«me
->
d©a
, 
evít_c‹e_«me
.data) == 0)

1307 
moduÀ
 = 
cy˛e
->
moduÀs
[
i
];

1312 i‡(
moduÀ
 =
NULL
) {

1313 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0, "noÉvents module found");

1314  
NGX_CONF_ERROR
;

1317 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
c⁄√˘i⁄s
, 
DEFAULT_CONNECTIONS
);

1318 
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1320 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
u£
, 
moduÀ
->
˘x_ödex
);

1322 
evít_moduÀ
 = 
moduÀ
->
˘x
;

1323 
	`ngx_c⁄f_öô_±r_vÆue
(
ecf
->
«me
, 
evít_moduÀ
->«me->
d©a
);

1325 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
mu…i_ac˚±
, 0);

1326 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
ac˚±_muãx
, 0);

1327 
	`ngx_c⁄f_öô_m£c_vÆue
(
ecf
->
ac˚±_muãx_dñay
, 500);

1329  
NGX_CONF_OK
;

1330 
	}
}

	@src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

30 
	sngx_evít_s
 {

31 *
	md©a
;

33 
	mwrôe
:1;

35 
	mac˚±
:1;

38 
	mö°™˚
:1;

44 
	ma˘ive
:1;

46 
	mdißbÀd
:1;

49 
	mªady
:1;

51 
	m⁄eshŸ
:1;

54 
	mcom∂ëe
:1;

56 
	meof
:1;

57 
	mîr‹
:1;

59 
	mtimedout
:1;

60 
	mtimî_£t
:1;

62 
	mdñayed
:1;

64 
	mde„ºed_ac˚±
:1;

67 
	m≥ndög_eof
:1;

69 
	mpo°ed
:1;

71 
	m˛o£d
:1;

74 
	mch™√l
:1;

75 
	mªsﬁvî
:1;

77 
	mˇn˚œbÀ
:1;

79 #i‡(
NGX_HAVE_KQUEUE
)

80 
	mkq_vnode
:1;

83 
	mkq_î∫o
;

104 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

105 
	mavaûabÀ
;

107 
	mavaûabÀ
:1;

110 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

113 #i‡(
NGX_HAVE_IOCP
)

114 
ngx_evít_ovÕ_t
 
	movÕ
;

117 
ngx_uöt_t
 
	mödex
;

119 
ngx_log_t
 *
	mlog
;

121 
ngx_rbåì_node_t
 
	mtimî
;

124 
ngx_queue_t
 
	mqueue
;

136 *
	mthr_˘x
;

138 #i‡(
NGX_EVENT_T_PADDING
)

142 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

148 #i‡(
NGX_HAVE_FILE_AIO
)

150 
	sngx_evít_aio_s
 {

151 *
	md©a
;

152 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

153 
ngx_fûe_t
 *
	mfûe
;

155 
ngx_fd_t
 
	mfd
;

157 #i‡(
NGX_HAVE_AIO_SENDFILE
 || 
NGX_COMPAT
)

158 
ssize_t
 (*
¥ñﬂd_h™dÀr
)(
ngx_buf_t
 *
	mfûe
);

161 #i‡(
NGX_HAVE_EVENTFD
)

162 
öt64_t
 
	mªs
;

165 #i‡!(
NGX_HAVE_EVENTFD
Ë|| (
NGX_TEST_BUILD_EPOLL
)

166 
ngx_îr_t
 
	mîr
;

167 
size_t
 
	mnbyãs
;

170 
ngx_aiocb_t
 
	maiocb
;

171 
ngx_evít_t
 
	mevít
;

178 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

179 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

181 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

182 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

184 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

185 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

187 
ngx_öt_t
 (*
nŸify
)(
ngx_evít_h™dÀr_±
 
	mh™dÀr
);

189 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

190 
ngx_uöt_t
 
	mÊags
);

192 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

193 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

194 } 
	tngx_evít_a˘i⁄s_t
;

197 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

198 #i‡(
NGX_HAVE_EPOLLRDHUP
)

199 
ngx_uöt_t
 
ngx_u£_ïﬁl_rdhup
;

207 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

213 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

219 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

225 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

231 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

236 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

241 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

246 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

251 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

256 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

262 
	#NGX_USE_FD_EVENT
 0x00000400

	)

268 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

274 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

279 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

292 
	#NGX_CLOSE_EVENT
 1

	)

298 
	#NGX_DISABLE_EVENT
 2

	)

303 
	#NGX_FLUSH_EVENT
 4

	)

307 
	#NGX_LOWAT_EVENT
 0

	)

308 
	#NGX_VNODE_EVENT
 0

	)

311 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_HAVE_EPOLLRDHUP
)

312 
	#EPOLLRDHUP
 0

	)

316 #i‡(
NGX_HAVE_KQUEUE
)

318 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

319 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

321 #unde‡
NGX_VNODE_EVENT


322 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

331 #unde‡
NGX_CLOSE_EVENT


332 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

334 #unde‡
NGX_LOWAT_EVENT


335 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

337 #unde‡
NGX_FLUSH_EVENT


338 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

340 
	#NGX_LEVEL_EVENT
 0

	)

341 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

342 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

344 #unde‡
NGX_DISABLE_EVENT


345 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

348 #ñi‡(
NGX_HAVE_DEVPOLL
 && !(
NGX_TEST_BUILD_DEVPOLL
)) \

349 || (
	gNGX_HAVE_EVENTPORT
 && !(
	gNGX_TEST_BUILD_EVENTPORT
))

351 
	#NGX_READ_EVENT
 
POLLIN


	)

352 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

354 
	#NGX_LEVEL_EVENT
 0

	)

355 
	#NGX_ONESHOT_EVENT
 1

	)

358 #ñi‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

360 
	#NGX_READ_EVENT
 (
EPOLLIN
|
EPOLLRDHUP
)

	)

361 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

363 
	#NGX_LEVEL_EVENT
 0

	)

364 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

365 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

367 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

370 #i‡(
NGX_HAVE_EPOLLEXCLUSIVE
)

371 
	#NGX_EXCLUSIVE_EVENT
 
EPOLLEXCLUSIVE


	)

374 #ñi‡(
NGX_HAVE_POLL
)

376 
	#NGX_READ_EVENT
 
POLLIN


	)

377 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

379 
	#NGX_LEVEL_EVENT
 0

	)

380 
	#NGX_ONESHOT_EVENT
 1

	)

385 
	#NGX_READ_EVENT
 0

	)

386 
	#NGX_WRITE_EVENT
 1

	)

388 
	#NGX_LEVEL_EVENT
 0

	)

389 
	#NGX_ONESHOT_EVENT
 1

	)

394 #i‡(
NGX_HAVE_IOCP
)

395 
	#NGX_IOCP_ACCEPT
 0

	)

396 
	#NGX_IOCP_IO
 1

	)

397 
	#NGX_IOCP_CONNECT
 2

	)

401 #i‡(
NGX_TEST_BUILD_EPOLL
)

402 
	#NGX_EXCLUSIVE_EVENT
 0

	)

406 #i‚de‡
NGX_CLEAR_EVENT


407 
	#NGX_CLEAR_EVENT
 0

	)

411 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

412 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

414 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

415 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

416 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

417 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

419 
	#ngx_nŸify
 
ngx_evít_a˘i⁄s
.
nŸify


	)

421 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

422 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

425 
ngx_os_io_t
 
ngx_io
;

427 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

428 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

429 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

430 
	#ngx_£nd
 
ngx_io
.
£nd


	)

431 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

432 
	#ngx_udp_£nd
 
ngx_io
.
udp_£nd


	)

433 
	#ngx_udp_£nd_chaö
 
ngx_io
.
udp_£nd_chaö


	)

436 
	#NGX_EVENT_MODULE
 0x544E5645

	)

437 
	#NGX_EVENT_CONF
 0x02000000

	)

441 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

442 
ngx_uöt_t
 
	mu£
;

444 
ngx_Êag_t
 
	mmu…i_ac˚±
;

445 
ngx_Êag_t
 
	mac˚±_muãx
;

447 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

449 
u_ch¨
 *
	m«me
;

451 #i‡(
NGX_DEBUG
)

452 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

454 } 
	tngx_evít_c⁄f_t
;

458 
ngx_°r_t
 *
	m«me
;

460 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

461 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

463 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

464 } 
	tngx_evít_moduÀ_t
;

467 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

469 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

470 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

471 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

472 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

473 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

474 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

475 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

478 #i‡(
NGX_STAT_STUB
)

480 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

481 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

482 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

483 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

484 
ngx_©omic_t
 *
ngx_°©_ªadög
;

485 
ngx_©omic_t
 *
ngx_°©_wrôög
;

486 
ngx_©omic_t
 *
ngx_°©_waôög
;

491 
	#NGX_UPDATE_TIME
 1

	)

492 
	#NGX_POST_EVENTS
 2

	)

495 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

496 
ngx_uöt_t
 
ngx_evít_Êags
;

497 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

498 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

501 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

502 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

506 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

507 #i‡!(
NGX_WIN32
)

508 
ngx_evít_ªcvmsg
(
ngx_evít_t
 *
ev
);

509 
ngx_udp_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

510 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

512 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

513 
ngx_öt_t
 
ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

514 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

515 #i‡(
NGX_DEBUG
)

516 
ngx_debug_ac˚±ed_c⁄√˘i⁄
(
ngx_evít_c⁄f_t
 *
ecf
, 
ngx_c⁄√˘i⁄_t
 *
c
);

520 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

521 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

522 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

525 #i‡(
NGX_WIN32
)

526 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

527 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

528 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

532 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

536 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

539 
	~<ngx_evít_timî.h
>

540 
	~<ngx_evít_po°ed.h
>

542 #i‡(
NGX_WIN32
)

543 
	~<ngx_io˝_moduÀ.h
>

	@src/event/ngx_event_accept.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
Æl
);

14 
ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

18 
	$ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
)

20 
sockÀn_t
 
sockÀn
;

21 
ngx_îr_t
 
îr
;

22 
ngx_log_t
 *
log
;

23 
ngx_uöt_t
 
Àvñ
;

24 
ngx_sockë_t
 
s
;

25 
ngx_evít_t
 *
ªv
, *
wev
;

26 
ngx_sockaddr_t
 
ß
;

27 
ngx_li°íög_t
 *
ls
;

28 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

29 
ngx_evít_c⁄f_t
 *
ecf
;

30 #i‡(
NGX_HAVE_ACCEPT4
)

31 
ngx_uöt_t
 
u£_ac˚±4
 = 1;

34 i‡(
ev
->
timedout
) {

35 i‡(
	`ngx_íabÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
Ë!
NGX_OK
) {

39 
ev
->
timedout
 = 0;

42 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

44 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

45 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

48 
lc
 = 
ev
->
d©a
;

49 
ls
 = 
lc
->
li°íög
;

50 
ev
->
ªady
 = 0;

52 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

53 "ac˚± o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

56 
sockÀn
 = (
ngx_sockaddr_t
);

58 #i‡(
NGX_HAVE_ACCEPT4
)

59 i‡(
u£_ac˚±4
) {

60 
s
 = 
	`ac˚±4
(
lc
->
fd
, &
ß
.
sockaddr
, &
sockÀn
, 
SOCK_NONBLOCK
);

62 
s
 = 
	`ac˚±
(
lc
->
fd
, &
ß
.
sockaddr
, &
sockÀn
);

65 
s
 = 
	`ac˚±
(
lc
->
fd
, &
ß
.
sockaddr
, &
sockÀn
);

68 i‡(
s
 =(
ngx_sockë_t
) -1) {

69 
îr
 = 
ngx_sockë_î∫o
;

71 i‡(
îr
 =
NGX_EAGAIN
) {

72 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

77 
Àvñ
 = 
NGX_LOG_ALERT
;

79 i‡(
îr
 =
NGX_ECONNABORTED
) {

80 
Àvñ
 = 
NGX_LOG_ERR
;

82 } i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

83 
Àvñ
 = 
NGX_LOG_CRIT
;

86 #i‡(
NGX_HAVE_ACCEPT4
)

87 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
,

88 
u£_ac˚±4
 ? "accept4() failed" : "accept() failed");

90 i‡(
u£_ac˚±4
 && 
îr
 =
NGX_ENOSYS
) {

91 
u£_ac˚±4
 = 0;

92 
ngx_öhîôed_n⁄blockög
 = 0;

96 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
, "accept() failed");

99 i‡(
îr
 =
NGX_ECONNABORTED
) {

100 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

101 
ev
->
avaûabÀ
--;

104 i‡(
ev
->
avaûabÀ
) {

109 i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

110 i‡(
	`ngx_dißbÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, 1)

111 !
NGX_OK
)

116 i‡(
ngx_u£_ac˚±_muãx
) {

117 i‡(
ngx_ac˚±_muãx_hñd
) {

118 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

119 
ngx_ac˚±_muãx_hñd
 = 0;

122 
ngx_ac˚±_dißbÀd
 = 1;

125 
	`ngx_add_timî
(
ev
, 
ecf
->
ac˚±_muãx_dñay
);

132 #i‡(
NGX_STAT_STUB
)

133 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

136 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

137 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

139 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
ev
->
log
);

141 i‡(
c
 =
NULL
) {

142 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

144 
ngx_˛o£_sockë_n
 " failed");

150 
c
->
ty≥
 = 
SOCK_STREAM
;

152 #i‡(
NGX_STAT_STUB
)

153 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

156 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

157 i‡(
c
->
poﬁ
 =
NULL
) {

158 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

162 i‡(
sockÀn
 > (
sockÀn_t
Ë(
ngx_sockaddr_t
)) {

163 
sockÀn
 = (
ngx_sockaddr_t
);

166 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

167 i‡(
c
->
sockaddr
 =
NULL
) {

168 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

172 
	`ngx_mem˝y
(
c
->
sockaddr
, &
ß
, 
sockÀn
);

174 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

175 i‡(
log
 =
NULL
) {

176 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

182 i‡(
ngx_öhîôed_n⁄blockög
) {

183 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

184 i‡(
	`ngx_blockög
(
s
) == -1) {

185 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

186 
ngx_blockög_n
 " failed");

187 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

193 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

194 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

195 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

196 
ngx_n⁄blockög_n
 " failed");

197 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

203 *
log
 = 
ls
->log;

205 
c
->
ªcv
 = 
ngx_ªcv
;

206 
c
->
£nd
 = 
ngx_£nd
;

207 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

208 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

210 
c
->
log
 =Üog;

211 
c
->
poﬁ
->
log
 =Üog;

213 
c
->
sockÀn
 = socklen;

214 
c
->
li°íög
 = 
ls
;

215 
c
->
loˇl_sockaddr
 = 
ls
->
sockaddr
;

216 
c
->
loˇl_sockÀn
 = 
ls
->
sockÀn
;

218 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

219 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

220 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

221 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

222 #i‡(
NGX_SOLARIS
)

224 
c
->
£ndfûe
 = 0;

229 
ªv
 = 
c
->
ªad
;

230 
wev
 = 
c
->
wrôe
;

232 
wev
->
ªady
 = 1;

234 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

235 
ªv
->
ªady
 = 1;

238 i‡(
ev
->
de„ºed_ac˚±
) {

239 
ªv
->
ªady
 = 1;

240 #i‡(
NGX_HAVE_KQUEUE
 || 
NGX_HAVE_EPOLLRDHUP
)

241 
ªv
->
avaûabÀ
 = 1;

245 
ªv
->
log
 =Üog;

246 
wev
->
log
 =Üog;

257 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

259 #i‡(
NGX_STAT_STUB
)

260 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

263 i‡(
ls
->
addr_¡›
) {

264 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

265 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

266 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

270 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->
sockÀn
,

271 
c
->
addr_ãxt
.
d©a
,

272 
ls
->
addr_ãxt_max_Àn
, 0);

273 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

274 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

279 #i‡(
NGX_DEBUG
)

281 
ngx_°r_t
 
addr
;

282 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

284 
	`ngx_debug_ac˚±ed_c⁄√˘i⁄
(
ecf
, 
c
);

286 i‡(
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_EVENT
) {

287 
addr
.
d©a
 = 
ãxt
;

288 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, 
ãxt
,

289 
NGX_SOCKADDR_STRLEN
, 1);

291 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

292 "*%uAác˚±: %V fd:%d", 
c
->
numbî
, &
addr
, 
s
);

298 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

299 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

300 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

305 
log
->
d©a
 = 
NULL
;

306 
log
->
h™dÀr
 = 
NULL
;

308 
ls
->
	`h™dÀr
(
c
);

310 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

311 
ev
->
avaûabÀ
--;

314 } 
ev
->
avaûabÀ
);

315 
	}
}

318 
ngx_öt_t


319 
	$ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
)

321 i‡(
	`ngx_shmtx_åylock
(&
ngx_ac˚±_muãx
)) {

323 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

326 i‡(
ngx_ac˚±_muãx_hñd
 && 
ngx_ac˚±_evíts
 == 0) {

327  
NGX_OK
;

330 i‡(
	`ngx_íabÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

331 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

332  
NGX_ERROR
;

335 
ngx_ac˚±_evíts
 = 0;

336 
ngx_ac˚±_muãx_hñd
 = 1;

338  
NGX_OK
;

341 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

342 "ac˚± muãxÜock faûed: %ui", 
ngx_ac˚±_muãx_hñd
);

344 i‡(
ngx_ac˚±_muãx_hñd
) {

345 i‡(
	`ngx_dißbÀ_ac˚±_evíts
(
cy˛e
, 0Ë=
NGX_ERROR
) {

346  
NGX_ERROR
;

349 
ngx_ac˚±_muãx_hñd
 = 0;

352  
NGX_OK
;

353 
	}
}

356 
ngx_öt_t


357 
	$ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

359 
ngx_uöt_t
 
i
;

360 
ngx_li°íög_t
 *
ls
;

361 
ngx_c⁄√˘i⁄_t
 *
c
;

363 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

364 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

366 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

368 i‡(
c
 =
NULL
 || c->
ªad
->
a˘ive
) {

372 i‡(
	`ngx_add_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

373  
NGX_ERROR
;

377  
NGX_OK
;

378 
	}
}

381 
ngx_öt_t


382 
	$ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
Æl
)

384 
ngx_uöt_t
 
i
;

385 
ngx_li°íög_t
 *
ls
;

386 
ngx_c⁄√˘i⁄_t
 *
c
;

388 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

389 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

391 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

393 i‡(
c
 =
NULL
 || !c->
ªad
->
a˘ive
) {

397 #i‡(
NGX_HAVE_REUSEPORT
)

404 i‡(
ls
[
i
].
ªu£p‹t
 && !
Æl
) {

410 i‡(
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_DISABLE_EVENT
)

411 =
NGX_ERROR
)

413  
NGX_ERROR
;

417  
NGX_OK
;

418 
	}
}

422 
	$ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

424 
ngx_sockë_t
 
fd
;

426 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

428 
fd
 = 
c
->fd;

429 
c
->
fd
 = (
ngx_sockë_t
) -1;

431 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

432 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_sockë_î∫o
,

433 
ngx_˛o£_sockë_n
 " failed");

436 i‡(
c
->
poﬁ
) {

437 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

440 #i‡(
NGX_STAT_STUB
)

441 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

443 
	}
}

446 
u_ch¨
 *

447 
	$ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

449  
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whileácceptingÇew connection on %V",

450 
log
->
d©a
);

451 
	}
}

454 #i‡(
NGX_DEBUG
)

457 
	$ngx_debug_ac˚±ed_c⁄√˘i⁄
(
ngx_evít_c⁄f_t
 *
ecf
, 
ngx_c⁄√˘i⁄_t
 *
c
)

459 
sockaddr_ö
 *
sö
;

460 
ngx_cidr_t
 *
cidr
;

461 
ngx_uöt_t
 
i
;

462 #i‡(
NGX_HAVE_INET6
)

463 
sockaddr_ö6
 *
sö6
;

464 
ngx_uöt_t
 
n
;

467 
cidr
 = 
ecf
->
debug_c⁄√˘i⁄
.
ñts
;

468 
i
 = 0; i < 
ecf
->
debug_c⁄√˘i⁄
.
√…s
; i++) {

469 i‡(
cidr
[
i
].
Ámûy
 !(
ngx_uöt_t
Ë
c
->
sockaddr
->
ß_Ámûy
) {

470 
√xt
;

473 
cidr
[
i
].
Ámûy
) {

475 #i‡(
NGX_HAVE_INET6
)

476 
AF_INET6
:

477 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
sockaddr
;

478 
n
 = 0;Ç < 16;Ç++) {

479 i‡((
sö6
->
sö6_addr
.
s6_addr
[
n
]

480 & 
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
[
n
])

481 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

483 
√xt
;

489 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

490 
AF_UNIX
:

495 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

496 i‡((
sö
->
sö_addr
.
s_addr
 & 
cidr
[
i
].
u
.
ö
.
mask
)

497 !
cidr
[
i
].
u
.
ö
.
addr
)

499 
√xt
;

504 
c
->
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_CONNECTION
|
NGX_LOG_DEBUG_ALL
;

507 
√xt
:

510 
	}
}

	@src/event/ngx_event_connect.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

15 
ngx_öt_t
 
ngx_evít_c⁄√˘_£t_å™•¨ít
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

16 
ngx_sockë_t
 
s
);

20 
ngx_öt_t


21 
	$ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

23 
rc
, 
ty≥
;

24 #i‡(
NGX_HAVE_IP_BIND_ADDRESS_NO_PORT
 || 
NGX_LINUX
)

25 
ö_p‹t_t
 
p‹t
;

27 
ngx_öt_t
 
evít
;

28 
ngx_îr_t
 
îr
;

29 
ngx_uöt_t
 
Àvñ
;

30 
ngx_sockë_t
 
s
;

31 
ngx_evít_t
 *
ªv
, *
wev
;

32 
ngx_c⁄√˘i⁄_t
 *
c
;

34 
rc
 = 
pc
->
	`gë
’c,Öc->
d©a
);

35 i‡(
rc
 !
NGX_OK
) {

36  
rc
;

39 
ty≥
 = (
pc
->ty≥ ?Öc->ty≥ : 
SOCK_STREAM
);

41 
s
 = 
	`ngx_sockë
(
pc
->
sockaddr
->
ß_Ámûy
, 
ty≥
, 0);

43 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "%s socket %d",

44 (
ty≥
 =
SOCK_STREAM
Ë? "°ªam" : "dgøm", 
s
);

46 i‡(
s
 =(
ngx_sockë_t
) -1) {

47 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

48 
ngx_sockë_n
 " failed");

49  
NGX_ERROR
;

53 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
pc
->
log
);

55 i‡(
c
 =
NULL
) {

56 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

57 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

58 
ngx_˛o£_sockë_n
 " failed");

61  
NGX_ERROR
;

64 
c
->
ty≥
 =Åype;

66 i‡(
pc
->
rcvbuf
) {

67 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUF
,

68 (c⁄° *Ë&
pc
->
rcvbuf
, ()) == -1)

70 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

72 
Áûed
;

76 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

77 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

78 
ngx_n⁄blockög_n
 " failed");

80 
Áûed
;

83 i‡(
pc
->
loˇl
) {

85 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

86 i‡(
pc
->
å™•¨ít
) {

87 i‡(
	`ngx_evít_c⁄√˘_£t_å™•¨ít
(
pc
, 
s
Ë!
NGX_OK
) {

88 
Áûed
;

93 #i‡(
NGX_HAVE_IP_BIND_ADDRESS_NO_PORT
 || 
NGX_LINUX
)

94 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
pc
->
loˇl
->
sockaddr
);

97 #i‡(
NGX_HAVE_IP_BIND_ADDRESS_NO_PORT
)

99 i‡(
pc
->
sockaddr
->
ß_Ámûy
 !
AF_UNIX
 && 
p‹t
 == 0) {

100 
böd_addªss_no_p‹t
 = 1;

102 i‡(
böd_addªss_no_p‹t
) {

103 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_BIND_ADDRESS_NO_PORT
,

104 (c⁄° *Ë&
böd_addªss_no_p‹t
,

107 
îr
 = 
ngx_sockë_î∫o
;

109 i‡(
îr
 !
NGX_EOPNOTSUPP
 &&Éº !
NGX_ENOPROTOOPT
) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
îr
,

115 
böd_addªss_no_p‹t
 = 0;

123 #i‡(
NGX_LINUX
)

125 i‡(
pc
->
ty≥
 =
SOCK_DGRAM
 && 
p‹t
 != 0) {

126 
ªu£_addr
 = 1;

128 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

129 (c⁄° *Ë&
ªu£_addr
, ())

132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

134 
Áûed
;

140 i‡(
	`böd
(
s
, 
pc
->
loˇl
->
sockaddr
,Öc->loˇl->
sockÀn
) == -1) {

141 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

142 "böd(%VËÁûed", &
pc
->
loˇl
->
«me
);

144 
Áûed
;

148 i‡(
ty≥
 =
SOCK_STREAM
) {

149 
c
->
ªcv
 = 
ngx_ªcv
;

150 
c
->
£nd
 = 
ngx_£nd
;

151 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

152 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

154 
c
->
£ndfûe
 = 1;

156 i‡(
pc
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

157 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

158 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

160 #i‡(
NGX_SOLARIS
)

162 
c
->
£ndfûe
 = 0;

167 
c
->
ªcv
 = 
ngx_udp_ªcv
;

168 
c
->
£nd
 = 
ngx_£nd
;

169 
c
->
£nd_chaö
 = 
ngx_udp_£nd_chaö
;

172 
c
->
log_îr‹
 = 
pc
->log_error;

174 
ªv
 = 
c
->
ªad
;

175 
wev
 = 
c
->
wrôe
;

177 
ªv
->
log
 = 
pc
->log;

178 
wev
->
log
 = 
pc
->log;

180 
pc
->
c⁄√˘i⁄
 = 
c
;

182 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

184 i‡(
ngx_add_c⁄n
) {

185 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

186 
Áûed
;

190 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0,

191 "c⁄√˘Åÿ%V, fd:%d #%uA", 
pc
->
«me
, 
s
, 
c
->
numbî
);

193 
rc
 = 
	`c⁄√˘
(
s
, 
pc
->
sockaddr
,Öc->
sockÀn
);

195 i‡(
rc
 == -1) {

196 
îr
 = 
ngx_sockë_î∫o
;

199 i‡(
îr
 !
NGX_EINPROGRESS


200 #i‡(
NGX_WIN32
)

202 && 
îr
 !
NGX_EAGAIN


206 i‡(
îr
 =
NGX_ECONNREFUSED


207 #i‡(
NGX_LINUX
)

212 || 
îr
 =
NGX_EAGAIN


214 || 
îr
 =
NGX_ECONNRESET


215 || 
îr
 =
NGX_ENETDOWN


216 || 
îr
 =
NGX_ENETUNREACH


217 || 
îr
 =
NGX_EHOSTDOWN


218 || 
îr
 =
NGX_EHOSTUNREACH
)

220 
Àvñ
 = 
NGX_LOG_ERR
;

223 
Àvñ
 = 
NGX_LOG_CRIT
;

226 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, "connect()Åo %V failed",

227 
pc
->
«me
);

229 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

230 
pc
->
c⁄√˘i⁄
 = 
NULL
;

232  
NGX_DECLINED
;

236 i‡(
ngx_add_c⁄n
) {

237 i‡(
rc
 == -1) {

241  
NGX_AGAIN
;

244 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

246 
wev
->
ªady
 = 1;

248  
NGX_OK
;

251 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

253 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

254 "c⁄√˘(): %d", 
rc
);

256 i‡(
	`ngx_blockög
(
s
) == -1) {

257 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

258 
ngx_blockög_n
 " failed");

259 
Áûed
;

269 
ªv
->
ªady
 = 1;

270 
wev
->
ªady
 = 1;

272  
NGX_OK
;

275 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

279 
evít
 = 
NGX_CLEAR_EVENT
;

285 
evít
 = 
NGX_LEVEL_EVENT
;

288 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

289 
Áûed
;

292 i‡(
rc
 == -1) {

296 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

297 
Áûed
;

300  
NGX_AGAIN
;

303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

305 
wev
->
ªady
 = 1;

307  
NGX_OK
;

309 
Áûed
:

311 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

312 
pc
->
c⁄√˘i⁄
 = 
NULL
;

314  
NGX_ERROR
;

315 
	}
}

318 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

320 
ngx_öt_t


321 
	$ngx_evít_c⁄√˘_£t_å™•¨ít
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, 
ngx_sockë_t
 
s
)

323 
vÆue
;

325 
vÆue
 = 1;

327 #i‡
	`deföed
(
SO_BINDANY
)

329 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_BINDANY
,

330 (c⁄° *Ë&
vÆue
, ()) == -1)

332 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

334  
NGX_ERROR
;

339 
pc
->
loˇl
->
sockaddr
->
ß_Ámûy
) {

341 
AF_INET
:

343 #i‡
	`deföed
(
IP_TRANSPARENT
)

345 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_TRANSPARENT
,

346 (c⁄° *Ë&
vÆue
, ()) == -1)

348 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

350  
NGX_ERROR
;

353 #ñi‡
	`deföed
(
IP_BINDANY
)

355 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_BINDANY
,

356 (c⁄° *Ë&
vÆue
, ()) == -1)

358 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

360  
NGX_ERROR
;

367 #i‡(
NGX_HAVE_INET6
)

369 
AF_INET6
:

371 #i‡
	`deföed
(
IPV6_TRANSPARENT
)

373 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_TRANSPARENT
,

374 (c⁄° *Ë&
vÆue
, ()) == -1)

376 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

378  
NGX_ERROR
;

381 #ñi‡
	`deföed
(
IPV6_BINDANY
)

383 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_BINDANY
,

384 (c⁄° *Ë&
vÆue
, ()) == -1)

386 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

388  
NGX_ERROR
;

393 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 0,

397  
NGX_ERROR
;

409  
NGX_OK
;

410 
	}
}

415 
ngx_öt_t


416 
	$ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

418  
NGX_OK
;

419 
	}
}

	@src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 (*
	tngx_evít_nŸify_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

29 *
	td©a
, 
	tngx_uöt_t
 
	tty≥
);

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

36 
	sngx_≥î_c⁄√˘i⁄_s
 {

37 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

39 
sockaddr
 *sockaddr;

40 
sockÀn_t
 
sockÀn
;

41 
ngx_°r_t
 *
«me
;

43 
ngx_uöt_t
 
åõs
;

44 
ngx_m£c_t
 
°¨t_time
;

46 
ngx_evít_gë_≥î_±
 
gë
;

47 
ngx_evít_‰ì_≥î_±
 
‰ì
;

48 
ngx_evít_nŸify_≥î_±
 
nŸify
;

49 *
d©a
;

51 #i‡(
NGX_SSL
 || 
NGX_COMPAT
)

52 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

53 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

56 
ngx_addr_t
 *
loˇl
;

58 
ty≥
;

59 
rcvbuf
;

61 
ngx_log_t
 *
log
;

63 
ˇched
:1;

64 
å™•¨ít
:1;

67 
log_îr‹
:2;

69 
	`NGX_COMPAT_BEGIN
(2)

70 
NGX_COMPAT_END


74 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

75 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@src/event/ngx_event_openssl.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_SSL_PASSWORD_BUFFER_SIZE
 4096

	)

17 
ngx_uöt_t
 
	mígöe
;

18 } 
	tngx_›ís¶_c⁄f_t
;

21 
ngx_s¶_∑ssw‹d_ˇŒback
(*
buf
, 
size
, 
rwÊag
,

22 *
u£rd©a
);

23 
ngx_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
);

24 
ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
,

25 
ªt
);

26 
ngx_s¶_∑ssw‹ds_˛ónup
(*
d©a
);

27 
ngx_s¶_√w_˛õ¡_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

28 
ngx_s¶_£ssi⁄_t
 *
£ss
);

29 
ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
);

30 
ngx_öt_t
 
ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
);

31 
ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

32 
ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

33 
ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
);

34 
ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
,

35 
ngx_îr_t
 
îr
, *
ãxt
);

36 
ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
ngx_s¶_£ssi⁄_id_c⁄ãxt
(
ngx_s¶_t
 *
s¶
,

39 
ngx_°r_t
 *
£ss_˘x
);

40 
ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

41 
ngx_s¶_£ssi⁄_t
 *
£ss
);

42 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

43 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100003L

46 
u_ch¨
 *
id
, 
Àn
, *
c›y
);

47 
ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

48 
ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

49 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
);

50 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

51 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

53 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


54 
ngx_s¶_£ssi⁄_tickë_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

55 *
«me
, *
iv
, 
EVP_CIPHER_CTX
 *
e˘x
,

56 
HMAC_CTX
 *
h˘x
, 
íc
);

59 #i‚de‡
X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT


60 
ngx_öt_t
 
ngx_s¶_check_«me
(
ngx_°r_t
 *
«me
, 
ASN1_STRING
 *
°r
);

63 
time_t
 
ngx_s¶_∑r£_time
(

64 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10100000L

67 
ASN1_TIME
 *
a¢1time
);

69 *
ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

70 *
ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

71 
ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
);

74 
ngx_comm™d_t
 
	gngx_›ís¶_comm™ds
[] = {

76 { 
ngx_°rög
("ssl_engine"),

77 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

78 
ngx_›ís¶_ígöe
,

81 
NULL
 },

83 
ngx_nuŒ_comm™d


87 
ngx_c‹e_moduÀ_t
 
	gngx_›ís¶_moduÀ_˘x
 = {

88 
ngx_°rög
("openssl"),

89 
ngx_›ís¶_¸óã_c⁄f
,

90 
NULL


94 
ngx_moduÀ_t
 
	gngx_›ís¶_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_›ís¶_moduÀ_˘x
,

97 
ngx_›ís¶_comm™ds
,

98 
NGX_CORE_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
ngx_›ís¶_exô
,

106 
NGX_MODULE_V1_PADDING


110 
	gngx_s¶_c⁄√˘i⁄_ödex
;

111 
	gngx_s¶_£rvî_c⁄f_ödex
;

112 
	gngx_s¶_£ssi⁄_ˇche_ödex
;

113 
	gngx_s¶_£ssi⁄_tickë_keys_ödex
;

114 
	gngx_s¶_˚πifiˇã_ödex
;

115 
	gngx_s¶_√xt_˚πifiˇã_ödex
;

116 
	gngx_s¶_˚πifiˇã_«me_ödex
;

117 
	gngx_s¶_°≠lög_ödex
;

120 
ngx_öt_t


121 
	$ngx_s¶_öô
(
ngx_log_t
 *
log
)

123 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100003L

125 i‡(
	`OPENSSL_öô_s¶
(
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
) == 0) {

126 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "OPENSSL_init_ssl() failed");

127  
NGX_ERROR
;

135 
	`ERR_˛ór_îr‹
();

139 
	`OPENSSL_c⁄fig
(
NULL
);

141 
	`SSL_libøry_öô
();

142 
	`SSL_lﬂd_îr‹_°rögs
();

144 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

148 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

149 #i‚de‡
SSL_OP_NO_COMPRESSION


155 
n
;

156 
	`STACK_OF
(
SSL_COMP
Ë*
s¶_comp_mëhods
;

158 
s¶_comp_mëhods
 = 
	`SSL_COMP_gë_com¥essi⁄_mëhods
();

159 
n
 = 
	`sk_SSL_COMP_num
(
s¶_comp_mëhods
);

161 
n
--) {

162 (Ë
	`sk_SSL_COMP_p›
(
s¶_comp_mëhods
);

168 
ngx_s¶_c⁄√˘i⁄_ödex
 = 
	`SSL_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

170 i‡(
ngx_s¶_c⁄√˘i⁄_ödex
 == -1) {

171 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "SSL_get_ex_new_index() failed");

172  
NGX_ERROR
;

175 
ngx_s¶_£rvî_c⁄f_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

176 
NULL
);

177 i‡(
ngx_s¶_£rvî_c⁄f_ödex
 == -1) {

178 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

180  
NGX_ERROR
;

183 
ngx_s¶_£ssi⁄_ˇche_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

184 
NULL
);

185 i‡(
ngx_s¶_£ssi⁄_ˇche_ödex
 == -1) {

186 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

188  
NGX_ERROR
;

191 
ngx_s¶_£ssi⁄_tickë_keys_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL,

192 
NULL
, NULL);

193 i‡(
ngx_s¶_£ssi⁄_tickë_keys_ödex
 == -1) {

194 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

196  
NGX_ERROR
;

199 
ngx_s¶_˚πifiˇã_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

200 
NULL
);

201 i‡(
ngx_s¶_˚πifiˇã_ödex
 == -1) {

202 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

204  
NGX_ERROR
;

207 
ngx_s¶_√xt_˚πifiˇã_ödex
 = 
	`X509_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

208 
NULL
);

209 i‡(
ngx_s¶_√xt_˚πifiˇã_ödex
 == -1) {

210 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "X509_get_ex_new_index() failed");

211  
NGX_ERROR
;

214 
ngx_s¶_˚πifiˇã_«me_ödex
 = 
	`X509_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

215 
NULL
);

217 i‡(
ngx_s¶_˚πifiˇã_«me_ödex
 == -1) {

218 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "X509_get_ex_new_index() failed");

219  
NGX_ERROR
;

222 
ngx_s¶_°≠lög_ödex
 = 
	`X509_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

224 i‡(
ngx_s¶_°≠lög_ödex
 == -1) {

225 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "X509_get_ex_new_index() failed");

226  
NGX_ERROR
;

229  
NGX_OK
;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
)

236 
s¶
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_mëhod
());

238 i‡(
s¶
->
˘x
 =
NULL
) {

239 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "SSL_CTX_new() failed");

240  
NGX_ERROR
;

243 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
, 
d©a
) == 0) {

244 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

246  
NGX_ERROR
;

249 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
, 
NULL
) == 0) {

250 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

252  
NGX_ERROR
;

255 
s¶
->
buf„r_size
 = 
NGX_SSL_BUFSIZE
;

259 #ifde‡
SSL_OP_MICROSOFT_SESS_ID_BUG


260 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_SESS_ID_BUG
);

263 #ifde‡
SSL_OP_NETSCAPE_CHALLENGE_BUG


264 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NETSCAPE_CHALLENGE_BUG
);

269 #ifde‡
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG


270 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
);

273 #ifde‡
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER


274 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
);

277 #ifde‡
SSL_OP_MSIE_SSLV2_RSA_PADDING


279 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MSIE_SSLV2_RSA_PADDING
);

282 #ifde‡
SSL_OP_SSLEAY_080_CLIENT_DH_BUG


283 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLEAY_080_CLIENT_DH_BUG
);

286 #ifde‡
SSL_OP_TLS_D5_BUG


287 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_D5_BUG
);

290 #ifde‡
SSL_OP_TLS_BLOCK_PADDING_BUG


291 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_BLOCK_PADDING_BUG
);

294 #ifde‡
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS


295 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
);

298 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_DH_USE
);

300 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x009080dfL

302 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
,

303 
SSL_OP_NO_SSLv2
|
SSL_OP_NO_SSLv3
|
SSL_OP_NO_TLSv1
);

306 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv2
)) {

307 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv2
);

309 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv3
)) {

310 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv3
);

312 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1
)) {

313 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1
);

315 #ifde‡
SSL_OP_NO_TLSv1_1


316 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

317 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_1
)) {

318 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

321 #ifde‡
SSL_OP_NO_TLSv1_2


322 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

323 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_2
)) {

324 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

327 #ifde‡
SSL_OP_NO_TLSv1_3


328 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_3
);

329 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_3
)) {

330 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_3
);

334 #ifde‡
SSL_OP_NO_COMPRESSION


335 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_COMPRESSION
);

338 #ifde‡
SSL_MODE_RELEASE_BUFFERS


339 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

342 #ifde‡
SSL_MODE_NO_AUTO_CHAIN


343 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_NO_AUTO_CHAIN
);

346 
	`SSL_CTX_£t_ªad_ahód
(
s¶
->
˘x
, 1);

348 
	`SSL_CTX_£t_öfo_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_öfo_ˇŒback
);

350  
NGX_OK
;

351 
	}
}

354 
ngx_öt_t


355 
	$ngx_s¶_˚πifiˇãs
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
˚πs
,

356 
ngx_¨øy_t
 *
keys
,Çgx_¨øy_à*
∑ssw‹ds
)

358 
ngx_°r_t
 *
˚π
, *
key
;

359 
ngx_uöt_t
 
i
;

361 
˚π
 = 
˚πs
->
ñts
;

362 
key
 = 
keys
->
ñts
;

364 
i
 = 0; i < 
˚πs
->
√…s
; i++) {

366 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
s¶
, &
˚π
[
i
], &
key
[i], 
∑ssw‹ds
)

367 !
NGX_OK
)

369  
NGX_ERROR
;

373  
NGX_OK
;

374 
	}
}

377 
ngx_öt_t


378 
	$ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

379 
ngx_°r_t
 *
key
, 
ngx_¨øy_t
 *
∑ssw‹ds
)

381 
BIO
 *
bio
;

382 
X509
 *
x509
;

383 
u_l⁄g
 
n
;

384 
ngx_°r_t
 *
pwd
;

385 
ngx_uöt_t
 
åõs
;

387 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

388  
NGX_ERROR
;

397 
bio
 = 
	`BIO_√w_fûe
((*Ë
˚π
->
d©a
, "r");

398 i‡(
bio
 =
NULL
) {

399 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

400 "BIO_√w_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

401  
NGX_ERROR
;

404 
x509
 = 
	`PEM_ªad_bio_X509_AUX
(
bio
, 
NULL
, NULL, NULL);

405 i‡(
x509
 =
NULL
) {

406 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

407 "PEM_ªad_bio_X509_AUX(\"%s\"ËÁûed", 
˚π
->
d©a
);

408 
	`BIO_‰ì
(
bio
);

409  
NGX_ERROR
;

412 i‡(
	`SSL_CTX_u£_˚πifiˇã
(
s¶
->
˘x
, 
x509
) == 0) {

413 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

414 "SSL_CTX_u£_˚πifiˇã(\"%s\"ËÁûed", 
˚π
->
d©a
);

415 
	`X509_‰ì
(
x509
);

416 
	`BIO_‰ì
(
bio
);

417  
NGX_ERROR
;

420 i‡(
	`X509_£t_ex_d©a
(
x509
, 
ngx_s¶_˚πifiˇã_«me_ödex
, 
˚π
->
d©a
)

423 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "X509_set_ex_data() failed");

424 
	`X509_‰ì
(
x509
);

425 
	`BIO_‰ì
(
bio
);

426  
NGX_ERROR
;

429 i‡(
	`X509_£t_ex_d©a
(
x509
, 
ngx_s¶_√xt_˚πifiˇã_ödex
,

430 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
))

433 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "X509_set_ex_data() failed");

434 
	`X509_‰ì
(
x509
);

435 
	`BIO_‰ì
(
bio
);

436  
NGX_ERROR
;

439 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
, 
x509
)

442 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

444 
	`X509_‰ì
(
x509
);

445 
	`BIO_‰ì
(
bio
);

446  
NGX_ERROR
;

453 
x509
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

454 i‡(
x509
 =
NULL
) {

455 
n
 = 
	`ERR_≥ek_œ°_îr‹
();

457 i‡(
	`ERR_GET_LIB
(
n
Ë=
ERR_LIB_PEM


458 && 
	`ERR_GET_REASON
(
n
Ë=
PEM_R_NO_START_LINE
)

461 
	`ERR_˛ór_îr‹
();

467 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

468 "PEM_ªad_bio_X509(\"%s\"ËÁûed", 
˚π
->
d©a
);

469 
	`BIO_‰ì
(
bio
);

470  
NGX_ERROR
;

473 #ifde‡
SSL_CTRL_CHAIN_CERT


481 i‡(
	`SSL_CTX_add0_chaö_˚π
(
s¶
->
˘x
, 
x509
) == 0) {

482 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

484 
˚π
->
d©a
);

485 
	`X509_‰ì
(
x509
);

486 
	`BIO_‰ì
(
bio
);

487  
NGX_ERROR
;

491 i‡(
	`SSL_CTX_add_exåa_chaö_˚π
(
s¶
->
˘x
, 
x509
) == 0) {

492 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

494 
˚π
->
d©a
);

495 
	`X509_‰ì
(
x509
);

496 
	`BIO_‰ì
(
bio
);

497  
NGX_ERROR
;

502 
	`BIO_‰ì
(
bio
);

504 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, "engine:", ("engine:") - 1) == 0) {

506 #i‚de‡
OPENSSL_NO_ENGINE


508 
u_ch¨
 *
p
, *
œ°
;

509 
ENGINE
 *
ígöe
;

510 
EVP_PKEY
 *
pkey
;

512 
p
 = 
key
->
d©a
 + ("engine:") - 1;

513 
œ°
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
p
, ':');

515 i‡(
œ°
 =
NULL
) {

516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

517 "övÆid sy¡ax i¿\"%V\"", 
key
);

518  
NGX_ERROR
;

521 *
œ°
 = '\0';

523 
ígöe
 = 
	`ENGINE_by_id
((*Ë
p
);

525 i‡(
ígöe
 =
NULL
) {

526 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

527 "ENGINE_by_id(\"%s\"ËÁûed", 
p
);

528  
NGX_ERROR
;

531 *
œ°
++ = ':';

533 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
ígöe
, (*Ë
œ°
, 0, 0);

535 i‡(
pkey
 =
NULL
) {

536 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

537 "ENGINE_lﬂd_¥iv©e_key(\"%s\"ËÁûed", 
œ°
);

538 
	`ENGINE_‰ì
(
ígöe
);

539  
NGX_ERROR
;

542 
	`ENGINE_‰ì
(
ígöe
);

544 i‡(
	`SSL_CTX_u£_Priv©eKey
(
s¶
->
˘x
, 
pkey
) == 0) {

545 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

546 "SSL_CTX_u£_Priv©eKey(\"%s\"ËÁûed", 
œ°
);

547 
	`EVP_PKEY_‰ì
(
pkey
);

548  
NGX_ERROR
;

551 
	`EVP_PKEY_‰ì
(
pkey
);

553  
NGX_OK
;

557 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

560  
NGX_ERROR
;

565 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
key
, 1Ë!
NGX_OK
) {

566  
NGX_ERROR
;

569 i‡(
∑ssw‹ds
) {

570 
åõs
 = 
∑ssw‹ds
->
√…s
;

571 
pwd
 = 
∑ssw‹ds
->
ñts
;

573 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
s¶
->
˘x
, 
ngx_s¶_∑ssw‹d_ˇŒback
);

574 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
s¶
->
˘x
, 
pwd
);

577 
åõs
 = 1;

578 #i‡(
NGX_SUPPRESS_WARN
)

579 
pwd
 = 
NULL
;

585 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶
->
˘x
, (*Ë
key
->
d©a
,

586 
SSL_FILETYPE_PEM
)

592 i‡(--
åõs
) {

593 
	`ERR_˛ór_îr‹
();

594 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
s¶
->
˘x
, ++
pwd
);

598 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

599 "SSL_CTX_u£_Priv©eKey_fûe(\"%s\"ËÁûed", 
key
->
d©a
);

600  
NGX_ERROR
;

603 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
s¶
->
˘x
, 
NULL
);

605  
NGX_OK
;

606 
	}
}

610 
	$ngx_s¶_∑ssw‹d_ˇŒback
(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
)

612 
ngx_°r_t
 *
pwd
 = 
u£rd©a
;

614 i‡(
rwÊag
) {

615 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

620 i‡(
pwd
->
Àn
 > (
size_t
Ë
size
) {

621 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ngx_cy˛e
->
log
, 0,

622 "∑ssw‹d i†åunˇãdÅÿ%d byãs", 
size
);

624 
size
 = 
pwd
->
Àn
;

627 
	`ngx_mem˝y
(
buf
, 
pwd
->
d©a
, 
size
);

629  
size
;

630 
	}
}

633 
ngx_öt_t


634 
	$ngx_s¶_cùhîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
cùhîs
,

635 
ngx_uöt_t
 
¥e„r_£rvî_cùhîs
)

637 i‡(
	`SSL_CTX_£t_cùhî_li°
(
s¶
->
˘x
, (*Ë
cùhîs
->
d©a
) == 0) {

638 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

640 
cùhîs
);

641  
NGX_ERROR
;

644 i‡(
¥e„r_£rvî_cùhîs
) {

645 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

648 #i‡(
OPENSSL_VERSION_NUMBER
 < 0x10100001L && !
deföed
 
LIBRESSL_VERSION_NUMBER
)

650 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

653  
NGX_OK
;

654 
	}
}

657 
ngx_öt_t


658 
	$ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

659 
ngx_öt_t
 
dïth
)

661 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

663 
	`SSL_CTX_£t_vîify
(
s¶
->
˘x
, 
SSL_VERIFY_PEER
, 
ngx_s¶_vîify_ˇŒback
);

665 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

667 i‡(
˚π
->
Àn
 == 0) {

668  
NGX_OK
;

671 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

672  
NGX_ERROR
;

675 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

678 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

680 
˚π
->
d©a
);

681  
NGX_ERROR
;

689 
	`ERR_˛ór_îr‹
();

691 
li°
 = 
	`SSL_lﬂd_˛õ¡_CA_fûe
((*Ë
˚π
->
d©a
);

693 i‡(
li°
 =
NULL
) {

694 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

695 "SSL_lﬂd_˛õ¡_CA_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

696  
NGX_ERROR
;

704 
	`ERR_˛ór_îr‹
();

706 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶
->
˘x
, 
li°
);

708  
NGX_OK
;

709 
	}
}

712 
ngx_öt_t


713 
	$ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

714 
ngx_öt_t
 
dïth
)

716 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

718 i‡(
˚π
->
Àn
 == 0) {

719  
NGX_OK
;

722 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

723  
NGX_ERROR
;

726 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

729 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

731 
˚π
->
d©a
);

732  
NGX_ERROR
;

740 
	`ERR_˛ór_îr‹
();

742  
NGX_OK
;

743 
	}
}

746 
ngx_öt_t


747 
	$ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
)

749 
X509_STORE
 *
°‹e
;

750 
X509_LOOKUP
 *
lookup
;

752 i‡(
¸l
->
Àn
 == 0) {

753  
NGX_OK
;

756 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
¸l
, 1Ë!
NGX_OK
) {

757  
NGX_ERROR
;

760 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

762 i‡(
°‹e
 =
NULL
) {

763 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

765  
NGX_ERROR
;

768 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

770 i‡(
lookup
 =
NULL
) {

771 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

773  
NGX_ERROR
;

776 i‡(
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, (*Ë
¸l
->
d©a
, 
X509_FILETYPE_PEM
)

779 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

780 "X509_LOOKUP_lﬂd_fûe(\"%s\"ËÁûed", 
¸l
->
d©a
);

781  
NGX_ERROR
;

784 
	`X509_STORE_£t_Êags
(
°‹e
,

785 
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
);

787  
NGX_OK
;

788 
	}
}

792 
	$ngx_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
)

794 #i‡(
NGX_DEBUG
)

795 *
subje˘
, *
issuî
;

796 
îr
, 
dïth
;

797 
X509
 *
˚π
;

798 
X509_NAME
 *
¢ame
, *
öame
;

799 
ngx_c⁄√˘i⁄_t
 *
c
;

800 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
;

802 
s¶_c⁄n
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
x509_°‹e
,

803 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

805 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

807 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
x509_°‹e
);

808 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
x509_°‹e
);

809 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
x509_°‹e
);

811 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

812 
subje˘
 = 
¢ame
 ? 
	`X509_NAME_⁄ñöe
(¢ame, 
NULL
, 0) : "(none)";

814 
öame
 = 
	`X509_gë_issuî_«me
(
˚π
);

815 
issuî
 = 
öame
 ? 
	`X509_NAME_⁄ñöe
(öame, 
NULL
, 0) : "(none)";

817 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

820 
ok
, 
îr
, 
dïth
, 
subje˘
, 
issuî
);

822 i‡(
¢ame
) {

823 
	`OPENSSL_‰ì
(
subje˘
);

826 i‡(
öame
) {

827 
	`OPENSSL_‰ì
(
issuî
);

832 
	}
}

836 
	$ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
, 
ªt
)

838 
BIO
 *
rbio
, *
wbio
;

839 
ngx_c⁄√˘i⁄_t
 *
c
;

841 i‡((
whîe
 & 
SSL_CB_HANDSHAKE_START
)

842 && 
	`SSL_is_£rvî
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
))

844 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

846 i‡(
c
->
s¶
->
h™dshaked
) {

847 
c
->
s¶
->
ª√gŸüti⁄
 = 1;

848 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÑenegotiation");

852 i‡((
whîe
 & 
SSL_CB_ACCEPT_LOOP
) == SSL_CB_ACCEPT_LOOP) {

853 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

855 i‡(!
c
->
s¶
->
h™dshake_buf„r_£t
) {

867 
rbio
 = 
	`SSL_gë_rbio
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

868 
wbio
 = 
	`SSL_gë_wbio
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

870 i‡(
rbio
 !
wbio
) {

871 (Ë
	`BIO_£t_wrôe_buf„r_size
(
wbio
, 
NGX_SSL_BUFSIZE
);

872 
c
->
s¶
->
h™dshake_buf„r_£t
 = 1;

876 
	}
}

879 
RSA
 *

880 
	$ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

881 
key_Àngth
)

883 
RSA
 *
key
;

885 i‡(
key_Àngth
 != 512) {

886  
NULL
;

889 #i‡(
OPENSSL_VERSION_NUMBER
 < 0x10100003L && !
deföed
 
OPENSSL_NO_DEPRECATED
)

891 i‡(
key
 =
NULL
) {

892 
key
 = 
	`RSA_gíî©e_key
(512, 
RSA_F4
, 
NULL
, NULL);

897  
key
;

898 
	}
}

901 
ngx_¨øy_t
 *

902 
	$ngx_s¶_ªad_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
)

904 
u_ch¨
 *
p
, *
œ°
, *
íd
;

905 
size_t
 
Àn
;

906 
ssize_t
 
n
;

907 
ngx_fd_t
 
fd
;

908 
ngx_°r_t
 *
pwd
;

909 
ngx_¨øy_t
 *
∑ssw‹ds
;

910 
ngx_poﬁ_˛ónup_t
 *
˛n
;

911 
u_ch¨
 
buf
[
NGX_SSL_PASSWORD_BUFFER_SIZE
];

913 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

914  
NULL
;

917 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
ãmp_poﬁ
, 0);

918 
∑ssw‹ds
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 4, (
ngx_°r_t
));

920 i‡(
˛n
 =
NULL
 || 
∑ssw‹ds
 == NULL) {

921  
NULL
;

924 
˛n
->
h™dÀr
 = 
ngx_s¶_∑ssw‹ds_˛ónup
;

925 
˛n
->
d©a
 = 
∑ssw‹ds
;

927 
fd
 = 
	`ngx_›í_fûe
(
fûe
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

929 i‡(
fd
 =
NGX_INVALID_FILE
) {

930 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

931 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
->
d©a
);

932  
NULL
;

935 
Àn
 = 0;

936 
œ°
 = 
buf
;

939 
n
 = 
	`ngx_ªad_fd
(
fd
, 
œ°
, 
NGX_SSL_PASSWORD_BUFFER_SIZE
 - 
Àn
);

941 i‡(
n
 == -1) {

942 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

943 
ngx_ªad_fd_n
 " \"%s\" faûed", 
fûe
->
d©a
);

944 
∑ssw‹ds
 = 
NULL
;

945 
˛ónup
;

948 
íd
 = 
œ°
 + 
n
;

950 i‡(
Àn
 && 
n
 == 0) {

951 *
íd
++ = 
LF
;

954 
p
 = 
buf
;

957 
œ°
 = 
	`ngx_°æchr
÷a°, 
íd
, 
LF
);

959 i‡(
œ°
 =
NULL
) {

963 
Àn
 = 
œ°
++ - 
p
;

965 i‡(
Àn
 && 
p
[À¿- 1] =
CR
) {

966 
Àn
--;

969 i‡(
Àn
) {

970 
pwd
 = 
	`ngx_¨øy_push
(
∑ssw‹ds
);

971 i‡(
pwd
 =
NULL
) {

972 
∑ssw‹ds
 = 
NULL
;

973 
˛ónup
;

976 
pwd
->
Àn
 =Üen;

977 
pwd
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
ãmp_poﬁ
, 
Àn
);

979 i‡(
pwd
->
d©a
 =
NULL
) {

980 
∑ssw‹ds
->
√…s
--;

981 
∑ssw‹ds
 = 
NULL
;

982 
˛ónup
;

985 
	`ngx_mem˝y
(
pwd
->
d©a
, 
p
, 
Àn
);

988 
p
 = 
œ°
;

991 
Àn
 = 
íd
 - 
p
;

993 i‡(
Àn
 =
NGX_SSL_PASSWORD_BUFFER_SIZE
) {

994 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

995 "toÿl⁄gÜöêö \"%s\"", 
fûe
->
d©a
);

996 
∑ssw‹ds
 = 
NULL
;

997 
˛ónup
;

1000 
	`ngx_memmove
(
buf
, 
p
, 
Àn
);

1001 
œ°
 = 
buf
 + 
Àn
;

1003 } 
n
 != 0);

1005 i‡(
∑ssw‹ds
->
√…s
 == 0) {

1006 
pwd
 = 
	`ngx_¨øy_push
(
∑ssw‹ds
);

1007 i‡(
pwd
 =
NULL
) {

1008 
∑ssw‹ds
 = 
NULL
;

1009 
˛ónup
;

1012 
	`ngx_memzîo
(
pwd
, (
ngx_°r_t
));

1015 
˛ónup
:

1017 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1018 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ALERT
, 
cf
, 
ngx_î∫o
,

1019 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
d©a
);

1022 
	`ngx_memzîo
(
buf
, 
NGX_SSL_PASSWORD_BUFFER_SIZE
);

1024  
∑ssw‹ds
;

1025 
	}
}

1029 
	$ngx_s¶_∑ssw‹ds_˛ónup
(*
d©a
)

1031 
ngx_¨øy_t
 *
∑ssw‹ds
 = 
d©a
;

1033 
ngx_°r_t
 *
pwd
;

1034 
ngx_uöt_t
 
i
;

1036 
pwd
 = 
∑ssw‹ds
->
ñts
;

1038 
i
 = 0; i < 
∑ssw‹ds
->
√…s
; i++) {

1039 
	`ngx_memzîo
(
pwd
[
i
].
d©a
,Öwd[i].
Àn
);

1041 
	}
}

1044 
ngx_öt_t


1045 
	$ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

1047 
DH
 *
dh
;

1048 
BIO
 *
bio
;

1050 i‡(
fûe
->
Àn
 == 0) {

1051  
NGX_OK
;

1054 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

1055  
NGX_ERROR
;

1058 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

1059 i‡(
bio
 =
NULL
) {

1060 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1061 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

1062  
NGX_ERROR
;

1065 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

1066 i‡(
dh
 =
NULL
) {

1067 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1068 "PEM_ªad_bio_DH∑øms(\"%s\"ËÁûed", 
fûe
->
d©a
);

1069 
	`BIO_‰ì
(
bio
);

1070  
NGX_ERROR
;

1073 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

1075 
	`DH_‰ì
(
dh
);

1076 
	`BIO_‰ì
(
bio
);

1078  
NGX_OK
;

1079 
	}
}

1082 
ngx_öt_t


1083 
	$ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
)

1085 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

1086 #i‚de‡
OPENSSL_NO_ECDH


1095 #i‡(
deföed
 
SSL_CTX_£t1_curves_li°
 || deföed 
SSL_CTRL_SET_CURVES_LIST
)

1109 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

1111 #i‡
SSL_CTRL_SET_ECDH_AUTO


1113 
	`SSL_CTX_£t_ecdh_auto
(
s¶
->
˘x
, 1);

1116 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, "auto") == 0) {

1117  
NGX_OK
;

1120 i‡(
	`SSL_CTX_£t1_curves_li°
(
s¶
->
˘x
, (*Ë
«me
->
d©a
) == 0) {

1121 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1122 "SSL_CTX_£t1_curves_li°(\"%s\"ËÁûed", 
«me
->
d©a
);

1123  
NGX_ERROR
;

1128 
nid
;

1129 *
curve
;

1130 
EC_KEY
 *
ecdh
;

1132 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, "auto") == 0) {

1133 
curve
 = "prime256v1";

1136 
curve
 = (*Ë
«me
->
d©a
;

1139 
nid
 = 
	`OBJ_¢2nid
(
curve
);

1140 i‡(
nid
 == 0) {

1141 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1142 "OBJ_¢2nid(\"%s\"ËÁûed: unknow¿curve", 
curve
);

1143  
NGX_ERROR
;

1146 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

1147 i‡(
ecdh
 =
NULL
) {

1148 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1149 "EC_KEY_√w_by_curve_«me(\"%s\"ËÁûed", 
curve
);

1150  
NGX_ERROR
;

1153 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

1155 
	`SSL_CTX_£t_tmp_ecdh
(
s¶
->
˘x
, 
ecdh
);

1157 
	`EC_KEY_‰ì
(
ecdh
);

1162  
NGX_OK
;

1163 
	}
}

1166 
ngx_öt_t


1167 
	$ngx_s¶_˛õ¡_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
íabÀ
)

1169 i‡(!
íabÀ
) {

1170  
NGX_OK
;

1173 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

1174 
SSL_SESS_CACHE_CLIENT


1175 |
SSL_SESS_CACHE_NO_INTERNAL
);

1177 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_˛õ¡_£ssi⁄
);

1179  
NGX_OK
;

1180 
	}
}

1184 
	$ngx_s¶_√w_˛õ¡_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1186 
ngx_c⁄√˘i⁄_t
 *
c
;

1188 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1190 i‡(
c
->
s¶
->
ßve_£ssi⁄
) {

1191 
c
->
s¶
->
£ssi⁄
 = 
£ss
;

1193 
c
->
s¶
->
	`ßve_£ssi⁄
(c);

1195 
c
->
s¶
->
£ssi⁄
 = 
NULL
;

1199 
	}
}

1202 
ngx_öt_t


1203 
	$ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

1205 
ngx_s¶_c⁄√˘i⁄_t
 *
sc
;

1207 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_s¶_c⁄√˘i⁄_t
));

1208 i‡(
sc
 =
NULL
) {

1209  
NGX_ERROR
;

1212 
sc
->
buf„r
 = ((
Êags
 & 
NGX_SSL_BUFFER
) != 0);

1213 
sc
->
buf„r_size
 = 
s¶
->buffer_size;

1215 
sc
->
£ssi⁄_˘x
 = 
s¶
->
˘x
;

1217 
sc
->
c⁄√˘i⁄
 = 
	`SSL_√w
(
s¶
->
˘x
);

1219 i‡(
sc
->
c⁄√˘i⁄
 =
NULL
) {

1220 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_new() failed");

1221  
NGX_ERROR
;

1224 i‡(
	`SSL_£t_fd
(
sc
->
c⁄√˘i⁄
, 
c
->
fd
) == 0) {

1225 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_fd() failed");

1226  
NGX_ERROR
;

1229 i‡(
Êags
 & 
NGX_SSL_CLIENT
) {

1230 
	`SSL_£t_c⁄√˘_°©e
(
sc
->
c⁄√˘i⁄
);

1233 
	`SSL_£t_ac˚±_°©e
(
sc
->
c⁄√˘i⁄
);

1235 #ifde‡
SSL_OP_NO_RENEGOTIATION


1236 
	`SSL_£t_›ti⁄s
(
sc
->
c⁄√˘i⁄
, 
SSL_OP_NO_RENEGOTIATION
);

1240 i‡(
	`SSL_£t_ex_d©a
(
sc
->
c⁄√˘i⁄
, 
ngx_s¶_c⁄√˘i⁄_ödex
, 
c
) == 0) {

1241 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_ex_data() failed");

1242  
NGX_ERROR
;

1245 
c
->
s¶
 = 
sc
;

1247  
NGX_OK
;

1248 
	}
}

1251 
ngx_s¶_£ssi⁄_t
 *

1252 
	$ngx_s¶_gë_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

1254 #ifde‡
TLS1_3_VERSION


1255 i‡(
c
->
s¶
->
£ssi⁄
) {

1256 
	`SSL_SESSION_up_ªf
(
c
->
s¶
->
£ssi⁄
);

1257  
c
->
s¶
->
£ssi⁄
;

1261  
	`SSL_gë1_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

1262 
	}
}

1265 
ngx_s¶_£ssi⁄_t
 *

1266 
	$ngx_s¶_gë0_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

1268 i‡(
c
->
s¶
->
£ssi⁄
) {

1269  
c
->
s¶
->
£ssi⁄
;

1272  
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

1273 
	}
}

1276 
ngx_öt_t


1277 
	$ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
)

1279 i‡(
£ssi⁄
) {

1280 i‡(
	`SSL_£t_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
, 
£ssi⁄
) == 0) {

1281 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_session() failed");

1282  
NGX_ERROR
;

1286  
NGX_OK
;

1287 
	}
}

1290 
ngx_öt_t


1291 
	$ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1293 
n
, 
s¶îr
;

1294 
ngx_îr_t
 
îr
;

1296 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1298 
n
 = 
	`SSL_do_h™dshake
(
c
->
s¶
->
c⁄√˘i⁄
);

1300 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_do_h™dshake: %d", 
n
);

1302 i‡(
n
 == 1) {

1304 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1305  
NGX_ERROR
;

1308 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1309  
NGX_ERROR
;

1312 #i‡(
NGX_DEBUG
)

1314 
buf
[129], *
s
, *
d
;

1315 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

1318 
SSL_CIPHER
 *
cùhî
;

1320 
cùhî
 = 
	`SSL_gë_cuºít_cùhî
(
c
->
s¶
->
c⁄√˘i⁄
);

1322 i‡(
cùhî
) {

1323 
	`SSL_CIPHER_des¸ùti⁄
(
cùhî
, &
buf
[1], 128);

1325 
s
 = &
buf
[1], 
d
 = buf; *s; s++) {

1326 i‡(*
s
 =' ' && *
d
 == ' ') {

1330 i‡(*
s
 =
LF
 || *†=
CR
) {

1334 *++
d
 = *
s
;

1337 i‡(*
d
 != ' ') {

1338 
d
++;

1341 *
d
 = '\0';

1343 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1345 
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
), &
buf
[1]);

1347 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

1348 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1353 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1359 
c
->
s¶
->
h™dshaked
 = 1;

1361 
c
->
ªcv
 = 
ngx_s¶_ªcv
;

1362 
c
->
£nd
 = 
ngx_s¶_wrôe
;

1363 
c
->
ªcv_chaö
 = 
ngx_s¶_ªcv_chaö
;

1364 
c
->
£nd_chaö
 = 
ngx_s¶_£nd_chaö
;

1366 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100000L

1367 #ifde‡
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS


1370 i‡(
c
->
s¶
->
c⁄√˘i⁄
->
s3
 && 
	`SSL_is_£rvî
(c->ssl->connection)) {

1371 
c
->
s¶
->
c⁄√˘i⁄
->
s3
->
Êags
 |
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
;

1377  
NGX_OK
;

1380 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1382 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1384 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1385 
c
->
ªad
->
ªady
 = 0;

1386 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1387 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1389 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1390  
NGX_ERROR
;

1393 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1394  
NGX_ERROR
;

1397  
NGX_AGAIN
;

1400 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1401 
c
->
wrôe
->
ªady
 = 0;

1402 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1403 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1405 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1406  
NGX_ERROR
;

1409 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1410  
NGX_ERROR
;

1413  
NGX_AGAIN
;

1416 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1418 
c
->
s¶
->
no_waô_shutdown
 = 1;

1419 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1420 
c
->
ªad
->
eof
 = 1;

1422 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

1423 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

1426  
NGX_ERROR
;

1429 
c
->
ªad
->
îr‹
 = 1;

1431 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_do_handshake() failed");

1433  
NGX_ERROR
;

1434 
	}
}

1438 
	$ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
)

1440 
ngx_c⁄√˘i⁄_t
 *
c
;

1442 
c
 = 
ev
->
d©a
;

1444 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1445 "SSL h™dshakêh™dÀr: %d", 
ev
->
wrôe
);

1447 i‡(
ev
->
timedout
) {

1448 
c
->
s¶
->
	`h™dÀr
(c);

1452 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

1456 
c
->
s¶
->
	`h™dÀr
(c);

1457 
	}
}

1460 
ssize_t


1461 
	$ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
)

1463 
u_ch¨
 *
œ°
;

1464 
ssize_t
 
n
, 
byãs
, 
size
;

1465 
ngx_buf_t
 *
b
;

1467 
byãs
 = 0;

1469 
b
 = 
˛
->
buf
;

1470 
œ°
 = 
b
->last;

1473 
size
 = 
b
->
íd
 - 
œ°
;

1475 i‡(
limô
) {

1476 i‡(
byãs
 >
limô
) {

1477  
byãs
;

1480 i‡(
byãs
 + 
size
 > 
limô
) {

1481 
size
 = (
ssize_t
Ë(
limô
 - 
byãs
);

1485 
n
 = 
	`ngx_s¶_ªcv
(
c
, 
œ°
, 
size
);

1487 i‡(
n
 > 0) {

1488 
œ°
 +
n
;

1489 
byãs
 +
n
;

1491 i‡(
œ°
 =
b
->
íd
) {

1492 
˛
 = cl->
√xt
;

1494 i‡(
˛
 =
NULL
) {

1495  
byãs
;

1498 
b
 = 
˛
->
buf
;

1499 
œ°
 = 
b
->last;

1505 i‡(
byãs
) {

1507 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1508 
c
->
ªad
->
ªady
 = 1;

1511  
byãs
;

1514  
n
;

1516 
	}
}

1519 
ssize_t


1520 
	$ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

1522 
n
, 
byãs
;

1524 i‡(
c
->
s¶
->
œ°
 =
NGX_ERROR
) {

1525 
c
->
ªad
->
îr‹
 = 1;

1526  
NGX_ERROR
;

1529 i‡(
c
->
s¶
->
œ°
 =
NGX_DONE
) {

1530 
c
->
ªad
->
ªady
 = 0;

1531 
c
->
ªad
->
eof
 = 1;

1535 
byãs
 = 0;

1537 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1546 
n
 = 
	`SSL_ªad
(
c
->
s¶
->
c⁄√˘i⁄
, 
buf
, 
size
);

1548 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_ªad: %d", 
n
);

1550 i‡(
n
 > 0) {

1551 
byãs
 +
n
;

1554 
c
->
s¶
->
œ°
 = 
	`ngx_s¶_h™dÀ_ªcv
(c, 
n
);

1556 i‡(
c
->
s¶
->
œ°
 =
NGX_OK
) {

1558 
size
 -
n
;

1560 i‡(
size
 == 0) {

1561 
c
->
ªad
->
ªady
 = 1;

1562  
byãs
;

1565 
buf
 +
n
;

1570 i‡(
byãs
) {

1571 i‡(
c
->
s¶
->
œ°
 !
NGX_AGAIN
) {

1572 
c
->
ªad
->
ªady
 = 1;

1575  
byãs
;

1578 
c
->
s¶
->
œ°
) {

1580 
NGX_DONE
:

1581 
c
->
ªad
->
ªady
 = 0;

1582 
c
->
ªad
->
eof
 = 1;

1585 
NGX_ERROR
:

1586 
c
->
ªad
->
îr‹
 = 1;

1590 
NGX_AGAIN
:

1591  
c
->
s¶
->
œ°
;

1594 
	}
}

1597 
ngx_öt_t


1598 
	$ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
)

1600 
s¶îr
;

1601 
ngx_îr_t
 
îr
;

1603 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

1610 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
c
->
log
, 0, "SSLÑenegotiation disabled");

1612 
	`ERR_≥ek_îr‹
()) {

1613 
	`ngx_s¶_îr‹
(
NGX_LOG_DEBUG
, 
c
->
log
, 0,

1617 
	`ERR_˛ór_îr‹
();

1619 
c
->
s¶
->
no_waô_shutdown
 = 1;

1620 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1622  
NGX_ERROR
;

1625 i‡(
n
 > 0) {

1627 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
) {

1629 
c
->
wrôe
->
h™dÀr
 = c->
s¶
->
ßved_wrôe_h™dÀr
;

1630 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = 
NULL
;

1631 
c
->
wrôe
->
ªady
 = 1;

1633 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1634  
NGX_ERROR
;

1637 
	`ngx_po°_evít
(
c
->
wrôe
, &
ngx_po°ed_evíts
);

1640  
NGX_OK
;

1643 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1645 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1647 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1649 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1650 
c
->
ªad
->
ªady
 = 0;

1651  
NGX_AGAIN
;

1654 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1656 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1659 
c
->
wrôe
->
ªady
 = 0;

1661 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1662  
NGX_ERROR
;

1669 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
 =
NULL
) {

1670 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = c->
wrôe
->
h™dÀr
;

1671 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_wrôe_h™dÀr
;

1674  
NGX_AGAIN
;

1677 
c
->
s¶
->
no_waô_shutdown
 = 1;

1678 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1680 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

1681 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1683  
NGX_DONE
;

1686 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_read() failed");

1688  
NGX_ERROR
;

1689 
	}
}

1693 
	$ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

1695 
ngx_c⁄√˘i⁄_t
 *
c
;

1697 
c
 = 
wev
->
d©a
;

1699 
c
->
ªad
->
	`h™dÀr
(c->read);

1700 
	}
}

1711 
ngx_chaö_t
 *

1712 
	$ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

1714 
n
;

1715 
ngx_uöt_t
 
Êush
;

1716 
ssize_t
 
£nd
, 
size
;

1717 
ngx_buf_t
 *
buf
;

1719 i‡(!
c
->
s¶
->
buf„r
) {

1721 
ö
) {

1722 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1723 
ö
 = in->
√xt
;

1727 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
ö
->
buf
->
pos
, in->buf->
œ°
 - in->buf->pos);

1729 i‡(
n
 =
NGX_ERROR
) {

1730  
NGX_CHAIN_ERROR
;

1733 i‡(
n
 =
NGX_AGAIN
) {

1734  
ö
;

1737 
ö
->
buf
->
pos
 +
n
;

1739 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1740 
ö
 = in->
√xt
;

1744  
ö
;

1750 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
)) {

1751 
limô
 = 
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
;

1754 
buf
 = 
c
->
s¶
->buf;

1756 i‡(
buf
 =
NULL
) {

1757 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, c->
s¶
->
buf„r_size
);

1758 i‡(
buf
 =
NULL
) {

1759  
NGX_CHAIN_ERROR
;

1762 
c
->
s¶
->
buf
 = buf;

1765 i‡(
buf
->
°¨t
 =
NULL
) {

1766 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, c->
s¶
->
buf„r_size
);

1767 i‡(
buf
->
°¨t
 =
NULL
) {

1768  
NGX_CHAIN_ERROR
;

1771 
buf
->
pos
 = buf->
°¨t
;

1772 
buf
->
œ°
 = buf->
°¨t
;

1773 
buf
->
íd
 = buf->
°¨t
 + 
c
->
s¶
->
buf„r_size
;

1776 
£nd
 = 
buf
->
œ°
 - buf->
pos
;

1777 
Êush
 = (
ö
 =
NULL
Ë? 1 : 
buf
->flush;

1781 
ö
 && 
buf
->
œ°
 < buf->
íd
 && 
£nd
 < 
limô
) {

1782 i‡(
ö
->
buf
->
œ°_buf
 || in->buf->
Êush
) {

1783 
Êush
 = 1;

1786 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1787 
ö
 = in->
√xt
;

1791 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1793 i‡(
size
 > 
buf
->
íd
 - buf->
œ°
) {

1794 
size
 = 
buf
->
íd
 - buf->
œ°
;

1797 i‡(
£nd
 + 
size
 > 
limô
) {

1798 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

1801 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1802 "SSL bu‡c›y: %z", 
size
);

1804 
	`ngx_mem˝y
(
buf
->
œ°
, 
ö
->buf->
pos
, 
size
);

1806 
buf
->
œ°
 +
size
;

1807 
ö
->
buf
->
pos
 +
size
;

1808 
£nd
 +
size
;

1810 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1811 
ö
 = in->
√xt
;

1815 i‡(!
Êush
 && 
£nd
 < 
limô
 && 
buf
->
œ°
 < buf->
íd
) {

1819 
size
 = 
buf
->
œ°
 - buf->
pos
;

1821 i‡(
size
 == 0) {

1822 
buf
->
Êush
 = 0;

1823 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1824  
ö
;

1827 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
buf
->
pos
, 
size
);

1829 i‡(
n
 =
NGX_ERROR
) {

1830  
NGX_CHAIN_ERROR
;

1833 i‡(
n
 =
NGX_AGAIN
) {

1837 
buf
->
pos
 +
n
;

1839 i‡(
n
 < 
size
) {

1843 
Êush
 = 0;

1845 
buf
->
pos
 = buf->
°¨t
;

1846 
buf
->
œ°
 = buf->
°¨t
;

1848 i‡(
ö
 =
NULL
 || 
£nd
 =
limô
) {

1853 
buf
->
Êush
 = flush;

1855 i‡(
buf
->
pos
 < buf->
œ°
) {

1856 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1859 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1862  
ö
;

1863 
	}
}

1866 
ssize_t


1867 
	$ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
)

1869 
n
, 
s¶îr
;

1870 
ngx_îr_t
 
îr
;

1872 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1874 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÅÿwrôe: %uz", 
size
);

1876 
n
 = 
	`SSL_wrôe
(
c
->
s¶
->
c⁄√˘i⁄
, 
d©a
, 
size
);

1878 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_wrôe: %d", 
n
);

1880 i‡(
n
 > 0) {

1882 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
) {

1884 
c
->
ªad
->
h™dÀr
 = c->
s¶
->
ßved_ªad_h™dÀr
;

1885 
c
->
s¶
->
ßved_ªad_h™dÀr
 = 
NULL
;

1886 
c
->
ªad
->
ªady
 = 1;

1888 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1889  
NGX_ERROR
;

1892 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

1895 
c
->
£¡
 +
n
;

1897  
n
;

1900 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1902 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1904 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1906 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1907 
c
->
wrôe
->
ªady
 = 0;

1908  
NGX_AGAIN
;

1911 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1913 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1916 
c
->
ªad
->
ªady
 = 0;

1918 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1919  
NGX_ERROR
;

1927 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
 =
NULL
) {

1928 
c
->
s¶
->
ßved_ªad_h™dÀr
 = c->
ªad
->
h™dÀr
;

1929 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_ªad_h™dÀr
;

1932  
NGX_AGAIN
;

1935 
c
->
s¶
->
no_waô_shutdown
 = 1;

1936 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1937 
c
->
wrôe
->
îr‹
 = 1;

1939 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_write() failed");

1941  
NGX_ERROR
;

1942 
	}
}

1946 
	$ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1948 
ngx_c⁄√˘i⁄_t
 *
c
;

1950 
c
 = 
ªv
->
d©a
;

1952 
c
->
wrôe
->
	`h™dÀr
(c->write);

1953 
	}
}

1957 
	$ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
)

1959 i‡(
c
->
s¶
->
buf
 && c->s¶->buf->
°¨t
) {

1960 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, c->
s¶
->
buf
->
°¨t
Ë=
NGX_OK
) {

1961 
c
->
s¶
->
buf
->
°¨t
 = 
NULL
;

1964 
	}
}

1967 
ngx_öt_t


1968 
	$ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
)

1970 
n
, 
s¶îr
, 
mode
;

1971 
ngx_îr_t
 
îr
;

1973 i‡(
	`SSL_ö_öô
(
c
->
s¶
->
c⁄√˘i⁄
)) {

1980 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1981 
c
->
s¶
 = 
NULL
;

1983  
NGX_OK
;

1986 i‡(
c
->
timedout
) {

1987 
mode
 = 
SSL_RECEIVED_SHUTDOWN
|
SSL_SENT_SHUTDOWN
;

1988 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1991 
mode
 = 
	`SSL_gë_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1993 i‡(
c
->
s¶
->
no_waô_shutdown
) {

1994 
mode
 |
SSL_RECEIVED_SHUTDOWN
;

1997 i‡(
c
->
s¶
->
no_£nd_shutdown
) {

1998 
mode
 |
SSL_SENT_SHUTDOWN
;

2001 i‡(
c
->
s¶
->
no_waô_shutdown
 && c->s¶->
no_£nd_shutdown
) {

2002 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

2006 
	`SSL_£t_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 
mode
);

2008 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

2010 
n
 = 
	`SSL_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

2012 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_shutdown: %d", 
n
);

2014 
s¶îr
 = 0;

2018 i‡(
n
 !1 && 
	`ERR_≥ek_îr‹
()) {

2019 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

2021 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2022 "SSL_gë_îr‹: %d", 
s¶îr
);

2025 i‡(
n
 =1 || 
s¶îr
 =0 || s¶î∏=
SSL_ERROR_ZERO_RETURN
) {

2026 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

2027 
c
->
s¶
 = 
NULL
;

2029  
NGX_OK
;

2032 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
 || s¶î∏=
SSL_ERROR_WANT_WRITE
) {

2033 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

2034 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

2036 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

2037  
NGX_ERROR
;

2040 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

2041  
NGX_ERROR
;

2044 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

2045 
	`ngx_add_timî
(
c
->
ªad
, 30000);

2048  
NGX_AGAIN
;

2051 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

2053 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_shutdown() failed");

2055 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

2056 
c
->
s¶
 = 
NULL
;

2058  
NGX_ERROR
;

2059 
	}
}

2063 
	$ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
)

2065 
ngx_c⁄√˘i⁄_t
 *
c
;

2066 
ngx_c⁄√˘i⁄_h™dÀr_±
 
h™dÀr
;

2068 
c
 = 
ev
->
d©a
;

2069 
h™dÀr
 = 
c
->
s¶
->handler;

2071 i‡(
ev
->
timedout
) {

2072 
c
->
timedout
 = 1;

2075 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "SSL shutdown handler");

2077 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

2081 
	`h™dÀr
(
c
);

2082 
	}
}

2086 
	$ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
, 
ngx_îr_t
 
îr
,

2087 *
ãxt
)

2089 
n
;

2090 
ngx_uöt_t
 
Àvñ
;

2092 
Àvñ
 = 
NGX_LOG_CRIT
;

2094 i‡(
s¶îr
 =
SSL_ERROR_SYSCALL
) {

2096 i‡(
îr
 =
NGX_ECONNRESET


2097 || 
îr
 =
NGX_EPIPE


2098 || 
îr
 =
NGX_ENOTCONN


2099 || 
îr
 =
NGX_ETIMEDOUT


2100 || 
îr
 =
NGX_ECONNREFUSED


2101 || 
îr
 =
NGX_ENETDOWN


2102 || 
îr
 =
NGX_ENETUNREACH


2103 || 
îr
 =
NGX_EHOSTDOWN


2104 || 
îr
 =
NGX_EHOSTUNREACH
)

2106 
c
->
log_îr‹
) {

2108 
NGX_ERROR_IGNORE_ECONNRESET
:

2109 
NGX_ERROR_INFO
:

2110 
Àvñ
 = 
NGX_LOG_INFO
;

2113 
NGX_ERROR_ERR
:

2114 
Àvñ
 = 
NGX_LOG_ERR
;

2122 } i‡(
s¶îr
 =
SSL_ERROR_SSL
) {

2124 
n
 = 
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
());

2127 i‡(
n
 =
SSL_R_BAD_CHANGE_CIPHER_SPEC


2128 || 
n
 =
SSL_R_BLOCK_CIPHER_PAD_IS_WRONG


2129 || 
n
 =
SSL_R_DIGEST_CHECK_FAILED


2130 || 
n
 =
SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST


2131 || 
n
 =
SSL_R_EXCESSIVE_MESSAGE_SIZE


2132 || 
n
 =
SSL_R_HTTPS_PROXY_REQUEST


2133 || 
n
 =
SSL_R_HTTP_REQUEST


2134 || 
n
 =
SSL_R_LENGTH_MISMATCH


2135 #ifde‡
SSL_R_NO_CIPHERS_PASSED


2136 || 
n
 =
SSL_R_NO_CIPHERS_PASSED


2138 || 
n
 =
SSL_R_NO_CIPHERS_SPECIFIED


2139 || 
n
 =
SSL_R_NO_COMPRESSION_SPECIFIED


2140 || 
n
 =
SSL_R_NO_SHARED_CIPHER


2141 || 
n
 =
SSL_R_RECORD_LENGTH_MISMATCH


2142 #ifde‡
SSL_R_PARSE_TLSEXT


2143 || 
n
 =
SSL_R_PARSE_TLSEXT


2145 || 
n
 =
SSL_R_UNEXPECTED_MESSAGE


2146 || 
n
 =
SSL_R_UNEXPECTED_RECORD


2147 || 
n
 =
SSL_R_UNKNOWN_ALERT_TYPE


2148 || 
n
 =
SSL_R_UNKNOWN_PROTOCOL


2149 || 
n
 =
SSL_R_UNSUPPORTED_PROTOCOL


2150 || 
n
 =
SSL_R_WRONG_VERSION_NUMBER


2151 || 
n
 =
SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC


2152 #ifde‡
SSL_R_RENEGOTIATE_EXT_TOO_LONG


2153 || 
n
 =
SSL_R_RENEGOTIATE_EXT_TOO_LONG


2154 || 
n
 =
SSL_R_RENEGOTIATION_ENCODING_ERR


2155 || 
n
 =
SSL_R_RENEGOTIATION_MISMATCH


2157 #ifde‡
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


2158 || 
n
 =
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


2160 #ifde‡
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


2161 || 
n
 =
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


2163 #ifde‡
SSL_R_INAPPROPRIATE_FALLBACK


2164 || 
n
 =
SSL_R_INAPPROPRIATE_FALLBACK


2166 #ifde‡
SSL_R_VERSION_TOO_LOW


2167 || 
n
 =
SSL_R_VERSION_TOO_LOW


2169 || 
n
 == 1000

2170 #ifde‡
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


2171 || 
n
 =
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


2172 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_RECORD_MAC


2173 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPTION_FAILED


2174 || 
n
 =
SSL_R_TLSV1_ALERT_RECORD_OVERFLOW


2175 || 
n
 =
SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE


2176 || 
n
 =
SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE


2177 || 
n
 =
SSL_R_SSLV3_ALERT_NO_CERTIFICATE


2178 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_CERTIFICATE


2179 || 
n
 =
SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE


2180 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED


2181 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED


2182 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN


2183 || 
n
 =
SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER


2184 || 
n
 =
SSL_R_TLSV1_ALERT_UNKNOWN_CA


2185 || 
n
 =
SSL_R_TLSV1_ALERT_ACCESS_DENIED


2186 || 
n
 =
SSL_R_TLSV1_ALERT_DECODE_ERROR


2187 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPT_ERROR


2188 || 
n
 =
SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION


2189 || 
n
 =
SSL_R_TLSV1_ALERT_PROTOCOL_VERSION


2190 || 
n
 =
SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY


2191 || 
n
 =
SSL_R_TLSV1_ALERT_INTERNAL_ERROR


2192 || 
n
 =
SSL_R_TLSV1_ALERT_USER_CANCELLED


2193 || 
n
 =
SSL_R_TLSV1_ALERT_NO_RENEGOTIATION


2197 
c
->
log_îr‹
) {

2199 
NGX_ERROR_IGNORE_ECONNRESET
:

2200 
NGX_ERROR_INFO
:

2201 
Àvñ
 = 
NGX_LOG_INFO
;

2204 
NGX_ERROR_ERR
:

2205 
Àvñ
 = 
NGX_LOG_ERR
;

2214 
	`ngx_s¶_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

2215 
	}
}

2219 
	$ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
)

2221 
	`ERR_≥ek_îr‹
()) {

2222 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "ignoring stale global SSLÉrror");

2225 
	`ERR_˛ór_îr‹
();

2226 
	}
}

2229 
ngx_cde˛


2230 
	$ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, *
fmt
, ...)

2232 
Êags
;

2233 
u_l⁄g
 
n
;

2234 
va_li°
 
¨gs
;

2235 
u_ch¨
 *
p
, *
œ°
;

2236 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

2237 c⁄° *
d©a
;

2239 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

2241 
	`va_°¨t
(
¨gs
, 
fmt
);

2242 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
 - 1, 
fmt
, 
¨gs
);

2243 
	`va_íd
(
¨gs
);

2245 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (SSL:", 
œ°
 -Ö);

2249 
n
 = 
	`ERR_≥ek_îr‹_löe_d©a
(
NULL
, NULL, &
d©a
, &
Êags
);

2251 i‡(
n
 == 0) {

2257 i‡(
p
 >
œ°
 - 1) {

2258 
√xt
;

2261 *
p
++ = ' ';

2263 
	`ERR_îr‹_°rög_n
(
n
, (*Ë
p
, 
œ°
 -Ö);

2265 
p
 < 
œ°
 && *p) {

2266 
p
++;

2269 i‡(
p
 < 
œ°
 && *
d©a
 && (
Êags
 & 
ERR_TXT_STRING
)) {

2270 *
p
++ = ':';

2271 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
d©a
, 
œ°
 -Ö);

2274 
√xt
:

2276 (Ë
	`ERR_gë_îr‹
();

2279 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%*s)", 
p
 - 
îr°r
,Érrstr);

2280 
	}
}

2283 
ngx_öt_t


2284 
	$ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

2285 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
)

2287 
ˇche_mode
;

2289 
	`SSL_CTX_£t_timeout
(
s¶
->
˘x
, (Ë
timeout
);

2291 i‡(
	`ngx_s¶_£ssi⁄_id_c⁄ãxt
(
s¶
, 
£ss_˘x
Ë!
NGX_OK
) {

2292  
NGX_ERROR
;

2295 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_SCACHE
) {

2296 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
SSL_SESS_CACHE_OFF
);

2297  
NGX_OK
;

2300 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NONE_SCACHE
) {

2313 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

2314 
SSL_SESS_CACHE_SERVER


2315 |
SSL_SESS_CACHE_NO_AUTO_CLEAR


2316 |
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

2318 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 1);

2320  
NGX_OK
;

2323 
ˇche_mode
 = 
SSL_SESS_CACHE_SERVER
;

2325 i‡(
shm_z⁄e
 && 
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_BUILTIN_SCACHE
) {

2326 
ˇche_mode
 |
SSL_SESS_CACHE_NO_INTERNAL
;

2329 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
ˇche_mode
);

2331 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_NO_BUILTIN_SCACHE
) {

2333 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_DFLT_BUILTIN_SCACHE
) {

2334 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 
buûtö_£ssi⁄_ˇche
);

2338 i‡(
shm_z⁄e
) {

2339 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_£ssi⁄
);

2340 
	`SSL_CTX_£ss_£t_gë_cb
(
s¶
->
˘x
, 
ngx_s¶_gë_ˇched_£ssi⁄
);

2341 
	`SSL_CTX_£ss_£t_ªmove_cb
(
s¶
->
˘x
, 
ngx_s¶_ªmove_£ssi⁄
);

2343 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
, 
shm_z⁄e
)

2346 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2348  
NGX_ERROR
;

2352  
NGX_OK
;

2353 
	}
}

2356 
ngx_öt_t


2357 
	$ngx_s¶_£ssi⁄_id_c⁄ãxt
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
)

2359 
n
, 
i
;

2360 
X509
 *
˚π
;

2361 
X509_NAME
 *
«me
;

2362 
EVP_MD_CTX
 *
md
;

2363 
Àn
;

2364 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

2365 
u_ch¨
 
buf
[
EVP_MAX_MD_SIZE
];

2372 
md
 = 
	`EVP_MD_CTX_¸óã
();

2373 i‡(
md
 =
NULL
) {

2374  
NGX_ERROR
;

2377 i‡(
	`EVP_Dige°Inô_ex
(
md
, 
	`EVP_sha1
(), 
NULL
) == 0) {

2378 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2380 
Áûed
;

2383 i‡(
	`EVP_Dige°Upd©e
(
md
, 
£ss_˘x
->
d©a
, sess_˘x->
Àn
) == 0) {

2384 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2386 
Áûed
;

2389 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

2390 
˚π
;

2391 
˚π
 = 
	`X509_gë_ex_d©a
(˚π, 
ngx_s¶_√xt_˚πifiˇã_ödex
))

2393 i‡(
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
buf
, &
Àn
) == 0) {

2394 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2396 
Áûed
;

2399 i‡(
	`EVP_Dige°Upd©e
(
md
, 
buf
, 
Àn
) == 0) {

2400 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2402 
Áûed
;

2406 
li°
 = 
	`SSL_CTX_gë_˛õ¡_CA_li°
(
s¶
->
˘x
);

2408 i‡(
li°
 !
NULL
) {

2409 
n
 = 
	`sk_X509_NAME_num
(
li°
);

2411 
i
 = 0; i < 
n
; i++) {

2412 
«me
 = 
	`sk_X509_NAME_vÆue
(
li°
, 
i
);

2414 i‡(
	`X509_NAME_dige°
(
«me
, 
	`EVP_sha1
(), 
buf
, &
Àn
) == 0) {

2415 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2417 
Áûed
;

2420 i‡(
	`EVP_Dige°Upd©e
(
md
, 
buf
, 
Àn
) == 0) {

2421 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2423 
Áûed
;

2428 i‡(
	`EVP_Dige°FöÆ_ex
(
md
, 
buf
, &
Àn
) == 0) {

2429 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2431 
Áûed
;

2434 
	`EVP_MD_CTX_de°roy
(
md
);

2436 i‡(
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
s¶
->
˘x
, 
buf
, 
Àn
) == 0) {

2437 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2439  
NGX_ERROR
;

2442  
NGX_OK
;

2444 
Áûed
:

2446 
	`EVP_MD_CTX_de°roy
(
md
);

2448  
NGX_ERROR
;

2449 
	}
}

2452 
ngx_öt_t


2453 
	$ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

2455 
size_t
 
Àn
;

2456 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2457 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2459 i‡(
d©a
) {

2460 
shm_z⁄e
->
d©a
 = data;

2461  
NGX_OK
;

2464 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2466 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

2467 
shm_z⁄e
->
d©a
 = 
shpoﬁ
->data;

2468  
NGX_OK
;

2471 
ˇche
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_s¶_£ssi⁄_ˇche_t
));

2472 i‡(
ˇche
 =
NULL
) {

2473  
NGX_ERROR
;

2476 
shpoﬁ
->
d©a
 = 
ˇche
;

2477 
shm_z⁄e
->
d©a
 = 
ˇche
;

2479 
	`ngx_rbåì_öô
(&
ˇche
->
£ssi⁄_rbåì
, &ˇche->
£¡öñ
,

2480 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
);

2482 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

2484 
Àn
 = (" i¿SSL sessi⁄ sh¨ed cachê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

2486 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

2487 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

2488  
NGX_ERROR
;

2491 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in SSL session shared cache \"%V\"%Z",

2492 &
shm_z⁄e
->
shm
.
«me
);

2494 
shpoﬁ
->
log_nomem
 = 0;

2496  
NGX_OK
;

2497 
	}
}

2518 
	$ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2520 
Àn
;

2521 
u_ch¨
 *
p
, *
id
, *
ˇched_£ss
, *
£ssi⁄_id
;

2522 
uöt32_t
 
hash
;

2523 
SSL_CTX
 *
s¶_˘x
;

2524 
£ssi⁄_id_Àngth
;

2525 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2526 
ngx_c⁄√˘i⁄_t
 *
c
;

2527 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2528 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2529 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2530 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

2532 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

2536 i‡(
Àn
 > (Ë
NGX_SSL_MAX_SESSION_SIZE
) {

2540 
p
 = 
buf
;

2541 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

2543 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2545 
s¶_˘x
 = 
c
->
s¶
->
£ssi⁄_˘x
;

2546 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2548 
ˇche
 = 
shm_z⁄e
->
d©a
;

2549 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2551 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2554 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 1);

2556 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

2558 i‡(
ˇched_£ss
 =
NULL
) {

2562 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2564 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

2566 i‡(
ˇched_£ss
 =
NULL
) {

2567 
£ss_id
 = 
NULL
;

2568 
Áûed
;

2572 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

2574 i‡(
£ss_id
 =
NULL
) {

2578 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2580 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

2582 i‡(
£ss_id
 =
NULL
) {

2583 
Áûed
;

2587 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

2589 
£ssi⁄_id
 = (
u_ch¨
 *Ë
	`SSL_SESSION_gë_id
(
£ss
, &
£ssi⁄_id_Àngth
);

2593 
£ssi⁄_id
 = 
£ss
->session_id;

2594 
£ssi⁄_id_Àngth
 = 
£ss
->session_id_length;

2598 #i‡(
NGX_PTR_SIZE
 == 8)

2600 
id
 = 
£ss_id
->sess_id;

2604 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ssi⁄_id_Àngth
);

2606 i‡(
id
 =
NULL
) {

2610 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2612 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ssi⁄_id_Àngth
);

2614 i‡(
id
 =
NULL
) {

2615 
Áûed
;

2621 
	`ngx_mem˝y
(
ˇched_£ss
, 
buf
, 
Àn
);

2623 
	`ngx_mem˝y
(
id
, 
£ssi⁄_id
, 
£ssi⁄_id_Àngth
);

2625 
hash
 = 
	`ngx_¸c32_sh‹t
(
£ssi⁄_id
, 
£ssi⁄_id_Àngth
);

2627 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2629 
hash
, 
£ssi⁄_id_Àngth
, 
Àn
);

2631 
£ss_id
->
node
.
key
 = 
hash
;

2632 
£ss_id
->
node
.
d©a
 = (
u_ch¨
Ë
£ssi⁄_id_Àngth
;

2633 
£ss_id
->
id
 = id;

2634 
£ss_id
->
Àn
 =Üen;

2635 
£ss_id
->
£ssi⁄
 = 
ˇched_£ss
;

2637 
£ss_id
->
expúe
 = 
	`ngx_time
(Ë+ 
	`SSL_CTX_gë_timeout
(
s¶_˘x
);

2639 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
£ss_id
->
queue
);

2641 
	`ngx_rbåì_ö£π
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2643 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2647 
Áûed
:

2649 i‡(
ˇched_£ss
) {

2650 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
ˇched_£ss
);

2653 i‡(
£ss_id
) {

2654 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2657 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2659 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2660 "couldÇŸáŒoˇãÇew sessi⁄%s", 
shpoﬁ
->
log_˘x
);

2663 
	}
}

2666 
ngx_s¶_£ssi⁄_t
 *

2667 
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

2668 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100003L

2671 
u_ch¨
 *
id
, 
Àn
, *
c›y
)

2673 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

2676 
u_ch¨
 *
	gp
;

2677 
uöt32_t
 
	ghash
;

2678 
ngx_öt_t
 
	grc
;

2679 
ngx_shm_z⁄e_t
 *
	gshm_z⁄e
;

2680 
ngx_¶ab_poﬁ_t
 *
	gshpoﬁ
;

2681 
ngx_rbåì_node_t
 *
	gnode
, *
	g£¡öñ
;

2682 
ngx_s¶_£ssi⁄_t
 *
	g£ss
;

2683 
ngx_s¶_£ss_id_t
 *
	g£ss_id
;

2684 
ngx_s¶_£ssi⁄_ˇche_t
 *
	gˇche
;

2685 
u_ch¨
 
	gbuf
[
NGX_SSL_MAX_SESSION_SIZE
];

2686 
ngx_c⁄√˘i⁄_t
 *
	gc
;

2688 
	ghash
 = 
ngx_¸c32_sh‹t
((
u_ch¨
 *Ë(
uöçå_t
Ë
id
, (
size_t
Ë
Àn
);

2689 *
	gc›y
 = 0;

2691 
	gc
 = 
ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2693 
ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2694 "s¶ gë sessi⁄: %08XD:%d", 
hash
, 
Àn
);

2696 
	gshm_z⁄e
 = 
SSL_CTX_gë_ex_d©a
(
c
->
s¶
->
£ssi⁄_˘x
,

2697 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2699 
	gˇche
 = 
shm_z⁄e
->
d©a
;

2701 
	g£ss
 = 
NULL
;

2703 
	gshpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2705 
ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2707 
	gnode
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2708 
	g£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.
£¡öñ
;

2710 
	gnode
 !
£¡öñ
) {

2712 i‡(
hash
 < 
node
->
key
) {

2713 
node
 =Çode->
À·
;

2717 i‡(
	ghash
 > 
	gnode
->
	gkey
) {

2718 
	gnode
 = 
node
->
right
;

2724 
	g£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2726 
	grc
 = 
ngx_memn2cmp
((
u_ch¨
 *Ë(
uöçå_t
Ë
id
, 
£ss_id
->id,

2727 (
size_t
Ë
Àn
, (size_tË
node
->
d©a
);

2729 i‡(
	grc
 == 0) {

2731 i‡(
£ss_id
->
expúe
 > 
ngx_time
()) {

2732 
ngx_mem˝y
(
buf
, 
£ss_id
->
£ssi⁄
, sess_id->
Àn
);

2734 
ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2736 
	gp
 = 
buf
;

2737 
	g£ss
 = 
d2i_SSL_SESSION
(
NULL
, &
p
, 
£ss_id
->
Àn
);

2739  
	g£ss
;

2742 
ngx_queue_ªmove
(&
£ss_id
->
queue
);

2744 
ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2746 
ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2747 #i‡(
NGX_PTR_SIZE
 == 4)

2748 
ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2750 
ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2752 
	g£ss
 = 
NULL
;

2754 
	gd⁄e
;

2757 
	gnode
 = (
rc
 < 0Ë? 
node
->
À·
 :Çode->
right
;

2760 
	gd⁄e
:

2762 
ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2764  
	g£ss
;

2769 
	$ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2771 
	`SSL_CTX_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2773 
	`ngx_s¶_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2774 
	}
}

2778 
	$ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2780 
u_ch¨
 *
id
;

2781 
uöt32_t
 
hash
;

2782 
ngx_öt_t
 
rc
;

2783 
Àn
;

2784 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2785 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2786 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2787 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2788 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2790 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2792 i‡(
shm_z⁄e
 =
NULL
) {

2796 
ˇche
 = 
shm_z⁄e
->
d©a
;

2798 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

2800 
id
 = (
u_ch¨
 *Ë
	`SSL_SESSION_gë_id
(
£ss
, &
Àn
);

2804 
id
 = 
£ss
->
£ssi⁄_id
;

2805 
Àn
 = 
£ss
->
£ssi⁄_id_Àngth
;

2809 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, 
Àn
);

2811 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2812 "s¶Ñemovê£ssi⁄: %08XD:%ud", 
hash
, 
Àn
);

2814 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2816 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2818 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2819 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

2821 
node
 !
£¡öñ
) {

2823 i‡(
hash
 < 
node
->
key
) {

2824 
node
 =Çode->
À·
;

2828 i‡(
hash
 > 
node
->
key
) {

2829 
node
 =Çode->
right
;

2835 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2837 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, 
Àn
, (
size_t
Ë
node
->
d©a
);

2839 i‡(
rc
 == 0) {

2841 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2843 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2845 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2846 #i‡(
NGX_PTR_SIZE
 == 4)

2847 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2849 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2851 
d⁄e
;

2854 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2857 
d⁄e
:

2859 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2860 
	}
}

2864 
	$ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

2865 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
)

2867 
time_t
 
now
;

2868 
ngx_queue_t
 *
q
;

2869 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2871 
now
 = 
	`ngx_time
();

2873 
n
 < 3) {

2875 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

2879 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

2881 
£ss_id
 = 
	`ngx_queue_d©a
(
q
, 
ngx_s¶_£ss_id_t
, 
queue
);

2883 i‡(
n
++ !0 && 
£ss_id
->
expúe
 > 
now
) {

2887 
	`ngx_queue_ªmove
(
q
);

2889 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2890 "expúê£ssi⁄: %08Xi", 
£ss_id
->
node
.
key
);

2892 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2894 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2895 #i‡(
NGX_PTR_SIZE
 == 4)

2896 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2898 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2900 
	}
}

2904 
	$ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2905 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2907 
ngx_rbåì_node_t
 **
p
;

2908 
ngx_s¶_£ss_id_t
 *
£ss_id
, *
£ss_id_ãmp
;

2912 i‡(
node
->
key
 < 
ãmp
->key) {

2914 
p
 = &
ãmp
->
À·
;

2916 } i‡(
node
->
key
 > 
ãmp
->key) {

2918 
p
 = &
ãmp
->
right
;

2922 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2923 
£ss_id_ãmp
 = (
ngx_s¶_£ss_id_t
 *Ë
ãmp
;

2925 
p
 = (
	`ngx_memn2cmp
(
£ss_id
->
id
, 
£ss_id_ãmp
->id,

2926 (
size_t
Ë
node
->
d©a
, (size_tË
ãmp
->data)

2927 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2930 i‡(*
p
 =
£¡öñ
) {

2934 
ãmp
 = *
p
;

2937 *
p
 = 
node
;

2938 
node
->
∑ª¡
 = 
ãmp
;

2939 
node
->
À·
 = 
£¡öñ
;

2940 
node
->
right
 = 
£¡öñ
;

2941 
	`ngx_rbt_ªd
(
node
);

2942 
	}
}

2945 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


2947 
ngx_öt_t


2948 
	$ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
∑ths
)

2950 
u_ch¨
 
buf
[80];

2951 
size_t
 
size
;

2952 
ssize_t
 
n
;

2953 
ngx_°r_t
 *
∑th
;

2954 
ngx_fûe_t
 
fûe
;

2955 
ngx_uöt_t
 
i
;

2956 
ngx_¨øy_t
 *
keys
;

2957 
ngx_fûe_öfo_t
 
fi
;

2958 
ngx_s¶_£ssi⁄_tickë_key_t
 *
key
;

2960 i‡(
∑ths
 =
NULL
) {

2961  
NGX_OK
;

2964 
keys
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 
∑ths
->
√…s
,

2965 (
ngx_s¶_£ssi⁄_tickë_key_t
));

2966 i‡(
keys
 =
NULL
) {

2967  
NGX_ERROR
;

2970 
∑th
 = 
∑ths
->
ñts
;

2971 
i
 = 0; i < 
∑ths
->
√…s
; i++) {

2973 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
[
i
], 1Ë!
NGX_OK
) {

2974  
NGX_ERROR
;

2977 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

2978 
fûe
.
«me
 = 
∑th
[
i
];

2979 
fûe
.
log
 = 
cf
->log;

2981 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

2982 
NGX_FILE_OPEN
, 0);

2984 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

2985 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

2986 
ngx_›í_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2987  
NGX_ERROR
;

2990 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

2991 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

2992 
ngx_fd_öfo_n
 " \"%V\" faûed", &
fûe
.
«me
);

2993 
Áûed
;

2996 
size
 = 
	`ngx_fûe_size
(&
fi
);

2998 i‡(
size
 != 48 && size != 80) {

2999 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3000 "\"%V\" mu° bê48 o∏80 byãs", &
fûe
.
«me
);

3001 
Áûed
;

3004 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
size
, 0);

3006 i‡(
n
 =
NGX_ERROR
) {

3007 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

3008 
ngx_ªad_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

3009 
Áûed
;

3012 i‡((
size_t
Ë
n
 !
size
) {

3013 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

3014 
ngx_ªad_fûe_n
 " \"%V\"Ñeturned only "

3015 "%z byã†ö°ód o‡%uz", &
fûe
.
«me
, 
n
, 
size
);

3016 
Áûed
;

3019 
key
 = 
	`ngx_¨øy_push
(
keys
);

3020 i‡(
key
 =
NULL
) {

3021 
Áûed
;

3024 i‡(
size
 == 48) {

3025 
key
->
size
 = 48;

3026 
	`ngx_mem˝y
(
key
->
«me
, 
buf
, 16);

3027 
	`ngx_mem˝y
(
key
->
´s_key
, 
buf
 + 16, 16);

3028 
	`ngx_mem˝y
(
key
->
hmac_key
, 
buf
 + 32, 16);

3031 
key
->
size
 = 80;

3032 
	`ngx_mem˝y
(
key
->
«me
, 
buf
, 16);

3033 
	`ngx_mem˝y
(
key
->
hmac_key
, 
buf
 + 16, 32);

3034 
	`ngx_mem˝y
(
key
->
´s_key
, 
buf
 + 48, 32);

3037 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

3038 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

3039 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

3043 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_tickë_keys_ödex
, 
keys
)

3046 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

3048  
NGX_ERROR
;

3051 i‡(
	`SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
->
˘x
,

3052 
ngx_s¶_£ssi⁄_tickë_key_ˇŒback
)

3055 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

3062  
NGX_OK
;

3064 
Áûed
:

3066 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

3067 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

3068 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

3071  
NGX_ERROR
;

3072 
	}
}

3076 
	$ngx_s¶_£ssi⁄_tickë_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

3077 *
«me
, *
iv
, 
EVP_CIPHER_CTX
 *
e˘x
,

3078 
HMAC_CTX
 *
h˘x
, 
íc
)

3080 
size_t
 
size
;

3081 
SSL_CTX
 *
s¶_˘x
;

3082 
ngx_uöt_t
 
i
;

3083 
ngx_¨øy_t
 *
keys
;

3084 
ngx_c⁄√˘i⁄_t
 *
c
;

3085 
ngx_s¶_£ssi⁄_tickë_key_t
 *
key
;

3086 c⁄° 
EVP_MD
 *
dige°
;

3087 c⁄° 
EVP_CIPHER
 *
cùhî
;

3088 #i‡(
NGX_DEBUG
)

3089 
u_ch¨
 
buf
[32];

3092 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

3093 
s¶_˘x
 = 
c
->
s¶
->
£ssi⁄_˘x
;

3095 #ifde‡
OPENSSL_NO_SHA256


3096 
dige°
 = 
	`EVP_sha1
();

3098 
dige°
 = 
	`EVP_sha256
();

3101 
keys
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_tickë_keys_ödex
);

3102 i‡(
keys
 =
NULL
) {

3106 
key
 = 
keys
->
ñts
;

3108 i‡(
íc
 == 1) {

3111 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3113 
	`ngx_hex_dump
(
buf
, 
key
[0].
«me
, 16) - buf, buf,

3114 
	`SSL_£ssi⁄_ªu£d
(
s¶_c⁄n
) ? "reused" : "new");

3116 i‡(
key
[0].
size
 == 48) {

3117 
cùhî
 = 
	`EVP_´s_128_cbc
();

3118 
size
 = 16;

3121 
cùhî
 = 
	`EVP_´s_256_cbc
();

3122 
size
 = 32;

3125 i‡(
	`RAND_byãs
(
iv
, 
	`EVP_CIPHER_iv_Àngth
(
cùhî
)) != 1) {

3126 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "RAND_bytes() failed");

3130 i‡(
	`EVP_En¸y±Inô_ex
(
e˘x
, 
cùhî
, 
NULL
, 
key
[0].
´s_key
, 
iv
) != 1) {

3131 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

3136 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

3137 i‡(
	`HMAC_Inô_ex
(
h˘x
, 
key
[0].
hmac_key
, 
size
, 
dige°
, 
NULL
) != 1) {

3138 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "HMAC_Init_ex() failed");

3142 
	`HMAC_Inô_ex
(
h˘x
, 
key
[0].
hmac_key
, 
size
, 
dige°
, 
NULL
);

3145 
	`ngx_mem˝y
(
«me
, 
key
[0].name, 16);

3152 
i
 = 0; i < 
keys
->
√…s
; i++) {

3153 i‡(
	`ngx_memcmp
(
«me
, 
key
[
i
].name, 16) == 0) {

3154 
found
;

3158 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3160 
	`ngx_hex_dump
(
buf
, 
«me
, 16) - buf, buf);

3164 
found
:

3166 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3168 
	`ngx_hex_dump
(
buf
, 
key
[
i
].
«me
, 16) - buf, buf,

3169 (
i
 == 0) ? " (default)" : "");

3171 i‡(
key
[
i
].
size
 == 48) {

3172 
cùhî
 = 
	`EVP_´s_128_cbc
();

3173 
size
 = 16;

3176 
cùhî
 = 
	`EVP_´s_256_cbc
();

3177 
size
 = 32;

3180 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

3181 i‡(
	`HMAC_Inô_ex
(
h˘x
, 
key
[
i
].
hmac_key
, 
size
, 
dige°
, 
NULL
) != 1) {

3182 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "HMAC_Init_ex() failed");

3186 
	`HMAC_Inô_ex
(
h˘x
, 
key
[
i
].
hmac_key
, 
size
, 
dige°
, 
NULL
);

3189 i‡(
	`EVP_De¸y±Inô_ex
(
e˘x
, 
cùhî
, 
NULL
, 
key
[
i
].
´s_key
, 
iv
) != 1) {

3190 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

3195  (
i
 == 0) ? 1 : 2 ;

3197 
	}
}

3201 
ngx_öt_t


3202 
	$ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
∑ths
)

3204 i‡(
∑ths
) {

3205 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

3209  
NGX_OK
;

3210 
	}
}

3216 
	$ngx_s¶_˛ónup_˘x
(*
d©a
)

3218 
ngx_s¶_t
 *
s¶
 = 
d©a
;

3220 
X509
 *
˚π
, *
√xt
;

3222 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

3224 
˚π
) {

3225 
√xt
 = 
	`X509_gë_ex_d©a
(
˚π
, 
ngx_s¶_√xt_˚πifiˇã_ödex
);

3226 
	`X509_‰ì
(
˚π
);

3227 
˚π
 = 
√xt
;

3230 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

3231 
	}
}

3234 
ngx_öt_t


3235 
	$ngx_s¶_check_ho°
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
«me
)

3237 
X509
 *
˚π
;

3239 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3240 i‡(
˚π
 =
NULL
) {

3241  
NGX_ERROR
;

3244 #ifde‡
X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT


3248 i‡(
«me
->
Àn
 == 0) {

3249 
Áûed
;

3252 i‡(
	`X509_check_ho°
(
˚π
, (*Ë
«me
->
d©a
,Çame->
Àn
, 0, 
NULL
) != 1) {

3253 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3255 
Áûed
;

3258 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3261 
found
;

3265 
n
, 
i
;

3266 
X509_NAME
 *
¢ame
;

3267 
ASN1_STRING
 *
°r
;

3268 
X509_NAME_ENTRY
 *
íåy
;

3269 
GENERAL_NAME
 *
Æäame
;

3270 
	`STACK_OF
(
GENERAL_NAME
Ë*
Æäames
;

3277 
Æäames
 = 
	`X509_gë_ext_d2i
(
˚π
, 
NID_subje˘_Æt_«me
, 
NULL
, NULL);

3279 i‡(
Æäames
) {

3280 
n
 = 
	`sk_GENERAL_NAME_num
(
Æäames
);

3282 
i
 = 0; i < 
n
; i++) {

3283 
Æäame
 = 
	`sk_GENERAL_NAME_vÆue
(
Æäames
, 
i
);

3285 i‡(
Æäame
->
ty≥
 !
GEN_DNS
) {

3289 
°r
 = 
Æäame
->
d
.
dNSName
;

3291 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3293 
	`ASN1_STRING_Àngth
(
°r
), 
	`ASN1_STRING_d©a
(str));

3295 i‡(
	`ngx_s¶_check_«me
(
«me
, 
°r
Ë=
NGX_OK
) {

3296 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3298 
	`GENERAL_NAMES_‰ì
(
Æäames
);

3299 
found
;

3303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3306 
	`GENERAL_NAMES_‰ì
(
Æäames
);

3307 
Áûed
;

3316 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

3318 i‡(
¢ame
 =
NULL
) {

3319 
Áûed
;

3322 
i
 = -1;

3324 
i
 = 
	`X509_NAME_gë_ödex_by_NID
(
¢ame
, 
NID_comm⁄Name
, i);

3326 i‡(
i
 < 0) {

3330 
íåy
 = 
	`X509_NAME_gë_íåy
(
¢ame
, 
i
);

3331 
°r
 = 
	`X509_NAME_ENTRY_gë_d©a
(
íåy
);

3333 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3335 
	`ASN1_STRING_Àngth
(
°r
), 
	`ASN1_STRING_d©a
(str));

3337 i‡(
	`ngx_s¶_check_«me
(
«me
, 
°r
Ë=
NGX_OK
) {

3338 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3340 
found
;

3344 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3349 
Áûed
:

3351 
	`X509_‰ì
(
˚π
);

3352  
NGX_ERROR
;

3354 
found
:

3356 
	`X509_‰ì
(
˚π
);

3357  
NGX_OK
;

3358 
	}
}

3361 #i‚de‡
X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT


3363 
ngx_öt_t


3364 
	$ngx_s¶_check_«me
(
ngx_°r_t
 *
«me
, 
ASN1_STRING
 *
∑âîn
)

3366 
u_ch¨
 *
s
, *
p
, *
íd
;

3367 
size_t
 
¶í
, 
∂í
;

3369 
s
 = 
«me
->
d©a
;

3370 
¶í
 = 
«me
->
Àn
;

3372 
p
 = 
	`ASN1_STRING_d©a
(
∑âîn
);

3373 
∂í
 = 
	`ASN1_STRING_Àngth
(
∑âîn
);

3375 i‡(
¶í
 =
∂í
 && 
	`ngx_°∫ˇ£cmp
(
s
, 
p
,Ölen) == 0) {

3376  
NGX_OK
;

3379 i‡(
∂í
 > 2 && 
p
[0] == '*' &&Ö[1] == '.') {

3380 
∂í
 -= 1;

3381 
p
 += 1;

3383 
íd
 = 
s
 + 
¶í
;

3384 
s
 = 
	`ngx_°æchr
(s, 
íd
, '.');

3386 i‡(
s
 =
NULL
) {

3387  
NGX_ERROR
;

3390 
¶í
 = 
íd
 - 
s
;

3392 i‡(
∂í
 =
¶í
 && 
	`ngx_°∫ˇ£cmp
(
s
, 
p
,Ölen) == 0) {

3393  
NGX_OK
;

3397  
NGX_ERROR
;

3398 
	}
}

3403 
ngx_öt_t


3404 
	$ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3406 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

3407  
NGX_OK
;

3408 
	}
}

3411 
ngx_öt_t


3412 
	$ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3414 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_cùhî_«me
(
c
->
s¶
->
c⁄√˘i⁄
);

3415  
NGX_OK
;

3416 
	}
}

3419 
ngx_öt_t


3420 
	$ngx_s¶_gë_cùhîs
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3422 #ifde‡
SSL_CTRL_GET_RAW_CIPHERLIST


3424 
n
, 
i
, 
byãs
;

3425 
size_t
 
Àn
;

3426 
u_ch¨
 *
cùhîs
, *
p
;

3427 c⁄° 
SSL_CIPHER
 *
cùhî
;

3429 
byãs
 = 
	`SSL_gë0_øw_cùhîli°
(
c
->
s¶
->
c⁄√˘i⁄
, 
NULL
);

3430 
n
 = 
	`SSL_gë0_øw_cùhîli°
(
c
->
s¶
->
c⁄√˘i⁄
, &
cùhîs
);

3432 i‡(
n
 <= 0) {

3433 
s
->
Àn
 = 0;

3434  
NGX_OK
;

3437 
Àn
 = 0;

3438 
n
 /
byãs
;

3440 
i
 = 0; i < 
n
; i++) {

3441 
cùhî
 = 
	`SSL_CIPHER_föd
(
c
->
s¶
->
c⁄√˘i⁄
, 
cùhîs
 + 
i
 * 
byãs
);

3443 i‡(
cùhî
) {

3444 
Àn
 +
	`ngx_°æí
(
	`SSL_CIPHER_gë_«me
(
cùhî
));

3447 
Àn
 +("0x"Ë- 1 + 
byãs
 * (("00") - 1);

3450 
Àn
 += (":") - 1;

3453 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3454 i‡(
s
->
d©a
 =
NULL
) {

3455  
NGX_ERROR
;

3458 
p
 = 
s
->
d©a
;

3460 
i
 = 0; i < 
n
; i++) {

3461 
cùhî
 = 
	`SSL_CIPHER_föd
(
c
->
s¶
->
c⁄√˘i⁄
, 
cùhîs
 + 
i
 * 
byãs
);

3463 i‡(
cùhî
) {

3464 
p
 = 
	`ngx_•rötf
’, "%s", 
	`SSL_CIPHER_gë_«me
(
cùhî
));

3467 
p
 = 
	`ngx_•rötf
(p, "0x");

3468 
p
 = 
	`ngx_hex_dump
’, 
cùhîs
 + 
i
 * 
byãs
, bytes);

3471 *
p
++ = ':';

3474 
p
--;

3476 
s
->
Àn
 = 
p
 - s->
d©a
;

3480 
u_ch¨
 
buf
[4096];

3482 i‡(
	`SSL_gë_sh¨ed_cùhîs
(
c
->
s¶
->
c⁄√˘i⁄
, (*Ë
buf
, 4096)

3483 =
NULL
)

3485 
s
->
Àn
 = 0;

3486  
NGX_OK
;

3489 
s
->
Àn
 = 
	`ngx_°æí
(
buf
);

3490 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, s->
Àn
);

3491 i‡(
s
->
d©a
 =
NULL
) {

3492  
NGX_ERROR
;

3495 
	`ngx_mem˝y
(
s
->
d©a
, 
buf
, s->
Àn
);

3499  
NGX_OK
;

3500 
	}
}

3503 
ngx_öt_t


3504 
	$ngx_s¶_gë_curves
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3506 #ifde‡
SSL_CTRL_GET_CURVES


3508 *
curves
, 
n
, 
i
, 
nid
;

3509 
u_ch¨
 *
p
;

3510 
size_t
 
Àn
;

3512 
n
 = 
	`SSL_gë1_curves
(
c
->
s¶
->
c⁄√˘i⁄
, 
NULL
);

3514 i‡(
n
 <= 0) {

3515 
s
->
Àn
 = 0;

3516  
NGX_OK
;

3519 
curves
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * ());

3521 
n
 = 
	`SSL_gë1_curves
(
c
->
s¶
->
c⁄√˘i⁄
, 
curves
);

3522 
Àn
 = 0;

3524 
i
 = 0; i < 
n
; i++) {

3525 
nid
 = 
curves
[
i
];

3527 i‡(
nid
 & 
TLSEXT_nid_unknown
) {

3528 
Àn
 += ("0x0000") - 1;

3531 
Àn
 +
	`ngx_°æí
(
	`OBJ_nid2¢
(
nid
));

3534 
Àn
 += (":") - 1;

3537 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3538 i‡(
s
->
d©a
 =
NULL
) {

3539  
NGX_ERROR
;

3542 
p
 = 
s
->
d©a
;

3544 
i
 = 0; i < 
n
; i++) {

3545 
nid
 = 
curves
[
i
];

3547 i‡(
nid
 & 
TLSEXT_nid_unknown
) {

3548 
p
 = 
	`ngx_•rötf
’, "0x%04xd", 
nid
 & 0xffff);

3551 
p
 = 
	`ngx_•rötf
’, "%s", 
	`OBJ_nid2¢
(
nid
));

3554 *
p
++ = ':';

3557 
p
--;

3559 
s
->
Àn
 = 
p
 - s->
d©a
;

3563 
s
->
Àn
 = 0;

3567  
NGX_OK
;

3568 
	}
}

3571 
ngx_öt_t


3572 
	$ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3574 
u_ch¨
 *
buf
;

3575 
SSL_SESSION
 *
£ss
;

3576 
Àn
;

3578 
£ss
 = 
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

3579 i‡(
£ss
 =
NULL
) {

3580 
s
->
Àn
 = 0;

3581  
NGX_OK
;

3584 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

3586 
buf
 = (
u_ch¨
 *Ë
	`SSL_SESSION_gë_id
(
£ss
, &
Àn
);

3590 
buf
 = 
£ss
->
£ssi⁄_id
;

3591 
Àn
 = 
£ss
->
£ssi⁄_id_Àngth
;

3595 
s
->
Àn
 = 2 *Üen;

3596 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

3597 i‡(
s
->
d©a
 =
NULL
) {

3598  
NGX_ERROR
;

3601 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

3603  
NGX_OK
;

3604 
	}
}

3607 
ngx_öt_t


3608 
	$ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3610 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

3611 
	`ngx_°r_£t
(
s
, "r");

3614 
	`ngx_°r_£t
(
s
, ".");

3617  
NGX_OK
;

3618 
	}
}

3621 
ngx_öt_t


3622 
	$ngx_s¶_gë_£rvî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3624 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


3626 
size_t
 
Àn
;

3627 c⁄° *
«me
;

3629 
«me
 = 
	`SSL_gë_£rvî«me
(
c
->
s¶
->
c⁄√˘i⁄
, 
TLSEXT_NAMETYPE_ho°_«me
);

3631 i‡(
«me
) {

3632 
Àn
 = 
	`ngx_°æí
(
«me
);

3634 
s
->
Àn
 =Üen;

3635 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3636 i‡(
s
->
d©a
 =
NULL
) {

3637  
NGX_ERROR
;

3640 
	`ngx_mem˝y
(
s
->
d©a
, 
«me
, 
Àn
);

3642  
NGX_OK
;

3647 
s
->
Àn
 = 0;

3648  
NGX_OK
;

3649 
	}
}

3652 
ngx_öt_t


3653 
	$ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3655 
size_t
 
Àn
;

3656 
BIO
 *
bio
;

3657 
X509
 *
˚π
;

3659 
s
->
Àn
 = 0;

3661 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3662 i‡(
˚π
 =
NULL
) {

3663  
NGX_OK
;

3666 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

3667 i‡(
bio
 =
NULL
) {

3668 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "BIO_new() failed");

3669 
	`X509_‰ì
(
˚π
);

3670  
NGX_ERROR
;

3673 i‡(
	`PEM_wrôe_bio_X509
(
bio
, 
˚π
) == 0) {

3674 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "PEM_write_bio_X509() failed");

3675 
Áûed
;

3678 
Àn
 = 
	`BIO_≥ndög
(
bio
);

3679 
s
->
Àn
 =Üen;

3681 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3682 i‡(
s
->
d©a
 =
NULL
) {

3683 
Áûed
;

3686 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

3688 
	`BIO_‰ì
(
bio
);

3689 
	`X509_‰ì
(
˚π
);

3691  
NGX_OK
;

3693 
Áûed
:

3695 
	`BIO_‰ì
(
bio
);

3696 
	`X509_‰ì
(
˚π
);

3698  
NGX_ERROR
;

3699 
	}
}

3702 
ngx_öt_t


3703 
	$ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3705 
u_ch¨
 *
p
;

3706 
size_t
 
Àn
;

3707 
ngx_uöt_t
 
i
;

3708 
ngx_°r_t
 
˚π
;

3710 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

3711  
NGX_ERROR
;

3714 i‡(
˚π
.
Àn
 == 0) {

3715 
s
->
Àn
 = 0;

3716  
NGX_OK
;

3719 
Àn
 = 
˚π
.len - 1;

3721 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

3722 i‡(
˚π
.
d©a
[
i
] =
LF
) {

3723 
Àn
++;

3727 
s
->
Àn
 =Üen;

3728 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3729 i‡(
s
->
d©a
 =
NULL
) {

3730  
NGX_ERROR
;

3733 
p
 = 
s
->
d©a
;

3735 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

3736 *
p
++ = 
˚π
.
d©a
[
i
];

3737 i‡(
˚π
.
d©a
[
i
] =
LF
) {

3738 *
p
++ = '\t';

3742  
NGX_OK
;

3743 
	}
}

3746 
ngx_öt_t


3747 
	$ngx_s¶_gë_esˇ≥d_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

3748 
ngx_°r_t
 *
s
)

3750 
ngx_°r_t
 
˚π
;

3751 
uöçå_t
 
n
;

3753 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

3754  
NGX_ERROR
;

3757 i‡(
˚π
.
Àn
 == 0) {

3758 
s
->
Àn
 = 0;

3759  
NGX_OK
;

3762 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
˚π
.
d©a
, cît.
Àn
, 
NGX_ESCAPE_URI_COMPONENT
);

3764 
s
->
Àn
 = 
˚π
.À¿+ 
n
 * 2;

3765 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, s->
Àn
);

3766 i‡(
s
->
d©a
 =
NULL
) {

3767  
NGX_ERROR
;

3770 
	`ngx_esˇ≥_uri
(
s
->
d©a
, 
˚π
.d©a, cît.
Àn
, 
NGX_ESCAPE_URI_COMPONENT
);

3772  
NGX_OK
;

3773 
	}
}

3776 
ngx_öt_t


3777 
	$ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3779 
BIO
 *
bio
;

3780 
X509
 *
˚π
;

3781 
X509_NAME
 *
«me
;

3783 
s
->
Àn
 = 0;

3785 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3786 i‡(
˚π
 =
NULL
) {

3787  
NGX_OK
;

3790 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

3791 i‡(
«me
 =
NULL
) {

3792  
NGX_ERROR
;

3795 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

3796 i‡(
bio
 =
NULL
) {

3797 
	`X509_‰ì
(
˚π
);

3798  
NGX_ERROR
;

3801 i‡(
	`X509_NAME_¥öt_ex
(
bio
, 
«me
, 0, 
XN_FLAG_RFC2253
) < 0) {

3802 
Áûed
;

3805 
s
->
Àn
 = 
	`BIO_≥ndög
(
bio
);

3806 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, s->
Àn
);

3807 i‡(
s
->
d©a
 =
NULL
) {

3808 
Áûed
;

3811 
	`BIO_ªad
(
bio
, 
s
->
d©a
, s->
Àn
);

3813 
	`BIO_‰ì
(
bio
);

3814 
	`X509_‰ì
(
˚π
);

3816  
NGX_OK
;

3818 
Áûed
:

3820 
	`BIO_‰ì
(
bio
);

3821 
	`X509_‰ì
(
˚π
);

3823  
NGX_ERROR
;

3824 
	}
}

3827 
ngx_öt_t


3828 
	$ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3830 
BIO
 *
bio
;

3831 
X509
 *
˚π
;

3832 
X509_NAME
 *
«me
;

3834 
s
->
Àn
 = 0;

3836 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3837 i‡(
˚π
 =
NULL
) {

3838  
NGX_OK
;

3841 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

3842 i‡(
«me
 =
NULL
) {

3843  
NGX_ERROR
;

3846 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

3847 i‡(
bio
 =
NULL
) {

3848 
	`X509_‰ì
(
˚π
);

3849  
NGX_ERROR
;

3852 i‡(
	`X509_NAME_¥öt_ex
(
bio
, 
«me
, 0, 
XN_FLAG_RFC2253
) < 0) {

3853 
Áûed
;

3856 
s
->
Àn
 = 
	`BIO_≥ndög
(
bio
);

3857 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, s->
Àn
);

3858 i‡(
s
->
d©a
 =
NULL
) {

3859 
Áûed
;

3862 
	`BIO_ªad
(
bio
, 
s
->
d©a
, s->
Àn
);

3864 
	`BIO_‰ì
(
bio
);

3865 
	`X509_‰ì
(
˚π
);

3867  
NGX_OK
;

3869 
Áûed
:

3871 
	`BIO_‰ì
(
bio
);

3872 
	`X509_‰ì
(
˚π
);

3874  
NGX_ERROR
;

3875 
	}
}

3878 
ngx_öt_t


3879 
	$ngx_s¶_gë_subje˘_dn_Àgacy
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

3880 
ngx_°r_t
 *
s
)

3882 *
p
;

3883 
size_t
 
Àn
;

3884 
X509
 *
˚π
;

3885 
X509_NAME
 *
«me
;

3887 
s
->
Àn
 = 0;

3889 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3890 i‡(
˚π
 =
NULL
) {

3891  
NGX_OK
;

3894 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

3895 i‡(
«me
 =
NULL
) {

3896 
	`X509_‰ì
(
˚π
);

3897  
NGX_ERROR
;

3900 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

3902 
Àn
 = 0; 
p
[len];Üen++) { }

3904 
s
->
Àn
 =Üen;

3905 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3906 i‡(
s
->
d©a
 =
NULL
) {

3907 
	`OPENSSL_‰ì
(
p
);

3908 
	`X509_‰ì
(
˚π
);

3909  
NGX_ERROR
;

3912 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

3914 
	`OPENSSL_‰ì
(
p
);

3915 
	`X509_‰ì
(
˚π
);

3917  
NGX_OK
;

3918 
	}
}

3921 
ngx_öt_t


3922 
	$ngx_s¶_gë_issuî_dn_Àgacy
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

3923 
ngx_°r_t
 *
s
)

3925 *
p
;

3926 
size_t
 
Àn
;

3927 
X509
 *
˚π
;

3928 
X509_NAME
 *
«me
;

3930 
s
->
Àn
 = 0;

3932 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3933 i‡(
˚π
 =
NULL
) {

3934  
NGX_OK
;

3937 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

3938 i‡(
«me
 =
NULL
) {

3939 
	`X509_‰ì
(
˚π
);

3940  
NGX_ERROR
;

3943 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

3945 
Àn
 = 0; 
p
[len];Üen++) { }

3947 
s
->
Àn
 =Üen;

3948 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3949 i‡(
s
->
d©a
 =
NULL
) {

3950 
	`OPENSSL_‰ì
(
p
);

3951 
	`X509_‰ì
(
˚π
);

3952  
NGX_ERROR
;

3955 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

3957 
	`OPENSSL_‰ì
(
p
);

3958 
	`X509_‰ì
(
˚π
);

3960  
NGX_OK
;

3961 
	}
}

3964 
ngx_öt_t


3965 
	$ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3967 
size_t
 
Àn
;

3968 
X509
 *
˚π
;

3969 
BIO
 *
bio
;

3971 
s
->
Àn
 = 0;

3973 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3974 i‡(
˚π
 =
NULL
) {

3975  
NGX_OK
;

3978 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

3979 i‡(
bio
 =
NULL
) {

3980 
	`X509_‰ì
(
˚π
);

3981  
NGX_ERROR
;

3984 
	`i2a_ASN1_INTEGER
(
bio
, 
	`X509_gë_£rülNumbî
(
˚π
));

3985 
Àn
 = 
	`BIO_≥ndög
(
bio
);

3987 
s
->
Àn
 =Üen;

3988 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3989 i‡(
s
->
d©a
 =
NULL
) {

3990 
	`BIO_‰ì
(
bio
);

3991 
	`X509_‰ì
(
˚π
);

3992  
NGX_ERROR
;

3995 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

3996 
	`BIO_‰ì
(
bio
);

3997 
	`X509_‰ì
(
˚π
);

3999  
NGX_OK
;

4000 
	}
}

4003 
ngx_öt_t


4004 
	$ngx_s¶_gë_fögî¥öt
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

4006 
X509
 *
˚π
;

4007 
Àn
;

4008 
u_ch¨
 
buf
[
EVP_MAX_MD_SIZE
];

4010 
s
->
Àn
 = 0;

4012 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

4013 i‡(
˚π
 =
NULL
) {

4014  
NGX_OK
;

4017 i‡(!
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
buf
, &
Àn
)) {

4018 
	`X509_‰ì
(
˚π
);

4019  
NGX_ERROR
;

4022 
s
->
Àn
 = 2 *Üen;

4023 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

4024 i‡(
s
->
d©a
 =
NULL
) {

4025 
	`X509_‰ì
(
˚π
);

4026  
NGX_ERROR
;

4029 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

4031 
	`X509_‰ì
(
˚π
);

4033  
NGX_OK
;

4034 
	}
}

4037 
ngx_öt_t


4038 
	$ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

4040 
X509
 *
˚π
;

4041 
rc
;

4042 c⁄° *
°r
;

4044 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

4045 i‡(
˚π
 =
NULL
) {

4046 
	`ngx_°r_£t
(
s
, "NONE");

4047  
NGX_OK
;

4050 
	`X509_‰ì
(
˚π
);

4052 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

4054 i‡(
rc
 =
X509_V_OK
) {

4055 
	`ngx_°r_£t
(
s
, "SUCCESS");

4056  
NGX_OK
;

4059 
°r
 = 
	`X509_vîify_˚π_îr‹_°rög
(
rc
);

4061 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, ("FAILED:"Ë- 1 + 
	`ngx_°æí
(
°r
));

4062 i‡(
s
->
d©a
 =
NULL
) {

4063  
NGX_ERROR
;

4066 
s
->
Àn
 = 
	`ngx_•rötf
(s->
d©a
, "FAILED:%s", 
°r
) - s->data;

4068  
NGX_OK
;

4069 
	}
}

4072 
ngx_öt_t


4073 
	$ngx_s¶_gë_˛õ¡_v_°¨t
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

4075 
BIO
 *
bio
;

4076 
X509
 *
˚π
;

4077 
size_t
 
Àn
;

4079 
s
->
Àn
 = 0;

4081 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

4082 i‡(
˚π
 =
NULL
) {

4083  
NGX_OK
;

4086 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

4087 i‡(
bio
 =
NULL
) {

4088 
	`X509_‰ì
(
˚π
);

4089  
NGX_ERROR
;

4092 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10100000L

4093 
	`ASN1_TIME_¥öt
(
bio
, 
	`X509_gë0_nŸBef‹e
(
˚π
));

4095 
	`ASN1_TIME_¥öt
(
bio
, 
	`X509_gë_nŸBef‹e
(
˚π
));

4098 
Àn
 = 
	`BIO_≥ndög
(
bio
);

4100 
s
->
Àn
 =Üen;

4101 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

4102 i‡(
s
->
d©a
 =
NULL
) {

4103 
	`BIO_‰ì
(
bio
);

4104 
	`X509_‰ì
(
˚π
);

4105  
NGX_ERROR
;

4108 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

4109 
	`BIO_‰ì
(
bio
);

4110 
	`X509_‰ì
(
˚π
);

4112  
NGX_OK
;

4113 
	}
}

4116 
ngx_öt_t


4117 
	$ngx_s¶_gë_˛õ¡_v_íd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

4119 
BIO
 *
bio
;

4120 
X509
 *
˚π
;

4121 
size_t
 
Àn
;

4123 
s
->
Àn
 = 0;

4125 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

4126 i‡(
˚π
 =
NULL
) {

4127  
NGX_OK
;

4130 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

4131 i‡(
bio
 =
NULL
) {

4132 
	`X509_‰ì
(
˚π
);

4133  
NGX_ERROR
;

4136 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10100000L

4137 
	`ASN1_TIME_¥öt
(
bio
, 
	`X509_gë0_nŸA·î
(
˚π
));

4139 
	`ASN1_TIME_¥öt
(
bio
, 
	`X509_gë_nŸA·î
(
˚π
));

4142 
Àn
 = 
	`BIO_≥ndög
(
bio
);

4144 
s
->
Àn
 =Üen;

4145 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

4146 i‡(
s
->
d©a
 =
NULL
) {

4147 
	`BIO_‰ì
(
bio
);

4148 
	`X509_‰ì
(
˚π
);

4149  
NGX_ERROR
;

4152 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

4153 
	`BIO_‰ì
(
bio
);

4154 
	`X509_‰ì
(
˚π
);

4156  
NGX_OK
;

4157 
	}
}

4160 
ngx_öt_t


4161 
	$ngx_s¶_gë_˛õ¡_v_ªmaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

4163 
X509
 *
˚π
;

4164 
time_t
 
now
, 
íd
;

4166 
s
->
Àn
 = 0;

4168 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

4169 i‡(
˚π
 =
NULL
) {

4170  
NGX_OK
;

4173 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10100000L

4174 
íd
 = 
	`ngx_s¶_∑r£_time
(
	`X509_gë0_nŸA·î
(
˚π
));

4176 
íd
 = 
	`ngx_s¶_∑r£_time
(
	`X509_gë_nŸA·î
(
˚π
));

4179 i‡(
íd
 =(
time_t
Ë
NGX_ERROR
) {

4180 
	`X509_‰ì
(
˚π
);

4181  
NGX_OK
;

4184 
now
 = 
	`ngx_time
();

4186 i‡(
íd
 < 
now
 + 86400) {

4187 
	`ngx_°r_£t
(
s
, "0");

4188 
	`X509_‰ì
(
˚π
);

4189  
NGX_OK
;

4192 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
NGX_TIME_T_LEN
);

4193 i‡(
s
->
d©a
 =
NULL
) {

4194 
	`X509_‰ì
(
˚π
);

4195  
NGX_ERROR
;

4198 
s
->
Àn
 = 
	`ngx_•rötf
(s->
d©a
, "%T", (
íd
 - 
now
) / 86400) - s->data;

4200 
	`X509_‰ì
(
˚π
);

4202  
NGX_OK
;

4203 
	}
}

4206 
time_t


4207 
ngx_s¶_∑r£_time
(

4208 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10100000L

4211 
ASN1_TIME
 *
a¢1time
)

4213 
BIO
 *
	gbio
;

4214 *
	gvÆue
;

4215 
size_t
 
	gÀn
;

4216 
time_t
 
	gtime
;

4225 
	gbio
 = 
BIO_√w
(
BIO_s_mem
());

4226 i‡(
	gbio
 =
NULL
) {

4227  
NGX_ERROR
;

4232 
BIO_wrôe
(
bio
, "Tue ", ("Tue ") - 1);

4233 
ASN1_TIME_¥öt
(
bio
, 
a¢1time
);

4234 
	gÀn
 = 
BIO_gë_mem_d©a
(
bio
, &
vÆue
);

4236 
	gtime
 = 
ngx_∑r£_hâp_time
((
u_ch¨
 *Ë
vÆue
, 
Àn
);

4238 
BIO_‰ì
(
bio
);

4240  
	gtime
;

4245 
	$ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

4247 
ngx_›ís¶_c⁄f_t
 *
oscf
;

4249 
oscf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_›ís¶_c⁄f_t
));

4250 i‡(
oscf
 =
NULL
) {

4251  
NULL
;

4260  
oscf
;

4261 
	}
}

4265 
	$ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4267 #i‚de‡
OPENSSL_NO_ENGINE


4269 
ngx_›ís¶_c⁄f_t
 *
oscf
 = 
c⁄f
;

4271 
ENGINE
 *
ígöe
;

4272 
ngx_°r_t
 *
vÆue
;

4274 i‡(
oscf
->
ígöe
) {

4278 
oscf
->
ígöe
 = 1;

4280 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4282 
ígöe
 = 
	`ENGINE_by_id
((*Ë
vÆue
[1].
d©a
);

4284 i‡(
ígöe
 =
NULL
) {

4285 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4286 "ENGINE_by_id(\"%V\"ËÁûed", &
vÆue
[1]);

4287  
NGX_CONF_ERROR
;

4290 i‡(
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
) == 0) {

4291 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4293 &
vÆue
[1]);

4295 
	`ENGINE_‰ì
(
ígöe
);

4297  
NGX_CONF_ERROR
;

4300 
	`ENGINE_‰ì
(
ígöe
);

4302  
NGX_CONF_OK
;

4309 
	}
}

4313 
	$ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
)

4315 #i‡
OPENSSL_VERSION_NUMBER
 < 0x10100003L

4317 
	`EVP_˛ónup
();

4318 #i‚de‡
OPENSSL_NO_ENGINE


4319 
	`ENGINE_˛ónup
();

4323 
	}
}

	@src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/bn.h
>

18 
	~<›ís¶/c⁄f.h
>

19 
	~<›ís¶/¸y±o.h
>

20 
	~<›ís¶/dh.h
>

21 #i‚de‡
OPENSSL_NO_ENGINE


22 
	~<›ís¶/ígöe.h
>

24 
	~<›ís¶/evp.h
>

25 
	~<›ís¶/hmac.h
>

26 #i‚de‡
OPENSSL_NO_OCSP


27 
	~<›ís¶/oc•.h
>

29 
	~<›ís¶/ønd.h
>

30 
	~<›ís¶/rß.h
>

31 
	~<›ís¶/x509.h
>

32 
	~<›ís¶/x509v3.h
>

34 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

37 #i‡(
deföed
 
LIBRESSL_VERSION_NUMBER
 && 
OPENSSL_VERSION_NUMBER
 == 0x20000000L)

38 #unde‡
OPENSSL_VERSION_NUMBER


39 
	#OPENSSL_VERSION_NUMBER
 0x1000107fL

	)

43 #i‡(
OPENSSL_VERSION_NUMBER
 >= 0x10100001L)

45 
	#ngx_s¶_vîsi⁄
(Ë
	`O≥nSSL_vîsi⁄
(
OPENSSL_VERSION
)

	)

49 
	#ngx_s¶_vîsi⁄
(Ë
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
)

	)

54 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

55 
	#ngx_s¶_c⁄n_t
 
SSL


	)

58 #i‡(
OPENSSL_VERSION_NUMBER
 < 0x10002000L)

59 
	#SSL_is_£rvî
(
s
Ë(s)->
£rvî


	)

63 
	sngx_s¶_s
 {

64 
SSL_CTX
 *
	m˘x
;

65 
ngx_log_t
 *
	mlog
;

66 
size_t
 
	mbuf„r_size
;

70 
	sngx_s¶_c⁄√˘i⁄_s
 {

71 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

72 
SSL_CTX
 *
	m£ssi⁄_˘x
;

74 
ngx_öt_t
 
	mœ°
;

75 
ngx_buf_t
 *
	mbuf
;

76 
size_t
 
	mbuf„r_size
;

78 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

80 
ngx_s¶_£ssi⁄_t
 *
	m£ssi⁄
;

81 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mßve_£ssi⁄
;

83 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

84 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

86 
	mh™dshaked
:1;

87 
	mª√gŸüti⁄
:1;

88 
	mbuf„r
:1;

89 
	mno_waô_shutdown
:1;

90 
	mno_£nd_shutdown
:1;

91 
	mh™dshake_buf„r_£t
:1;

95 
	#NGX_SSL_NO_SCACHE
 -2

	)

96 
	#NGX_SSL_NONE_SCACHE
 -3

	)

97 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

98 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

101 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

103 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

105 
	sngx_s¶_£ss_id_s
 {

106 
ngx_rbåì_node_t
 
	mnode
;

107 
u_ch¨
 *
	mid
;

108 
size_t
 
	mÀn
;

109 
u_ch¨
 *
	m£ssi⁄
;

110 
ngx_queue_t
 
	mqueue
;

111 
time_t
 
	mexpúe
;

112 #i‡(
NGX_PTR_SIZE
 == 8)

113 *
	m°ub
;

114 
u_ch¨
 
	m£ss_id
[32];

120 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

121 
ngx_rbåì_node_t
 
	m£¡öñ
;

122 
ngx_queue_t
 
	mexpúe_queue
;

123 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

126 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


129 
size_t
 
	msize
;

130 
u_ch¨
 
	m«me
[16];

131 
u_ch¨
 
	mhmac_key
[32];

132 
u_ch¨
 
	m´s_key
[32];

133 } 
	tngx_s¶_£ssi⁄_tickë_key_t
;

138 
	#NGX_SSL_SSLv2
 0x0002

	)

139 
	#NGX_SSL_SSLv3
 0x0004

	)

140 
	#NGX_SSL_TLSv1
 0x0008

	)

141 
	#NGX_SSL_TLSv1_1
 0x0010

	)

142 
	#NGX_SSL_TLSv1_2
 0x0020

	)

143 
	#NGX_SSL_TLSv1_3
 0x0040

	)

146 
	#NGX_SSL_BUFFER
 1

	)

147 
	#NGX_SSL_CLIENT
 2

	)

149 
	#NGX_SSL_BUFSIZE
 16384

	)

152 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

153 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

154 
ngx_öt_t
 
ngx_s¶_˚πifiˇãs
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

155 
ngx_¨øy_t
 *
˚πs
,Çgx_¨øy_à*
keys
,Çgx_¨øy_à*
∑ssw‹ds
);

156 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

157 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
, 
ngx_¨øy_t
 *
∑ssw‹ds
);

158 
ngx_öt_t
 
ngx_s¶_cùhîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
cùhîs
,

159 
ngx_uöt_t
 
¥e„r_£rvî_cùhîs
);

160 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

161 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

162 
ngx_öt_t
 
ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

163 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

164 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

165 
ngx_öt_t
 
ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

166 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
);

167 
ngx_öt_t
 
ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

168 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
);

169 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

170 
key_Àngth
);

171 
ngx_¨øy_t
 *
ngx_s¶_ªad_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
);

172 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

173 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

174 
ngx_öt_t
 
ngx_s¶_˛õ¡_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

175 
ngx_uöt_t
 
íabÀ
);

176 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

177 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

178 
ngx_öt_t
 
ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

179 
ngx_¨øy_t
 *
∑ths
);

180 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

181 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

182 
ngx_uöt_t
 
Êags
);

184 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

185 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

186 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

187 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë0_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

188 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

189 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

190 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

191 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

192 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

194 
	#ngx_s¶_vîify_îr‹_›ti⁄Æ
(
n
) \

195 (
n
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 \

196 || 
n
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 \

197 || 
n
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 \

198 || 
n
 =
X509_V_ERR_CERT_UNTRUSTED
 \

199 || 
n
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)

	)

201 
ngx_öt_t
 
ngx_s¶_check_ho°
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
«me
);

204 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

205 
ngx_°r_t
 *
s
);

206 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

207 
ngx_°r_t
 *
s
);

208 
ngx_öt_t
 
ngx_s¶_gë_cùhîs
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

209 
ngx_°r_t
 *
s
);

210 
ngx_öt_t
 
ngx_s¶_gë_curves
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

211 
ngx_°r_t
 *
s
);

212 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

213 
ngx_°r_t
 *
s
);

214 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

215 
ngx_°r_t
 *
s
);

216 
ngx_öt_t
 
ngx_s¶_gë_£rvî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

217 
ngx_°r_t
 *
s
);

218 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

219 
ngx_°r_t
 *
s
);

220 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

221 
ngx_°r_t
 *
s
);

222 
ngx_öt_t
 
ngx_s¶_gë_esˇ≥d_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

223 
ngx_°r_t
 *
s
);

224 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

225 
ngx_°r_t
 *
s
);

226 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

227 
ngx_°r_t
 *
s
);

228 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn_Àgacy
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

229 
ngx_°r_t
 *
s
);

230 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn_Àgacy
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

231 
ngx_°r_t
 *
s
);

232 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

233 
ngx_°r_t
 *
s
);

234 
ngx_öt_t
 
ngx_s¶_gë_fögî¥öt
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

235 
ngx_°r_t
 *
s
);

236 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

237 
ngx_°r_t
 *
s
);

238 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_v_°¨t
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

239 
ngx_°r_t
 *
s
);

240 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_v_íd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

241 
ngx_°r_t
 *
s
);

242 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_v_ªmaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

243 
ngx_°r_t
 *
s
);

246 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

247 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

248 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

249 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
);

250 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

251 
off_t
 
limô
);

252 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

253 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

254 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

255 *
fmt
, ...);

256 
ngx_s¶_˛ónup_˘x
(*
d©a
);

259 
ngx_s¶_c⁄√˘i⁄_ödex
;

260 
ngx_s¶_£rvî_c⁄f_ödex
;

261 
ngx_s¶_£ssi⁄_ˇche_ödex
;

262 
ngx_s¶_£ssi⁄_tickë_keys_ödex
;

263 
ngx_s¶_˚πifiˇã_ödex
;

264 
ngx_s¶_√xt_˚πifiˇã_ödex
;

265 
ngx_s¶_˚πifiˇã_«me_ödex
;

266 
ngx_s¶_°≠lög_ödex
;

	@src/event/ngx_event_openssl_stapling.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 #i‡(!
deföed
 
OPENSSL_NO_OCSP
 && deföed 
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
)

18 
ngx_°r_t
 
	m°≠À
;

19 
ngx_m£c_t
 
	mtimeout
;

21 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

22 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

24 
ngx_addr_t
 *
	maddrs
;

25 
ngx_°r_t
 
	mho°
;

26 
ngx_°r_t
 
	muri
;

27 
ö_p‹t_t
 
	mp‹t
;

29 
SSL_CTX
 *
	ms¶_˘x
;

31 
X509
 *
	m˚π
;

32 
X509
 *
	missuî
;

34 
u_ch¨
 *
	m«me
;

36 
time_t
 
	mvÆid
;

37 
time_t
 
	mª‰esh
;

39 
	mvîify
:1;

40 
	mlﬂdög
:1;

41 } 
	tngx_s¶_°≠lög_t
;

44 
ngx_s¶_oc•_˘x_s
 
	tngx_s¶_oc•_˘x_t
;

46 
	sngx_s¶_oc•_˘x_s
 {

47 
X509
 *
	m˚π
;

48 
X509
 *
	missuî
;

50 
u_ch¨
 *
	m«me
;

52 
ngx_uöt_t
 
	m«ddrs
;

54 
ngx_addr_t
 *
	maddrs
;

55 
ngx_°r_t
 
	mho°
;

56 
ngx_°r_t
 
	muri
;

57 
ö_p‹t_t
 
	mp‹t
;

59 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

60 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

62 
ngx_m£c_t
 
	mtimeout
;

64 (*
	mh™dÀr
)(
ngx_s¶_oc•_˘x_t
 *
	m˘x
);

65 *
	md©a
;

67 
ngx_buf_t
 *
	mªque°
;

68 
ngx_buf_t
 *
	mª•⁄£
;

69 
ngx_≥î_c⁄√˘i⁄_t
 
	m≥î
;

71 
ngx_öt_t
 (*
¥o˚ss
)(
ngx_s¶_oc•_˘x_t
 *
	m˘x
);

73 
ngx_uöt_t
 
	m°©e
;

75 
ngx_uöt_t
 
	mcode
;

76 
ngx_uöt_t
 
	mcou¡
;

78 
ngx_uöt_t
 
	md⁄e
;

80 
u_ch¨
 *
	mhódî_«me_°¨t
;

81 
u_ch¨
 *
	mhódî_«me_íd
;

82 
u_ch¨
 *
	mhódî_°¨t
;

83 
u_ch¨
 *
	mhódî_íd
;

85 
ngx_poﬁ_t
 *
	mpoﬁ
;

86 
ngx_log_t
 *
	mlog
;

90 
ngx_öt_t
 
ngx_s¶_°≠lög_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

91 
X509
 *
˚π
, 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
);

92 
ngx_öt_t
 
ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

93 
ngx_s¶_°≠lög_t
 *
°≠À
, 
ngx_°r_t
 *
fûe
);

94 
ngx_öt_t
 
ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

95 
ngx_s¶_°≠lög_t
 *
°≠À
);

96 
ngx_öt_t
 
ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

97 
ngx_s¶_°≠lög_t
 *
°≠À
, 
ngx_°r_t
 *
ª•⁄dî
);

99 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

100 *
d©a
);

101 
ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
);

102 
ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

104 
time_t
 
ngx_s¶_°≠lög_time
(
ASN1_GENERALIZEDTIME
 *
a¢1time
);

106 
ngx_s¶_°≠lög_˛ónup
(*
d©a
);

108 
ngx_s¶_oc•_˘x_t
 *
ngx_s¶_oc•_°¨t
();

109 
ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

110 
ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

111 
ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
);

112 
ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

113 
ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

114 
ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

115 
ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

117 
ngx_öt_t
 
ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

118 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

119 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

120 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

121 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

122 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

124 
u_ch¨
 *
ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

127 
ngx_öt_t


128 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

129 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

131 
X509
 *
˚π
;

133 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

134 
˚π
;

135 
˚π
 = 
	`X509_gë_ex_d©a
(˚π, 
ngx_s¶_√xt_˚πifiˇã_ödex
))

137 i‡(
	`ngx_s¶_°≠lög_˚πifiˇã
(
cf
, 
s¶
, 
˚π
, 
fûe
, 
ª•⁄dî
, 
vîify
)

138 !
NGX_OK
)

140  
NGX_ERROR
;

144 
	`SSL_CTX_£t_é£xt_°©us_cb
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
);

146  
NGX_OK
;

147 
	}
}

150 
ngx_öt_t


151 
	$ngx_s¶_°≠lög_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
X509
 *
˚π
,

152 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

154 
ngx_öt_t
 
rc
;

155 
ngx_poﬁ_˛ónup_t
 *
˛n
;

156 
ngx_s¶_°≠lög_t
 *
°≠À
;

158 
°≠À
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_°≠lög_t
));

159 i‡(
°≠À
 =
NULL
) {

160  
NGX_ERROR
;

163 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

164 i‡(
˛n
 =
NULL
) {

165  
NGX_ERROR
;

168 
˛n
->
h™dÀr
 = 
ngx_s¶_°≠lög_˛ónup
;

169 
˛n
->
d©a
 = 
°≠À
;

171 i‡(
	`X509_£t_ex_d©a
(
˚π
, 
ngx_s¶_°≠lög_ödex
, 
°≠À
) == 0) {

172 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "X509_set_ex_data() failed");

173  
NGX_ERROR
;

176 
°≠À
->
s¶_˘x
 = 
s¶
->
˘x
;

177 
°≠À
->
timeout
 = 60000;

178 
°≠À
->
vîify
 = verify;

179 
°≠À
->
˚π
 = cert;

180 
°≠À
->
«me
 = 
	`X509_gë_ex_d©a
(°≠À->
˚π
,

181 
ngx_s¶_˚πifiˇã_«me_ödex
);

183 i‡(
fûe
->
Àn
) {

186 i‡(
	`ngx_s¶_°≠lög_fûe
(
cf
, 
s¶
, 
°≠À
, 
fûe
Ë!
NGX_OK
) {

187  
NGX_ERROR
;

190  
NGX_OK
;

193 
rc
 = 
	`ngx_s¶_°≠lög_issuî
(
cf
, 
s¶
, 
°≠À
);

195 i‡(
rc
 =
NGX_DECLINED
) {

196  
NGX_OK
;

199 i‡(
rc
 !
NGX_OK
) {

200  
NGX_ERROR
;

203 
rc
 = 
	`ngx_s¶_°≠lög_ª•⁄dî
(
cf
, 
s¶
, 
°≠À
, 
ª•⁄dî
);

205 i‡(
rc
 =
NGX_DECLINED
) {

206  
NGX_OK
;

209 i‡(
rc
 !
NGX_OK
) {

210  
NGX_ERROR
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

219 
ngx_s¶_°≠lög_t
 *
°≠À
, 
ngx_°r_t
 *
fûe
)

221 
BIO
 *
bio
;

222 
Àn
;

223 
u_ch¨
 *
p
, *
buf
;

224 
OCSP_RESPONSE
 *
ª•⁄£
;

226 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

227  
NGX_ERROR
;

230 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

231 i‡(
bio
 =
NULL
) {

232 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

233 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

234  
NGX_ERROR
;

237 
ª•⁄£
 = 
	`d2i_OCSP_RESPONSE_bio
(
bio
, 
NULL
);

238 i‡(
ª•⁄£
 =
NULL
) {

239 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

240 "d2i_OCSP_RESPONSE_bio(\"%s\"ËÁûed", 
fûe
->
d©a
);

241 
	`BIO_‰ì
(
bio
);

242  
NGX_ERROR
;

245 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, 
NULL
);

246 i‡(
Àn
 <= 0) {

247 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

248 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

249 
Áûed
;

252 
buf
 = 
	`ngx_Æloc
(
Àn
, 
s¶
->
log
);

253 i‡(
buf
 =
NULL
) {

254 
Áûed
;

257 
p
 = 
buf
;

258 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, &
p
);

259 i‡(
Àn
 <= 0) {

260 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

261 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

262 
	`ngx_‰ì
(
buf
);

263 
Áûed
;

266 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

267 
	`BIO_‰ì
(
bio
);

269 
°≠À
->°≠À.
d©a
 = 
buf
;

270 
°≠À
->°≠À.
Àn
 =Üen;

271 
°≠À
->
vÆid
 = 
NGX_MAX_TIME_T_VALUE
;

273  
NGX_OK
;

275 
Áûed
:

277 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

278 
	`BIO_‰ì
(
bio
);

280  
NGX_ERROR
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

286 
ngx_s¶_°≠lög_t
 *
°≠À
)

288 
i
, 
n
, 
rc
;

289 
X509
 *
˚π
, *
issuî
;

290 
X509_STORE
 *
°‹e
;

291 
X509_STORE_CTX
 *
°‹e_˘x
;

292 
	`STACK_OF
(
X509
Ë*
chaö
;

294 
˚π
 = 
°≠À
->cert;

296 #ifde‡
SSL_CTRL_SELECT_CURRENT_CERT


298 
	`SSL_CTX_£À˘_cuºít_˚π
(
s¶
->
˘x
, 
˚π
);

301 #ifde‡
SSL_CTRL_GET_EXTRA_CHAIN_CERTS


303 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
s¶
->
˘x
, &
chaö
);

305 
chaö
 = 
s¶
->
˘x
->
exåa_˚πs
;

308 
n
 = 
	`sk_X509_num
(
chaö
);

310 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

311 "SSL gë issuî: %dÉxå®˚πs", 
n
);

313 
i
 = 0; i < 
n
; i++) {

314 
issuî
 = 
	`sk_X509_vÆue
(
chaö
, 
i
);

315 i‡(
	`X509_check_issued
(
issuî
, 
˚π
Ë=
X509_V_OK
) {

316 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10100001L

317 
	`X509_up_ªf
(
issuî
);

319 
	`CRYPTO_add
(&
issuî
->
ª„ªn˚s
, 1, 
CRYPTO_LOCK_X509
);

322 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

323 "SSL gë issuî: found %∞öÉxå®˚πs", 
issuî
);

325 
°≠À
->
issuî
 = issuer;

327  
NGX_OK
;

331 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

332 i‡(
°‹e
 =
NULL
) {

333 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

335  
NGX_ERROR
;

338 
°‹e_˘x
 = 
	`X509_STORE_CTX_√w
();

339 i‡(
°‹e_˘x
 =
NULL
) {

340 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

342  
NGX_ERROR
;

345 i‡(
	`X509_STORE_CTX_öô
(
°‹e_˘x
, 
°‹e
, 
NULL
, NULL) == 0) {

346 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

348 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

349  
NGX_ERROR
;

352 
rc
 = 
	`X509_STORE_CTX_gë1_issuî
(&
issuî
, 
°‹e_˘x
, 
˚π
);

354 i‡(
rc
 == -1) {

355 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

357 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

358  
NGX_ERROR
;

361 i‡(
rc
 == 0) {

362 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

365 
°≠À
->
«me
);

366 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

367  
NGX_DECLINED
;

370 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

372 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

373 "SSL gë issuî: found %∞ö cîà°‹e", 
issuî
);

375 
°≠À
->
issuî
 = issuer;

377  
NGX_OK
;

378 
	}
}

381 
ngx_öt_t


382 
	$ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

383 
ngx_s¶_°≠lög_t
 *
°≠À
, 
ngx_°r_t
 *
ª•⁄dî
)

385 *
s
;

386 
ngx_°r_t
 
r•
;

387 
ngx_uæ_t
 
u
;

388 
	`STACK_OF
(
OPENSSL_STRING
Ë*
aü
;

390 i‡(
ª•⁄dî
->
Àn
 == 0) {

394 
aü
 = 
	`X509_gë1_oc•
(
°≠À
->
˚π
);

395 i‡(
aü
 =
NULL
) {

396 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

399 
°≠À
->
«me
);

400  
NGX_DECLINED
;

403 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

404 
s
 = 
	`sk_OPENSSL_STRING_vÆue
(
aü
, 0);

406 
s
 = 
	`sk_vÆue
(
aü
, 0);

408 i‡(
s
 =
NULL
) {

409 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

412 
°≠À
->
«me
);

413 
	`X509_emaû_‰ì
(
aü
);

414  
NGX_DECLINED
;

417 
ª•⁄dî
 = &
r•
;

419 
ª•⁄dî
->
Àn
 = 
	`ngx_°æí
(
s
);

420 
ª•⁄dî
->
d©a
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñe•⁄dî->
Àn
);

421 i‡(
ª•⁄dî
->
d©a
 =
NULL
) {

422 
	`X509_emaû_‰ì
(
aü
);

423  
NGX_ERROR
;

426 
	`ngx_mem˝y
(
ª•⁄dî
->
d©a
, 
s
,Ñe•⁄dî->
Àn
);

427 
	`X509_emaû_‰ì
(
aü
);

430 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

432 
u
.
uæ
 = *
ª•⁄dî
;

433 
u
.
deÁu…_p‹t
 = 80;

434 
u
.
uri_∑π
 = 1;

436 i‡(
u
.
uæ
.
Àn
 > 7

437 && 
	`ngx_°∫ˇ£cmp
(
u
.
uæ
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

439 
u
.
uæ
.
Àn
 -= 7;

440 
u
.
uæ
.
d©a
 += 7;

443 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

447 &
u
.
uæ
, 
°≠À
->
«me
);

448  
NGX_DECLINED
;

451 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

452 i‡(
u
.
îr
) {

453 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

457 
u
.
îr
, &u.
uæ
, 
°≠À
->
«me
);

458  
NGX_DECLINED
;

461  
NGX_ERROR
;

464 
°≠À
->
addrs
 = 
u
.addrs;

465 
°≠À
->
ho°
 = 
u
.host;

466 
°≠À
->
uri
 = 
u
.uri;

467 
°≠À
->
p‹t
 = 
u
.port;

469 i‡(
°≠À
->
uri
.
Àn
 == 0) {

470 
	`ngx_°r_£t
(&
°≠À
->
uri
, "/");

473  
NGX_OK
;

474 
	}
}

477 
ngx_öt_t


478 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

479 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

481 
X509
 *
˚π
;

482 
ngx_s¶_°≠lög_t
 *
°≠À
;

484 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

485 
˚π
;

486 
˚π
 = 
	`X509_gë_ex_d©a
(˚π, 
ngx_s¶_√xt_˚πifiˇã_ödex
))

488 
°≠À
 = 
	`X509_gë_ex_d©a
(
˚π
, 
ngx_s¶_°≠lög_ödex
);

489 
°≠À
->
ªsﬁvî
 =Ñesolver;

490 
°≠À
->
ªsﬁvî_timeout
 =Ñesolver_timeout;

493  
NGX_OK
;

494 
	}
}

498 
	$ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
d©a
)

500 
rc
;

501 
X509
 *
˚π
;

502 
u_ch¨
 *
p
;

503 
ngx_c⁄√˘i⁄_t
 *
c
;

504 
ngx_s¶_°≠lög_t
 *
°≠À
;

506 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

508 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

511 
rc
 = 
SSL_TLSEXT_ERR_NOACK
;

513 
˚π
 = 
	`SSL_gë_˚πifiˇã
(
s¶_c⁄n
);

514 
°≠À
 = 
	`X509_gë_ex_d©a
(
˚π
, 
ngx_s¶_°≠lög_ödex
);

516 i‡(
°≠À
 =
NULL
) {

517  
rc
;

520 i‡(
°≠À
->°≠À.
Àn


521 && 
°≠À
->
vÆid
 >
	`ngx_time
())

525 
p
 = 
	`OPENSSL_mÆloc
(
°≠À
->°≠À.
Àn
);

526 i‡(
p
 =
NULL
) {

527 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "OPENSSL_malloc() failed");

528  
SSL_TLSEXT_ERR_NOACK
;

531 
	`ngx_mem˝y
(
p
, 
°≠À
->°≠À.
d©a
, sè∂e->°≠À.
Àn
);

533 
	`SSL_£t_é£xt_°©us_oc•_ª•
(
s¶_c⁄n
, 
p
, 
°≠À
->°≠À.
Àn
);

535 
rc
 = 
SSL_TLSEXT_ERR_OK
;

538 
	`ngx_s¶_°≠lög_upd©e
(
°≠À
);

540  
rc
;

541 
	}
}

545 
	$ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
)

547 
ngx_s¶_oc•_˘x_t
 *
˘x
;

549 i‡(
°≠À
->
ho°
.
Àn
 == 0

550 || 
°≠À
->
lﬂdög
 || sè∂e->
ª‰esh
 >
	`ngx_time
())

555 
°≠À
->
lﬂdög
 = 1;

557 
˘x
 = 
	`ngx_s¶_oc•_°¨t
();

558 i‡(
˘x
 =
NULL
) {

562 
˘x
->
˚π
 = 
°≠À
->cert;

563 
˘x
->
issuî
 = 
°≠À
->issuer;

564 
˘x
->
«me
 = 
°≠À
->name;

566 
˘x
->
addrs
 = 
°≠À
->addrs;

567 
˘x
->
ho°
 = 
°≠À
->host;

568 
˘x
->
uri
 = 
°≠À
->uri;

569 
˘x
->
p‹t
 = 
°≠À
->port;

570 
˘x
->
timeout
 = 
°≠À
->timeout;

572 
˘x
->
ªsﬁvî
 = 
°≠À
->resolver;

573 
˘x
->
ªsﬁvî_timeout
 = 
°≠À
->resolver_timeout;

575 
˘x
->
h™dÀr
 = 
ngx_s¶_°≠lög_oc•_h™dÀr
;

576 
˘x
->
d©a
 = 
°≠À
;

578 
	`ngx_s¶_oc•_ªque°
(
˘x
);

581 
	}
}

585 
	$ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

587 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

590 
u_ch¨
 *
p
;

591 
n
;

592 
size_t
 
Àn
;

593 
time_t
 
now
, 
vÆid
;

594 
ngx_°r_t
 
ª•⁄£
;

595 
X509_STORE
 *
°‹e
;

596 
	`STACK_OF
(
X509
Ë*
chaö
;

597 
OCSP_CERTID
 *
id
;

598 
OCSP_RESPONSE
 *
oc•
;

599 
OCSP_BASICRESP
 *
basic
;

600 
ngx_s¶_°≠lög_t
 *
°≠À
;

601 
ASN1_GENERALIZEDTIME
 *
thisupd©e
, *
√xtupd©e
;

603 
°≠À
 = 
˘x
->
d©a
;

604 
now
 = 
	`ngx_time
();

605 
oc•
 = 
NULL
;

606 
basic
 = 
NULL
;

607 
id
 = 
NULL
;

609 i‡(
˘x
->
code
 != 200) {

610 
îr‹
;

615 
Àn
 = 
˘x
->
ª•⁄£
->
œ°
 - ctx->ª•⁄£->
pos
;

616 
p
 = 
˘x
->
ª•⁄£
->
pos
;

618 
oc•
 = 
	`d2i_OCSP_RESPONSE
(
NULL
, &
p
, 
Àn
);

619 i‡(
oc•
 =
NULL
) {

620 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

622 
îr‹
;

625 
n
 = 
	`OCSP_ª•⁄£_°©us
(
oc•
);

627 i‡(
n
 !
OCSP_RESPONSE_STATUS_SUCCESSFUL
) {

628 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

630 
n
, 
	`OCSP_ª•⁄£_°©us_°r
(n));

631 
îr‹
;

634 
basic
 = 
	`OCSP_ª•⁄£_gë1_basic
(
oc•
);

635 i‡(
basic
 =
NULL
) {

636 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

638 
îr‹
;

641 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
°≠À
->
s¶_˘x
);

642 i‡(
°‹e
 =
NULL
) {

643 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

645 
îr‹
;

648 #ifde‡
SSL_CTRL_SELECT_CURRENT_CERT


650 
	`SSL_CTX_£À˘_cuºít_˚π
(
°≠À
->
s¶_˘x
, 
˘x
->
˚π
);

653 #ifde‡
SSL_CTRL_GET_EXTRA_CHAIN_CERTS


655 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
°≠À
->
s¶_˘x
, &
chaö
);

657 
chaö
 = 
°≠À
->
s¶_˘x
->
exåa_˚πs
;

660 i‡(
	`OCSP_basic_vîify
(
basic
, 
chaö
, 
°‹e
,

661 
°≠À
->
vîify
 ? 
OCSP_TRUSTOTHER
 : 
OCSP_NOVERIFY
)

664 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

666 
îr‹
;

669 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

670 i‡(
id
 =
NULL
) {

671 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

673 
îr‹
;

676 i‡(
	`OCSP_ª•_föd_°©us
(
basic
, 
id
, &
n
, 
NULL
, NULL,

677 &
thisupd©e
, &
√xtupd©e
)

680 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

682 
îr‹
;

685 i‡(
n
 !
V_OCSP_CERTSTATUS_GOOD
) {

686 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

688 
	`OCSP_˚π_°©us_°r
(
n
));

689 
îr‹
;

692 i‡(
	`OCSP_check_vÆidôy
(
thisupd©e
, 
√xtupd©e
, 300, -1) != 1) {

693 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

695 
îr‹
;

698 i‡(
√xtupd©e
) {

699 
vÆid
 = 
	`ngx_s¶_°≠lög_time
(
√xtupd©e
);

700 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

701 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

703 
îr‹
;

707 
vÆid
 = 
NGX_MAX_TIME_T_VALUE
;

710 
	`OCSP_CERTID_‰ì
(
id
);

711 
	`OCSP_BASICRESP_‰ì
(
basic
);

712 
	`OCSP_RESPONSE_‰ì
(
oc•
);

714 
id
 = 
NULL
;

715 
basic
 = 
NULL
;

716 
oc•
 = 
NULL
;

720 
ª•⁄£
.
Àn
 =Üen;

721 
ª•⁄£
.
d©a
 = 
	`ngx_Æloc
‘e•⁄£.
Àn
, 
˘x
->
log
);

723 i‡(
ª•⁄£
.
d©a
 =
NULL
) {

724 
îr‹
;

727 
	`ngx_mem˝y
(
ª•⁄£
.
d©a
, 
˘x
->ª•⁄£->
pos
,Ñe•⁄£.
Àn
);

729 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

731 
	`OCSP_˚π_°©us_°r
(
n
), 
ª•⁄£
.
Àn
);

733 i‡(
°≠À
->°≠À.
d©a
) {

734 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

737 
°≠À
->°≠À = 
ª•⁄£
;

738 
°≠À
->
vÆid
 = valid;

745 
°≠À
->
lﬂdög
 = 0;

746 
°≠À
->
ª‰esh
 = 
	`ngx_max
(
	`ngx_mö
(
vÆid
 - 300, 
now
 + 3600),Çow + 300);

748 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

751 
îr‹
:

753 
°≠À
->
lﬂdög
 = 0;

754 
°≠À
->
ª‰esh
 = 
now
 + 300;

756 i‡(
id
) {

757 
	`OCSP_CERTID_‰ì
(
id
);

760 i‡(
basic
) {

761 
	`OCSP_BASICRESP_‰ì
(
basic
);

764 i‡(
oc•
) {

765 
	`OCSP_RESPONSE_‰ì
(
oc•
);

768 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

769 
	}
}

772 
time_t


773 
	$ngx_s¶_°≠lög_time
(
ASN1_GENERALIZEDTIME
 *
a¢1time
)

775 
BIO
 *
bio
;

776 *
vÆue
;

777 
size_t
 
Àn
;

778 
time_t
 
time
;

787 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

788 i‡(
bio
 =
NULL
) {

789  
NGX_ERROR
;

794 
	`BIO_wrôe
(
bio
, "Tue ", ("Tue ") - 1);

795 
	`ASN1_GENERALIZEDTIME_¥öt
(
bio
, 
a¢1time
);

796 
Àn
 = 
	`BIO_gë_mem_d©a
(
bio
, &
vÆue
);

798 
time
 = 
	`ngx_∑r£_hâp_time
((
u_ch¨
 *Ë
vÆue
, 
Àn
);

800 
	`BIO_‰ì
(
bio
);

802  
time
;

803 
	}
}

807 
	$ngx_s¶_°≠lög_˛ónup
(*
d©a
)

809 
ngx_s¶_°≠lög_t
 *
°≠À
 = 
d©a
;

811 i‡(
°≠À
->
issuî
) {

812 
	`X509_‰ì
(
°≠À
->
issuî
);

815 i‡(
°≠À
->°≠À.
d©a
) {

816 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

818 
	}
}

821 
ngx_s¶_oc•_˘x_t
 *

822 
	$ngx_s¶_oc•_°¨t
()

824 
ngx_log_t
 *
log
;

825 
ngx_poﬁ_t
 *
poﬁ
;

826 
ngx_s¶_oc•_˘x_t
 *
˘x
;

828 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
ngx_cy˛e
->
log
);

829 i‡(
poﬁ
 =
NULL
) {

830  
NULL
;

833 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_s¶_oc•_˘x_t
));

834 i‡(
˘x
 =
NULL
) {

835 
	`ngx_de°roy_poﬁ
(
poﬁ
);

836  
NULL
;

839 
log
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_log_t
));

840 i‡(
log
 =
NULL
) {

841 
	`ngx_de°roy_poﬁ
(
poﬁ
);

842  
NULL
;

845 
˘x
->
poﬁ
 =Öool;

847 *
log
 = *
˘x
->
poﬁ
->log;

849 
˘x
->
poﬁ
->
log
 =Üog;

850 
˘x
->
log
 =Üog;

852 
log
->
h™dÀr
 = 
ngx_s¶_oc•_log_îr‹
;

853 
log
->
d©a
 = 
˘x
;

854 
log
->
a˘i⁄
 = "requesting certificate status";

856  
˘x
;

857 
	}
}

861 
	$ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

863 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

866 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

867 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

870 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

871 
	}
}

875 
	$ngx_s¶_oc•_îr‹
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

877 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

880 
˘x
->
code
 = 0;

881 
˘x
->
	`h™dÀr
(ctx);

882 
	}
}

886 
	$ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

888 
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
, 
ãmp
;

890 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

893 i‡(
	`ngx_s¶_oc•_¸óã_ªque°
(
˘x
Ë!
NGX_OK
) {

894 
	`ngx_s¶_oc•_îr‹
(
˘x
);

898 i‡(
˘x
->
ªsﬁvî
) {

901 
ãmp
.
«me
 = 
˘x
->
ho°
;

903 
ªsﬁve
 = 
	`ngx_ªsﬁve_°¨t
(
˘x
->
ªsﬁvî
, &
ãmp
);

904 i‡(
ªsﬁve
 =
NULL
) {

905 
	`ngx_s¶_oc•_îr‹
(
˘x
);

909 i‡(
ªsﬁve
 =
NGX_NO_RESOLVER
) {

910 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
˘x
->
log
, 0,

911 "nÿªsﬁvî deföedÅÿªsﬁvê%V", &
˘x
->
ho°
);

912 
c⁄√˘
;

915 
ªsﬁve
->
«me
 = 
˘x
->
ho°
;

916 
ªsﬁve
->
h™dÀr
 = 
ngx_s¶_oc•_ªsﬁve_h™dÀr
;

917 
ªsﬁve
->
d©a
 = 
˘x
;

918 
ªsﬁve
->
timeout
 = 
˘x
->
ªsﬁvî_timeout
;

920 i‡(
	`ngx_ªsﬁve_«me
(
ªsﬁve
Ë!
NGX_OK
) {

921 
	`ngx_s¶_oc•_îr‹
(
˘x
);

928 
c⁄√˘
:

930 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

931 
	}
}

935 
	$ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
)

937 
ngx_s¶_oc•_˘x_t
 *
˘x
 = 
ªsﬁve
->
d©a
;

939 
u_ch¨
 *
p
;

940 
size_t
 
Àn
;

941 
sockÀn_t
 
sockÀn
;

942 
ngx_uöt_t
 
i
;

943 
sockaddr
 *sockaddr;

945 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

948 i‡(
ªsﬁve
->
°©e
) {

949 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

951 &
ªsﬁve
->
«me
,Ñesﬁve->
°©e
,

952 
	`ngx_ªsﬁvî_°ªº‹
(
ªsﬁve
->
°©e
));

953 
Áûed
;

956 #i‡(
NGX_DEBUG
)

958 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

959 
ngx_°r_t
 
addr
;

961 
addr
.
d©a
 = 
ãxt
;

963 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

964 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ªsﬁve
->
addrs
[
i
].
sockaddr
,

965 
ªsﬁve
->
addrs
[
i
].
sockÀn
,

966 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

968 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

969 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

975 
˘x
->
«ddrs
 = 
ªsﬁve
->naddrs;

976 
˘x
->
addrs
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
, ctx->
«ddrs
 * (
ngx_addr_t
));

978 i‡(
˘x
->
addrs
 =
NULL
) {

979 
Áûed
;

982 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

984 
sockÀn
 = 
ªsﬁve
->
addrs
[
i
].socklen;

986 
sockaddr
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
sockÀn
);

987 i‡(
sockaddr
 =
NULL
) {

988 
Áûed
;

991 
	`ngx_mem˝y
(
sockaddr
, 
ªsﬁve
->
addrs
[
i
].sockaddr, 
sockÀn
);

992 
	`ngx_öë_£t_p‹t
(
sockaddr
, 
˘x
->
p‹t
);

994 
˘x
->
addrs
[
i
].
sockaddr
 = sockaddr;

995 
˘x
->
addrs
[
i
].
sockÀn
 = socklen;

997 
p
 = 
	`ngx_≤Æloc
(
˘x
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

998 i‡(
p
 =
NULL
) {

999 
Áûed
;

1002 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

1004 
˘x
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1005 
˘x
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1008 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

1010 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

1013 
Áûed
:

1015 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

1016 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1017 
	}
}

1021 
	$ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1023 
ngx_öt_t
 
rc
;

1025 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1030 
˘x
->
≥î
.
sockaddr
 = ctx->
addrs
[0].sockaddr;

1031 
˘x
->
≥î
.
sockÀn
 = ctx->
addrs
[0].socklen;

1032 
˘x
->
≥î
.
«me
 = &˘x->
addrs
[0].name;

1033 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

1034 
˘x
->
≥î
.
log
 = ctx->log;

1035 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

1037 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

1039 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1042 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

1043 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1047 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = ctx;

1048 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = ctx->pool;

1050 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_s¶_oc•_ªad_h™dÀr
;

1051 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_s¶_oc•_wrôe_h™dÀr
;

1053 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_°©us_löe
;

1055 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, ctx->
timeout
);

1056 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, ctx->
timeout
);

1058 i‡(
rc
 =
NGX_OK
) {

1059 
	`ngx_s¶_oc•_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

1062 
	}
}

1066 
	$ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

1068 
ssize_t
 
n
, 
size
;

1069 
ngx_c⁄√˘i⁄_t
 *
c
;

1070 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1072 
c
 = 
wev
->
d©a
;

1073 
˘x
 = 
c
->
d©a
;

1075 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

1078 i‡(
wev
->
timedout
) {

1079 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

1081 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1085 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

1087 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

1089 i‡(
n
 =
NGX_ERROR
) {

1090 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1094 i‡(
n
 > 0) {

1095 
˘x
->
ªque°
->
pos
 +
n
;

1097 i‡(
n
 =
size
) {

1098 
wev
->
h™dÀr
 = 
ngx_s¶_oc•_dummy_h™dÀr
;

1100 i‡(
wev
->
timî_£t
) {

1101 
	`ngx_dñ_timî
(
wev
);

1104 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

1105 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1112 i‡(!
wev
->
timî_£t
) {

1113 
	`ngx_add_timî
(
wev
, 
˘x
->
timeout
);

1115 
	}
}

1119 
	$ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1121 
ssize_t
 
n
, 
size
;

1122 
ngx_öt_t
 
rc
;

1123 
ngx_c⁄√˘i⁄_t
 *
c
;

1124 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1126 
c
 = 
ªv
->
d©a
;

1127 
˘x
 = 
c
->
d©a
;

1129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

1132 i‡(
ªv
->
timedout
) {

1133 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

1135 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1139 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1140 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 16384);

1141 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1142 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1149 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

1151 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
œ°
, 
size
);

1153 i‡(
n
 > 0) {

1154 
˘x
->
ª•⁄£
->
œ°
 +
n
;

1156 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1158 i‡(
rc
 =
NGX_ERROR
) {

1159 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1166 i‡(
n
 =
NGX_AGAIN
) {

1168 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1169 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1178 
˘x
->
d⁄e
 = 1;

1180 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1182 i‡(
rc
 =
NGX_DONE
) {

1187 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1190 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1191 
	}
}

1195 
	$ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1197 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

1199 
	}
}

1202 
ngx_öt_t


1203 
	$ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1205 
Àn
;

1206 
u_ch¨
 *
p
;

1207 
uöçå_t
 
esˇ≥
;

1208 
ngx_°r_t
 
bö¨y
, 
ba£64
;

1209 
ngx_buf_t
 *
b
;

1210 
OCSP_CERTID
 *
id
;

1211 
OCSP_REQUEST
 *
oc•
;

1213 
oc•
 = 
	`OCSP_REQUEST_√w
();

1214 i‡(
oc•
 =
NULL
) {

1215 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1217  
NGX_ERROR
;

1220 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

1221 i‡(
id
 =
NULL
) {

1222 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1224 
Áûed
;

1227 i‡(
	`OCSP_ªque°_add0_id
(
oc•
, 
id
Ë=
NULL
) {

1228 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1230 
	`OCSP_CERTID_‰ì
(
id
);

1231 
Áûed
;

1234 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, 
NULL
);

1235 i‡(
Àn
 <= 0) {

1236 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1238 
Áûed
;

1241 
bö¨y
.
Àn
 =Üen;

1242 
bö¨y
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
Àn
);

1243 i‡(
bö¨y
.
d©a
 =
NULL
) {

1244 
Áûed
;

1247 
p
 = 
bö¨y
.
d©a
;

1248 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, &
p
);

1249 i‡(
Àn
 <= 0) {

1250 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
˘x
->
log
, 0,

1252 
Áûed
;

1255 
ba£64
.
Àn
 = 
	`ngx_ba£64_ícoded_Àngth
(
bö¨y
.len);

1256 
ba£64
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, ba£64.
Àn
);

1257 i‡(
ba£64
.
d©a
 =
NULL
) {

1258 
Áûed
;

1261 
	`ngx_ícode_ba£64
(&
ba£64
, &
bö¨y
);

1263 
esˇ≥
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ba£64
.
d©a
, ba£64.
Àn
,

1264 
NGX_ESCAPE_URI_COMPONENT
);

1266 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1268 
ba£64
.
Àn
, (Ë
esˇ≥
);

1270 
Àn
 = ("GET "Ë- 1 + 
˘x
->
uri
.len + ("/") - 1

1271 + 
ba£64
.
Àn
 + 2 * 
esˇ≥
 + (" HTTP/1.0" 
CRLF
) - 1

1272 + ("Ho°: "Ë- 1 + 
˘x
->
ho°
.
Àn
 + (
CRLF
) - 1

1273 + (
CRLF
) - 1;

1275 
b
 = 
	`ngx_¸óã_ãmp_buf
(
˘x
->
poﬁ
, 
Àn
);

1276 i‡(
b
 =
NULL
) {

1277 
Áûed
;

1280 
p
 = 
b
->
œ°
;

1282 
p
 = 
	`ngx_˝ymem
(p, "GET ", ("GET ") - 1);

1283 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
uri
.
d©a
, ctx->uri.
Àn
);

1285 i‡(
˘x
->
uri
.
d©a
[˘x->uri.
Àn
 - 1] != '/') {

1286 *
p
++ = '/';

1289 i‡(
esˇ≥
 == 0) {

1290 
p
 = 
	`ngx_˝ymem
’, 
ba£64
.
d©a
, ba£64.
Àn
);

1293 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
ba£64
.
d©a
, ba£64.
Àn
,

1294 
NGX_ESCAPE_URI_COMPONENT
);

1297 
p
 = 
	`ngx_˝ymem
’, " HTTP/1.0" 
CRLF
, (" HTTP/1.0" CRLF) - 1);

1298 
p
 = 
	`ngx_˝ymem
(p, "Host: ", ("Host: ") - 1);

1299 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
ho°
.
d©a
, ctx->ho°.
Àn
);

1300 *
p
++ = 
CR
; *p++ = 
LF
;

1303 *
p
++ = 
CR
; *p++ = 
LF
;

1305 
b
->
œ°
 = 
p
;

1306 
˘x
->
ªque°
 = 
b
;

1308 
	`OCSP_REQUEST_‰ì
(
oc•
);

1310  
NGX_OK
;

1312 
Áûed
:

1314 
	`OCSP_REQUEST_‰ì
(
oc•
);

1316  
NGX_ERROR
;

1317 
	}
}

1320 
ngx_öt_t


1321 
	$ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1323 
ngx_öt_t
 
rc
;

1325 
rc
 = 
	`ngx_s¶_oc•_∑r£_°©us_löe
(
˘x
);

1327 i‡(
rc
 =
NGX_OK
) {

1328 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1330 
˘x
->
code
,

1331 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1332 
˘x
->
hódî_°¨t
);

1334 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_hódîs
;

1335  
˘x
->
	`¥o˚ss
(ctx);

1338 i‡(
rc
 =
NGX_AGAIN
) {

1339  
NGX_AGAIN
;

1344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1347  
NGX_ERROR
;

1348 
	}
}

1351 
ngx_öt_t


1352 
	$ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1354 
u_ch¨
 
ch
;

1355 
u_ch¨
 *
p
;

1356 
ngx_buf_t
 *
b
;

1358 
sw_°¨t
 = 0,

1359 
sw_H
,

1360 
sw_HT
,

1361 
sw_HTT
,

1362 
sw_HTTP
,

1363 
sw_fú°_maj‹_digô
,

1364 
sw_maj‹_digô
,

1365 
sw_fú°_mö‹_digô
,

1366 
sw_mö‹_digô
,

1367 
sw_°©us
,

1368 
sw_•a˚_a·î_°©us
,

1369 
sw_°©us_ãxt
,

1370 
sw_Æmo°_d⁄e


1371 } 
°©e
;

1373 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1376 
°©e
 = 
˘x
->state;

1377 
b
 = 
˘x
->
ª•⁄£
;

1379 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1380 
ch
 = *
p
;

1382 
°©e
) {

1385 
sw_°¨t
:

1386 
ch
) {

1388 
°©e
 = 
sw_H
;

1391  
NGX_ERROR
;

1395 
sw_H
:

1396 
ch
) {

1398 
°©e
 = 
sw_HT
;

1401  
NGX_ERROR
;

1405 
sw_HT
:

1406 
ch
) {

1408 
°©e
 = 
sw_HTT
;

1411  
NGX_ERROR
;

1415 
sw_HTT
:

1416 
ch
) {

1418 
°©e
 = 
sw_HTTP
;

1421  
NGX_ERROR
;

1425 
sw_HTTP
:

1426 
ch
) {

1428 
°©e
 = 
sw_fú°_maj‹_digô
;

1431  
NGX_ERROR
;

1436 
sw_fú°_maj‹_digô
:

1437 i‡(
ch
 < '1' || ch > '9') {

1438  
NGX_ERROR
;

1441 
°©e
 = 
sw_maj‹_digô
;

1445 
sw_maj‹_digô
:

1446 i‡(
ch
 == '.') {

1447 
°©e
 = 
sw_fú°_mö‹_digô
;

1451 i‡(
ch
 < '0' || ch > '9') {

1452  
NGX_ERROR
;

1458 
sw_fú°_mö‹_digô
:

1459 i‡(
ch
 < '0' || ch > '9') {

1460  
NGX_ERROR
;

1463 
°©e
 = 
sw_mö‹_digô
;

1467 
sw_mö‹_digô
:

1468 i‡(
ch
 == ' ') {

1469 
°©e
 = 
sw_°©us
;

1473 i‡(
ch
 < '0' || ch > '9') {

1474  
NGX_ERROR
;

1480 
sw_°©us
:

1481 i‡(
ch
 == ' ') {

1485 i‡(
ch
 < '0' || ch > '9') {

1486  
NGX_ERROR
;

1489 
˘x
->
code
 = ctx->codê* 10 + (
ch
 - '0');

1491 i‡(++
˘x
->
cou¡
 == 3) {

1492 
°©e
 = 
sw_•a˚_a·î_°©us
;

1493 
˘x
->
hódî_°¨t
 = 
p
 - 2;

1499 
sw_•a˚_a·î_°©us
:

1500 
ch
) {

1502 
°©e
 = 
sw_°©us_ãxt
;

1505 
°©e
 = 
sw_°©us_ãxt
;

1507 
CR
:

1508 
°©e
 = 
sw_Æmo°_d⁄e
;

1510 
LF
:

1511 
˘x
->
hódî_íd
 = 
p
;

1512 
d⁄e
;

1514  
NGX_ERROR
;

1519 
sw_°©us_ãxt
:

1520 
ch
) {

1521 
CR
:

1522 
°©e
 = 
sw_Æmo°_d⁄e
;

1524 
LF
:

1525 
˘x
->
hódî_íd
 = 
p
;

1526 
d⁄e
;

1531 
sw_Æmo°_d⁄e
:

1532 
ch
) {

1533 
LF
:

1534 
˘x
->
hódî_íd
 = 
p
 - 1;

1535 
d⁄e
;

1537  
NGX_ERROR
;

1542 
b
->
pos
 = 
p
;

1543 
˘x
->
°©e
 = state;

1545  
NGX_AGAIN
;

1547 
d⁄e
:

1549 
b
->
pos
 = 
p
 + 1;

1550 
˘x
->
°©e
 = 
sw_°¨t
;

1552  
NGX_OK
;

1553 
	}
}

1556 
ngx_öt_t


1557 
	$ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1559 
size_t
 
Àn
;

1560 
ngx_öt_t
 
rc
;

1562 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1566 
rc
 = 
	`ngx_s¶_oc•_∑r£_hódî_löe
(
˘x
);

1568 i‡(
rc
 =
NGX_OK
) {

1570 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1572 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
,

1573 
˘x
->
hódî_«me_°¨t
,

1574 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1575 
˘x
->
hódî_°¨t
);

1577 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

1579 i‡(
Àn
 == ("Content-Type") - 1

1580 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

1581 (
u_ch¨
 *) "Content-Type",

1585 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

1587 i‡(
Àn
 != ("application/ocsp-response") - 1

1588 || 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_°¨t
,

1589 (
u_ch¨
 *) "application/ocsp-response",

1593 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1596 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1597 
˘x
->
hódî_°¨t
);

1598  
NGX_ERROR
;

1609 i‡(
rc
 =
NGX_DONE
) {

1613 i‡(
rc
 =
NGX_AGAIN
) {

1614  
NGX_AGAIN
;

1619 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1622  
NGX_ERROR
;

1625 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_body
;

1626  
˘x
->
	`¥o˚ss
(ctx);

1627 
	}
}

1630 
ngx_öt_t


1631 
	$ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1633 
u_ch¨
 
c
, 
ch
, *
p
;

1635 
sw_°¨t
 = 0,

1636 
sw_«me
,

1637 
sw_•a˚_bef‹e_vÆue
,

1638 
sw_vÆue
,

1639 
sw_•a˚_a·î_vÆue
,

1640 
sw_Æmo°_d⁄e
,

1641 
sw_hódî_Æmo°_d⁄e


1642 } 
°©e
;

1644 
°©e
 = 
˘x
->state;

1646 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

1647 
ch
 = *
p
;

1650 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1651 "s:%d in:'%02Xd:%c'", 
°©e
, 
ch
, ch);

1654 
°©e
) {

1657 
sw_°¨t
:

1659 
ch
) {

1660 
CR
:

1661 
˘x
->
hódî_íd
 = 
p
;

1662 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

1664 
LF
:

1665 
˘x
->
hódî_íd
 = 
p
;

1666 
hódî_d⁄e
;

1668 
°©e
 = 
sw_«me
;

1669 
˘x
->
hódî_«me_°¨t
 = 
p
;

1671 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1672 i‡(
c
 >= 'a' && c <= 'z') {

1676 i‡(
ch
 >= '0' && ch <= '9') {

1680  
NGX_ERROR
;

1685 
sw_«me
:

1686 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1687 i‡(
c
 >= 'a' && c <= 'z') {

1691 i‡(
ch
 == ':') {

1692 
˘x
->
hódî_«me_íd
 = 
p
;

1693 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

1697 i‡(
ch
 == '-') {

1701 i‡(
ch
 >= '0' && ch <= '9') {

1705 i‡(
ch
 =
CR
) {

1706 
˘x
->
hódî_«me_íd
 = 
p
;

1707 
˘x
->
hódî_°¨t
 = 
p
;

1708 
˘x
->
hódî_íd
 = 
p
;

1709 
°©e
 = 
sw_Æmo°_d⁄e
;

1713 i‡(
ch
 =
LF
) {

1714 
˘x
->
hódî_«me_íd
 = 
p
;

1715 
˘x
->
hódî_°¨t
 = 
p
;

1716 
˘x
->
hódî_íd
 = 
p
;

1717 
d⁄e
;

1720  
NGX_ERROR
;

1723 
sw_•a˚_bef‹e_vÆue
:

1724 
ch
) {

1727 
CR
:

1728 
˘x
->
hódî_°¨t
 = 
p
;

1729 
˘x
->
hódî_íd
 = 
p
;

1730 
°©e
 = 
sw_Æmo°_d⁄e
;

1732 
LF
:

1733 
˘x
->
hódî_°¨t
 = 
p
;

1734 
˘x
->
hódî_íd
 = 
p
;

1735 
d⁄e
;

1737 
˘x
->
hódî_°¨t
 = 
p
;

1738 
°©e
 = 
sw_vÆue
;

1744 
sw_vÆue
:

1745 
ch
) {

1747 
˘x
->
hódî_íd
 = 
p
;

1748 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1750 
CR
:

1751 
˘x
->
hódî_íd
 = 
p
;

1752 
°©e
 = 
sw_Æmo°_d⁄e
;

1754 
LF
:

1755 
˘x
->
hódî_íd
 = 
p
;

1756 
d⁄e
;

1761 
sw_•a˚_a·î_vÆue
:

1762 
ch
) {

1765 
CR
:

1766 
°©e
 = 
sw_Æmo°_d⁄e
;

1768 
LF
:

1769 
d⁄e
;

1771 
°©e
 = 
sw_vÆue
;

1777 
sw_Æmo°_d⁄e
:

1778 
ch
) {

1779 
LF
:

1780 
d⁄e
;

1782  
NGX_ERROR
;

1786 
sw_hódî_Æmo°_d⁄e
:

1787 
ch
) {

1788 
LF
:

1789 
hódî_d⁄e
;

1791  
NGX_ERROR
;

1796 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1797 
˘x
->
°©e
 = state;

1799  
NGX_AGAIN
;

1801 
d⁄e
:

1803 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1804 
˘x
->
°©e
 = 
sw_°¨t
;

1806  
NGX_OK
;

1808 
hódî_d⁄e
:

1810 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1811 
˘x
->
°©e
 = 
sw_°¨t
;

1813  
NGX_DONE
;

1814 
	}
}

1817 
ngx_öt_t


1818 
	$ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1820 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1823 i‡(
˘x
->
d⁄e
) {

1824 
˘x
->
	`h™dÀr
(ctx);

1825  
NGX_DONE
;

1828  
NGX_AGAIN
;

1829 
	}
}

1832 
u_ch¨
 *

1833 
	$ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

1835 
u_ch¨
 *
p
;

1836 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1838 
p
 = 
buf
;

1840 i‡(
log
->
a˘i⁄
) {

1841 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

1842 
Àn
 -
p
 - 
buf
;

1843 
buf
 = 
p
;

1846 
˘x
 = 
log
->
d©a
;

1848 i‡(
˘x
) {

1849 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñe•⁄dî: %V", &
˘x
->
ho°
);

1850 
Àn
 -
p
 - 
buf
;

1851 
buf
 = 
p
;

1854 i‡(
˘x
 && ctx->
≥î
.
«me
) {

1855 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Öìr: %V", 
˘x
->
≥î
.
«me
);

1856 
Àn
 -
p
 - 
buf
;

1857 
buf
 = 
p
;

1860 i‡(
˘x
 && ctx->
«me
) {

1861 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", cîtifiˇã: \"%s\"", 
˘x
->
«me
);

1862 
Àn
 -
p
 - 
buf
;

1863 
buf
 = 
p
;

1866  
p
;

1867 
	}
}

1873 
ngx_öt_t


1874 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

1875 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

1877 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

1880  
NGX_OK
;

1881 
	}
}

1884 
ngx_öt_t


1885 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

1886 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

1888  
NGX_OK
;

1889 
	}
}

	@src/event/ngx_event_pipe.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_pùe.h
>

14 
ngx_öt_t
 
ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
);

15 
ngx_öt_t
 
ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
);

17 
ngx_öt_t
 
ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
);

18 
ngx_ölöe
 
ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
);

19 
ngx_öt_t
 
ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
);

22 
ngx_öt_t


23 
	$ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
, 
ngx_öt_t
 
do_wrôe
)

25 
ngx_öt_t
 
rc
;

26 
ngx_uöt_t
 
Êags
;

27 
ngx_evít_t
 *
ªv
, *
wev
;

30 i‡(
do_wrôe
) {

31 
p
->
log
->
a˘i⁄
 = "sendingÅo client";

33 
rc
 = 
	`ngx_evít_pùe_wrôe_to_down°ªam
(
p
);

35 i‡(
rc
 =
NGX_ABORT
) {

36  
NGX_ABORT
;

39 i‡(
rc
 =
NGX_BUSY
) {

40  
NGX_OK
;

44 
p
->
ªad
 = 0;

45 
p
->
up°ªam_blocked
 = 0;

47 
p
->
log
->
a˘i⁄
 = "reading upstream";

49 i‡(
	`ngx_evít_pùe_ªad_up°ªam
(
p
Ë=
NGX_ABORT
) {

50  
NGX_ABORT
;

53 i‡(!
p
->
ªad
 && !p->
up°ªam_blocked
) {

57 
do_wrôe
 = 1;

60 i‡(
p
->
up°ªam
->
fd
 !(
ngx_sockë_t
) -1) {

61 
ªv
 = 
p
->
up°ªam
->
ªad
;

63 
Êags
 = (
ªv
->
eof
 ||Ñev->
îr‹
Ë? 
NGX_CLOSE_EVENT
 : 0;

65 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 
Êags
Ë!
NGX_OK
) {

66  
NGX_ABORT
;

69 i‡(!
ªv
->
dñayed
) {

70 i‡(
ªv
->
a˘ive
 && !ªv->
ªady
) {

71 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

73 } i‡(
ªv
->
timî_£t
) {

74 
	`ngx_dñ_timî
(
ªv
);

79 i‡(
p
->
down°ªam
->
fd
 !(
ngx_sockë_t
) -1

80 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x
)

82 
wev
 = 
p
->
down°ªam
->
wrôe
;

83 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

84  
NGX_ABORT
;

87 i‡(!
wev
->
dñayed
) {

88 i‡(
wev
->
a˘ive
 && !wev->
ªady
) {

89 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

91 } i‡(
wev
->
timî_£t
) {

92 
	`ngx_dñ_timî
(
wev
);

97  
NGX_OK
;

98 
	}
}

101 
ngx_öt_t


102 
	$ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
)

104 
off_t
 
limô
;

105 
ssize_t
 
n
, 
size
;

106 
ngx_öt_t
 
rc
;

107 
ngx_buf_t
 *
b
;

108 
ngx_m£c_t
 
dñay
;

109 
ngx_chaö_t
 *
chaö
, *
˛
, *
 
;

111 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

112  
NGX_OK
;

115 #i‡(
NGX_THREADS
)

117 i‡(
p
->
aio
) {

118 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

120  
NGX_AGAIN
;

123 i‡(
p
->
wrôög
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

127 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

129 i‡(
rc
 !
NGX_OK
) {

130  
rc
;

136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

137 "pùêªad up°ªam: %d", 
p
->
up°ªam
->
ªad
->
ªady
);

141 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

145 i‡(
p
->
¥îód_bufs
 =
NULL
 && !p->
up°ªam
->
ªad
->
ªady
) {

149 i‡(
p
->
¥îód_bufs
) {

153 
chaö
 = 
p
->
¥îód_bufs
;

154 
p
->
¥îód_bufs
 = 
NULL
;

155 
n
 = 
p
->
¥îód_size
;

157 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

158 "pùê¥îód: %z", 
n
);

160 i‡(
n
) {

161 
p
->
ªad
 = 1;

166 #i‡(
NGX_HAVE_KQUEUE
)

174 i‡(
p
->
up°ªam
->
ªad
->
avaûabÀ
 == 0

175 && 
p
->
up°ªam
->
ªad
->
≥ndög_eof
)

177 
p
->
up°ªam
->
ªad
->
ªady
 = 0;

178 
p
->
up°ªam
->
ªad
->
eof
 = 1;

179 
p
->
up°ªam_eof
 = 1;

180 
p
->
ªad
 = 1;

182 i‡(
p
->
up°ªam
->
ªad
->
kq_î∫o
) {

183 
p
->
up°ªam
->
ªad
->
îr‹
 = 1;

184 
p
->
up°ªam_îr‹
 = 1;

185 
p
->
up°ªam_eof
 = 0;

187 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
,

188 
p
->
up°ªam
->
ªad
->
kq_î∫o
,

197 i‡(
p
->
limô_øã
) {

198 i‡(
p
->
up°ªam
->
ªad
->
dñayed
) {

202 
limô
 = (
off_t
Ë
p
->
limô_øã
 * (
	`ngx_time
(Ë-Ö->
°¨t_£c
 + 1)

203 - 
p
->
ªad_Àngth
;

205 i‡(
limô
 <= 0) {

206 
p
->
up°ªam
->
ªad
->
dñayed
 = 1;

207 
dñay
 = (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
p
->
limô_øã
 + 1);

208 
	`ngx_add_timî
(
p
->
up°ªam
->
ªad
, 
dñay
);

213 
limô
 = 0;

216 i‡(
p
->
‰ì_øw_bufs
) {

220 
chaö
 = 
p
->
‰ì_øw_bufs
;

221 i‡(
p
->
sögÀ_buf
) {

222 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

223 
chaö
->
√xt
 = 
NULL
;

225 
p
->
‰ì_øw_bufs
 = 
NULL
;

228 } i‡(
p
->
Æloˇãd
 <Ö->
bufs
.
num
) {

232 
b
 = 
	`ngx_¸óã_ãmp_buf
(
p
->
poﬁ
,Ö->
bufs
.
size
);

233 i‡(
b
 =
NULL
) {

234  
NGX_ABORT
;

237 
p
->
Æloˇãd
++;

239 
chaö
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

240 i‡(
chaö
 =
NULL
) {

241  
NGX_ABORT
;

244 
chaö
->
buf
 = 
b
;

245 
chaö
->
√xt
 = 
NULL
;

247 } i‡(!
p
->
ˇchóbÀ


248 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x


249 && 
p
->
down°ªam
->
wrôe
->
ªady


250 && !
p
->
down°ªam
->
wrôe
->
dñayed
)

257 
p
->
up°ªam_blocked
 = 1;

259 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

264 } i‡(
p
->
ˇchóbÀ


265 || 
p
->
ãmp_fûe
->
off£t
 <Ö->
max_ãmp_fûe_size
)

273 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

276 "pùêãm∞off£t: %O", 
p
->
ãmp_fûe
->
off£t
);

278 i‡(
rc
 =
NGX_BUSY
) {

282 i‡(
rc
 !
NGX_OK
) {

283  
rc
;

286 
chaö
 = 
p
->
‰ì_øw_bufs
;

287 i‡(
p
->
sögÀ_buf
) {

288 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

289 
chaö
->
√xt
 = 
NULL
;

291 
p
->
‰ì_øw_bufs
 = 
NULL
;

298 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

304 
n
 = 
p
->
up°ªam
->
	`ªcv_chaö
’->up°ªam, 
chaö
, 
limô
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

307 "pùêªcv chaö: %z", 
n
);

309 i‡(
p
->
‰ì_øw_bufs
) {

310 
chaö
->
√xt
 = 
p
->
‰ì_øw_bufs
;

312 
p
->
‰ì_øw_bufs
 = 
chaö
;

314 i‡(
n
 =
NGX_ERROR
) {

315 
p
->
up°ªam_îr‹
 = 1;

319 i‡(
n
 =
NGX_AGAIN
) {

320 i‡(
p
->
sögÀ_buf
) {

321 
	`ngx_evít_pùe_ªmove_shadow_löks
(
chaö
->
buf
);

327 
p
->
ªad
 = 1;

329 i‡(
n
 == 0) {

330 
p
->
up°ªam_eof
 = 1;

335 
dñay
 = 
p
->
limô_øã
 ? (
ngx_m£c_t
Ë
n
 * 1000 /Ö->limit_rate : 0;

337 
p
->
ªad_Àngth
 +
n
;

338 
˛
 = 
chaö
;

339 
p
->
‰ì_øw_bufs
 = 
NULL
;

341 
˛
 && 
n
 > 0) {

343 
	`ngx_evít_pùe_ªmove_shadow_löks
(
˛
->
buf
);

345 
size
 = 
˛
->
buf
->
íd
 - cl->buf->
œ°
;

347 i‡(
n
 >
size
) {

348 
˛
->
buf
->
œ°
 = cl->buf->
íd
;

350  
˛
->
buf
->
num
 = 
p
->num++;

352 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

353  
NGX_ABORT
;

356 
n
 -
size
;

357 
 
 = 
˛
;

358 
˛
 = cl->
√xt
;

359 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
 
);

362 
˛
->
buf
->
œ°
 +
n
;

363 
n
 = 0;

367 i‡(
˛
) {

368 
 
 = 
˛
;Ün->
√xt
;Ün =Ün->next) { }

370 
 
->
√xt
 = 
p
->
‰ì_øw_bufs
;

371 
p
->
‰ì_øw_bufs
 = 
˛
;

374 i‡(
dñay
 > 0) {

375 
p
->
up°ªam
->
ªad
->
dñayed
 = 1;

376 
	`ngx_add_timî
(
p
->
up°ªam
->
ªad
, 
dñay
);

381 #i‡(
NGX_DEBUG
)

383 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

384 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

388 (
˛
->
buf
->
shadow
 ? 1 : 0),

389 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

390 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

391 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

392 
˛
->
buf
->
fûe_pos
,

393 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

396 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

397 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

401 (
˛
->
buf
->
shadow
 ? 1 : 0),

402 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

403 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

404 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

405 
˛
->
buf
->
fûe_pos
,

406 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

409 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

410 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

414 (
˛
->
buf
->
shadow
 ? 1 : 0),

415 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

416 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

417 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

418 
˛
->
buf
->
fûe_pos
,

419 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

422 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

423 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

427 (
˛
->
buf
->
shadow
 ? 1 : 0),

428 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

429 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

430 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

431 
˛
->
buf
->
fûe_pos
,

432 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

436 "pùêÀngth: %O", 
p
->
Àngth
);

440 i‡(
p
->
‰ì_øw_bufs
 &&Ö->
Àngth
 != -1) {

441 
˛
 = 
p
->
‰ì_øw_bufs
;

443 i‡(
˛
->
buf
->
œ°
 - cl->buf->
pos
 >
p
->
Àngth
) {

445 
p
->
‰ì_øw_bufs
 = 
˛
->
√xt
;

447  
˛
->
buf
->
num
 = 
p
->num++;

449 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

450  
NGX_ABORT
;

453 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

457 i‡(
p
->
Àngth
 == 0) {

458 
p
->
up°ªam_d⁄e
 = 1;

459 
p
->
ªad
 = 1;

462 i‡((
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
Ë&&Ö->
‰ì_øw_bufs
) {

464  
p
->
‰ì_øw_bufs
->
buf
->
num
 =Ö->num++;

466 i‡(
p
->
	`öput_fûãr
’,Ö->
‰ì_øw_bufs
->
buf
Ë=
NGX_ERROR
) {

467  
NGX_ABORT
;

470 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

472 i‡(
p
->
‰ì_bufs
 &&Ö->
buf_to_fûe
 =
NULL
) {

473 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

474 i‡(
˛
->
buf
->
shadow
 =
NULL
) {

475 
	`ngx_p‰ì
(
p
->
poﬁ
, 
˛
->
buf
->
°¨t
);

481 i‡(
p
->
ˇchóbÀ
 && (p->
ö
 ||Ö->
buf_to_fûe
)) {

483 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

486 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

488 i‡(
rc
 !
NGX_OK
) {

489  
rc
;

493  
NGX_OK
;

494 
	}
}

497 
ngx_öt_t


498 
	$ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
)

500 
u_ch¨
 *
¥ev
;

501 
size_t
 
bsize
;

502 
ngx_öt_t
 
rc
;

503 
ngx_uöt_t
 
Êush
, 
Êushed
, 
¥ev_œ°_shadow
;

504 
ngx_chaö_t
 *
out
, **
Œ
, *
˛
;

505 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

507 
down°ªam
 = 
p
->downstream;

509 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

510 "pùêwrôêdown°ªam: %d", 
down°ªam
->
wrôe
->
ªady
);

512 #i‡(
NGX_THREADS
)

514 i‡(
p
->
wrôög
) {

515 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

517 i‡(
rc
 =
NGX_ABORT
) {

518  
NGX_ABORT
;

524 
Êushed
 = 0;

527 i‡(
p
->
down°ªam_îr‹
) {

528  
	`ngx_evít_pùe_døö_chaös
(
p
);

531 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

535 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

536 
˛
->
buf
->
ªcy˛ed
 = 0;

539 i‡(
p
->
out
) {

540 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

543 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

544 
˛
->
buf
->
ªcy˛ed
 = 0;

547 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
out
);

549 i‡(
rc
 =
NGX_ERROR
) {

550 
p
->
down°ªam_îr‹
 = 1;

551  
	`ngx_evít_pùe_døö_chaös
(
p
);

554 
p
->
out
 = 
NULL
;

557 i‡(
p
->
wrôög
) {

561 i‡(
p
->
ö
) {

562 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

565 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

566 
˛
->
buf
->
ªcy˛ed
 = 0;

569 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
ö
);

571 i‡(
rc
 =
NGX_ERROR
) {

572 
p
->
down°ªam_îr‹
 = 1;

573  
	`ngx_evít_pùe_døö_chaös
(
p
);

576 
p
->
ö
 = 
NULL
;

579 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

584 
p
->
down°ªam_d⁄e
 = 1;

588 i‡(
down°ªam
->
d©a
 !
p
->
ouçut_˘x


589 || !
down°ªam
->
wrôe
->
ªady


590 || 
down°ªam
->
wrôe
->
dñayed
)

597 
¥ev
 = 
NULL
;

598 
bsize
 = 0;

600 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

602 i‡(
˛
->
buf
->
ªcy˛ed
) {

603 i‡(
¥ev
 =
˛
->
buf
->
°¨t
) {

607 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

608 
¥ev
 = 
˛
->
buf
->
°¨t
;

612 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

613 "pùêwrôêbusy: %uz", 
bsize
);

615 
out
 = 
NULL
;

617 i‡(
bsize
 >(
size_t
Ë
p
->
busy_size
) {

618 
Êush
 = 1;

619 
Êush
;

622 
Êush
 = 0;

623 
Œ
 = 
NULL
;

624 
¥ev_œ°_shadow
 = 1;

627 i‡(
p
->
out
) {

628 
˛
 = 
p
->
out
;

630 i‡(
˛
->
buf
->
ªcy˛ed
) {

631 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
p
->
log
, 0,

635 
p
->
out
 =Ö->out->
√xt
;

637 } i‡(!
p
->
ˇchóbÀ
 && !p->
wrôög
 &&Ö->
ö
) {

638 
˛
 = 
p
->
ö
;

640 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

642 
˛
->
buf
->
œ°_shadow
,

643 
˛
->
buf
->
pos
,

644 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

646 i‡(
˛
->
buf
->
ªcy˛ed
 && 
¥ev_œ°_shadow
) {

647 i‡(
bsize
 + 
˛
->
buf
->
íd
 - cl->buf->
°¨t
 > 
p
->
busy_size
) {

648 
Êush
 = 1;

652 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

655 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

657 
p
->
ö
 =Ö->ö->
√xt
;

663 
˛
->
√xt
 = 
NULL
;

665 i‡(
out
) {

666 *
Œ
 = 
˛
;

668 
out
 = 
˛
;

670 
Œ
 = &
˛
->
√xt
;

673 
Êush
:

675 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

676 "pùêwrôe: out:%p, f:%ui", 
out
, 
Êush
);

678 i‡(
out
 =
NULL
) {

680 i‡(!
Êush
) {

685 i‡(
Êushed
++ > 10) {

686  
NGX_BUSY
;

690 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
, 
out
);

692 
	`ngx_chaö_upd©e_chaös
(
p
->
poﬁ
, &p->
‰ì
, &p->
busy
, &
out
,Ö->
èg
);

694 i‡(
rc
 =
NGX_ERROR
) {

695 
p
->
down°ªam_îr‹
 = 1;

696  
	`ngx_evít_pùe_døö_chaös
(
p
);

699 
˛
 = 
p
->
‰ì
; cl; c»˛->
√xt
) {

701 i‡(
˛
->
buf
->
ãmp_fûe
) {

702 i‡(
p
->
ˇchóbÀ
 || !p->
cy˛ic_ãmp_fûe
) {

708 i‡(
˛
->
buf
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

709 
p
->
ãmp_fûe
->
off£t
 = 0;

717 i‡(
˛
->
buf
->
œ°_shadow
) {

718 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

719  
NGX_ABORT
;

722 
˛
->
buf
->
œ°_shadow
 = 0;

725 
˛
->
buf
->
shadow
 = 
NULL
;

729  
NGX_OK
;

730 
	}
}

733 
ngx_öt_t


734 
	$ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
)

736 
ssize_t
 
size
, 
bsize
, 
n
;

737 
ngx_buf_t
 *
b
;

738 
ngx_uöt_t
 
¥ev_œ°_shadow
;

739 
ngx_chaö_t
 *
˛
, *
é
, *
√xt
, *
out
, **
Œ
, **
œ°_out
, **
œ°_‰ì
;

741 #i‡(
NGX_THREADS
)

743 i‡(
p
->
wrôög
) {

745 i‡(
p
->
aio
) {

746  
NGX_AGAIN
;

749 
out
 = 
p
->
wrôög
;

750 
p
->
wrôög
 = 
NULL
;

752 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
NULL
);

754 i‡(
n
 =
NGX_ERROR
) {

755  
NGX_ABORT
;

758 
d⁄e
;

763 i‡(
p
->
buf_to_fûe
) {

764 
out
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

765 i‡(
out
 =
NULL
) {

766  
NGX_ABORT
;

769 
out
->
buf
 = 
p
->
buf_to_fûe
;

770 
out
->
√xt
 = 
p
->
ö
;

773 
out
 = 
p
->
ö
;

776 i‡(!
p
->
ˇchóbÀ
) {

778 
size
 = 0;

779 
˛
 = 
out
;

780 
Œ
 = 
NULL
;

781 
¥ev_œ°_shadow
 = 1;

783 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

784 "pùêoff£t: %O", 
p
->
ãmp_fûe
->
off£t
);

787 
bsize
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

789 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

791 
˛
->
buf
->
œ°_shadow
, cl->buf->
°¨t
,

792 
˛
->
buf
->
pos
, 
bsize
);

794 i‡(
¥ev_œ°_shadow


795 && ((
size
 + 
bsize
 > 
p
->
ãmp_fûe_wrôe_size
)

796 || (
p
->
ãmp_fûe
->
off£t
 + 
size
 + 
bsize


797 > 
p
->
max_ãmp_fûe_size
)))

802 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

804 
size
 +
bsize
;

805 
Œ
 = &
˛
->
√xt
;

806 
˛
 = cl->
√xt
;

808 } 
˛
);

810 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "size: %z", 
size
);

812 i‡(
Œ
 =
NULL
) {

813  
NGX_BUSY
;

816 i‡(
˛
) {

817 
p
->
ö
 = 
˛
;

818 *
Œ
 = 
NULL
;

821 
p
->
ö
 = 
NULL
;

822 
p
->
œ°_ö
 = &p->
ö
;

826 
p
->
ö
 = 
NULL
;

827 
p
->
œ°_ö
 = &p->
ö
;

830 #i‡(
NGX_THREADS
)

831 i‡(
p
->
thªad_h™dÀr
) {

832 
p
->
ãmp_fûe
->
thªad_wrôe
 = 1;

833 
p
->
ãmp_fûe
->
fûe
.
thªad_èsk
 =Ö->thread_task;

834 
p
->
ãmp_fûe
->
fûe
.
thªad_h™dÀr
 =Ö->thread_handler;

835 
p
->
ãmp_fûe
->
fûe
.
thªad_˘x
 =Ö->thread_ctx;

839 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
out
);

841 i‡(
n
 =
NGX_ERROR
) {

842  
NGX_ABORT
;

845 #i‡(
NGX_THREADS
)

847 i‡(
n
 =
NGX_AGAIN
) {

848 
p
->
wrôög
 = 
out
;

849 
p
->
thªad_èsk
 =Ö->
ãmp_fûe
->
fûe
.thread_task;

850  
NGX_AGAIN
;

853 
d⁄e
:

857 i‡(
p
->
buf_to_fûe
) {

858 
p
->
ãmp_fûe
->
off£t
 =Ö->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

859 
n
 -
p
->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

860 
p
->
buf_to_fûe
 = 
NULL
;

861 
out
 = out->
√xt
;

864 i‡(
n
 > 0) {

867 i‡(
p
->
out
) {

868 
˛
 = 
p
->
out
; cl->
√xt
; cl = cl->next) { }

870 
b
 = 
˛
->
buf
;

872 i‡(
b
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

873 
p
->
ãmp_fûe
->
off£t
 +
n
;

874 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

875 
‰ì
;

878 
œ°_out
 = &
˛
->
√xt
;

881 
œ°_out
 = &
p
->
out
;

884 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

885 i‡(
˛
 =
NULL
) {

886  
NGX_ABORT
;

889 
b
 = 
˛
->
buf
;

891 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

893 
b
->
èg
 = 
p
->tag;

895 
b
->
fûe
 = &
p
->
ãmp_fûe
->file;

896 
b
->
fûe_pos
 = 
p
->
ãmp_fûe
->
off£t
;

897 
p
->
ãmp_fûe
->
off£t
 +
n
;

898 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

900 
b
->
ö_fûe
 = 1;

901 
b
->
ãmp_fûe
 = 1;

903 *
œ°_out
 = 
˛
;

906 
‰ì
:

908 
œ°_‰ì
 = &
p
->
‰ì_øw_bufs
;

909 *
œ°_‰ì
 !
NULL
;

910 
œ°_‰ì
 = &(*œ°_‰ì)->
√xt
)

915 
˛
 = 
out
; cl; c»
√xt
) {

916 
√xt
 = 
˛
->next;

918 
˛
->
√xt
 = 
p
->
‰ì
;

919 
p
->
‰ì
 = 
˛
;

921 
b
 = 
˛
->
buf
;

923 i‡(
b
->
œ°_shadow
) {

925 
é
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

926 i‡(
é
 =
NULL
) {

927  
NGX_ABORT
;

930 
é
->
buf
 = 
b
->
shadow
;

931 
é
->
√xt
 = 
NULL
;

933 *
œ°_‰ì
 = 
é
;

934 
œ°_‰ì
 = &
é
->
√xt
;

936 
b
->
shadow
->
pos
 = b->shadow->
°¨t
;

937 
b
->
shadow
->
œ°
 = b->shadow->
°¨t
;

939 
	`ngx_evít_pùe_ªmove_shadow_löks
(
b
->
shadow
);

943  
NGX_OK
;

944 
	}
}

949 
ngx_öt_t


950 
	$ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

952 
ngx_buf_t
 *
b
;

953 
ngx_chaö_t
 *
˛
;

955 i‡(
buf
->
pos
 =buf->
œ°
) {

956  
NGX_OK
;

959 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

960 i‡(
˛
 =
NULL
) {

961  
NGX_ERROR
;

964 
b
 = 
˛
->
buf
;

966 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

967 
b
->
shadow
 = 
buf
;

968 
b
->
èg
 = 
p
->tag;

969 
b
->
œ°_shadow
 = 1;

970 
b
->
ªcy˛ed
 = 1;

971 
buf
->
shadow
 = 
b
;

973 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

975 i‡(
p
->
ö
) {

976 *
p
->
œ°_ö
 = 
˛
;

978 
p
->
ö
 = 
˛
;

980 
p
->
œ°_ö
 = &
˛
->
√xt
;

982 i‡(
p
->
Àngth
 == -1) {

983  
NGX_OK
;

986 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

988  
NGX_OK
;

989 
	}
}

992 
ngx_ölöe
 

993 
	$ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
)

995 
ngx_buf_t
 *
b
, *
√xt
;

997 
b
 = 
buf
->
shadow
;

999 i‡(
b
 =
NULL
) {

1003 !
b
->
œ°_shadow
) {

1004 
√xt
 = 
b
->
shadow
;

1006 
b
->
ãmp‹¨y
 = 0;

1007 
b
->
ªcy˛ed
 = 0;

1009 
b
->
shadow
 = 
NULL
;

1010 
b
 = 
√xt
;

1013 
b
->
ãmp‹¨y
 = 0;

1014 
b
->
ªcy˛ed
 = 0;

1015 
b
->
œ°_shadow
 = 0;

1017 
b
->
shadow
 = 
NULL
;

1019 
buf
->
shadow
 = 
NULL
;

1020 
	}
}

1023 
ngx_öt_t


1024 
	$ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
)

1026 
ngx_chaö_t
 *
˛
;

1028 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1029 i‡(
˛
 =
NULL
) {

1030  
NGX_ERROR
;

1033 i‡(
p
->
buf_to_fûe
 && 
b
->
°¨t
 ==Ö->buf_to_file->start) {

1034 
b
->
pos
 = 
p
->
buf_to_fûe
->
œ°
;

1035 
b
->
œ°
 = 
p
->
buf_to_fûe
->last;

1038 
b
->
pos
 = b->
°¨t
;

1039 
b
->
œ°
 = b->
°¨t
;

1042 
b
->
shadow
 = 
NULL
;

1044 
˛
->
buf
 = 
b
;

1046 i‡(
p
->
‰ì_øw_bufs
 =
NULL
) {

1047 
p
->
‰ì_øw_bufs
 = 
˛
;

1048 
˛
->
√xt
 = 
NULL
;

1050  
NGX_OK
;

1053 i‡(
p
->
‰ì_øw_bufs
->
buf
->
pos
 =p->‰ì_øw_bufs->buf->
œ°
) {

1057 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
;

1058 
p
->
‰ì_øw_bufs
 = 
˛
;

1060  
NGX_OK
;

1065 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
->next;

1066 
p
->
‰ì_øw_bufs
->
√xt
 = 
˛
;

1068  
NGX_OK
;

1069 
	}
}

1072 
ngx_öt_t


1073 
	$ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
)

1075 
ngx_chaö_t
 *
˛
, *
é
;

1078 i‡(
p
->
busy
) {

1079 
˛
 = 
p
->
busy
;

1080 
p
->
busy
 = 
NULL
;

1082 } i‡(
p
->
out
) {

1083 
˛
 = 
p
->
out
;

1084 
p
->
out
 = 
NULL
;

1086 } i‡(
p
->
ö
) {

1087 
˛
 = 
p
->
ö
;

1088 
p
->
ö
 = 
NULL
;

1091  
NGX_OK
;

1094 
˛
) {

1095 i‡(
˛
->
buf
->
œ°_shadow
) {

1096 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

1097  
NGX_ABORT
;

1100 
˛
->
buf
->
œ°_shadow
 = 0;

1103 
˛
->
buf
->
shadow
 = 
NULL
;

1104 
é
 = 
˛
->
√xt
;

1105 
˛
->
√xt
 = 
p
->
‰ì
;

1106 
p
->
‰ì
 = 
˛
;

1107 
˛
 = 
é
;

1110 
	}
}

	@src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
wrôög
;

35 
ngx_chaö_t
 *
out
;

36 
ngx_chaö_t
 *
‰ì
;

37 
ngx_chaö_t
 *
busy
;

44 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

45 *
öput_˘x
;

47 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

48 *
ouçut_˘x
;

50 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

51 
	`ngx_öt_t
 (*
thªad_h™dÀr
)(
ngx_thªad_èsk_t
 *
èsk
,

52 
ngx_fûe_t
 *
fûe
);

53 *
thªad_˘x
;

54 
ngx_thªad_èsk_t
 *
thªad_èsk
;

57 
ªad
:1;

58 
ˇchóbÀ
:1;

59 
sögÀ_buf
:1;

60 
‰ì_bufs
:1;

61 
up°ªam_d⁄e
:1;

62 
up°ªam_îr‹
:1;

63 
up°ªam_eof
:1;

64 
up°ªam_blocked
:1;

65 
down°ªam_d⁄e
:1;

66 
down°ªam_îr‹
:1;

67 
cy˛ic_ãmp_fûe
:1;

68 
aio
:1;

70 
ngx_öt_t
 
Æloˇãd
;

71 
ngx_bufs_t
 
bufs
;

72 
ngx_buf_èg_t
 
èg
;

74 
ssize_t
 
busy_size
;

76 
off_t
 
ªad_Àngth
;

77 
off_t
 
Àngth
;

79 
off_t
 
max_ãmp_fûe_size
;

80 
ssize_t
 
ãmp_fûe_wrôe_size
;

82 
ngx_m£c_t
 
ªad_timeout
;

83 
ngx_m£c_t
 
£nd_timeout
;

84 
ssize_t
 
£nd_low©
;

86 
ngx_poﬁ_t
 *
poﬁ
;

87 
ngx_log_t
 *
log
;

89 
ngx_chaö_t
 *
¥îód_bufs
;

90 
size_t
 
¥îód_size
;

91 
ngx_buf_t
 *
buf_to_fûe
;

93 
size_t
 
limô_øã
;

94 
time_t
 
°¨t_£c
;

96 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

98  
num
;

102 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

103 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

104 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@src/event/ngx_event_posted.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_queue_t
 
	gngx_po°ed_ac˚±_evíts
;

14 
ngx_queue_t
 
	gngx_po°ed_evíts
;

18 
	$ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_queue_t
 *
po°ed
)

20 
ngx_queue_t
 *
q
;

21 
ngx_evít_t
 *
ev
;

23 !
	`ngx_queue_em±y
(
po°ed
)) {

25 
q
 = 
	`ngx_queue_hód
(
po°ed
);

26 
ev
 = 
	`ngx_queue_d©a
(
q
, 
ngx_evít_t
, 
queue
);

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

29 "po°edÉvíà%p", 
ev
);

31 
	`ngx_dñëe_po°ed_evít
(
ev
);

33 
ev
->
	`h™dÀr
(ev);

35 
	}
}

	@src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#ngx_po°_evít
(
ev
, 
q
) \

19 i‡(!(
ev
)->
po°ed
) { \

20 (
ev
)->
po°ed
 = 1; \

21 
	`ngx_queue_ö£π_èû
(
q
, &(
ev
)->
queue
); \

23 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, (
ev
)->
log
, 0, "postÉvent %p",Év);\

26 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, (
ev
)->
log
, 0, \

27 "upd©êpo°edÉvíà%p", 
ev
); \

28 }

	)

31 
	#ngx_dñëe_po°ed_evít
(
ev
) \

33 (
ev
)->
po°ed
 = 0; \

34 
	`ngx_queue_ªmove
(&(
ev
)->
queue
); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, (
ev
)->
log
, 0, \

37 "dñëêpo°edÉvíà%p", 
ev
);

	)

41 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_queue_t
 *
po°ed
);

44 
ngx_queue_t
 
ngx_po°ed_ac˚±_evíts
;

45 
ngx_queue_t
 
ngx_po°ed_evíts
;

	@src/event/ngx_event_timer.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_rbåì_t
 
	gngx_evít_timî_rbåì
;

14 
ngx_rbåì_node_t
 
	gngx_evít_timî_£¡öñ
;

22 
ngx_öt_t


23 
	$ngx_evít_timî_öô
(
ngx_log_t
 *
log
)

25 
	`ngx_rbåì_öô
(&
ngx_evít_timî_rbåì
, &
ngx_evít_timî_£¡öñ
,

26 
ngx_rbåì_ö£π_timî_vÆue
);

28  
NGX_OK
;

29 
	}
}

32 
ngx_m£c_t


33 
	$ngx_evít_föd_timî
()

35 
ngx_m£c_öt_t
 
timî
;

36 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

38 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =&
ngx_evít_timî_£¡öñ
) {

39  
NGX_TIMER_INFINITE
;

42 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

43 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

45 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

47 
timî
 = (
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
);

49  (
ngx_m£c_t
Ë(
timî
 > 0 ?Åimer : 0);

50 
	}
}

54 
	$ngx_evít_expúe_timîs
()

56 
ngx_evít_t
 *
ev
;

57 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

59 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

62 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

64 i‡(
roŸ
 =
£¡öñ
) {

68 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

72 i‡((
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
) > 0) {

76 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

78 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

80 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

82 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

84 #i‡(
NGX_DEBUG
)

85 
ev
->
timî
.
À·
 = 
NULL
;

86 
ev
->
timî
.
right
 = 
NULL
;

87 
ev
->
timî
.
∑ª¡
 = 
NULL
;

90 
ev
->
timî_£t
 = 0;

92 
ev
->
timedout
 = 1;

94 
ev
->
	`h™dÀr
(ev);

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_evít_no_timîs_À·
()

102 
ngx_evít_t
 *
ev
;

103 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

105 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

106 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

108 i‡(
roŸ
 =
£¡öñ
) {

109  
NGX_OK
;

112 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

113 
node
;

114 
node
 = 
	`ngx_rbåì_√xt
(&
ngx_evít_timî_rbåì
,Çode))

116 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

118 i‡(!
ev
->
ˇn˚œbÀ
) {

119  
NGX_AGAIN
;

125  
NGX_OK
;

126 
	}
}

	@src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

25 
ngx_öt_t
 
ngx_evít_no_timîs_À·
();

28 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

31 
ngx_ölöe
 

32 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

34 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

36 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

38 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

40 #i‡(
NGX_DEBUG
)

41 
ev
->
timî
.
À·
 = 
NULL
;

42 
ev
->
timî
.
right
 = 
NULL
;

43 
ev
->
timî
.
∑ª¡
 = 
NULL
;

46 
ev
->
timî_£t
 = 0;

47 
	}
}

50 
ngx_ölöe
 

51 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

53 
ngx_m£c_t
 
key
;

54 
ngx_m£c_öt_t
 
diff
;

56 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

58 i‡(
ev
->
timî_£t
) {

66 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

68 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

69 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

71 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

75 
	`ngx_dñ_timî
(
ev
);

78 
ev
->
timî
.
key
 = key;

80 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

82 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

84 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

86 
ev
->
timî_£t
 = 1;

87 
	}
}

	@src/event/ngx_event_udp.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡!(
NGX_WIN32
)

15 
	sngx_udp_c⁄√˘i⁄_s
 {

16 
ngx_rbåì_node_t
 
	mnode
;

17 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

18 
ngx_buf_t
 *
	mbuf„r
;

22 
ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ssize_t
 
ngx_udp_sh¨ed_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
,

24 
size_t
 
size
);

25 
ngx_öt_t
 
ngx_ö£π_udp_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_dñëe_udp_c⁄√˘i⁄
(*
d©a
);

27 
ngx_c⁄√˘i⁄_t
 *
ngx_lookup_udp_c⁄√˘i⁄
(
ngx_li°íög_t
 *
ls
,

28 
sockaddr
 *sockaddr, 
sockÀn_t
 
sockÀn
,

29 
sockaddr
 *
loˇl_sockaddr
, 
sockÀn_t
 
loˇl_sockÀn
);

33 
	$ngx_evít_ªcvmsg
(
ngx_evít_t
 *
ev
)

35 
ssize_t
 
n
;

36 
ngx_buf_t
 
buf
;

37 
ngx_log_t
 *
log
;

38 
ngx_îr_t
 
îr
;

39 
sockÀn_t
 
sockÀn
, 
loˇl_sockÀn
;

40 
ngx_evít_t
 *
ªv
, *
wev
;

41 
iovec
 
iov
[1];

42 
msghdr
 
msg
;

43 
ngx_sockaddr_t
 
ß
, 
lß
;

44 
sockaddr
 *sockaddr, *
loˇl_sockaddr
;

45 
ngx_li°íög_t
 *
ls
;

46 
ngx_evít_c⁄f_t
 *
ecf
;

47 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

48 
u_ch¨
 
buf„r
[65535];

50 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

52 #i‡(
NGX_HAVE_IP_RECVDSTADDR
)

53 
u_ch¨
 
msg_c⁄åﬁ
[
	`CMSG_SPACE
((
ö_addr
))];

54 #ñi‡(
NGX_HAVE_IP_PKTINFO
)

55 
u_ch¨
 
msg_c⁄åﬁ
[
	`CMSG_SPACE
((
ö_pktöfo
))];

58 #i‡(
NGX_HAVE_INET6
 && 
NGX_HAVE_IPV6_RECVPKTINFO
)

59 
u_ch¨
 
msg_c⁄åﬁ6
[
	`CMSG_SPACE
((
ö6_pktöfo
))];

64 i‡(
ev
->
timedout
) {

65 i‡(
	`ngx_íabÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
Ë!
NGX_OK
) {

69 
ev
->
timedout
 = 0;

72 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

74 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

75 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

78 
lc
 = 
ev
->
d©a
;

79 
ls
 = 
lc
->
li°íög
;

80 
ev
->
ªady
 = 0;

82 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

83 "ªcvmsg o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

86 
	`ngx_memzîo
(&
msg
, (
msghdr
));

88 
iov
[0].
iov_ba£
 = (*Ë
buf„r
;

89 
iov
[0].
iov_Àn
 = (
buf„r
);

91 
msg
.
msg_«me
 = &
ß
;

92 
msg
.
msg_«mñí
 = (
ngx_sockaddr_t
);

93 
msg
.
msg_iov
 = 
iov
;

94 
msg
.
msg_iovÀn
 = 1;

96 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

98 i‡(
ls
->
wûdˇrd
) {

100 #i‡(
NGX_HAVE_IP_RECVDSTADDR
 || 
NGX_HAVE_IP_PKTINFO
)

101 i‡(
ls
->
sockaddr
->
ß_Ámûy
 =
AF_INET
) {

102 
msg
.
msg_c⁄åﬁ
 = &msg_control;

103 
msg
.
msg_c⁄åﬁÀn
 = (
msg_c⁄åﬁ
);

107 #i‡(
NGX_HAVE_INET6
 && 
NGX_HAVE_IPV6_RECVPKTINFO
)

108 i‡(
ls
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

109 
msg
.
msg_c⁄åﬁ
 = &
msg_c⁄åﬁ6
;

110 
msg
.
msg_c⁄åﬁÀn
 = (
msg_c⁄åﬁ6
);

117 
n
 = 
	`ªcvmsg
(
lc
->
fd
, &
msg
, 0);

119 i‡(
n
 == -1) {

120 
îr
 = 
ngx_sockë_î∫o
;

122 i‡(
îr
 =
NGX_EAGAIN
) {

123 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

128 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "recvmsg() failed");

133 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

134 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

141 
sockaddr
 = 
msg
.
msg_«me
;

142 
sockÀn
 = 
msg
.
msg_«mñí
;

144 i‡(
sockÀn
 > (
sockÀn_t
Ë(
ngx_sockaddr_t
)) {

145 
sockÀn
 = (
ngx_sockaddr_t
);

148 i‡(
sockÀn
 == 0) {

155 
sockÀn
 = (
sockaddr
);

156 
	`ngx_memzîo
(&
ß
, (
sockaddr
));

157 
ß
.
sockaddr
.
ß_Ámûy
 = 
ls
->sockaddr->sa_family;

160 
loˇl_sockaddr
 = 
ls
->
sockaddr
;

161 
loˇl_sockÀn
 = 
ls
->
sockÀn
;

163 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

165 i‡(
ls
->
wûdˇrd
) {

166 
cmsghdr
 *
cmsg
;

168 
	`ngx_mem˝y
(&
lß
, 
loˇl_sockaddr
, 
loˇl_sockÀn
);

169 
loˇl_sockaddr
 = &
lß
.
sockaddr
;

171 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

172 
cmsg
 !
NULL
;

173 
cmsg
 = 
	`CMSG_NXTHDR
(&
msg
, cmsg))

176 #i‡(
NGX_HAVE_IP_RECVDSTADDR
)

178 i‡(
cmsg
->
cmsg_Àvñ
 =
IPPROTO_IP


179 && 
cmsg
->
cmsg_ty≥
 =
IP_RECVDSTADDR


180 && 
loˇl_sockaddr
->
ß_Ámûy
 =
AF_INET
)

182 
ö_addr
 *
addr
;

183 
sockaddr_ö
 *
sö
;

185 
addr
 = (
ö_addr
 *Ë
	`CMSG_DATA
(
cmsg
);

186 
sö
 = (
sockaddr_ö
 *Ë
loˇl_sockaddr
;

187 
sö
->
sö_addr
 = *
addr
;

192 #ñi‡(
NGX_HAVE_IP_PKTINFO
)

194 i‡(
cmsg
->
cmsg_Àvñ
 =
IPPROTO_IP


195 && 
cmsg
->
cmsg_ty≥
 =
IP_PKTINFO


196 && 
loˇl_sockaddr
->
ß_Ámûy
 =
AF_INET
)

198 
ö_pktöfo
 *
pkt
;

199 
sockaddr_ö
 *
sö
;

201 
pkt
 = (
ö_pktöfo
 *Ë
	`CMSG_DATA
(
cmsg
);

202 
sö
 = (
sockaddr_ö
 *Ë
loˇl_sockaddr
;

203 
sö
->
sö_addr
 = 
pkt
->
ùi_addr
;

210 #i‡(
NGX_HAVE_INET6
 && 
NGX_HAVE_IPV6_RECVPKTINFO
)

212 i‡(
cmsg
->
cmsg_Àvñ
 =
IPPROTO_IPV6


213 && 
cmsg
->
cmsg_ty≥
 =
IPV6_PKTINFO


214 && 
loˇl_sockaddr
->
ß_Ámûy
 =
AF_INET6
)

216 
ö6_pktöfo
 *
pkt6
;

217 
sockaddr_ö6
 *
sö6
;

219 
pkt6
 = (
ö6_pktöfo
 *Ë
	`CMSG_DATA
(
cmsg
);

220 
sö6
 = (
sockaddr_ö6
 *Ë
loˇl_sockaddr
;

221 
sö6
->
sö6_addr
 = 
pkt6
->
ùi6_addr
;

233 
c
 = 
	`ngx_lookup_udp_c⁄√˘i⁄
(
ls
, 
sockaddr
, 
sockÀn
, 
loˇl_sockaddr
,

234 
loˇl_sockÀn
);

236 i‡(
c
) {

238 #i‡(
NGX_DEBUG
)

239 i‡(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_EVENT
) {

240 
ngx_log_h™dÀr_±
 
h™dÀr
;

242 
h™dÀr
 = 
c
->
log
->handler;

243 
c
->
log
->
h™dÀr
 = 
NULL
;

245 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

246 "ªcvmsg: fd:%dÇ:%z", 
c
->
fd
, 
n
);

248 
c
->
log
->
h™dÀr
 = handler;

252 
	`ngx_memzîo
(&
buf
, (
ngx_buf_t
));

254 
buf
.
pos
 = 
buf„r
;

255 
buf
.
œ°
 = 
buf„r
 + 
n
;

257 
ªv
 = 
c
->
ªad
;

259 
c
->
udp
->
buf„r
 = &
buf
;

260 
ªv
->
ªady
 = 1;

262 
ªv
->
	`h™dÀr
(rev);

264 
c
->
udp
->
buf„r
 = 
NULL
;

265 
ªv
->
ªady
 = 0;

267 
√xt
;

270 #i‡(
NGX_STAT_STUB
)

271 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

274 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

275 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

277 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
lc
->
fd
, 
ev
->
log
);

278 i‡(
c
 =
NULL
) {

282 
c
->
sh¨ed
 = 1;

283 
c
->
ty≥
 = 
SOCK_DGRAM
;

284 
c
->
sockÀn
 = socklen;

286 #i‡(
NGX_STAT_STUB
)

287 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

290 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

291 i‡(
c
->
poﬁ
 =
NULL
) {

292 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

296 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

297 i‡(
c
->
sockaddr
 =
NULL
) {

298 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

302 
	`ngx_mem˝y
(
c
->
sockaddr
, sockaddr, 
sockÀn
);

304 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

305 i‡(
log
 =
NULL
) {

306 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

310 *
log
 = 
ls
->log;

312 
c
->
ªcv
 = 
ngx_udp_sh¨ed_ªcv
;

313 
c
->
£nd
 = 
ngx_udp_£nd
;

314 
c
->
£nd_chaö
 = 
ngx_udp_£nd_chaö
;

316 
c
->
log
 =Üog;

317 
c
->
poﬁ
->
log
 =Üog;

318 
c
->
li°íög
 = 
ls
;

320 i‡(
loˇl_sockaddr
 =&
lß
.
sockaddr
) {

321 
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
loˇl_sockÀn
);

322 i‡(
loˇl_sockaddr
 =
NULL
) {

323 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

327 
	`ngx_mem˝y
(
loˇl_sockaddr
, &
lß
, 
loˇl_sockÀn
);

330 
c
->
loˇl_sockaddr
 =Üocal_sockaddr;

331 
c
->
loˇl_sockÀn
 =Üocal_socklen;

333 
c
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(c->
poﬁ
, 
n
);

334 i‡(
c
->
buf„r
 =
NULL
) {

335 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

339 
c
->
buf„r
->
œ°
 = 
	`ngx_˝ymem
(c->buf„r->œ°, buf„r, 
n
);

341 
ªv
 = 
c
->
ªad
;

342 
wev
 = 
c
->
wrôe
;

344 
wev
->
ªady
 = 1;

346 
ªv
->
log
 =Üog;

347 
wev
->
log
 =Üog;

358 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

360 #i‡(
NGX_STAT_STUB
)

361 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

364 i‡(
ls
->
addr_¡›
) {

365 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

366 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

367 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

371 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->
sockÀn
,

372 
c
->
addr_ãxt
.
d©a
,

373 
ls
->
addr_ãxt_max_Àn
, 0);

374 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

375 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

380 #i‡(
NGX_DEBUG
)

382 
ngx_°r_t
 
addr
;

383 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

385 
	`ngx_debug_ac˚±ed_c⁄√˘i⁄
(
ecf
, 
c
);

387 i‡(
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_EVENT
) {

388 
addr
.
d©a
 = 
ãxt
;

389 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, 
ãxt
,

390 
NGX_SOCKADDR_STRLEN
, 1);

392 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

394 
c
->
numbî
, &
addr
, c->
fd
, 
n
);

400 i‡(
	`ngx_ö£π_udp_c⁄√˘i⁄
(
c
Ë!
NGX_OK
) {

401 
	`ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
c
);

405 
log
->
d©a
 = 
NULL
;

406 
log
->
h™dÀr
 = 
NULL
;

408 
ls
->
	`h™dÀr
(
c
);

410 
√xt
:

412 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

413 
ev
->
avaûabÀ
 -
n
;

416 } 
ev
->
avaûabÀ
);

417 
	}
}

421 
	$ngx_˛o£_ac˚±ed_udp_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

423 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

425 
c
->
fd
 = (
ngx_sockë_t
) -1;

427 i‡(
c
->
poﬁ
) {

428 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

431 #i‡(
NGX_STAT_STUB
)

432 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

434 
	}
}

437 
ssize_t


438 
	$ngx_udp_sh¨ed_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

440 
ssize_t
 
n
;

441 
ngx_buf_t
 *
b
;

443 i‡(
c
->
udp
 =
NULL
 || c->udp->
buf„r
 == NULL) {

444  
NGX_AGAIN
;

447 
b
 = 
c
->
udp
->
buf„r
;

449 
n
 = 
	`ngx_mö
(
b
->
œ°
 - b->
pos
, (
ssize_t
Ë
size
);

451 
	`ngx_mem˝y
(
buf
, 
b
->
pos
, 
n
);

453 
c
->
udp
->
buf„r
 = 
NULL
;

454 
c
->
ªad
->
ªady
 = 0;

456  
n
;

457 
	}
}

461 
	$ngx_udp_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

462 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

464 
ngx_öt_t
 
rc
;

465 
ngx_c⁄√˘i⁄_t
 *
c
, *
˘
;

466 
ngx_rbåì_node_t
 **
p
;

467 
ngx_udp_c⁄√˘i⁄_t
 *
udp
, *
ud±
;

471 i‡(
node
->
key
 < 
ãmp
->key) {

473 
p
 = &
ãmp
->
À·
;

475 } i‡(
node
->
key
 > 
ãmp
->key) {

477 
p
 = &
ãmp
->
right
;

481 
udp
 = (
ngx_udp_c⁄√˘i⁄_t
 *Ë
node
;

482 
c
 = 
udp
->
c⁄√˘i⁄
;

484 
ud±
 = (
ngx_udp_c⁄√˘i⁄_t
 *Ë
ãmp
;

485 
˘
 = 
ud±
->
c⁄√˘i⁄
;

487 
rc
 = 
	`ngx_cmp_sockaddr
(
c
->
sockaddr
, c->
sockÀn
,

488 
˘
->
sockaddr
, ct->
sockÀn
, 1);

490 i‡(
rc
 =0 && 
c
->
li°íög
->
wûdˇrd
) {

491 
rc
 = 
	`ngx_cmp_sockaddr
(
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
,

492 
˘
->
loˇl_sockaddr
, ct->
loˇl_sockÀn
, 1);

495 
p
 = (
rc
 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

498 i‡(*
p
 =
£¡öñ
) {

502 
ãmp
 = *
p
;

505 *
p
 = 
node
;

506 
node
->
∑ª¡
 = 
ãmp
;

507 
node
->
À·
 = 
£¡öñ
;

508 
node
->
right
 = 
£¡öñ
;

509 
	`ngx_rbt_ªd
(
node
);

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_ö£π_udp_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

516 
uöt32_t
 
hash
;

517 
ngx_poﬁ_˛ónup_t
 *
˛n
;

518 
ngx_udp_c⁄√˘i⁄_t
 *
udp
;

520 i‡(
c
->
udp
) {

521  
NGX_OK
;

524 
udp
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_udp_c⁄√˘i⁄_t
));

525 i‡(
udp
 =
NULL
) {

526  
NGX_ERROR
;

529 
udp
->
c⁄√˘i⁄
 = 
c
;

531 
	`ngx_¸c32_öô
(
hash
);

532 
	`ngx_¸c32_upd©e
(&
hash
, (
u_ch¨
 *Ë
c
->
sockaddr
, c->
sockÀn
);

534 i‡(
c
->
li°íög
->
wûdˇrd
) {

535 
	`ngx_¸c32_upd©e
(&
hash
, (
u_ch¨
 *Ë
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
);

538 
	`ngx_¸c32_föÆ
(
hash
);

540 
udp
->
node
.
key
 = 
hash
;

542 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
c
->
poﬁ
, 0);

543 i‡(
˛n
 =
NULL
) {

544  
NGX_ERROR
;

547 
˛n
->
d©a
 = 
c
;

548 
˛n
->
h™dÀr
 = 
ngx_dñëe_udp_c⁄√˘i⁄
;

550 
	`ngx_rbåì_ö£π
(&
c
->
li°íög
->
rbåì
, &
udp
->
node
);

552 
c
->
udp
 = udp;

554  
NGX_OK
;

555 
	}
}

559 
	$ngx_dñëe_udp_c⁄√˘i⁄
(*
d©a
)

561 
ngx_c⁄√˘i⁄_t
 *
c
 = 
d©a
;

563 
	`ngx_rbåì_dñëe
(&
c
->
li°íög
->
rbåì
, &c->
udp
->
node
);

564 
	}
}

567 
ngx_c⁄√˘i⁄_t
 *

568 
	$ngx_lookup_udp_c⁄√˘i⁄
(
ngx_li°íög_t
 *
ls
, 
sockaddr
 *sockaddr,

569 
sockÀn_t
 
sockÀn
, 
sockaddr
 *
loˇl_sockaddr
, sockÀn_à
loˇl_sockÀn
)

571 
uöt32_t
 
hash
;

572 
ngx_öt_t
 
rc
;

573 
ngx_c⁄√˘i⁄_t
 *
c
;

574 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

575 
ngx_udp_c⁄√˘i⁄_t
 *
udp
;

577 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

579 i‡(
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

580 
sockaddr_un
 *
ßun
 = (sockaddr_u¿*Ë
sockaddr
;

582 i‡(
sockÀn
 <(
sockÀn_t
Ë
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

583 || 
ßun
->
sun_∑th
[0] == '\0')

585 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

587  
NULL
;

593 
node
 = 
ls
->
rbåì
.
roŸ
;

594 
£¡öñ
 = 
ls
->
rbåì
.sentinel;

596 
	`ngx_¸c32_öô
(
hash
);

597 
	`ngx_¸c32_upd©e
(&
hash
, (
u_ch¨
 *Ë
sockaddr
, 
sockÀn
);

599 i‡(
ls
->
wûdˇrd
) {

600 
	`ngx_¸c32_upd©e
(&
hash
, (
u_ch¨
 *Ë
loˇl_sockaddr
, 
loˇl_sockÀn
);

603 
	`ngx_¸c32_föÆ
(
hash
);

605 
node
 !
£¡öñ
) {

607 i‡(
hash
 < 
node
->
key
) {

608 
node
 =Çode->
À·
;

612 i‡(
hash
 > 
node
->
key
) {

613 
node
 =Çode->
right
;

619 
udp
 = (
ngx_udp_c⁄√˘i⁄_t
 *Ë
node
;

621 
c
 = 
udp
->
c⁄√˘i⁄
;

623 
rc
 = 
	`ngx_cmp_sockaddr
(
sockaddr
, 
sockÀn
,

624 
c
->
sockaddr
, c->
sockÀn
, 1);

626 i‡(
rc
 =0 && 
ls
->
wûdˇrd
) {

627 
rc
 = 
	`ngx_cmp_sockaddr
(
loˇl_sockaddr
, 
loˇl_sockÀn
,

628 
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
, 1);

631 i‡(
rc
 == 0) {

632  
c
;

635 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

638  
NULL
;

639 
	}
}

	@src/http/modules/ngx_http_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_hâp_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_hâp_ac˚ss_ruÀ6_t
;

29 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

32 
ngx_uöt_t
 
	mdíy
;

33 } 
	tngx_hâp_ac˚ss_ruÀ_un_t
;

38 
ngx_¨øy_t
 *
	mruÀs
;

39 #i‡(
NGX_HAVE_INET6
)

40 
ngx_¨øy_t
 *
	mruÀs6
;

42 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

43 
ngx_¨øy_t
 *
	mruÀs_un
;

45 } 
	tngx_hâp_ac˚ss_loc_c⁄f_t
;

48 
ngx_öt_t
 
ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
ö_addr_t
 
addr
);

51 #i‡(
NGX_HAVE_INET6
)

52 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
u_ch¨
 *
p
);

55 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

56 
ngx_öt_t
 
ngx_hâp_ac˚ss_unix
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
);

59 
ngx_öt_t
 
ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
);

60 *
ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

61 *
c⁄f
);

62 *
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

63 *
ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

64 *
∑ª¡
, *
chûd
);

65 
ngx_öt_t
 
ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

68 
ngx_comm™d_t
 
	gngx_hâp_ac˚ss_comm™ds
[] = {

70 { 
ngx_°rög
("allow"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


72 |
NGX_CONF_TAKE1
,

73 
ngx_hâp_ac˚ss_ruÀ
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("deny"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


80 |
NGX_CONF_TAKE1
,

81 
ngx_hâp_ac˚ss_ruÀ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

84 
NULL
 },

86 
ngx_nuŒ_comm™d


91 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ_˘x
 = {

92 
NULL
,

93 
ngx_hâp_ac˚ss_öô
,

95 
NULL
,

96 
NULL
,

98 
NULL
,

99 
NULL
,

101 
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
,

102 
ngx_hâp_ac˚ss_mîge_loc_c⁄f


106 
ngx_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ
 = {

107 
NGX_MODULE_V1
,

108 &
ngx_hâp_ac˚ss_moduÀ_˘x
,

109 
ngx_hâp_ac˚ss_comm™ds
,

110 
NGX_HTTP_MODULE
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NGX_MODULE_V1_PADDING


122 
ngx_öt_t


123 
	$ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

125 
sockaddr_ö
 *
sö
;

126 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
;

127 #i‡(
NGX_HAVE_INET6
)

128 
u_ch¨
 *
p
;

129 
ö_addr_t
 
addr
;

130 
sockaddr_ö6
 *
sö6
;

133 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ac˚ss_moduÀ
);

135 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

137 
AF_INET
:

138 i‡(
Æcf
->
ruÀs
) {

139 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

140  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
sö
->
sö_addr
.
s_addr
);

144 #i‡(
NGX_HAVE_INET6
)

146 
AF_INET6
:

147 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

148 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

150 i‡(
Æcf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

151 
addr
 = 
p
[12] << 24;

152 
addr
 +
p
[13] << 16;

153 
addr
 +
p
[14] << 8;

154 
addr
 +
p
[15];

155  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
	`ht⁄l
(
addr
));

158 i‡(
Æcf
->
ruÀs6
) {

159  
	`ngx_hâp_ac˚ss_öë6
(
r
, 
Æcf
, 
p
);

166 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

168 
AF_UNIX
:

169 i‡(
Æcf
->
ruÀs_un
) {

170  
	`ngx_hâp_ac˚ss_unix
(
r
, 
Æcf
);

178  
NGX_DECLINED
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

184 
ö_addr_t
 
addr
)

186 
ngx_uöt_t
 
i
;

187 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

189 
ruÀ
 = 
Æcf
->
ruÀs
->
ñts
;

190 
i
 = 0; i < 
Æcf
->
ruÀs
->
√…s
; i++) {

192 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

194 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

196 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

197  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ
[
i
].
díy
);

201  
NGX_DECLINED
;

202 
	}
}

205 #i‡(
NGX_HAVE_INET6
)

207 
ngx_öt_t


208 
	$ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

209 
u_ch¨
 *
p
)

211 
ngx_uöt_t
 
n
;

212 
ngx_uöt_t
 
i
;

213 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

215 
ruÀ6
 = 
Æcf
->
ruÀs6
->
ñts
;

216 
i
 = 0; i < 
Æcf
->
ruÀs6
->
√…s
; i++) {

218 #i‡(
NGX_DEBUG
)

220 
size_t
 
˛
, 
ml
, 
Æ
;

221 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

222 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

223 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

225 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

226 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

227 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

229 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

230 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

234 
n
 = 0;Ç < 16;Ç++) {

235 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

236 
√xt
;

240  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ6
[
i
].
díy
);

242 
√xt
:

246  
NGX_DECLINED
;

247 
	}
}

252 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

254 
ngx_öt_t


255 
	$ngx_hâp_ac˚ss_unix
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
)

257 
ngx_uöt_t
 
i
;

258 
ngx_hâp_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

260 
ruÀ_un
 = 
Æcf
->
ruÀs_un
->
ñts
;

261 
i
 = 0; i < 
Æcf
->
ruÀs_un
->
√…s
; i++) {

265  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ_un
[
i
].
díy
);

269  
NGX_DECLINED
;

270 
	}
}

275 
ngx_öt_t


276 
	$ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
)

278 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

280 i‡(
díy
) {

281 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

283 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

284 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

288  
NGX_HTTP_FORBIDDEN
;

291  
NGX_OK
;

292 
	}
}

296 
	$ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

298 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

300 
ngx_öt_t
 
rc
;

301 
ngx_uöt_t
 
Æl
;

302 
ngx_°r_t
 *
vÆue
;

303 
ngx_cidr_t
 
cidr
;

304 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

305 #i‡(
NGX_HAVE_INET6
)

306 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

308 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

309 
ngx_hâp_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

312 
Æl
 = 0;

313 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

315 
vÆue
 = 
cf
->
¨gs
->
ñts
;

317 i‡(
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0) {

318 
Æl
 = 1;

320 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

321 } i‡(
vÆue
[1].
Àn
 =5 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "unix:") == 0) {

322 
cidr
.
Ámûy
 = 
AF_UNIX
;

326 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

328 i‡(
rc
 =
NGX_ERROR
) {

329 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

330 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

331  
NGX_CONF_ERROR
;

334 i‡(
rc
 =
NGX_DONE
) {

335 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

336 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

340 i‡(
cidr
.
Ámûy
 =
AF_INET
 || 
Æl
) {

342 i‡(
Æcf
->
ruÀs
 =
NULL
) {

343 
Æcf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

344 (
ngx_hâp_ac˚ss_ruÀ_t
));

345 i‡(
Æcf
->
ruÀs
 =
NULL
) {

346  
NGX_CONF_ERROR
;

350 
ruÀ
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs
);

351 i‡(
ruÀ
 =
NULL
) {

352  
NGX_CONF_ERROR
;

355 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

356 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

357 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

360 #i‡(
NGX_HAVE_INET6
)

361 i‡(
cidr
.
Ámûy
 =
AF_INET6
 || 
Æl
) {

363 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

364 
Æcf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

365 (
ngx_hâp_ac˚ss_ruÀ6_t
));

366 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

367  
NGX_CONF_ERROR
;

371 
ruÀ6
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs6
);

372 i‡(
ruÀ6
 =
NULL
) {

373  
NGX_CONF_ERROR
;

376 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

377 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

378 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

382 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

383 i‡(
cidr
.
Ámûy
 =
AF_UNIX
 || 
Æl
) {

385 i‡(
Æcf
->
ruÀs_un
 =
NULL
) {

386 
Æcf
->
ruÀs_un
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

387 (
ngx_hâp_ac˚ss_ruÀ_un_t
));

388 i‡(
Æcf
->
ruÀs_un
 =
NULL
) {

389  
NGX_CONF_ERROR
;

393 
ruÀ_un
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs_un
);

394 i‡(
ruÀ_un
 =
NULL
) {

395  
NGX_CONF_ERROR
;

398 
ruÀ_un
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

402  
NGX_CONF_OK
;

403 
	}
}

407 
	$ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

409 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
;

411 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ac˚ss_loc_c⁄f_t
));

412 i‡(
c⁄f
 =
NULL
) {

413  
NULL
;

416  
c⁄f
;

417 
	}
}

421 
	$ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

423 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

424 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

426 i‡(
c⁄f
->
ruÀs
 =
NULL


427 #i‡(
NGX_HAVE_INET6
)

428 && 
c⁄f
->
ruÀs6
 =
NULL


430 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

431 && 
c⁄f
->
ruÀs_un
 =
NULL


434 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

435 #i‡(
NGX_HAVE_INET6
)

436 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

438 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

439 
c⁄f
->
ruÀs_un
 = 
¥ev
->rules_un;

443  
NGX_CONF_OK
;

444 
	}
}

447 
ngx_öt_t


448 
	$ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

450 
ngx_hâp_h™dÀr_±
 *
h
;

451 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

453 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

455 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

456 i‡(
h
 =
NULL
) {

457  
NGX_ERROR
;

460 *
h
 = 
ngx_hâp_ac˚ss_h™dÀr
;

462  
NGX_OK
;

463 
	}
}

	@src/http/modules/ngx_http_addition_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mbef‹e_body
;

15 
ngx_°r_t
 
	ma·î_body
;

17 
ngx_hash_t
 
	mty≥s
;

18 
ngx_¨øy_t
 *
	mty≥s_keys
;

19 } 
	tngx_hâp_addôi⁄_c⁄f_t
;

23 
ngx_uöt_t
 
	mbef‹e_body_£¡
;

24 } 
	tngx_hâp_addôi⁄_˘x_t
;

27 *
ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_addôi⁄_comm™ds
[] = {

35 { 
ngx_°rög
("add_before_body"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

37 
ngx_c⁄f_£t_°r_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
bef‹e_body
),

40 
NULL
 },

42 { 
ngx_°rög
("add_after_body"),

43 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

44 
ngx_c⁄f_£t_°r_¶Ÿ
,

45 
NGX_HTTP_LOC_CONF_OFFSET
,

46 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
a·î_body
),

47 
NULL
 },

49 { 
ngx_°rög
("addition_types"),

50 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

51 
ngx_hâp_ty≥s_¶Ÿ
,

52 
NGX_HTTP_LOC_CONF_OFFSET
,

53 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
ty≥s_keys
),

54 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

56 
ngx_nuŒ_comm™d


60 
ngx_hâp_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ_˘x
 = {

61 
NULL
,

62 
ngx_hâp_addôi⁄_fûãr_öô
,

64 
NULL
,

65 
NULL
,

67 
NULL
,

68 
NULL
,

70 
ngx_hâp_addôi⁄_¸óã_c⁄f
,

71 
ngx_hâp_addôi⁄_mîge_c⁄f


75 
ngx_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ
 = {

76 
NGX_MODULE_V1
,

77 &
ngx_hâp_addôi⁄_fûãr_moduÀ_˘x
,

78 
ngx_hâp_addôi⁄_comm™ds
,

79 
NGX_HTTP_MODULE
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NGX_MODULE_V1_PADDING


91 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

92 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_addôi⁄_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

99 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

101 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK
 ||Ñ !r->
maö
) {

102  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

105 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

107 i‡(
c⁄f
->
bef‹e_body
.
Àn
 =0 && c⁄f->
a·î_body
.len == 0) {

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

111 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
) {

112  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

115 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_addôi⁄_˘x_t
));

116 i‡(
˘x
 =
NULL
) {

117  
NGX_ERROR
;

120 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

122 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

123 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

124 
	`ngx_hâp_wók_ëag
(
r
);

126 
r
->
¥e£rve_body
 = 1;

128  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

129 
	}
}

132 
ngx_öt_t


133 
	$ngx_hâp_addôi⁄_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

135 
ngx_öt_t
 
rc
;

136 
ngx_uöt_t
 
œ°
;

137 
ngx_chaö_t
 *
˛
;

138 
ngx_hâp_ªque°_t
 *
§
;

139 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

140 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

142 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

143  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

146 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

148 i‡(
˘x
 =
NULL
) {

149  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

152 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

154 i‡(!
˘x
->
bef‹e_body_£¡
) {

155 
˘x
->
bef‹e_body_£¡
 = 1;

157 i‡(
c⁄f
->
bef‹e_body
.
Àn
) {

158 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
bef‹e_body
, 
NULL
, &
§
, NULL, 0)

159 !
NGX_OK
)

161  
NGX_ERROR
;

166 i‡(
c⁄f
->
a·î_body
.
Àn
 == 0) {

167 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

168  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

171 
œ°
 = 0;

173 
˛
 = 
ö
; cl; c»˛->
√xt
) {

174 i‡(
˛
->
buf
->
œ°_buf
) {

175 
˛
->
buf
->
œ°_buf
 = 0;

176 
˛
->
buf
->
œ°_ö_chaö
 = 1;

177 
˛
->
buf
->
sync
 = 1;

178 
œ°
 = 1;

182 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

184 i‡(
rc
 =
NGX_ERROR
 || !
œ°
 || 
c⁄f
->
a·î_body
.
Àn
 == 0) {

185  
rc
;

188 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
a·î_body
, 
NULL
, &
§
, NULL, 0)

189 !
NGX_OK
)

191  
NGX_ERROR
;

194 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

196  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

197 
	}
}

200 
ngx_öt_t


201 
	$ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

203 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

204 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_addôi⁄_hódî_fûãr
;

206 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

207 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_addôi⁄_body_fûãr
;

209  
NGX_OK
;

210 
	}
}

214 
	$ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

216 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

218 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_addôi⁄_c⁄f_t
));

219 i‡(
c⁄f
 =
NULL
) {

220  
NULL
;

232  
c⁄f
;

233 
	}
}

237 
	$ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

239 
ngx_hâp_addôi⁄_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

240 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
 = 
chûd
;

242 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
bef‹e_body
, 
¥ev
->before_body, "");

243 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
a·î_body
, 
¥ev
->after_body, "");

245 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

246 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

247 
ngx_hâp_html_deÁu…_ty≥s
)

248 !
NGX_OK
)

250  
NGX_CONF_ERROR
;

253  
NGX_CONF_OK
;

254 
	}
}

	@src/http/modules/ngx_http_auth_basic_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_¸y±.h
>

14 
	#NGX_HTTP_AUTH_BUF_SIZE
 2048

	)

18 
ngx_hâp_com∂ex_vÆue_t
 *
	mªÆm
;

19 
ngx_hâp_com∂ex_vÆue_t
 
	mu£r_fûe
;

20 } 
	tngx_hâp_auth_basic_loc_c⁄f_t
;

23 
ngx_öt_t
 
ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

24 
ngx_öt_t
 
ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
);

26 
ngx_öt_t
 
ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_°r_t
 *
ªÆm
);

28 
ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
);

29 *
ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

31 *
∑ª¡
, *
chûd
);

32 
ngx_öt_t
 
ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
);

33 *
ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

34 *
c⁄f
);

37 
ngx_comm™d_t
 
	gngx_hâp_auth_basic_comm™ds
[] = {

39 { 
ngx_°rög
("auth_basic"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


41 |
NGX_CONF_TAKE1
,

42 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

43 
NGX_HTTP_LOC_CONF_OFFSET
,

44 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
ªÆm
),

45 
NULL
 },

47 { 
ngx_°rög
("auth_basic_user_file"),

48 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


49 |
NGX_CONF_TAKE1
,

50 
ngx_hâp_auth_basic_u£r_fûe
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
u£r_fûe
),

53 
NULL
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_auth_basic_öô
,

63 
NULL
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_auth_basic_¸óã_loc_c⁄f
,

70 
ngx_hâp_auth_basic_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_auth_basic_moduÀ_˘x
,

77 
ngx_hâp_auth_basic_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
off_t
 
off£t
;

94 
ssize_t
 
n
;

95 
ngx_fd_t
 
fd
;

96 
ngx_öt_t
 
rc
;

97 
ngx_îr_t
 
îr
;

98 
ngx_°r_t
 
pwd
, 
ªÆm
, 
u£r_fûe
;

99 
ngx_uöt_t
 
i
, 
Àvñ
, 
logö
, 
À·
, 
∑sswd
;

100 
ngx_fûe_t
 
fûe
;

101 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
;

102 
u_ch¨
 
buf
[
NGX_HTTP_AUTH_BUF_SIZE
];

104 
sw_logö
,

105 
sw_∑sswd
,

106 
sw_skù


107 } 
°©e
;

109 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

111 i‡(
Æcf
->
ªÆm
 =
NULL
 ||álcf->
u£r_fûe
.
vÆue
.
d©a
 == NULL) {

112  
NGX_DECLINED
;

115 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
Æcf
->
ªÆm
, &ªÆmË!
NGX_OK
) {

116  
NGX_ERROR
;

119 i‡(
ªÆm
.
Àn
 =3 && 
	`ngx_°∫cmp
‘ólm.
d©a
, "off", 3) == 0) {

120  
NGX_DECLINED
;

123 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

125 i‡(
rc
 =
NGX_DECLINED
) {

127 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

130  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

133 i‡(
rc
 =
NGX_ERROR
) {

134  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

137 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Æcf
->
u£r_fûe
, &u£r_fûeË!
NGX_OK
) {

138  
NGX_ERROR
;

141 
fd
 = 
	`ngx_›í_fûe
(
u£r_fûe
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

143 i‡(
fd
 =
NGX_INVALID_FILE
) {

144 
îr
 = 
ngx_î∫o
;

146 i‡(
îr
 =
NGX_ENOENT
) {

147 
Àvñ
 = 
NGX_LOG_ERR
;

148 
rc
 = 
NGX_HTTP_FORBIDDEN
;

151 
Àvñ
 = 
NGX_LOG_CRIT
;

152 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

155 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

156 
ngx_›í_fûe_n
 " \"%s\" faûed", 
u£r_fûe
.
d©a
);

158  
rc
;

161 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

163 
fûe
.
fd
 = fd;

164 
fûe
.
«me
 = 
u£r_fûe
;

165 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

167 
°©e
 = 
sw_logö
;

168 
∑sswd
 = 0;

169 
logö
 = 0;

170 
À·
 = 0;

171 
off£t
 = 0;

174 
i
 = 
À·
;

176 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
 + 
À·
, 
NGX_HTTP_AUTH_BUF_SIZE
 -Üeft,

177 
off£t
);

179 i‡(
n
 =
NGX_ERROR
) {

180 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

181  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

184 i‡(
n
 == 0) {

188 
i
 = 
À·
; i <Üe· + 
n
; i++) {

189 
°©e
) {

191 
sw_logö
:

192 i‡(
logö
 == 0) {

194 i‡(
buf
[
i
] ='#' || buf[i] =
CR
) {

195 
°©e
 = 
sw_skù
;

199 i‡(
buf
[
i
] =
LF
) {

204 i‡(
buf
[
i
] !
r
->
hódîs_ö
.
u£r
.
d©a
[
logö
]) {

205 
°©e
 = 
sw_skù
;

209 i‡(
logö
 =
r
->
hódîs_ö
.
u£r
.
Àn
) {

210 
°©e
 = 
sw_∑sswd
;

211 
∑sswd
 = 
i
 + 1;

214 
logö
++;

218 
sw_∑sswd
:

219 i‡(
buf
[
i
] =
LF
 || buf[i] =
CR
 || buf[i] == ':') {

220 
buf
[
i
] = '\0';

222 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

224 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

225 
pwd
.
d©a
 = &
buf
[
∑sswd
];

227  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, &
pwd
, &
ªÆm
);

232 
sw_skù
:

233 i‡(
buf
[
i
] =
LF
) {

234 
°©e
 = 
sw_logö
;

235 
logö
 = 0;

242 i‡(
°©e
 =
sw_∑sswd
) {

243 
À·
 =Üe· + 
n
 - 
∑sswd
;

244 
	`ngx_memmove
(
buf
, &buf[
∑sswd
], 
À·
);

245 
∑sswd
 = 0;

248 
À·
 = 0;

251 
off£t
 +
n
;

254 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

256 i‡(
°©e
 =
sw_∑sswd
) {

257 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

258 
pwd
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Öwd.
Àn
 + 1);

259 i‡(
pwd
.
d©a
 =
NULL
) {

260  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

263 
	`ngx_˝y°∫
(
pwd
.
d©a
, &
buf
[
∑sswd
],Öwd.
Àn
 + 1);

265  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, &
pwd
, &
ªÆm
);

268 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

270 &
r
->
hódîs_ö
.
u£r
, 
u£r_fûe
.
d©a
);

272  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

273 
	}
}

276 
ngx_öt_t


277 
	$ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑sswd
,

278 
ngx_°r_t
 *
ªÆm
)

280 
ngx_öt_t
 
rc
;

281 
u_ch¨
 *
í¸y±ed
;

283 
rc
 = 
	`ngx_¸y±
(
r
->
poﬁ
,Ñ->
hódîs_ö
.
∑sswd
.
d©a
,Öasswd->data,

284 &
í¸y±ed
);

286 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

288 
rc
, &
r
->
hódîs_ö
.
u£r
, 
∑sswd
->
d©a
);

290 i‡(
rc
 !
NGX_OK
) {

291  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

294 i‡(
	`ngx_°rcmp
(
í¸y±ed
, 
∑sswd
->
d©a
) == 0) {

295  
NGX_OK
;

298 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

299 "í¸y±ed: \"%s\"", 
í¸y±ed
);

301 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303 &
r
->
hódîs_ö
.
u£r
);

305  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, 
ªÆm
);

306 
	}
}

309 
ngx_öt_t


310 
	$ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ªÆm
)

312 
size_t
 
Àn
;

313 
u_ch¨
 *
basic
, *
p
;

315 
r
->
hódîs_out
.
www_authítiˇã
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

316 i‡(
r
->
hódîs_out
.
www_authítiˇã
 =
NULL
) {

317  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

320 
Àn
 = ("Basi¯ªÆm=\"\""Ë- 1 + 
ªÆm
->len;

322 
basic
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

323 i‡(
basic
 =
NULL
) {

324 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

325 
r
->
hódîs_out
.
www_authítiˇã
 = 
NULL
;

326  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

329 
p
 = 
	`ngx_˝ymem
(
basic
, "BasicÑealm=\"", ("BasicÑealm=\"") - 1);

330 
p
 = 
	`ngx_˝ymem
’, 
ªÆm
->
d©a
,Ñólm->
Àn
);

331 *
p
 = '"';

333 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 1;

334 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
www_authítiˇã
->
key
, "WWW-Authenticate");

335 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
d©a
 = 
basic
;

336 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
Àn
 =Üen;

338  
NGX_HTTP_UNAUTHORIZED
;

339 
	}
}

342 
	$ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
)

344 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

345 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
ngx_î∫o
,

346 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
.
d©a
);

348 
	}
}

352 
	$ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

354 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
;

356 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_basic_loc_c⁄f_t
));

357 i‡(
c⁄f
 =
NULL
) {

358  
NULL
;

361  
c⁄f
;

362 
	}
}

366 
	$ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

368 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

369 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

371 i‡(
c⁄f
->
ªÆm
 =
NULL
) {

372 
c⁄f
->
ªÆm
 = 
¥ev
->realm;

375 i‡(
c⁄f
->
u£r_fûe
.
vÆue
.
d©a
 =
NULL
) {

376 
c⁄f
->
u£r_fûe
 = 
¥ev
->user_file;

379  
NGX_CONF_OK
;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
)

386 
ngx_hâp_h™dÀr_±
 *
h
;

387 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

389 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

391 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

392 i‡(
h
 =
NULL
) {

393  
NGX_ERROR
;

396 *
h
 = 
ngx_hâp_auth_basic_h™dÀr
;

398  
NGX_OK
;

399 
	}
}

403 
	$ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

405 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

407 
ngx_°r_t
 *
vÆue
;

408 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

410 i‡(
Æcf
->
u£r_fûe
.
vÆue
.
d©a
) {

414 
vÆue
 = 
cf
->
¨gs
->
ñts
;

416 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

418 
ccv
.
cf
 = cf;

419 
ccv
.
vÆue
 = &value[1];

420 
ccv
.
com∂ex_vÆue
 = &
Æcf
->
u£r_fûe
;

421 
ccv
.
zîo
 = 1;

422 
ccv
.
c⁄f_¥efix
 = 1;

424 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

425  
NGX_CONF_ERROR
;

428  
NGX_CONF_OK
;

429 
	}
}

	@src/http/modules/ngx_http_auth_request_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	muri
;

15 
ngx_¨øy_t
 *
	mv¨s
;

16 } 
	tngx_hâp_auth_ªque°_c⁄f_t
;

20 
ngx_uöt_t
 
	md⁄e
;

21 
ngx_uöt_t
 
	m°©us
;

22 
ngx_hâp_ªque°_t
 *
	msubªque°
;

23 } 
	tngx_hâp_auth_ªque°_˘x_t
;

27 
ngx_öt_t
 
	mödex
;

28 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

29 
ngx_hâp_£t_v¨übÀ_±
 
	m£t_h™dÀr
;

30 } 
	tngx_hâp_auth_ªque°_v¨übÀ_t
;

33 
ngx_öt_t
 
ngx_hâp_auth_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

34 
ngx_öt_t
 
ngx_hâp_auth_ªque°_d⁄e
(
ngx_hâp_ªque°_t
 *
r
,

35 *
d©a
, 
ngx_öt_t
 
rc
);

36 
ngx_öt_t
 
ngx_hâp_auth_ªque°_£t_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
, 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
);

38 
ngx_öt_t
 
ngx_hâp_auth_ªque°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 *
ngx_hâp_auth_ªque°_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

41 *
ngx_hâp_auth_ªque°_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

42 *
∑ª¡
, *
chûd
);

43 
ngx_öt_t
 
ngx_hâp_auth_ªque°_öô
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_auth_ªque°
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

45 *
c⁄f
);

46 *
ngx_hâp_auth_ªque°_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

50 
ngx_comm™d_t
 
	gngx_hâp_auth_ªque°_comm™ds
[] = {

52 { 
ngx_°rög
("auth_request"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

54 
ngx_hâp_auth_ªque°
,

55 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
NULL
 },

59 { 
ngx_°rög
("auth_request_set"),

60 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

61 
ngx_hâp_auth_ªque°_£t
,

62 
NGX_HTTP_LOC_CONF_OFFSET
,

64 
NULL
 },

66 
ngx_nuŒ_comm™d


70 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_ªque°_moduÀ_˘x
 = {

71 
NULL
,

72 
ngx_hâp_auth_ªque°_öô
,

74 
NULL
,

75 
NULL
,

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_auth_ªque°_¸óã_c⁄f
,

81 
ngx_hâp_auth_ªque°_mîge_c⁄f


85 
ngx_moduÀ_t
 
	gngx_hâp_auth_ªque°_moduÀ
 = {

86 
NGX_MODULE_V1
,

87 &
ngx_hâp_auth_ªque°_moduÀ_˘x
,

88 
ngx_hâp_auth_ªque°_comm™ds
,

89 
NGX_HTTP_MODULE
,

90 
NULL
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NGX_MODULE_V1_PADDING


101 
ngx_öt_t


102 
	$ngx_hâp_auth_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

104 
ngx_èbÀ_ñt_t
 *
h
, *
ho
;

105 
ngx_hâp_ªque°_t
 *
§
;

106 
ngx_hâp_po°_subªque°_t
 *
ps
;

107 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
;

108 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
;

110 
¨cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_ªque°_moduÀ
);

112 i‡(
¨cf
->
uri
.
Àn
 == 0) {

113  
NGX_DECLINED
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_ªque°_moduÀ
);

121 i‡(
˘x
 !
NULL
) {

122 i‡(!
˘x
->
d⁄e
) {

123  
NGX_AGAIN
;

131 i‡(
	`ngx_hâp_auth_ªque°_£t_v¨übÀs
(
r
, 
¨cf
, 
˘x
Ë!
NGX_OK
) {

132  
NGX_ERROR
;

137 i‡(
˘x
->
°©us
 =
NGX_HTTP_FORBIDDEN
) {

138  
˘x
->
°©us
;

141 i‡(
˘x
->
°©us
 =
NGX_HTTP_UNAUTHORIZED
) {

142 
§
 = 
˘x
->
subªque°
;

144 
h
 = 
§
->
hódîs_out
.
www_authítiˇã
;

146 i‡(!
h
 && 
§
->
up°ªam
) {

147 
h
 = 
§
->
up°ªam
->
hódîs_ö
.
www_authítiˇã
;

150 i‡(
h
) {

151 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

152 i‡(
ho
 =
NULL
) {

153  
NGX_ERROR
;

156 *
ho
 = *
h
;

158 
r
->
hódîs_out
.
www_authítiˇã
 = 
ho
;

161  
˘x
->
°©us
;

164 i‡(
˘x
->
°©us
 >
NGX_HTTP_OK


165 && 
˘x
->
°©us
 < 
NGX_HTTP_SPECIAL_RESPONSE
)

167  
NGX_OK
;

170 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

171 "authÑeque° u√x≥˘ed sètus: %ui", 
˘x
->
°©us
);

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_auth_ªque°_˘x_t
));

177 i‡(
˘x
 =
NULL
) {

178  
NGX_ERROR
;

181 
ps
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

182 i‡(
ps
 =
NULL
) {

183  
NGX_ERROR
;

186 
ps
->
h™dÀr
 = 
ngx_hâp_auth_ªque°_d⁄e
;

187 
ps
->
d©a
 = 
˘x
;

189 i‡(
	`ngx_hâp_subªque°
(
r
, &
¨cf
->
uri
, 
NULL
, &
§
, 
ps
,

190 
NGX_HTTP_SUBREQUEST_WAITED
)

191 !
NGX_OK
)

193  
NGX_ERROR
;

201 
§
->
ªque°_body
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

202 i‡(
§
->
ªque°_body
 =
NULL
) {

203  
NGX_ERROR
;

206 
§
->
hódî_⁄ly
 = 1;

208 
˘x
->
subªque°
 = 
§
;

210 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_ªque°_moduÀ
);

212  
NGX_AGAIN
;

213 
	}
}

216 
ngx_öt_t


217 
	$ngx_hâp_auth_ªque°_d⁄e
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

219 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
 = 
d©a
;

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "authÑeque° d⁄ês:%ui", 
r
->
hódîs_out
.
°©us
);

224 
˘x
->
d⁄e
 = 1;

225 
˘x
->
°©us
 = 
r
->
hódîs_out
.status;

227  
rc
;

228 
	}
}

231 
ngx_öt_t


232 
	$ngx_hâp_auth_ªque°_£t_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

233 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
, 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
)

235 
ngx_°r_t
 
vÆ
;

236 
ngx_hâp_v¨übÀ_t
 *
v
;

237 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

238 
ngx_hâp_auth_ªque°_v¨übÀ_t
 *
av
, *
œ°
;

239 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

244 i‡(
¨cf
->
v¨s
 =
NULL
) {

245  
NGX_OK
;

248 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

249 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

251 
av
 = 
¨cf
->
v¨s
->
ñts
;

252 
œ°
 = 
av
 + 
¨cf
->
v¨s
->
√…s
;

254 
av
 < 
œ°
) {

260 
vv
 = &
r
->
v¨übÀs
[
av
->
ödex
];

262 i‡(
	`ngx_hâp_com∂ex_vÆue
(
˘x
->
subªque°
, &
av
->
vÆue
, &
vÆ
)

263 !
NGX_OK
)

265  
NGX_ERROR
;

268 
vv
->
vÆid
 = 1;

269 
vv
->
nŸ_found
 = 0;

270 
vv
->
d©a
 = 
vÆ
.data;

271 
vv
->
Àn
 = 
vÆ
.len;

273 i‡(
av
->
£t_h™dÀr
) {

279 
av
->
	`£t_h™dÀr
(
r
, 
vv
, 
v
[av->
ödex
].
d©a
);

282 
av
++;

285  
NGX_OK
;

286 
	}
}

289 
ngx_öt_t


290 
	$ngx_hâp_auth_ªque°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

291 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

293 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

296 
v
->
nŸ_found
 = 1;

298  
NGX_OK
;

299 
	}
}

303 
	$ngx_hâp_auth_ªque°_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

305 
ngx_hâp_auth_ªque°_c⁄f_t
 *
c⁄f
;

307 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_ªque°_c⁄f_t
));

308 i‡(
c⁄f
 =
NULL
) {

309  
NULL
;

318 
c⁄f
->
v¨s
 = 
NGX_CONF_UNSET_PTR
;

320  
c⁄f
;

321 
	}
}

325 
	$ngx_hâp_auth_ªque°_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

327 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

328 
ngx_hâp_auth_ªque°_c⁄f_t
 *
c⁄f
 = 
chûd
;

330 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uri
, 
¥ev
->uri, "");

331 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
v¨s
, 
¥ev
->v¨s, 
NULL
);

333  
NGX_CONF_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_hâp_auth_ªque°_öô
(
ngx_c⁄f_t
 *
cf
)

340 
ngx_hâp_h™dÀr_±
 *
h
;

341 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

343 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

345 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

346 i‡(
h
 =
NULL
) {

347  
NGX_ERROR
;

350 *
h
 = 
ngx_hâp_auth_ªque°_h™dÀr
;

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_hâp_auth_ªque°
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

359 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
 = 
c⁄f
;

361 
ngx_°r_t
 *
vÆue
;

363 i‡(
¨cf
->
uri
.
d©a
 !
NULL
) {

367 
vÆue
 = 
cf
->
¨gs
->
ñts
;

369 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

370 
¨cf
->
uri
.
Àn
 = 0;

371 
¨cf
->
uri
.
d©a
 = (
u_ch¨
 *) "";

373  
NGX_CONF_OK
;

376 
¨cf
->
uri
 = 
vÆue
[1];

378  
NGX_CONF_OK
;

379 
	}
}

383 
	$ngx_hâp_auth_ªque°_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

385 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
 = 
c⁄f
;

387 
ngx_°r_t
 *
vÆue
;

388 
ngx_hâp_v¨übÀ_t
 *
v
;

389 
ngx_hâp_auth_ªque°_v¨übÀ_t
 *
av
;

390 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

392 
vÆue
 = 
cf
->
¨gs
->
ñts
;

394 i‡(
vÆue
[1].
d©a
[0] != '$') {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

396 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

397  
NGX_CONF_ERROR
;

400 
vÆue
[1].
Àn
--;

401 
vÆue
[1].
d©a
++;

403 i‡(
¨cf
->
v¨s
 =
NGX_CONF_UNSET_PTR
) {

404 
¨cf
->
v¨s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

405 (
ngx_hâp_auth_ªque°_v¨übÀ_t
));

406 i‡(
¨cf
->
v¨s
 =
NULL
) {

407  
NGX_CONF_ERROR
;

411 
av
 = 
	`ngx_¨øy_push
(
¨cf
->
v¨s
);

412 i‡(
av
 =
NULL
) {

413  
NGX_CONF_ERROR
;

416 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

417 i‡(
v
 =
NULL
) {

418  
NGX_CONF_ERROR
;

421 
av
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

422 i‡(
av
->
ödex
 =
NGX_ERROR
) {

423  
NGX_CONF_ERROR
;

426 i‡(
v
->
gë_h™dÀr
 =
NULL
) {

427 
v
->
gë_h™dÀr
 = 
ngx_hâp_auth_ªque°_v¨übÀ
;

428 
v
->
d©a
 = (
uöçå_t
Ë
av
;

431 
av
->
£t_h™dÀr
 = 
v
->set_handler;

433 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

435 
ccv
.
cf
 = cf;

436 
ccv
.
vÆue
 = &value[2];

437 
ccv
.
com∂ex_vÆue
 = &
av
->
vÆue
;

439 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

440  
NGX_CONF_ERROR
;

443  
NGX_CONF_OK
;

444 
	}
}

	@src/http/modules/ngx_http_autoindex_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

16 
ngx_buf_t
 *
	mbuf
;

17 
size_t
 
	msize
;

18 
ngx_poﬁ_t
 *
	mpoﬁ
;

19 
size_t
 
	mÆloc_size
;

20 
ngx_chaö_t
 **
	mœ°_out
;

21 } 
	tngx_hâp_autoödex_˘x_t
;

27 
ngx_°r_t
 
	m«me
;

28 
size_t
 
	mutf_Àn
;

29 
size_t
 
	mesˇ≥
;

30 
size_t
 
	mesˇ≥_html
;

32 
	mdú
:1;

33 
	mfûe
:1;

35 
time_t
 
	mmtime
;

36 
off_t
 
	msize
;

37 } 
	tngx_hâp_autoödex_íåy_t
;

41 
ngx_Êag_t
 
	míabÀ
;

42 
ngx_uöt_t
 
	mf‹m©
;

43 
ngx_Êag_t
 
	mloˇ…ime
;

44 
ngx_Êag_t
 
	mexa˘_size
;

45 } 
	tngx_hâp_autoödex_loc_c⁄f_t
;

48 
	#NGX_HTTP_AUTOINDEX_HTML
 0

	)

49 
	#NGX_HTTP_AUTOINDEX_JSON
 1

	)

50 
	#NGX_HTTP_AUTOINDEX_JSONP
 2

	)

51 
	#NGX_HTTP_AUTOINDEX_XML
 3

	)

53 
	#NGX_HTTP_AUTOINDEX_PREALLOCATE
 50

	)

55 
	#NGX_HTTP_AUTOINDEX_NAME_LEN
 50

	)

58 
ngx_buf_t
 *
ngx_hâp_autoödex_html
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_¨øy_t
 *
íåõs
);

60 
ngx_buf_t
 *
ngx_hâp_autoödex_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_¨øy_t
 *
íåõs
, 
ngx_°r_t
 *
ˇŒback
);

62 
ngx_öt_t
 
ngx_hâp_autoödex_js⁄p_ˇŒback
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_°r_t
 *
ˇŒback
);

64 
ngx_buf_t
 *
ngx_hâp_autoödex_xml
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_¨øy_t
 *
íåõs
);

67 
ngx_libc_cde˛
 
ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
,

68 c⁄° *
two
);

69 
ngx_öt_t
 
ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

72 
ngx_öt_t
 
ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
);

73 *
ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

74 *
ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

75 *
∑ª¡
, *
chûd
);

78 
ngx_c⁄f_íum_t
 
	gngx_hâp_autoödex_f‹m©
[] = {

79 { 
ngx_°rög
("html"), 
NGX_HTTP_AUTOINDEX_HTML
 },

80 { 
ngx_°rög
("js⁄"), 
NGX_HTTP_AUTOINDEX_JSON
 },

81 { 
ngx_°rög
("js⁄p"), 
NGX_HTTP_AUTOINDEX_JSONP
 },

82 { 
ngx_°rög
("xml"), 
NGX_HTTP_AUTOINDEX_XML
 },

83 { 
ngx_nuŒ_°rög
, 0 }

87 
ngx_comm™d_t
 
	gngx_hâp_autoödex_comm™ds
[] = {

89 { 
ngx_°rög
("autoindex"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

91 
ngx_c⁄f_£t_Êag_¶Ÿ
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

93 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
íabÀ
),

94 
NULL
 },

96 { 
ngx_°rög
("autoindex_format"),

97 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_íum_¶Ÿ
,

99 
NGX_HTTP_LOC_CONF_OFFSET
,

100 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
f‹m©
),

101 &
ngx_hâp_autoödex_f‹m©
 },

103 { 
ngx_°rög
("autoindex_localtime"),

104 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

105 
ngx_c⁄f_£t_Êag_¶Ÿ
,

106 
NGX_HTTP_LOC_CONF_OFFSET
,

107 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
loˇ…ime
),

108 
NULL
 },

110 { 
ngx_°rög
("autoindex_exact_size"),

111 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

112 
ngx_c⁄f_£t_Êag_¶Ÿ
,

113 
NGX_HTTP_LOC_CONF_OFFSET
,

114 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
exa˘_size
),

115 
NULL
 },

117 
ngx_nuŒ_comm™d


121 
ngx_hâp_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ_˘x
 = {

122 
NULL
,

123 
ngx_hâp_autoödex_öô
,

125 
NULL
,

126 
NULL
,

128 
NULL
,

129 
NULL
,

131 
ngx_hâp_autoödex_¸óã_loc_c⁄f
,

132 
ngx_hâp_autoödex_mîge_loc_c⁄f


136 
ngx_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ
 = {

137 
NGX_MODULE_V1
,

138 &
ngx_hâp_autoödex_moduÀ_˘x
,

139 
ngx_hâp_autoödex_comm™ds
,

140 
NGX_HTTP_MODULE
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NGX_MODULE_V1_PADDING


152 
ngx_öt_t


153 
	$ngx_hâp_autoödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

155 
u_ch¨
 *
œ°
, *
fûíame
;

156 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

157 
ngx_îr_t
 
îr
;

158 
ngx_buf_t
 *
b
;

159 
ngx_öt_t
 
rc
;

160 
ngx_°r_t
 
∑th
, 
ˇŒback
;

161 
ngx_dú_t
 
dú
;

162 
ngx_uöt_t
 
Àvñ
, 
f‹m©
;

163 
ngx_poﬁ_t
 *
poﬁ
;

164 
ngx_chaö_t
 
out
;

165 
ngx_¨øy_t
 
íåõs
;

166 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

167 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

169 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

170  
NGX_DECLINED
;

173 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

174  
NGX_DECLINED
;

177 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

179 i‡(!
Æcf
->
íabÀ
) {

180  
NGX_DECLINED
;

183 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

185 i‡(
rc
 !
NGX_OK
) {

186  
rc
;

191 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
,

192 
NGX_HTTP_AUTOINDEX_PREALLOCATE
);

193 i‡(
œ°
 =
NULL
) {

194  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

197 
Æloˇãd
 = 
∑th
.
Àn
;

198 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

199 i‡(
∑th
.
Àn
 > 1) {

200 
∑th
.
Àn
--;

202 
∑th
.
d©a
[∑th.
Àn
] = '\0';

204 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

205 "hâ∞autoödex: \"%s\"", 
∑th
.
d©a
);

207 
f‹m©
 = 
Æcf
->format;

209 i‡(
f‹m©
 =
NGX_HTTP_AUTOINDEX_JSONP
) {

210 i‡(
	`ngx_hâp_autoödex_js⁄p_ˇŒback
(
r
, &
ˇŒback
Ë!
NGX_OK
) {

211  
NGX_HTTP_BAD_REQUEST
;

214 i‡(
ˇŒback
.
Àn
 == 0) {

215 
f‹m©
 = 
NGX_HTTP_AUTOINDEX_JSON
;

219 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

220 
îr
 = 
ngx_î∫o
;

222 i‡(
îr
 =
NGX_ENOENT


223 || 
îr
 =
NGX_ENOTDIR


224 || 
îr
 =
NGX_ENAMETOOLONG
)

226 
Àvñ
 = 
NGX_LOG_ERR
;

227 
rc
 = 
NGX_HTTP_NOT_FOUND
;

229 } i‡(
îr
 =
NGX_EACCES
) {

230 
Àvñ
 = 
NGX_LOG_ERR
;

231 
rc
 = 
NGX_HTTP_FORBIDDEN
;

234 
Àvñ
 = 
NGX_LOG_CRIT
;

235 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

238 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

239 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

241  
rc
;

244 #i‡(
NGX_SUPPRESS_WARN
)

247 
	`ngx_memzîo
(&
íåõs
, (
ngx_¨øy_t
));

252 
poﬁ
 = 
r
->pool;

254 i‡(
	`ngx_¨øy_öô
(&
íåõs
, 
poﬁ
, 40, (
ngx_hâp_autoödex_íåy_t
))

255 !
NGX_OK
)

257  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

260 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

262 
f‹m©
) {

264 
NGX_HTTP_AUTOINDEX_JSON
:

265 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/json");

268 
NGX_HTTP_AUTOINDEX_JSONP
:

269 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/javascript");

272 
NGX_HTTP_AUTOINDEX_XML
:

273 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/xml");

274 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ch¨£t
, "utf-8");

278 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

282 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

283 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

285 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

287 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

288 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

289 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

290 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

293  
rc
;

296 
fûíame
 = 
∑th
.
d©a
;

297 
fûíame
[
∑th
.
Àn
] = '/';

300 
	`ngx_£t_î∫o
(0);

302 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

303 
îr
 = 
ngx_î∫o
;

305 i‡(
îr
 !
NGX_ENOMOREFILES
) {

306 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

307 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

308  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

314 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

315 "hâ∞autoödex fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

317 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

319 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

323 i‡(!
dú
.
vÆid_öfo
) {

327 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

328 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

329 + 
NGX_HTTP_AUTOINDEX_PREALLOCATE
;

331 
fûíame
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Æloˇãd
);

332 i‡(
fûíame
 =
NULL
) {

333  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

336 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

337 *
œ°
++ = '/';

340 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

342 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

343 
îr
 = 
ngx_î∫o
;

345 i‡(
îr
 !
NGX_ENOENT
 &&Éº !
NGX_ELOOP
) {

346 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

347 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

349 i‡(
îr
 =
NGX_EACCES
) {

353  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

356 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

357 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

358 
ngx_de_lök_öfo_n
 " \"%s\" failed",

359 
fûíame
);

360  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

365 
íåy
 = 
	`ngx_¨øy_push
(&
íåõs
);

366 i‡(
íåy
 =
NULL
) {

367  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

370 
íåy
->
«me
.
Àn
 =Üen;

372 
íåy
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 1);

373 i‡(
íåy
->
«me
.
d©a
 =
NULL
) {

374  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

377 
	`ngx_˝y°∫
(
íåy
->
«me
.
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

379 
íåy
->
dú
 = 
	`ngx_de_is_dú
(&dir);

380 
íåy
->
fûe
 = 
	`ngx_de_is_fûe
(&
dú
);

381 
íåy
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

382 
íåy
->
size
 = 
	`ngx_de_size
(&
dú
);

385 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

386 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

387 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

390 i‡(
íåõs
.
√…s
 > 1) {

391 
	`ngx_qs‹t
(
íåõs
.
ñts
, (
size_t
Ëíåõs.
√…s
,

392 (
ngx_hâp_autoödex_íåy_t
),

393 
ngx_hâp_autoödex_cmp_íåõs
);

396 
f‹m©
) {

398 
NGX_HTTP_AUTOINDEX_JSON
:

399 
b
 = 
	`ngx_hâp_autoödex_js⁄
(
r
, &
íåõs
, 
NULL
);

402 
NGX_HTTP_AUTOINDEX_JSONP
:

403 
b
 = 
	`ngx_hâp_autoödex_js⁄
(
r
, &
íåõs
, &
ˇŒback
);

406 
NGX_HTTP_AUTOINDEX_XML
:

407 
b
 = 
	`ngx_hâp_autoödex_xml
(
r
, &
íåõs
);

411 
b
 = 
	`ngx_hâp_autoödex_html
(
r
, &
íåõs
);

415 i‡(
b
 =
NULL
) {

416  
NGX_ERROR
;

421 i‡(
r
 =r->
maö
) {

422 
b
->
œ°_buf
 = 1;

425 
b
->
œ°_ö_chaö
 = 1;

427 
out
.
buf
 = 
b
;

428 
out
.
√xt
 = 
NULL
;

430  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

431 
	}
}

434 
ngx_buf_t
 *

435 
	$ngx_hâp_autoödex_html
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
íåõs
)

437 
u_ch¨
 *
œ°
, 
sˇÀ
;

438 
off_t
 
Àngth
;

439 
size_t
 
Àn
, 
ch¨_Àn
, 
esˇ≥_html
;

440 
ngx_tm_t
 
tm
;

441 
ngx_buf_t
 *
b
;

442 
ngx_öt_t
 
size
;

443 
ngx_uöt_t
 
i
, 
utf8
;

444 
ngx_time_t
 *
ç
;

445 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

446 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

448 
u_ch¨
 
tôÀ
[] =

449 "<html>" 
CRLF


453 
u_ch¨
 
hódî
[] =

454 "</tôÀ></hód>" 
CRLF


455 "<body bgcﬁ‹=\"whôe\">" 
CRLF


459 
u_ch¨
 
èû
[] =

460 "</body>" 
CRLF


461 "</html>" 
CRLF


464 *
m⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

467 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
 == 5

468 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
ch¨£t
.
d©a
, (
u_ch¨
 *) "utf-8", 5)

471 
utf8
 = 1;

474 
utf8
 = 0;

477 
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

479 
Àn
 = (
tôÀ
) - 1

480 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


481 + (
hódî
) - 1

482 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


484 + ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1

486 + (
èû
) - 1;

488 
íåy
 = 
íåõs
->
ñts
;

489 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

490 
íåy
[
i
].
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
,É¡ry[i].
«me
.
d©a
,

491 
íåy
[
i
].
«me
.
Àn
,

492 
NGX_ESCAPE_URI_COMPONENT
);

494 
íåy
[
i
].
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry[i].
«me
.
d©a
,

495 
íåy
[
i
].
«me
.
Àn
);

497 i‡(
utf8
) {

498 
íåy
[
i
].
utf_Àn
 = 
	`ngx_utf8_Àngth
”¡ry[i].
«me
.
d©a
,

499 
íåy
[
i
].
«me
.
Àn
);

501 
íåy
[
i
].
utf_Àn
 =É¡ry[i].
«me
.
Àn
;

504 
Àn
 += ("<a href=\"") - 1

505 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


508 + 
íåy
[
i
].
«me
.
Àn
 -É¡ry[i].
utf_Àn


509 + 
íåy
[
i
].
esˇ≥_html


510 + 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + ("&gt;") - 2

517 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

518 i‡(
b
 =
NULL
) {

519  
NULL
;

522 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
tôÀ
, (title) - 1);

524 i‡(
esˇ≥_html
) {

525 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

526 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

527 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

530 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

531 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

532 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

535 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</h1>", ("</h1>") - 1);

537 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
,

538 ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1);

540 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

541 
ç
 = 
	`ngx_timeofday
();

543 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

544 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "<a href=\"", ("<a href=\"") - 1);

546 i‡(
íåy
[
i
].
esˇ≥
) {

547 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
íåy
[
i
].
«me
.
d©a
,É¡ry[i].«me.
Àn
,

548 
NGX_ESCAPE_URI_COMPONENT
);

550 
b
->
œ°
 +
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥
;

553 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

554 
íåy
[
i
].
«me
.
Àn
);

557 i‡(
íåy
[
i
].
dú
) {

558 *
b
->
œ°
++ = '/';

561 *
b
->
œ°
++ = '"';

562 *
b
->
œ°
++ = '>';

564 
Àn
 = 
íåy
[
i
].
utf_Àn
;

566 i‡(
íåy
[
i
].
«me
.
Àn
 !=Üen) {

567 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

568 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3 + 1;

571 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1;

574 
œ°
 = 
b
->last;

575 
b
->
œ°
 = 
	`ngx_utf8_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

576 
ch¨_Àn
, 
íåy
[
i
].
«me
.
Àn
 + 1);

578 i‡(
íåy
[
i
].
esˇ≥_html
) {

579 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
÷a°, 
íåy
[
i
].
«me
.
d©a
,

580 
b
->
œ°
 -Üast);

583 
œ°
 = 
b
->last;

586 i‡(
íåy
[
i
].
esˇ≥_html
) {

587 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

588 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3;

591 
ch¨_Àn
 = 
Àn
;

594 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->last,

595 
íåy
[
i
].
«me
.
d©a
, 
ch¨_Àn
);

596 
œ°
 = 
b
->last;

599 
b
->
œ°
 = 
	`ngx_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

600 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1);

601 
œ°
 = 
b
->last - 3;

605 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

606 
b
->
œ°
 = 
	`ngx_˝ymem
(last, "..&gt;</a>", ("..&gt;</a>") - 1);

609 i‡(
íåy
[
i
].
dú
 && 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

610 *
b
->
œ°
++ = '/';

611 
Àn
++;

614 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</a>", ("</a>") - 1);

616 i‡(
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

617 
	`ngx_mem£t
(
b
->
œ°
, ' ', 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
);

618 
b
->
œ°
 +
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
;

622 *
b
->
œ°
++ = ' ';

624 
	`ngx_gmtime
(
íåy
[
i
].
mtime
 + 
ç
->
gmtoff
 * 60 * 
Æcf
->
loˇ…ime
, &
tm
);

626 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%02d-%s-%d %02d:%02d ",

627 
tm
.
ngx_tm_mday
,

628 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

629 
tm
.
ngx_tm_yór
,

630 
tm
.
ngx_tm_hour
,

631 
tm
.
ngx_tm_mö
);

633 i‡(
Æcf
->
exa˘_size
) {

634 i‡(
íåy
[
i
].
dú
) {

635 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

638 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%19O", 
íåy
[
i
].
size
);

642 i‡(
íåy
[
i
].
dú
) {

643 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

647 
Àngth
 = 
íåy
[
i
].
size
;

649 i‡(
Àngth
 > 1024 * 1024 * 1024 - 1) {

650 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024 * 1024));

651 i‡((
Àngth
 % (1024 * 1024 * 1024))

654 
size
++;

656 
sˇÀ
 = 'G';

658 } i‡(
Àngth
 > 1024 * 1024 - 1) {

659 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024));

660 i‡((
Àngth
 % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {

661 
size
++;

663 
sˇÀ
 = 'M';

665 } i‡(
Àngth
 > 9999) {

666 
size
 = (
ngx_öt_t
Ë(
Àngth
 / 1024);

667 i‡(
Àngth
 % 1024 > 511) {

668 
size
++;

670 
sˇÀ
 = 'K';

673 
size
 = (
ngx_öt_t
Ë
Àngth
;

674 
sˇÀ
 = '\0';

677 i‡(
sˇÀ
) {

678 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%6i%c", 
size
, 
sˇÀ
);

681 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %6i", 
size
);

686 *
b
->
œ°
++ = 
CR
;

687 *
b
->
œ°
++ = 
LF
;

690 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</pre><hr>", ("</pre><hr>") - 1);

692 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

694  
b
;

695 
	}
}

698 
ngx_buf_t
 *

699 
	$ngx_hâp_autoödex_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
íåõs
,

700 
ngx_°r_t
 *
ˇŒback
)

702 
size_t
 
Àn
;

703 
ngx_buf_t
 *
b
;

704 
ngx_uöt_t
 
i
;

705 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

707 
Àn
 = ("[" 
CRLF
 CRLF "]") - 1;

709 i‡(
ˇŒback
) {

710 
Àn
 +("/* cÆlback */" 
CRLF
 "();"Ë- 1 + 
ˇŒback
->len;

713 
íåy
 = 
íåõs
->
ñts
;

715 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

716 
íåy
[
i
].
esˇ≥
 = 
	`ngx_esˇ≥_js⁄
(
NULL
,É¡ry[i].
«me
.
d©a
,

717 
íåy
[
i
].
«me
.
Àn
);

719 
Àn
 +("{ }," 
CRLF
) - 1

721 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


725 i‡(
íåy
[
i
].
fûe
) {

726 
Àn
 +(", \"size\":"Ë- 1 + 
NGX_OFF_T_LEN
;

730 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

731 i‡(
b
 =
NULL
) {

732  
NULL
;

735 i‡(
ˇŒback
) {

736 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "/* cÆlback */" 
CRLF
,

737 ("/* cÆlback */" 
CRLF
) - 1);

739 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ˇŒback
->
d©a
, cÆlback->
Àn
);

741 *
b
->
œ°
++ = '(';

744 *
b
->
œ°
++ = '[';

746 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

747 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
CRLF
 "{ \"name\":\"",

748 (
CRLF
 "{ \"name\":\"") - 1);

750 i‡(
íåy
[
i
].
esˇ≥
) {

751 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_js⁄
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

752 
íåy
[
i
].
«me
.
Àn
);

754 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

755 
íåy
[
i
].
«me
.
Àn
);

758 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\", \"type\":\"",

761 i‡(
íåy
[
i
].
dú
) {

762 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "directory", ("directory") - 1);

764 } i‡(
íåy
[
i
].
fûe
) {

765 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "file", ("file") - 1);

768 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "other", ("other") - 1);

771 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\", \"mtime\":\"",

774 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
íåy
[
i
].
mtime
);

776 i‡(
íåy
[
i
].
fûe
) {

777 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\", \"size\":",

779 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%O", 
íåy
[
i
].
size
);

782 *
b
->
œ°
++ = '"';

785 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " },", (" },") - 1);

788 i‡(
i
 > 0) {

789 
b
->
œ°
--;

792 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
CRLF
 "]", (CRLF "]") - 1);

794 i‡(
ˇŒback
) {

795 *
b
->
œ°
++ = ')'; *b->last++ = ';';

798  
b
;

799 
	}
}

802 
ngx_öt_t


803 
	$ngx_hâp_autoödex_js⁄p_ˇŒback
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ˇŒback
)

805 
u_ch¨
 *
p
, 
c
, 
ch
;

806 
ngx_uöt_t
 
i
;

808 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"ˇŒback", 8, 
ˇŒback
Ë!
NGX_OK
) {

809 
ˇŒback
->
Àn
 = 0;

810  
NGX_OK
;

813 i‡(
ˇŒback
->
Àn
 > 128) {

814 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

815 "˛õ¡ síàtoÿl⁄g cÆlbackÇame: \"%V\"", 
ˇŒback
);

816  
NGX_DECLINED
;

819 
p
 = 
ˇŒback
->
d©a
;

821 
i
 = 0; i < 
ˇŒback
->
Àn
; i++) {

822 
ch
 = 
p
[
i
];

824 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

825 i‡(
c
 >= 'a' && c <= 'z') {

829 i‡((
ch
 >= '0' && ch <= '9') || ch == '_' || ch == '.') {

833 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

834 "˛õ¡ síàövÆid cÆlbackÇame: \"%V\"", 
ˇŒback
);

836  
NGX_DECLINED
;

839  
NGX_OK
;

840 
	}
}

843 
ngx_buf_t
 *

844 
	$ngx_hâp_autoödex_xml
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
íåõs
)

846 
size_t
 
Àn
;

847 
ngx_tm_t
 
tm
;

848 
ngx_buf_t
 *
b
;

849 
ngx_°r_t
 
ty≥
;

850 
ngx_uöt_t
 
i
;

851 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

853 
u_ch¨
 
hód
[] = "<?xm»vîsi⁄=\"1.0\"?>" 
CRLF
 "<list>" CRLF;

854 
u_ch¨
 
èû
[] = "</li°>" 
CRLF
;

856 
Àn
 = (
hód
Ë- 1 + (
èû
) - 1;

858 
íåy
 = 
íåõs
->
ñts
;

860 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

861 
íåy
[
i
].
esˇ≥
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry[i].
«me
.
d©a
,

862 
íåy
[
i
].
«me
.
Àn
);

864 
Àn
 +("<dúe˘‹y></dúe˘‹y>" 
CRLF
) - 1

865 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


868 i‡(
íåy
[
i
].
fûe
) {

869 
Àn
 +(" size=\"\""Ë- 1 + 
NGX_OFF_T_LEN
;

873 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

874 i‡(
b
 =
NULL
) {

875  
NULL
;

878 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hód
, (head) - 1);

880 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

881 *
b
->
œ°
++ = '<';

883 i‡(
íåy
[
i
].
dú
) {

884 
	`ngx_°r_£t
(&
ty≥
, "directory");

886 } i‡(
íåy
[
i
].
fûe
) {

887 
	`ngx_°r_£t
(&
ty≥
, "file");

890 
	`ngx_°r_£t
(&
ty≥
, "other");

893 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ty≥
.
d©a
,Åy≥.
Àn
);

895 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " mtime=\"", (" mtime=\"") - 1);

897 
	`ngx_gmtime
(
íåy
[
i
].
mtime
, &
tm
);

899 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%4d-%02d-%02dT%02d:%02d:%02dZ",

900 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

901 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

902 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

904 i‡(
íåy
[
i
].
fûe
) {

905 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\" size=\"",

907 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%O", 
íåy
[
i
].
size
);

910 *
b
->
œ°
++ = '"'; *b->last++ = '>';

912 i‡(
íåy
[
i
].
esˇ≥
) {

913 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

914 
íåy
[
i
].
«me
.
Àn
);

916 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

917 
íåy
[
i
].
«me
.
Àn
);

920 *
b
->
œ°
++ = '<'; *b->last++ = '/';

922 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ty≥
.
d©a
,Åy≥.
Àn
);

924 *
b
->
œ°
++ = '>';

926 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

929 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

931  
b
;

932 
	}
}

935 
ngx_libc_cde˛


936 
	$ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
, c⁄° *
two
)

938 
ngx_hâp_autoödex_íåy_t
 *
fú°
 = (ngx_hâp_autoödex_íåy_à*Ë
⁄e
;

939 
ngx_hâp_autoödex_íåy_t
 *
£c⁄d
 = (ngx_hâp_autoödex_íåy_à*Ë
two
;

941 i‡(
fú°
->
dú
 && !
£c⁄d
->dir) {

946 i‡(!
fú°
->
dú
 && 
£c⁄d
->dir) {

951  (Ë
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

952 
	}
}

957 
ngx_buf_t
 *

958 
	$ngx_hâp_autoödex_Æloc
(
ngx_hâp_autoödex_˘x_t
 *
˘x
, 
size_t
 
size
)

960 
ngx_chaö_t
 *
˛
;

962 i‡(
˘x
->
buf
) {

964 i‡((
size_t
Ë(
˘x
->
buf
->
íd
 - ctx->buf->
œ°
Ë>
size
) {

965  
˘x
->
buf
;

968 
˘x
->
size
 +˘x->
buf
->
œ°
 - ctx->buf->
pos
;

971 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, ctx->
Æloc_size
);

972 i‡(
˘x
->
buf
 =
NULL
) {

973  
NULL
;

976 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

977 i‡(
˛
 =
NULL
) {

978  
NULL
;

981 
˛
->
buf
 = 
˘x
->buf;

982 
˛
->
√xt
 = 
NULL
;

984 *
˘x
->
œ°_out
 = 
˛
;

985 
˘x
->
œ°_out
 = &
˛
->
√xt
;

987  
˘x
->
buf
;

988 
	}
}

993 
ngx_öt_t


994 
	$ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
)

996 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

997 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

998 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

1001  
r
->
hódî_£¡
 ? 
NGX_ERROR
 : 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1002 
	}
}

1006 
	$ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1008 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
;

1010 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_autoödex_loc_c⁄f_t
));

1011 i‡(
c⁄f
 =
NULL
) {

1012  
NULL
;

1015 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1016 
c⁄f
->
f‹m©
 = 
NGX_CONF_UNSET_UINT
;

1017 
c⁄f
->
loˇ…ime
 = 
NGX_CONF_UNSET
;

1018 
c⁄f
->
exa˘_size
 = 
NGX_CONF_UNSET
;

1020  
c⁄f
;

1021 
	}
}

1025 
	$ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1027 
ngx_hâp_autoödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1028 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1030 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1031 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
f‹m©
, 
¥ev
->format,

1032 
NGX_HTTP_AUTOINDEX_HTML
);

1033 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
loˇ…ime
, 
¥ev
->localtime, 0);

1034 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
exa˘_size
, 
¥ev
->exact_size, 1);

1036  
NGX_CONF_OK
;

1037 
	}
}

1040 
ngx_öt_t


1041 
	$ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
)

1043 
ngx_hâp_h™dÀr_±
 *
h
;

1044 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1046 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1048 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1049 i‡(
h
 =
NULL
) {

1050  
NGX_ERROR
;

1053 *
h
 = 
ngx_hâp_autoödex_h™dÀr
;

1055  
NGX_OK
;

1056 
	}
}

	@src/http/modules/ngx_http_browser_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_MODERN_BROWSER
 0

	)

21 
	#NGX_HTTP_ANCIENT_BROWSER
 1

	)

25 
u_ch¨
 
	mbrow£r
[12];

26 
size_t
 
	mskù
;

27 
size_t
 
	madd
;

28 
u_ch¨
 
	m«me
[12];

29 } 
	tngx_hâp_modîn_brow£r_mask_t
;

33 
ngx_uöt_t
 
	mvîsi⁄
;

34 
size_t
 
	mskù
;

35 
size_t
 
	madd
;

36 
u_ch¨
 
	m«me
[12];

37 } 
	tngx_hâp_modîn_brow£r_t
;

41 
ngx_¨øy_t
 *
	mmodîn_brow£rs
;

42 
ngx_¨øy_t
 *
	m™cõ¡_brow£rs
;

43 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mmodîn_brow£r_vÆue
;

44 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m™cõ¡_brow£r_vÆue
;

46 
	mmodîn_u∆i°ed_brow£rs
:1;

47 
	m√tsˇ≥4
:1;

48 } 
	tngx_hâp_brow£r_c⁄f_t
;

51 
ngx_öt_t
 
ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

52 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

53 
ngx_öt_t
 
ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

56 
ngx_uöt_t
 
ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_brow£r_c⁄f_t
 *
cf
);

59 
ngx_öt_t
 
ngx_hâp_brow£r_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

60 *
ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

62 *
chûd
);

63 
ngx_libc_cde˛
 
ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
,

64 c⁄° *
two
);

65 *
ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 *
ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

75 
ngx_comm™d_t
 
	gngx_hâp_brow£r_comm™ds
[] = {

77 { 
ngx_°rög
("modern_browser"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

79 
ngx_hâp_modîn_brow£r
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

82 
NULL
 },

84 { 
ngx_°rög
("ancient_browser"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

86 
ngx_hâp_™cõ¡_brow£r
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("modern_browser_value"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_hâp_modîn_brow£r_vÆue
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
NULL
 },

98 { 
ngx_°rög
("ancient_browser_value"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_hâp_™cõ¡_brow£r_vÆue
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
NULL
 },

105 
ngx_nuŒ_comm™d


109 
ngx_hâp_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ_˘x
 = {

110 
ngx_hâp_brow£r_add_v¨übÀs
,

111 
NULL
,

113 
NULL
,

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_hâp_brow£r_¸óã_c⁄f
,

120 
ngx_hâp_brow£r_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_hâp_brow£r_moduÀ_˘x
,

127 
ngx_hâp_brow£r_comm™ds
,

128 
NGX_HTTP_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_hâp_modîn_brow£r_mask_t
 
	gngx_hâp_modîn_brow£r_masks
[] = {

214 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_brow£r_v¨s
[] = {

216 { 
ngx_°rög
("msõ"), 
NULL
, 
ngx_hâp_msõ_v¨übÀ
,

217 0, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

219 { 
ngx_°rög
("modîn_brow£r"), 
NULL
, 
ngx_hâp_brow£r_v¨übÀ
,

220 
NGX_HTTP_MODERN_BROWSER
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

222 { 
ngx_°rög
("™cõ¡_brow£r"), 
NULL
, 
ngx_hâp_brow£r_v¨übÀ
,

223 
NGX_HTTP_ANCIENT_BROWSER
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

225 
ngx_hâp_nuŒ_v¨übÀ


229 
ngx_öt_t


230 
	$ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

231 
uöçå_t
 
d©a
)

233 
ngx_uöt_t
 
rc
;

234 
ngx_hâp_brow£r_c⁄f_t
 *
cf
;

236 
cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_brow£r_moduÀ
);

238 
rc
 = 
	`ngx_hâp_brow£r
(
r
, 
cf
);

240 i‡(
d©a
 =
NGX_HTTP_MODERN_BROWSER
 && 
rc
 == NGX_HTTP_MODERN_BROWSER) {

241 *
v
 = *
cf
->
modîn_brow£r_vÆue
;

242  
NGX_OK
;

245 i‡(
d©a
 =
NGX_HTTP_ANCIENT_BROWSER
 && 
rc
 == NGX_HTTP_ANCIENT_BROWSER) {

246 *
v
 = *
cf
->
™cõ¡_brow£r_vÆue
;

247  
NGX_OK
;

250 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

251  
NGX_OK
;

252 
	}
}

255 
ngx_uöt_t


256 
	$ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_brow£r_c⁄f_t
 *
cf
)

258 
size_t
 
Àn
;

259 
u_ch¨
 *
«me
, *
ua
, *
œ°
, 
c
;

260 
ngx_°r_t
 *
™cõ¡
;

261 
ngx_uöt_t
 
i
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

262 
ngx_hâp_modîn_brow£r_t
 *
modîn
;

264 i‡(
r
->
hódîs_ö
.
u£r_agít
 =
NULL
) {

265 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

266  
NGX_HTTP_MODERN_BROWSER
;

269  
NGX_HTTP_ANCIENT_BROWSER
;

272 
ua
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.
d©a
;

273 
Àn
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.len;

274 
œ°
 = 
ua
 + 
Àn
;

276 i‡(
cf
->
modîn_brow£rs
) {

277 
modîn
 = 
cf
->
modîn_brow£rs
->
ñts
;

279 
i
 = 0; i < 
cf
->
modîn_brow£rs
->
√…s
; i++) {

280 
«me
 = 
ua
 + 
modîn
[
i
].
skù
;

282 i‡(
«me
 >
œ°
) {

286 
«me
 = (
u_ch¨
 *Ë
	`ngx_°r°r
“ame, 
modîn
[
i
].name);

288 i‡(
«me
 =
NULL
) {

292 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

293 "brow£r: \"%s\"", 
«me
);

295 
«me
 +
modîn
[
i
].
add
;

297 i‡(
«me
 >
œ°
) {

301 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302 "vîsi⁄: \"%ui\" \"%s\"", 
modîn
[
i
].
vîsi⁄
, 
«me
);

304 
vîsi⁄
 = 0;

305 
vî
 = 0;

306 
sˇÀ
 = 1000000;

308 
«me
 < 
œ°
) {

310 
c
 = *
«me
++;

312 i‡(
c
 >= '0' && c <= '9') {

313 
vî
 = vî * 10 + (
c
 - '0');

317 i‡(
c
 == '.') {

318 
vîsi⁄
 +
vî
 * 
sˇÀ
;

320 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

322 
modîn
[
i
].
vîsi⁄
, version);

324 i‡(
vîsi⁄
 > 
modîn
[
i
].version) {

325  
NGX_HTTP_MODERN_BROWSER
;

328 
vî
 = 0;

329 
sˇÀ
 /= 100;

336 
vîsi⁄
 +
vî
 * 
sˇÀ
;

338 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

340 
modîn
[
i
].
vîsi⁄
, version);

342 i‡(
vîsi⁄
 >
modîn
[
i
].version) {

343  
NGX_HTTP_MODERN_BROWSER
;

346  
NGX_HTTP_ANCIENT_BROWSER
;

349 i‡(!
cf
->
modîn_u∆i°ed_brow£rs
) {

350  
NGX_HTTP_ANCIENT_BROWSER
;

354 i‡(
cf
->
√tsˇ≥4
) {

355 i‡(
Àn
 > ("Mozilla/4.72 ") - 1

356 && 
	`ngx_°∫cmp
(
ua
, "Mozilla/", ("Mozilla/") - 1) == 0

357 && 
ua
[8] > '0' && ua[8] < '5')

359  
NGX_HTTP_ANCIENT_BROWSER
;

363 i‡(
cf
->
™cõ¡_brow£rs
) {

364 
™cõ¡
 = 
cf
->
™cõ¡_brow£rs
->
ñts
;

366 
i
 = 0; i < 
cf
->
™cõ¡_brow£rs
->
√…s
; i++) {

367 i‡(
Àn
 >
™cõ¡
[
i
].len

368 && 
	`ngx_°r°r
(
ua
, 
™cõ¡
[
i
].
d©a
Ë!
NULL
)

370  
NGX_HTTP_ANCIENT_BROWSER
;

375 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

376  
NGX_HTTP_MODERN_BROWSER
;

379  
NGX_HTTP_ANCIENT_BROWSER
;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

385 
uöçå_t
 
d©a
)

387 i‡(
r
->
hódîs_ö
.
msõ
) {

388 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

389  
NGX_OK
;

392 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

393  
NGX_OK
;

394 
	}
}

397 
ngx_öt_t


398 
	$ngx_hâp_brow£r_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

400 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

402 
v
 = 
ngx_hâp_brow£r_v¨s
; v->
«me
.
Àn
; v++) {

404 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

405 i‡(
v¨
 =
NULL
) {

406  
NGX_ERROR
;

409 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

410 
v¨
->
d©a
 = 
v
->data;

413  
NGX_OK
;

414 
	}
}

418 
	$ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

420 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
;

422 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_brow£r_c⁄f_t
));

423 i‡(
c⁄f
 =
NULL
) {

424  
NULL
;

439  
c⁄f
;

440 
	}
}

444 
	$ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

446 
ngx_hâp_brow£r_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

447 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
 = 
chûd
;

449 
ngx_uöt_t
 
i
, 
n
;

450 
ngx_hâp_modîn_brow£r_t
 *
brow£rs
, *
›îa
;

458 i‡(
c⁄f
->
modîn_brow£rs
 =
NULL
 && c⁄f->
modîn_u∆i°ed_brow£rs
 == 0) {

459 
c⁄f
->
modîn_brow£rs
 = 
¥ev
->modern_browsers;

460 
c⁄f
->
modîn_u∆i°ed_brow£rs
 = 
¥ev
->modern_unlisted_browsers;

462 } i‡(
c⁄f
->
modîn_brow£rs
 !
NULL
) {

463 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

465 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

466 i‡(
brow£rs
[
i
].
skù
 == 0) {

467 
found
;

476 
›îa
 = 
	`ngx_¨øy_push
(
c⁄f
->
modîn_brow£rs
);

477 i‡(
›îa
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
›îa
->
skù
 = 0;

482 
›îa
->
vîsi⁄
 = 4001000000U;

484 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

486 
found
:

488 
	`ngx_qs‹t
(
brow£rs
, (
size_t
Ë
c⁄f
->
modîn_brow£rs
->
√…s
,

489 (
ngx_hâp_modîn_brow£r_t
),

490 
ngx_hâp_modîn_brow£r_s‹t
);

492 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

493 
n
 = 
brow£rs
[
i
].
skù
;

495 
brow£rs
[
i
].
skù
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].skip;

496 
brow£rs
[
i
].
add
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].add;

497 (Ë
	`ngx_˝y°∫
(
brow£rs
[
i
].
«me
,

498 
ngx_hâp_modîn_brow£r_masks
[
n
].
«me
, 12);

502 i‡(
c⁄f
->
™cõ¡_brow£rs
 =
NULL
 && c⁄f->
√tsˇ≥4
 == 0) {

503 
c⁄f
->
™cõ¡_brow£rs
 = 
¥ev
->ancient_browsers;

504 
c⁄f
->
√tsˇ≥4
 = 
¥ev
->netscape4;

507 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

508 
c⁄f
->
modîn_brow£r_vÆue
 = 
¥ev
->modern_browser_value;

511 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

512 
c⁄f
->
modîn_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

515 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

516 
c⁄f
->
™cõ¡_brow£r_vÆue
 = 
¥ev
->ancient_browser_value;

519 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

520 
c⁄f
->
™cõ¡_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

523  
NGX_CONF_OK
;

524 
	}
}

527 
ngx_libc_cde˛


528 
	$ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
, c⁄° *
two
)

530 
ngx_hâp_modîn_brow£r_t
 *
fú°
 = (ngx_hâp_modîn_brow£r_à*Ë
⁄e
;

531 
ngx_hâp_modîn_brow£r_t
 *
£c⁄d
 = (ngx_hâp_modîn_brow£r_à*Ë
two
;

533  (
fú°
->
skù
 - 
£c⁄d
->skip);

534 
	}
}

538 
	$ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

540 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

542 
u_ch¨
 
c
;

543 
ngx_°r_t
 *
vÆue
;

544 
ngx_uöt_t
 
i
, 
n
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

545 
ngx_hâp_modîn_brow£r_t
 *
brow£r
;

546 
ngx_hâp_modîn_brow£r_mask_t
 *
mask
;

548 
vÆue
 = 
cf
->
¨gs
->
ñts
;

550 i‡(
cf
->
¨gs
->
√…s
 == 2) {

551 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unlisted") == 0) {

552 
bcf
->
modîn_u∆i°ed_brow£rs
 = 1;

553  
NGX_CONF_OK
;

556  
NGX_CONF_ERROR
;

559 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

560 
bcf
->
modîn_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 5,

561 (
ngx_hâp_modîn_brow£r_t
));

562 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

563  
NGX_CONF_ERROR
;

567 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
modîn_brow£rs
);

568 i‡(
brow£r
 =
NULL
) {

569  
NGX_CONF_ERROR
;

572 
mask
 = 
ngx_hâp_modîn_brow£r_masks
;

574 
n
 = 0; 
mask
[n].
brow£r
[0] != '\0';Ç++) {

575 i‡(
	`ngx_°rˇ£cmp
(
mask
[
n
].
brow£r
, 
vÆue
[1].
d©a
) == 0) {

576 
found
;

580 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

581 "unknow¿brow£∏«mê\"%V\"", &
vÆue
[1]);

583  
NGX_CONF_ERROR
;

585 
found
:

593 
brow£r
->
skù
 = 
n
;

595 
vîsi⁄
 = 0;

596 
vî
 = 0;

597 
sˇÀ
 = 1000000;

599 
i
 = 0; i < 
vÆue
[2].
Àn
; i++) {

601 
c
 = 
vÆue
[2].
d©a
[
i
];

603 i‡(
c
 >= '0' && c <= '9') {

604 
vî
 = vî * 10 + (
c
 - '0');

608 i‡(
c
 == '.') {

609 
vîsi⁄
 +
vî
 * 
sˇÀ
;

610 
vî
 = 0;

611 
sˇÀ
 /= 100;

615 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

616 "övÆid brow£∏vîsi⁄ \"%V\"", &
vÆue
[2]);

618  
NGX_CONF_ERROR
;

621 
vîsi⁄
 +
vî
 * 
sˇÀ
;

623 
brow£r
->
vîsi⁄
 = version;

625  
NGX_CONF_OK
;

626 
	}
}

630 
	$ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

632 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

634 
ngx_°r_t
 *
vÆue
, *
brow£r
;

635 
ngx_uöt_t
 
i
;

637 
vÆue
 = 
cf
->
¨gs
->
ñts
;

639 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

640 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "netscape4") == 0) {

641 
bcf
->
√tsˇ≥4
 = 1;

645 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

646 
bcf
->
™cõ¡_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

647 (
ngx_°r_t
));

648 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

649  
NGX_CONF_ERROR
;

653 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
™cõ¡_brow£rs
);

654 i‡(
brow£r
 =
NULL
) {

655  
NGX_CONF_ERROR
;

658 *
brow£r
 = 
vÆue
[
i
];

661  
NGX_CONF_OK
;

662 
	}
}

666 
	$ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

668 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

670 
ngx_°r_t
 *
vÆue
;

672 
bcf
->
modîn_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

673 (
ngx_hâp_v¨übÀ_vÆue_t
));

674 i‡(
bcf
->
modîn_brow£r_vÆue
 =
NULL
) {

675  
NGX_CONF_ERROR
;

678 
vÆue
 = 
cf
->
¨gs
->
ñts
;

680 
bcf
->
modîn_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

681 
bcf
->
modîn_brow£r_vÆue
->
vÆid
 = 1;

682 
bcf
->
modîn_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

683 
bcf
->
modîn_brow£r_vÆue
->
nŸ_found
 = 0;

684 
bcf
->
modîn_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

686  
NGX_CONF_OK
;

687 
	}
}

691 
	$ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

693 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

695 
ngx_°r_t
 *
vÆue
;

697 
bcf
->
™cõ¡_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

698 (
ngx_hâp_v¨übÀ_vÆue_t
));

699 i‡(
bcf
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

700  
NGX_CONF_ERROR
;

703 
vÆue
 = 
cf
->
¨gs
->
ñts
;

705 
bcf
->
™cõ¡_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

706 
bcf
->
™cõ¡_brow£r_vÆue
->
vÆid
 = 1;

707 
bcf
->
™cõ¡_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

708 
bcf
->
™cõ¡_brow£r_vÆue
->
nŸ_found
 = 0;

709 
bcf
->
™cõ¡_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

711  
NGX_CONF_OK
;

712 
	}
}

	@src/http/modules/ngx_http_charset_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_CHARSET_OFF
 -2

	)

14 
	#NGX_HTTP_NO_CHARSET
 -3

	)

15 
	#NGX_HTTP_CHARSET_VAR
 0x10000

	)

18 
	#NGX_UTF_LEN
 4

	)

20 
	#NGX_HTML_ENTITY_LEN
 (("&#1114111;"Ë- 1)

	)

24 
u_ch¨
 **
	mèbÀs
;

25 
ngx_°r_t
 
	m«me
;

27 
	mÀngth
:16;

28 
	mutf8
:1;

29 } 
	tngx_hâp_ch¨£t_t
;

33 
ngx_öt_t
 
	m§c
;

34 
ngx_öt_t
 
	md°
;

35 } 
	tngx_hâp_ch¨£t_ªcode_t
;

39 
ngx_öt_t
 
	m§c
;

40 
ngx_öt_t
 
	md°
;

41 
u_ch¨
 *
	m§c2d°
;

42 
u_ch¨
 *
	md°2§c
;

43 } 
	tngx_hâp_ch¨£t_èbÀs_t
;

47 
ngx_¨øy_t
 
	mch¨£ts
;

48 
ngx_¨øy_t
 
	mèbÀs
;

49 
ngx_¨øy_t
 
	mªcodes
;

50 } 
	tngx_hâp_ch¨£t_maö_c⁄f_t
;

54 
ngx_öt_t
 
	mch¨£t
;

55 
ngx_öt_t
 
	msour˚_ch¨£t
;

56 
ngx_Êag_t
 
	movîride_ch¨£t
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 } 
	tngx_hâp_ch¨£t_loc_c⁄f_t
;

64 
u_ch¨
 *
	mèbÀ
;

65 
ngx_öt_t
 
	mch¨£t
;

66 
ngx_°r_t
 
	mch¨£t_«me
;

68 
ngx_chaö_t
 *
	mbusy
;

69 
ngx_chaö_t
 *
	m‰ì_bufs
;

70 
ngx_chaö_t
 *
	m‰ì_buf„rs
;

72 
size_t
 
	mßved_Àn
;

73 
u_ch¨
 
	mßved
[
NGX_UTF_LEN
];

75 
	mÀngth
:16;

76 
	m‰om_utf8
:1;

77 
	mto_utf8
:1;

78 } 
	tngx_hâp_ch¨£t_˘x_t
;

82 
ngx_hâp_ch¨£t_èbÀs_t
 *
	mèbÀ
;

83 
ngx_hâp_ch¨£t_t
 *
	mch¨£t
;

84 
ngx_uöt_t
 
	mch¨a˘îs
;

85 } 
	tngx_hâp_ch¨£t_c⁄f_˘x_t
;

88 
ngx_öt_t
 
ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_°r_t
 *
«me
);

90 
ngx_öt_t
 
ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_°r_t
 *
«me
);

92 
ngx_öt_t
 
ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_°r_t
 *
«me
);

94 
ngx_öt_t
 
ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

95 
ngx_ölöe
 
ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_°r_t
 *
ch¨£t
);

97 
ngx_öt_t
 
ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
, 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
);

99 
ngx_uöt_t
 
ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
);

100 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

101 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

102 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

103 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

105 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
,

106 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

107 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
,

108 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
, 
size_t
 
size
);

110 *
ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

111 *
c⁄f
);

112 *
ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

113 *
c⁄f
);

115 *
ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 
ngx_öt_t
 
ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
);

119 *
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

120 *
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

121 *
ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

122 *
∑ª¡
, *
chûd
);

123 
ngx_öt_t
 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_°r_t
 
	gngx_hâp_ch¨£t_deÁu…_ty≥s
[] = {

127 
ngx_°rög
("text/html"),

128 
ngx_°rög
("text/xml"),

129 
ngx_°rög
("text/plain"),

130 
ngx_°rög
("text/vnd.wap.wml"),

131 
ngx_°rög
("application/javascript"),

132 
ngx_°rög
("application/rss+xml"),

133 
ngx_nuŒ_°rög


137 
ngx_comm™d_t
 
	gngx_hâp_ch¨£t_fûãr_comm™ds
[] = {

139 { 
ngx_°rög
("charset"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


141 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
),

145 
NULL
 },

147 { 
ngx_°rög
("source_charset"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


149 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
sour˚_ch¨£t
),

153 
NULL
 },

155 { 
ngx_°rög
("override_charset"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


157 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

158 
ngx_c⁄f_£t_Êag_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ovîride_ch¨£t
),

161 
NULL
 },

163 { 
ngx_°rög
("charset_types"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

165 
ngx_hâp_ty≥s_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ty≥s_keys
),

168 &
ngx_hâp_ch¨£t_deÁu…_ty≥s
[0] },

170 { 
ngx_°rög
("charset_map"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

172 
ngx_hâp_ch¨£t_m≠_block
,

173 
NGX_HTTP_MAIN_CONF_OFFSET
,

175 
NULL
 },

177 
ngx_nuŒ_comm™d


181 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ_˘x
 = {

182 
NULL
,

183 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
,

185 
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
,

186 
NULL
,

188 
NULL
,

189 
NULL
,

191 
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
,

192 
ngx_hâp_ch¨£t_mîge_loc_c⁄f


196 
ngx_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ
 = {

197 
NGX_MODULE_V1
,

198 &
ngx_hâp_ch¨£t_fûãr_moduÀ_˘x
,

199 
ngx_hâp_ch¨£t_fûãr_comm™ds
,

200 
NGX_HTTP_MODULE
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NGX_MODULE_V1_PADDING


212 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

213 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

216 
ngx_öt_t


217 
	$ngx_hâp_ch¨£t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

219 
ngx_öt_t
 
ch¨£t
, 
sour˚_ch¨£t
;

220 
ngx_°r_t
 
d°
, 
§c
;

221 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

222 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

224 i‡(
r
 =r->
maö
) {

225 
ch¨£t
 = 
	`ngx_hâp_de°ö©i⁄_ch¨£t
(
r
, &
d°
);

228 
ch¨£t
 = 
	`ngx_hâp_maö_ªque°_ch¨£t
(
r
, &
d°
);

231 i‡(
ch¨£t
 =
NGX_ERROR
) {

232  
NGX_ERROR
;

235 i‡(
ch¨£t
 =
NGX_DECLINED
) {

236  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

241 
sour˚_ch¨£t
 = 
	`ngx_hâp_sour˚_ch¨£t
(
r
, &
§c
);

243 i‡(
sour˚_ch¨£t
 =
NGX_ERROR
) {

244  
NGX_ERROR
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

253 "ch¨£t: \"%V\" > \"%V\"", &
§c
, &
d°
);

255 i‡(
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

256 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

258  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

261 i‡(
ch¨£t
 =
NGX_HTTP_NO_CHARSET


262 || 
sour˚_ch¨£t
 =
NGX_HTTP_NO_CHARSET
)

264 i‡(
sour˚_ch¨£t
 !
ch¨£t


265 || 
	`ngx_°∫ˇ£cmp
(
d°
.
d©a
, 
§c
.d©a, d°.
Àn
) != 0)

267 
no_ch¨£t_m≠
;

270 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

275 i‡(
sour˚_ch¨£t
 =
ch¨£t
) {

276 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

278 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

285 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög


286 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

288  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

291 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

292 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

294 i‡(
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
 =
NULL


295 || 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
] =
NULL
)

297 
no_ch¨£t_m≠
;

300 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

302 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

304  
	`ngx_hâp_ch¨£t_˘x
(
r
, 
ch¨£ts
, 
ch¨£t
, 
sour˚_ch¨£t
);

306 
no_ch¨£t_m≠
:

308 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

310 &
§c
, &
d°
);

312  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

313 
	}
}

316 
ngx_öt_t


317 
	$ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

319 
ngx_öt_t
 
ch¨£t
;

320 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

321 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

322 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
mlcf
;

323 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

325 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

326  
NGX_DECLINED
;

329 i‡(
r
->
hódîs_out
.
ovîride_ch¨£t


330 && 
r
->
hódîs_out
.
ovîride_ch¨£t
->
Àn
)

332 *
«me
 = *
r
->
hódîs_out
.
ovîride_ch¨£t
;

334 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

336 i‡(
ch¨£t
 !
NGX_HTTP_NO_CHARSET
) {

337  
ch¨£t
;

340 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

341 "unknow¿ch¨£à\"%V\"Åÿovîride", 
«me
);

343  
NGX_DECLINED
;

346 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

347 
ch¨£t
 = 
mlcf
->charset;

349 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

350  
NGX_DECLINED
;

353 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

354 i‡(
mlcf
->
ovîride_ch¨£t
 == 0) {

355  
NGX_DECLINED
;

359 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
mlcf
->
ty≥s
Ë=
NULL
) {

360  
NGX_DECLINED
;

364 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

365 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

366 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

367 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

368  
ch¨£t
;

371 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

373 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

374  
NGX_ERROR
;

377 
«me
->
Àn
 = 
vv
->len;

378 
«me
->
d©a
 = 
vv
->data;

380  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
§c
)

387 
ngx_öt_t
 
ch¨£t
;

388 
ngx_°r_t
 *
maö_ch¨£t
;

389 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

391 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

393 i‡(
˘x
) {

394 *
§c
 = 
˘x
->
ch¨£t_«me
;

395  
˘x
->
ch¨£t
;

398 
maö_ch¨£t
 = &
r
->
maö
->
hódîs_out
.
ch¨£t
;

400 i‡(
maö_ch¨£t
->
Àn
 == 0) {

401  
NGX_DECLINED
;

404 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

405 i‡(
˘x
 =
NULL
) {

406  
NGX_ERROR
;

409 
	`ngx_hâp_£t_˘x
(
r
->
maö
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

411 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
maö_ch¨£t
);

413 
˘x
->
ch¨£t
 = charset;

414 
˘x
->
ch¨£t_«me
 = *
maö_ch¨£t
;

415 *
§c
 = *
maö_ch¨£t
;

417  
ch¨£t
;

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

424 
ngx_öt_t
 
ch¨£t
;

425 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

426 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

427 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

428 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

430 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

431 *
«me
 = 
r
->
hódîs_out
.
ch¨£t
;

432  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

435 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

437 
ch¨£t
 = 
lcf
->
sour˚_ch¨£t
;

439 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

440 
«me
->
Àn
 = 0;

441  
ch¨£t
;

444 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

445 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

446 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

447 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

448  
ch¨£t
;

451 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

453 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

454  
NGX_ERROR
;

457 
«me
->
Àn
 = 
vv
->len;

458 
«me
->
d©a
 = 
vv
->data;

460  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

467 
ngx_uöt_t
 
i
, 
n
;

468 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

469 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

471 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

473 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

474 
n
 = 
mcf
->
ch¨£ts
.
√…s
;

476 
i
 = 0; i < 
n
; i++) {

477 i‡(
ch¨£t
[
i
].
«me
.
Àn
 !=Çame->len) {

481 i‡(
	`ngx_°∫ˇ£cmp
(
ch¨£t
[
i
].
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0) {

482  
i
;

486  
NGX_HTTP_NO_CHARSET
;

487 
	}
}

490 
ngx_ölöe
 

491 
	$ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ch¨£t
)

493 i‡(
r
 !r->
maö
) {

497 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


498 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY
)

505 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

509 
r
->
hódîs_out
.
ch¨£t
 = *charset;

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
,

515 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
)

517 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

519 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

520 i‡(
˘x
 =
NULL
) {

521  
NGX_ERROR
;

524 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

526 
˘x
->
èbÀ
 = 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
];

527 
˘x
->
ch¨£t
 = charset;

528 
˘x
->
ch¨£t_«me
 = 
ch¨£ts
[
ch¨£t
].
«me
;

529 
˘x
->
Àngth
 = 
ch¨£ts
[
ch¨£t
].length;

530 
˘x
->
‰om_utf8
 = 
ch¨£ts
[
sour˚_ch¨£t
].
utf8
;

531 
˘x
->
to_utf8
 = 
ch¨£ts
[
ch¨£t
].
utf8
;

533 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

535 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë&& 
r
 =r->
maö
) {

536 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

539 
r
->
fûãr_√ed_ãmp‹¨y
 = 1;

542  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

543 
	}
}

546 
ngx_öt_t


547 
	$ngx_hâp_ch¨£t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

549 
ngx_öt_t
 
rc
;

550 
ngx_buf_t
 *
b
;

551 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

552 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

554 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

556 i‡(
˘x
 =
NULL
 || ctx->
èbÀ
 == NULL) {

557  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

560 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë|| ctx->
busy
) {

562 
out
 = 
NULL
;

563 
Œ
 = &
out
;

565 
˛
 = 
ö
; cl; c»˛->
√xt
) {

566 
b
 = 
˛
->
buf
;

568 i‡(
	`ngx_buf_size
(
b
) == 0) {

570 *
Œ
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

571 i‡(*
Œ
 =
NULL
) {

572  
NGX_ERROR
;

575 (*
Œ
)->
buf
 = 
b
;

576 (*
Œ
)->
√xt
 = 
NULL
;

578 
Œ
 = &(*Œ)->
√xt
;

583 i‡(
˘x
->
to_utf8
) {

584 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_to_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

587 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

590 i‡(*
Œ
 =
NULL
) {

591  
NGX_ERROR
;

594 *
Œ
) {

595 
Œ
 = &(*Œ)->
√xt
;

599 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

601 i‡(
out
) {

602 i‡(
˘x
->
busy
 =
NULL
) {

603 
˘x
->
busy
 = 
out
;

606 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

607 
˛
->
√xt
 = 
out
;

611 
˘x
->
busy
) {

613 
˛
 = 
˘x
->
busy
;

614 
b
 = 
˛
->
buf
;

616 i‡(
	`ngx_buf_size
(
b
) != 0) {

620 
˘x
->
busy
 = 
˛
->
√xt
;

622 i‡(
b
->
èg
 !(
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
) {

626 i‡(
b
->
shadow
) {

627 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

630 i‡(
b
->
pos
) {

631 
˛
->
√xt
 = 
˘x
->
‰ì_buf„rs
;

632 
˘x
->
‰ì_buf„rs
 = 
˛
;

636 
˛
->
√xt
 = 
˘x
->
‰ì_bufs
;

637 
˘x
->
‰ì_bufs
 = 
˛
;

640  
rc
;

643 
˛
 = 
ö
; cl; c»˛->
√xt
) {

644 (Ë
	`ngx_hâp_ch¨£t_ªcode
(
˛
->
buf
, 
˘x
->
èbÀ
);

647  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

648 
	}
}

651 
ngx_uöt_t


652 
	$ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
)

654 
u_ch¨
 *
p
, *
œ°
;

656 
œ°
 = 
b
->last;

658 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

660 i‡(*
p
 !
èbÀ
[*p]) {

661 
ªcode
;

667 
ªcode
:

670 i‡(*
p
 !
èbÀ
[*p]) {

671 *
p
 = 
èbÀ
[*p];

674 
p
++;

676 } 
p
 < 
œ°
);

678 
b
->
ö_fûe
 = 0;

681 
	}
}

684 
ngx_chaö_t
 *

685 
	$ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

686 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

688 
size_t
 
Àn
, 
size
;

689 
u_ch¨
 
c
, *
p
, *
§c
, *
d°
, *
ßved
, **
èbÀ
;

690 
uöt32_t
 
n
;

691 
ngx_buf_t
 *
b
;

692 
ngx_uöt_t
 
i
;

693 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

695 
§c
 = 
buf
->
pos
;

697 i‡(
˘x
->
ßved_Àn
 == 0) {

699  ; 
§c
 < 
buf
->
œ°
; src++) {

701 i‡(*
§c
 < 0x80) {

705 
Àn
 = 
§c
 - 
buf
->
pos
;

707 i‡(
Àn
 > 512) {

708 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

709 i‡(
out
 =
NULL
) {

710  
NULL
;

713 
b
 = 
out
->
buf
;

715 
b
->
ãmp‹¨y
 = 
buf
->temporary;

716 
b
->
mem‹y
 = 
buf
->memory;

717 
b
->
mm≠
 = 
buf
->mmap;

718 
b
->
Êush
 = 
buf
->flush;

720 
b
->
pos
 = 
buf
->pos;

721 
b
->
œ°
 = 
§c
;

723 
out
->
buf
 = 
b
;

724 
out
->
√xt
 = 
NULL
;

726 
size
 = 
buf
->
œ°
 - 
§c
;

728 
ßved
 = 
§c
;

729 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
size
);

731 i‡(
n
 == 0xfffffffe) {

734 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
size
);

735 
˘x
->
ßved_Àn
 = 
size
;

737 
b
->
shadow
 = 
buf
;

739  
out
;

743 
out
 = 
NULL
;

744 
size
 = 
Àn
 + 
buf
->
œ°
 - 
§c
;

745 
§c
 = 
buf
->
pos
;

748 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

749 
size
 +
NGX_HTML_ENTITY_LEN
;

752 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

753 i‡(
˛
 =
NULL
) {

754  
NULL
;

757 i‡(
out
) {

758 
out
->
√xt
 = 
˛
;

761 
out
 = 
˛
;

764 
b
 = 
˛
->
buf
;

765 
d°
 = 
b
->
pos
;

767 
ªcode
;

770 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

771 i‡(
out
 =
NULL
) {

772  
NULL
;

775 
out
->
buf
 = buf;

776 
out
->
√xt
 = 
NULL
;

778  
out
;

783 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

784 "hâ∞ch¨£àut‡ßved: %z", 
˘x
->
ßved_Àn
);

786 
p
 = 
§c
;

788 
i
 = 
˘x
->
ßved_Àn
; i < 
NGX_UTF_LEN
; i++) {

789 
˘x
->
ßved
[
i
] = *
p
++;

791 i‡(
p
 =
buf
->
œ°
) {

796 
ßved
 = 
˘x
->saved;

797 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
i
);

799 
c
 = '\0';

801 i‡(
n
 < 0x10000) {

802 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

803 
p
 = 
èbÀ
[
n
 >> 8];

805 i‡(
p
) {

806 
c
 = 
p
[
n
 & 0xff];

809 } i‡(
n
 == 0xfffffffe) {

813 i‡(
i
 < 
NGX_UTF_LEN
) {

814 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

815 i‡(
out
 =
NULL
) {

816  
NULL
;

819 
b
 = 
out
->
buf
;

821 
b
->
pos
 = 
buf
->pos;

822 
b
->
œ°
 = 
buf
->last;

823 
b
->
sync
 = 1;

824 
b
->
shadow
 = 
buf
;

826 
	`ngx_mem˝y
(&
˘x
->
ßved
[˘x->
ßved_Àn
], 
§c
, 
i
);

827 
˘x
->
ßved_Àn
 +
i
;

829  
out
;

833 
size
 = 
buf
->
œ°
 - buf->
pos
;

835 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

836 
size
 +
NGX_HTML_ENTITY_LEN
;

839 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

840 i‡(
˛
 =
NULL
) {

841  
NULL
;

844 
out
 = 
˛
;

846 
b
 = 
˛
->
buf
;

847 
d°
 = 
b
->
pos
;

849 i‡(
c
) {

850 *
d°
++ = 
c
;

852 } i‡(
n
 == 0xfffffffe) {

853 *
d°
++ = '?';

855 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

858 
ßved
 = &
˘x
->ßved[
NGX_UTF_LEN
];

860 } i‡(
n
 > 0x10ffff) {

861 *
d°
++ = '?';

863 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

867 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

870 
§c
 +(
ßved
 - 
˘x
->ßvedË- ctx->
ßved_Àn
;

871 
˘x
->
ßved_Àn
 = 0;

873 
ªcode
:

875 
Œ
 = &
˛
->
√xt
;

877 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

879 
§c
 < 
buf
->
œ°
) {

881 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
NGX_HTML_ENTITY_LEN
) {

882 
b
->
œ°
 = 
d°
;

884 
size
 = 
buf
->
œ°
 - 
§c
 + 
NGX_HTML_ENTITY_LEN
;

886 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

887 i‡(
˛
 =
NULL
) {

888  
NULL
;

891 *
Œ
 = 
˛
;

892 
Œ
 = &
˛
->
√xt
;

894 
b
 = 
˛
->
buf
;

895 
d°
 = 
b
->
pos
;

898 i‡(*
§c
 < 0x80) {

899 *
d°
++ = *
§c
++;

903 
Àn
 = 
buf
->
œ°
 - 
§c
;

905 
n
 = 
	`ngx_utf8_decode
(&
§c
, 
Àn
);

907 i‡(
n
 < 0x10000) {

909 
p
 = 
èbÀ
[
n
 >> 8];

911 i‡(
p
) {

912 
c
 = 
p
[
n
 & 0xff];

914 i‡(
c
) {

915 *
d°
++ = 
c
;

920 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

925 i‡(
n
 == 0xfffffffe) {

928 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
Àn
);

929 
˘x
->
ßved_Àn
 = 
Àn
;

931 i‡(
b
->
pos
 =
d°
) {

932 
b
->
sync
 = 1;

933 
b
->
ãmp‹¨y
 = 0;

939 i‡(
n
 > 0x10ffff) {

940 *
d°
++ = '?';

942 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

950 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

953 
b
->
œ°
 = 
d°
;

955 
b
->
œ°_buf
 = 
buf
->last_buf;

956 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

957 
b
->
Êush
 = 
buf
->flush;

959 
b
->
shadow
 = 
buf
;

961  
out
;

962 
	}
}

965 
ngx_chaö_t
 *

966 
	$ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

967 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

969 
size_t
 
Àn
, 
size
;

970 
u_ch¨
 *
p
, *
§c
, *
d°
, *
èbÀ
;

971 
ngx_buf_t
 *
b
;

972 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

974 
èbÀ
 = 
˘x
->table;

976 
§c
 = 
buf
->
pos
; sr¯< buf->
œ°
; src++) {

977 i‡(
èbÀ
[*
§c
 * 
NGX_UTF_LEN
] == '\1') {

981 
ªcode
;

984 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

985 i‡(
out
 =
NULL
) {

986  
NULL
;

989 
out
->
buf
 = buf;

990 
out
->
√xt
 = 
NULL
;

992  
out
;

994 
ªcode
:

1001 
Àn
 = 
§c
 - 
buf
->
pos
;

1003 i‡(
Àn
 > 512) {

1004 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

1005 i‡(
out
 =
NULL
) {

1006  
NULL
;

1009 
b
 = 
out
->
buf
;

1011 
b
->
ãmp‹¨y
 = 
buf
->temporary;

1012 
b
->
mem‹y
 = 
buf
->memory;

1013 
b
->
mm≠
 = 
buf
->mmap;

1014 
b
->
Êush
 = 
buf
->flush;

1016 
b
->
pos
 = 
buf
->pos;

1017 
b
->
œ°
 = 
§c
;

1019 
out
->
buf
 = 
b
;

1020 
out
->
√xt
 = 
NULL
;

1022 
size
 = 
buf
->
œ°
 - 
§c
;

1023 
size
 = sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1026 
out
 = 
NULL
;

1028 
size
 = 
buf
->
œ°
 - 
§c
;

1029 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1031 
§c
 = 
buf
->
pos
;

1034 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1035 i‡(
˛
 =
NULL
) {

1036  
NULL
;

1039 i‡(
out
) {

1040 
out
->
√xt
 = 
˛
;

1043 
out
 = 
˛
;

1046 
Œ
 = &
˛
->
√xt
;

1048 
b
 = 
˛
->
buf
;

1049 
d°
 = 
b
->
pos
;

1051 
§c
 < 
buf
->
œ°
) {

1053 
p
 = &
èbÀ
[*
§c
++ * 
NGX_UTF_LEN
];

1054 
Àn
 = *
p
++;

1056 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
Àn
) {

1057 
b
->
œ°
 = 
d°
;

1059 
size
 = 
buf
->
œ°
 - 
§c
;

1060 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1062 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1063 i‡(
˛
 =
NULL
) {

1064  
NULL
;

1067 *
Œ
 = 
˛
;

1068 
Œ
 = &
˛
->
√xt
;

1070 
b
 = 
˛
->
buf
;

1071 
d°
 = 
b
->
pos
;

1074 
Àn
) {

1075 *
d°
++ = *
p
++;

1076 
Àn
--;

1080 
b
->
œ°
 = 
d°
;

1082 
b
->
œ°_buf
 = 
buf
->last_buf;

1083 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

1084 
b
->
Êush
 = 
buf
->flush;

1086 
b
->
shadow
 = 
buf
;

1088  
out
;

1089 
	}
}

1092 
ngx_chaö_t
 *

1093 
	$ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

1095 
ngx_chaö_t
 *
˛
;

1097 
˛
 = 
˘x
->
‰ì_bufs
;

1099 i‡(
˛
) {

1100 
˘x
->
‰ì_bufs
 = 
˛
->
√xt
;

1102 
˛
->
buf
->
shadow
 = 
NULL
;

1103 
˛
->
√xt
 = 
NULL
;

1105  
˛
;

1108 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1109 i‡(
˛
 =
NULL
) {

1110  
NULL
;

1113 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

1114 i‡(
˛
->
buf
 =
NULL
) {

1115  
NULL
;

1118 
˛
->
√xt
 = 
NULL
;

1120 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1122  
˛
;

1123 
	}
}

1126 
ngx_chaö_t
 *

1127 
	$ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
,

1128 
size_t
 
size
)

1130 
ngx_buf_t
 *
b
;

1131 
ngx_chaö_t
 *
˛
, **
Œ
;

1133 
Œ
 = &
˘x
->
‰ì_buf„rs
, 
˛
 = ctx->free_buffers;

1134 
˛
;

1135 
Œ
 = &
˛
->
√xt
, cl = cl->next)

1137 
b
 = 
˛
->
buf
;

1139 i‡((
size_t
Ë(
b
->
íd
 - b->
°¨t
Ë>
size
) {

1140 *
Œ
 = 
˛
->
√xt
;

1141 
˛
->
√xt
 = 
NULL
;

1143 
b
->
pos
 = b->
°¨t
;

1144 
b
->
ãmp‹¨y
 = 1;

1145 
b
->
shadow
 = 
NULL
;

1147  
˛
;

1151 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1152 i‡(
˛
 =
NULL
) {

1153  
NULL
;

1156 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
size
);

1157 i‡(
˛
->
buf
 =
NULL
) {

1158  
NULL
;

1161 
˛
->
√xt
 = 
NULL
;

1163 
˛
->
buf
->
ãmp‹¨y
 = 1;

1164 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1166  
˛
;

1167 
	}
}

1171 
	$ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1173 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
 = 
c⁄f
;

1175 *
rv
;

1176 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1177 
ngx_öt_t
 
§c
, 
d°
;

1178 
ngx_uöt_t
 
i
, 
n
;

1179 
ngx_°r_t
 *
vÆue
;

1180 
ngx_c⁄f_t
 
pvcf
;

1181 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1182 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1183 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 
˘x
;

1185 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1187 
§c
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1188 i‡(
§c
 =
NGX_ERROR
) {

1189  
NGX_CONF_ERROR
;

1192 
d°
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[2]);

1193 i‡(
d°
 =
NGX_ERROR
) {

1194  
NGX_CONF_ERROR
;

1197 i‡(
§c
 =
d°
) {

1198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1200 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1201  
NGX_CONF_ERROR
;

1204 
èbÀ
 = 
mcf
->
èbÀs
.
ñts
;

1205 
i
 = 0; i < 
mcf
->
èbÀs
.
√…s
; i++) {

1206 i‡((
§c
 =
èbÀ
->§¯&& 
d°
 ==Åable->dst)

1207 || (
§c
 =
èbÀ
->
d°
 && dst ==Åable->src))

1209 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1211 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1212  
NGX_CONF_ERROR
;

1216 
èbÀ
 = 
	`ngx_¨øy_push
(&
mcf
->
èbÀs
);

1217 i‡(
èbÀ
 =
NULL
) {

1218  
NGX_CONF_ERROR
;

1221 
èbÀ
->
§c
 = src;

1222 
èbÀ
->
d°
 = dst;

1224 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[2].
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1225 
èbÀ
->
§c2d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * 
NGX_UTF_LEN
);

1226 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1227  
NGX_CONF_ERROR
;

1230 
èbÀ
->
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * (*));

1231 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1232  
NGX_CONF_ERROR
;

1235 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1236 i‡(
d°2§c
 =
NULL
) {

1237  
NGX_CONF_ERROR
;

1240 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1241 
µ
[0] = 
d°2§c
;

1243 
i
 = 0; i < 128; i++) {

1244 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1245 
p
[0] = '\1';

1246 
p
[1] = (
u_ch¨
Ë
i
;

1247 
d°2§c
[
i
] = (
u_ch¨
) i;

1250  ; 
i
 < 256; i++) {

1251 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1252 
p
[0] = '\1';

1253 
p
[1] = '?';

1257 
èbÀ
->
§c2d°
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1258 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1259  
NGX_CONF_ERROR
;

1262 
èbÀ
->
d°2§c
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1263 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1264  
NGX_CONF_ERROR
;

1267 
i
 = 0; i < 128; i++) {

1268 
èbÀ
->
§c2d°
[
i
] = (
u_ch¨
) i;

1269 
èbÀ
->
d°2§c
[
i
] = (
u_ch¨
) i;

1272  ; 
i
 < 256; i++) {

1273 
èbÀ
->
§c2d°
[
i
] = '?';

1274 
èbÀ
->
d°2§c
[
i
] = '?';

1278 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1280 
˘x
.
èbÀ
 =Åable;

1281 
˘x
.
ch¨£t
 = &ch¨£t[
d°
];

1282 
˘x
.
ch¨a˘îs
 = 0;

1284 
pvcf
 = *
cf
;

1285 
cf
->
˘x
 = &ctx;

1286 
cf
->
h™dÀr
 = 
ngx_hâp_ch¨£t_m≠
;

1287 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

1289 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1291 *
cf
 = 
pvcf
;

1293 i‡(
˘x
.
ch¨a˘îs
) {

1294 
n
 = 
˘x
.
ch¨£t
->
Àngth
;

1295 
˘x
.
ch¨£t
->
Àngth
 /˘x.
ch¨a˘îs
;

1297 i‡(((
n
 * 10Ë/ 
˘x
.
ch¨a˘îs
) % 10 > 4) {

1298 
˘x
.
ch¨£t
->
Àngth
++;

1302  
rv
;

1303 
	}
}

1307 
	$ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

1309 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1310 
uöt32_t
 
n
;

1311 
ngx_öt_t
 
§c
, 
d°
;

1312 
ngx_°r_t
 *
vÆue
;

1313 
ngx_uöt_t
 
i
;

1314 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1315 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 *
˘x
;

1317 i‡(
cf
->
¨gs
->
√…s
 != 2) {

1318 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarametersÇumber");

1319  
NGX_CONF_ERROR
;

1322 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1324 
§c
 = 
	`ngx_hextoi
(
vÆue
[0].
d©a
, vÆue[0].
Àn
);

1325 i‡(
§c
 =
NGX_ERROR
 || src > 255) {

1326 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1327 "övÆid vÆuê\"%V\"", &
vÆue
[0]);

1328  
NGX_CONF_ERROR
;

1331 
˘x
 = 
cf
->ctx;

1332 
èbÀ
 = 
˘x
->table;

1334 i‡(
˘x
->
ch¨£t
->
utf8
) {

1335 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
];

1337 *
p
++ = (
u_ch¨
Ë(
vÆue
[1].
Àn
 / 2);

1339 
i
 = 0; i < 
vÆue
[1].
Àn
; i += 2) {

1340 
d°
 = 
	`ngx_hextoi
(&
vÆue
[1].
d©a
[
i
], 2);

1341 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1342 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1343 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1344  
NGX_CONF_ERROR
;

1347 *
p
++ = (
u_ch¨
Ë
d°
;

1350 
i
 /= 2;

1352 
˘x
->
ch¨£t
->
Àngth
 +
i
;

1353 
˘x
->
ch¨a˘îs
++;

1355 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
] + 1;

1357 
n
 = 
	`ngx_utf8_decode
(&
p
, 
i
);

1359 i‡(
n
 > 0xffff) {

1360 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1361 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1362  
NGX_CONF_ERROR
;

1365 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1367 
d°2§c
 = 
µ
[
n
 >> 8];

1369 i‡(
d°2§c
 =
NULL
) {

1370 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1371 i‡(
d°2§c
 =
NULL
) {

1372  
NGX_CONF_ERROR
;

1375 
µ
[
n
 >> 8] = 
d°2§c
;

1378 
d°2§c
[
n
 & 0xff] = (
u_ch¨
Ë
§c
;

1381 
d°
 = 
	`ngx_hextoi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1382 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1383 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1384 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1385  
NGX_CONF_ERROR
;

1388 
èbÀ
->
§c2d°
[
§c
] = (
u_ch¨
Ë
d°
;

1389 
èbÀ
->
d°2§c
[
d°
] = (
u_ch¨
Ë
§c
;

1392  
NGX_CONF_OK
;

1393 
	}
}

1397 
	$ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1399 *
p
 = 
c⁄f
;

1401 
ngx_öt_t
 *
˝
;

1402 
ngx_°r_t
 *
vÆue
, 
v¨
;

1403 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1405 
˝
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1407 i‡(*
˝
 !
NGX_CONF_UNSET
) {

1411 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1413 i‡(
cmd
->
off£t
 =
	`off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
)

1414 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0)

1416 *
˝
 = 
NGX_HTTP_CHARSET_OFF
;

1417  
NGX_CONF_OK
;

1421 i‡(
vÆue
[1].
d©a
[0] == '$') {

1422 
v¨
.
Àn
 = 
vÆue
[1].len - 1;

1423 
v¨
.
d©a
 = 
vÆue
[1].data + 1;

1425 *
˝
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
v¨
);

1427 i‡(*
˝
 =
NGX_ERROR
) {

1428  
NGX_CONF_ERROR
;

1431 *
˝
 +
NGX_HTTP_CHARSET_VAR
;

1433  
NGX_CONF_OK
;

1436 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1437 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1439 *
˝
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1440 i‡(*
˝
 =
NGX_ERROR
) {

1441  
NGX_CONF_ERROR
;

1444  
NGX_CONF_OK
;

1445 
	}
}

1448 
ngx_öt_t


1449 
	$ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
)

1451 
ngx_uöt_t
 
i
;

1452 
ngx_hâp_ch¨£t_t
 *
c
;

1454 
c
 = 
ch¨£ts
->
ñts
;

1455 
i
 = 0; i < 
ch¨£ts
->
√…s
; i++) {

1456 i‡(
«me
->
Àn
 !
c
[
i
].name.len) {

1460 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, 
c
[
i
].name.data) == 0) {

1465 i‡(
i
 < 
ch¨£ts
->
√…s
) {

1466  
i
;

1469 
c
 = 
	`ngx_¨øy_push
(
ch¨£ts
);

1470 i‡(
c
 =
NULL
) {

1471  
NGX_ERROR
;

1474 
c
->
èbÀs
 = 
NULL
;

1475 
c
->
«me
 = *name;

1476 
c
->
Àngth
 = 0;

1478 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1479 
c
->
utf8
 = 1;

1482 
c
->
utf8
 = 0;

1485  
i
;

1486 
	}
}

1490 
	$ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1492 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1494 
mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_maö_c⁄f_t
));

1495 i‡(
mcf
 =
NULL
) {

1496  
NULL
;

1499 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ch¨£ts
, 
cf
->
poﬁ
, 2, (
ngx_hâp_ch¨£t_t
))

1500 !
NGX_OK
)

1502  
NULL
;

1505 i‡(
	`ngx_¨øy_öô
(&
mcf
->
èbÀs
, 
cf
->
poﬁ
, 1,

1506 (
ngx_hâp_ch¨£t_èbÀs_t
))

1507 !
NGX_OK
)

1509  
NULL
;

1512 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ªcodes
, 
cf
->
poﬁ
, 2,

1513 (
ngx_hâp_ch¨£t_ªcode_t
))

1514 !
NGX_OK
)

1516  
NULL
;

1519  
mcf
;

1520 
	}
}

1524 
	$ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1526 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

1528 
lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_loc_c⁄f_t
));

1529 i‡(
lcf
 =
NULL
) {

1530  
NULL
;

1540 
lcf
->
ch¨£t
 = 
NGX_CONF_UNSET
;

1541 
lcf
->
sour˚_ch¨£t
 = 
NGX_CONF_UNSET
;

1542 
lcf
->
ovîride_ch¨£t
 = 
NGX_CONF_UNSET
;

1544  
lcf
;

1545 
	}
}

1549 
	$ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1551 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1552 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1554 
ngx_uöt_t
 
i
;

1555 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1556 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1558 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1559 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1560 
ngx_hâp_ch¨£t_deÁu…_ty≥s
)

1561 !
NGX_OK
)

1563  
NGX_CONF_ERROR
;

1566 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ovîride_ch¨£t
, 
¥ev
->override_charset, 0);

1567 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ch¨£t
, 
¥ev
->ch¨£t, 
NGX_HTTP_CHARSET_OFF
);

1568 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sour˚_ch¨£t
, 
¥ev
->source_charset,

1569 
NGX_HTTP_CHARSET_OFF
);

1571 i‡(
c⁄f
->
ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1572 || 
c⁄f
->
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1573 || 
c⁄f
->
ch¨£t
 =c⁄f->
sour˚_ch¨£t
)

1575  
NGX_CONF_OK
;

1578 i‡(
c⁄f
->
sour˚_ch¨£t
 >
NGX_HTTP_CHARSET_VAR


1579 || 
c⁄f
->
ch¨£t
 >
NGX_HTTP_CHARSET_VAR
)

1581  
NGX_CONF_OK
;

1584 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1585 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1586 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1587 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1588 i‡(
c⁄f
->
sour˚_ch¨£t
 =
ªcode
[
i
].
§c


1589 && 
c⁄f
->
ch¨£t
 =
ªcode
[
i
].
d°
)

1591  
NGX_CONF_OK
;

1595 
ªcode
 = 
	`ngx_¨øy_push
(&
mcf
->
ªcodes
);

1596 i‡(
ªcode
 =
NULL
) {

1597  
NGX_CONF_ERROR
;

1600 
ªcode
->
§c
 = 
c⁄f
->
sour˚_ch¨£t
;

1601 
ªcode
->
d°
 = 
c⁄f
->
ch¨£t
;

1603  
NGX_CONF_OK
;

1604 
	}
}

1607 
ngx_öt_t


1608 
	$ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1610 
u_ch¨
 **
§c
, **
d°
;

1611 
ngx_öt_t
 
c
;

1612 
ngx_uöt_t
 
i
, 
t
;

1613 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1614 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1615 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀs
;

1616 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1618 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1619 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1621 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1622 
èbÀs
 = 
mcf
->èbÀs.
ñts
;

1623 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1625 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1627 
c
 = 
ªcode
[
i
].
§c
;

1629 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1631 i‡(
c
 =
èbÀs
[
t
].
§c
 && 
ªcode
[
i
].
d°
 ==Åables[t].dst) {

1632 
√xt
;

1635 i‡(
c
 =
èbÀs
[
t
].
d°
 && 
ªcode
[
i
].d° =èbÀs[t].
§c
) {

1636 
√xt
;

1640 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1642 &
ch¨£t
[
c
].
«me
, &ch¨£t[
ªcode
[
i
].
d°
].name);

1643  
NGX_ERROR
;

1645 
√xt
:

1650 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1652 
§c
 = 
ch¨£t
[
èbÀs
[
t
].src].tables;

1654 i‡(
§c
 =
NULL
) {

1655 
§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1656 i‡(
§c
 =
NULL
) {

1657  
NGX_ERROR
;

1660 
ch¨£t
[
èbÀs
[
t
].
§c
].tables = src;

1663 
d°
 = 
ch¨£t
[
èbÀs
[
t
].dst].tables;

1665 i‡(
d°
 =
NULL
) {

1666 
d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1667 i‡(
d°
 =
NULL
) {

1668  
NGX_ERROR
;

1671 
ch¨£t
[
èbÀs
[
t
].
d°
].tables = dst;

1674 
§c
[
èbÀs
[
t
].
d°
] =ÅabÀs[t].
§c2d°
;

1675 
d°
[
èbÀs
[
t
].
§c
] =ÅabÀs[t].
d°2§c
;

1678 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1679 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ch¨£t_hódî_fûãr
;

1681 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1682 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ch¨£t_body_fûãr
;

1684  
NGX_OK
;

1685 
	}
}

	@src/http/modules/ngx_http_chunked_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_chaö_t
 *
	m‰ì
;

15 
ngx_chaö_t
 *
	mbusy
;

16 } 
	tngx_hâp_chunked_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

20 
ngx_chaö_t
 *
ngx_hâp_chunked_¸óã_åaûîs
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
);

24 
ngx_hâp_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ_˘x
 = {

25 
NULL
,

26 
ngx_hâp_chunked_fûãr_öô
,

28 
NULL
,

29 
NULL
,

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL


39 
ngx_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ
 = {

40 
NGX_MODULE_V1
,

41 &
ngx_hâp_chunked_fûãr_moduÀ_˘x
,

42 
NULL
,

43 
NGX_HTTP_MODULE
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
NGX_MODULE_V1_PADDING


55 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

56 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

59 
ngx_öt_t


60 
	$ngx_hâp_chunked_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

62 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

63 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

65 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED


66 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NO_CONTENT


67 || 
r
->
hódîs_out
.
°©us
 < 
NGX_HTTP_OK


68 || 
r
 !r->
maö


69 || 
r
->
mëhod
 =
NGX_HTTP_HEAD
)

71  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

74 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

75 || 
r
->
ex≥˘_åaûîs
)

77 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

79 i‡(
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_11


80 && 
˛cf
->
chunked_å™s„r_ícodög
)

82 i‡(
r
->
ex≥˘_åaûîs
) {

83 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

86 
r
->
chunked
 = 1;

88 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_fûãr_˘x_t
));

89 i‡(
˘x
 =
NULL
) {

90  
NGX_ERROR
;

93 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_chunked_fûãr_moduÀ
);

95 } i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

96 
r
->
kì∑live
 = 0;

100  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

101 
	}
}

104 
ngx_öt_t


105 
	$ngx_hâp_chunked_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

107 
u_ch¨
 *
chunk
;

108 
off_t
 
size
;

109 
ngx_öt_t
 
rc
;

110 
ngx_buf_t
 *
b
;

111 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
;

112 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

114 i‡(
ö
 =
NULL
 || !
r
->
chunked
 ||Ñ->
hódî_⁄ly
) {

115  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

118 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_chunked_fûãr_moduÀ
);

120 
out
 = 
NULL
;

121 
Œ
 = &
out
;

123 
size
 = 0;

124 
˛
 = 
ö
;

127 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

128 "hâ∞chunk: %O", 
	`ngx_buf_size
(
˛
->
buf
));

130 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

132 i‡(
˛
->
buf
->
Êush


133 || 
˛
->
buf
->
sync


134 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

135 || 
˛
->
buf
->
ö_fûe
)

137 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

138 i‡(
é
 =
NULL
) {

139  
NGX_ERROR
;

142 
é
->
buf
 = 
˛
->buf;

143 *
Œ
 = 
é
;

144 
Œ
 = &
é
->
√xt
;

147 i‡(
˛
->
√xt
 =
NULL
) {

151 
˛
 = cl->
√xt
;

154 i‡(
size
) {

155 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

156 i‡(
é
 =
NULL
) {

157  
NGX_ERROR
;

160 
b
 = 
é
->
buf
;

161 
chunk
 = 
b
->
°¨t
;

163 i‡(
chunk
 =
NULL
) {

166 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

167 i‡(
chunk
 =
NULL
) {

168  
NGX_ERROR
;

171 
b
->
°¨t
 = 
chunk
;

172 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

175 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

176 
b
->
mem‹y
 = 0;

177 
b
->
ãmp‹¨y
 = 1;

178 
b
->
pos
 = 
chunk
;

179 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

181 
é
->
√xt
 = 
out
;

182 
out
 = 
é
;

185 i‡(
˛
->
buf
->
œ°_buf
) {

186 
é
 = 
	`ngx_hâp_chunked_¸óã_åaûîs
(
r
, 
˘x
);

187 i‡(
é
 =
NULL
) {

188  
NGX_ERROR
;

191 
˛
->
buf
->
œ°_buf
 = 0;

193 *
Œ
 = 
é
;

195 i‡(
size
 == 0) {

196 
é
->
buf
->
pos
 += 2;

199 } i‡(
size
 > 0) {

200 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

201 i‡(
é
 =
NULL
) {

202  
NGX_ERROR
;

205 
b
 = 
é
->
buf
;

207 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

208 
b
->
ãmp‹¨y
 = 0;

209 
b
->
mem‹y
 = 1;

210 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

211 
b
->
œ°
 = b->
pos
 + 2;

213 *
Œ
 = 
é
;

216 *
Œ
 = 
NULL
;

219 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

221 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

222 (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
);

224  
rc
;

225 
	}
}

228 
ngx_chaö_t
 *

229 
	$ngx_hâp_chunked_¸óã_åaûîs
(
ngx_hâp_ªque°_t
 *
r
,

230 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
)

232 
size_t
 
Àn
;

233 
ngx_buf_t
 *
b
;

234 
ngx_uöt_t
 
i
;

235 
ngx_chaö_t
 *
˛
;

236 
ngx_li°_∑π_t
 *
∑π
;

237 
ngx_èbÀ_ñt_t
 *
hódî
;

239 
Àn
 = 0;

241 
∑π
 = &
r
->
hódîs_out
.
åaûîs
.part;

242 
hódî
 = 
∑π
->
ñts
;

244 
i
 = 0; ; i++) {

246 i‡(
i
 >
∑π
->
√…s
) {

247 i‡(
∑π
->
√xt
 =
NULL
) {

251 
∑π
 =Ö¨t->
√xt
;

252 
hódî
 = 
∑π
->
ñts
;

253 
i
 = 0;

256 i‡(
hódî
[
i
].
hash
 == 0) {

260 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

261 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

264 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

265 i‡(
˛
 =
NULL
) {

266  
NULL
;

269 
b
 = 
˛
->
buf
;

271 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

272 
b
->
ãmp‹¨y
 = 0;

273 
b
->
mem‹y
 = 1;

274 
b
->
œ°_buf
 = 1;

276 i‡(
Àn
 == 0) {

277 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

278 
b
->
œ°
 = b->
pos
 + (
CRLF
 "0" CRLF CRLF) - 1;

279  
˛
;

282 
Àn
 +(
CRLF
 "0" CRLF CRLF) - 1;

284 
b
->
pos
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
Àn
);

285 i‡(
b
->
pos
 =
NULL
) {

286  
NULL
;

289 
b
->
œ°
 = b->
pos
;

291 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

292 *
b
->
œ°
++ = '0';

293 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

295 
∑π
 = &
r
->
hódîs_out
.
åaûîs
.part;

296 
hódî
 = 
∑π
->
ñts
;

298 
i
 = 0; ; i++) {

300 i‡(
i
 >
∑π
->
√…s
) {

301 i‡(
∑π
->
√xt
 =
NULL
) {

305 
∑π
 =Ö¨t->
√xt
;

306 
hódî
 = 
∑π
->
ñts
;

307 
i
 = 0;

310 i‡(
hódî
[
i
].
hash
 == 0) {

314 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

316 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

318 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

319 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

321 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

322 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

325 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

327  
˛
;

328 
	}
}

331 
ngx_öt_t


332 
	$ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

334 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

335 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_chunked_hódî_fûãr
;

337 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

338 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_chunked_body_fûãr
;

340  
NGX_OK
;

341 
	}
}

	@src/http/modules/ngx_http_dav_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_DAV_OFF
 2

	)

16 
	#NGX_HTTP_DAV_NO_DEPTH
 -3

	)

17 
	#NGX_HTTP_DAV_INVALID_DEPTH
 -2

	)

18 
	#NGX_HTTP_DAV_INFINITY_DEPTH
 -1

	)

22 
ngx_uöt_t
 
	mmëhods
;

23 
ngx_uöt_t
 
	mac˚ss
;

24 
ngx_uöt_t
 
	mmö_dñëe_dïth
;

25 
ngx_Êag_t
 
	m¸óã_fuŒ_put_∑th
;

26 } 
	tngx_hâp_dav_loc_c⁄f_t
;

30 
ngx_°r_t
 
	m∑th
;

31 
size_t
 
	mÀn
;

32 } 
	tngx_hâp_dav_c›y_˘x_t
;

35 
ngx_öt_t
 
ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_öt_t
 
ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
);

42 
ngx_öt_t
 
ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

43 
ngx_öt_t
 
ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

46 
ngx_öt_t
 
ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
);

49 
ngx_öt_t
 
ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

51 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
,

52 
ngx_°r_t
 *
∑th
);

53 
ngx_öt_t
 
ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

56 
ngx_öt_t
 
ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
,Çgx_öt_à
dÊt
);

57 
ngx_öt_t
 
ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

58 
ngx_öt_t
 
nŸ_found
, *
Áûed
, 
u_ch¨
 *
∑th
);

59 
ngx_öt_t
 
ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
);

60 *
ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

63 
ngx_öt_t
 
ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
);

66 
ngx_c⁄f_bômask_t
 
	gngx_hâp_dav_mëhods_mask
[] = {

67 { 
ngx_°rög
("off"), 
NGX_HTTP_DAV_OFF
 },

68 { 
ngx_°rög
("put"), 
NGX_HTTP_PUT
 },

69 { 
ngx_°rög
("dñëe"), 
NGX_HTTP_DELETE
 },

70 { 
ngx_°rög
("mkcﬁ"), 
NGX_HTTP_MKCOL
 },

71 { 
ngx_°rög
("c›y"), 
NGX_HTTP_COPY
 },

72 { 
ngx_°rög
("move"), 
NGX_HTTP_MOVE
 },

73 { 
ngx_nuŒ_°rög
, 0 }

77 
ngx_comm™d_t
 
	gngx_hâp_dav_comm™ds
[] = {

79 { 
ngx_°rög
("dav_methods"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

81 
ngx_c⁄f_£t_bômask_¶Ÿ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mëhods
),

84 &
ngx_hâp_dav_mëhods_mask
 },

86 { 
ngx_°rög
("create_full_put_path"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
¸óã_fuŒ_put_∑th
),

91 
NULL
 },

93 { 
ngx_°rög
("min_delete_depth"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_c⁄f_£t_num_¶Ÿ
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mö_dñëe_dïth
),

98 
NULL
 },

100 { 
ngx_°rög
("dav_access"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

102 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
ac˚ss
),

105 
NULL
 },

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_dav_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_dav_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
ngx_hâp_dav_¸óã_loc_c⁄f
,

122 
ngx_hâp_dav_mîge_loc_c⁄f


126 
ngx_moduÀ_t
 
	gngx_hâp_dav_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_dav_moduÀ_˘x
,

129 
ngx_hâp_dav_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_öt_t


143 
	$ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

145 
ngx_öt_t
 
rc
;

146 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

148 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

150 i‡(!(
r
->
mëhod
 & 
dlcf
->
mëhods
)) {

151  
NGX_DECLINED
;

154 
r
->
mëhod
) {

156 
NGX_HTTP_PUT
:

158 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

159 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

161  
NGX_HTTP_CONFLICT
;

164 i‡(
r
->
hódîs_ö
.
c⁄ã¡_ønge
) {

165 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167  
NGX_HTTP_NOT_IMPLEMENTED
;

170 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

171 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

172 
r
->
ªque°_body_ö_˛ón_fûe
 = 1;

173 
r
->
ªque°_body_fûe_group_ac˚ss
 = 1;

174 
r
->
ªque°_body_fûe_log_Àvñ
 = 0;

176 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_dav_put_h™dÀr
);

178 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

179  
rc
;

182  
NGX_DONE
;

184 
NGX_HTTP_DELETE
:

186  
	`ngx_hâp_dav_dñëe_h™dÀr
(
r
);

188 
NGX_HTTP_MKCOL
:

190  
	`ngx_hâp_dav_mkcﬁ_h™dÀr
(
r
, 
dlcf
);

192 
NGX_HTTP_COPY
:

194  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

196 
NGX_HTTP_MOVE
:

198  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

201  
NGX_DECLINED
;

202 
	}
}

206 
	$ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

208 
size_t
 
roŸ
;

209 
time_t
 
d©e
;

210 
ngx_°r_t
 *
ãmp
, 
∑th
;

211 
ngx_uöt_t
 
°©us
;

212 
ngx_fûe_öfo_t
 
fi
;

213 
ngx_ext_ª«me_fûe_t
 
ext
;

214 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

216 i‡(
r
->
ªque°_body
 =
NULL
) {

217 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

219 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

223 i‡(
r
->
ªque°_body
->
ãmp_fûe
 =
NULL
) {

224 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

226 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

230 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

231 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

235 
∑th
.
Àn
--;

237 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

238 "hâ∞puàfûíame: \"%s\"", 
∑th
.
d©a
);

240 
ãmp
 = &
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
;

242 i‡(
	`ngx_fûe_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

243 
°©us
 = 
NGX_HTTP_CREATED
;

246 
°©us
 = 
NGX_HTTP_NO_CONTENT
;

248 i‡(
	`ngx_is_dú
(&
fi
)) {

249 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

250 "\"%s\" couldÇŸ bê¸óãd", 
∑th
.
d©a
);

252 i‡(
	`ngx_dñëe_fûe
(
ãmp
->
d©a
Ë=
NGX_FILE_ERROR
) {

253 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

254 
ngx_dñëe_fûe_n
 " \"%s\" failed",

255 
ãmp
->
d©a
);

258 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CONFLICT
);

263 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

265 
ext
.
ac˚ss
 = 
dlcf
->access;

266 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

267 
ext
.
time
 = -1;

268 
ext
.
¸óã_∑th
 = 
dlcf
->
¸óã_fuŒ_put_∑th
;

269 
ext
.
dñëe_fûe
 = 1;

270 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

272 i‡(
r
->
hódîs_ö
.
d©e
) {

273 
d©e
 = 
	`ngx_∑r£_hâp_time
(
r
->
hódîs_ö
.d©e->
vÆue
.
d©a
,

274 
r
->
hódîs_ö
.
d©e
->
vÆue
.
Àn
);

276 i‡(
d©e
 !
NGX_ERROR
) {

277 
ext
.
time
 = 
d©e
;

278 
ext
.
fd
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.fd;

282 i‡(
	`ngx_ext_ª«me_fûe
(
ãmp
, &
∑th
, &
ext
Ë!
NGX_OK
) {

283 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

287 i‡(
°©us
 =
NGX_HTTP_CREATED
) {

288 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

289 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

293 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

296 
r
->
hódîs_out
.
°©us
 = status;

297 
r
->
hódî_⁄ly
 = 1;

299 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_£nd_hódî
(r));

301 
	}
}

304 
ngx_öt_t


305 
	$ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

307 
size_t
 
roŸ
;

308 
ngx_îr_t
 
îr
;

309 
ngx_öt_t
 
rc
, 
dïth
;

310 
ngx_uöt_t
 
i
, 
d
, 
dú
;

311 
ngx_°r_t
 
∑th
;

312 
ngx_fûe_öfo_t
 
fi
;

313 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

315 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

316 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

318  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

321 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

323 i‡(
dlcf
->
mö_dñëe_dïth
) {

324 
d
 = 0;

326 
i
 = 0; i < 
r
->
uri
.
Àn
; ) {

327 i‡(
r
->
uri
.
d©a
[
i
++] == '/') {

328 i‡(++
d
 >
dlcf
->
mö_dñëe_dïth
 && 
i
 < 
r
->
uri
.
Àn
) {

329 
ok
;

334 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

335 "ösufficõ¡ URI dïth:%òtÿDELETE", 
d
);

336  
NGX_HTTP_CONFLICT
;

339 
ok
:

341 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

342  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

345 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 "hâ∞dñëêfûíame: \"%s\"", 
∑th
.
d©a
);

348 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

349 
îr
 = 
ngx_î∫o
;

351 
rc
 = (
îr
 =
NGX_ENOTDIR
Ë? 
NGX_HTTP_CONFLICT
 : 
NGX_HTTP_NOT_FOUND
;

353  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

354 
rc
, 
ngx_lök_öfo_n
, 
∑th
.
d©a
);

357 i‡(
	`ngx_is_dú
(&
fi
)) {

359 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

360 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

361 "DELETE \"%s\" faûed", 
∑th
.
d©a
);

362  
NGX_HTTP_CONFLICT
;

365 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

367 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

368 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

370  
NGX_HTTP_BAD_REQUEST
;

373 
∑th
.
Àn
 -= 2;

375 
dú
 = 1;

384 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 0);

386 i‡(
dïth
 !0 && dïth !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

387 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

389  
NGX_HTTP_BAD_REQUEST
;

392 
dú
 = 0;

395 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 
dú
);

397 i‡(
rc
 =
NGX_OK
) {

398  
NGX_HTTP_NO_CONTENT
;

401  
rc
;

402 
	}
}

405 
ngx_öt_t


406 
	$ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
)

408 *
Áûed
;

409 
ngx_åì_˘x_t
 
åì
;

411 i‡(
dú
) {

413 
åì
.
öô_h™dÀr
 = 
NULL
;

414 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

415 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_no›
;

416 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_dñëe_dú
;

417 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

418 
åì
.
d©a
 = 
NULL
;

419 
åì
.
Æloc
 = 0;

420 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

424 i‡(
	`ngx_wÆk_åì
(&
åì
, 
∑th
Ë!
NGX_OK
) {

425  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

428 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

429  
NGX_OK
;

432 
Áûed
 = 
ngx_dñëe_dú_n
;

436 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

437  
NGX_OK
;

440 
Áûed
 = 
ngx_dñëe_fûe_n
;

443  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

444 
NGX_HTTP_NOT_FOUND
, 
Áûed
, 
∑th
->
d©a
);

445 
	}
}

448 
ngx_öt_t


449 
	$ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

451 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

452 "hâ∞dñëêdú: \"%s\"", 
∑th
->
d©a
);

454 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

458 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_dú_n
,

459 
∑th
->
d©a
);

462  
NGX_OK
;

463 
	}
}

466 
ngx_öt_t


467 
	$ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

469 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

470 "hâ∞dñëêfûe: \"%s\"", 
∑th
->
d©a
);

472 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

476 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_fûe_n
,

477 
∑th
->
d©a
);

480  
NGX_OK
;

481 
	}
}

484 
ngx_öt_t


485 
	$ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

487  
NGX_OK
;

488 
	}
}

491 
ngx_öt_t


492 
	$ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
)

494 
u_ch¨
 *
p
;

495 
size_t
 
roŸ
;

496 
ngx_°r_t
 
∑th
;

498 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

499 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

501  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

504 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

505 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

507  
NGX_HTTP_CONFLICT
;

510 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

511 i‡(
p
 =
NULL
) {

512  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

515 *(
p
 - 1) = '\0';

516 
r
->
uri
.
Àn
--;

518 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

519 "hâ∞mkcﬁÖ©h: \"%s\"", 
∑th
.
d©a
);

521 i‡(
	`ngx_¸óã_dú
(
∑th
.
d©a
, 
	`ngx_dú_ac˚ss
(
dlcf
->
ac˚ss
))

522 !
NGX_FILE_ERROR
)

524 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

525  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

528  
NGX_HTTP_CREATED
;

531  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

532 
NGX_HTTP_CONFLICT
, 
ngx_¸óã_dú_n
, 
∑th
.
d©a
);

533 
	}
}

536 
ngx_öt_t


537 
	$ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

539 
u_ch¨
 *
p
, *
ho°
, *
œ°
, 
ch
;

540 
size_t
 
Àn
, 
roŸ
;

541 
ngx_îr_t
 
îr
;

542 
ngx_öt_t
 
rc
, 
dïth
;

543 
ngx_uöt_t
 
ovîwrôe
, 
¶ash
, 
dú
, 
Êags
;

544 
ngx_°r_t
 
∑th
, 
uri
, 
duri
, 
¨gs
;

545 
ngx_åì_˘x_t
 
åì
;

546 
ngx_c›y_fûe_t
 
cf
;

547 
ngx_fûe_öfo_t
 
fi
;

548 
ngx_èbÀ_ñt_t
 *
de°
, *
ovî
;

549 
ngx_ext_ª«me_fûe_t
 
ext
;

550 
ngx_hâp_dav_c›y_˘x_t
 
c›y
;

551 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

553 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

554  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

557 
de°
 = 
r
->
hódîs_ö
.
de°ö©i⁄
;

559 i‡(
de°
 =
NULL
) {

560 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

562  
NGX_HTTP_BAD_REQUEST
;

565 
p
 = 
de°
->
vÆue
.
d©a
;

567 i‡(
p
[0] == '/') {

568 
œ°
 = 
p
 + 
de°
->
vÆue
.
Àn
;

569 
de°ö©i⁄_d⁄e
;

572 
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

574 i‡(
Àn
 == 0) {

575 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

577  
NGX_HTTP_BAD_REQUEST
;

580 #i‡(
NGX_HTTP_SSL
)

582 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

583 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "https://", ("https://") - 1)

586 
övÆid_de°ö©i⁄
;

589 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("https://") - 1;

594 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "http://", ("http://") - 1)

597 
övÆid_de°ö©i⁄
;

600 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("http://") - 1;

603 i‡(
	`ngx_°∫cmp
(
ho°
, 
r
->
hódîs_ö
.
£rvî
.
d©a
, 
Àn
) != 0) {

604 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

607 &
de°
->
vÆue
);

608  
NGX_HTTP_BAD_REQUEST
;

611 
œ°
 = 
de°
->
vÆue
.
d©a
 + de°->vÆue.
Àn
;

613 
p
 = 
ho°
 + 
Àn
;Ö < 
œ°
;Ö++) {

614 i‡(*
p
 == '/') {

615 
de°ö©i⁄_d⁄e
;

619 
övÆid_de°ö©i⁄
:

621 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

623 &
de°
->
vÆue
);

624  
NGX_HTTP_BAD_REQUEST
;

626 
de°ö©i⁄_d⁄e
:

628 
duri
.
Àn
 = 
œ°
 - 
p
;

629 
duri
.
d©a
 = 
p
;

630 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

632 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
duri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

633 
övÆid_de°ö©i⁄
;

636 i‡((
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] ='/' && *(
œ°
 - 1) != '/')

637 || (
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] !'/' && *(
œ°
 - 1) == '/'))

639 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

642 &
r
->
uri
, &
de°
->
vÆue
);

643  
NGX_HTTP_CONFLICT
;

646 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

648 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

650 i‡(
r
->
mëhod
 =
NGX_HTTP_COPY
) {

651 i‡(
dïth
 != 0) {

652 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

654  
NGX_HTTP_BAD_REQUEST
;

658 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

660  
NGX_HTTP_BAD_REQUEST
;

664 
ovî
 = 
r
->
hódîs_ö
.
ovîwrôe
;

666 i‡(
ovî
) {

667 i‡(
ovî
->
vÆue
.
Àn
 == 1) {

668 
ch
 = 
ovî
->
vÆue
.
d©a
[0];

670 i‡(
ch
 == 'T' || ch == 't') {

671 
ovîwrôe
 = 1;

672 
ovîwrôe_d⁄e
;

675 i‡(
ch
 == 'F' || ch == 'f') {

676 
ovîwrôe
 = 0;

677 
ovîwrôe_d⁄e
;

682 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

684 &
ovî
->
vÆue
);

685  
NGX_HTTP_BAD_REQUEST
;

688 
ovîwrôe
 = 1;

690 
ovîwrôe_d⁄e
:

692 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

693  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

696 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

697 "hâ∞c›y from: \"%s\"", 
∑th
.
d©a
);

699 
uri
 = 
r
->uri;

700 
r
->
uri
 = 
duri
;

702 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
c›y
.
∑th
, &
roŸ
, 0Ë=
NULL
) {

703  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

706 
r
->
uri
 = uri;

708 
c›y
.
∑th
.
Àn
--;

710 i‡(
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
 - 1] == '/') {

711 
¶ash
 = 1;

712 
c›y
.
∑th
.
Àn
--;

713 
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
] = '\0';

716 
¶ash
 = 0;

719 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

720 "hâ∞c›yÅo: \"%s\"", 
c›y
.
∑th
.
d©a
);

722 i‡(
	`ngx_lök_öfo
(
c›y
.
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

723 
îr
 = 
ngx_î∫o
;

725 i‡(
îr
 !
NGX_ENOENT
) {

726  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

727 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

728 
c›y
.
∑th
.
d©a
);

733 
ovîwrôe
 = 0;

734 
dú
 = 0;

740 i‡(
	`ngx_is_dú
(&
fi
Ë&& !
¶ash
) {

741 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

743 &
r
->
uri
, &r->
mëhod_«me
, &
de°
->
vÆue
);

744  
NGX_HTTP_CONFLICT
;

747 i‡(!
ovîwrôe
) {

748 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EEXIST
,

749 "\"%s\" couldÇŸ bê¸óãd", 
c›y
.
∑th
.
d©a
);

750  
NGX_HTTP_PRECONDITION_FAILED
;

753 
dú
 = 
	`ngx_is_dú
(&
fi
);

756 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

757  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

758 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

759 
∑th
.
d©a
);

762 i‡(
	`ngx_is_dú
(&
fi
)) {

764 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

765 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

766 "\"%V\" i†cﬁÀ˘i⁄", &
r
->
uri
);

767  
NGX_HTTP_BAD_REQUEST
;

770 i‡(
ovîwrôe
) {

771 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

772 "hâ∞dñëe: \"%s\"", 
c›y
.
∑th
.
d©a
);

774 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
c›y
.
∑th
, 
dú
);

776 i‡(
rc
 !
NGX_OK
) {

777  
rc
;

782 i‡(
	`ngx_is_dú
(&
fi
)) {

784 
∑th
.
Àn
 -= 2;

786 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

787 i‡(
	`ngx_ª«me_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©aË!
NGX_FILE_ERROR
) {

788  
NGX_HTTP_CREATED
;

792 i‡(
	`ngx_¸óã_dú
(
c›y
.
∑th
.
d©a
, 
	`ngx_fûe_ac˚ss
(&
fi
))

793 =
NGX_FILE_ERROR
)

795  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

796 
NGX_HTTP_NOT_FOUND
,

797 
ngx_¸óã_dú_n
, 
c›y
.
∑th
.
d©a
);

800 
c›y
.
Àn
 = 
∑th
.len;

802 
åì
.
öô_h™dÀr
 = 
NULL
;

803 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_c›y_åì_fûe
;

804 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú
;

805 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú_time
;

806 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_no›
;

807 
åì
.
d©a
 = &
c›y
;

808 
åì
.
Æloc
 = 0;

809 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

811 i‡(
	`ngx_wÆk_åì
(&
åì
, &
∑th
Ë=
NGX_OK
) {

813 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

814 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 1);

816 i‡(
rc
 !
NGX_OK
) {

817  
rc
;

821  
NGX_HTTP_CREATED
;

826 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

828 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

830 
ext
.
ac˚ss
 = 0;

831 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

832 
ext
.
time
 = -1;

833 
ext
.
¸óã_∑th
 = 1;

834 
ext
.
dñëe_fûe
 = 0;

835 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

837 i‡(
	`ngx_ext_ª«me_fûe
(&
∑th
, &
c›y
.∑th, &
ext
Ë=
NGX_OK
) {

838  
NGX_HTTP_NO_CONTENT
;

841  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

844 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

846 
cf
.
size
 = 
	`ngx_fûe_size
(&
fi
);

847 
cf
.
buf_size
 = 0;

848 
cf
.
ac˚ss
 = 
dlcf
->access;

849 
cf
.
time
 = 
	`ngx_fûe_mtime
(&
fi
);

850 
cf
.
log
 = 
r
->
c⁄√˘i⁄
->log;

852 i‡(
	`ngx_c›y_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©a, &
cf
Ë=
NGX_OK
) {

853  
NGX_HTTP_NO_CONTENT
;

857  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

858 
	}
}

861 
ngx_öt_t


862 
	$ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

864 
u_ch¨
 *
p
, *
dú
;

865 
size_t
 
Àn
;

866 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

868 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

869 "hâ∞c›y dú: \"%s\"", 
∑th
->
d©a
);

871 
c›y
 = 
˘x
->
d©a
;

873 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

875 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

876 i‡(
dú
 =
NULL
) {

877  
NGX_ABORT
;

880 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

881 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

883 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

884 "hâ∞c›y dúÅo: \"%s\"", 
dú
);

886 i‡(
	`ngx_¸óã_dú
(
dú
, 
	`ngx_dú_ac˚ss
(
˘x
->
ac˚ss
)Ë=
NGX_FILE_ERROR
) {

887 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_¸óã_dú_n
,

888 
dú
);

891 
	`ngx_‰ì
(
dú
);

893  
NGX_OK
;

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

900 
u_ch¨
 *
p
, *
dú
;

901 
size_t
 
Àn
;

902 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

904 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

905 "hâ∞c›y dúÅime: \"%s\"", 
∑th
->
d©a
);

907 
c›y
 = 
˘x
->
d©a
;

909 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

911 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

912 i‡(
dú
 =
NULL
) {

913  
NGX_ABORT
;

916 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

917 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

919 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

920 "hâ∞c›y dúÅimêto: \"%s\"", 
dú
);

922 #i‡(
NGX_WIN32
)

924 
ngx_fd_t
 
fd
;

926 
fd
 = 
	`ngx_›í_fûe
(
dú
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

928 i‡(
fd
 =
NGX_INVALID_FILE
) {

929 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_›í_fûe_n
, 
dú
);

930 
Áûed
;

933 i‡(
	`ngx_£t_fûe_time
(
NULL
, 
fd
, 
˘x
->
mtime
Ë!
NGX_OK
) {

934 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

935 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

938 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

939 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

940 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
dú
);

944 
Áûed
:

948 i‡(
	`ngx_£t_fûe_time
(
dú
, 0, 
˘x
->
mtime
Ë!
NGX_OK
) {

949 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

950 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

955 
	`ngx_‰ì
(
dú
);

957  
NGX_OK
;

958 
	}
}

961 
ngx_öt_t


962 
	$ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

964 
u_ch¨
 *
p
, *
fûe
;

965 
size_t
 
Àn
;

966 
ngx_c›y_fûe_t
 
cf
;

967 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

969 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

970 "hâ∞c›y fûe: \"%s\"", 
∑th
->
d©a
);

972 
c›y
 = 
˘x
->
d©a
;

974 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

976 
fûe
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

977 i‡(
fûe
 =
NULL
) {

978  
NGX_ABORT
;

981 
p
 = 
	`ngx_˝ymem
(
fûe
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

982 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

984 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

985 "hâ∞c›y fûêto: \"%s\"", 
fûe
);

987 
cf
.
size
 = 
˘x
->size;

988 
cf
.
buf_size
 = 0;

989 
cf
.
ac˚ss
 = 
˘x
->access;

990 
cf
.
time
 = 
˘x
->
mtime
;

991 
cf
.
log
 = 
˘x
->log;

993 (Ë
	`ngx_c›y_fûe
(
∑th
->
d©a
, 
fûe
, &
cf
);

995 
	`ngx_‰ì
(
fûe
);

997  
NGX_OK
;

998 
	}
}

1001 
ngx_öt_t


1002 
	$ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
dÊt
)

1004 
ngx_èbÀ_ñt_t
 *
dïth
;

1006 
dïth
 = 
r
->
hódîs_ö
.depth;

1008 i‡(
dïth
 =
NULL
) {

1009  
dÊt
;

1012 i‡(
dïth
->
vÆue
.
Àn
 == 1) {

1014 i‡(
dïth
->
vÆue
.
d©a
[0] == '0') {

1018 i‡(
dïth
->
vÆue
.
d©a
[0] == '1') {

1024 i‡(
dïth
->
vÆue
.
Àn
 == ("infinity") - 1

1025 && 
	`ngx_°rcmp
(
dïth
->
vÆue
.
d©a
, "infinity") == 0)

1027  
NGX_HTTP_DAV_INFINITY_DEPTH
;

1031 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1033 &
dïth
->
vÆue
);

1035  
NGX_HTTP_DAV_INVALID_DEPTH
;

1036 
	}
}

1039 
ngx_öt_t


1040 
	$ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, 
ngx_öt_t
 
nŸ_found
,

1041 *
Áûed
, 
u_ch¨
 *
∑th
)

1043 
ngx_öt_t
 
rc
;

1044 
ngx_uöt_t
 
Àvñ
;

1046 i‡(
îr
 =
NGX_ENOENT
 ||Éº =
NGX_ENOTDIR
 ||Éº =
NGX_ENAMETOOLONG
) {

1047 
Àvñ
 = 
NGX_LOG_ERR
;

1048 
rc
 = 
nŸ_found
;

1050 } i‡(
îr
 =
NGX_EACCES
 ||Éº =
NGX_EPERM
) {

1051 
Àvñ
 = 
NGX_LOG_ERR
;

1052 
rc
 = 
NGX_HTTP_FORBIDDEN
;

1054 } i‡(
îr
 =
NGX_EEXIST
) {

1055 
Àvñ
 = 
NGX_LOG_ERR
;

1056 
rc
 = 
NGX_HTTP_NOT_ALLOWED
;

1058 } i‡(
îr
 =
NGX_ENOSPC
) {

1059 
Àvñ
 = 
NGX_LOG_CRIT
;

1060 
rc
 = 
NGX_HTTP_INSUFFICIENT_STORAGE
;

1063 
Àvñ
 = 
NGX_LOG_CRIT
;

1064 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1067 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%†\"%s\" faûed", 
Áûed
, 
∑th
);

1069  
rc
;

1070 
	}
}

1073 
ngx_öt_t


1074 
	$ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
)

1076 
u_ch¨
 *
loˇti⁄
;

1077 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1079 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1080 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1081  
NGX_ERROR
;

1084 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1086 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
) {

1087 
loˇti⁄
 = 
∑th
 + 
˛cf
->
roŸ
.
Àn
;

1090 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
uri
.
Àn
);

1091 i‡(
loˇti⁄
 =
NULL
) {

1092 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1093  
NGX_ERROR
;

1096 
	`ngx_mem˝y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

1099 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1100 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1101 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Ñ->
uri
.len;

1102 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

1104  
NGX_OK
;

1105 
	}
}

1109 
	$ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1111 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
;

1113 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_dav_loc_c⁄f_t
));

1114 i‡(
c⁄f
 =
NULL
) {

1115  
NULL
;

1124 
c⁄f
->
mö_dñëe_dïth
 = 
NGX_CONF_UNSET_UINT
;

1125 
c⁄f
->
ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1126 
c⁄f
->
¸óã_fuŒ_put_∑th
 = 
NGX_CONF_UNSET
;

1128  
c⁄f
;

1129 
	}
}

1133 
	$ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1135 
ngx_hâp_dav_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1136 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1138 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
mëhods
, 
¥ev
->methods,

1139 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_DAV_OFF
));

1141 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mö_dñëe_dïth
,

1142 
¥ev
->
mö_dñëe_dïth
, 0);

1144 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ac˚ss
, 
¥ev
->access, 0600);

1146 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¸óã_fuŒ_put_∑th
,

1147 
¥ev
->
¸óã_fuŒ_put_∑th
, 0);

1149  
NGX_CONF_OK
;

1150 
	}
}

1153 
ngx_öt_t


1154 
	$ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
)

1156 
ngx_hâp_h™dÀr_±
 *
h
;

1157 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1159 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1161 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1162 i‡(
h
 =
NULL
) {

1163  
NGX_ERROR
;

1166 *
h
 = 
ngx_hâp_dav_h™dÀr
;

1168  
NGX_OK
;

1169 
	}
}

	@src/http/modules/ngx_http_degradation_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msbrk_size
;

15 } 
	tngx_hâp_degød©i⁄_maö_c⁄f_t
;

19 
ngx_uöt_t
 
	mdegøde
;

20 } 
	tngx_hâp_degød©i⁄_loc_c⁄f_t
;

23 
ngx_c⁄f_íum_t
 
	gngx_hâp_degøde
[] = {

24 { 
ngx_°rög
("204"), 204 },

25 { 
ngx_°rög
("444"), 444 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 *
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 *
ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

35 *
c⁄f
);

36 
ngx_öt_t
 
ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_degød©i⁄_comm™ds
[] = {

41 { 
ngx_°rög
("degradation"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_hâp_degød©i⁄
,

44 
NGX_HTTP_MAIN_CONF_OFFSET
,

46 
NULL
 },

48 { 
ngx_°rög
("degrade"),

49 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_íum_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_degød©i⁄_loc_c⁄f_t
, 
degøde
),

53 &
ngx_hâp_degøde
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_degød©i⁄_öô
,

63 
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
,

70 
ngx_hâp_degød©i⁄_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_degød©i⁄_moduÀ_˘x
,

77 
ngx_hâp_degød©i⁄_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_degød©i⁄_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
dlcf
;

95 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

97 i‡(
dlcf
->
degøde
 && 
	`ngx_hâp_degøded
(
r
)) {

98  
dlcf
->
degøde
;

101  
NGX_DECLINED
;

102 
	}
}

105 
ngx_uöt_t


106 
	$ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *
r
)

108 
time_t
 
now
;

109 
ngx_uöt_t
 
log
;

110 
size_t
 
sbrk_size
;

111 
time_t
 
sbrk_time
;

112 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

114 
dmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

116 i‡(
dmcf
->
sbrk_size
) {

118 
log
 = 0;

119 
now
 = 
	`ngx_time
();

123 i‡(
now
 !
sbrk_time
) {

132 
sbrk_size
 = (
size_t
Ë
	`sbrk
(0Ë- ((
uöçå_t
Ë
ngx_∑Œoc
 & ~0x3FFFFF);

133 
sbrk_time
 = 
now
;

134 
log
 = 1;

139 i‡(
sbrk_size
 >
dmcf
->sbrk_size) {

140 i‡(
log
) {

141 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143 
sbrk_size
 / (1024 * 1024));

151 
	}
}

155 
	$ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

157 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

159 
dmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_maö_c⁄f_t
));

160 i‡(
dmcf
 =
NULL
) {

161  
NULL
;

164  
dmcf
;

165 
	}
}

169 
	$ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

171 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
;

173 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_loc_c⁄f_t
));

174 i‡(
c⁄f
 =
NULL
) {

175  
NULL
;

178 
c⁄f
->
degøde
 = 
NGX_CONF_UNSET_UINT
;

180  
c⁄f
;

181 
	}
}

185 
	$ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

187 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

188 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

190 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
degøde
, 
¥ev
->degrade, 0);

192  
NGX_CONF_OK
;

193 
	}
}

197 
	$ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

199 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
 = 
c⁄f
;

201 
ngx_°r_t
 *
vÆue
, 
s
;

203 
vÆue
 = 
cf
->
¨gs
->
ñts
;

205 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "sbrk=", 5) == 0) {

207 
s
.
Àn
 = 
vÆue
[1].len - 5;

208 
s
.
d©a
 = 
vÆue
[1].data + 5;

210 
dmcf
->
sbrk_size
 = 
	`ngx_∑r£_size
(&
s
);

211 i‡(
dmcf
->
sbrk_size
 =(
size_t
Ë
NGX_ERROR
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

213 "övÆid sbrk sizê\"%V\"", &
vÆue
[1]);

214  
NGX_CONF_ERROR
;

217  
NGX_CONF_OK
;

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

223  
NGX_CONF_ERROR
;

224 
	}
}

227 
ngx_öt_t


228 
	$ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_hâp_h™dÀr_±
 *
h
;

231 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

233 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

235 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

236 i‡(
h
 =
NULL
) {

237  
NGX_ERROR
;

240 *
h
 = 
ngx_hâp_degød©i⁄_h™dÀr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_empty_gif_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

13 *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_hâp_em±y_gif_comm™ds
[] = {

17 { 
ngx_°rög
("empty_gif"),

18 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

19 
ngx_hâp_em±y_gif
,

22 
NULL
 },

24 
ngx_nuŒ_comm™d


30 
u_ch¨
 
	gngx_em±y_gif
[] = {

78 
ngx_hâp_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ_˘x
 = {

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
NULL
,

86 
NULL
,

88 
NULL
,

89 
NULL


93 
ngx_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ
 = {

94 
NGX_MODULE_V1
,

95 &
ngx_hâp_em±y_gif_moduÀ_˘x
,

96 
ngx_hâp_em±y_gif_comm™ds
,

97 
NGX_HTTP_MODULE
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NGX_MODULE_V1_PADDING


109 
ngx_°r_t
 
	gngx_hâp_gif_ty≥
 = 
ngx_°rög
("image/gif");

112 
ngx_öt_t


113 
	$ngx_hâp_em±y_gif_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

115 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

117 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

118  
NGX_HTTP_NOT_ALLOWED
;

121 
	`ngx_memzîo
(&
cv
, (
ngx_hâp_com∂ex_vÆue_t
));

123 
cv
.
vÆue
.
Àn
 = (
ngx_em±y_gif
);

124 
cv
.
vÆue
.
d©a
 = 
ngx_em±y_gif
;

125 
r
->
hódîs_out
.
œ°_modifõd_time
 = 23349600;

127  
	`ngx_hâp_£nd_ª•⁄£
(
r
, 
NGX_HTTP_OK
, &
ngx_hâp_gif_ty≥
, &
cv
);

128 
	}
}

132 
	$ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

134 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

136 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

137 
˛cf
->
h™dÀr
 = 
ngx_hâp_em±y_gif_h™dÀr
;

139  
NGX_CONF_OK
;

140 
	}
}

	@src/http/modules/ngx_http_fastcgi_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 
	mˇches
;

15 } 
	tngx_hâp_Á°cgi_maö_c⁄f_t
;

19 
ngx_¨øy_t
 *
	mÊushes
;

20 
ngx_¨øy_t
 *
	mÀngths
;

21 
ngx_¨øy_t
 *
	mvÆues
;

22 
ngx_uöt_t
 
	mnumbî
;

23 
ngx_hash_t
 
	mhash
;

24 } 
	tngx_hâp_Á°cgi_∑øms_t
;

28 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

30 
ngx_°r_t
 
	mödex
;

32 
ngx_hâp_Á°cgi_∑øms_t
 
	m∑øms
;

33 #i‡(
NGX_HTTP_CACHE
)

34 
ngx_hâp_Á°cgi_∑øms_t
 
	m∑øms_ˇche
;

37 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

38 
ngx_¨øy_t
 *
	mˇtch_°dîr
;

40 
ngx_¨øy_t
 *
	mÁ°cgi_Àngths
;

41 
ngx_¨øy_t
 *
	mÁ°cgi_vÆues
;

43 
ngx_Êag_t
 
	mkìp_c⁄n
;

45 #i‡(
NGX_HTTP_CACHE
)

46 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

49 #i‡(
NGX_PCRE
)

50 
ngx_ªgex_t
 *
	m•lô_ªgex
;

51 
ngx_°r_t
 
	m•lô_«me
;

53 } 
	tngx_hâp_Á°cgi_loc_c⁄f_t
;

57 
	mngx_hâp_Á°cgi_°_vîsi⁄
 = 0,

58 
	mngx_hâp_Á°cgi_°_ty≥
,

59 
	mngx_hâp_Á°cgi_°_ªque°_id_hi
,

60 
	mngx_hâp_Á°cgi_°_ªque°_id_lo
,

61 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
,

62 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
,

63 
	mngx_hâp_Á°cgi_°_∑ddög_Àngth
,

64 
	mngx_hâp_Á°cgi_°_ª£rved
,

65 
	mngx_hâp_Á°cgi_°_d©a
,

66 
	mngx_hâp_Á°cgi_°_∑ddög


67 } 
	tngx_hâp_Á°cgi_°©e_e
;

71 
u_ch¨
 *
	m°¨t
;

72 
u_ch¨
 *
	míd
;

73 } 
	tngx_hâp_Á°cgi_•lô_∑π_t
;

77 
ngx_hâp_Á°cgi_°©e_e
 
	m°©e
;

78 
u_ch¨
 *
	mpos
;

79 
u_ch¨
 *
	mœ°
;

80 
ngx_uöt_t
 
	mty≥
;

81 
size_t
 
	mÀngth
;

82 
size_t
 
	m∑ddög
;

84 
ngx_chaö_t
 *
	m‰ì
;

85 
ngx_chaö_t
 *
	mbusy
;

87 
	mÁ°cgi_°dout
:1;

88 
	mœrge_°dîr
:1;

89 
	mhódî_£¡
:1;

91 
ngx_¨øy_t
 *
	m•lô_∑πs
;

93 
ngx_°r_t
 
	ms¸ùt_«me
;

94 
ngx_°r_t
 
	m∑th_öfo
;

95 } 
	tngx_hâp_Á°cgi_˘x_t
;

98 
	#NGX_HTTP_FASTCGI_RESPONDER
 1

	)

100 
	#NGX_HTTP_FASTCGI_KEEP_CONN
 1

	)

102 
	#NGX_HTTP_FASTCGI_BEGIN_REQUEST
 1

	)

103 
	#NGX_HTTP_FASTCGI_ABORT_REQUEST
 2

	)

104 
	#NGX_HTTP_FASTCGI_END_REQUEST
 3

	)

105 
	#NGX_HTTP_FASTCGI_PARAMS
 4

	)

106 
	#NGX_HTTP_FASTCGI_STDIN
 5

	)

107 
	#NGX_HTTP_FASTCGI_STDOUT
 6

	)

108 
	#NGX_HTTP_FASTCGI_STDERR
 7

	)

109 
	#NGX_HTTP_FASTCGI_DATA
 8

	)

113 
u_ch¨
 
	mvîsi⁄
;

114 
u_ch¨
 
	mty≥
;

115 
u_ch¨
 
	mªque°_id_hi
;

116 
u_ch¨
 
	mªque°_id_lo
;

117 
u_ch¨
 
	mc⁄ã¡_Àngth_hi
;

118 
u_ch¨
 
	mc⁄ã¡_Àngth_lo
;

119 
u_ch¨
 
	m∑ddög_Àngth
;

120 
u_ch¨
 
	mª£rved
;

121 } 
	tngx_hâp_Á°cgi_hódî_t
;

125 
u_ch¨
 
	mrﬁe_hi
;

126 
u_ch¨
 
	mrﬁe_lo
;

127 
u_ch¨
 
	mÊags
;

128 
u_ch¨
 
	mª£rved
[5];

129 } 
	tngx_hâp_Á°cgi_begö_ªque°_t
;

133 
u_ch¨
 
	mvîsi⁄
;

134 
u_ch¨
 
	mty≥
;

135 
u_ch¨
 
	mªque°_id_hi
;

136 
u_ch¨
 
	mªque°_id_lo
;

137 } 
	tngx_hâp_Á°cgi_hódî_smÆl_t
;

141 
ngx_hâp_Á°cgi_hódî_t
 
	mh0
;

142 
ngx_hâp_Á°cgi_begö_ªque°_t
 
	mbr
;

143 
ngx_hâp_Á°cgi_hódî_smÆl_t
 
	mh1
;

144 } 
	tngx_hâp_Á°cgi_ªque°_°¨t_t
;

147 
ngx_öt_t
 
ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

149 #i‡(
NGX_HTTP_CACHE
)

150 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

152 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

153 
ngx_öt_t
 
ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

154 
ngx_öt_t
 
ngx_hâp_Á°cgi_body_ouçut_fûãr
(*
d©a
,

155 
ngx_chaö_t
 *
ö
);

156 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

157 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
);

158 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
,

159 
ngx_buf_t
 *
buf
);

160 
ngx_öt_t
 
ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
(*
d©a
,

161 
ssize_t
 
byãs
);

162 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

163 
ngx_hâp_Á°cgi_˘x_t
 *
f
);

164 
ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

165 
ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

166 
ngx_öt_t
 
rc
);

168 
ngx_öt_t
 
ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

169 *
ngx_hâp_Á°cgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

170 *
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

171 *
ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

172 *
∑ª¡
, *
chûd
);

173 
ngx_öt_t
 
ngx_hâp_Á°cgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
,

174 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_Á°cgi_∑øms_t
 *
∑øms
,

175 
ngx_keyvÆ_t
 *
deÁu…_∑øms
);

177 
ngx_öt_t
 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

178 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

179 
ngx_öt_t
 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

180 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

181 
ngx_hâp_Á°cgi_˘x_t
 *
ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
,

182 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

184 *
ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

185 *
c⁄f
);

186 *
ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
,

187 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

188 *
ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

189 *
c⁄f
);

190 #i‡(
NGX_HTTP_CACHE
)

191 *
ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

192 *
c⁄f
);

193 *
ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

194 *
c⁄f
);

197 *
ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
,

198 *
d©a
);

201 
ngx_c⁄f_po°_t
 
	gngx_hâp_Á°cgi_low©_po°
 =

202 { 
ngx_hâp_Á°cgi_low©_check
 };

205 
ngx_c⁄f_bômask_t
 
	gngx_hâp_Á°cgi_√xt_up°ªam_masks
[] = {

206 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

207 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

208 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

209 { 
ngx_°rög
("n⁄_idempŸít"), 
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
 },

210 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

211 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

212 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

213 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

214 { 
ngx_°rög
("hâp_429"), 
NGX_HTTP_UPSTREAM_FT_HTTP_429
 },

215 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

216 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

217 { 
ngx_nuŒ_°rög
, 0 }

221 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
;

224 
ngx_comm™d_t
 
	gngx_hâp_Á°cgi_comm™ds
[] = {

226 { 
ngx_°rög
("fastcgi_pass"),

227 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

228 
ngx_hâp_Á°cgi_∑ss
,

229 
NGX_HTTP_LOC_CONF_OFFSET
,

231 
NULL
 },

233 { 
ngx_°rög
("fastcgi_index"),

234 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

235 
ngx_c⁄f_£t_°r_¶Ÿ
,

236 
NGX_HTTP_LOC_CONF_OFFSET
,

237 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ödex
),

238 
NULL
 },

240 { 
ngx_°rög
("fastcgi_split_path_info"),

241 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

242 
ngx_hâp_Á°cgi_•lô_∑th_öfo
,

243 
NGX_HTTP_LOC_CONF_OFFSET
,

245 
NULL
 },

247 { 
ngx_°rög
("fastcgi_store"),

248 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

249 
ngx_hâp_Á°cgi_°‹e
,

250 
NGX_HTTP_LOC_CONF_OFFSET
,

252 
NULL
 },

254 { 
ngx_°rög
("fastcgi_store_access"),

255 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

256 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

257 
NGX_HTTP_LOC_CONF_OFFSET
,

258 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

259 
NULL
 },

261 { 
ngx_°rög
("fastcgi_buffering"),

262 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

263 
ngx_c⁄f_£t_Êag_¶Ÿ
,

264 
NGX_HTTP_LOC_CONF_OFFSET
,

265 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

266 
NULL
 },

268 { 
ngx_°rög
("fastcgi_request_buffering"),

269 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

270 
ngx_c⁄f_£t_Êag_¶Ÿ
,

271 
NGX_HTTP_LOC_CONF_OFFSET
,

272 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

273 
NULL
 },

275 { 
ngx_°rög
("fastcgi_ignore_client_abort"),

276 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

277 
ngx_c⁄f_£t_Êag_¶Ÿ
,

278 
NGX_HTTP_LOC_CONF_OFFSET
,

279 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

280 
NULL
 },

282 { 
ngx_°rög
("fastcgi_bind"),

283 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

284 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

285 
NGX_HTTP_LOC_CONF_OFFSET
,

286 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

287 
NULL
 },

289 { 
ngx_°rög
("fastcgi_connect_timeout"),

290 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

291 
ngx_c⁄f_£t_m£c_¶Ÿ
,

292 
NGX_HTTP_LOC_CONF_OFFSET
,

293 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

294 
NULL
 },

296 { 
ngx_°rög
("fastcgi_send_timeout"),

297 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

298 
ngx_c⁄f_£t_m£c_¶Ÿ
,

299 
NGX_HTTP_LOC_CONF_OFFSET
,

300 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

301 
NULL
 },

303 { 
ngx_°rög
("fastcgi_send_lowat"),

304 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

305 
ngx_c⁄f_£t_size_¶Ÿ
,

306 
NGX_HTTP_LOC_CONF_OFFSET
,

307 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

308 &
ngx_hâp_Á°cgi_low©_po°
 },

310 { 
ngx_°rög
("fastcgi_buffer_size"),

311 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

312 
ngx_c⁄f_£t_size_¶Ÿ
,

313 
NGX_HTTP_LOC_CONF_OFFSET
,

314 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

315 
NULL
 },

317 { 
ngx_°rög
("fastcgi_pass_request_headers"),

318 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

319 
ngx_c⁄f_£t_Êag_¶Ÿ
,

320 
NGX_HTTP_LOC_CONF_OFFSET
,

321 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

322 
NULL
 },

324 { 
ngx_°rög
("fastcgi_pass_request_body"),

325 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

326 
ngx_c⁄f_£t_Êag_¶Ÿ
,

327 
NGX_HTTP_LOC_CONF_OFFSET
,

328 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

329 
NULL
 },

331 { 
ngx_°rög
("fastcgi_intercept_errors"),

332 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

333 
ngx_c⁄f_£t_Êag_¶Ÿ
,

334 
NGX_HTTP_LOC_CONF_OFFSET
,

335 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

336 
NULL
 },

338 { 
ngx_°rög
("fastcgi_read_timeout"),

339 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

340 
ngx_c⁄f_£t_m£c_¶Ÿ
,

341 
NGX_HTTP_LOC_CONF_OFFSET
,

342 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

343 
NULL
 },

345 { 
ngx_°rög
("fastcgi_buffers"),

346 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

347 
ngx_c⁄f_£t_bufs_¶Ÿ
,

348 
NGX_HTTP_LOC_CONF_OFFSET
,

349 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

350 
NULL
 },

352 { 
ngx_°rög
("fastcgi_busy_buffers_size"),

353 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

354 
ngx_c⁄f_£t_size_¶Ÿ
,

355 
NGX_HTTP_LOC_CONF_OFFSET
,

356 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

357 
NULL
 },

359 { 
ngx_°rög
("fastcgi_force_ranges"),

360 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

361 
ngx_c⁄f_£t_Êag_¶Ÿ
,

362 
NGX_HTTP_LOC_CONF_OFFSET
,

363 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

364 
NULL
 },

366 { 
ngx_°rög
("fastcgi_limit_rate"),

367 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

368 
ngx_c⁄f_£t_size_¶Ÿ
,

369 
NGX_HTTP_LOC_CONF_OFFSET
,

370 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

371 
NULL
 },

373 #i‡(
NGX_HTTP_CACHE
)

375 { 
ngx_°rög
("fastcgi_cache"),

376 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

377 
ngx_hâp_Á°cgi_ˇche
,

378 
NGX_HTTP_LOC_CONF_OFFSET
,

380 
NULL
 },

382 { 
ngx_°rög
("fastcgi_cache_key"),

383 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

384 
ngx_hâp_Á°cgi_ˇche_key
,

385 
NGX_HTTP_LOC_CONF_OFFSET
,

387 
NULL
 },

389 { 
ngx_°rög
("fastcgi_cache_path"),

390 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

391 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

392 
NGX_HTTP_MAIN_CONF_OFFSET
,

393 
off£tof
(
ngx_hâp_Á°cgi_maö_c⁄f_t
, 
ˇches
),

394 &
ngx_hâp_Á°cgi_moduÀ
 },

396 { 
ngx_°rög
("fastcgi_cache_bypass"),

397 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

398 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

399 
NGX_HTTP_LOC_CONF_OFFSET
,

400 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

401 
NULL
 },

403 { 
ngx_°rög
("fastcgi_no_cache"),

404 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

405 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

406 
NGX_HTTP_LOC_CONF_OFFSET
,

407 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

408 
NULL
 },

410 { 
ngx_°rög
("fastcgi_cache_valid"),

411 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

412 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

413 
NGX_HTTP_LOC_CONF_OFFSET
,

414 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

415 
NULL
 },

417 { 
ngx_°rög
("fastcgi_cache_min_uses"),

418 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

419 
ngx_c⁄f_£t_num_¶Ÿ
,

420 
NGX_HTTP_LOC_CONF_OFFSET
,

421 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

422 
NULL
 },

424 { 
ngx_°rög
("fastcgi_cache_max_range_offset"),

425 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

426 
ngx_c⁄f_£t_off_¶Ÿ
,

427 
NGX_HTTP_LOC_CONF_OFFSET
,

428 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_max_ønge_off£t
),

429 
NULL
 },

431 { 
ngx_°rög
("fastcgi_cache_use_stale"),

432 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

433 
ngx_c⁄f_£t_bômask_¶Ÿ
,

434 
NGX_HTTP_LOC_CONF_OFFSET
,

435 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

436 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

438 { 
ngx_°rög
("fastcgi_cache_methods"),

439 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

440 
ngx_c⁄f_£t_bômask_¶Ÿ
,

441 
NGX_HTTP_LOC_CONF_OFFSET
,

442 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

443 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

445 { 
ngx_°rög
("fastcgi_cache_lock"),

446 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

447 
ngx_c⁄f_£t_Êag_¶Ÿ
,

448 
NGX_HTTP_LOC_CONF_OFFSET
,

449 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

450 
NULL
 },

452 { 
ngx_°rög
("fastcgi_cache_lock_timeout"),

453 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

454 
ngx_c⁄f_£t_m£c_¶Ÿ
,

455 
NGX_HTTP_LOC_CONF_OFFSET
,

456 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

457 
NULL
 },

459 { 
ngx_°rög
("fastcgi_cache_lock_age"),

460 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

461 
ngx_c⁄f_£t_m£c_¶Ÿ
,

462 
NGX_HTTP_LOC_CONF_OFFSET
,

463 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

464 
NULL
 },

466 { 
ngx_°rög
("fastcgi_cache_revalidate"),

467 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

468 
ngx_c⁄f_£t_Êag_¶Ÿ
,

469 
NGX_HTTP_LOC_CONF_OFFSET
,

470 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

471 
NULL
 },

473 { 
ngx_°rög
("fastcgi_cache_background_update"),

474 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

475 
ngx_c⁄f_£t_Êag_¶Ÿ
,

476 
NGX_HTTP_LOC_CONF_OFFSET
,

477 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_background_upd©e
),

478 
NULL
 },

482 { 
ngx_°rög
("fastcgi_temp_path"),

483 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

484 
ngx_c⁄f_£t_∑th_¶Ÿ
,

485 
NGX_HTTP_LOC_CONF_OFFSET
,

486 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

487 
NULL
 },

489 { 
ngx_°rög
("fastcgi_max_temp_file_size"),

490 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

491 
ngx_c⁄f_£t_size_¶Ÿ
,

492 
NGX_HTTP_LOC_CONF_OFFSET
,

493 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

494 
NULL
 },

496 { 
ngx_°rög
("fastcgi_temp_file_write_size"),

497 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

498 
ngx_c⁄f_£t_size_¶Ÿ
,

499 
NGX_HTTP_LOC_CONF_OFFSET
,

500 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

501 
NULL
 },

503 { 
ngx_°rög
("fastcgi_next_upstream"),

504 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

505 
ngx_c⁄f_£t_bômask_¶Ÿ
,

506 
NGX_HTTP_LOC_CONF_OFFSET
,

507 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

508 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

510 { 
ngx_°rög
("fastcgi_next_upstream_tries"),

511 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

512 
ngx_c⁄f_£t_num_¶Ÿ
,

513 
NGX_HTTP_LOC_CONF_OFFSET
,

514 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

515 
NULL
 },

517 { 
ngx_°rög
("fastcgi_next_upstream_timeout"),

518 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

519 
ngx_c⁄f_£t_m£c_¶Ÿ
,

520 
NGX_HTTP_LOC_CONF_OFFSET
,

521 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

522 
NULL
 },

524 { 
ngx_°rög
("fastcgi_param"),

525 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

526 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

527 
NGX_HTTP_LOC_CONF_OFFSET
,

528 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
∑øms_sour˚
),

529 
NULL
 },

531 { 
ngx_°rög
("fastcgi_pass_header"),

532 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

533 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

534 
NGX_HTTP_LOC_CONF_OFFSET
,

535 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

536 
NULL
 },

538 { 
ngx_°rög
("fastcgi_hide_header"),

539 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

540 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

541 
NGX_HTTP_LOC_CONF_OFFSET
,

542 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

543 
NULL
 },

545 { 
ngx_°rög
("fastcgi_ignore_headers"),

546 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

547 
ngx_c⁄f_£t_bômask_¶Ÿ
,

548 
NGX_HTTP_LOC_CONF_OFFSET
,

549 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

550 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

552 { 
ngx_°rög
("fastcgi_catch_stderr"),

553 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

554 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

555 
NGX_HTTP_LOC_CONF_OFFSET
,

556 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ˇtch_°dîr
),

557 
NULL
 },

559 { 
ngx_°rög
("fastcgi_keep_conn"),

560 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

561 
ngx_c⁄f_£t_Êag_¶Ÿ
,

562 
NGX_HTTP_LOC_CONF_OFFSET
,

563 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
kìp_c⁄n
),

564 
NULL
 },

566 
ngx_nuŒ_comm™d


570 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ_˘x
 = {

571 
ngx_hâp_Á°cgi_add_v¨übÀs
,

572 
NULL
,

574 
ngx_hâp_Á°cgi_¸óã_maö_c⁄f
,

575 
NULL
,

577 
NULL
,

578 
NULL
,

580 
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
,

581 
ngx_hâp_Á°cgi_mîge_loc_c⁄f


585 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
 = {

586 
NGX_MODULE_V1
,

587 &
ngx_hâp_Á°cgi_moduÀ_˘x
,

588 
ngx_hâp_Á°cgi_comm™ds
,

589 
NGX_HTTP_MODULE
,

590 
NULL
,

591 
NULL
,

592 
NULL
,

593 
NULL
,

594 
NULL
,

595 
NULL
,

596 
NULL
,

597 
NGX_MODULE_V1_PADDING


601 
ngx_hâp_Á°cgi_ªque°_°¨t_t
 
	gngx_hâp_Á°cgi_ªque°_°¨t
 = {

603 
NGX_HTTP_FASTCGI_BEGIN_REQUEST
,

607 (
ngx_hâp_Á°cgi_begö_ªque°_t
),

612 
NGX_HTTP_FASTCGI_RESPONDER
,

617 
NGX_HTTP_FASTCGI_PARAMS
,

624 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_Á°cgi_v¨s
[] = {

626 { 
ngx_°rög
("Á°cgi_s¸ùt_«me"), 
NULL
,

627 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
, 0,

628 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

630 { 
ngx_°rög
("Á°cgi_∑th_öfo"), 
NULL
,

631 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
, 0,

632 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

634 
ngx_hâp_nuŒ_v¨übÀ


638 
ngx_°r_t
 
	gngx_hâp_Á°cgi_hide_hódîs
[] = {

639 
ngx_°rög
("Status"),

640 
ngx_°rög
("X-Accel-Expires"),

641 
ngx_°rög
("X-Accel-Redirect"),

642 
ngx_°rög
("X-Accel-Limit-Rate"),

643 
ngx_°rög
("X-Accel-Buffering"),

644 
ngx_°rög
("X-Accel-Charset"),

645 
ngx_nuŒ_°rög


649 #i‡(
NGX_HTTP_CACHE
)

651 
ngx_keyvÆ_t
 
	gngx_hâp_Á°cgi_ˇche_hódîs
[] = {

652 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

653 
ngx_°rög
("$upstream_cache_last_modified") },

654 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

655 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("$upstream_cache_etag") },

656 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

657 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

658 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

659 { 
ngx_nuŒ_°rög
,Çgx_null_string }

665 
ngx_∑th_öô_t
 
	gngx_hâp_Á°cgi_ãmp_∑th
 = {

666 
ngx_°rög
(
NGX_HTTP_FASTCGI_TEMP_PATH
), { 1, 2, 0 }

670 
ngx_öt_t


671 
	$ngx_hâp_Á°cgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

673 
ngx_öt_t
 
rc
;

674 
ngx_hâp_up°ªam_t
 *
u
;

675 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

676 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

677 #i‡(
NGX_HTTP_CACHE
)

678 
ngx_hâp_Á°cgi_maö_c⁄f_t
 *
fmcf
;

681 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

682  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

685 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

686 i‡(
f
 =
NULL
) {

687  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

690 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

692 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

694 i‡(
Êcf
->
Á°cgi_Àngths
) {

695 i‡(
	`ngx_hâp_Á°cgi_evÆ
(
r
, 
Êcf
Ë!
NGX_OK
) {

696  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

700 
u
 = 
r
->
up°ªam
;

702 
	`ngx_°r_£t
(&
u
->
schema
, "fastcgi://");

703 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_moduÀ
;

705 
u
->
c⁄f
 = &
Êcf
->
up°ªam
;

707 #i‡(
NGX_HTTP_CACHE
)

708 
fmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

710 
u
->
ˇches
 = &
fmcf
->caches;

711 
u
->
¸óã_key
 = 
ngx_hâp_Á°cgi_¸óã_key
;

714 
u
->
¸óã_ªque°
 = 
ngx_hâp_Á°cgi_¸óã_ªque°
;

715 
u
->
ªöô_ªque°
 = 
ngx_hâp_Á°cgi_ªöô_ªque°
;

716 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_Á°cgi_¥o˚ss_hódî
;

717 
u
->
ab‹t_ªque°
 = 
ngx_hâp_Á°cgi_ab‹t_ªque°
;

718 
u
->
föÆize_ªque°
 = 
ngx_hâp_Á°cgi_föÆize_ªque°
;

719 
r
->
°©e
 = 0;

721 
u
->
buf„rög
 = 
Êcf
->
up°ªam
.buffering;

723 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

724 i‡(
u
->
pùe
 =
NULL
) {

725  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

728 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_öput_fûãr
;

729 
u
->
pùe
->
öput_˘x
 = 
r
;

731 
u
->
öput_fûãr_öô
 = 
ngx_hâp_Á°cgi_öput_fûãr_öô
;

732 
u
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
;

733 
u
->
öput_fûãr_˘x
 = 
r
;

735 i‡(!
Êcf
->
up°ªam
.
ªque°_buf„rög


736 && 
Êcf
->
up°ªam
.
∑ss_ªque°_body
)

738 
r
->
ªque°_body_no_buf„rög
 = 1;

741 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

743 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

744  
rc
;

747  
NGX_DONE
;

748 
	}
}

751 
ngx_öt_t


752 
	$ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

754 
ngx_uæ_t
 
uæ
;

755 
ngx_hâp_up°ªam_t
 *
u
;

757 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

759 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
Êcf
->
Á°cgi_Àngths
->
ñts
, 0,

760 
Êcf
->
Á°cgi_vÆues
->
ñts
)

761 =
NULL
)

763  
NGX_ERROR
;

766 
uæ
.
no_ªsﬁve
 = 1;

768 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

769 i‡(
uæ
.
îr
) {

770 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

771 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

774  
NGX_ERROR
;

777 
u
 = 
r
->
up°ªam
;

779 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

780 i‡(
u
->
ªsﬁved
 =
NULL
) {

781  
NGX_ERROR
;

784 i‡(
uæ
.
addrs
) {

785 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

786 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

787 
u
->
ªsﬁved
->
«me
 = 
uæ
.
addrs
[0].name;

788 
u
->
ªsﬁved
->
«ddrs
 = 1;

791 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

792 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

793 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

795  
NGX_OK
;

796 
	}
}

799 #i‡(
NGX_HTTP_CACHE
)

801 
ngx_öt_t


802 
	$ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

804 
ngx_°r_t
 *
key
;

805 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

807 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

808 i‡(
key
 =
NULL
) {

809  
NGX_ERROR
;

812 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

814 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Êcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

815  
NGX_ERROR
;

818  
NGX_OK
;

819 
	}
}

824 
ngx_öt_t


825 
	$ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

827 
off_t
 
fûe_pos
;

828 
u_ch¨
 
ch
, *
pos
, *
lowˇ£_key
;

829 
size_t
 
size
, 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
∑ddög
,

830 
Æloˇãd
;

831 
ngx_uöt_t
 
i
, 
n
, 
√xt
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

832 
ngx_buf_t
 *
b
;

833 
ngx_chaö_t
 *
˛
, *
body
;

834 
ngx_li°_∑π_t
 *
∑π
;

835 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

836 
ngx_hâp_up°ªam_t
 *
u
;

837 
ngx_hâp_s¸ùt_code_±
 
code
;

838 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

839 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

840 
ngx_hâp_Á°cgi_∑øms_t
 *
∑øms
;

841 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

842 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

844 
Àn
 = 0;

845 
hódî_∑øms
 = 0;

846 
ign‹ed
 = 
NULL
;

848 
u
 = 
r
->
up°ªam
;

850 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

852 #i‡(
NGX_HTTP_CACHE
)

853 
∑øms
 = 
u
->
ˇchóbÀ
 ? &
Êcf
->
∑øms_ˇche
 : &flcf->params;

855 
∑øms
 = &
Êcf
->params;

858 i‡(
∑øms
->
Àngths
) {

859 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

861 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∑øms
->
Êushes
);

862 
À
.
Êushed
 = 1;

864 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

865 
À
.
ªque°
 = 
r
;

867 *(
uöçå_t
 *Ë
À
.
ù
) {

869 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

870 
key_Àn
 = 
	`lcode
(&
À
);

872 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

873 
skù_em±y
 = 
	`lcode
(&
À
);

875 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

876 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

878 
À
.
ù
 +(
uöçå_t
);

880 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

884 
Àn
 +1 + 
key_Àn
 + ((
vÆ_Àn
 > 127) ? 4 : 1) + val_len;

888 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

890 
Æloˇãd
 = 0;

891 
lowˇ£_key
 = 
NULL
;

893 i‡(
∑øms
->
numbî
) {

894 
n
 = 0;

895 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

897 
∑π
) {

898 
n
 +
∑π
->
√…s
;

899 
∑π
 =Ö¨t->
√xt
;

902 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

903 i‡(
ign‹ed
 =
NULL
) {

904  
NGX_ERROR
;

908 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

909 
hódî
 = 
∑π
->
ñts
;

911 
i
 = 0; ; i++) {

913 i‡(
i
 >
∑π
->
√…s
) {

914 i‡(
∑π
->
√xt
 =
NULL
) {

918 
∑π
 =Ö¨t->
√xt
;

919 
hódî
 = 
∑π
->
ñts
;

920 
i
 = 0;

923 i‡(
∑øms
->
numbî
) {

924 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

925 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

926 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

927 i‡(
lowˇ£_key
 =
NULL
) {

928  
NGX_ERROR
;

932 
hash
 = 0;

934 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

935 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

937 i‡(
ch
 >= 'A' && ch <= 'Z') {

938 
ch
 |= 0x20;

940 } i‡(
ch
 == '-') {

941 
ch
 = '_';

944 
hash
 = 
	`ngx_hash
(hash, 
ch
);

945 
lowˇ£_key
[
n
] = 
ch
;

948 i‡(
	`ngx_hash_föd
(&
∑øms
->
hash
, hash, 
lowˇ£_key
, 
n
)) {

949 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

953 
n
 += ("HTTP_") - 1;

956 
n
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

959 
Àn
 +((
n
 > 127Ë? 4 : 1Ë+ ((
hódî
[
i
].
vÆue
.len > 127) ? 4 : 1)

960 + 
n
 + 
hódî
[
i
].
vÆue
.
Àn
;

965 i‡(
Àn
 > 65535) {

966 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

967 "Á°cgòªque°Ñec‹d i†toÿbig: %uz", 
Àn
);

968  
NGX_ERROR
;

972 
∑ddög
 = 8 - 
Àn
 % 8;

973 
∑ddög
 = (padding == 8) ? 0 :Öadding;

976 
size
 = (
ngx_hâp_Á°cgi_hódî_t
)

977 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

979 + (
ngx_hâp_Á°cgi_hódî_t
)

980 + 
Àn
 + 
∑ddög


981 + (
ngx_hâp_Á°cgi_hódî_t
)

983 + (
ngx_hâp_Á°cgi_hódî_t
);

986 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

987 i‡(
b
 =
NULL
) {

988  
NGX_ERROR
;

991 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

992 i‡(
˛
 =
NULL
) {

993  
NGX_ERROR
;

996 
˛
->
buf
 = 
b
;

998 
ngx_hâp_Á°cgi_ªque°_°¨t
.
br
.
Êags
 =

999 
Êcf
->
kìp_c⁄n
 ? 
NGX_HTTP_FASTCGI_KEEP_CONN
 : 0;

1001 
	`ngx_mem˝y
(
b
->
pos
, &
ngx_hâp_Á°cgi_ªque°_°¨t
,

1002 (
ngx_hâp_Á°cgi_ªque°_°¨t_t
));

1004 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *)

1005 (
b
->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

1006 + (
ngx_hâp_Á°cgi_begö_ªque°_t
));

1008 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1009 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1010 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1011 
h
->
ª£rved
 = 0;

1013 
b
->
œ°
 = b->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

1014 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

1015 + (
ngx_hâp_Á°cgi_hódî_t
);

1018 i‡(
∑øms
->
Àngths
) {

1019 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1021 
e
.
ù
 = 
∑øms
->
vÆues
->
ñts
;

1022 
e
.
pos
 = 
b
->
œ°
;

1023 
e
.
ªque°
 = 
r
;

1024 
e
.
Êushed
 = 1;

1026 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

1028 *(
uöçå_t
 *Ë
À
.
ù
) {

1030 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1031 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

1033 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1034 
skù_em±y
 = 
	`lcode
(&
À
);

1036 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

1037 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1039 
À
.
ù
 +(
uöçå_t
);

1041 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

1042 
e
.
skù
 = 1;

1044 *(
uöçå_t
 *Ë
e
.
ù
) {

1045 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1046 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1048 
e
.
ù
 +(
uöçå_t
);

1050 
e
.
skù
 = 0;

1055 *
e
.
pos
++ = (
u_ch¨
Ë
key_Àn
;

1057 i‡(
vÆ_Àn
 > 127) {

1058 *
e
.
pos
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1059 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1060 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1061 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1064 *
e
.
pos
++ = (
u_ch¨
Ë
vÆ_Àn
;

1067 *(
uöçå_t
 *Ë
e
.
ù
) {

1068 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1069 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1071 
e
.
ù
 +(
uöçå_t
);

1073 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1075 
key_Àn
, 
e
.
pos
 - (key_À¿+ 
vÆ_Àn
),

1076 
vÆ_Àn
, 
e
.
pos
 - val_len);

1079 
b
->
œ°
 = 
e
.
pos
;

1083 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1085 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1086 
hódî
 = 
∑π
->
ñts
;

1088 
i
 = 0; ; i++) {

1090 i‡(
i
 >
∑π
->
√…s
) {

1091 i‡(
∑π
->
√xt
 =
NULL
) {

1095 
∑π
 =Ö¨t->
√xt
;

1096 
hódî
 = 
∑π
->
ñts
;

1097 
i
 = 0;

1100 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

1101 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

1102 
√xt
;

1106 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

1107 i‡(
key_Àn
 > 127) {

1108 *
b
->
œ°
++ = (
u_ch¨
Ë(((
key_Àn
 >> 24) & 0x7f) | 0x80);

1109 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 16) & 0xff);

1110 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1111 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1114 *
b
->
œ°
++ = (
u_ch¨
Ë
key_Àn
;

1117 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1118 i‡(
vÆ_Àn
 > 127) {

1119 *
b
->
œ°
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1120 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1121 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1122 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1125 *
b
->
œ°
++ = (
u_ch¨
Ë
vÆ_Àn
;

1128 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1130 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1131 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1133 i‡(
ch
 >= 'a' && ch <= 'z') {

1134 
ch
 &= ~0x20;

1136 } i‡(
ch
 == '-') {

1137 
ch
 = '_';

1140 *
b
->
œ°
++ = 
ch
;

1143 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1145 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1147 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 
vÆ_Àn
),

1148 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1149 
√xt
:

1156 i‡(
∑ddög
) {

1157 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1158 
b
->
œ°
 +
∑ddög
;

1162 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1163 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1165 
h
->
vîsi⁄
 = 1;

1166 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_PARAMS
;

1167 
h
->
ªque°_id_hi
 = 0;

1168 
h
->
ªque°_id_lo
 = 1;

1169 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1170 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1171 
h
->
∑ddög_Àngth
 = 0;

1172 
h
->
ª£rved
 = 0;

1174 i‡(
r
->
ªque°_body_no_buf„rög
) {

1176 
u
->
ªque°_bufs
 = 
˛
;

1178 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1179 
u
->
ouçut
.
fûãr_˘x
 = 
r
;

1181 } i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_body
) {

1183 
body
 = 
u
->
ªque°_bufs
;

1184 
u
->
ªque°_bufs
 = 
˛
;

1186 #i‡(
NGX_SUPPRESS_WARN
)

1187 
fûe_pos
 = 0;

1188 
pos
 = 
NULL
;

1191 
body
) {

1193 i‡(
	`ngx_buf_•ecül
(
body
->
buf
)) {

1194 
body
 = body->
√xt
;

1198 i‡(
body
->
buf
->
ö_fûe
) {

1199 
fûe_pos
 = 
body
->
buf
->file_pos;

1202 
pos
 = 
body
->
buf
->pos;

1205 
√xt
 = 0;

1208 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1209 i‡(
b
 =
NULL
) {

1210  
NGX_ERROR
;

1213 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1215 i‡(
body
->
buf
->
ö_fûe
) {

1216 
b
->
fûe_pos
 = file_pos;

1217 
fûe_pos
 += 32 * 1024;

1219 i‡(
fûe_pos
 >
body
->
buf
->
fûe_œ°
) {

1220 
fûe_pos
 = 
body
->
buf
->
fûe_œ°
;

1221 
√xt
 = 1;

1224 
b
->
fûe_œ°
 = 
fûe_pos
;

1225 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1228 
b
->
pos
 =Öos;

1229 
b
->
°¨t
 = 
pos
;

1230 
pos
 += 32 * 1024;

1232 i‡(
pos
 >
body
->
buf
->
œ°
) {

1233 
pos
 = 
body
->
buf
->
œ°
;

1234 
√xt
 = 1;

1237 
b
->
œ°
 = 
pos
;

1238 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1241 
∑ddög
 = 8 - 
Àn
 % 8;

1242 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1244 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1245 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1247 
h
->
vîsi⁄
 = 1;

1248 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1249 
h
->
ªque°_id_hi
 = 0;

1250 
h
->
ªque°_id_lo
 = 1;

1251 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1252 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1253 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1254 
h
->
ª£rved
 = 0;

1256 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1257 i‡(
˛
->
√xt
 =
NULL
) {

1258  
NGX_ERROR
;

1261 
˛
 = cl->
√xt
;

1262 
˛
->
buf
 = 
b
;

1264 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1265 (
ngx_hâp_Á°cgi_hódî_t
)

1266 + 
∑ddög
);

1267 i‡(
b
 =
NULL
) {

1268  
NGX_ERROR
;

1271 i‡(
∑ddög
) {

1272 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1273 
b
->
œ°
 +
∑ddög
;

1276 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1277 i‡(
˛
->
√xt
 =
NULL
) {

1278  
NGX_ERROR
;

1281 
˛
 = cl->
√xt
;

1282 
˛
->
buf
 = 
b
;

1284 } !
√xt
);

1286 
body
 = body->
√xt
;

1290 
u
->
ªque°_bufs
 = 
˛
;

1293 i‡(!
r
->
ªque°_body_no_buf„rög
) {

1294 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1295 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1297 
h
->
vîsi⁄
 = 1;

1298 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1299 
h
->
ªque°_id_hi
 = 0;

1300 
h
->
ªque°_id_lo
 = 1;

1301 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1302 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1303 
h
->
∑ddög_Àngth
 = 0;

1304 
h
->
ª£rved
 = 0;

1307 
˛
->
√xt
 = 
NULL
;

1309  
NGX_OK
;

1310 
	}
}

1313 
ngx_öt_t


1314 
	$ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1316 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1318 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1320 i‡(
f
 =
NULL
) {

1321  
NGX_OK
;

1324 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1325 
f
->
Á°cgi_°dout
 = 0;

1326 
f
->
œrge_°dîr
 = 0;

1328 i‡(
f
->
•lô_∑πs
) {

1329 
f
->
•lô_∑πs
->
√…s
 = 0;

1332 
r
->
°©e
 = 0;

1334  
NGX_OK
;

1335 
	}
}

1338 
ngx_öt_t


1339 
	$ngx_hâp_Á°cgi_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
)

1341 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1343 
off_t
 
fûe_pos
;

1344 
u_ch¨
 *
pos
, *
°¨t
;

1345 
size_t
 
Àn
, 
∑ddög
;

1346 
ngx_buf_t
 *
b
;

1347 
ngx_öt_t
 
rc
;

1348 
ngx_uöt_t
 
√xt
, 
œ°
;

1349 
ngx_chaö_t
 *
˛
, *
é
, *
out
, **
Œ
;

1350 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1351 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

1353 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1356 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1358 i‡(
ö
 =
NULL
) {

1359 
out
 = 
ö
;

1360 
out
;

1363 
out
 = 
NULL
;

1364 
Œ
 = &
out
;

1366 i‡(!
f
->
hódî_£¡
) {

1369 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1372 
f
->
hódî_£¡
 = 1;

1374 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1375 i‡(
é
 =
NULL
) {

1376  
NGX_ERROR
;

1379 
é
->
buf
 = 
ö
->buf;

1380 *
Œ
 = 
é
;

1381 
Œ
 = &
é
->
√xt
;

1383 
ö
 = in->
√xt
;

1385 i‡(
ö
 =
NULL
) {

1386 
é
->
√xt
 = 
NULL
;

1387 
out
;

1391 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
f
->
‰ì
);

1392 i‡(
˛
 =
NULL
) {

1393  
NGX_ERROR
;

1396 
b
 = 
˛
->
buf
;

1398 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1399 
b
->
ãmp‹¨y
 = 1;

1401 i‡(
b
->
°¨t
 =
NULL
) {

1404 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
,

1405 (
ngx_hâp_Á°cgi_hódî_t
) + 7);

1406 i‡(
b
->
°¨t
 =
NULL
) {

1407  
NGX_ERROR
;

1410 
b
->
pos
 = b->
°¨t
;

1411 
b
->
œ°
 = b->
°¨t
;

1413 
b
->
íd
 = b->
°¨t
 + (
ngx_hâp_Á°cgi_hódî_t
) + 7;

1416 *
Œ
 = 
˛
;

1418 
œ°
 = 0;

1419 
∑ddög
 = 0;

1421 #i‡(
NGX_SUPPRESS_WARN
)

1422 
fûe_pos
 = 0;

1423 
pos
 = 
NULL
;

1426 
ö
) {

1428 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1431 
ö
->
buf
->
œ°_buf
,

1432 
ö
->
buf
->
ö_fûe
,

1433 
ö
->
buf
->
°¨t
, in->buf->
pos
,

1434 
ö
->
buf
->
œ°
 - in->buf->
pos
,

1435 
ö
->
buf
->
fûe_pos
,

1436 
ö
->
buf
->
fûe_œ°
 - in->buf->
fûe_pos
);

1438 i‡(
ö
->
buf
->
œ°_buf
) {

1439 
œ°
 = 1;

1442 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1443 
ö
 = in->
√xt
;

1447 i‡(
ö
->
buf
->
ö_fûe
) {

1448 
fûe_pos
 = 
ö
->
buf
->file_pos;

1451 
pos
 = 
ö
->
buf
->pos;

1454 
√xt
 = 0;

1457 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
f
->
‰ì
);

1458 i‡(
é
 =
NULL
) {

1459  
NGX_ERROR
;

1462 
b
 = 
é
->
buf
;

1463 
°¨t
 = 
b
->start;

1465 
	`ngx_mem˝y
(
b
, 
ö
->
buf
, (
ngx_buf_t
));

1472 
b
->
°¨t
 = start;

1474 i‡(
ö
->
buf
->
ö_fûe
) {

1475 
b
->
fûe_pos
 = file_pos;

1476 
fûe_pos
 += 32 * 1024;

1478 i‡(
fûe_pos
 >
ö
->
buf
->
fûe_œ°
) {

1479 
fûe_pos
 = 
ö
->
buf
->
fûe_œ°
;

1480 
√xt
 = 1;

1483 
b
->
fûe_œ°
 = 
fûe_pos
;

1484 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1487 
b
->
pos
 =Öos;

1488 
pos
 += 32 * 1024;

1490 i‡(
pos
 >
ö
->
buf
->
œ°
) {

1491 
pos
 = 
ö
->
buf
->
œ°
;

1492 
√xt
 = 1;

1495 
b
->
œ°
 = 
pos
;

1496 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1499 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1500 
b
->
shadow
 = 
ö
->
buf
;

1501 
b
->
œ°_shadow
 = 
√xt
;

1503 
b
->
œ°_buf
 = 0;

1504 
b
->
œ°_ö_chaö
 = 0;

1506 
∑ddög
 = 8 - 
Àn
 % 8;

1507 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1509 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1510 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1512 
h
->
vîsi⁄
 = 1;

1513 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1514 
h
->
ªque°_id_hi
 = 0;

1515 
h
->
ªque°_id_lo
 = 1;

1516 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1517 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1518 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1519 
h
->
ª£rved
 = 0;

1521 
˛
->
√xt
 = 
é
;

1522 
˛
 = 
é
;

1524 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
f
->
‰ì
);

1525 i‡(
é
 =
NULL
) {

1526  
NGX_ERROR
;

1529 
b
 = 
é
->
buf
;

1531 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1532 
b
->
ãmp‹¨y
 = 1;

1534 i‡(
b
->
°¨t
 =
NULL
) {

1537 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
,

1538 (
ngx_hâp_Á°cgi_hódî_t
) + 7);

1539 i‡(
b
->
°¨t
 =
NULL
) {

1540  
NGX_ERROR
;

1543 
b
->
pos
 = b->
°¨t
;

1544 
b
->
œ°
 = b->
°¨t
;

1546 
b
->
íd
 = b->
°¨t
 + (
ngx_hâp_Á°cgi_hódî_t
) + 7;

1549 i‡(
∑ddög
) {

1550 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1551 
b
->
œ°
 +
∑ddög
;

1554 
˛
->
√xt
 = 
é
;

1555 
˛
 = 
é
;

1557 } !
√xt
);

1559 
ö
 = in->
√xt
;

1562 i‡(
œ°
) {

1563 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1564 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1566 
h
->
vîsi⁄
 = 1;

1567 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1568 
h
->
ªque°_id_hi
 = 0;

1569 
h
->
ªque°_id_lo
 = 1;

1570 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1571 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1572 
h
->
∑ddög_Àngth
 = 0;

1573 
h
->
ª£rved
 = 0;

1575 
˛
->
buf
->
œ°_buf
 = 1;

1577 } i‡(
∑ddög
 == 0) {

1579 
˛
->
buf
->
ãmp‹¨y
 = 0;

1580 
˛
->
buf
->
sync
 = 1;

1583 
˛
->
√xt
 = 
NULL
;

1585 
out
:

1587 #i‡(
NGX_DEBUG
)

1589 
˛
 = 
out
; cl; c»˛->
√xt
) {

1590 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1593 
˛
->
buf
->
œ°_buf
,

1594 
˛
->
buf
->
ö_fûe
,

1595 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1596 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1597 
˛
->
buf
->
fûe_pos
,

1598 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1603 
rc
 = 
	`ngx_chaö_wrôî
(&
r
->
up°ªam
->
wrôî
, 
out
);

1605 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
f
->
‰ì
, &f->
busy
, &
out
,

1606 (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
);

1608 
˛
 = 
f
->
‰ì
; cl; c»˛->
√xt
) {

1612 i‡(
˛
->
buf
->
shadow
) {

1613 i‡(
˛
->
buf
->
œ°_shadow
) {

1614 
b
 = 
˛
->
buf
->
shadow
;

1615 
b
->
pos
 = b->
œ°
;

1618 
˛
->
buf
->
shadow
 = 
NULL
;

1622  
rc
;

1623 
	}
}

1626 
ngx_öt_t


1627 
	$ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1629 
u_ch¨
 *
p
, *
msg
, *
°¨t
, *
œ°
,

1630 *
∑π_°¨t
, *
∑π_íd
;

1631 
size_t
 
size
;

1632 
ngx_°r_t
 *
°©us_löe
, *
∑âîn
;

1633 
ngx_öt_t
 
rc
, 
°©us
;

1634 
ngx_buf_t
 
buf
;

1635 
ngx_uöt_t
 
i
;

1636 
ngx_èbÀ_ñt_t
 *
h
;

1637 
ngx_hâp_up°ªam_t
 *
u
;

1638 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1639 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1640 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1641 
ngx_hâp_Á°cgi_•lô_∑π_t
 *
∑π
;

1642 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1644 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1646 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1648 
u
 = 
r
->
up°ªam
;

1652 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1654 
f
->
pos
 = 
u
->
buf„r
.pos;

1655 
f
->
œ°
 = 
u
->
buf„r
.last;

1657 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1659 
u
->
buf„r
.
pos
 = 
f
->pos;

1660 
u
->
buf„r
.
œ°
 = 
f
->last;

1662 i‡(
rc
 =
NGX_AGAIN
) {

1663  
NGX_AGAIN
;

1666 i‡(
rc
 =
NGX_ERROR
) {

1667  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1670 i‡(
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDOUT


1671 && 
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDERR
)

1673 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1675 
f
->
ty≥
);

1677  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1680 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1681 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1684  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1688 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1690 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 < u->buf„r.
œ°
) {

1691 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1692 
u
->
buf„r
.
pos
 +
f
->
∑ddög
;

1697 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 =u->buf„r.
œ°
) {

1698 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1699 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1701  
NGX_AGAIN
;

1704 
f
->
∑ddög
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1705 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1707  
NGX_AGAIN
;

1713 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1715 i‡(
f
->
Àngth
) {

1716 
msg
 = 
u
->
buf„r
.
pos
;

1718 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 <u->buf„r.
œ°
) {

1719 
u
->
buf„r
.
pos
 +
f
->
Àngth
;

1720 
f
->
Àngth
 = 0;

1721 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1724 
f
->
Àngth
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1725 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1728 
p
 = 
u
->
buf„r
.
pos
 - 1; 
msg
 <Ö;Ö--) {

1729 i‡(*
p
 !
LF
 && *∞!
CR
 && *p != '.' && *p != ' ') {

1734 
p
++;

1736 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1737 "Fa°CGI síàö stdîr: \"%*s\"", 
p
 - 
msg
, msg);

1739 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1741 i‡(
Êcf
->
ˇtch_°dîr
) {

1742 
∑âîn
 = 
Êcf
->
ˇtch_°dîr
->
ñts
;

1744 
i
 = 0; i < 
Êcf
->
ˇtch_°dîr
->
√…s
; i++) {

1745 i‡(
	`ngx_°∫°r
(
msg
, (*Ë
∑âîn
[
i
].
d©a
,

1746 
p
 - 
msg
)

1747 !
NULL
)

1749  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1754 i‡(
u
->
buf„r
.
pos
 =u->buf„r.
œ°
) {

1756 i‡(!
f
->
Á°cgi_°dout
) {

1763 #i‡(
NGX_HTTP_CACHE
)

1764 i‡(
r
->
ˇche
) {

1765 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t


1766 + 
r
->
ˇche
->
hódî_°¨t
;

1768 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1771 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1773 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1774 
f
->
œrge_°dîr
 = 1;

1777  
NGX_AGAIN
;

1781 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1790 #i‡(
NGX_HTTP_CACHE
)

1792 i‡(
f
->
œrge_°dîr
 && 
r
->
ˇche
) {

1793 
ssize_t
 
Àn
;

1794 
ngx_hâp_Á°cgi_hódî_t
 *
fh
;

1796 
°¨t
 = 
u
->
buf„r
.°¨à+ 
r
->
ˇche
->
hódî_°¨t
;

1798 
Àn
 = 
u
->
buf„r
.
pos
 - 
°¨t
 - 2 * (
ngx_hâp_Á°cgi_hódî_t
);

1808 i‡(
Àn
 >= 0) {

1809 
fh
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
°¨t
;

1810 
fh
->
vîsi⁄
 = 1;

1811 
fh
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDERR
;

1812 
fh
->
ªque°_id_hi
 = 0;

1813 
fh
->
ªque°_id_lo
 = 1;

1814 
fh
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1815 
fh
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1816 
fh
->
∑ddög_Àngth
 = 0;

1817 
fh
->
ª£rved
 = 0;

1820 
r
->
ˇche
->
hódî_°¨t
 +
u
->
buf„r
.
pos
 - 
°¨t


1821 - (
ngx_hâp_Á°cgi_hódî_t
);

1824 
f
->
œrge_°dîr
 = 0;

1829 
f
->
Á°cgi_°dout
 = 1;

1831 
°¨t
 = 
u
->
buf„r
.
pos
;

1833 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 < u->buf„r.
œ°
) {

1840 
œ°
 = 
u
->
buf„r
.last;

1841 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
 + 
f
->
Àngth
;

1844 
œ°
 = 
NULL
;

1849 
∑π_°¨t
 = 
u
->
buf„r
.
pos
;

1850 
∑π_íd
 = 
u
->
buf„r
.
œ°
;

1852 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
u
->
buf„r
, 1);

1854 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1855 "hâ∞Á°cgò∑r£r: %i", 
rc
);

1857 i‡(
rc
 =
NGX_AGAIN
) {

1861 i‡(
rc
 =
NGX_OK
) {

1865 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1866 i‡(
h
 =
NULL
) {

1867  
NGX_ERROR
;

1870 i‡(
f
->
•lô_∑πs
 && f->•lô_∑πs->
√…s
) {

1872 
∑π
 = 
f
->
•lô_∑πs
->
ñts
;

1873 
size
 = 
u
->
buf„r
.
pos
 - 
∑π_°¨t
;

1875 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1876 
size
 +
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
;

1879 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

1880 i‡(
p
 =
NULL
) {

1881 
h
->
hash
 = 0;

1882  
NGX_ERROR
;

1885 
buf
.
pos
 = 
p
;

1887 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1888 
p
 = 
	`ngx_˝ymem
’, 
∑π
[
i
].
°¨t
,

1889 
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
);

1892 
p
 = 
	`ngx_˝ymem
’, 
∑π_°¨t
, 
u
->
buf„r
.
pos
 -Öart_start);

1894 
buf
.
œ°
 = 
p
;

1896 
f
->
•lô_∑πs
->
√…s
 = 0;

1898 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
buf
, 1);

1900 i‡(
rc
 !
NGX_OK
) {

1901 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1904 
h
->
hash
 = 0;

1905  
NGX_ERROR
;

1908 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1909 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1910 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1912 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1913 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1914 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1916 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1917 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1918  
NGX_ERROR
;

1923 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1924 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1926 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1927 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1928 + 
h
->
key
.
Àn
);

1929 i‡(
h
->
key
.
d©a
 =
NULL
) {

1930 
h
->
hash
 = 0;

1931  
NGX_ERROR
;

1934 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1935 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1

1936 + 
h
->
vÆue
.
Àn
 + 1;

1938 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1939 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1940 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1941 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1944 
h
->
hash
 = 
r
->
hódî_hash
;

1946 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1947 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1950 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1953 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1954 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1956 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1957  
NGX_ERROR
;

1960 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1962 &
h
->
key
, &h->
vÆue
);

1964 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1973 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1977 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1980 i‡(
u
->
hódîs_ö
.
°©us
) {

1981 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1983 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1985 i‡(
°©us
 =
NGX_ERROR
) {

1986 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1988 
°©us_löe
);

1989  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1992 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1993 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1995 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1996 
u
->
hódîs_ö
.
°©us_n
 = 302;

1997 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

2001 
u
->
hódîs_ö
.
°©us_n
 = 200;

2002 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

2005 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

2006 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

2014 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2017  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

2020 i‡(
œ°
) {

2021 
u
->
buf„r
.
œ°
 =Üast;

2024 
f
->
Àngth
 -
u
->
buf„r
.
pos
 - 
°¨t
;

2026 i‡(
f
->
Àngth
 == 0) {

2027 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2030 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

2031  
NGX_OK
;

2034 i‡(
rc
 =
NGX_OK
) {

2040 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2043 i‡(
f
->
•lô_∑πs
 =
NULL
) {

2044 
f
->
•lô_∑πs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 1,

2045 (
ngx_hâp_Á°cgi_•lô_∑π_t
));

2046 i‡(
f
->
•lô_∑πs
 =
NULL
) {

2047  
NGX_ERROR
;

2051 
∑π
 = 
	`ngx_¨øy_push
(
f
->
•lô_∑πs
);

2052 i‡(
∑π
 =
NULL
) {

2053  
NGX_ERROR
;

2056 
∑π
->
°¨t
 = 
∑π_°¨t
;

2057 
∑π
->
íd
 = 
∑π_íd
;

2059 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

2063  
NGX_AGAIN
;

2065 
	}
}

2068 
ngx_öt_t


2069 
	$ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
)

2071 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2072 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2074 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2076 
r
->
up°ªam
->
pùe
->
Àngth
 = 
Êcf
->
kìp_c⁄n
 ?

2077 (
off_t
Ë(
ngx_hâp_Á°cgi_hódî_t
) : -1;

2079  
NGX_OK
;

2080 
	}
}

2083 
ngx_öt_t


2084 
	$ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

2086 
u_ch¨
 *
m
, *
msg
;

2087 
ngx_öt_t
 
rc
;

2088 
ngx_buf_t
 *
b
, **
¥ev
;

2089 
ngx_chaö_t
 *
˛
;

2090 
ngx_hâp_ªque°_t
 *
r
;

2091 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2092 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2094 i‡(
buf
->
pos
 =buf->
œ°
) {

2095  
NGX_OK
;

2098 
r
 = 
p
->
öput_˘x
;

2099 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2100 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2102 
b
 = 
NULL
;

2103 
¥ev
 = &
buf
->
shadow
;

2105 
f
->
pos
 = 
buf
->pos;

2106 
f
->
œ°
 = 
buf
->last;

2109 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

2111 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

2113 i‡(
rc
 =
NGX_AGAIN
) {

2117 i‡(
rc
 =
NGX_ERROR
) {

2118  
NGX_ERROR
;

2121 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

2122 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2124 i‡(!
Êcf
->
kìp_c⁄n
) {

2125 
p
->
up°ªam_d⁄e
 = 1;

2128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

2134 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2136 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

2139 i‡(!
Êcf
->
kìp_c⁄n
) {

2140 
p
->
up°ªam_d⁄e
 = 1;

2149 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

2151 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2153 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2154 
p
->
up°ªam_d⁄e
 = 1;

2158 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2159 
p
->
up°ªam_d⁄e
 = 1;

2160 
r
->
up°ªam
->
kì∑live
 = 1;

2164 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2169 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2170 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2171 
f
->
pos
 +f->
∑ddög
;

2176 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2177 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2182 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2190 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

2192 i‡(
f
->
Àngth
) {

2194 i‡(
f
->
pos
 =f->
œ°
) {

2198 
msg
 = 
f
->
pos
;

2200 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2201 
f
->
pos
 +f->
Àngth
;

2202 
f
->
Àngth
 = 0;

2203 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2206 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2207 
f
->
pos
 = f->
œ°
;

2210 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

2211 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

2216 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
, 0,

2218 
m
 + 1 - 
msg
, msg);

2221 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2227 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2229 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2230 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2231 
f
->
pos
 +f->
Àngth
;

2236 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2244 i‡(
f
->
pos
 =f->
œ°
) {

2248 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

2249 i‡(
˛
 =
NULL
) {

2250  
NGX_ERROR
;

2253 
b
 = 
˛
->
buf
;

2255 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

2257 
b
->
pos
 = 
f
->pos;

2258 
b
->
°¨t
 = 
buf
->start;

2259 
b
->
íd
 = 
buf
->end;

2260 
b
->
èg
 = 
p
->tag;

2261 
b
->
ãmp‹¨y
 = 1;

2262 
b
->
ªcy˛ed
 = 1;

2264 *
¥ev
 = 
b
;

2265 
¥ev
 = &
b
->
shadow
;

2267 i‡(
p
->
ö
) {

2268 *
p
->
œ°_ö
 = 
˛
;

2270 
p
->
ö
 = 
˛
;

2272 
p
->
œ°_ö
 = &
˛
->
√xt
;

2275  
b
->
num
 = 
buf
->num;

2277 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2278 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

2280 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2281 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2282 
f
->
pos
 +f->
Àngth
;

2283 
b
->
œ°
 = 
f
->
pos
;

2288 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2290 
b
->
œ°
 = 
f
->last;

2296 i‡(
Êcf
->
kìp_c⁄n
) {

2300 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

2301 
p
->
Àngth
 = 1;

2303 } i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

2304 
p
->
Àngth
 = 
f
->
∑ddög
;

2309 
p
->
Àngth
 = 
f
->length;

2313 i‡(
b
) {

2314 
b
->
shadow
 = 
buf
;

2315 
b
->
œ°_shadow
 = 1;

2317 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2318 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

2320  
NGX_OK
;

2325 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

2326  
NGX_ERROR
;

2329  
NGX_OK
;

2330 
	}
}

2333 
ngx_öt_t


2334 
	$ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2336 
u_ch¨
 *
m
, *
msg
;

2337 
ngx_öt_t
 
rc
;

2338 
ngx_buf_t
 *
b
, *
buf
;

2339 
ngx_chaö_t
 *
˛
, **
Œ
;

2340 
ngx_hâp_ªque°_t
 *
r
;

2341 
ngx_hâp_up°ªam_t
 *
u
;

2342 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2344 
r
 = 
d©a
;

2345 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2347 
u
 = 
r
->
up°ªam
;

2348 
buf
 = &
u
->
buf„r
;

2350 
buf
->
pos
 = buf->
œ°
;

2351 
buf
->
œ°
 +
byãs
;

2353 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2354 
Œ
 = &
˛
->
√xt
;

2357 
f
->
pos
 = 
buf
->pos;

2358 
f
->
œ°
 = 
buf
->last;

2361 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

2363 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

2365 i‡(
rc
 =
NGX_AGAIN
) {

2369 i‡(
rc
 =
NGX_ERROR
) {

2370  
NGX_ERROR
;

2373 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

2374 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2376 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2383 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

2385 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2387 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2388 
u
->
Àngth
 = 0;

2392 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2393 
u
->
Àngth
 = 0;

2394 
u
->
kì∑live
 = 1;

2398 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2403 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2404 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2405 
f
->
pos
 +f->
∑ddög
;

2410 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2411 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2416 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2424 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

2426 i‡(
f
->
Àngth
) {

2428 i‡(
f
->
pos
 =f->
œ°
) {

2432 
msg
 = 
f
->
pos
;

2434 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2435 
f
->
pos
 +f->
Àngth
;

2436 
f
->
Àngth
 = 0;

2437 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2440 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2441 
f
->
pos
 = f->
œ°
;

2444 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

2445 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

2450 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2452 
m
 + 1 - 
msg
, msg);

2455 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2461 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2463 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2464 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2465 
f
->
pos
 +f->
Àngth
;

2470 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2478 i‡(
f
->
pos
 =f->
œ°
) {

2482 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2483 i‡(
˛
 =
NULL
) {

2484  
NGX_ERROR
;

2487 *
Œ
 = 
˛
;

2488 
Œ
 = &
˛
->
√xt
;

2490 
b
 = 
˛
->
buf
;

2492 
b
->
Êush
 = 1;

2493 
b
->
mem‹y
 = 1;

2495 
b
->
pos
 = 
f
->pos;

2496 
b
->
èg
 = 
u
->
ouçut
.tag;

2498 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2499 "hâ∞Á°cgòouçuàbu‡%p", 
b
->
pos
);

2501 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2502 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2503 
f
->
pos
 +f->
Àngth
;

2504 
b
->
œ°
 = 
f
->
pos
;

2509 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2510 
b
->
œ°
 = 
f
->last;

2515  
NGX_OK
;

2516 
	}
}

2519 
ngx_öt_t


2520 
	$ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

2521 
ngx_hâp_Á°cgi_˘x_t
 *
f
)

2523 
u_ch¨
 
ch
, *
p
;

2524 
ngx_hâp_Á°cgi_°©e_e
 
°©e
;

2526 
°©e
 = 
f
->state;

2528 
p
 = 
f
->
pos
;Ö < f->
œ°
;Ö++) {

2530 
ch
 = *
p
;

2532 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2533 "hâ∞Á°cgòªc‹d byã: %02Xd", 
ch
);

2535 
°©e
) {

2537 
ngx_hâp_Á°cgi_°_vîsi⁄
:

2538 i‡(
ch
 != 1) {

2539 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2541 "¥Ÿocﬁ vîsi⁄: %d", 
ch
);

2542  
NGX_ERROR
;

2544 
°©e
 = 
ngx_hâp_Á°cgi_°_ty≥
;

2547 
ngx_hâp_Á°cgi_°_ty≥
:

2548 
ch
) {

2549 
NGX_HTTP_FASTCGI_STDOUT
:

2550 
NGX_HTTP_FASTCGI_STDERR
:

2551 
NGX_HTTP_FASTCGI_END_REQUEST
:

2552 
f
->
ty≥
 = (
ngx_uöt_t
Ë
ch
;

2555 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2557 "ªc‹dÅy≥: %d", 
ch
);

2558  
NGX_ERROR
;

2561 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_hi
;

2566 
ngx_hâp_Á°cgi_°_ªque°_id_hi
:

2567 i‡(
ch
 != 0) {

2568 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2570 "ªque° id high byã: %d", 
ch
);

2571  
NGX_ERROR
;

2573 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_lo
;

2576 
ngx_hâp_Á°cgi_°_ªque°_id_lo
:

2577 i‡(
ch
 != 1) {

2578 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2580 "ªque° idÜow byã: %d", 
ch
);

2581  
NGX_ERROR
;

2583 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
;

2586 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
:

2587 
f
->
Àngth
 = 
ch
 << 8;

2588 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
;

2591 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
:

2592 
f
->
Àngth
 |(
size_t
Ë
ch
;

2593 
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
;

2596 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
:

2597 
f
->
∑ddög
 = (
size_t
Ë
ch
;

2598 
°©e
 = 
ngx_hâp_Á°cgi_°_ª£rved
;

2601 
ngx_hâp_Á°cgi_°_ª£rved
:

2602 
°©e
 = 
ngx_hâp_Á°cgi_°_d©a
;

2604 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2605 "hâ∞Á°cgòªc‹dÜígth: %z", 
f
->
Àngth
);

2607 
f
->
pos
 = 
p
 + 1;

2608 
f
->
°©e
 = state;

2610  
NGX_OK
;

2613 
ngx_hâp_Á°cgi_°_d©a
:

2614 
ngx_hâp_Á°cgi_°_∑ddög
:

2619 
f
->
pos
 = 
p
;

2620 
f
->
°©e
 = state;

2622  
NGX_AGAIN
;

2623 
	}
}

2627 
	$ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2629 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2633 
	}
}

2637 
	$ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2639 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2643 
	}
}

2646 
ngx_öt_t


2647 
	$ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2649 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2651 
v
 = 
ngx_hâp_Á°cgi_v¨s
; v->
«me
.
Àn
; v++) {

2652 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2653 i‡(
v¨
 =
NULL
) {

2654  
NGX_ERROR
;

2657 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2658 
v¨
->
d©a
 = 
v
->data;

2661  
NGX_OK
;

2662 
	}
}

2666 
	$ngx_hâp_Á°cgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2668 
ngx_hâp_Á°cgi_maö_c⁄f_t
 *
c⁄f
;

2670 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_maö_c⁄f_t
));

2671 i‡(
c⁄f
 =
NULL
) {

2672  
NULL
;

2675 #i‡(
NGX_HTTP_CACHE
)

2676 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

2677 (
ngx_hâp_fûe_ˇche_t
 *))

2678 !
NGX_OK
)

2680  
NULL
;

2684  
c⁄f
;

2685 
	}
}

2689 
	$ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2691 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
;

2693 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_loc_c⁄f_t
));

2694 i‡(
c⁄f
 =
NULL
) {

2695  
NULL
;

2715 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2716 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2717 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

2718 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2719 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

2720 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2721 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

2723 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2725 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2726 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2727 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2728 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2730 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2731 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2732 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

2734 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2735 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2736 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2738 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2739 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2741 #i‡(
NGX_HTTP_CACHE
)

2742 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

2743 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2744 
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
 = 
NGX_CONF_UNSET
;

2745 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2746 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2747 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2748 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2749 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2750 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

2751 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

2752 
c⁄f
->
up°ªam
.
ˇche_background_upd©e
 = 
NGX_CONF_UNSET
;

2755 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2756 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2758 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2761 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2763 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2765 
c⁄f
->
ˇtch_°dîr
 = 
NGX_CONF_UNSET_PTR
;

2767 
c⁄f
->
kìp_c⁄n
 = 
NGX_CONF_UNSET
;

2769 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "fastcgi");

2771  
c⁄f
;

2772 
	}
}

2776 
	$ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2778 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2779 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2781 
size_t
 
size
;

2782 
ngx_öt_t
 
rc
;

2783 
ngx_hash_öô_t
 
hash
;

2784 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2786 #i‡(
NGX_HTTP_CACHE
)

2788 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

2789 
c⁄f
->
up°ªam
.
ˇche
 = 0;

2792 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

2793 
c⁄f
->
up°ªam
.
°‹e
 = 0;

2798 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

2799 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2800 
¥ev
->
up°ªam
.
°‹e
, 0);

2802 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2803 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2806 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2807 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2809 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

2810 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

2812 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2813 
¥ev
->
up°ªam
.
buf„rög
, 1);

2815 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

2816 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

2818 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2819 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2821 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

2822 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

2824 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2825 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2827 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2828 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2830 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2831 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2833 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2834 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2836 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

2837 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

2839 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2840 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2842 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2843 
¥ev
->
up°ªam
.
buf„r_size
,

2844 (
size_t
Ë
ngx_∑gesize
);

2846 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

2847 
¥ev
->
up°ªam
.
limô_øã
, 0);

2850 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2851 8, 
ngx_∑gesize
);

2853 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2854 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2856  
NGX_CONF_ERROR
;

2860 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2861 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2862 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2866 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2867 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2868 
NGX_CONF_UNSET_SIZE
);

2870 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2871 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2873 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2874 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2877 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2878 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2883  
NGX_CONF_ERROR
;

2886 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2887 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2889 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2893  
NGX_CONF_ERROR
;

2897 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2898 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2899 
NGX_CONF_UNSET_SIZE
);

2901 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2902 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2904 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2905 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2908 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2909 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2914  
NGX_CONF_ERROR
;

2918 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2919 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2920 
NGX_CONF_UNSET_SIZE
);

2922 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2923 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2925 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2926 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2929 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2930 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2932 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2938  
NGX_CONF_ERROR
;

2942 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2943 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2944 
NGX_CONF_BITMASK_SET
);

2947 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2948 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2949 (
NGX_CONF_BITMASK_SET


2950 |
NGX_HTTP_UPSTREAM_FT_ERROR


2951 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2953 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2954 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2955 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2958 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2959 
¥ev
->
up°ªam
.
ãmp_∑th
,

2960 &
ngx_hâp_Á°cgi_ãmp_∑th
)

2961 !
NGX_OK
)

2963  
NGX_CONF_ERROR
;

2966 #i‡(
NGX_HTTP_CACHE
)

2968 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

2969 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2970 
¥ev
->
up°ªam
.
ˇche
, 0);

2972 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

2973 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

2976 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

2977 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2979 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

2981 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2983 &
shm_z⁄e
->
shm
.
«me
);

2985  
NGX_CONF_ERROR
;

2988 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2989 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2991 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
,

2992 
¥ev
->
up°ªam
.
ˇche_max_ønge_off£t
,

2993 
NGX_MAX_OFF_T_VALUE
);

2995 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2996 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2997 (
NGX_CONF_BITMASK_SET


2998 |
NGX_HTTP_UPSTREAM_FT_OFF
));

3000 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

3001 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


3002 |
NGX_HTTP_UPSTREAM_FT_OFF
;

3005 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

3006 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

3009 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

3010 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

3013 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

3015 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

3016 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

3018 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

3019 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

3021 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

3022 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

3024 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

3025 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

3028 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

3029 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3033 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

3034 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

3036 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

3037 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

3039 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

3040 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

3042 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

3043 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

3045 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_background_upd©e
,

3046 
¥ev
->
up°ªam
.
ˇche_background_upd©e
, 0);

3050 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

3051 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

3052 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

3053 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

3055 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

3056 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

3058 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ˇtch_°dîr
, 
¥ev
->ˇtch_°dîr, 
NULL
);

3060 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
kìp_c⁄n
, 
¥ev
->keep_conn, 0);

3063 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ödex
, 
¥ev
->index, "");

3065 
hash
.
max_size
 = 512;

3066 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

3067 
hash
.
«me
 = "fastcgi_hide_headers_hash";

3069 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

3070 &
¥ev
->
up°ªam
, 
ngx_hâp_Á°cgi_hide_hódîs
, &
hash
)

3071 !
NGX_OK
)

3073  
NGX_CONF_ERROR
;

3076 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3078 i‡(
˛cf
->
n⁄ame


3079 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
Á°cgi_Àngths
 == NULL)

3081 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

3082 
c⁄f
->
Á°cgi_Àngths
 = 
¥ev
->fastcgi_lengths;

3083 
c⁄f
->
Á°cgi_vÆues
 = 
¥ev
->fastcgi_values;

3086 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


3087 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
Á°cgi_Àngths
))

3089 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

3092 #i‡(
NGX_PCRE
)

3093 i‡(
c⁄f
->
•lô_ªgex
 =
NULL
) {

3094 
c⁄f
->
•lô_ªgex
 = 
¥ev
->split_regex;

3095 
c⁄f
->
•lô_«me
 = 
¥ev
->split_name;

3099 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

3100 
c⁄f
->
∑øms
 = 
¥ev
->params;

3101 #i‡(
NGX_HTTP_CACHE
)

3102 
c⁄f
->
∑øms_ˇche
 = 
¥ev
->params_cache;

3104 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

3107 
rc
 = 
	`ngx_hâp_Á°cgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms
, 
NULL
);

3108 i‡(
rc
 !
NGX_OK
) {

3109  
NGX_CONF_ERROR
;

3112 #i‡(
NGX_HTTP_CACHE
)

3114 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

3115 
rc
 = 
	`ngx_hâp_Á°cgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms_ˇche
,

3116 
ngx_hâp_Á°cgi_ˇche_hódîs
);

3117 i‡(
rc
 !
NGX_OK
) {

3118  
NGX_CONF_ERROR
;

3129 i‡(
¥ev
->
∑øms
.
hash
.
buckës
 =
NULL


3130 && 
c⁄f
->
∑øms_sour˚
 =
¥ev
->params_source)

3132 
¥ev
->
∑øms
 = 
c⁄f
->params;

3133 #i‡(
NGX_HTTP_CACHE
)

3134 
¥ev
->
∑øms_ˇche
 = 
c⁄f
->params_cache;

3138  
NGX_CONF_OK
;

3139 
	}
}

3142 
ngx_öt_t


3143 
	$ngx_hâp_Á°cgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,

3144 
ngx_hâp_Á°cgi_∑øms_t
 *
∑øms
, 
ngx_keyvÆ_t
 *
deÁu…_∑øms
)

3146 
u_ch¨
 *
p
;

3147 
size_t
 
size
;

3148 
uöçå_t
 *
code
;

3149 
ngx_uöt_t
 
i
, 
n§c
;

3150 
ngx_¨øy_t
 
hódîs_«mes
, 
∑øms_mîged
;

3151 
ngx_keyvÆ_t
 *
h
;

3152 
ngx_hash_key_t
 *
hk
;

3153 
ngx_hash_öô_t
 
hash
;

3154 
ngx_hâp_up°ªam_∑øm_t
 *
§c
, *
s
;

3155 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3156 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

3158 i‡(
∑øms
->
hash
.
buckës
) {

3159  
NGX_OK
;

3162 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
 && 
deÁu…_∑øms
 == NULL) {

3163 
∑øms
->
hash
.
buckës
 = (*) 1;

3164  
NGX_OK
;

3167 
∑øms
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

3168 i‡(
∑øms
->
Àngths
 =
NULL
) {

3169  
NGX_ERROR
;

3172 
∑øms
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

3173 i‡(
∑øms
->
vÆues
 =
NULL
) {

3174  
NGX_ERROR
;

3177 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

3178 !
NGX_OK
)

3180  
NGX_ERROR
;

3183 i‡(
c⁄f
->
∑øms_sour˚
) {

3184 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

3185 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

3188 
§c
 = 
NULL
;

3189 
n§c
 = 0;

3192 i‡(
deÁu…_∑øms
) {

3193 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

3194 (
ngx_hâp_up°ªam_∑øm_t
))

3195 !
NGX_OK
)

3197  
NGX_ERROR
;

3200 
i
 = 0; i < 
n§c
; i++) {

3202 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

3203 i‡(
s
 =
NULL
) {

3204  
NGX_ERROR
;

3207 *
s
 = 
§c
[
i
];

3210 
h
 = 
deÁu…_∑øms
;

3212 
h
->
key
.
Àn
) {

3214 
§c
 = 
∑øms_mîged
.
ñts
;

3215 
n§c
 = 
∑øms_mîged
.
√…s
;

3217 
i
 = 0; i < 
n§c
; i++) {

3218 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

3219 
√xt
;

3223 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

3224 i‡(
s
 =
NULL
) {

3225  
NGX_ERROR
;

3228 
s
->
key
 = 
h
->key;

3229 
s
->
vÆue
 = 
h
->value;

3230 
s
->
skù_em±y
 = 1;

3232 
√xt
:

3234 
h
++;

3237 
§c
 = 
∑øms_mîged
.
ñts
;

3238 
n§c
 = 
∑øms_mîged
.
√…s
;

3241 
i
 = 0; i < 
n§c
; i++) {

3243 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

3244 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

3246 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

3247 i‡(
hk
 =
NULL
) {

3248  
NGX_ERROR
;

3251 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

3252 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

3253 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

3254 
hk
->
vÆue
 = (*) 1;

3256 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

3261 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

3262 (
ngx_hâp_s¸ùt_c›y_code_t
));

3263 i‡(
c›y
 =
NULL
) {

3264  
NGX_ERROR
;

3267 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

3268 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3269 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

3271 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

3272 (
ngx_hâp_s¸ùt_c›y_code_t
));

3273 i‡(
c›y
 =
NULL
) {

3274  
NGX_ERROR
;

3277 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

3278 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3279 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

3282 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3283 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

3284 & ~((
uöçå_t
) - 1);

3286 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, 
size
);

3287 i‡(
c›y
 =
NULL
) {

3288  
NGX_ERROR
;

3291 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3292 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

3294 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3295 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3298 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3300 
sc
.
cf
 = cf;

3301 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3302 
sc
.
Êushes
 = &
∑øms
->flushes;

3303 
sc
.
Àngths
 = &
∑øms
->lengths;

3304 
sc
.
vÆues
 = &
∑øms
->values;

3306 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3307  
NGX_ERROR
;

3310 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

3311 i‡(
code
 =
NULL
) {

3312  
NGX_ERROR
;

3315 *
code
 = (
uöçå_t
Ë
NULL
;

3318 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, (
uöçå_t
));

3319 i‡(
code
 =
NULL
) {

3320  
NGX_ERROR
;

3323 *
code
 = (
uöçå_t
Ë
NULL
;

3326 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

3327 i‡(
code
 =
NULL
) {

3328  
NGX_ERROR
;

3331 *
code
 = (
uöçå_t
Ë
NULL
;

3333 
∑øms
->
numbî
 = 
hódîs_«mes
.
√…s
;

3335 
hash
.hash = &
∑øms
->hash;

3336 
hash
.
key
 = 
ngx_hash_key_lc
;

3337 
hash
.
max_size
 = 512;

3338 
hash
.
buckë_size
 = 64;

3339 
hash
.
«me
 = "fastcgi_params_hash";

3340 
hash
.
poﬁ
 = 
cf
->pool;

3341 
hash
.
ãmp_poﬁ
 = 
NULL
;

3343  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3344 
	}
}

3347 
ngx_öt_t


3348 
	$ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3349 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3351 
u_ch¨
 *
p
;

3352 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

3353 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

3355 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3357 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

3359 i‡(
f
 =
NULL
) {

3360  
NGX_ERROR
;

3363 i‡(
f
->
s¸ùt_«me
.
Àn
 == 0

3364 || 
f
->
s¸ùt_«me
.
d©a
[f->s¸ùt_«me.
Àn
 - 1] != '/')

3366 
v
->
Àn
 = 
f
->
s¸ùt_«me
.len;

3367 
v
->
vÆid
 = 1;

3368 
v
->
no_ˇchóbÀ
 = 0;

3369 
v
->
nŸ_found
 = 0;

3370 
v
->
d©a
 = 
f
->
s¸ùt_«me
.data;

3372  
NGX_OK
;

3375 
v
->
Àn
 = 
f
->
s¸ùt_«me
.À¿+ 
Êcf
->
ödex
.len;

3377 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

3378 i‡(
v
->
d©a
 =
NULL
) {

3379  
NGX_ERROR
;

3382 
p
 = 
	`ngx_c›y
(
v
->
d©a
, 
f
->
s¸ùt_«me
.d©a, f->s¸ùt_«me.
Àn
);

3383 
	`ngx_mem˝y
(
p
, 
Êcf
->
ödex
.
d©a
, flcf->ödex.
Àn
);

3385  
NGX_OK
;

3386 
	}
}

3389 
ngx_öt_t


3390 
	$ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3391 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3393 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

3394 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

3396 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3398 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

3400 i‡(
f
 =
NULL
) {

3401  
NGX_ERROR
;

3404 
v
->
Àn
 = 
f
->
∑th_öfo
.len;

3405 
v
->
vÆid
 = 1;

3406 
v
->
no_ˇchóbÀ
 = 0;

3407 
v
->
nŸ_found
 = 0;

3408 
v
->
d©a
 = 
f
->
∑th_öfo
.data;

3410  
NGX_OK
;

3411 
	}
}

3414 
ngx_hâp_Á°cgi_˘x_t
 *

3415 
	$ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

3417 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

3418 #i‡(
NGX_PCRE
)

3419 
ngx_öt_t
 
n
;

3420 
ˇ±uªs
[(1 + 2) * 3];

3422 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3424 i‡(
f
 =
NULL
) {

3425 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

3426 i‡(
f
 =
NULL
) {

3427  
NULL
;

3430 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

3433 i‡(
f
->
s¸ùt_«me
.
Àn
) {

3434  
f
;

3437 i‡(
Êcf
->
•lô_ªgex
 =
NULL
) {

3438 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3439  
f
;

3442 
n
 = 
	`ngx_ªgex_exec
(
Êcf
->
•lô_ªgex
, &
r
->
uri
, 
ˇ±uªs
, (1 + 2) * 3);

3444 i‡(
n
 >= 0) {

3445 
f
->
s¸ùt_«me
.
Àn
 = 
ˇ±uªs
[3] - captures[2];

3446 
f
->
s¸ùt_«me
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[2];

3448 
f
->
∑th_öfo
.
Àn
 = 
ˇ±uªs
[5] - captures[4];

3449 
f
->
∑th_öfo
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[4];

3451  
f
;

3454 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

3455 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3456  
f
;

3459 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3460 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

3461 
n
, &
r
->
uri
, &
Êcf
->
•lô_«me
);

3462  
NULL
;

3466 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3468 i‡(
f
 =
NULL
) {

3469 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

3470 i‡(
f
 =
NULL
) {

3471  
NULL
;

3474 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

3477 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3479  
f
;

3482 
	}
}

3486 
	$ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3488 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3490 
ngx_uæ_t
 
u
;

3491 
ngx_°r_t
 *
vÆue
, *
uæ
;

3492 
ngx_uöt_t
 
n
;

3493 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3494 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3496 i‡(
Êcf
->
up°ªam
.up°ªam || flcf->
Á°cgi_Àngths
) {

3500 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3502 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

3504 i‡(
˛cf
->
«me
.
Àn
 && clcf->«me.
d©a
[clcf->name.len - 1] == '/') {

3505 
˛cf
->
auto_ªdúe˘
 = 1;

3508 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3510 
uæ
 = &
vÆue
[1];

3512 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3514 i‡(
n
) {

3516 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3518 
sc
.
cf
 = cf;

3519 
sc
.
sour˚
 = 
uæ
;

3520 
sc
.
Àngths
 = &
Êcf
->
Á°cgi_Àngths
;

3521 
sc
.
vÆues
 = &
Êcf
->
Á°cgi_vÆues
;

3522 
sc
.
v¨übÀs
 = 
n
;

3523 
sc
.
com∂ëe_Àngths
 = 1;

3524 
sc
.
com∂ëe_vÆues
 = 1;

3526 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3527  
NGX_CONF_ERROR
;

3530  
NGX_CONF_OK
;

3533 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3535 
u
.
uæ
 = 
vÆue
[1];

3536 
u
.
no_ªsﬁve
 = 1;

3538 
Êcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3539 i‡(
Êcf
->
up°ªam
.up°ªam =
NULL
) {

3540  
NGX_CONF_ERROR
;

3543  
NGX_CONF_OK
;

3544 
	}
}

3548 
	$ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3550 #i‡(
NGX_PCRE
)

3551 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3553 
ngx_°r_t
 *
vÆue
;

3554 
ngx_ªgex_compûe_t
 
rc
;

3555 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3557 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3559 
Êcf
->
•lô_«me
 = 
vÆue
[1];

3561 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3563 
rc
.
∑âîn
 = 
vÆue
[1];

3564 
rc
.
poﬁ
 = 
cf
->pool;

3565 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3566 
rc
.
îr
.
d©a
 = 
îr°r
;

3568 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

3569 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

3570  
NGX_CONF_ERROR
;

3573 i‡(
rc
.
ˇ±uªs
 != 2) {

3574 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3575 "∑âî¿\"%V\" mu° havê2 c≠tuªs", &
vÆue
[1]);

3576  
NGX_CONF_ERROR
;

3579 
Êcf
->
•lô_ªgex
 = 
rc
.
ªgex
;

3581  
NGX_CONF_OK
;

3585 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3586 "\"%V\"Ñequúe†PCREÜibøry", &
cmd
->
«me
);

3587  
NGX_CONF_ERROR
;

3590 
	}
}

3594 
	$ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3596 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3598 
ngx_°r_t
 *
vÆue
;

3599 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3601 i‡(
Êcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

3605 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3607 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3608 
Êcf
->
up°ªam
.
°‹e
 = 0;

3609  
NGX_CONF_OK
;

3612 #i‡(
NGX_HTTP_CACHE
)

3613 i‡(
Êcf
->
up°ªam
.
ˇche
 > 0) {

3618 
Êcf
->
up°ªam
.
°‹e
 = 1;

3620 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

3621  
NGX_CONF_OK
;

3625 
vÆue
[1].
Àn
++;

3627 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3629 
sc
.
cf
 = cf;

3630 
sc
.
sour˚
 = &
vÆue
[1];

3631 
sc
.
Àngths
 = &
Êcf
->
up°ªam
.
°‹e_Àngths
;

3632 
sc
.
vÆues
 = &
Êcf
->
up°ªam
.
°‹e_vÆues
;

3633 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

3634 
sc
.
com∂ëe_Àngths
 = 1;

3635 
sc
.
com∂ëe_vÆues
 = 1;

3637 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3638  
NGX_CONF_ERROR
;

3641  
NGX_CONF_OK
;

3642 
	}
}

3645 #i‡(
NGX_HTTP_CACHE
)

3648 
	$ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3650 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3652 
ngx_°r_t
 *
vÆue
;

3653 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

3654 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3656 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3658 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

3662 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3663 
Êcf
->
up°ªam
.
ˇche
 = 0;

3664  
NGX_CONF_OK
;

3667 i‡(
Êcf
->
up°ªam
.
°‹e
 > 0) {

3671 
Êcf
->
up°ªam
.
ˇche
 = 1;

3673 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3675 
ccv
.
cf
 = cf;

3676 
ccv
.
vÆue
 = &value[1];

3677 
ccv
.
com∂ex_vÆue
 = &
cv
;

3679 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3680  
NGX_CONF_ERROR
;

3683 i‡(
cv
.
Àngths
 !
NULL
) {

3685 
Êcf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

3686 (
ngx_hâp_com∂ex_vÆue_t
));

3687 i‡(
Êcf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

3688  
NGX_CONF_ERROR
;

3691 *
Êcf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

3693  
NGX_CONF_OK
;

3696 
Êcf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

3697 &
ngx_hâp_Á°cgi_moduÀ
);

3698 i‡(
Êcf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

3699  
NGX_CONF_ERROR
;

3702  
NGX_CONF_OK
;

3703 
	}
}

3707 
	$ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3709 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3711 
ngx_°r_t
 *
vÆue
;

3712 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3714 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3716 i‡(
Êcf
->
ˇche_key
.
vÆue
.
d©a
) {

3720 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3722 
ccv
.
cf
 = cf;

3723 
ccv
.
vÆue
 = &value[1];

3724 
ccv
.
com∂ex_vÆue
 = &
Êcf
->
ˇche_key
;

3726 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3727  
NGX_CONF_ERROR
;

3730  
NGX_CONF_OK
;

3731 
	}
}

3737 
	$ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3739 #i‡(
NGX_FREEBSD
)

3740 
ssize_t
 *
≈
 = 
d©a
;

3742 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3743 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3746 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3748  
NGX_CONF_ERROR
;

3751 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3752 
ssize_t
 *
≈
 = 
d©a
;

3754 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3757 *
≈
 = 0;

3761  
NGX_CONF_OK
;

3762 
	}
}

	@src/http/modules/ngx_http_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_comm™d_t
 
	gngx_hâp_Êv_comm™ds
[] = {

16 { 
ngx_°rög
("flv"),

17 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

18 
ngx_hâp_Êv
,

21 
NULL
 },

23 
ngx_nuŒ_comm™d


27 
u_ch¨
 
	gngx_Êv_hódî
[] = "FLV\x1\x5\0\0\0\x9\0\0\0\0";

30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Êv_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_Êv_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_Êv_moduÀ_˘x
,

48 
ngx_hâp_Êv_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t


62 
	$ngx_hâp_Êv_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

64 
u_ch¨
 *
œ°
;

65 
off_t
 
°¨t
, 
Àn
;

66 
size_t
 
roŸ
;

67 
ngx_öt_t
 
rc
;

68 
ngx_uöt_t
 
Àvñ
, 
i
;

69 
ngx_°r_t
 
∑th
, 
vÆue
;

70 
ngx_log_t
 *
log
;

71 
ngx_buf_t
 *
b
;

72 
ngx_chaö_t
 
out
[2];

73 
ngx_›í_fûe_öfo_t
 
of
;

74 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

76 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

77  
NGX_HTTP_NOT_ALLOWED
;

80 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

81  
NGX_DECLINED
;

84 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

86 i‡(
rc
 !
NGX_OK
) {

87  
rc
;

90 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

91 i‡(
œ°
 =
NULL
) {

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

95 
log
 = 
r
->
c⁄√˘i⁄
->log;

97 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

100 "hâ∞Êv fûíame: \"%V\"", &
∑th
);

102 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

104 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

106 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

107 
of
.
dúe˘io
 = 
˛cf
->directio;

108 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

109 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

110 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

111 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

113 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

114  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

118 !
NGX_OK
)

120 
of
.
îr
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
NGX_ENOENT
:

126 
NGX_ENOTDIR
:

127 
NGX_ENAMETOOLONG
:

129 
Àvñ
 = 
NGX_LOG_ERR
;

130 
rc
 = 
NGX_HTTP_NOT_FOUND
;

133 
NGX_EACCES
:

134 #i‡(
NGX_HAVE_OPENAT
)

135 
NGX_EMLINK
:

136 
NGX_ELOOP
:

139 
Àvñ
 = 
NGX_LOG_ERR
;

140 
rc
 = 
NGX_HTTP_FORBIDDEN
;

145 
Àvñ
 = 
NGX_LOG_CRIT
;

146 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

151 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

152 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

155  
rc
;

158 i‡(!
of
.
is_fûe
) {

160 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

162 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

165  
NGX_DECLINED
;

168 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

170 
°¨t
 = 0;

171 
Àn
 = 
of
.
size
;

172 
i
 = 1;

174 i‡(
r
->
¨gs
.
Àn
) {

176 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

178 
°¨t
 = 
	`ngx_©oof
(
vÆue
.
d©a
, vÆue.
Àn
);

180 i‡(
°¨t
 =
NGX_ERROR
 || sèπ >
Àn
) {

181 
°¨t
 = 0;

184 i‡(
°¨t
) {

185 
Àn
 = (
ngx_Êv_hódî
Ë- 1 +Üí - 
°¨t
;

186 
i
 = 0;

191 
log
->
a˘i⁄
 = "sending flvÅo client";

193 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

194 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

195 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

197 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

198  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

201 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

202  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

205 i‡(
i
 == 0) {

206 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

207 i‡(
b
 =
NULL
) {

208  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
b
->
pos
 = 
ngx_Êv_hódî
;

212 
b
->
œ°
 = 
ngx_Êv_hódî
 + (ngx_flv_header) - 1;

213 
b
->
mem‹y
 = 1;

215 
out
[0].
buf
 = 
b
;

216 
out
[0].
√xt
 = &out[1];

220 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

221 i‡(
b
 =
NULL
) {

222  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

225 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

226 i‡(
b
->
fûe
 =
NULL
) {

227  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

230 
r
->
Ælow_ønges
 = 1;

232 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

234 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

235  
rc
;

238 
b
->
fûe_pos
 = 
°¨t
;

239 
b
->
fûe_œ°
 = 
of
.
size
;

241 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

242 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

243 
b
->
œ°_ö_chaö
 = 1;

245 
b
->
fûe
->
fd
 = 
of
.fd;

246 
b
->
fûe
->
«me
 = 
∑th
;

247 
b
->
fûe
->
log
 =Üog;

248 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

250 
out
[1].
buf
 = 
b
;

251 
out
[1].
√xt
 = 
NULL
;

253  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[
i
]);

254 
	}
}

258 
	$ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

260 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

262 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

263 
˛cf
->
h™dÀr
 = 
ngx_hâp_Êv_h™dÀr
;

265  
NGX_CONF_OK
;

266 
	}
}

	@src/http/modules/ngx_http_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_hâp_geo_ønge_t
;

21 
ngx_ødix_åì_t
 *
	måì
;

22 #i‡(
NGX_HAVE_INET6
)

23 
ngx_ødix_åì_t
 *
	måì6
;

25 } 
	tngx_hâp_geo_åìs_t
;

29 
ngx_hâp_geo_ønge_t
 **
	mlow
;

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

31 } 
	tngx_hâp_geo_high_ønges_t
;

35 
ngx_°r_node_t
 
	m¢
;

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

37 
size_t
 
	moff£t
;

38 } 
	tngx_hâp_geo_v¨übÀ_vÆue_node_t
;

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

43 
ngx_°r_t
 *
	m√t
;

44 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

45 
ngx_ødix_åì_t
 *
	måì
;

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_ødix_åì_t
 *
	måì6
;

49 
ngx_rbåì_t
 
	mrbåì
;

50 
ngx_rbåì_node_t
 
	m£¡öñ
;

51 
ngx_¨øy_t
 *
	m¥oxõs
;

52 
ngx_poﬁ_t
 *
	mpoﬁ
;

53 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

55 
size_t
 
	md©a_size
;

57 
ngx_°r_t
 
	mö˛ude_«me
;

58 
ngx_uöt_t
 
	mö˛udes
;

59 
ngx_uöt_t
 
	míåõs
;

61 
	mønges
:1;

62 
	moutside_íåõs
:1;

63 
	mÆlow_bö¨y_ö˛ude
:1;

64 
	mbö¨y_ö˛ude
:1;

65 
	m¥oxy_ªcursive
:1;

66 } 
	tngx_hâp_geo_c⁄f_˘x_t
;

71 
ngx_hâp_geo_åìs_t
 
	måìs
;

72 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

73 } 
	mu
;

75 
ngx_¨øy_t
 *
	m¥oxõs
;

76 
	m¥oxy_ªcursive
:1;

78 
ngx_öt_t
 
	mödex
;

79 } 
	tngx_hâp_geo_˘x_t
;

82 
ngx_öt_t
 
ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

84 
ngx_öt_t
 
ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

86 *
ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

87 *
ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

88 *
ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

89 
ngx_°r_t
 *
vÆue
);

90 *
ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

91 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

92 
ngx_uöt_t
 
ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

93 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

94 *
ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

95 
ngx_°r_t
 *
vÆue
);

96 *
ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

97 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
);

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

100 *
ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
,

101 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
);

102 
ngx_öt_t
 
ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

103 
ngx_cidr_t
 *
cidr
);

104 *
ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

105 
ngx_°r_t
 *
«me
);

106 
ngx_öt_t
 
ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

107 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

108 
ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
);

109 
u_ch¨
 *
ngx_hâp_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

110 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

113 
ngx_comm™d_t
 
	gngx_hâp_geo_comm™ds
[] = {

115 { 
ngx_°rög
("geo"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

117 
ngx_hâp_geo_block
,

118 
NGX_HTTP_MAIN_CONF_OFFSET
,

120 
NULL
 },

122 
ngx_nuŒ_comm™d


126 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geo_moduÀ_˘x
 = {

127 
NULL
,

128 
NULL
,

130 
NULL
,

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
NULL
,

137 
NULL


141 
ngx_moduÀ_t
 
	gngx_hâp_geo_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_hâp_geo_moduÀ_˘x
,

144 
ngx_hâp_geo_comm™ds
,

145 
NGX_HTTP_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


158 
u_ch¨
 
	mGEORNG
[6];

159 
u_ch¨
 
	mvîsi⁄
;

160 
u_ch¨
 
	m±r_size
;

161 
uöt32_t
 
	mídü¬ess
;

162 
uöt32_t
 
	m¸c32
;

163 } 
	tngx_hâp_geo_hódî_t
;

166 
ngx_hâp_geo_hódî_t
 
	gngx_hâp_geo_hódî
 = {

173 
ngx_öt_t


174 
	$ngx_hâp_geo_cidr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

175 
uöçå_t
 
d©a
)

177 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

179 
ö_addr_t
 
öaddr
;

180 
ngx_addr_t
 
addr
;

181 
sockaddr_ö
 *
sö
;

182 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

183 #i‡(
NGX_HAVE_INET6
)

184 
u_ch¨
 *
p
;

185 
ö6_addr
 *
öaddr6
;

188 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë!
NGX_OK
) {

189 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

190 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
INADDR_NONE
);

191 
d⁄e
;

194 
addr
.
sockaddr
->
ß_Ámûy
) {

196 #i‡(
NGX_HAVE_INET6
)

197 
AF_INET6
:

198 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

199 
p
 = 
öaddr6
->
s6_addr
;

201 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

202 
öaddr
 = 
p
[12] << 24;

203 
öaddr
 +
p
[13] << 16;

204 
öaddr
 +
p
[14] << 8;

205 
öaddr
 +
p
[15];

207 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

208 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

211 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

212 
	`ngx_ødix128åì_föd
(
˘x
->
u
.
åìs
.
åì6
, 
p
);

219 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

220 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

222 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

223 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

228 
d⁄e
:

230 *
v
 = *
vv
;

232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233 "hâ∞geo: %v", 
v
);

235  
NGX_OK
;

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_geo_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

241 
uöçå_t
 
d©a
)

243 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

245 
ö_addr_t
 
öaddr
;

246 
ngx_addr_t
 
addr
;

247 
ngx_uöt_t
 
n
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_hâp_geo_ønge_t
 *
ønge
;

250 #i‡(
NGX_HAVE_INET6
)

251 
u_ch¨
 *
p
;

252 
ö6_addr
 *
öaddr6
;

255 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

257 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë=
NGX_OK
) {

259 
addr
.
sockaddr
->
ß_Ámûy
) {

261 #i‡(
NGX_HAVE_INET6
)

262 
AF_INET6
:

263 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

265 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

266 
p
 = 
öaddr6
->
s6_addr
;

268 
öaddr
 = 
p
[12] << 24;

269 
öaddr
 +
p
[13] << 16;

270 
öaddr
 +
p
[14] << 8;

271 
öaddr
 +
p
[15];

274 
öaddr
 = 
INADDR_NONE
;

281 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

282 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

287 
öaddr
 = 
INADDR_NONE
;

290 i‡(
˘x
->
u
.
high
.
low
) {

291 
ønge
 = 
˘x
->
u
.
high
.
low
[
öaddr
 >> 16];

293 i‡(
ønge
) {

294 
n
 = 
öaddr
 & 0xffff;

296 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t


297 && 
n
 <(
ngx_uöt_t
Ë
ønge
->
íd
)

299 *
v
 = *
ønge
->
vÆue
;

302 } (++
ønge
)->
vÆue
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "hâ∞geo: %v", 
v
);

309  
NGX_OK
;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

315 
ngx_addr_t
 *
addr
)

317 
ngx_¨øy_t
 *
xfwd
;

319 i‡(
	`ngx_hâp_geo_ªÆ_addr
(
r
, 
˘x
, 
addr
Ë!
NGX_OK
) {

320  
NGX_ERROR
;

323 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

325 i‡(
xfwd
->
√…s
 > 0 && 
˘x
->
¥oxõs
 !
NULL
) {

326 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, 
addr
, 
xfwd
, 
NULL
,

327 
˘x
->
¥oxõs
, ctx->
¥oxy_ªcursive
);

330  
NGX_OK
;

331 
	}
}

334 
ngx_öt_t


335 
	$ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

336 
ngx_addr_t
 *
addr
)

338 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

340 i‡(
˘x
->
ödex
 == -1) {

341 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 "hâ∞geÿ°¨ãd: %V", &
r
->
c⁄√˘i⁄
->
addr_ãxt
);

344 
addr
->
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

345 
addr
->
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

348  
NGX_OK
;

351 
v
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
˘x
->
ödex
);

353 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

354 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

357  
NGX_ERROR
;

360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "hâ∞geÿ°¨ãd: %v", 
v
);

363 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
v
->
d©a
, v->
Àn
Ë=
NGX_OK
) {

364  
NGX_OK
;

367  
NGX_ERROR
;

368 
	}
}

372 
	$ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

374 *
rv
;

375 
size_t
 
Àn
;

376 
ngx_°r_t
 *
vÆue
, 
«me
;

377 
ngx_uöt_t
 
i
;

378 
ngx_c⁄f_t
 
ßve
;

379 
ngx_poﬁ_t
 *
poﬁ
;

380 
ngx_¨øy_t
 *
a
;

381 
ngx_hâp_v¨übÀ_t
 *
v¨
;

382 
ngx_hâp_geo_˘x_t
 *
geo
;

383 
ngx_hâp_geo_c⁄f_˘x_t
 
˘x
;

384 #i‡(
NGX_HAVE_INET6
)

385 
ö6_addr
 
zîo
;

388 
vÆue
 = 
cf
->
¨gs
->
ñts
;

390 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_geo_˘x_t
));

391 i‡(
geo
 =
NULL
) {

392  
NGX_CONF_ERROR
;

395 
«me
 = 
vÆue
[1];

397 i‡(
«me
.
d©a
[0] != '$') {

398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

399 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

400  
NGX_CONF_ERROR
;

403 
«me
.
Àn
--;

404 
«me
.
d©a
++;

406 i‡(
cf
->
¨gs
->
√…s
 == 3) {

408 
geo
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

409 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

410  
NGX_CONF_ERROR
;

413 
«me
 = 
vÆue
[2];

415 i‡(
«me
.
d©a
[0] != '$') {

416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

417 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

418  
NGX_CONF_ERROR
;

421 
«me
.
Àn
--;

422 
«me
.
d©a
++;

425 
geo
->
ödex
 = -1;

428 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

429 i‡(
v¨
 =
NULL
) {

430  
NGX_CONF_ERROR
;

433 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

434 i‡(
poﬁ
 =
NULL
) {

435  
NGX_CONF_ERROR
;

438 
	`ngx_memzîo
(&
˘x
, (
ngx_hâp_geo_c⁄f_˘x_t
));

440 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

441 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

442 
	`ngx_de°roy_poﬁ
(
poﬁ
);

443  
NGX_CONF_ERROR
;

446 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

448 
˘x
.
poﬁ
 = 
cf
->pool;

449 
˘x
.
d©a_size
 = (
ngx_hâp_geo_hódî_t
)

450 + (
ngx_hâp_v¨übÀ_vÆue_t
)

451 + 0x10000 * (
ngx_hâp_geo_ønge_t
 *);

452 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

454 
ßve
 = *
cf
;

455 
cf
->
poﬁ
 =Öool;

456 
cf
->
˘x
 = &ctx;

457 
cf
->
h™dÀr
 = 
ngx_hâp_geo
;

458 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

460 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

462 *
cf
 = 
ßve
;

464 i‡(
rv
 !
NGX_CONF_OK
) {

465 
Áûed
;

468 
geo
->
¥oxõs
 = 
˘x
.proxies;

469 
geo
->
¥oxy_ªcursive
 = 
˘x
.proxy_recursive;

471 i‡(
˘x
.
ønges
) {

473 i‡(
˘x
.
high
.
low
 && !˘x.
bö¨y_ö˛ude
) {

474 
i
 = 0; i < 0x10000; i++) {

475 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

477 i‡(
a
 =
NULL
) {

481 i‡(
a
->
√…s
 == 0) {

482 
˘x
.
high
.
low
[
i
] = 
NULL
;

486 
Àn
 = 
a
->
√…s
 * (
ngx_hâp_geo_ønge_t
);

488 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

489 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

490 
Áûed
;

493 
	`ngx_mem˝y
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

494 
˘x
.
high
.
low
[
i
][
a
->
√…s
].
vÆue
 = 
NULL
;

495 
˘x
.
d©a_size
 +
Àn
 + (*);

498 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


499 && !
˘x
.
outside_íåõs


500 && 
˘x
.
íåõs
 > 100000

501 && 
˘x
.
ö˛udes
 == 1)

503 
	`ngx_hâp_geo_¸óã_bö¨y_ba£
(&
˘x
);

507 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

508 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

511 
geo
->
u
.
high
 = 
˘x
.high;

513 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_ønge_v¨übÀ
;

514 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

517 i‡(
˘x
.
åì
 =
NULL
) {

518 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

519 i‡(
˘x
.
åì
 =
NULL
) {

520 
Áûed
;

524 
geo
->
u
.
åìs
.
åì
 = 
˘x
.tree;

526 #i‡(
NGX_HAVE_INET6
)

527 i‡(
˘x
.
åì6
 =
NULL
) {

528 
˘x
.
åì6
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

529 i‡(
˘x
.
åì6
 =
NULL
) {

530 
Áûed
;

534 
geo
->
u
.
åìs
.
åì6
 = 
˘x
.tree6;

537 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_cidr_v¨übÀ
;

538 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

540 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

541 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

542 =
NGX_ERROR
)

544 
Áûed
;

549 #i‡(
NGX_HAVE_INET6
)

550 i‡(
	`ngx_ødix128åì_ö£π
(
˘x
.
åì6
, 
zîo
.
s6_addr
, zero.s6_addr,

551 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

552 =
NGX_ERROR
)

554 
Áûed
;

559 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

560 
	`ngx_de°roy_poﬁ
(
poﬁ
);

562  
NGX_CONF_OK
;

564 
Áûed
:

566 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

567 
	`ngx_de°roy_poﬁ
(
poﬁ
);

569  
NGX_CONF_ERROR
;

570 
	}
}

574 
	$ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

576 *
rv
;

577 
ngx_°r_t
 *
vÆue
;

578 
ngx_cidr_t
 
cidr
;

579 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
;

581 
˘x
 = 
cf
->ctx;

583 
vÆue
 = 
cf
->
¨gs
->
ñts
;

585 i‡(
cf
->
¨gs
->
√…s
 == 1) {

587 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

589 i‡(
˘x
->
åì


590 #i‡(
NGX_HAVE_INET6
)

591 || 
˘x
->
åì6


595 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

598 
Áûed
;

601 
˘x
->
ønges
 = 1;

603 
rv
 = 
NGX_CONF_OK
;

605 
d⁄e
;

608 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy_recursive") == 0) {

609 
˘x
->
¥oxy_ªcursive
 = 1;

610 
rv
 = 
NGX_CONF_OK
;

611 
d⁄e
;

615 i‡(
cf
->
¨gs
->
√…s
 != 2) {

616 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

618 
Áûed
;

621 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

623 
rv
 = 
	`ngx_hâp_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

625 
d⁄e
;

627 } i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy") == 0) {

629 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

630 
Áûed
;

633 
rv
 = 
	`ngx_hâp_geo_add_¥oxy
(
cf
, 
˘x
, &
cidr
);

635 
d⁄e
;

638 i‡(
˘x
->
ønges
) {

639 
rv
 = 
	`ngx_hâp_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

642 
rv
 = 
	`ngx_hâp_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

645 
d⁄e
:

647 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

649  
rv
;

651 
Áûed
:

653 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

655  
NGX_CONF_ERROR
;

656 
	}
}

660 
	$ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

661 
ngx_°r_t
 *
vÆue
)

663 
u_ch¨
 *
p
, *
œ°
;

664 
ö_addr_t
 
°¨t
, 
íd
;

665 
ngx_°r_t
 *
√t
;

666 
ngx_uöt_t
 
dñ
;

668 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

670 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

671 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

673 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

676 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

677 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

678  
NGX_CONF_ERROR
;

681  
NGX_CONF_OK
;

684 i‡(
˘x
->
bö¨y_ö˛ude
) {

685 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

687 
˘x
->
ö˛ude_«me
.
d©a
);

688  
NGX_CONF_ERROR
;

691 i‡(
˘x
->
high
.
low
 =
NULL
) {

692 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

693 0x10000 * (
ngx_hâp_geo_ønge_t
 *));

694 i‡(
˘x
->
high
.
low
 =
NULL
) {

695  
NGX_CONF_ERROR
;

699 
˘x
->
íåõs
++;

700 
˘x
->
outside_íåõs
 = 1;

702 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

703 
√t
 = &
vÆue
[1];

704 
dñ
 = 1;

707 
√t
 = &
vÆue
[0];

708 
dñ
 = 0;

711 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

713 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

715 i‡(
p
 =
NULL
) {

716 
övÆid
;

719 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

721 i‡(
°¨t
 =
INADDR_NONE
) {

722 
övÆid
;

725 
°¨t
 = 
	`¡ohl
(start);

727 
p
++;

729 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

731 i‡(
íd
 =
INADDR_NONE
) {

732 
övÆid
;

735 
íd
 = 
	`¡ohl
(end);

737 i‡(
°¨t
 > 
íd
) {

738 
övÆid
;

741 i‡(
dñ
) {

742 i‡(
	`ngx_hâp_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

743 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

744 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

747  
NGX_CONF_OK
;

750 
˘x
->
vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &value[1]);

752 i‡(
˘x
->
vÆue
 =
NULL
) {

753  
NGX_CONF_ERROR
;

756 
˘x
->
√t
 =Çet;

758  
	`ngx_hâp_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

760 
övÆid
:

762 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

764  
NGX_CONF_ERROR
;

765 
	}
}

771 
	$ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

772 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

774 
ö_addr_t
 
n
;

775 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

776 
ngx_¨øy_t
 *
a
;

777 
ngx_hâp_geo_ønge_t
 *
ønge
;

779 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

781 
h
 = 
n
 >> 16;

783 i‡(
n
 =
°¨t
) {

784 
s
 = 
n
 & 0xffff;

786 
s
 = 0;

789 i‡((
n
 | 0xffffË> 
íd
) {

790 
e
 = 
íd
 & 0xffff;

793 
e
 = 0xffff;

796 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

798 i‡(
a
 =
NULL
) {

799 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

800 (
ngx_hâp_geo_ønge_t
));

801 i‡(
a
 =
NULL
) {

802  
NGX_CONF_ERROR
;

805 
˘x
->
high
.
low
[
h
] = (
ngx_hâp_geo_ønge_t
 *Ë
a
;

808 
i
 = 
a
->
√…s
;

809 
ønge
 = 
a
->
ñts
;

811 
i
) {

813 
i
--;

815 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

819 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

823 
ønge
 = 
	`ngx_¨øy_push
(
a
);

824 i‡(
ønge
 =
NULL
) {

825  
NGX_CONF_ERROR
;

828 
ønge
 = 
a
->
ñts
;

830 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

831 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

833 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

834 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

835 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

837 
√xt
;

840 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


841 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

843 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

845 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

847 
ønge
[
i
].
vÆue
 = 
˘x
->value;

849 
√xt
;

852 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


853 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

857 
ønge
 = 
	`ngx_¨øy_push
(
a
);

858 i‡(
ønge
 =
NULL
) {

859  
NGX_CONF_ERROR
;

862 
ønge
 = 
	`ngx_¨øy_push
(
a
);

863 i‡(
ønge
 =
NULL
) {

864  
NGX_CONF_ERROR
;

867 
ønge
 = 
a
->
ñts
;

869 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

870 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

872 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

873 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

874 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

876 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

877 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

878 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

880 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

882 
√xt
;

885 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


886 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

890 
ønge
 = 
	`ngx_¨øy_push
(
a
);

891 i‡(
ønge
 =
NULL
) {

892  
NGX_CONF_ERROR
;

895 
ønge
 = 
a
->
ñts
;

897 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

898 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

900 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

902 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

903 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

904 
ønge
[
i
].
vÆue
 = 
˘x
->value;

906 
√xt
;

909 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


910 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

914 
ønge
 = 
	`ngx_¨øy_push
(
a
);

915 i‡(
ønge
 =
NULL
) {

916  
NGX_CONF_ERROR
;

919 
ønge
 = 
a
->
ñts
;

921 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

922 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

924 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

925 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

926 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

928 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

930 
√xt
;

933 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

934 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

936 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

938 
˘x
->
√t
,

939 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

940 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

942  
NGX_CONF_ERROR
;

947 
ønge
 = 
	`ngx_¨øy_push
(
a
);

948 i‡(
ønge
 =
NULL
) {

949  
NGX_CONF_ERROR
;

952 
ønge
 = 
a
->
ñts
;

954 
	`ngx_memmove
(&
ønge
[1], &range[0],

955 (
a
->
√…s
 - 1Ë* (
ngx_hâp_geo_ønge_t
));

957 
ønge
[0].
°¨t
 = (
u_sh‹t
Ë
s
;

958 
ønge
[0].
íd
 = (
u_sh‹t
Ë
e
;

959 
ønge
[0].
vÆue
 = 
˘x
->value;

961 
√xt
:

963 i‡(
h
 == 0xffff) {

968  
NGX_CONF_OK
;

969 
	}
}

972 
ngx_uöt_t


973 
	$ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

974 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

976 
ö_addr_t
 
n
;

977 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

978 
ngx_¨øy_t
 *
a
;

979 
ngx_hâp_geo_ønge_t
 *
ønge
;

981 
w¨n
 = 0;

983 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

985 
h
 = 
n
 >> 16;

987 i‡(
n
 =
°¨t
) {

988 
s
 = 
n
 & 0xffff;

990 
s
 = 0;

993 i‡((
n
 | 0xffffË> 
íd
) {

994 
e
 = 
íd
 & 0xffff;

997 
e
 = 0xffff;

1000 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

1002 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

1003 
w¨n
 = 1;

1004 
√xt
;

1007 
ønge
 = 
a
->
ñts
;

1008 
i
 = 0; i < 
a
->
√…s
; i++) {

1010 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


1011 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

1013 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

1014 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

1016 
a
->
√…s
--;

1021 i‡(
i
 =
a
->
√…s
 - 1) {

1022 
w¨n
 = 1;

1026 
√xt
:

1028 i‡(
h
 == 0xffff) {

1033  
w¨n
;

1034 
	}
}

1038 
	$ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1039 
ngx_°r_t
 *
vÆue
)

1041 *
rv
;

1042 
ngx_öt_t
 
rc
, 
dñ
;

1043 
ngx_°r_t
 *
√t
;

1044 
ngx_cidr_t
 
cidr
;

1046 i‡(
˘x
->
åì
 =
NULL
) {

1047 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1048 i‡(
˘x
->
åì
 =
NULL
) {

1049  
NGX_CONF_ERROR
;

1053 #i‡(
NGX_HAVE_INET6
)

1054 i‡(
˘x
->
åì6
 =
NULL
) {

1055 
˘x
->
åì6
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1056 i‡(
˘x
->
åì6
 =
NULL
) {

1057  
NGX_CONF_ERROR
;

1062 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

1063 
cidr
.
Ámûy
 = 
AF_INET
;

1064 
cidr
.
u
.
ö
.
addr
 = 0;

1065 
cidr
.
u
.
ö
.
mask
 = 0;

1067 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1069 i‡(
rv
 !
NGX_CONF_OK
) {

1070  
rv
;

1073 #i‡(
NGX_HAVE_INET6
)

1074 
cidr
.
Ámûy
 = 
AF_INET6
;

1075 
	`ngx_memzîo
(&
cidr
.
u
.
ö6
, (
ngx_ö6_cidr_t
));

1077 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1079 i‡(
rv
 !
NGX_CONF_OK
) {

1080  
rv
;

1084  
NGX_CONF_OK
;

1087 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

1088 
√t
 = &
vÆue
[1];

1089 
dñ
 = 1;

1092 
√t
 = &
vÆue
[0];

1093 
dñ
 = 0;

1096 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

1097  
NGX_CONF_ERROR
;

1100 i‡(
cidr
.
Ámûy
 =
AF_INET
) {

1101 
cidr
.
u
.
ö
.
addr
 = 
	`¡ohl
(cidr.u.in.addr);

1102 
cidr
.
u
.
ö
.
mask
 = 
	`¡ohl
(cidr.u.in.mask);

1105 i‡(
dñ
) {

1106 
cidr
.
Ámûy
) {

1108 #i‡(
NGX_HAVE_INET6
)

1109 
AF_INET6
:

1110 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1111 
cidr
.
u
.
ö6
.
addr
.
s6_addr
,

1112 
cidr
.
u
.
ö6
.
mask
.
s6_addr
);

1117 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

1118 
cidr
.
u
.
ö
.
mask
);

1122 i‡(
rc
 !
NGX_OK
) {

1123 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1124 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

1127  
NGX_CONF_OK
;

1130  
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], 
√t
);

1131 
	}
}

1135 
	$ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1136 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
)

1138 
ngx_öt_t
 
rc
;

1139 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

1141 
vÆ
 = 
	`ngx_hâp_geo_vÆue
(
cf
, 
˘x
, 
vÆue
);

1143 i‡(
vÆ
 =
NULL
) {

1144  
NGX_CONF_ERROR
;

1147 
cidr
->
Ámûy
) {

1149 #i‡(
NGX_HAVE_INET6
)

1150 
AF_INET6
:

1151 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1152 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1153 (
uöçå_t
Ë
vÆ
);

1155 i‡(
rc
 =
NGX_OK
) {

1156  
NGX_CONF_OK
;

1159 i‡(
rc
 =
NGX_ERROR
) {

1160  
NGX_CONF_ERROR
;

1165 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1166 
	`ngx_ødix128åì_föd
(
˘x
->
åì6
,

1167 
cidr
->
u
.
ö6
.
addr
.
s6_addr
);

1169 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1171 
√t
, 
vÆ
, 
ﬁd
);

1173 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1174 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1175 
cidr
->
u
.
ö6
.
mask
.
s6_addr
);

1177 i‡(
rc
 =
NGX_ERROR
) {

1178 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1179  
NGX_CONF_ERROR
;

1182 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1183 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1184 (
uöçå_t
Ë
vÆ
);

1190 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1191 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1193 i‡(
rc
 =
NGX_OK
) {

1194  
NGX_CONF_OK
;

1197 i‡(
rc
 =
NGX_ERROR
) {

1198  
NGX_CONF_ERROR
;

1203 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1204 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
);

1206 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1208 
√t
, 
vÆ
, 
ﬁd
);

1210 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
,

1211 
cidr
->
u
.
ö
.
addr
, cidr->u.ö.
mask
);

1213 i‡(
rc
 =
NGX_ERROR
) {

1214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1215  
NGX_CONF_ERROR
;

1218 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1219 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1224 i‡(
rc
 =
NGX_OK
) {

1225  
NGX_CONF_OK
;

1228  
NGX_CONF_ERROR
;

1229 
	}
}

1232 
ngx_hâp_v¨übÀ_vÆue_t
 *

1233 
	$ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1234 
ngx_°r_t
 *
vÆue
)

1236 
uöt32_t
 
hash
;

1237 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
;

1238 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1240 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1242 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1243 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1245 i‡(
gvvn
) {

1246  
gvvn
->
vÆue
;

1249 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1250 i‡(
vÆ
 =
NULL
) {

1251  
NULL
;

1254 
vÆ
->
Àn
 = 
vÆue
->len;

1255 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1256 i‡(
vÆ
->
d©a
 =
NULL
) {

1257  
NULL
;

1260 
vÆ
->
vÆid
 = 1;

1261 
vÆ
->
no_ˇchóbÀ
 = 0;

1262 
vÆ
->
nŸ_found
 = 0;

1264 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1265 (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
));

1266 i‡(
gvvn
 =
NULL
) {

1267  
NULL
;

1270 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1271 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1272 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1273 
gvvn
->
vÆue
 = 
vÆ
;

1274 
gvvn
->
off£t
 = 0;

1276 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1278 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vÆue
->
Àn
,

1281  
vÆ
;

1282 
	}
}

1286 
	$ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1287 
ngx_cidr_t
 *
cidr
)

1289 
ngx_cidr_t
 *
c
;

1291 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1292 
˘x
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(˘x->
poﬁ
, 4, (
ngx_cidr_t
));

1293 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1294  
NGX_CONF_ERROR
;

1298 
c
 = 
	`ngx_¨øy_push
(
˘x
->
¥oxõs
);

1299 i‡(
c
 =
NULL
) {

1300  
NGX_CONF_ERROR
;

1303 *
c
 = *
cidr
;

1305  
NGX_CONF_OK
;

1306 
	}
}

1309 
ngx_öt_t


1310 
	$ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1312 
ngx_öt_t
 
rc
;

1314 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1315 
cidr
->
Ámûy
 = 
AF_INET
;

1316 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1317 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1319  
NGX_OK
;

1322 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1324 i‡(
rc
 =
NGX_ERROR
) {

1325 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1326  
NGX_ERROR
;

1329 i‡(
rc
 =
NGX_DONE
) {

1330 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1331 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1334  
NGX_OK
;

1335 
	}
}

1339 
	$ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1340 
ngx_°r_t
 *
«me
)

1342 *
rv
;

1343 
ngx_°r_t
 
fûe
;

1345 
fûe
.
Àn
 = 
«me
->len + 4;

1346 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1347 i‡(
fûe
.
d©a
 =
NULL
) {

1348  
NGX_CONF_ERROR
;

1351 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1353 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1354  
NGX_CONF_ERROR
;

1357 i‡(
˘x
->
ønges
) {

1358 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1360 
	`ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1361 
NGX_OK
:

1362  
NGX_CONF_OK
;

1363 
NGX_ERROR
:

1364  
NGX_CONF_ERROR
;

1370 
fûe
.
Àn
 -= 4;

1371 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1373 
˘x
->
ö˛ude_«me
 = 
fûe
;

1375 i‡(
˘x
->
outside_íåõs
) {

1376 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1379 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1381 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1383 
˘x
->
ö˛udes
++;

1384 
˘x
->
outside_íåõs
 = 0;

1386  
rv
;

1387 
	}
}

1390 
ngx_öt_t


1391 
	$ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1392 
ngx_°r_t
 *
«me
)

1394 
u_ch¨
 *
ba£
, 
ch
;

1395 
time_t
 
mtime
;

1396 
size_t
 
size
, 
Àn
;

1397 
ssize_t
 
n
;

1398 
uöt32_t
 
¸c32
;

1399 
ngx_îr_t
 
îr
;

1400 
ngx_öt_t
 
rc
;

1401 
ngx_uöt_t
 
i
;

1402 
ngx_fûe_t
 
fûe
;

1403 
ngx_fûe_öfo_t
 
fi
;

1404 
ngx_hâp_geo_ønge_t
 *
ønge
, **
ønges
;

1405 
ngx_hâp_geo_hódî_t
 *
hódî
;

1406 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1408 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1409 
fûe
.
«me
 = *name;

1410 
fûe
.
log
 = 
cf
->log;

1412 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

1414 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1415 
îr
 = 
ngx_î∫o
;

1416 i‡(
îr
 !
NGX_ENOENT
) {

1417 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1418 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1420  
NGX_DECLINED
;

1423 i‡(
˘x
->
outside_íåõs
) {

1424 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1426 
«me
->
d©a
);

1427 
rc
 = 
NGX_ERROR
;

1428 
d⁄e
;

1431 i‡(
˘x
->
bö¨y_ö˛ude
) {

1432 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1434 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1435 
rc
 = 
NGX_ERROR
;

1436 
d⁄e
;

1439 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1440 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1441 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1442 
Áûed
;

1445 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1446 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1448 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1449 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1451 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1453 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1454 
Áûed
;

1457 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1459 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1460 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1461 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1462 
Áûed
;

1465 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1466 i‡(
ba£
 =
NULL
) {

1467 
Áûed
;

1470 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1472 i‡(
n
 =
NGX_ERROR
) {

1473 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1474 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1475 
Áûed
;

1478 i‡((
size_t
Ë
n
 !
size
) {

1479 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1480 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1481 
«me
->
d©a
, 
n
, 
size
);

1482 
Áûed
;

1485 
hódî
 = (
ngx_hâp_geo_hódî_t
 *Ë
ba£
;

1487 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_hâp_geo_hódî
, 
hódî
, 12) != 0) {

1488 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1489 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1490 
Áûed
;

1493 
	`ngx_¸c32_öô
(
¸c32
);

1495 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë(
ba£
 + (
ngx_hâp_geo_hódî_t
));

1497 
vv
->
d©a
) {

1498 
Àn
 = 
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1500 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1501 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1502 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1504 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1505 
vv
++;

1507 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
vv
;

1509 
i
 = 0; i < 0x10000; i++) {

1510 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1511 i‡(
ønges
[
i
]) {

1512 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *)

1513 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1517 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë&
ønges
[0x10000];

1519 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1520 
ønge
->
vÆue
) {

1521 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1522 (
ngx_hâp_geo_ønge_t
));

1523 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1524 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1525 
ønge
++;

1527 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1528 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1531 
	`ngx_¸c32_föÆ
(
¸c32
);

1533 i‡(
¸c32
 !
hódî
->crc32) {

1534 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1535 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1536 
Áûed
;

1539 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1540 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1542 
˘x
->
ö˛ude_«me
 = *
«me
;

1543 
˘x
->
bö¨y_ö˛ude
 = 1;

1544 
˘x
->
high
.
low
 = 
ønges
;

1545 
rc
 = 
NGX_OK
;

1547 
d⁄e
;

1549 
Áûed
:

1551 
rc
 = 
NGX_DECLINED
;

1553 
d⁄e
:

1555 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1556 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1557 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1560  
rc
;

1561 
	}
}

1565 
	$ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
)

1567 
u_ch¨
 *
p
;

1568 
uöt32_t
 
hash
;

1569 
ngx_°r_t
 
s
;

1570 
ngx_uöt_t
 
i
;

1571 
ngx_fûe_m≠pög_t
 
fm
;

1572 
ngx_hâp_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1573 
ngx_hâp_geo_hódî_t
 *
hódî
;

1574 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1576 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1577 i‡(
fm
.
«me
 =
NULL
) {

1581 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1583 
fm
.
size
 = 
˘x
->
d©a_size
;

1584 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1586 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1587 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1589 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1593 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_hâp_geo_hódî
,

1594 (
ngx_hâp_geo_hódî_t
));

1596 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1597 
˘x
->
rbåì
.
£¡öñ
);

1599 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1601 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
p
;

1603 
p
 +0x10000 * (
ngx_hâp_geo_ønge_t
 *);

1605 
i
 = 0; i < 0x10000; i++) {

1606 
r
 = 
˘x
->
high
.
low
[
i
];

1607 i‡(
r
 =
NULL
) {

1611 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë
p
;

1612 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1615 
s
.
Àn
 = 
r
->
vÆue
->len;

1616 
s
.
d©a
 = 
r
->
vÆue
->data;

1617 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1618 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1619 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1621 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1622 
ønge
->
°¨t
 = 
r
->start;

1623 
ønge
->
íd
 = 
r
->end;

1624 
ønge
++;

1626 } (++
r
)->
vÆue
);

1628 
ønge
->
vÆue
 = 
NULL
;

1630 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1633 
hódî
 = 
fm
.
addr
;

1634 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1635 + (
ngx_hâp_geo_hódî_t
),

1636 
fm
.
size
 - (
ngx_hâp_geo_hódî_t
));

1638 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1639 
	}
}

1642 
u_ch¨
 *

1643 
	$ngx_hâp_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1644 
ngx_rbåì_node_t
 *
£¡öñ
)

1646 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1647 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1649 i‡(
node
 =
£¡öñ
) {

1650  
p
;

1653 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1654 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1656 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
p
;

1657 *
vv
 = *
gvvn
->
vÆue
;

1658 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1659 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1661 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1663 
p
 = 
	`ngx_Æign_±r
(p, (*));

1665 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1667  
	`ngx_hâp_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1668 
	}
}

	@src/http/modules/ngx_http_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

16 
	#NGX_GEOIP_COUNTRY_CODE
 0

	)

17 
	#NGX_GEOIP_COUNTRY_CODE3
 1

	)

18 
	#NGX_GEOIP_COUNTRY_NAME
 2

	)

22 
GeoIP
 *
	mcou¡ry
;

23 
GeoIP
 *
	m‹g
;

24 
GeoIP
 *
	mcôy
;

25 
ngx_¨øy_t
 *
	m¥oxõs
;

26 
ngx_Êag_t
 
	m¥oxy_ªcursive
;

27 #i‡(
NGX_HAVE_GEOIP_V6
)

28 
	mcou¡ry_v6
:1;

29 
	m‹g_v6
:1;

30 
	mcôy_v6
:1;

32 } 
	tngx_hâp_geoù_c⁄f_t
;

36 
ngx_°r_t
 *
	m«me
;

37 
uöçå_t
 
	md©a
;

38 } 
	tngx_hâp_geoù_v¨_t
;

41 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *,

42 
	tu_l⁄g
 
	taddr
);

45 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
	gngx_hâp_geoù_cou¡ry_fun˘i⁄s
[] = {

46 
GeoIP_cou¡ry_code_by_ùnum
,

47 
GeoIP_cou¡ry_code3_by_ùnum
,

48 
GeoIP_cou¡ry_«me_by_ùnum
,

52 #i‡(
NGX_HAVE_GEOIP_V6
)

54 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
)(
	tGeoIP
 *,

55 
	tgeoùv6_t
 
	taddr
);

58 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
	gngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[] = {

59 
GeoIP_cou¡ry_code_by_ùnum_v6
,

60 
GeoIP_cou¡ry_code3_by_ùnum_v6
,

61 
GeoIP_cou¡ry_«me_by_ùnum_v6
,

67 
ngx_öt_t
 
ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
GeoIPRec‹d
 *
ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
);

81 
ngx_öt_t
 
ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

82 *
ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

83 *
ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

84 *
ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

86 *
ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

88 *
ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

89 *
c⁄f
);

90 *
ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

91 *
c⁄f
);

92 
ngx_öt_t
 
ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

93 
ngx_cidr_t
 *
cidr
);

94 
ngx_hâp_geoù_˛ónup
(*
d©a
);

97 
ngx_comm™d_t
 
	gngx_hâp_geoù_comm™ds
[] = {

99 { 
ngx_°rög
("geoip_country"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

101 
ngx_hâp_geoù_cou¡ry
,

102 
NGX_HTTP_MAIN_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("geoip_org"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

108 
ngx_hâp_geoù_‹g
,

109 
NGX_HTTP_MAIN_CONF_OFFSET
,

111 
NULL
 },

113 { 
ngx_°rög
("geoip_city"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

115 
ngx_hâp_geoù_côy
,

116 
NGX_HTTP_MAIN_CONF_OFFSET
,

118 
NULL
 },

120 { 
ngx_°rög
("geoip_proxy"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_geoù_¥oxy
,

123 
NGX_HTTP_MAIN_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("geoip_proxy_recursive"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_FLAG
,

129 
ngx_c⁄f_£t_Êag_¶Ÿ
,

130 
NGX_HTTP_MAIN_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_geoù_c⁄f_t
, 
¥oxy_ªcursive
),

132 
NULL
 },

134 
ngx_nuŒ_comm™d


138 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geoù_moduÀ_˘x
 = {

139 
ngx_hâp_geoù_add_v¨übÀs
,

140 
NULL
,

142 
ngx_hâp_geoù_¸óã_c⁄f
,

143 
ngx_hâp_geoù_öô_c⁄f
,

145 
NULL
,

146 
NULL
,

148 
NULL
,

149 
NULL


153 
ngx_moduÀ_t
 
	gngx_hâp_geoù_moduÀ
 = {

154 
NGX_MODULE_V1
,

155 &
ngx_hâp_geoù_moduÀ_˘x
,

156 
ngx_hâp_geoù_comm™ds
,

157 
NGX_HTTP_MODULE
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NGX_MODULE_V1_PADDING


169 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_geoù_v¨s
[] = {

171 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

172 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

173 
NGX_GEOIP_COUNTRY_CODE
, 0, 0 },

175 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

176 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

177 
NGX_GEOIP_COUNTRY_CODE3
, 0, 0 },

179 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

180 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

181 
NGX_GEOIP_COUNTRY_NAME
, 0, 0 },

183 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

184 
ngx_hâp_geoù_‹g_v¨übÀ
,

187 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

188 
ngx_hâp_geoù_côy_v¨übÀ
,

189 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

191 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

192 
ngx_hâp_geoù_côy_v¨übÀ
,

193 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

195 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

196 
ngx_hâp_geoù_côy_v¨übÀ
,

197 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

199 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

200 
ngx_hâp_geoù_côy_v¨übÀ
,

201 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

203 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

204 
ngx_hâp_geoù_côy_v¨übÀ
,

205 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

207 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

208 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
,

211 { 
ngx_°rög
("geoù_côy"), 
NULL
,

212 
ngx_hâp_geoù_côy_v¨übÀ
,

213 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

215 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

216 
ngx_hâp_geoù_côy_v¨übÀ
,

217 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

219 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

220 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

221 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

223 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

224 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

225 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

227 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

228 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

229 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

231 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

232 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

233 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

235 
ngx_hâp_nuŒ_v¨übÀ


239 
u_l⁄g


240 
	$ngx_hâp_geoù_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

242 
ngx_addr_t
 
addr
;

243 
ngx_¨øy_t
 *
xfwd
;

244 
sockaddr_ö
 *
sö
;

246 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

247 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

250 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

252 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

253 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

254 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

257 #i‡(
NGX_HAVE_INET6
)

259 i‡(
addr
.
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

260 
u_ch¨
 *
p
;

261 
ö_addr_t
 
öaddr
;

262 
ö6_addr
 *
öaddr6
;

264 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

266 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

267 
p
 = 
öaddr6
->
s6_addr
;

269 
öaddr
 = 
p
[12] << 24;

270 
öaddr
 +
p
[13] << 16;

271 
öaddr
 +
p
[14] << 8;

272 
öaddr
 +
p
[15];

274  
öaddr
;

280 i‡(
addr
.
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

281  
INADDR_NONE
;

284 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

285  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

286 
	}
}

289 #i‡(
NGX_HAVE_GEOIP_V6
)

291 
geoùv6_t


292 
	$ngx_hâp_geoù_addr_v6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

294 
ngx_addr_t
 
addr
;

295 
ngx_¨øy_t
 *
xfwd
;

296 
ö_addr_t
 
addr4
;

297 
ö6_addr
 
addr6
;

298 
sockaddr_ö
 *
sö
;

299 
sockaddr_ö6
 *
sö6
;

301 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

302 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

305 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

307 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

308 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

309 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

312 
addr
.
sockaddr
->
ß_Ámûy
) {

314 
AF_INET
:

316 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

317 
addr4
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

319 
	`ngx_memzîo
(&
addr6
, (
ö6_addr
));

320 
addr6
.
s6_addr
[10] = 0xff;

321 
addr6
.
s6_addr
[11] = 0xff;

322 
addr6
.
s6_addr
[12] = 
addr4
 >> 24;

323 
addr6
.
s6_addr
[13] = 
addr4
 >> 16;

324 
addr6
.
s6_addr
[14] = 
addr4
 >> 8;

325 
addr6
.
s6_addr
[15] = 
addr4
;

326  
addr6
;

328 
AF_INET6
:

329 
sö6
 = (
sockaddr_ö6
 *Ë
addr
.
sockaddr
;

330  
sö6
->
sö6_addr
;

333  
ö6addr_™y
;

335 
	}
}

340 
ngx_öt_t


341 
	$ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

342 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

344 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

345 
ngx_hâp_geoù_cou¡ry_fun˘i⁄s
[
d©a
];

346 #i‡(
NGX_HAVE_GEOIP_V6
)

347 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
h™dÀr_v6
 =

348 
ngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[
d©a
];

351 c⁄° *
vÆ
;

352 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

354 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

356 i‡(
gcf
->
cou¡ry
 =
NULL
) {

357 
nŸ_found
;

360 #i‡(
NGX_HAVE_GEOIP_V6
)

361 
vÆ
 = 
gcf
->
cou¡ry_v6


362 ? 
	`h™dÀr_v6
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr_v6
(
r
, gcf))

363 : 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

365 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

368 i‡(
vÆ
 =
NULL
) {

369 
nŸ_found
;

372 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

373 
v
->
vÆid
 = 1;

374 
v
->
no_ˇchóbÀ
 = 0;

375 
v
->
nŸ_found
 = 0;

376 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

378  
NGX_OK
;

380 
nŸ_found
:

382 
v
->
nŸ_found
 = 1;

384  
NGX_OK
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

390 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

392 
size_t
 
Àn
;

393 *
vÆ
;

394 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

396 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

398 i‡(
gcf
->
‹g
 =
NULL
) {

399 
nŸ_found
;

402 #i‡(
NGX_HAVE_GEOIP_V6
)

403 
vÆ
 = 
gcf
->
‹g_v6


404 ? 
	`GeoIP_«me_by_ùnum_v6
(
gcf
->
‹g
,

405 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

406 : 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
,

407 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

409 
vÆ
 = 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

412 i‡(
vÆ
 =
NULL
) {

413 
nŸ_found
;

416 
Àn
 = 
	`ngx_°æí
(
vÆ
);

417 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

418 i‡(
v
->
d©a
 =
NULL
) {

419 
	`ngx_‰ì
(
vÆ
);

420  
NGX_ERROR
;

423 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

425 
v
->
Àn
 =Üen;

426 
v
->
vÆid
 = 1;

427 
v
->
no_ˇchóbÀ
 = 0;

428 
v
->
nŸ_found
 = 0;

430 
	`ngx_‰ì
(
vÆ
);

432  
NGX_OK
;

434 
nŸ_found
:

436 
v
->
nŸ_found
 = 1;

438  
NGX_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

444 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

446 *
vÆ
;

447 
size_t
 
Àn
;

448 
GeoIPRec‹d
 *
gr
;

450 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

451 i‡(
gr
 =
NULL
) {

452 
nŸ_found
;

455 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

456 i‡(
vÆ
 =
NULL
) {

457 
no_vÆue
;

460 
Àn
 = 
	`ngx_°æí
(
vÆ
);

461 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

462 i‡(
v
->
d©a
 =
NULL
) {

463 
	`GeoIPRec‹d_dñëe
(
gr
);

464  
NGX_ERROR
;

467 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

469 
v
->
Àn
 =Üen;

470 
v
->
vÆid
 = 1;

471 
v
->
no_ˇchóbÀ
 = 0;

472 
v
->
nŸ_found
 = 0;

474 
	`GeoIPRec‹d_dñëe
(
gr
);

476  
NGX_OK
;

478 
no_vÆue
:

480 
	`GeoIPRec‹d_dñëe
(
gr
);

482 
nŸ_found
:

484 
v
->
nŸ_found
 = 1;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

492 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

494 
size_t
 
Àn
;

495 c⁄° *
vÆ
;

496 
GeoIPRec‹d
 *
gr
;

498 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

499 i‡(
gr
 =
NULL
) {

500 
nŸ_found
;

503 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

505 
	`GeoIPRec‹d_dñëe
(
gr
);

507 i‡(
vÆ
 =
NULL
) {

508 
nŸ_found
;

511 
Àn
 = 
	`ngx_°æí
(
vÆ
);

512 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

513 i‡(
v
->
d©a
 =
NULL
) {

514  
NGX_ERROR
;

517 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

519 
v
->
Àn
 =Üen;

520 
v
->
vÆid
 = 1;

521 
v
->
no_ˇchóbÀ
 = 0;

522 
v
->
nŸ_found
 = 0;

524  
NGX_OK
;

526 
nŸ_found
:

528 
v
->
nŸ_found
 = 1;

530  
NGX_OK
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

538 
vÆ
;

539 
GeoIPRec‹d
 *
gr
;

541 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

542 i‡(
gr
 =
NULL
) {

543 
v
->
nŸ_found
 = 1;

544  
NGX_OK
;

547 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

548 i‡(
v
->
d©a
 =
NULL
) {

549 
	`GeoIPRec‹d_dñëe
(
gr
);

550  
NGX_ERROR
;

553 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

555 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

556 
v
->
vÆid
 = 1;

557 
v
->
no_ˇchóbÀ
 = 0;

558 
v
->
nŸ_found
 = 0;

560 
	`GeoIPRec‹d_dñëe
(
gr
);

562  
NGX_OK
;

563 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

568 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

570 
vÆ
;

571 
GeoIPRec‹d
 *
gr
;

573 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

574 i‡(
gr
 =
NULL
) {

575 
v
->
nŸ_found
 = 1;

576  
NGX_OK
;

579 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

580 i‡(
v
->
d©a
 =
NULL
) {

581 
	`GeoIPRec‹d_dñëe
(
gr
);

582  
NGX_ERROR
;

585 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

587 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

588 
v
->
vÆid
 = 1;

589 
v
->
no_ˇchóbÀ
 = 0;

590 
v
->
nŸ_found
 = 0;

592 
	`GeoIPRec‹d_dñëe
(
gr
);

594  
NGX_OK
;

595 
	}
}

598 
GeoIPRec‹d
 *

599 
	$ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
)

601 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

603 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

605 i‡(
gcf
->
côy
) {

606 #i‡(
NGX_HAVE_GEOIP_V6
)

607  
gcf
->
côy_v6


608 ? 
	`GeoIP_ªc‹d_by_ùnum_v6
(
gcf
->
côy
,

609 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

610 : 
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
,

611 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

613  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

617  
NULL
;

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

624 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

626 
v
 = 
ngx_hâp_geoù_v¨s
; v->
«me
.
Àn
; v++) {

627 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

628 i‡(
v¨
 =
NULL
) {

629  
NGX_ERROR
;

632 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

633 
v¨
->
d©a
 = 
v
->data;

636  
NGX_OK
;

637 
	}
}

641 
	$ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

643 
ngx_poﬁ_˛ónup_t
 *
˛n
;

644 
ngx_hâp_geoù_c⁄f_t
 *
c⁄f
;

646 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_geoù_c⁄f_t
));

647 i‡(
c⁄f
 =
NULL
) {

648  
NULL
;

651 
c⁄f
->
¥oxy_ªcursive
 = 
NGX_CONF_UNSET
;

653 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

654 i‡(
˛n
 =
NULL
) {

655  
NULL
;

658 
˛n
->
h™dÀr
 = 
ngx_hâp_geoù_˛ónup
;

659 
˛n
->
d©a
 = 
c⁄f
;

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

668 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

670 
	`ngx_c⁄f_öô_vÆue
(
gcf
->
¥oxy_ªcursive
, 0);

672  
NGX_CONF_OK
;

673 
	}
}

677 
	$ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

679 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

681 
ngx_°r_t
 *
vÆue
;

683 i‡(
gcf
->
cou¡ry
) {

687 
vÆue
 = 
cf
->
¨gs
->
ñts
;

689 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

691 i‡(
gcf
->
cou¡ry
 =
NULL
) {

692 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

693 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

695  
NGX_CONF_ERROR
;

698 i‡(
cf
->
¨gs
->
√…s
 == 3) {

699 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

700 
	`GeoIP_£t_ch¨£t
(
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

703 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

704 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

705  
NGX_CONF_ERROR
;

709 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

711 
GEOIP_COUNTRY_EDITION
:

713  
NGX_CONF_OK
;

715 #i‡(
NGX_HAVE_GEOIP_V6
)

716 
GEOIP_COUNTRY_EDITION_V6
:

718 
gcf
->
cou¡ry_v6
 = 1;

719  
NGX_CONF_OK
;

723 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

725 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

726  
NGX_CONF_ERROR
;

728 
	}
}

732 
	$ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

734 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

736 
ngx_°r_t
 *
vÆue
;

738 i‡(
gcf
->
‹g
) {

742 
vÆue
 = 
cf
->
¨gs
->
ñts
;

744 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

746 i‡(
gcf
->
‹g
 =
NULL
) {

747 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

748 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

750  
NGX_CONF_ERROR
;

753 i‡(
cf
->
¨gs
->
√…s
 == 3) {

754 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

755 
	`GeoIP_£t_ch¨£t
(
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

758 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

759 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

760  
NGX_CONF_ERROR
;

764 
gcf
->
‹g
->
d©aba£Ty≥
) {

766 
GEOIP_ISP_EDITION
:

767 
GEOIP_ORG_EDITION
:

768 
GEOIP_DOMAIN_EDITION
:

769 
GEOIP_ASNUM_EDITION
:

771  
NGX_CONF_OK
;

773 #i‡(
NGX_HAVE_GEOIP_V6
)

774 
GEOIP_ISP_EDITION_V6
:

775 
GEOIP_ORG_EDITION_V6
:

776 
GEOIP_DOMAIN_EDITION_V6
:

777 
GEOIP_ASNUM_EDITION_V6
:

779 
gcf
->
‹g_v6
 = 1;

780  
NGX_CONF_OK
;

784 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

786 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

787  
NGX_CONF_ERROR
;

789 
	}
}

793 
	$ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

795 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

797 
ngx_°r_t
 *
vÆue
;

799 i‡(
gcf
->
côy
) {

803 
vÆue
 = 
cf
->
¨gs
->
ñts
;

805 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

807 i‡(
gcf
->
côy
 =
NULL
) {

808 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

809 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

811  
NGX_CONF_ERROR
;

814 i‡(
cf
->
¨gs
->
√…s
 == 3) {

815 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

816 
	`GeoIP_£t_ch¨£t
(
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

819 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

820 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

821  
NGX_CONF_ERROR
;

825 
gcf
->
côy
->
d©aba£Ty≥
) {

827 
GEOIP_CITY_EDITION_REV0
:

828 
GEOIP_CITY_EDITION_REV1
:

830  
NGX_CONF_OK
;

832 #i‡(
NGX_HAVE_GEOIP_V6
)

833 
GEOIP_CITY_EDITION_REV0_V6
:

834 
GEOIP_CITY_EDITION_REV1_V6
:

836 
gcf
->
côy_v6
 = 1;

837  
NGX_CONF_OK
;

841 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

843 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

844  
NGX_CONF_ERROR
;

846 
	}
}

850 
	$ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

852 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

854 
ngx_°r_t
 *
vÆue
;

855 
ngx_cidr_t
 
cidr
, *
c
;

857 
vÆue
 = 
cf
->
¨gs
->
ñts
;

859 i‡(
	`ngx_hâp_geoù_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

860  
NGX_CONF_ERROR
;

863 i‡(
gcf
->
¥oxõs
 =
NULL
) {

864 
gcf
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_cidr_t
));

865 i‡(
gcf
->
¥oxõs
 =
NULL
) {

866  
NGX_CONF_ERROR
;

870 
c
 = 
	`ngx_¨øy_push
(
gcf
->
¥oxõs
);

871 i‡(
c
 =
NULL
) {

872  
NGX_CONF_ERROR
;

875 *
c
 = 
cidr
;

877  
NGX_CONF_OK
;

878 
	}
}

880 
ngx_öt_t


881 
	$ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

883 
ngx_öt_t
 
rc
;

885 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

886 
cidr
->
Ámûy
 = 
AF_INET
;

887 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

888 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

890  
NGX_OK
;

893 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

895 i‡(
rc
 =
NGX_ERROR
) {

896 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

897  
NGX_ERROR
;

900 i‡(
rc
 =
NGX_DONE
) {

901 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

902 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

905  
NGX_OK
;

906 
	}
}

910 
	$ngx_hâp_geoù_˛ónup
(*
d©a
)

912 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

914 i‡(
gcf
->
cou¡ry
) {

915 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

918 i‡(
gcf
->
‹g
) {

919 
	`GeoIP_dñëe
(
gcf
->
‹g
);

922 i‡(
gcf
->
côy
) {

923 
	`GeoIP_dñëe
(
gcf
->
côy
);

925 
	}
}

	@src/http/modules/ngx_http_grpc_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mÊushes
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 
ngx_hash_t
 
	mhash
;

18 } 
	tngx_hâp_gΩc_hódîs_t
;

22 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

24 
ngx_hâp_gΩc_hódîs_t
 
	mhódîs
;

25 
ngx_¨øy_t
 *
	mhódîs_sour˚
;

27 
ngx_°r_t
 
	mho°
;

28 
ngx_uöt_t
 
	mho°_£t
;

30 #i‡(
NGX_HTTP_SSL
)

31 
ngx_uöt_t
 
	ms¶
;

32 
ngx_uöt_t
 
	ms¶_¥Ÿocﬁs
;

33 
ngx_°r_t
 
	ms¶_cùhîs
;

34 
ngx_uöt_t
 
	ms¶_vîify_dïth
;

35 
ngx_°r_t
 
	ms¶_åu°ed_˚πifiˇã
;

36 
ngx_°r_t
 
	ms¶_¸l
;

37 
ngx_°r_t
 
	ms¶_˚πifiˇã
;

38 
ngx_°r_t
 
	ms¶_˚πifiˇã_key
;

39 
ngx_¨øy_t
 *
	ms¶_∑ssw‹ds
;

41 } 
	tngx_hâp_gΩc_loc_c⁄f_t
;

45 
	mngx_hâp_gΩc_°_°¨t
 = 0,

46 
	mngx_hâp_gΩc_°_Àngth_2
,

47 
	mngx_hâp_gΩc_°_Àngth_3
,

48 
	mngx_hâp_gΩc_°_ty≥
,

49 
	mngx_hâp_gΩc_°_Êags
,

50 
	mngx_hâp_gΩc_°_°ªam_id
,

51 
	mngx_hâp_gΩc_°_°ªam_id_2
,

52 
	mngx_hâp_gΩc_°_°ªam_id_3
,

53 
	mngx_hâp_gΩc_°_°ªam_id_4
,

54 
	mngx_hâp_gΩc_°_∑ylﬂd
,

55 
	mngx_hâp_gΩc_°_∑ddög


56 } 
	tngx_hâp_gΩc_°©e_e
;

60 
size_t
 
	möô_wödow
;

61 
size_t
 
	m£nd_wödow
;

62 
size_t
 
	mªcv_wödow
;

63 
ngx_uöt_t
 
	mœ°_°ªam_id
;

64 } 
	tngx_hâp_gΩc_c⁄n_t
;

68 
ngx_hâp_gΩc_°©e_e
 
	m°©e
;

69 
ngx_uöt_t
 
	m‰ame_°©e
;

70 
ngx_uöt_t
 
	m‰agmít_°©e
;

72 
ngx_chaö_t
 *
	mö
;

73 
ngx_chaö_t
 *
	mout
;

74 
ngx_chaö_t
 *
	m‰ì
;

75 
ngx_chaö_t
 *
	mbusy
;

77 
ngx_hâp_gΩc_c⁄n_t
 *
	mc⁄√˘i⁄
;

79 
ngx_uöt_t
 
	mid
;

81 
ssize_t
 
	m£nd_wödow
;

82 
size_t
 
	mªcv_wödow
;

84 
size_t
 
	mª°
;

85 
ngx_uöt_t
 
	m°ªam_id
;

86 
u_ch¨
 
	mty≥
;

87 
u_ch¨
 
	mÊags
;

88 
u_ch¨
 
	m∑ddög
;

90 
ngx_uöt_t
 
	mîr‹
;

91 
ngx_uöt_t
 
	mwödow_upd©e
;

93 
ngx_uöt_t
 
	m£âög_id
;

94 
ngx_uöt_t
 
	m£âög_vÆue
;

96 
u_ch¨
 
	mpög_d©a
[8];

98 
ngx_uöt_t
 
	mödex
;

99 
ngx_°r_t
 
	m«me
;

100 
ngx_°r_t
 
	mvÆue
;

102 
u_ch¨
 *
	mfõld_íd
;

103 
size_t
 
	mfõld_Àngth
;

104 
size_t
 
	mfõld_ª°
;

105 
u_ch¨
 
	mfõld_°©e
;

107 
	mlôîÆ
:1;

108 
	mfõld_huffm™
:1;

110 
	mhódî_£¡
:1;

111 
	mouçut_˛o£d
:1;

112 
	m∑rsög_hódîs
:1;

113 
	míd_°ªam
:1;

114 
	m°©us
:1;

116 
ngx_hâp_ªque°_t
 *
	mªque°
;

117 } 
	tngx_hâp_gΩc_˘x_t
;

121 
u_ch¨
 
	mÀngth_0
;

122 
u_ch¨
 
	mÀngth_1
;

123 
u_ch¨
 
	mÀngth_2
;

124 
u_ch¨
 
	mty≥
;

125 
u_ch¨
 
	mÊags
;

126 
u_ch¨
 
	m°ªam_id_0
;

127 
u_ch¨
 
	m°ªam_id_1
;

128 
u_ch¨
 
	m°ªam_id_2
;

129 
u_ch¨
 
	m°ªam_id_3
;

130 } 
	tngx_hâp_gΩc_‰ame_t
;

133 
ngx_öt_t
 
ngx_hâp_gΩc_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

134 
ngx_öt_t
 
ngx_hâp_gΩc_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

135 
ngx_öt_t
 
ngx_hâp_gΩc_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
);

136 
ngx_öt_t
 
ngx_hâp_gΩc_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

137 
ngx_öt_t
 
ngx_hâp_gΩc_fûãr_öô
(*
d©a
);

138 
ngx_öt_t
 
ngx_hâp_gΩc_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

140 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_‰ame
(
ngx_hâp_ªque°_t
 *
r
,

141 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

142 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

143 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

144 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_‰agmít
(
ngx_hâp_ªque°_t
 *
r
,

145 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

146 
ngx_öt_t
 
ngx_hâp_gΩc_vÆid©e_hódî_«me
(
ngx_hâp_ªque°_t
 *
r
,

147 
ngx_°r_t
 *
s
);

148 
ngx_öt_t
 
ngx_hâp_gΩc_vÆid©e_hódî_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

149 
ngx_°r_t
 *
s
);

150 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_r°_°ªam
(
ngx_hâp_ªque°_t
 *
r
,

151 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

152 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_gﬂway
(
ngx_hâp_ªque°_t
 *
r
,

153 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

154 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_wödow_upd©e
(
ngx_hâp_ªque°_t
 *
r
,

155 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

156 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_£âögs
(
ngx_hâp_ªque°_t
 *
r
,

157 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

158 
ngx_öt_t
 
ngx_hâp_gΩc_∑r£_pög
(
ngx_hâp_ªque°_t
 *
r
,

159 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

161 
ngx_öt_t
 
ngx_hâp_gΩc_£nd_£âögs_ack
(
ngx_hâp_ªque°_t
 *
r
,

162 
ngx_hâp_gΩc_˘x_t
 *
˘x
);

163 
ngx_öt_t
 
ngx_hâp_gΩc_£nd_pög_ack
(
ngx_hâp_ªque°_t
 *
r
,

164 
ngx_hâp_gΩc_˘x_t
 *
˘x
);

165 
ngx_öt_t
 
ngx_hâp_gΩc_£nd_wödow_upd©e
(
ngx_hâp_ªque°_t
 *
r
,

166 
ngx_hâp_gΩc_˘x_t
 *
˘x
);

168 
ngx_chaö_t
 *
ngx_hâp_gΩc_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

169 
ngx_hâp_gΩc_˘x_t
 *
˘x
);

170 
ngx_hâp_gΩc_˘x_t
 *
ngx_hâp_gΩc_gë_˘x
(
ngx_hâp_ªque°_t
 *
r
);

171 
ngx_öt_t
 
ngx_hâp_gΩc_gë_c⁄√˘i⁄_d©a
(
ngx_hâp_ªque°_t
 *
r
,

172 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

173 
ngx_hâp_gΩc_˛ónup
(*
d©a
);

175 
ngx_hâp_gΩc_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

176 
ngx_hâp_gΩc_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

177 
ngx_öt_t
 
rc
);

179 
ngx_öt_t
 
ngx_hâp_gΩc_öã∫Æ_åaûîs_v¨übÀ
(

180 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

182 
ngx_öt_t
 
ngx_hâp_gΩc_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

183 *
ngx_hâp_gΩc_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

184 *
ngx_hâp_gΩc_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

185 *
∑ª¡
, *
chûd
);

186 
ngx_öt_t
 
ngx_hâp_gΩc_öô_hódîs
(
ngx_c⁄f_t
 *
cf
,

187 
ngx_hâp_gΩc_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_gΩc_hódîs_t
 *
hódîs
,

188 
ngx_keyvÆ_t
 *
deÁu…_hódîs
);

190 *
ngx_hâp_gΩc_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

191 *
c⁄f
);

193 #i‡(
NGX_HTTP_SSL
)

194 *
ngx_hâp_gΩc_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
,

195 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

196 
ngx_öt_t
 
ngx_hâp_gΩc_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

197 
ngx_hâp_gΩc_loc_c⁄f_t
 *
glcf
);

201 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gΩc_√xt_up°ªam_masks
[] = {

202 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

203 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

204 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

205 { 
ngx_°rög
("n⁄_idempŸít"), 
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
 },

206 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

207 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

208 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

209 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

210 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

211 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

212 { 
ngx_°rög
("hâp_429"), 
NGX_HTTP_UPSTREAM_FT_HTTP_429
 },

213 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

214 { 
ngx_nuŒ_°rög
, 0 }

218 #i‡(
NGX_HTTP_SSL
)

220 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gΩc_s¶_¥Ÿocﬁs
[] = {

221 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

222 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

223 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

224 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

225 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

226 { 
ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

227 { 
ngx_nuŒ_°rög
, 0 }

233 
ngx_comm™d_t
 
	gngx_hâp_gΩc_comm™ds
[] = {

235 { 
ngx_°rög
("grpc_pass"),

236 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

237 
ngx_hâp_gΩc_∑ss
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
NULL
 },

242 { 
ngx_°rög
("grpc_bind"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

244 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

247 
NULL
 },

249 { 
ngx_°rög
("grpc_connect_timeout"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

251 
ngx_c⁄f_£t_m£c_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

254 
NULL
 },

256 { 
ngx_°rög
("grpc_send_timeout"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

258 
ngx_c⁄f_£t_m£c_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

261 
NULL
 },

263 { 
ngx_°rög
("grpc_intercept_errors"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

265 
ngx_c⁄f_£t_Êag_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

268 
NULL
 },

270 { 
ngx_°rög
("grpc_buffer_size"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

272 
ngx_c⁄f_£t_size_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

275 
NULL
 },

277 { 
ngx_°rög
("grpc_read_timeout"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

279 
ngx_c⁄f_£t_m£c_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

282 
NULL
 },

284 { 
ngx_°rög
("grpc_next_upstream"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

286 
ngx_c⁄f_£t_bômask_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

289 &
ngx_hâp_gΩc_√xt_up°ªam_masks
 },

291 { 
ngx_°rög
("grpc_next_upstream_tries"),

292 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

293 
ngx_c⁄f_£t_num_¶Ÿ
,

294 
NGX_HTTP_LOC_CONF_OFFSET
,

295 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

296 
NULL
 },

298 { 
ngx_°rög
("grpc_next_upstream_timeout"),

299 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

300 
ngx_c⁄f_£t_m£c_¶Ÿ
,

301 
NGX_HTTP_LOC_CONF_OFFSET
,

302 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

303 
NULL
 },

305 { 
ngx_°rög
("grpc_set_header"),

306 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

307 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

308 
NGX_HTTP_LOC_CONF_OFFSET
,

309 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
hódîs_sour˚
),

310 
NULL
 },

312 { 
ngx_°rög
("grpc_pass_header"),

313 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

314 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

315 
NGX_HTTP_LOC_CONF_OFFSET
,

316 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

317 
NULL
 },

319 { 
ngx_°rög
("grpc_hide_header"),

320 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

321 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

322 
NGX_HTTP_LOC_CONF_OFFSET
,

323 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

324 
NULL
 },

326 { 
ngx_°rög
("grpc_ignore_headers"),

327 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

328 
ngx_c⁄f_£t_bômask_¶Ÿ
,

329 
NGX_HTTP_LOC_CONF_OFFSET
,

330 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

331 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

333 #i‡(
NGX_HTTP_SSL
)

335 { 
ngx_°rög
("grpc_ssl_session_reuse"),

336 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

337 
ngx_c⁄f_£t_Êag_¶Ÿ
,

338 
NGX_HTTP_LOC_CONF_OFFSET
,

339 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

340 
NULL
 },

342 { 
ngx_°rög
("grpc_ssl_protocols"),

343 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

344 
ngx_c⁄f_£t_bômask_¶Ÿ
,

345 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

347 &
ngx_hâp_gΩc_s¶_¥Ÿocﬁs
 },

349 { 
ngx_°rög
("grpc_ssl_ciphers"),

350 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

351 
ngx_c⁄f_£t_°r_¶Ÿ
,

352 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_cùhîs
),

354 
NULL
 },

356 { 
ngx_°rög
("grpc_ssl_name"),

357 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

358 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

359 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
s¶_«me
),

361 
NULL
 },

363 { 
ngx_°rög
("grpc_ssl_server_name"),

364 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

365 
ngx_c⁄f_£t_Êag_¶Ÿ
,

366 
NGX_HTTP_LOC_CONF_OFFSET
,

367 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
s¶_£rvî_«me
),

368 
NULL
 },

370 { 
ngx_°rög
("grpc_ssl_verify"),

371 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

372 
ngx_c⁄f_£t_Êag_¶Ÿ
,

373 
NGX_HTTP_LOC_CONF_OFFSET
,

374 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
up°ªam
.
s¶_vîify
),

375 
NULL
 },

377 { 
ngx_°rög
("grpc_ssl_verify_depth"),

378 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

379 
ngx_c⁄f_£t_num_¶Ÿ
,

380 
NGX_HTTP_LOC_CONF_OFFSET
,

381 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_vîify_dïth
),

382 
NULL
 },

384 { 
ngx_°rög
("grpc_ssl_trusted_certificate"),

385 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

386 
ngx_c⁄f_£t_°r_¶Ÿ
,

387 
NGX_HTTP_LOC_CONF_OFFSET
,

388 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_åu°ed_˚πifiˇã
),

389 
NULL
 },

391 { 
ngx_°rög
("grpc_ssl_crl"),

392 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

393 
ngx_c⁄f_£t_°r_¶Ÿ
,

394 
NGX_HTTP_LOC_CONF_OFFSET
,

395 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_¸l
),

396 
NULL
 },

398 { 
ngx_°rög
("grpc_ssl_certificate"),

399 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

400 
ngx_c⁄f_£t_°r_¶Ÿ
,

401 
NGX_HTTP_LOC_CONF_OFFSET
,

402 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_˚πifiˇã
),

403 
NULL
 },

405 { 
ngx_°rög
("grpc_ssl_certificate_key"),

406 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

407 
ngx_c⁄f_£t_°r_¶Ÿ
,

408 
NGX_HTTP_LOC_CONF_OFFSET
,

409 
off£tof
(
ngx_hâp_gΩc_loc_c⁄f_t
, 
s¶_˚πifiˇã_key
),

410 
NULL
 },

412 { 
ngx_°rög
("grpc_ssl_password_file"),

413 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

414 
ngx_hâp_gΩc_s¶_∑ssw‹d_fûe
,

415 
NGX_HTTP_LOC_CONF_OFFSET
,

417 
NULL
 },

421 
ngx_nuŒ_comm™d


425 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gΩc_moduÀ_˘x
 = {

426 
ngx_hâp_gΩc_add_v¨übÀs
,

427 
NULL
,

429 
NULL
,

430 
NULL
,

432 
NULL
,

433 
NULL
,

435 
ngx_hâp_gΩc_¸óã_loc_c⁄f
,

436 
ngx_hâp_gΩc_mîge_loc_c⁄f


440 
ngx_moduÀ_t
 
	gngx_hâp_gΩc_moduÀ
 = {

441 
NGX_MODULE_V1
,

442 &
ngx_hâp_gΩc_moduÀ_˘x
,

443 
ngx_hâp_gΩc_comm™ds
,

444 
NGX_HTTP_MODULE
,

445 
NULL
,

446 
NULL
,

447 
NULL
,

448 
NULL
,

449 
NULL
,

450 
NULL
,

451 
NULL
,

452 
NGX_MODULE_V1_PADDING


456 
u_ch¨
 
	gngx_hâp_gΩc_c⁄√˘i⁄_°¨t
[] =

468 
ngx_keyvÆ_t
 
	gngx_hâp_gΩc_hódîs
[] = {

469 { 
ngx_°rög
("Content-Length"),Çgx_string("$content_length") },

470 { 
ngx_°rög
("TE"),Çgx_string("$grpc_internal_trailers") },

471 { 
ngx_°rög
("Host"),Çgx_string("") },

472 { 
ngx_°rög
("Connection"),Çgx_string("") },

473 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("") },

474 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

475 { 
ngx_°rög
("Expect"),Çgx_string("") },

476 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

477 { 
ngx_nuŒ_°rög
,Çgx_null_string }

481 
ngx_°r_t
 
	gngx_hâp_gΩc_hide_hódîs
[] = {

482 
ngx_°rög
("Date"),

483 
ngx_°rög
("Server"),

484 
ngx_°rög
("X-Accel-Expires"),

485 
ngx_°rög
("X-Accel-Redirect"),

486 
ngx_°rög
("X-Accel-Limit-Rate"),

487 
ngx_°rög
("X-Accel-Buffering"),

488 
ngx_°rög
("X-Accel-Charset"),

489 
ngx_nuŒ_°rög


493 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_gΩc_v¨s
[] = {

495 { 
ngx_°rög
("gΩc_öã∫Æ_åaûîs"), 
NULL
,

496 
ngx_hâp_gΩc_öã∫Æ_åaûîs_v¨übÀ
, 0,

497 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

499 
ngx_hâp_nuŒ_v¨übÀ


503 
ngx_öt_t


504 
	$ngx_hâp_gΩc_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

506 
ngx_öt_t
 
rc
;

507 
ngx_hâp_up°ªam_t
 *
u
;

508 
ngx_hâp_gΩc_˘x_t
 *
˘x
;

509 
ngx_hâp_gΩc_loc_c⁄f_t
 *
glcf
;

511 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

512  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

515 
glcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gΩc_moduÀ
);

517 
u
 = 
r
->
up°ªam
;

519 #i‡(
NGX_HTTP_SSL
)

520 
u
->
s¶
 = (
glcf
->
up°ªam
.s¶ !
NULL
);

522 i‡(
u
->
s¶
) {

523 
	`ngx_°r_£t
(&
u
->
schema
, "grpcs://");

526 
	`ngx_°r_£t
(&
u
->
schema
, "grpc://");

529 
	`ngx_°r_£t
(&
u
->
schema
, "grpc://");

532 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gΩc_moduÀ
;

534 
u
->
c⁄f
 = &
glcf
->
up°ªam
;

536 
u
->
¸óã_ªque°
 = 
ngx_hâp_gΩc_¸óã_ªque°
;

537 
u
->
ªöô_ªque°
 = 
ngx_hâp_gΩc_ªöô_ªque°
;

538 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_gΩc_¥o˚ss_hódî
;

539 
u
->
ab‹t_ªque°
 = 
ngx_hâp_gΩc_ab‹t_ªque°
;

540 
u
->
föÆize_ªque°
 = 
ngx_hâp_gΩc_föÆize_ªque°
;

542 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gΩc_˘x_t
));

543 i‡(
˘x
 =
NULL
) {

544  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

547 
˘x
->
ªque°
 = 
r
;

549 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gΩc_moduÀ
);

551 
u
->
öput_fûãr_öô
 = 
ngx_hâp_gΩc_fûãr_öô
;

552 
u
->
öput_fûãr
 = 
ngx_hâp_gΩc_fûãr
;

553 
u
->
öput_fûãr_˘x
 = 
˘x
;

555 
r
->
ªque°_body_no_buf„rög
 = 1;

557 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

559 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

560  
rc
;

563  
NGX_DONE
;

564 
	}
}

567 
ngx_öt_t


568 
	$ngx_hâp_gΩc_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

570 
u_ch¨
 *
p
, *
tmp
, *
key_tmp
, *
vÆ_tmp
, *
hódîs_‰ame
;

571 
size_t
 
Àn
, 
tmp_Àn
, 
key_Àn
, 
vÆ_Àn
, 
uri_Àn
;

572 
uöçå_t
 
esˇ≥
;

573 
ngx_buf_t
 *
b
;

574 
ngx_uöt_t
 
i
, 
√xt
;

575 
ngx_chaö_t
 *
˛
, *
body
;

576 
ngx_li°_∑π_t
 *
∑π
;

577 
ngx_èbÀ_ñt_t
 *
hódî
;

578 
ngx_hâp_up°ªam_t
 *
u
;

579 
ngx_hâp_gΩc_‰ame_t
 *
f
;

580 
ngx_hâp_s¸ùt_code_±
 
code
;

581 
ngx_hâp_gΩc_loc_c⁄f_t
 *
glcf
;

582 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

583 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

585 
u
 = 
r
->
up°ªam
;

587 
glcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gΩc_moduÀ
);

589 
Àn
 = (
ngx_hâp_gΩc_c⁄√˘i⁄_°¨t
) - 1

590 + (
ngx_hâp_gΩc_‰ame_t
);

594 i‡(
r
->
mëhod
 =
NGX_HTTP_GET
 ||Ñ->mëhod =
NGX_HTTP_POST
) {

595 
Àn
 += 1;

596 
tmp_Àn
 = 0;

599 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
r
->
mëhod_«me
.len;

600 
tmp_Àn
 = 
r
->
mëhod_«me
.
Àn
;

605 
Àn
 += 1;

609 i‡(
r
->
vÆid_u≈¨£d_uri
) {

610 
esˇ≥
 = 0;

611 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

614 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
,

615 
NGX_ESCAPE_URI
);

616 
uri_Àn
 = 
r
->
uri
.
Àn
 + 
esˇ≥
 + ("?"Ë- 1 +Ñ->
¨gs
.len;

619 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
uri_Àn
;

621 i‡(
tmp_Àn
 < 
uri_Àn
) {

622 
tmp_Àn
 = 
uri_Àn
;

627 i‡(!
glcf
->
ho°_£t
) {

628 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
glcf
->
ho°
.len;

630 i‡(
tmp_Àn
 < 
glcf
->
ho°
.
Àn
) {

631 
tmp_Àn
 = 
glcf
->
ho°
.
Àn
;

637 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
glcf
->
hódîs
.
Êushes
);

638 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

640 
À
.
ù
 = 
glcf
->
hódîs
.
Àngths
->
ñts
;

641 
À
.
ªque°
 = 
r
;

642 
À
.
Êushed
 = 1;

644 *(
uöçå_t
 *Ë
À
.
ù
) {

646 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

647 
key_Àn
 = 
	`lcode
(&
À
);

649 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

650 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

652 
À
.
ù
 +(
uöçå_t
);

654 i‡(
vÆ_Àn
 == 0) {

658 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
key_Àn


659 + 
NGX_HTTP_V2_INT_OCTETS
 + 
vÆ_Àn
;

661 i‡(
tmp_Àn
 < 
key_Àn
) {

662 
tmp_Àn
 = 
key_Àn
;

665 i‡(
tmp_Àn
 < 
vÆ_Àn
) {

666 
tmp_Àn
 = 
vÆ_Àn
;

670 i‡(
glcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

671 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

672 
hódî
 = 
∑π
->
ñts
;

674 
i
 = 0; ; i++) {

676 i‡(
i
 >
∑π
->
√…s
) {

677 i‡(
∑π
->
√xt
 =
NULL
) {

681 
∑π
 =Ö¨t->
√xt
;

682 
hódî
 = 
∑π
->
ñts
;

683 
i
 = 0;

686 i‡(
	`ngx_hash_föd
(&
glcf
->
hódîs
.
hash
, 
hódî
[
i
].hash,

687 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

692 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
hódî
[
i
].
key
.len

693 + 
NGX_HTTP_V2_INT_OCTETS
 + 
hódî
[
i
].
vÆue
.
Àn
;

695 i‡(
tmp_Àn
 < 
hódî
[
i
].
key
.
Àn
) {

696 
tmp_Àn
 = 
hódî
[
i
].
key
.
Àn
;

699 i‡(
tmp_Àn
 < 
hódî
[
i
].
vÆue
.
Àn
) {

700 
tmp_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

707 
Àn
 +(
ngx_hâp_gΩc_‰ame_t
)

708 * (
Àn
 / 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
);

711 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

712 i‡(
b
 =
NULL
) {

713  
NGX_ERROR
;

716 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

717 i‡(
˛
 =
NULL
) {

718  
NGX_ERROR
;

721 
˛
->
buf
 = 
b
;

722 
˛
->
√xt
 = 
NULL
;

724 
tmp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
tmp_Àn
 * 3);

725 i‡(
tmp
 =
NULL
) {

726  
NGX_ERROR
;

729 
key_tmp
 = 
tmp
 + 
tmp_Àn
;

730 
vÆ_tmp
 = 
tmp
 + 2 * 
tmp_Àn
;

734 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ngx_hâp_gΩc_c⁄√˘i⁄_°¨t
,

735 (
ngx_hâp_gΩc_c⁄√˘i⁄_°¨t
) - 1);

739 
hódîs_‰ame
 = 
b
->
œ°
;

741 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
b
->
œ°
;

742 
b
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

744 
f
->
Àngth_0
 = 0;

745 
f
->
Àngth_1
 = 0;

746 
f
->
Àngth_2
 = 0;

747 
f
->
ty≥
 = 
NGX_HTTP_V2_HEADERS_FRAME
;

748 
f
->
Êags
 = 0;

749 
f
->
°ªam_id_0
 = 0;

750 
f
->
°ªam_id_1
 = 0;

751 
f
->
°ªam_id_2
 = 0;

752 
f
->
°ªam_id_3
 = 1;

754 i‡(
r
->
mëhod
 =
NGX_HTTP_GET
) {

755 *
b
->
œ°
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_METHOD_GET_INDEX
);

757 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

760 } i‡(
r
->
mëhod
 =
NGX_HTTP_POST
) {

761 *
b
->
œ°
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_METHOD_POST_INDEX
);

763 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

767 *
b
->
œ°
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_METHOD_INDEX
);

768 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
r
->
mëhod_«me
.
d©a
,

769 
r
->
mëhod_«me
.
Àn
, 
tmp
);

771 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

772 "gΩ¯hódî: \":mëhod: %V\"", &
r
->
mëhod_«me
);

775 #i‡(
NGX_HTTP_SSL
)

776 i‡(
glcf
->
s¶
) {

777 *
b
->
œ°
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_SCHEME_HTTPS_INDEX
);

779 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

784 *
b
->
œ°
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_SCHEME_HTTP_INDEX
);

786 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

790 i‡(
r
->
vÆid_u≈¨£d_uri
) {

792 i‡(
r
->
u≈¨£d_uri
.
Àn
 =1 &&Ñ->u≈¨£d_uri.
d©a
[0] == '/') {

793 *
b
->
œ°
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_PATH_ROOT_INDEX
);

796 *
b
->
œ°
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_PATH_INDEX
);

797 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,

798 
r
->
u≈¨£d_uri
.
Àn
, 
tmp
);

801 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

802 "gΩ¯hódî: \":∑th: %V\"", &
r
->
u≈¨£d_uri
);

804 } i‡(
esˇ≥
 || 
r
->
¨gs
.
Àn
 > 0) {

805 
p
 = 
vÆ_tmp
;

807 i‡(
esˇ≥
) {

808 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
,

809 
NGX_ESCAPE_URI
);

812 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

815 i‡(
r
->
¨gs
.
Àn
 > 0) {

816 *
p
++ = '?';

817 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

820 *
b
->
œ°
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_PATH_INDEX
);

821 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
vÆ_tmp
, 
p
 - vÆ_tmp, 
tmp
);

823 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

824 "gΩ¯hódî: \":∑th: %*s\"", 
p
 - 
vÆ_tmp
, val_tmp);

827 *
b
->
œ°
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_PATH_INDEX
);

828 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
r
->
uri
.
d©a
,

829 
r
->
uri
.
Àn
, 
tmp
);

831 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

832 "gΩ¯hódî: \":∑th: %V\"", &
r
->
uri
);

835 i‡(!
glcf
->
ho°_£t
) {

836 *
b
->
œ°
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_AUTHORITY_INDEX
);

837 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
glcf
->
ho°
.
d©a
,

838 
glcf
->
ho°
.
Àn
, 
tmp
);

840 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

841 "gΩ¯hódî: \":auth‹ôy: %V\"", &
glcf
->
ho°
);

844 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

846 
e
.
ù
 = 
glcf
->
hódîs
.
vÆues
->
ñts
;

847 
e
.
ªque°
 = 
r
;

848 
e
.
Êushed
 = 1;

850 
À
.
ù
 = 
glcf
->
hódîs
.
Àngths
->
ñts
;

852 *(
uöçå_t
 *Ë
À
.
ù
) {

854 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

855 
key_Àn
 = 
	`lcode
(&
À
);

857 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

858 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

860 
À
.
ù
 +(
uöçå_t
);

862 i‡(
vÆ_Àn
 == 0) {

863 
e
.
skù
 = 1;

865 *(
uöçå_t
 *Ë
e
.
ù
) {

866 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

867 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

869 
e
.
ù
 +(
uöçå_t
);

871 
e
.
skù
 = 0;

876 *
b
->
œ°
++ = 0;

878 
e
.
pos
 = 
key_tmp
;

880 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

881 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

883 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_«me
(b->œ°, 
key_tmp
, 
key_Àn
, 
tmp
);

885 
e
.
pos
 = 
vÆ_tmp
;

887 *(
uöçå_t
 *Ë
e
.
ù
) {

888 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

889 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

891 
e
.
ù
 +(
uöçå_t
);

893 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
vÆ_tmp
, 
vÆ_Àn
, 
tmp
);

895 #i‡(
NGX_DEBUG
)

896 i‡(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
) {

897 
	`ngx_°æow
(
key_tmp
, key_tmp, 
key_Àn
);

899 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

901 
key_Àn
, 
key_tmp
, 
vÆ_Àn
, 
vÆ_tmp
);

906 i‡(
glcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

907 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

908 
hódî
 = 
∑π
->
ñts
;

910 
i
 = 0; ; i++) {

912 i‡(
i
 >
∑π
->
√…s
) {

913 i‡(
∑π
->
√xt
 =
NULL
) {

917 
∑π
 =Ö¨t->
√xt
;

918 
hódî
 = 
∑π
->
ñts
;

919 
i
 = 0;

922 i‡(
	`ngx_hash_föd
(&
glcf
->
hódîs
.
hash
, 
hódî
[
i
].hash,

923 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

928 *
b
->
œ°
++ = 0;

930 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_«me
(b->œ°, 
hódî
[
i
].
key
.
d©a
,

931 
hódî
[
i
].
key
.
Àn
, 
tmp
);

933 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_vÆue
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

934 
hódî
[
i
].
vÆue
.
Àn
, 
tmp
);

936 #i‡(
NGX_DEBUG
)

937 i‡(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
) {

938 
	`ngx_°æow
(
tmp
, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

940 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

942 
hódî
[
i
].
key
.
Àn
, 
tmp
, &hódî[i].
vÆue
);

950 
Àn
 = 
b
->
œ°
 - 
hódîs_‰ame
 - (
ngx_hâp_gΩc_‰ame_t
);

952 i‡(
Àn
 > 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
) {

953 
Àn
 = 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
;

954 
√xt
 = 1;

957 
√xt
 = 0;

960 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
hódîs_‰ame
;

962 
f
->
Àngth_0
 = (
u_ch¨
Ë((
Àn
 >> 16) & 0xff);

963 
f
->
Àngth_1
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

964 
f
->
Àngth_2
 = (
u_ch¨
Ë(
Àn
 & 0xff);

968 
p
 = 
hódîs_‰ame
;

970 
√xt
) {

971 
p
 +(
ngx_hâp_gΩc_‰ame_t
Ë+ 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
;

972 
Àn
 = 
b
->
œ°
 - 
p
;

974 
	`ngx_memmove
(
p
 + (
ngx_hâp_gΩc_‰ame_t
),Ö, 
Àn
);

975 
b
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

977 i‡(
Àn
 > 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
) {

978 
Àn
 = 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
;

979 
√xt
 = 1;

982 
√xt
 = 0;

985 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
p
;

987 
f
->
Àngth_0
 = (
u_ch¨
Ë((
Àn
 >> 16) & 0xff);

988 
f
->
Àngth_1
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

989 
f
->
Àngth_2
 = (
u_ch¨
Ë(
Àn
 & 0xff);

990 
f
->
ty≥
 = 
NGX_HTTP_V2_CONTINUATION_FRAME
;

991 
f
->
Êags
 = 0;

992 
f
->
°ªam_id_0
 = 0;

993 
f
->
°ªam_id_1
 = 0;

994 
f
->
°ªam_id_2
 = 0;

995 
f
->
°ªam_id_3
 = 1;

998 
f
->
Êags
 |
NGX_HTTP_V2_END_HEADERS_FLAG
;

1000 #i‡(
NGX_DEBUG
)

1001 i‡(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
) {

1002 
u_ch¨
 
buf
[512];

1003 
size_t
 
n
, 
m
;

1005 
n
 = 
	`ngx_mö
(
b
->
œ°
 - b->
pos
, 256);

1006 
m
 = 
	`ngx_hex_dump
(
buf
, 
b
->
pos
, 
n
) - buf;

1008 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1010 
m
, 
buf
, 
b
->
œ°
 - b->
pos
 > 256 ? "..." : "",

1011 
b
->
œ°
 - b->
pos
);

1015 i‡(
r
->
ªque°_body_no_buf„rög
) {

1017 
u
->
ªque°_bufs
 = 
˛
;

1021 
body
 = 
u
->
ªque°_bufs
;

1022 
u
->
ªque°_bufs
 = 
˛
;

1024 i‡(
body
 =
NULL
) {

1025 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
hódîs_‰ame
;

1026 
f
->
Êags
 |
NGX_HTTP_V2_END_STREAM_FLAG
;

1029 
body
) {

1030 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1031 i‡(
b
 =
NULL
) {

1032  
NGX_ERROR
;

1035 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1037 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1038 i‡(
˛
->
√xt
 =
NULL
) {

1039  
NGX_ERROR
;

1042 
˛
 = cl->
√xt
;

1043 
˛
->
buf
 = 
b
;

1045 
body
 = body->
√xt
;

1048 
b
->
œ°_buf
 = 1;

1051 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_hâp_gΩc_body_ouçut_fûãr
;

1052 
u
->
ouçut
.
fûãr_˘x
 = 
r
;

1054 
b
->
Êush
 = 1;

1055 
˛
->
√xt
 = 
NULL
;

1057  
NGX_OK
;

1058 
	}
}

1061 
ngx_öt_t


1062 
	$ngx_hâp_gΩc_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1064 
ngx_hâp_gΩc_˘x_t
 *
˘x
;

1066 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gΩc_moduÀ
);

1068 i‡(
˘x
 =
NULL
) {

1069  
NGX_OK
;

1072 
˘x
->
°©e
 = 0;

1073 
˘x
->
hódî_£¡
 = 0;

1074 
˘x
->
ouçut_˛o£d
 = 0;

1075 
˘x
->
∑rsög_hódîs
 = 0;

1076 
˘x
->
íd_°ªam
 = 0;

1077 
˘x
->
°©us
 = 0;

1078 
˘x
->
c⁄√˘i⁄
 = 
NULL
;

1080  
NGX_OK
;

1081 
	}
}

1084 
ngx_öt_t


1085 
	$ngx_hâp_gΩc_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
)

1087 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1089 
off_t
 
fûe_pos
;

1090 
u_ch¨
 *
p
, *
pos
, *
°¨t
;

1091 
size_t
 
Àn
, 
limô
;

1092 
ngx_buf_t
 *
b
;

1093 
ngx_öt_t
 
rc
;

1094 
ngx_uöt_t
 
√xt
, 
œ°
;

1095 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

1096 
ngx_hâp_gΩc_˘x_t
 *
˘x
;

1097 
ngx_hâp_gΩc_‰ame_t
 *
f
;

1099 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1102 
˘x
 = 
	`ngx_hâp_gΩc_gë_˘x
(
r
);

1104 i‡(
˘x
 =
NULL
) {

1105  
NGX_ERROR
;

1108 i‡(
ö
) {

1109 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

1110  
NGX_ERROR
;

1114 
out
 = 
NULL
;

1115 
Œ
 = &
out
;

1117 i‡(!
˘x
->
hódî_£¡
) {

1120 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1123 
˘x
->
hódî_£¡
 = 1;

1125 i‡(
˘x
->
id
 != 1) {

1131 
b
 = 
˘x
->
ö
->
buf
;

1132 
b
->
pos
 +(
ngx_hâp_gΩc_c⁄√˘i⁄_°¨t
) - 1;

1134 
p
 = 
b
->
pos
;

1136 
p
 < 
b
->
œ°
) {

1137 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
p
;

1138 
p
 +(
ngx_hâp_gΩc_‰ame_t
);

1140 
f
->
°ªam_id_0
 = (
u_ch¨
Ë((
˘x
->
id
 >> 24) & 0xff);

1141 
f
->
°ªam_id_1
 = (
u_ch¨
Ë((
˘x
->
id
 >> 16) & 0xff);

1142 
f
->
°ªam_id_2
 = (
u_ch¨
Ë((
˘x
->
id
 >> 8) & 0xff);

1143 
f
->
°ªam_id_3
 = (
u_ch¨
Ë(
˘x
->
id
 & 0xff);

1145 
p
 +(
f
->
Àngth_0
 << 16Ë+ (f->
Àngth_1
 << 8Ë+ f->
Àngth_2
;

1149 i‡(
˘x
->
ö
->
buf
->
œ°_buf
) {

1150 
˘x
->
ouçut_˛o£d
 = 1;

1153 *
Œ
 = 
˘x
->
ö
;

1154 
Œ
 = &
˘x
->
ö
->
√xt
;

1156 
˘x
->
ö
 = ctx->ö->
√xt
;

1159 i‡(
˘x
->
out
) {

1162 *
Œ
 = 
˘x
->
out
;

1164 
˛
 = 
˘x
->
out
, 
Œ
 = &˛->
√xt
; cl; cl = cl->next) {

1165 
Œ
 = &
˛
->
√xt
;

1168 
˘x
->
out
 = 
NULL
;

1171 
f
 = 
NULL
;

1172 
œ°
 = 0;

1174 
limô
 = 
	`ngx_max
(0, 
˘x
->
£nd_wödow
);

1176 i‡(
limô
 > 
˘x
->
c⁄√˘i⁄
->
£nd_wödow
) {

1177 
limô
 = 
˘x
->
c⁄√˘i⁄
->
£nd_wödow
;

1180 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1182 
limô
, 
˘x
->
£nd_wödow
, ctx->
c⁄√˘i⁄
->send_window);

1184 #i‡(
NGX_SUPPRESS_WARN
)

1185 
fûe_pos
 = 0;

1186 
pos
 = 
NULL
;

1187 
˛
 = 
NULL
;

1190 
ö
 = 
˘x
->in;

1192 
ö
 && 
limô
 > 0) {

1194 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1197 
ö
->
buf
->
œ°_buf
,

1198 
ö
->
buf
->
ö_fûe
,

1199 
ö
->
buf
->
°¨t
, in->buf->
pos
,

1200 
ö
->
buf
->
œ°
 - in->buf->
pos
,

1201 
ö
->
buf
->
fûe_pos
,

1202 
ö
->
buf
->
fûe_œ°
 - in->buf->
fûe_pos
);

1204 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1205 
√xt
;

1208 i‡(
ö
->
buf
->
ö_fûe
) {

1209 
fûe_pos
 = 
ö
->
buf
->file_pos;

1212 
pos
 = 
ö
->
buf
->pos;

1215 
√xt
 = 0;

1219 
˛
 = 
	`ngx_hâp_gΩc_gë_buf
(
r
, 
˘x
);

1220 i‡(
˛
 =
NULL
) {

1221  
NGX_ERROR
;

1224 
b
 = 
˛
->
buf
;

1226 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
b
->
œ°
;

1227 
b
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

1229 *
Œ
 = 
˛
;

1230 
Œ
 = &
˛
->
√xt
;

1232 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1233 i‡(
˛
 =
NULL
) {

1234  
NGX_ERROR
;

1237 
b
 = 
˛
->
buf
;

1238 
°¨t
 = 
b
->start;

1240 
	`ngx_mem˝y
(
b
, 
ö
->
buf
, (
ngx_buf_t
));

1247 
b
->
°¨t
 = start;

1249 i‡(
ö
->
buf
->
ö_fûe
) {

1250 
b
->
fûe_pos
 = file_pos;

1251 
fûe_pos
 +
	`ngx_mö
(
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
, 
limô
);

1253 i‡(
fûe_pos
 >
ö
->
buf
->
fûe_œ°
) {

1254 
fûe_pos
 = 
ö
->
buf
->
fûe_œ°
;

1255 
√xt
 = 1;

1258 
b
->
fûe_œ°
 = 
fûe_pos
;

1259 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1262 
b
->
pos
 =Öos;

1263 
pos
 +
	`ngx_mö
(
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
, 
limô
);

1265 i‡(
pos
 >
ö
->
buf
->
œ°
) {

1266 
pos
 = 
ö
->
buf
->
œ°
;

1267 
√xt
 = 1;

1270 
b
->
œ°
 = 
pos
;

1271 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1274 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gΩc_body_ouçut_fûãr
;

1275 
b
->
shadow
 = 
ö
->
buf
;

1276 
b
->
œ°_shadow
 = 
√xt
;

1278 
b
->
œ°_buf
 = 0;

1279 
b
->
œ°_ö_chaö
 = 0;

1281 *
Œ
 = 
˛
;

1282 
Œ
 = &
˛
->
√xt
;

1284 
f
->
Àngth_0
 = (
u_ch¨
Ë((
Àn
 >> 16) & 0xff);

1285 
f
->
Àngth_1
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1286 
f
->
Àngth_2
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1287 
f
->
ty≥
 = 
NGX_HTTP_V2_DATA_FRAME
;

1288 
f
->
Êags
 = 0;

1289 
f
->
°ªam_id_0
 = (
u_ch¨
Ë((
˘x
->
id
 >> 24) & 0xff);

1290 
f
->
°ªam_id_1
 = (
u_ch¨
Ë((
˘x
->
id
 >> 16) & 0xff);

1291 
f
->
°ªam_id_2
 = (
u_ch¨
Ë((
˘x
->
id
 >> 8) & 0xff);

1292 
f
->
°ªam_id_3
 = (
u_ch¨
Ë(
˘x
->
id
 & 0xff);

1294 
limô
 -
Àn
;

1295 
˘x
->
£nd_wödow
 -
Àn
;

1296 
˘x
->
c⁄√˘i⁄
->
£nd_wödow
 -
Àn
;

1298 } !
√xt
 && 
limô
 > 0);

1300 i‡(!
√xt
) {

1306 i‡(
ö
->
buf
->
ö_fûe
) {

1307 
ö
->
buf
->
fûe_pos
 = file_pos;

1310 
ö
->
buf
->
pos
 =Öos;

1316 
√xt
:

1318 i‡(
ö
->
buf
->
œ°_buf
) {

1319 
œ°
 = 1;

1322 
ö
 = in->
√xt
;

1325 
˘x
->
ö
 = in;

1327 i‡(
œ°
) {

1329 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1332 
˘x
->
ouçut_˛o£d
 = 1;

1334 i‡(
f
) {

1335 
f
->
Êags
 |
NGX_HTTP_V2_END_STREAM_FLAG
;

1338 
˛
 = 
	`ngx_hâp_gΩc_gë_buf
(
r
, 
˘x
);

1339 i‡(
˛
 =
NULL
) {

1340  
NGX_ERROR
;

1343 
b
 = 
˛
->
buf
;

1345 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
b
->
œ°
;

1346 
b
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

1348 
f
->
Àngth_0
 = 0;

1349 
f
->
Àngth_1
 = 0;

1350 
f
->
Àngth_2
 = 0;

1351 
f
->
ty≥
 = 
NGX_HTTP_V2_DATA_FRAME
;

1352 
f
->
Êags
 = 
NGX_HTTP_V2_END_STREAM_FLAG
;

1353 
f
->
°ªam_id_0
 = (
u_ch¨
Ë((
˘x
->
id
 >> 24) & 0xff);

1354 
f
->
°ªam_id_1
 = (
u_ch¨
Ë((
˘x
->
id
 >> 16) & 0xff);

1355 
f
->
°ªam_id_2
 = (
u_ch¨
Ë((
˘x
->
id
 >> 8) & 0xff);

1356 
f
->
°ªam_id_3
 = (
u_ch¨
Ë(
˘x
->
id
 & 0xff);

1358 *
Œ
 = 
˛
;

1359 
Œ
 = &
˛
->
√xt
;

1362 
˛
->
buf
->
œ°_buf
 = 1;

1365 *
Œ
 = 
NULL
;

1367 #i‡(
NGX_DEBUG
)

1369 
˛
 = 
out
; cl; c»˛->
√xt
) {

1370 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1373 
˛
->
buf
->
œ°_buf
,

1374 
˛
->
buf
->
ö_fûe
,

1375 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1376 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1377 
˛
->
buf
->
fûe_pos
,

1378 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1381 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1383 
limô
, 
˘x
->
£nd_wödow
, ctx->
c⁄√˘i⁄
->send_window);

1387 
rc
 = 
	`ngx_chaö_wrôî
(&
r
->
up°ªam
->
wrôî
, 
out
);

1389 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

1390 (
ngx_buf_èg_t
Ë&
ngx_hâp_gΩc_body_ouçut_fûãr
);

1392 
˛
 = 
˘x
->
‰ì
; cl; c»˛->
√xt
) {

1396 i‡(
˛
->
buf
->
shadow
) {

1397 i‡(
˛
->
buf
->
œ°_shadow
) {

1398 
b
 = 
˛
->
buf
->
shadow
;

1399 
b
->
pos
 = b->
œ°
;

1402 
˛
->
buf
->
shadow
 = 
NULL
;

1406 i‡(
rc
 =
NGX_OK
 && 
˘x
->
ö
) {

1407 
rc
 = 
NGX_AGAIN
;

1410  
rc
;

1411 
	}
}

1414 
ngx_öt_t


1415 
	$ngx_hâp_gΩc_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1417 
ngx_°r_t
 *
°©us_löe
;

1418 
ngx_öt_t
 
rc
, 
°©us
;

1419 
ngx_buf_t
 *
b
;

1420 
ngx_èbÀ_ñt_t
 *
h
;

1421 
ngx_hâp_up°ªam_t
 *
u
;

1422 
ngx_hâp_gΩc_˘x_t
 *
˘x
;

1423 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1424 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1426 
u
 = 
r
->
up°ªam
;

1427 
b
 = &
u
->
buf„r
;

1429 #i‡(
NGX_DEBUG
)

1430 i‡(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
) {

1431 
u_ch¨
 
buf
[512];

1432 
size_t
 
n
, 
m
;

1434 
n
 = 
	`ngx_mö
(
b
->
œ°
 - b->
pos
, 256);

1435 
m
 = 
	`ngx_hex_dump
(
buf
, 
b
->
pos
, 
n
) - buf;

1437 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1439 
m
, 
buf
, 
b
->
œ°
 - b->
pos
 > 256 ? "..." : "",

1440 
b
->
œ°
 - b->
pos
);

1444 
˘x
 = 
	`ngx_hâp_gΩc_gë_˘x
(
r
);

1446 i‡(
˘x
 =
NULL
) {

1447  
NGX_ERROR
;

1450 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1454 i‡(
˘x
->
°©e
 < 
ngx_hâp_gΩc_°_∑ylﬂd
) {

1456 
rc
 = 
	`ngx_hâp_gΩc_∑r£_‰ame
(
r
, 
˘x
, 
b
);

1458 i‡(
rc
 =
NGX_AGAIN
) {

1466 i‡(!
˘x
->
∑rsög_hódîs
) {

1467 
b
->
pos
 = b->
°¨t
;

1468 
b
->
œ°
 = b->
pos
;

1471  
NGX_AGAIN
;

1474 i‡(
rc
 =
NGX_ERROR
) {

1475  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1487 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_DATA_FRAME


1488 || (
˘x
->
ty≥
 =
NGX_HTTP_V2_CONTINUATION_FRAME


1489 && !
˘x
->
∑rsög_hódîs
)

1490 || (
˘x
->
ty≥
 !
NGX_HTTP_V2_CONTINUATION_FRAME


1491 && 
˘x
->
∑rsög_hódîs
))

1493 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1495 
˘x
->
ty≥
);

1496  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1499 i‡(
˘x
->
°ªam_id
 && ctx->°ªam_id !˘x->
id
) {

1500 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1502 
˘x
->
°ªam_id
);

1503  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1509 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_RST_STREAM_FRAME
) {

1511 
rc
 = 
	`ngx_hâp_gΩc_∑r£_r°_°ªam
(
r
, 
˘x
, 
b
);

1513 i‡(
rc
 =
NGX_AGAIN
) {

1514  
NGX_AGAIN
;

1517 i‡(
rc
 =
NGX_ERROR
) {

1518  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1521 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1523 
˘x
->
îr‹
);

1525  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1528 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_GOAWAY_FRAME
) {

1530 
rc
 = 
	`ngx_hâp_gΩc_∑r£_gﬂway
(
r
, 
˘x
, 
b
);

1532 i‡(
rc
 =
NGX_AGAIN
) {

1533  
NGX_AGAIN
;

1536 i‡(
rc
 =
NGX_ERROR
) {

1537  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1549 i‡(
˘x
->
°ªam_id
 < ctx->
id
) {

1553 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1555 
˘x
->
îr‹
);

1557  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1563 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_WINDOW_UPDATE_FRAME
) {

1565 
rc
 = 
	`ngx_hâp_gΩc_∑r£_wödow_upd©e
(
r
, 
˘x
, 
b
);

1567 i‡(
rc
 =
NGX_AGAIN
) {

1568  
NGX_AGAIN
;

1571 i‡(
rc
 =
NGX_ERROR
) {

1572  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1575 i‡(
˘x
->
ö
) {

1576 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
, &
ngx_po°ed_evíts
);

1582 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_SETTINGS_FRAME
) {

1584 
rc
 = 
	`ngx_hâp_gΩc_∑r£_£âögs
(
r
, 
˘x
, 
b
);

1586 i‡(
rc
 =
NGX_AGAIN
) {

1587  
NGX_AGAIN
;

1590 i‡(
rc
 =
NGX_ERROR
) {

1591  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1594 i‡(
˘x
->
ö
) {

1595 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
, &
ngx_po°ed_evíts
);

1601 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_PING_FRAME
) {

1603 
rc
 = 
	`ngx_hâp_gΩc_∑r£_pög
(
r
, 
˘x
, 
b
);

1605 i‡(
rc
 =
NGX_AGAIN
) {

1606  
NGX_AGAIN
;

1609 i‡(
rc
 =
NGX_ERROR
) {

1610  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1613 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
, &
ngx_po°ed_evíts
);

1617 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_PUSH_PROMISE_FRAME
) {

1618 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1620  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1623 i‡(
˘x
->
ty≥
 !
NGX_HTTP_V2_HEADERS_FRAME


1624 && 
˘x
->
ty≥
 !
NGX_HTTP_V2_CONTINUATION_FRAME
)

1628 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

1629 
˘x
->
ª°
 -
b
->
œ°
 - b->
pos
;

1630 
b
->
pos
 = b->
œ°
;

1631  
NGX_AGAIN
;

1634 
b
->
pos
 +
˘x
->
ª°
;

1635 
˘x
->
ª°
 = 0;

1636 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

1645 
rc
 = 
	`ngx_hâp_gΩc_∑r£_hódî
(
r
, 
˘x
, 
b
);

1647 i‡(
rc
 =
NGX_AGAIN
) {

1651 i‡(
rc
 =
NGX_OK
) {

1655 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1657 &
˘x
->
«me
, &˘x->
vÆue
);

1659 i‡(
˘x
->
«me
.
Àn
 && ctx->«me.
d©a
[0] == ':') {

1661 i‡(
˘x
->
«me
.
Àn
 != (":status") - 1

1662 || 
	`ngx_°∫cmp
(
˘x
->
«me
.
d©a
, ":status",

1666 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1668 &
˘x
->
«me
, &˘x->
vÆue
);

1669  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1672 i‡(
˘x
->
°©us
) {

1673 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1675  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1678 
°©us_löe
 = &
˘x
->
vÆue
;

1680 i‡(
°©us_löe
->
Àn
 != 3) {

1681 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1683 
°©us_löe
);

1684  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1687 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1689 i‡(
°©us
 =
NGX_ERROR
) {

1690 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1692 
°©us_löe
);

1693  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1696 i‡(
°©us
 < 
NGX_HTTP_OK
) {

1697 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1699 
°©us_löe
);

1700  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1703 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1705 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1706 
u
->
°©e
->
°©us
 = status;

1709 
˘x
->
°©us
 = 1;

1713 } i‡(!
˘x
->
°©us
) {

1714 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1716  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1719 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1720 i‡(
h
 =
NULL
) {

1721  
NGX_ERROR
;

1724 
h
->
key
 = 
˘x
->
«me
;

1725 
h
->
vÆue
 = 
˘x
->value;

1726 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

1727 
h
->
hash
 = 
	`ngx_hash_key
(h->
key
.
d©a
, h->key.
Àn
);

1729 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1730 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1732 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1733  
NGX_ERROR
;

1739 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1743 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1746 i‡(
˘x
->
íd_°ªam
) {

1747 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

1749 i‡(
˘x
->
ö
 =
NULL


1750 && 
˘x
->
out
 =
NULL


1751 && 
˘x
->
ouçut_˛o£d


1752 && 
b
->
œ°
 =b->
pos
)

1754 
u
->
kì∑live
 = 1;

1758  
NGX_OK
;

1763 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1766  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1771 i‡(
˘x
->
ª°
 == 0) {

1772 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

1776  
NGX_AGAIN
;

1778 
	}
}

1781 
ngx_öt_t


1782 
	$ngx_hâp_gΩc_fûãr_öô
(*
d©a
)

1784 
ngx_hâp_gΩc_˘x_t
 *
˘x
 = 
d©a
;

1786 
ngx_hâp_ªque°_t
 *
r
;

1787 
ngx_hâp_up°ªam_t
 *
u
;

1789 
r
 = 
˘x
->
ªque°
;

1790 
u
 = 
r
->
up°ªam
;

1792 
u
->
Àngth
 = 1;

1794 i‡(
˘x
->
íd_°ªam
) {

1795 
u
->
Àngth
 = 0;

1798  
NGX_OK
;

1799 
	}
}

1802 
ngx_öt_t


1803 
	$ngx_hâp_gΩc_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

1805 
ngx_hâp_gΩc_˘x_t
 *
˘x
 = 
d©a
;

1807 
ngx_öt_t
 
rc
;

1808 
ngx_buf_t
 *
b
, *
buf
;

1809 
ngx_chaö_t
 *
˛
, **
Œ
;

1810 
ngx_èbÀ_ñt_t
 *
h
;

1811 
ngx_hâp_ªque°_t
 *
r
;

1812 
ngx_hâp_up°ªam_t
 *
u
;

1814 
r
 = 
˘x
->
ªque°
;

1815 
u
 = 
r
->
up°ªam
;

1816 
b
 = &
u
->
buf„r
;

1818 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1819 "gΩ¯fûã∏byãs:%z", 
byãs
);

1821 
b
->
pos
 = b->
œ°
;

1822 
b
->
œ°
 +
byãs
;

1824 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

1825 
Œ
 = &
˛
->
√xt
;

1830 i‡(
˘x
->
°©e
 < 
ngx_hâp_gΩc_°_∑ylﬂd
) {

1832 
rc
 = 
	`ngx_hâp_gΩc_∑r£_‰ame
(
r
, 
˘x
, 
b
);

1834 i‡(
rc
 =
NGX_AGAIN
) {

1835  
NGX_AGAIN
;

1838 i‡(
rc
 =
NGX_ERROR
) {

1839  
NGX_ERROR
;

1842 i‡((
˘x
->
ty≥
 =
NGX_HTTP_V2_CONTINUATION_FRAME


1843 && !
˘x
->
∑rsög_hódîs
)

1844 || (
˘x
->
ty≥
 !
NGX_HTTP_V2_CONTINUATION_FRAME


1845 && 
˘x
->
∑rsög_hódîs
))

1847 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1849 
˘x
->
ty≥
);

1850  
NGX_ERROR
;

1853 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_DATA_FRAME
) {

1855 i‡(
˘x
->
°ªam_id
 !˘x->
id
) {

1856 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1859 
˘x
->
°ªam_id
);

1860  
NGX_ERROR
;

1863 i‡(
˘x
->
ª°
 > ctx->
ªcv_wödow
) {

1864 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1867 
˘x
->
ª°
, ctx->
ªcv_wödow
);

1868  
NGX_ERROR
;

1871 i‡(
˘x
->
ª°
 > ctx->
c⁄√˘i⁄
->
ªcv_wödow
) {

1872 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1875 
˘x
->
ª°
, ctx->
c⁄√˘i⁄
->
ªcv_wödow
);

1876  
NGX_ERROR
;

1879 
˘x
->
ªcv_wödow
 -˘x->
ª°
;

1880 
˘x
->
c⁄√˘i⁄
->
ªcv_wödow
 -˘x->
ª°
;

1882 i‡(
˘x
->
c⁄√˘i⁄
->
ªcv_wödow
 < 
NGX_HTTP_V2_MAX_WINDOW
 / 4

1883 || 
˘x
->
ªcv_wödow
 < 
NGX_HTTP_V2_MAX_WINDOW
 / 4)

1885 i‡(
	`ngx_hâp_gΩc_£nd_wödow_upd©e
(
r
, 
˘x
Ë!
NGX_OK
) {

1886  
NGX_ERROR
;

1889 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
,

1890 &
ngx_po°ed_evíts
);

1894 i‡(
˘x
->
°ªam_id
 && ctx->°ªam_id !˘x->
id
) {

1895 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1897 
˘x
->
°ªam_id
);

1898  
NGX_ERROR
;

1901 
˘x
->
∑ddög
 = 0;

1904 i‡(
˘x
->
°©e
 =
ngx_hâp_gΩc_°_∑ddög
) {

1906 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

1907 
˘x
->
ª°
 -
b
->
œ°
 - b->
pos
;

1908 
b
->
pos
 = b->
œ°
;

1909  
NGX_AGAIN
;

1912 
b
->
pos
 +
˘x
->
ª°
;

1913 
˘x
->
ª°
 = 0;

1914 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

1916 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_END_STREAM_FLAG
) {

1917 
u
->
Àngth
 = 0;

1919 i‡(
˘x
->
ö
 =
NULL


1920 && 
˘x
->
out
 =
NULL


1921 && 
˘x
->
ouçut_˛o£d


1922 && 
b
->
œ°
 =b->
pos
)

1924 
u
->
kì∑live
 = 1;

1935 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_RST_STREAM_FRAME
) {

1937 
rc
 = 
	`ngx_hâp_gΩc_∑r£_r°_°ªam
(
r
, 
˘x
, 
b
);

1939 i‡(
rc
 =
NGX_AGAIN
) {

1940  
NGX_AGAIN
;

1943 i‡(
rc
 =
NGX_ERROR
) {

1944  
NGX_ERROR
;

1947 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1949 
˘x
->
îr‹
);

1951  
NGX_ERROR
;

1954 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_GOAWAY_FRAME
) {

1956 
rc
 = 
	`ngx_hâp_gΩc_∑r£_gﬂway
(
r
, 
˘x
, 
b
);

1958 i‡(
rc
 =
NGX_AGAIN
) {

1959  
NGX_AGAIN
;

1962 i‡(
rc
 =
NGX_ERROR
) {

1963  
NGX_ERROR
;

1975 i‡(
˘x
->
°ªam_id
 < ctx->
id
) {

1979 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1981 
˘x
->
îr‹
);

1983  
NGX_ERROR
;

1989 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_WINDOW_UPDATE_FRAME
) {

1991 
rc
 = 
	`ngx_hâp_gΩc_∑r£_wödow_upd©e
(
r
, 
˘x
, 
b
);

1993 i‡(
rc
 =
NGX_AGAIN
) {

1994  
NGX_AGAIN
;

1997 i‡(
rc
 =
NGX_ERROR
) {

1998  
NGX_ERROR
;

2001 i‡(
˘x
->
ö
) {

2002 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
, &
ngx_po°ed_evíts
);

2008 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_SETTINGS_FRAME
) {

2010 
rc
 = 
	`ngx_hâp_gΩc_∑r£_£âögs
(
r
, 
˘x
, 
b
);

2012 i‡(
rc
 =
NGX_AGAIN
) {

2013  
NGX_AGAIN
;

2016 i‡(
rc
 =
NGX_ERROR
) {

2017  
NGX_ERROR
;

2020 i‡(
˘x
->
ö
) {

2021 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
, &
ngx_po°ed_evíts
);

2027 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_PING_FRAME
) {

2029 
rc
 = 
	`ngx_hâp_gΩc_∑r£_pög
(
r
, 
˘x
, 
b
);

2031 i‡(
rc
 =
NGX_AGAIN
) {

2032  
NGX_AGAIN
;

2035 i‡(
rc
 =
NGX_ERROR
) {

2036  
NGX_ERROR
;

2039 
	`ngx_po°_evít
(
u
->
≥î
.
c⁄√˘i⁄
->
wrôe
, &
ngx_po°ed_evíts
);

2043 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_PUSH_PROMISE_FRAME
) {

2044 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2046  
NGX_ERROR
;

2049 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_HEADERS_FRAME


2050 || 
˘x
->
ty≥
 =
NGX_HTTP_V2_CONTINUATION_FRAME
)

2054 
rc
 = 
	`ngx_hâp_gΩc_∑r£_hódî
(
r
, 
˘x
, 
b
);

2056 i‡(
rc
 =
NGX_AGAIN
) {

2060 i‡(
rc
 =
NGX_OK
) {

2064 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2066 &
˘x
->
«me
, &˘x->
vÆue
);

2068 i‡(
˘x
->
«me
.
Àn
 && ctx->«me.
d©a
[0] == ':') {

2069 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2072 &
˘x
->
«me
, &˘x->
vÆue
);

2073  
NGX_ERROR
;

2076 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
åaûîs
);

2077 i‡(
h
 =
NULL
) {

2078  
NGX_ERROR
;

2081 
h
->
key
 = 
˘x
->
«me
;

2082 
h
->
vÆue
 = 
˘x
->value;

2083 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

2084 
h
->
hash
 = 
	`ngx_hash_key
(h->
key
.
d©a
, h->key.
Àn
);

2089 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

2093 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2096 i‡(
˘x
->
íd_°ªam
) {

2097 
u
->
Àngth
 = 0;

2099 i‡(
˘x
->
ö
 =
NULL


2100 && 
˘x
->
out
 =
NULL


2101 && 
˘x
->
ouçut_˛o£d


2102 && 
b
->
œ°
 =b->
pos
)

2104 
u
->
kì∑live
 = 1;

2107  
NGX_OK
;

2110 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2113  
NGX_ERROR
;

2118 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2121  
NGX_ERROR
;

2126 i‡(
˘x
->
ª°
 == 0) {

2127 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

2131  
NGX_AGAIN
;

2134 i‡(
˘x
->
ty≥
 !
NGX_HTTP_V2_DATA_FRAME
) {

2138 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

2139 
˘x
->
ª°
 -
b
->
œ°
 - b->
pos
;

2140 
b
->
pos
 = b->
œ°
;

2141  
NGX_AGAIN
;

2144 
b
->
pos
 +
˘x
->
ª°
;

2145 
˘x
->
ª°
 = 0;

2146 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

2163 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_PADDED_FLAG
) {

2165 i‡(
˘x
->
ª°
 == 0) {

2166 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2168  
NGX_ERROR
;

2171 i‡(
b
->
pos
 =b->
œ°
) {

2172  
NGX_AGAIN
;

2175 
˘x
->
Êags
 &~
NGX_HTTP_V2_PADDED_FLAG
;

2176 
˘x
->
∑ddög
 = *
b
->
pos
++;

2177 
˘x
->
ª°
 -= 1;

2179 i‡(
˘x
->
∑ddög
 > ctx->
ª°
) {

2180 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2183 
˘x
->
∑ddög
, ctx->
ª°
);

2184  
NGX_ERROR
;

2190 i‡(
˘x
->
ª°
 =˘x->
∑ddög
) {

2191 
d⁄e
;

2194 i‡(
b
->
pos
 =b->
œ°
) {

2195  
NGX_AGAIN
;

2198 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2199 i‡(
˛
 =
NULL
) {

2200  
NGX_ERROR
;

2203 *
Œ
 = 
˛
;

2204 
Œ
 = &
˛
->
√xt
;

2206 
buf
 = 
˛
->buf;

2208 
buf
->
Êush
 = 1;

2209 
buf
->
mem‹y
 = 1;

2211 
buf
->
pos
 = 
b
->pos;

2212 
buf
->
èg
 = 
u
->
ouçut
.tag;

2214 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2215 "gΩ¯ouçuàbu‡%p", 
buf
->
pos
);

2217 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
 - ctx->
∑ddög
) {

2219 
˘x
->
ª°
 -
b
->
œ°
 - b->
pos
;

2220 
b
->
pos
 = b->
œ°
;

2221 
buf
->
œ°
 = 
b
->
pos
;

2223  
NGX_AGAIN
;

2226 
b
->
pos
 +
˘x
->
ª°
 - ctx->
∑ddög
;

2227 
buf
->
œ°
 = 
b
->
pos
;

2228 
˘x
->
ª°
 = ctx->
∑ddög
;

2230 
d⁄e
:

2232 i‡(
˘x
->
∑ddög
) {

2233 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_∑ddög
;

2237 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

2239 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_END_STREAM_FLAG
) {

2240 
u
->
Àngth
 = 0;

2242 i‡(
˘x
->
ö
 =
NULL


2243 && 
˘x
->
out
 =
NULL


2244 && 
˘x
->
ouçut_˛o£d


2245 && 
b
->
œ°
 =b->
pos
)

2247 
u
->
kì∑live
 = 1;

2254  
NGX_OK
;

2255 
	}
}

2258 
ngx_öt_t


2259 
	$ngx_hâp_gΩc_∑r£_‰ame
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
,

2260 
ngx_buf_t
 *
b
)

2262 
u_ch¨
 
ch
, *
p
;

2263 
ngx_hâp_gΩc_°©e_e
 
°©e
;

2265 
°©e
 = 
˘x
->state;

2267 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

2268 
ch
 = *
p
;

2271 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2272 "gΩ¯‰amêbyã: %02Xd, s:%d", 
ch
, 
°©e
);

2275 
°©e
) {

2277 
ngx_hâp_gΩc_°_°¨t
:

2278 
˘x
->
ª°
 = 
ch
 << 16;

2279 
°©e
 = 
ngx_hâp_gΩc_°_Àngth_2
;

2282 
ngx_hâp_gΩc_°_Àngth_2
:

2283 
˘x
->
ª°
 |
ch
 << 8;

2284 
°©e
 = 
ngx_hâp_gΩc_°_Àngth_3
;

2287 
ngx_hâp_gΩc_°_Àngth_3
:

2288 
˘x
->
ª°
 |
ch
;

2290 i‡(
˘x
->
ª°
 > 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
) {

2291 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2293 
˘x
->
ª°
);

2294  
NGX_ERROR
;

2297 
°©e
 = 
ngx_hâp_gΩc_°_ty≥
;

2300 
ngx_hâp_gΩc_°_ty≥
:

2301 
˘x
->
ty≥
 = 
ch
;

2302 
°©e
 = 
ngx_hâp_gΩc_°_Êags
;

2305 
ngx_hâp_gΩc_°_Êags
:

2306 
˘x
->
Êags
 = 
ch
;

2307 
°©e
 = 
ngx_hâp_gΩc_°_°ªam_id
;

2310 
ngx_hâp_gΩc_°_°ªam_id
:

2311 
˘x
->
°ªam_id
 = (
ch
 & 0x7f) << 24;

2312 
°©e
 = 
ngx_hâp_gΩc_°_°ªam_id_2
;

2315 
ngx_hâp_gΩc_°_°ªam_id_2
:

2316 
˘x
->
°ªam_id
 |
ch
 << 16;

2317 
°©e
 = 
ngx_hâp_gΩc_°_°ªam_id_3
;

2320 
ngx_hâp_gΩc_°_°ªam_id_3
:

2321 
˘x
->
°ªam_id
 |
ch
 << 8;

2322 
°©e
 = 
ngx_hâp_gΩc_°_°ªam_id_4
;

2325 
ngx_hâp_gΩc_°_°ªam_id_4
:

2326 
˘x
->
°ªam_id
 |
ch
;

2328 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2330 
˘x
->
ty≥
, ctx->
ª°
, ctx->
Êags
, ctx->
°ªam_id
);

2332 
b
->
pos
 = 
p
 + 1;

2334 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_∑ylﬂd
;

2335 
˘x
->
‰ame_°©e
 = 0;

2337  
NGX_OK
;

2340 
ngx_hâp_gΩc_°_∑ylﬂd
:

2341 
ngx_hâp_gΩc_°_∑ddög
:

2346 
b
->
pos
 = 
p
;

2347 
˘x
->
°©e
 = state;

2349  
NGX_AGAIN
;

2350 
	}
}

2353 
ngx_öt_t


2354 
	$ngx_hâp_gΩc_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
,

2355 
ngx_buf_t
 *
b
)

2357 
u_ch¨
 
ch
, *
p
, *
œ°
;

2358 
size_t
 
mö
;

2359 
ngx_öt_t
 
rc
;

2361 
sw_°¨t
 = 0,

2362 
sw_∑ddög_Àngth
,

2363 
sw_dïídícy
,

2364 
sw_dïídícy_2
,

2365 
sw_dïídícy_3
,

2366 
sw_dïídícy_4
,

2367 
sw_weight
,

2368 
sw_‰agmít
,

2369 
sw_∑ddög


2370 } 
°©e
;

2372 
°©e
 = 
˘x
->
‰ame_°©e
;

2374 i‡(
°©e
 =
sw_°¨t
) {

2376 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2379 i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_HEADERS_FRAME
) {

2380 
˘x
->
∑rsög_hódîs
 = 1;

2381 
˘x
->
‰agmít_°©e
 = 0;

2383 
mö
 = (
˘x
->
Êags
 & 
NGX_HTTP_V2_PADDED_FLAG
 ? 1 : 0)

2384 + (
˘x
->
Êags
 & 
NGX_HTTP_V2_PRIORITY_FLAG
 ? 5 : 0);

2386 i‡(
˘x
->
ª°
 < 
mö
) {

2387 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2390 
˘x
->
ª°
);

2391  
NGX_ERROR
;

2394 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_END_STREAM_FLAG
) {

2395 
˘x
->
íd_°ªam
 = 1;

2398 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_PADDED_FLAG
) {

2399 
°©e
 = 
sw_∑ddög_Àngth
;

2401 } i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_PRIORITY_FLAG
) {

2402 
°©e
 = 
sw_dïídícy
;

2405 
°©e
 = 
sw_‰agmít
;

2408 } i‡(
˘x
->
ty≥
 =
NGX_HTTP_V2_CONTINUATION_FRAME
) {

2409 
°©e
 = 
sw_‰agmít
;

2412 
˘x
->
∑ddög
 = 0;

2413 
˘x
->
‰ame_°©e
 = 
°©e
;

2416 i‡(
°©e
 < 
sw_‰agmít
) {

2418 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

2419 
œ°
 = 
b
->last;

2422 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
;

2425 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

2426 
ch
 = *
p
;

2429 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2430 "gΩ¯hódî byã: %02Xd s:%d", 
ch
, 
°©e
);

2449 
°©e
) {

2451 
sw_∑ddög_Àngth
:

2453 
˘x
->
∑ddög
 = 
ch
;

2455 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_PRIORITY_FLAG
) {

2456 
°©e
 = 
sw_dïídícy
;

2460 
‰agmít
;

2462 
sw_dïídícy
:

2463 
°©e
 = 
sw_dïídícy_2
;

2466 
sw_dïídícy_2
:

2467 
°©e
 = 
sw_dïídícy_3
;

2470 
sw_dïídícy_3
:

2471 
°©e
 = 
sw_dïídícy_4
;

2474 
sw_dïídícy_4
:

2475 
°©e
 = 
sw_weight
;

2478 
sw_weight
:

2479 
‰agmít
;

2482 
sw_°¨t
:

2483 
sw_‰agmít
:

2484 
sw_∑ddög
:

2489 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

2490 
b
->
pos
 = 
p
;

2492 
˘x
->
‰ame_°©e
 = 
°©e
;

2493  
NGX_AGAIN
;

2495 
‰agmít
:

2497 
p
++;

2498 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

2499 
b
->
pos
 = 
p
;

2501 i‡(
˘x
->
∑ddög
 > ctx->
ª°
) {

2502 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2505 
˘x
->
∑ddög
, ctx->
ª°
);

2506  
NGX_ERROR
;

2509 
°©e
 = 
sw_‰agmít
;

2510 
˘x
->
‰ame_°©e
 = 
°©e
;

2513 i‡(
°©e
 =
sw_‰agmít
) {

2515 
rc
 = 
	`ngx_hâp_gΩc_∑r£_‰agmít
(
r
, 
˘x
, 
b
);

2517 i‡(
rc
 =
NGX_AGAIN
) {

2518  
NGX_AGAIN
;

2521 i‡(
rc
 =
NGX_ERROR
) {

2522  
NGX_ERROR
;

2525 i‡(
rc
 =
NGX_OK
) {

2526  
NGX_OK
;

2531 
°©e
 = 
sw_∑ddög
;

2532 
˘x
->
‰ame_°©e
 = 
°©e
;

2535 i‡(
°©e
 =
sw_∑ddög
) {

2537 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

2539 
˘x
->
ª°
 -
b
->
œ°
 - b->
pos
;

2540 
b
->
pos
 = b->
œ°
;

2542  
NGX_AGAIN
;

2545 
b
->
pos
 +
˘x
->
ª°
;

2546 
˘x
->
ª°
 = 0;

2548 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

2550 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
) {

2552 i‡(
˘x
->
‰agmít_°©e
) {

2553 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2555  
NGX_ERROR
;

2558 
˘x
->
∑rsög_hódîs
 = 0;

2560  
NGX_HTTP_PARSE_HEADER_DONE
;

2563  
NGX_AGAIN
;

2568  
NGX_ERROR
;

2569 
	}
}

2572 
ngx_öt_t


2573 
	$ngx_hâp_gΩc_∑r£_‰agmít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
,

2574 
ngx_buf_t
 *
b
)

2576 
u_ch¨
 
ch
, *
p
, *
œ°
;

2577 
size_t
 
size
;

2578 
ngx_uöt_t
 
ödex
, 
size_upd©e
;

2580 
sw_°¨t
 = 0,

2581 
sw_ödex
,

2582 
sw_«me_Àngth
,

2583 
sw_«me_Àngth_2
,

2584 
sw_«me_Àngth_3
,

2585 
sw_«me_Àngth_4
,

2586 
sw_«me
,

2587 
sw_«me_byãs
,

2588 
sw_vÆue_Àngth
,

2589 
sw_vÆue_Àngth_2
,

2590 
sw_vÆue_Àngth_3
,

2591 
sw_vÆue_Àngth_4
,

2592 
sw_vÆue
,

2593 
sw_vÆue_byãs


2594 } 
°©e
;

2599 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2601 
b
->
pos
, b->
œ°
, 
˘x
->
ª°
);

2604 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
 - ctx->
∑ddög
) {

2605 
œ°
 = 
b
->last;

2608 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
 - ctx->
∑ddög
;

2611 
°©e
 = 
˘x
->
‰agmít_°©e
;

2613 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

2614 
ch
 = *
p
;

2617 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2618 "gΩ¯hódî byã: %02Xd s:%d", 
ch
, 
°©e
);

2621 
°©e
) {

2623 
sw_°¨t
:

2624 
˘x
->
ödex
 = 0;

2626 i‡((
ch
 & 0x80) == 0x80) {

2636 
ödex
 = 
ch
 & ~0x80;

2638 i‡(
ödex
 == 0 || index > 61) {

2639 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2641 "èbÀ index: %ui", 
ödex
);

2642  
NGX_ERROR
;

2645 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2646 "gΩ¯ödexed hódî: %ui", 
ödex
);

2648 
˘x
->
ödex
 = index;

2649 
˘x
->
lôîÆ
 = 0;

2651 
d⁄e
;

2653 } i‡((
ch
 & 0xc0) == 0x40) {

2680 
ödex
 = 
ch
 & ~0xc0;

2682 i‡(
ödex
 > 61) {

2683 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2685 "èbÀ index: %ui", 
ödex
);

2686  
NGX_ERROR
;

2689 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2690 "gΩ¯lôîÆ hódî: %ui", 
ödex
);

2692 i‡(
ödex
 == 0) {

2693 
°©e
 = 
sw_«me_Àngth
;

2697 
˘x
->
ödex
 = index;

2698 
˘x
->
lôîÆ
 = 1;

2700 
°©e
 = 
sw_vÆue_Àngth
;

2703 } i‡((
ch
 & 0xe0) == 0x20) {

2713 
size_upd©e
 = 
ch
 & ~0xe0;

2715 i‡(
size_upd©e
 > 0) {

2716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2719 
size_upd©e
);

2720  
NGX_ERROR
;

2723 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2724 "gΩ¯èbÀ sizêupd©e: %ui", 
size_upd©e
);

2728 } i‡((
ch
 & 0xf0) == 0x10) {

2755 
ödex
 = 
ch
 & ~0xf0;

2757 i‡(
ödex
 == 0x0f) {

2758 
˘x
->
ödex
 = index;

2759 
˘x
->
lôîÆ
 = 1;

2760 
°©e
 = 
sw_ödex
;

2764 i‡(
ödex
 == 0) {

2765 
°©e
 = 
sw_«me_Àngth
;

2769 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2771 
ödex
);

2773 
˘x
->
ödex
 = index;

2774 
˘x
->
lôîÆ
 = 1;

2776 
°©e
 = 
sw_vÆue_Àngth
;

2779 } i‡((
ch
 & 0xf0) == 0x00) {

2806 
ödex
 = 
ch
 & ~0xf0;

2808 i‡(
ödex
 == 0x0f) {

2809 
˘x
->
ödex
 = index;

2810 
˘x
->
lôîÆ
 = 1;

2811 
°©e
 = 
sw_ödex
;

2815 i‡(
ödex
 == 0) {

2816 
°©e
 = 
sw_«me_Àngth
;

2820 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2822 
ödex
);

2824 
˘x
->
ödex
 = index;

2825 
˘x
->
lôîÆ
 = 1;

2827 
°©e
 = 
sw_vÆue_Àngth
;

2833  
NGX_ERROR
;

2835 
sw_ödex
:

2836 
˘x
->
ödex
 = ctx->ödex + (
ch
 & ~0x80);

2838 i‡(
ch
 & 0x80) {

2839 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2842  
NGX_ERROR
;

2845 i‡(
˘x
->
ödex
 > 61) {

2846 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2848 "èbÀ index: %ui", 
˘x
->
ödex
);

2849  
NGX_ERROR
;

2852 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2853 "gΩ¯hódî index: %ui", 
˘x
->
ödex
);

2855 
°©e
 = 
sw_vÆue_Àngth
;

2858 
sw_«me_Àngth
:

2859 
˘x
->
fõld_huffm™
 = 
ch
 & 0x80 ? 1 : 0;

2860 
˘x
->
fõld_Àngth
 = 
ch
 & ~0x80;

2862 i‡(
˘x
->
fõld_Àngth
 == 0x7f) {

2863 
°©e
 = 
sw_«me_Àngth_2
;

2867 i‡(
˘x
->
fõld_Àngth
 == 0) {

2868 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2871  
NGX_ERROR
;

2874 
°©e
 = 
sw_«me
;

2877 
sw_«me_Àngth_2
:

2878 
˘x
->
fõld_Àngth
 +
ch
 & ~0x80;

2880 i‡(
ch
 & 0x80) {

2881 
°©e
 = 
sw_«me_Àngth_3
;

2885 
°©e
 = 
sw_«me
;

2888 
sw_«me_Àngth_3
:

2889 
˘x
->
fõld_Àngth
 +(
ch
 & ~0x80) << 7;

2891 i‡(
ch
 & 0x80) {

2892 
°©e
 = 
sw_«me_Àngth_4
;

2896 
°©e
 = 
sw_«me
;

2899 
sw_«me_Àngth_4
:

2900 
˘x
->
fõld_Àngth
 +(
ch
 & ~0x80) << 14;

2902 i‡(
ch
 & 0x80) {

2903 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2906  
NGX_ERROR
;

2909 
°©e
 = 
sw_«me
;

2912 
sw_«me
:

2913 
˘x
->
«me
.
Àn
 = ctx->
fõld_huffm™
 ?

2914 
˘x
->
fõld_Àngth
 * 8 / 5 : ctx->field_length;

2916 
˘x
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ctx->«me.
Àn
 + 1);

2917 i‡(
˘x
->
«me
.
d©a
 =
NULL
) {

2918  
NGX_ERROR
;

2921 
˘x
->
fõld_íd
 = ctx->
«me
.
d©a
;

2922 
˘x
->
fõld_ª°
 = ctx->
fõld_Àngth
;

2923 
˘x
->
fõld_°©e
 = 0;

2925 
°©e
 = 
sw_«me_byãs
;

2929 
sw_«me_byãs
:

2931 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2933 
˘x
->
fõld_Àngth
,

2934 
˘x
->
fõld_huffm™
,

2935 
œ°
 - 
p
,

2936 
˘x
->
ª°
 - (
p
 - 
b
->
pos
));

2938 
size
 = 
	`ngx_mö
(
œ°
 - 
p
, (
ssize_t
Ë
˘x
->
fõld_ª°
);

2939 
˘x
->
fõld_ª°
 -
size
;

2941 i‡(
˘x
->
fõld_huffm™
) {

2942 i‡(
	`ngx_hâp_v2_huff_decode
(&
˘x
->
fõld_°©e
, 
p
, 
size
,

2943 &
˘x
->
fõld_íd
,

2944 
˘x
->
fõld_ª°
 == 0,

2945 
r
->
c⁄√˘i⁄
->
log
)

2946 !
NGX_OK
)

2948 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2950  
NGX_ERROR
;

2953 
˘x
->
«me
.
Àn
 = ctx->
fõld_íd
 - ctx->«me.
d©a
;

2954 
˘x
->
«me
.
d©a
[˘x->«me.
Àn
] = '\0';

2957 
˘x
->
fõld_íd
 = 
	`ngx_˝ymem
(˘x->fõld_íd, 
p
, 
size
);

2958 
˘x
->
«me
.
d©a
[˘x->«me.
Àn
] = '\0';

2961 
p
 +
size
 - 1;

2963 i‡(
˘x
->
fõld_ª°
 == 0) {

2964 
°©e
 = 
sw_vÆue_Àngth
;

2969 
sw_vÆue_Àngth
:

2970 
˘x
->
fõld_huffm™
 = 
ch
 & 0x80 ? 1 : 0;

2971 
˘x
->
fõld_Àngth
 = 
ch
 & ~0x80;

2973 i‡(
˘x
->
fõld_Àngth
 == 0x7f) {

2974 
°©e
 = 
sw_vÆue_Àngth_2
;

2978 i‡(
˘x
->
fõld_Àngth
 == 0) {

2979 
	`ngx_°r_£t
(&
˘x
->
vÆue
, "");

2980 
d⁄e
;

2983 
°©e
 = 
sw_vÆue
;

2986 
sw_vÆue_Àngth_2
:

2987 
˘x
->
fõld_Àngth
 +
ch
 & ~0x80;

2989 i‡(
ch
 & 0x80) {

2990 
°©e
 = 
sw_vÆue_Àngth_3
;

2994 
°©e
 = 
sw_vÆue
;

2997 
sw_vÆue_Àngth_3
:

2998 
˘x
->
fõld_Àngth
 +(
ch
 & ~0x80) << 7;

3000 i‡(
ch
 & 0x80) {

3001 
°©e
 = 
sw_vÆue_Àngth_4
;

3005 
°©e
 = 
sw_vÆue
;

3008 
sw_vÆue_Àngth_4
:

3009 
˘x
->
fõld_Àngth
 +(
ch
 & ~0x80) << 14;

3011 i‡(
ch
 & 0x80) {

3012 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3015  
NGX_ERROR
;

3018 
°©e
 = 
sw_vÆue
;

3021 
sw_vÆue
:

3022 
˘x
->
vÆue
.
Àn
 = ctx->
fõld_huffm™
 ?

3023 
˘x
->
fõld_Àngth
 * 8 / 5 : ctx->field_length;

3025 
˘x
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ctx->vÆue.
Àn
 + 1);

3026 i‡(
˘x
->
vÆue
.
d©a
 =
NULL
) {

3027  
NGX_ERROR
;

3030 
˘x
->
fõld_íd
 = ctx->
vÆue
.
d©a
;

3031 
˘x
->
fõld_ª°
 = ctx->
fõld_Àngth
;

3032 
˘x
->
fõld_°©e
 = 0;

3034 
°©e
 = 
sw_vÆue_byãs
;

3038 
sw_vÆue_byãs
:

3040 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3042 
˘x
->
fõld_Àngth
,

3043 
˘x
->
fõld_huffm™
,

3044 
œ°
 - 
p
,

3045 
˘x
->
ª°
 - (
p
 - 
b
->
pos
));

3047 
size
 = 
	`ngx_mö
(
œ°
 - 
p
, (
ssize_t
Ë
˘x
->
fõld_ª°
);

3048 
˘x
->
fõld_ª°
 -
size
;

3050 i‡(
˘x
->
fõld_huffm™
) {

3051 i‡(
	`ngx_hâp_v2_huff_decode
(&
˘x
->
fõld_°©e
, 
p
, 
size
,

3052 &
˘x
->
fõld_íd
,

3053 
˘x
->
fõld_ª°
 == 0,

3054 
r
->
c⁄√˘i⁄
->
log
)

3055 !
NGX_OK
)

3057 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3059  
NGX_ERROR
;

3062 
˘x
->
vÆue
.
Àn
 = ctx->
fõld_íd
 - ctx->vÆue.
d©a
;

3063 
˘x
->
vÆue
.
d©a
[˘x->vÆue.
Àn
] = '\0';

3066 
˘x
->
fõld_íd
 = 
	`ngx_˝ymem
(˘x->fõld_íd, 
p
, 
size
);

3067 
˘x
->
vÆue
.
d©a
[˘x->vÆue.
Àn
] = '\0';

3070 
p
 +
size
 - 1;

3072 i‡(
˘x
->
fõld_ª°
 == 0) {

3073 
d⁄e
;

3081 
d⁄e
:

3083 
p
++;

3084 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3085 
˘x
->
‰agmít_°©e
 = 
sw_°¨t
;

3086 
b
->
pos
 = 
p
;

3088 i‡(
˘x
->
ödex
) {

3089 
˘x
->
«me
 = *
	`ngx_hâp_v2_gë_°©ic_«me
(˘x->
ödex
);

3092 i‡(
˘x
->
ödex
 && !˘x->
lôîÆ
) {

3093 
˘x
->
vÆue
 = *
	`ngx_hâp_v2_gë_°©ic_vÆue
(˘x->
ödex
);

3096 i‡(!
˘x
->
ödex
) {

3097 i‡(
	`ngx_hâp_gΩc_vÆid©e_hódî_«me
(
r
, &
˘x
->
«me
Ë!
NGX_OK
) {

3098 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3100 &
˘x
->
«me
, &˘x->
vÆue
);

3101  
NGX_ERROR
;

3105 i‡(!
˘x
->
ödex
 || ctx->
lôîÆ
) {

3106 i‡(
	`ngx_hâp_gΩc_vÆid©e_hódî_vÆue
(
r
, &
˘x
->
vÆue
Ë!
NGX_OK
) {

3107 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3109 &
˘x
->
«me
, &˘x->
vÆue
);

3110  
NGX_ERROR
;

3114  
NGX_OK
;

3117 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3118 
˘x
->
‰agmít_°©e
 = 
°©e
;

3119 
b
->
pos
 = 
p
;

3121 i‡(
˘x
->
ª°
 > ctx->
∑ddög
) {

3122  
NGX_AGAIN
;

3125  
NGX_DONE
;

3126 
	}
}

3129 
ngx_öt_t


3130 
	$ngx_hâp_gΩc_vÆid©e_hódî_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
s
)

3132 
u_ch¨
 
ch
;

3133 
ngx_uöt_t
 
i
;

3135 
i
 = 0; i < 
s
->
Àn
; i++) {

3136 
ch
 = 
s
->
d©a
[
i
];

3138 i‡(
ch
 =':' && 
i
 > 0) {

3139  
NGX_ERROR
;

3142 i‡(
ch
 >= 'A' && ch <= 'Z') {

3143  
NGX_ERROR
;

3146 i‡(
ch
 ='\0' || ch =
CR
 || ch =
LF
) {

3147  
NGX_ERROR
;

3151  
NGX_OK
;

3152 
	}
}

3155 
ngx_öt_t


3156 
	$ngx_hâp_gΩc_vÆid©e_hódî_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
s
)

3158 
u_ch¨
 
ch
;

3159 
ngx_uöt_t
 
i
;

3161 
i
 = 0; i < 
s
->
Àn
; i++) {

3162 
ch
 = 
s
->
d©a
[
i
];

3164 i‡(
ch
 ='\0' || ch =
CR
 || ch =
LF
) {

3165  
NGX_ERROR
;

3169  
NGX_OK
;

3170 
	}
}

3173 
ngx_öt_t


3174 
	$ngx_hâp_gΩc_∑r£_r°_°ªam
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
,

3175 
ngx_buf_t
 *
b
)

3177 
u_ch¨
 
ch
, *
p
, *
œ°
;

3179 
sw_°¨t
 = 0,

3180 
sw_îr‹_2
,

3181 
sw_îr‹_3
,

3182 
sw_îr‹_4


3183 } 
°©e
;

3185 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

3186 
œ°
 = 
b
->last;

3189 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
;

3192 
°©e
 = 
˘x
->
‰ame_°©e
;

3194 i‡(
°©e
 =
sw_°¨t
) {

3195 i‡(
˘x
->
ª°
 != 4) {

3196 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3199 
˘x
->
ª°
);

3200  
NGX_ERROR
;

3204 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

3205 
ch
 = *
p
;

3208 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3209 "gΩ¯r° byã: %02Xd s:%d", 
ch
, 
°©e
);

3212 
°©e
) {

3214 
sw_°¨t
:

3215 
˘x
->
îr‹
 = (
ngx_uöt_t
Ë
ch
 << 24;

3216 
°©e
 = 
sw_îr‹_2
;

3219 
sw_îr‹_2
:

3220 
˘x
->
îr‹
 |
ch
 << 16;

3221 
°©e
 = 
sw_îr‹_3
;

3224 
sw_îr‹_3
:

3225 
˘x
->
îr‹
 |
ch
 << 8;

3226 
°©e
 = 
sw_îr‹_4
;

3229 
sw_îr‹_4
:

3230 
˘x
->
îr‹
 |
ch
;

3231 
°©e
 = 
sw_°¨t
;

3233 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3234 "gΩ¯îr‹: %ui", 
˘x
->
îr‹
);

3240 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3241 
˘x
->
‰ame_°©e
 = 
°©e
;

3242 
b
->
pos
 = 
p
;

3244 i‡(
˘x
->
ª°
 > 0) {

3245  
NGX_AGAIN
;

3248  
NGX_OK
;

3249 
	}
}

3252 
ngx_öt_t


3253 
	$ngx_hâp_gΩc_∑r£_gﬂway
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
,

3254 
ngx_buf_t
 *
b
)

3256 
u_ch¨
 
ch
, *
p
, *
œ°
;

3258 
sw_°¨t
 = 0,

3259 
sw_œ°_°ªam_id_2
,

3260 
sw_œ°_°ªam_id_3
,

3261 
sw_œ°_°ªam_id_4
,

3262 
sw_îr‹
,

3263 
sw_îr‹_2
,

3264 
sw_îr‹_3
,

3265 
sw_îr‹_4
,

3266 
sw_debug


3267 } 
°©e
;

3269 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

3270 
œ°
 = 
b
->last;

3273 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
;

3276 
°©e
 = 
˘x
->
‰ame_°©e
;

3278 i‡(
°©e
 =
sw_°¨t
) {

3280 i‡(
˘x
->
°ªam_id
) {

3281 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3284 
˘x
->
°ªam_id
);

3285  
NGX_ERROR
;

3288 i‡(
˘x
->
ª°
 < 8) {

3289 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3292 
˘x
->
ª°
);

3293  
NGX_ERROR
;

3297 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

3298 
ch
 = *
p
;

3301 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3302 "gΩ¯gﬂway byã: %02Xd s:%d", 
ch
, 
°©e
);

3305 
°©e
) {

3307 
sw_°¨t
:

3308 
˘x
->
°ªam_id
 = (
ch
 & 0x7f) << 24;

3309 
°©e
 = 
sw_œ°_°ªam_id_2
;

3312 
sw_œ°_°ªam_id_2
:

3313 
˘x
->
°ªam_id
 |
ch
 << 16;

3314 
°©e
 = 
sw_œ°_°ªam_id_3
;

3317 
sw_œ°_°ªam_id_3
:

3318 
˘x
->
°ªam_id
 |
ch
 << 8;

3319 
°©e
 = 
sw_œ°_°ªam_id_4
;

3322 
sw_œ°_°ªam_id_4
:

3323 
˘x
->
°ªam_id
 |
ch
;

3324 
°©e
 = 
sw_îr‹
;

3327 
sw_îr‹
:

3328 
˘x
->
îr‹
 = (
ngx_uöt_t
Ë
ch
 << 24;

3329 
°©e
 = 
sw_îr‹_2
;

3332 
sw_îr‹_2
:

3333 
˘x
->
îr‹
 |
ch
 << 16;

3334 
°©e
 = 
sw_îr‹_3
;

3337 
sw_îr‹_3
:

3338 
˘x
->
îr‹
 |
ch
 << 8;

3339 
°©e
 = 
sw_îr‹_4
;

3342 
sw_îr‹_4
:

3343 
˘x
->
îr‹
 |
ch
;

3344 
°©e
 = 
sw_debug
;

3347 
sw_debug
:

3352 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3353 
˘x
->
‰ame_°©e
 = 
°©e
;

3354 
b
->
pos
 = 
p
;

3356 i‡(
˘x
->
ª°
 > 0) {

3357  
NGX_AGAIN
;

3360 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3362 
˘x
->
îr‹
, ctx->
°ªam_id
);

3364 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

3366  
NGX_OK
;

3367 
	}
}

3370 
ngx_öt_t


3371 
	$ngx_hâp_gΩc_∑r£_wödow_upd©e
(
ngx_hâp_ªque°_t
 *
r
,

3372 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
)

3374 
u_ch¨
 
ch
, *
p
, *
œ°
;

3376 
sw_°¨t
 = 0,

3377 
sw_size_2
,

3378 
sw_size_3
,

3379 
sw_size_4


3380 } 
°©e
;

3382 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

3383 
œ°
 = 
b
->last;

3386 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
;

3389 
°©e
 = 
˘x
->
‰ame_°©e
;

3391 i‡(
°©e
 =
sw_°¨t
) {

3392 i‡(
˘x
->
ª°
 != 4) {

3393 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3396 
˘x
->
ª°
);

3397  
NGX_ERROR
;

3401 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

3402 
ch
 = *
p
;

3405 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3406 "gΩ¯wödow upd©êbyã: %02Xd s:%d", 
ch
, 
°©e
);

3409 
°©e
) {

3411 
sw_°¨t
:

3412 
˘x
->
wödow_upd©e
 = (
ch
 & 0x7f) << 24;

3413 
°©e
 = 
sw_size_2
;

3416 
sw_size_2
:

3417 
˘x
->
wödow_upd©e
 |
ch
 << 16;

3418 
°©e
 = 
sw_size_3
;

3421 
sw_size_3
:

3422 
˘x
->
wödow_upd©e
 |
ch
 << 8;

3423 
°©e
 = 
sw_size_4
;

3426 
sw_size_4
:

3427 
˘x
->
wödow_upd©e
 |
ch
;

3428 
°©e
 = 
sw_°¨t
;

3433 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3434 
˘x
->
‰ame_°©e
 = 
°©e
;

3435 
b
->
pos
 = 
p
;

3437 i‡(
˘x
->
ª°
 > 0) {

3438  
NGX_AGAIN
;

3441 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

3443 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3444 "gΩ¯wödow upd©e: %ui", 
˘x
->
wödow_upd©e
);

3446 i‡(
˘x
->
°ªam_id
) {

3448 i‡(
˘x
->
wödow_upd©e
 > (
size_t
Ë
NGX_HTTP_V2_MAX_WINDOW


3449 - 
˘x
->
£nd_wödow
)

3451 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3453  
NGX_ERROR
;

3456 
˘x
->
£nd_wödow
 +˘x->
wödow_upd©e
;

3460 i‡(
˘x
->
wödow_upd©e
 > 
NGX_HTTP_V2_MAX_WINDOW


3461 - 
˘x
->
c⁄√˘i⁄
->
£nd_wödow
)

3463 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3465  
NGX_ERROR
;

3468 
˘x
->
c⁄√˘i⁄
->
£nd_wödow
 +˘x->
wödow_upd©e
;

3471  
NGX_OK
;

3472 
	}
}

3475 
ngx_öt_t


3476 
	$ngx_hâp_gΩc_∑r£_£âögs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
,

3477 
ngx_buf_t
 *
b
)

3479 
u_ch¨
 
ch
, *
p
, *
œ°
;

3480 
ssize_t
 
wödow_upd©e
;

3482 
sw_°¨t
 = 0,

3483 
sw_id
,

3484 
sw_id_2
,

3485 
sw_vÆue
,

3486 
sw_vÆue_2
,

3487 
sw_vÆue_3
,

3488 
sw_vÆue_4


3489 } 
°©e
;

3491 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

3492 
œ°
 = 
b
->last;

3495 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
;

3498 
°©e
 = 
˘x
->
‰ame_°©e
;

3500 i‡(
°©e
 =
sw_°¨t
) {

3502 i‡(
˘x
->
°ªam_id
) {

3503 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3506 
˘x
->
°ªam_id
);

3507  
NGX_ERROR
;

3510 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_ACK_FLAG
) {

3511 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3514 i‡(
˘x
->
ª°
 != 0) {

3515 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3518 
˘x
->
ª°
);

3519  
NGX_ERROR
;

3522 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

3524  
NGX_OK
;

3527 i‡(
˘x
->
ª°
 % 6 != 0) {

3528 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3531 
˘x
->
ª°
);

3532  
NGX_ERROR
;

3536 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

3537 
ch
 = *
p
;

3540 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3541 "gΩ¯£âög†byã: %02Xd s:%d", 
ch
, 
°©e
);

3544 
°©e
) {

3546 
sw_°¨t
:

3547 
sw_id
:

3548 
˘x
->
£âög_id
 = 
ch
 << 8;

3549 
°©e
 = 
sw_id_2
;

3552 
sw_id_2
:

3553 
˘x
->
£âög_id
 |
ch
;

3554 
°©e
 = 
sw_vÆue
;

3557 
sw_vÆue
:

3558 
˘x
->
£âög_vÆue
 = (
ngx_uöt_t
Ë
ch
 << 24;

3559 
°©e
 = 
sw_vÆue_2
;

3562 
sw_vÆue_2
:

3563 
˘x
->
£âög_vÆue
 |
ch
 << 16;

3564 
°©e
 = 
sw_vÆue_3
;

3567 
sw_vÆue_3
:

3568 
˘x
->
£âög_vÆue
 |
ch
 << 8;

3569 
°©e
 = 
sw_vÆue_4
;

3572 
sw_vÆue_4
:

3573 
˘x
->
£âög_vÆue
 |
ch
;

3574 
°©e
 = 
sw_id
;

3576 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3578 
˘x
->
£âög_id
, ctx->
£âög_vÆue
);

3591 i‡(
˘x
->
£âög_id
 == 0x04) {

3594 i‡(
˘x
->
£âög_vÆue
 > 
NGX_HTTP_V2_MAX_WINDOW
) {

3595 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3598 
˘x
->
£âög_vÆue
);

3599  
NGX_ERROR
;

3602 
wödow_upd©e
 = 
˘x
->
£âög_vÆue


3603 - 
˘x
->
c⁄√˘i⁄
->
öô_wödow
;

3604 
˘x
->
c⁄√˘i⁄
->
öô_wödow
 = ctx->
£âög_vÆue
;

3606 i‡(
˘x
->
£nd_wödow
 > 0

3607 && 
wödow_upd©e
 > (
ssize_t
Ë
NGX_HTTP_V2_MAX_WINDOW


3608 - 
˘x
->
£nd_wödow
)

3610 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3613 
˘x
->
£âög_vÆue
);

3614  
NGX_ERROR
;

3617 
˘x
->
£nd_wödow
 +
wödow_upd©e
;

3624 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3625 
˘x
->
‰ame_°©e
 = 
°©e
;

3626 
b
->
pos
 = 
p
;

3628 i‡(
˘x
->
ª°
 > 0) {

3629  
NGX_AGAIN
;

3632 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

3634  
	`ngx_hâp_gΩc_£nd_£âögs_ack
(
r
, 
˘x
);

3635 
	}
}

3638 
ngx_öt_t


3639 
	$ngx_hâp_gΩc_∑r£_pög
(
ngx_hâp_ªque°_t
 *
r
,

3640 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
)

3642 
u_ch¨
 
ch
, *
p
, *
œ°
;

3644 
sw_°¨t
 = 0,

3645 
sw_d©a_2
,

3646 
sw_d©a_3
,

3647 
sw_d©a_4
,

3648 
sw_d©a_5
,

3649 
sw_d©a_6
,

3650 
sw_d©a_7
,

3651 
sw_d©a_8


3652 } 
°©e
;

3654 i‡(
b
->
œ°
 - b->
pos
 < (
ssize_t
Ë
˘x
->
ª°
) {

3655 
œ°
 = 
b
->last;

3658 
œ°
 = 
b
->
pos
 + 
˘x
->
ª°
;

3661 
°©e
 = 
˘x
->
‰ame_°©e
;

3663 i‡(
°©e
 =
sw_°¨t
) {

3665 i‡(
˘x
->
°ªam_id
) {

3666 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3669 
˘x
->
°ªam_id
);

3670  
NGX_ERROR
;

3673 i‡(
˘x
->
ª°
 != 8) {

3674 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3677 
˘x
->
ª°
);

3678  
NGX_ERROR
;

3681 i‡(
˘x
->
Êags
 & 
NGX_HTTP_V2_ACK_FLAG
) {

3682 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3684  
NGX_ERROR
;

3688 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

3689 
ch
 = *
p
;

3692 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3693 "gΩ¯pög byã: %02Xd s:%d", 
ch
, 
°©e
);

3696 i‡(
°©e
 < 
sw_d©a_8
) {

3697 
˘x
->
pög_d©a
[
°©e
] = 
ch
;

3698 
°©e
++;

3701 
˘x
->
pög_d©a
[7] = 
ch
;

3702 
°©e
 = 
sw_°¨t
;

3704 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3709 
˘x
->
ª°
 -
p
 - 
b
->
pos
;

3710 
˘x
->
‰ame_°©e
 = 
°©e
;

3711 
b
->
pos
 = 
p
;

3713 i‡(
˘x
->
ª°
 > 0) {

3714  
NGX_AGAIN
;

3717 
˘x
->
°©e
 = 
ngx_hâp_gΩc_°_°¨t
;

3719  
	`ngx_hâp_gΩc_£nd_pög_ack
(
r
, 
˘x
);

3720 
	}
}

3723 
ngx_öt_t


3724 
	$ngx_hâp_gΩc_£nd_£âögs_ack
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
)

3726 
ngx_chaö_t
 *
˛
, **
Œ
;

3727 
ngx_hâp_gΩc_‰ame_t
 *
f
;

3729 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3732 
˛
 = 
˘x
->
out
, 
Œ
 = &˘x->out; cl; c»˛->
√xt
) {

3733 
Œ
 = &
˛
->
√xt
;

3736 
˛
 = 
	`ngx_hâp_gΩc_gë_buf
(
r
, 
˘x
);

3737 i‡(
˛
 =
NULL
) {

3738  
NGX_ERROR
;

3741 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
˛
->
buf
->
œ°
;

3742 
˛
->
buf
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

3744 
f
->
Àngth_0
 = 0;

3745 
f
->
Àngth_1
 = 0;

3746 
f
->
Àngth_2
 = 0;

3747 
f
->
ty≥
 = 
NGX_HTTP_V2_SETTINGS_FRAME
;

3748 
f
->
Êags
 = 
NGX_HTTP_V2_ACK_FLAG
;

3749 
f
->
°ªam_id_0
 = 0;

3750 
f
->
°ªam_id_1
 = 0;

3751 
f
->
°ªam_id_2
 = 0;

3752 
f
->
°ªam_id_3
 = 0;

3754 *
Œ
 = 
˛
;

3756  
NGX_OK
;

3757 
	}
}

3760 
ngx_öt_t


3761 
	$ngx_hâp_gΩc_£nd_pög_ack
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
)

3763 
ngx_chaö_t
 *
˛
, **
Œ
;

3764 
ngx_hâp_gΩc_‰ame_t
 *
f
;

3766 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3769 
˛
 = 
˘x
->
out
, 
Œ
 = &˘x->out; cl; c»˛->
√xt
) {

3770 
Œ
 = &
˛
->
√xt
;

3773 
˛
 = 
	`ngx_hâp_gΩc_gë_buf
(
r
, 
˘x
);

3774 i‡(
˛
 =
NULL
) {

3775  
NGX_ERROR
;

3778 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
˛
->
buf
->
œ°
;

3779 
˛
->
buf
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

3781 
f
->
Àngth_0
 = 0;

3782 
f
->
Àngth_1
 = 0;

3783 
f
->
Àngth_2
 = 8;

3784 
f
->
ty≥
 = 
NGX_HTTP_V2_PING_FRAME
;

3785 
f
->
Êags
 = 
NGX_HTTP_V2_ACK_FLAG
;

3786 
f
->
°ªam_id_0
 = 0;

3787 
f
->
°ªam_id_1
 = 0;

3788 
f
->
°ªam_id_2
 = 0;

3789 
f
->
°ªam_id_3
 = 0;

3791 
˛
->
buf
->
œ°
 = 
	`ngx_c›y
(˛->buf->œ°, 
˘x
->
pög_d©a
, 8);

3793 *
Œ
 = 
˛
;

3795  
NGX_OK
;

3796 
	}
}

3799 
ngx_öt_t


3800 
	$ngx_hâp_gΩc_£nd_wödow_upd©e
(
ngx_hâp_ªque°_t
 *
r
,

3801 
ngx_hâp_gΩc_˘x_t
 *
˘x
)

3803 
size_t
 
n
;

3804 
ngx_chaö_t
 *
˛
, **
Œ
;

3805 
ngx_hâp_gΩc_‰ame_t
 *
f
;

3807 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3809 
˘x
->
c⁄√˘i⁄
->
ªcv_wödow
, ctx->recv_window);

3811 
˛
 = 
˘x
->
out
, 
Œ
 = &˘x->out; cl; c»˛->
√xt
) {

3812 
Œ
 = &
˛
->
√xt
;

3815 
˛
 = 
	`ngx_hâp_gΩc_gë_buf
(
r
, 
˘x
);

3816 i‡(
˛
 =
NULL
) {

3817  
NGX_ERROR
;

3820 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
˛
->
buf
->
œ°
;

3821 
˛
->
buf
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

3823 
f
->
Àngth_0
 = 0;

3824 
f
->
Àngth_1
 = 0;

3825 
f
->
Àngth_2
 = 4;

3826 
f
->
ty≥
 = 
NGX_HTTP_V2_WINDOW_UPDATE_FRAME
;

3827 
f
->
Êags
 = 0;

3828 
f
->
°ªam_id_0
 = 0;

3829 
f
->
°ªam_id_1
 = 0;

3830 
f
->
°ªam_id_2
 = 0;

3831 
f
->
°ªam_id_3
 = 0;

3833 
n
 = 
NGX_HTTP_V2_MAX_WINDOW
 - 
˘x
->
c⁄√˘i⁄
->
ªcv_wödow
;

3834 
˘x
->
c⁄√˘i⁄
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

3836 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë((
n
 >> 24) & 0xff);

3837 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë((
n
 >> 16) & 0xff);

3838 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë((
n
 >> 8) & 0xff);

3839 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë(
n
 & 0xff);

3841 
f
 = (
ngx_hâp_gΩc_‰ame_t
 *Ë
˛
->
buf
->
œ°
;

3842 
˛
->
buf
->
œ°
 +(
ngx_hâp_gΩc_‰ame_t
);

3844 
f
->
Àngth_0
 = 0;

3845 
f
->
Àngth_1
 = 0;

3846 
f
->
Àngth_2
 = 4;

3847 
f
->
ty≥
 = 
NGX_HTTP_V2_WINDOW_UPDATE_FRAME
;

3848 
f
->
Êags
 = 0;

3849 
f
->
°ªam_id_0
 = (
u_ch¨
Ë((
˘x
->
id
 >> 24) & 0xff);

3850 
f
->
°ªam_id_1
 = (
u_ch¨
Ë((
˘x
->
id
 >> 16) & 0xff);

3851 
f
->
°ªam_id_2
 = (
u_ch¨
Ë((
˘x
->
id
 >> 8) & 0xff);

3852 
f
->
°ªam_id_3
 = (
u_ch¨
Ë(
˘x
->
id
 & 0xff);

3854 
n
 = 
NGX_HTTP_V2_MAX_WINDOW
 - 
˘x
->
ªcv_wödow
;

3855 
˘x
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

3857 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë((
n
 >> 24) & 0xff);

3858 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë((
n
 >> 16) & 0xff);

3859 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë((
n
 >> 8) & 0xff);

3860 *
˛
->
buf
->
œ°
++ = (
u_ch¨
Ë(
n
 & 0xff);

3862 *
Œ
 = 
˛
;

3864  
NGX_OK
;

3865 
	}
}

3868 
ngx_chaö_t
 *

3869 
	$ngx_hâp_gΩc_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gΩc_˘x_t
 *
˘x
)

3871 
u_ch¨
 *
°¨t
;

3872 
ngx_buf_t
 *
b
;

3873 
ngx_chaö_t
 *
˛
;

3875 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

3876 i‡(
˛
 =
NULL
) {

3877  
NULL
;

3880 
b
 = 
˛
->
buf
;

3881 
°¨t
 = 
b
->start;

3883 i‡(
°¨t
 =
NULL
) {

3890 
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 2 * (
ngx_hâp_gΩc_‰ame_t
) + 8);

3891 i‡(
°¨t
 =
NULL
) {

3892  
NULL
;

3897 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

3899 
b
->
°¨t
 = start;

3900 
b
->
pos
 = 
°¨t
;

3901 
b
->
œ°
 = 
°¨t
;

3902 
b
->
íd
 = 
°¨t
 + 2 * (
ngx_hâp_gΩc_‰ame_t
) + 8;

3904 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gΩc_body_ouçut_fûãr
;

3905 
b
->
ãmp‹¨y
 = 1;

3906 
b
->
Êush
 = 1;

3908  
˛
;

3909 
	}
}

3912 
ngx_hâp_gΩc_˘x_t
 *

3913 
	$ngx_hâp_gΩc_gë_˘x
(
ngx_hâp_ªque°_t
 *
r
)

3915 
ngx_hâp_gΩc_˘x_t
 *
˘x
;

3916 
ngx_hâp_up°ªam_t
 *
u
;

3918 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gΩc_moduÀ
);

3920 i‡(
˘x
->
c⁄√˘i⁄
 =
NULL
) {

3921 
u
 = 
r
->
up°ªam
;

3923 i‡(
	`ngx_hâp_gΩc_gë_c⁄√˘i⁄_d©a
(
r
, 
˘x
, &
u
->
≥î
Ë!
NGX_OK
) {

3924  
NULL
;

3928  
˘x
;

3929 
	}
}

3932 
ngx_öt_t


3933 
	$ngx_hâp_gΩc_gë_c⁄√˘i⁄_d©a
(
ngx_hâp_ªque°_t
 *
r
,

3934 
ngx_hâp_gΩc_˘x_t
 *
˘x
, 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

3936 
ngx_c⁄√˘i⁄_t
 *
c
;

3937 
ngx_poﬁ_˛ónup_t
 *
˛n
;

3939 
c
 = 
pc
->
c⁄√˘i⁄
;

3941 i‡(
pc
->
ˇched
) {

3948 
˛n
 = 
c
->
poﬁ
->
˛ónup
; c ; c  = c ->
√xt
) {

3949 i‡(
˛n
->
h™dÀr
 =
ngx_hâp_gΩc_˛ónup
) {

3950 
˘x
->
c⁄√˘i⁄
 = 
˛n
->
d©a
;

3955 i‡(
˘x
->
c⁄√˘i⁄
 =
NULL
) {

3956 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

3959  
NGX_ERROR
;

3962 
˘x
->
£nd_wödow
 = ctx->
c⁄√˘i⁄
->
öô_wödow
;

3963 
˘x
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

3965 
˘x
->
c⁄√˘i⁄
->
œ°_°ªam_id
 += 2;

3966 
˘x
->
id
 = ctx->
c⁄√˘i⁄
->
œ°_°ªam_id
;

3968  
NGX_OK
;

3971 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
c
->
poﬁ
, (
ngx_hâp_gΩc_c⁄n_t
));

3972 i‡(
˛n
 =
NULL
) {

3973  
NGX_ERROR
;

3976 
˛n
->
h™dÀr
 = 
ngx_hâp_gΩc_˛ónup
;

3977 
˘x
->
c⁄√˘i⁄
 = 
˛n
->
d©a
;

3979 
˘x
->
c⁄√˘i⁄
->
öô_wödow
 = 
NGX_HTTP_V2_DEFAULT_WINDOW
;

3980 
˘x
->
c⁄√˘i⁄
->
£nd_wödow
 = 
NGX_HTTP_V2_DEFAULT_WINDOW
;

3981 
˘x
->
c⁄√˘i⁄
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

3983 
˘x
->
£nd_wödow
 = 
NGX_HTTP_V2_DEFAULT_WINDOW
;

3984 
˘x
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

3986 
˘x
->
id
 = 1;

3987 
˘x
->
c⁄√˘i⁄
->
œ°_°ªam_id
 = 1;

3989  
NGX_OK
;

3990 
	}
}

3994 
	$ngx_hâp_gΩc_˛ónup
(*
d©a
)

3997 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

4001 
	}
}

4005 
	$ngx_hâp_gΩc_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

4007 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4010 
	}
}

4014 
	$ngx_hâp_gΩc_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

4016 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4019 
	}
}

4022 
ngx_öt_t


4023 
	$ngx_hâp_gΩc_öã∫Æ_åaûîs_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4024 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4026 
ngx_èbÀ_ñt_t
 *
ã
;

4028 
ã
 = 
r
->
hódîs_ö
.te;

4030 i‡(
ã
 =
NULL
) {

4031 
v
->
nŸ_found
 = 1;

4032  
NGX_OK
;

4035 i‡(
	`ngx_°æˇ£°∫
(
ã
->
vÆue
.
d©a
,Åe->vÆue.d©®+Åe->vÆue.
Àn
,

4036 (
u_ch¨
 *) "trailers", 8 - 1)

4037 =
NULL
)

4039 
v
->
nŸ_found
 = 1;

4040  
NGX_OK
;

4043 
v
->
vÆid
 = 1;

4044 
v
->
no_ˇchóbÀ
 = 0;

4045 
v
->
nŸ_found
 = 0;

4047 
v
->
d©a
 = (
u_ch¨
 *) "trailers";

4048 
v
->
Àn
 = ("trailers") - 1;

4050  
NGX_OK
;

4051 
	}
}

4054 
ngx_öt_t


4055 
	$ngx_hâp_gΩc_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

4057 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

4059 
v
 = 
ngx_hâp_gΩc_v¨s
; v->
«me
.
Àn
; v++) {

4060 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

4061 i‡(
v¨
 =
NULL
) {

4062  
NGX_ERROR
;

4065 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

4066 
v¨
->
d©a
 = 
v
->data;

4069  
NGX_OK
;

4070 
	}
}

4074 
	$ngx_hâp_gΩc_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

4076 
ngx_hâp_gΩc_loc_c⁄f_t
 *
c⁄f
;

4078 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gΩc_loc_c⁄f_t
));

4079 i‡(
c⁄f
 =
NULL
) {

4080  
NULL
;

4106 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

4107 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

4108 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

4109 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

4110 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

4111 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

4113 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

4115 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

4116 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

4118 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

4120 #i‡(
NGX_HTTP_SSL
)

4121 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

4122 
c⁄f
->
up°ªam
.
s¶_£rvî_«me
 = 
NGX_CONF_UNSET
;

4123 
c⁄f
->
up°ªam
.
s¶_vîify
 = 
NGX_CONF_UNSET
;

4124 
c⁄f
->
s¶_vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

4125 
c⁄f
->
s¶_∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

4129 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

4130 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

4131 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

4132 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

4133 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

4134 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

4135 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

4136 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

4137 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 1;

4138 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 1;

4139 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 0;

4140 
c⁄f
->
up°ªam
.
∑ss_åaûîs
 = 1;

4141 
c⁄f
->
up°ªam
.
¥e£rve_ouçut
 = 1;

4143 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "grpc");

4145  
c⁄f
;

4146 
	}
}

4150 
	$ngx_hâp_gΩc_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

4152 
ngx_hâp_gΩc_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

4153 
ngx_hâp_gΩc_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

4155 
ngx_öt_t
 
rc
;

4156 
ngx_hash_öô_t
 
hash
;

4157 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4159 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

4160 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

4162 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

4163 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

4165 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

4166 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

4168 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

4169 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

4171 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

4172 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

4174 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

4175 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

4177 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

4178 
¥ev
->
up°ªam
.
buf„r_size
,

4179 (
size_t
Ë
ngx_∑gesize
);

4181 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

4182 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

4183 
NGX_CONF_BITMASK_SET
);

4185 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

4186 
¥ev
->
up°ªam
.
√xt_up°ªam
,

4187 (
NGX_CONF_BITMASK_SET


4188 |
NGX_HTTP_UPSTREAM_FT_ERROR


4189 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

4191 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

4192 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


4193 |
NGX_HTTP_UPSTREAM_FT_OFF
;

4196 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

4197 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

4199 #i‡(
NGX_HTTP_SSL
)

4201 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

4202 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

4204 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

4205 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


4206 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

4208 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

4211 i‡(
c⁄f
->
up°ªam
.
s¶_«me
 =
NULL
) {

4212 
c⁄f
->
up°ªam
.
s¶_«me
 = 
¥ev
->upstream.ssl_name;

4215 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£rvî_«me
,

4216 
¥ev
->
up°ªam
.
s¶_£rvî_«me
, 0);

4217 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_vîify
,

4218 
¥ev
->
up°ªam
.
s¶_vîify
, 0);

4219 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
s¶_vîify_dïth
,

4220 
¥ev
->
s¶_vîify_dïth
, 1);

4221 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_åu°ed_˚πifiˇã
,

4222 
¥ev
->
s¶_åu°ed_˚πifiˇã
, "");

4223 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_¸l
, 
¥ev
->ssl_crl, "");

4225 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã
,

4226 
¥ev
->
s¶_˚πifiˇã
, "");

4227 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã_key
,

4228 
¥ev
->
s¶_˚πifiˇã_key
, "");

4229 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
s¶_∑ssw‹ds
, 
¥ev
->s¶_∑ssw‹ds, 
NULL
);

4231 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_gΩc_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

4232  
NGX_CONF_ERROR
;

4237 
hash
.
max_size
 = 512;

4238 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

4239 
hash
.
«me
 = "grpc_headers_hash";

4241 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

4242 &
¥ev
->
up°ªam
, 
ngx_hâp_gΩc_hide_hódîs
, &
hash
)

4243 !
NGX_OK
)

4245  
NGX_CONF_ERROR
;

4248 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4250 i‡(
˛cf
->
n⁄ame
 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

4251 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

4252 
c⁄f
->
ho°
 = 
¥ev
->host;

4253 #i‡(
NGX_HTTP_SSL
)

4254 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

4258 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL
 && 
c⁄f
->
up°ªam
.upstream) {

4259 
˛cf
->
h™dÀr
 = 
ngx_hâp_gΩc_h™dÀr
;

4262 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

4263 
c⁄f
->
hódîs
 = 
¥ev
->headers;

4264 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

4265 
c⁄f
->
ho°_£t
 = 
¥ev
->host_set;

4268 
rc
 = 
	`ngx_hâp_gΩc_öô_hódîs
(
cf
, 
c⁄f
, &c⁄f->
hódîs
,

4269 
ngx_hâp_gΩc_hódîs
);

4270 i‡(
rc
 !
NGX_OK
) {

4271  
NGX_CONF_ERROR
;

4279 i‡(
¥ev
->
hódîs
.
hash
.
buckës
 =
NULL


4280 && 
c⁄f
->
hódîs_sour˚
 =
¥ev
->headers_source)

4282 
¥ev
->
hódîs
 = 
c⁄f
->headers;

4283 
¥ev
->
ho°_£t
 = 
c⁄f
->host_set;

4286  
NGX_CONF_OK
;

4287 
	}
}

4290 
ngx_öt_t


4291 
	$ngx_hâp_gΩc_öô_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_gΩc_loc_c⁄f_t
 *
c⁄f
,

4292 
ngx_hâp_gΩc_hódîs_t
 *
hódîs
, 
ngx_keyvÆ_t
 *
deÁu…_hódîs
)

4294 
u_ch¨
 *
p
;

4295 
size_t
 
size
;

4296 
uöçå_t
 *
code
;

4297 
ngx_uöt_t
 
i
;

4298 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

4299 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

4300 
ngx_hash_key_t
 *
hk
;

4301 
ngx_hash_öô_t
 
hash
;

4302 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4303 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

4305 i‡(
hódîs
->
hash
.
buckës
) {

4306  
NGX_OK
;

4309 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

4310 !
NGX_OK
)

4312  
NGX_ERROR
;

4315 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

4316 !
NGX_OK
)

4318  
NGX_ERROR
;

4321 
hódîs
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

4322 i‡(
hódîs
->
Àngths
 =
NULL
) {

4323  
NGX_ERROR
;

4326 
hódîs
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

4327 i‡(
hódîs
->
vÆues
 =
NULL
) {

4328  
NGX_ERROR
;

4331 i‡(
c⁄f
->
hódîs_sour˚
) {

4333 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

4334 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

4336 i‡(
§c
[
i
].
key
.
Àn
 == 4

4337 && 
	`ngx_°∫ˇ£cmp
(
§c
[
i
].
key
.
d©a
, (
u_ch¨
 *) "Host", 4) == 0)

4339 
c⁄f
->
ho°_£t
 = 1;

4342 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

4343 i‡(
s
 =
NULL
) {

4344  
NGX_ERROR
;

4347 *
s
 = 
§c
[
i
];

4351 
h
 = 
deÁu…_hódîs
;

4353 
h
->
key
.
Àn
) {

4355 
§c
 = 
hódîs_mîged
.
ñts
;

4356 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

4357 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

4358 
√xt
;

4362 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

4363 i‡(
s
 =
NULL
) {

4364  
NGX_ERROR
;

4367 *
s
 = *
h
;

4369 
√xt
:

4371 
h
++;

4375 
§c
 = 
hódîs_mîged
.
ñts
;

4376 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

4378 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

4379 i‡(
hk
 =
NULL
) {

4380  
NGX_ERROR
;

4383 
hk
->
key
 = 
§c
[
i
].key;

4384 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

4385 
hk
->
vÆue
 = (*) 1;

4387 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

4391 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
,

4392 (
ngx_hâp_s¸ùt_c›y_code_t
));

4393 i‡(
c›y
 =
NULL
) {

4394  
NGX_ERROR
;

4397 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

4398 
ngx_hâp_s¸ùt_c›y_Àn_code
;

4399 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

4401 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

4402 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

4403 & ~((
uöçå_t
) - 1);

4405 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, 
size
);

4406 i‡(
c›y
 =
NULL
) {

4407  
NGX_ERROR
;

4410 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

4411 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

4413 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

4414 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

4416 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4418 
sc
.
cf
 = cf;

4419 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

4420 
sc
.
Êushes
 = &
hódîs
->flushes;

4421 
sc
.
Àngths
 = &
hódîs
->lengths;

4422 
sc
.
vÆues
 = &
hódîs
->values;

4424 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4425  
NGX_ERROR
;

4428 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
, (
uöçå_t
));

4429 i‡(
code
 =
NULL
) {

4430  
NGX_ERROR
;

4433 *
code
 = (
uöçå_t
Ë
NULL
;

4435 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, (
uöçå_t
));

4436 i‡(
code
 =
NULL
) {

4437  
NGX_ERROR
;

4440 *
code
 = (
uöçå_t
Ë
NULL
;

4443 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
, (
uöçå_t
));

4444 i‡(
code
 =
NULL
) {

4445  
NGX_ERROR
;

4448 *
code
 = (
uöçå_t
Ë
NULL
;

4451 
hash
.hash = &
hódîs
->hash;

4452 
hash
.
key
 = 
ngx_hash_key_lc
;

4453 
hash
.
max_size
 = 512;

4454 
hash
.
buckë_size
 = 64;

4455 
hash
.
«me
 = "grpc_headers_hash";

4456 
hash
.
poﬁ
 = 
cf
->pool;

4457 
hash
.
ãmp_poﬁ
 = 
NULL
;

4459  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

4460 
	}
}

4464 
	$ngx_hâp_gΩc_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4466 
ngx_hâp_gΩc_loc_c⁄f_t
 *
glcf
 = 
c⁄f
;

4468 
size_t
 
add
;

4469 
ngx_°r_t
 *
vÆue
, *
uæ
;

4470 
ngx_uæ_t
 
u
;

4471 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4473 i‡(
glcf
->
up°ªam
.upstream) {

4477 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4478 
uæ
 = &
vÆue
[1];

4480 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "grpc://", 7) == 0) {

4481 
add
 = 7;

4483 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "grpcs://", 8) == 0) {

4485 #i‡(
NGX_HTTP_SSL
)

4486 
glcf
->
s¶
 = 1;

4488 
add
 = 8;

4490 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4492  
NGX_CONF_ERROR
;

4496 
add
 = 0;

4499 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4501 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

4502 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

4503 
u
.
no_ªsﬁve
 = 1;

4505 
glcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

4506 i‡(
glcf
->
up°ªam
.up°ªam =
NULL
) {

4507  
NGX_CONF_ERROR
;

4510 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

4512 i‡(
u
.
no_p‹t
) {

4513 
glcf
->
ho°
 = 
u
.host;

4516 
glcf
->
ho°
.
Àn
 = 
u
.ho°.À¿+ 1 + u.
p‹t_ãxt
.len;

4517 
glcf
->
ho°
.
d©a
 = 
u
.host.data;

4521 
	`ngx_°r_£t
(&
glcf
->
ho°
, "localhost");

4524 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4526 
˛cf
->
h™dÀr
 = 
ngx_hâp_gΩc_h™dÀr
;

4528 i‡(
˛cf
->
«me
.
Àn
 && clcf->«me.
d©a
[clcf->name.len - 1] == '/') {

4529 
˛cf
->
auto_ªdúe˘
 = 1;

4532  
NGX_CONF_OK
;

4533 
	}
}

4536 #i‡(
NGX_HTTP_SSL
)

4539 
	$ngx_hâp_gΩc_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4541 
ngx_hâp_gΩc_loc_c⁄f_t
 *
glcf
 = 
c⁄f
;

4543 
ngx_°r_t
 *
vÆue
;

4545 i‡(
glcf
->
s¶_∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

4549 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4551 
glcf
->
s¶_∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

4553 i‡(
glcf
->
s¶_∑ssw‹ds
 =
NULL
) {

4554  
NGX_CONF_ERROR
;

4557  
NGX_CONF_OK
;

4558 
	}
}

4561 
ngx_öt_t


4562 
	$ngx_hâp_gΩc_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_gΩc_loc_c⁄f_t
 *
glcf
)

4564 
ngx_poﬁ_˛ónup_t
 *
˛n
;

4566 
glcf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

4567 i‡(
glcf
->
up°ªam
.
s¶
 =
NULL
) {

4568  
NGX_ERROR
;

4571 
glcf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

4573 i‡(
	`ngx_s¶_¸óã
(
glcf
->
up°ªam
.
s¶
, glcf->
s¶_¥Ÿocﬁs
, 
NULL
)

4574 !
NGX_OK
)

4576  
NGX_ERROR
;

4579 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

4580 i‡(
˛n
 =
NULL
) {

4581  
NGX_ERROR
;

4584 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

4585 
˛n
->
d©a
 = 
glcf
->
up°ªam
.
s¶
;

4587 i‡(
glcf
->
s¶_˚πifiˇã
.
Àn
) {

4589 i‡(
glcf
->
s¶_˚πifiˇã_key
.
Àn
 == 0) {

4590 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4592 "f‹ cîtifiˇã \"%V\"", &
glcf
->
s¶_˚πifiˇã
);

4593  
NGX_ERROR
;

4596 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
glcf
->
up°ªam
.
s¶
, &glcf->
s¶_˚πifiˇã
,

4597 &
glcf
->
s¶_˚πifiˇã_key
, glcf->
s¶_∑ssw‹ds
)

4598 !
NGX_OK
)

4600  
NGX_ERROR
;

4604 i‡(
	`ngx_s¶_cùhîs
(
cf
, 
glcf
->
up°ªam
.
s¶
, &glcf->
s¶_cùhîs
, 0)

4605 !
NGX_OK
)

4607  
NGX_ERROR
;

4610 i‡(
glcf
->
up°ªam
.
s¶_vîify
) {

4611 i‡(
glcf
->
s¶_åu°ed_˚πifiˇã
.
Àn
 == 0) {

4612 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4614  
NGX_ERROR
;

4617 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, 
glcf
->
up°ªam
.
s¶
,

4618 &
glcf
->
s¶_åu°ed_˚πifiˇã
,

4619 
glcf
->
s¶_vîify_dïth
)

4620 !
NGX_OK
)

4622  
NGX_ERROR
;

4625 i‡(
	`ngx_s¶_¸l
(
cf
, 
glcf
->
up°ªam
.
s¶
, &glcf->
s¶_¸l
Ë!
NGX_OK
) {

4626  
NGX_ERROR
;

4630 i‡(
	`ngx_s¶_˛õ¡_£ssi⁄_ˇche
(
cf
, 
glcf
->
up°ªam
.
s¶
,

4631 
glcf
->
up°ªam
.
s¶_£ssi⁄_ªu£
)

4632 !
NGX_OK
)

4634  
NGX_ERROR
;

4637 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


4639 i‡(
	`SSL_CTX_£t_Æ≤_¥Ÿos
(
glcf
->
up°ªam
.
s¶
->
˘x
,

4640 (
u_ch¨
 *) "\x02h2", 3)

4643 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4645  
NGX_ERROR
;

4650  
NGX_OK
;

4651 
	}
}

	@src/http/modules/ngx_http_gunzip_filter_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

13 
	~<zlib.h
>

17 
ngx_Êag_t
 
	míabÀ
;

18 
ngx_bufs_t
 
	mbufs
;

19 } 
	tngx_hâp_gunzù_c⁄f_t
;

23 
ngx_chaö_t
 *
	mö
;

24 
ngx_chaö_t
 *
	m‰ì
;

25 
ngx_chaö_t
 *
	mbusy
;

26 
ngx_chaö_t
 *
	mout
;

27 
ngx_chaö_t
 **
	mœ°_out
;

29 
ngx_buf_t
 *
	mö_buf
;

30 
ngx_buf_t
 *
	mout_buf
;

31 
ngx_öt_t
 
	mbufs
;

33 
	m°¨ãd
:1;

34 
	mÊush
:4;

35 
	mªdo
:1;

36 
	md⁄e
:1;

37 
	mnomem
:1;

39 
z_°ªam
 
	mz°ªam
;

40 
ngx_hâp_ªque°_t
 *
	mªque°
;

41 } 
	tngx_hâp_gunzù_˘x_t
;

44 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

46 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

48 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

50 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

52 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

55 *
ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

56 
u_öt
 
size
);

57 
ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
);

59 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

60 *
ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

65 
ngx_comm™d_t
 
	gngx_hâp_gunzù_fûãr_comm™ds
[] = {

67 { 
ngx_°rög
("gunzip"),

68 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

69 
ngx_c⁄f_£t_Êag_¶Ÿ
,

70 
NGX_HTTP_LOC_CONF_OFFSET
,

71 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
íabÀ
),

72 
NULL
 },

74 { 
ngx_°rög
("gunzip_buffers"),

75 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

76 
ngx_c⁄f_£t_bufs_¶Ÿ
,

77 
NGX_HTTP_LOC_CONF_OFFSET
,

78 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
bufs
),

79 
NULL
 },

81 
ngx_nuŒ_comm™d


85 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ_˘x
 = {

86 
NULL
,

87 
ngx_hâp_gunzù_fûãr_öô
,

89 
NULL
,

90 
NULL
,

92 
NULL
,

93 
NULL
,

95 
ngx_hâp_gunzù_¸óã_c⁄f
,

96 
ngx_hâp_gunzù_mîge_c⁄f


100 
ngx_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_hâp_gunzù_fûãr_moduÀ_˘x
,

103 
ngx_hâp_gunzù_fûãr_comm™ds
,

104 
NGX_HTTP_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

117 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

120 
ngx_öt_t


121 
	$ngx_hâp_gunzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

123 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

124 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

126 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

132 i‡(!
c⁄f
->
íabÀ


133 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 =
NULL


134 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
 != 4

135 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
d©a
,

136 (
u_ch¨
 *) "gzip", 4) != 0)

138  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

141 
r
->
gzù_v¨y
 = 1;

143 i‡(!
r
->
gzù_ã°ed
) {

144 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë=
NGX_OK
) {

145  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

148 } i‡(
r
->
gzù_ok
) {

149  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

152 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gunzù_˘x_t
));

153 i‡(
˘x
 =
NULL
) {

154  
NGX_ERROR
;

157 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

159 
˘x
->
ªque°
 = 
r
;

161 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

163 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

164 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

166 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

167 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

168 
	`ngx_hâp_wók_ëag
(
r
);

170  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

171 
	}
}

174 
ngx_öt_t


175 
	$ngx_hâp_gunzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

177 
rc
;

178 
ngx_uöt_t
 
Êush
;

179 
ngx_chaö_t
 *
˛
;

180 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

182 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

184 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

185  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

188 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

191 i‡(!
˘x
->
°¨ãd
) {

192 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

193 
Áûed
;

197 i‡(
ö
) {

198 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

199 
Áûed
;

203 i‡(
˘x
->
nomem
) {

207 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

208 
Áûed
;

211 
˛
 = 
NULL
;

213 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

214 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

215 
˘x
->
nomem
 = 0;

216 
Êush
 = 0;

219 
Êush
 = 
˘x
->
busy
 ? 1 : 0;

230 
rc
 = 
	`ngx_hâp_gunzù_fûãr_add_d©a
(
r
, 
˘x
);

232 i‡(
rc
 =
NGX_DECLINED
) {

236 i‡(
rc
 =
NGX_AGAIN
) {

243 
rc
 = 
	`ngx_hâp_gunzù_fûãr_gë_buf
(
r
, 
˘x
);

245 i‡(
rc
 =
NGX_DECLINED
) {

249 i‡(
rc
 =
NGX_ERROR
) {

250 
Áûed
;

253 
rc
 = 
	`ngx_hâp_gunzù_fûãr_öÊ©e
(
r
, 
˘x
);

255 i‡(
rc
 =
NGX_OK
) {

259 i‡(
rc
 =
NGX_ERROR
) {

260 
Áûed
;

266 i‡(
˘x
->
out
 =
NULL
 && !
Êush
) {

267  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

270 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

272 i‡(
rc
 =
NGX_ERROR
) {

273 
Áûed
;

276 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

277 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

278 
˘x
->
œ°_out
 = &˘x->
out
;

280 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

281 "gunzù out: %p", 
˘x
->
out
);

283 
˘x
->
nomem
 = 0;

284 
Êush
 = 0;

286 i‡(
˘x
->
d⁄e
) {

287  
rc
;

293 
Áûed
:

295 
˘x
->
d⁄e
 = 1;

297  
NGX_ERROR
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

303 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

305 
rc
;

307 
˘x
->
z°ªam
.
√xt_ö
 = 
Z_NULL
;

308 
˘x
->
z°ªam
.
avaû_ö
 = 0;

310 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gunzù_fûãr_Æloc
;

311 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gunzù_fûãr_‰ì
;

312 
˘x
->
z°ªam
.
›aque
 = ctx;

315 
rc
 = 
	`öÊ©eInô2
(&
˘x
->
z°ªam
, 
MAX_WBITS
 + 16);

317 i‡(
rc
 !
Z_OK
) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "öÊ©eInô2(ËÁûed: %d", 
rc
);

320  
NGX_ERROR
;

323 
˘x
->
°¨ãd
 = 1;

325 
˘x
->
œ°_out
 = &˘x->
out
;

326 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

328  
NGX_OK
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

334 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

336 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

337  
NGX_OK
;

340 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

341 "gunzù in: %p", 
˘x
->
ö
);

343 i‡(
˘x
->
ö
 =
NULL
) {

344  
NGX_DECLINED
;

347 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

348 
˘x
->
ö
 = ctx->ö->
√xt
;

350 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

351 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

353 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

355 
˘x
->
ö_buf
,

356 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

358 i‡(
˘x
->
ö_buf
->
œ°_buf
 || ctx->ö_buf->
œ°_ö_chaö
) {

359 
˘x
->
Êush
 = 
Z_FINISH
;

361 } i‡(
˘x
->
ö_buf
->
Êush
) {

362 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

364 } i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

366  
NGX_AGAIN
;

369  
NGX_OK
;

370 
	}
}

373 
ngx_öt_t


374 
	$ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

375 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

377 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

379 i‡(
˘x
->
z°ªam
.
avaû_out
) {

380  
NGX_OK
;

383 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

385 i‡(
˘x
->
‰ì
) {

386 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

387 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

389 
˘x
->
out_buf
->
Êush
 = 0;

391 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

393 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

394 i‡(
˘x
->
out_buf
 =
NULL
) {

395  
NGX_ERROR
;

398 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
;

399 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

400 
˘x
->
bufs
++;

403 
˘x
->
nomem
 = 1;

404  
NGX_DECLINED
;

407 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

408 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

410  
NGX_OK
;

411 
	}
}

414 
ngx_öt_t


415 
	$ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

416 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

418 
rc
;

419 
ngx_buf_t
 *
b
;

420 
ngx_chaö_t
 *
˛
;

422 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

424 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

425 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

426 
˘x
->
Êush
, ctx->
ªdo
);

428 
rc
 = 
	`öÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

430 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

431 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

432 "öÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

433  
NGX_ERROR
;

436 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

438 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

439 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

440 
rc
);

442 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

444 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

446 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

447 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

449 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

450 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

454 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

456 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

460 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

461 i‡(
˛
 =
NULL
) {

462  
NGX_ERROR
;

465 
˛
->
buf
 = 
˘x
->
out_buf
;

466 
˛
->
√xt
 = 
NULL
;

467 *
˘x
->
œ°_out
 = 
˛
;

468 
˘x
->
œ°_out
 = &
˛
->
√xt
;

470 
˘x
->
ªdo
 = 1;

472  
NGX_AGAIN
;

475 
˘x
->
ªdo
 = 0;

477 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

479 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

481 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

482 i‡(
˛
 =
NULL
) {

483  
NGX_ERROR
;

486 
b
 = 
˘x
->
out_buf
;

488 i‡(
	`ngx_buf_size
(
b
) == 0) {

490 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

491 i‡(
b
 =
NULL
) {

492  
NGX_ERROR
;

496 
˘x
->
z°ªam
.
avaû_out
 = 0;

499 
b
->
Êush
 = 1;

501 
˛
->
buf
 = 
b
;

502 
˛
->
√xt
 = 
NULL
;

503 *
˘x
->
œ°_out
 = 
˛
;

504 
˘x
->
œ°_out
 = &
˛
->
√xt
;

506  
NGX_OK
;

509 i‡(
˘x
->
Êush
 =
Z_FINISH
 && ctx->
z°ªam
.
avaû_ö
 == 0) {

511 i‡(
rc
 !
Z_STREAM_END
) {

512 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

513 "öÊ©e(Ëªtu∫ed %d o¿ª•⁄£Énd", 
rc
);

514  
NGX_ERROR
;

517 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

518  
NGX_ERROR
;

521  
NGX_OK
;

524 i‡(
rc
 =
Z_STREAM_END
 && 
˘x
->
z°ªam
.
avaû_ö
 > 0) {

526 
rc
 = 
	`öÊ©eRe£t
(&
˘x
->
z°ªam
);

528 i‡(
rc
 !
Z_OK
) {

529 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

530 "öÊ©eRe£t(ËÁûed: %d", 
rc
);

531  
NGX_ERROR
;

534 
˘x
->
ªdo
 = 1;

536  
NGX_AGAIN
;

539 i‡(
˘x
->
ö
 =
NULL
) {

541 
b
 = 
˘x
->
out_buf
;

543 i‡(
	`ngx_buf_size
(
b
) == 0) {

544  
NGX_OK
;

547 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

548 i‡(
˛
 =
NULL
) {

549  
NGX_ERROR
;

552 
˘x
->
z°ªam
.
avaû_out
 = 0;

554 
˛
->
buf
 = 
b
;

555 
˛
->
√xt
 = 
NULL
;

556 *
˘x
->
œ°_out
 = 
˛
;

557 
˘x
->
œ°_out
 = &
˛
->
√xt
;

559  
NGX_OK
;

562  
NGX_AGAIN
;

563 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

568 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

570 
rc
;

571 
ngx_buf_t
 *
b
;

572 
ngx_chaö_t
 *
˛
;

574 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

577 
rc
 = 
	`öÊ©eEnd
(&
˘x
->
z°ªam
);

579 i‡(
rc
 !
Z_OK
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

581 "öÊ©eEnd(ËÁûed: %d", 
rc
);

582  
NGX_ERROR
;

585 
b
 = 
˘x
->
out_buf
;

587 i‡(
	`ngx_buf_size
(
b
) == 0) {

589 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

590 i‡(
b
 =
NULL
) {

591  
NGX_ERROR
;

595 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

596 i‡(
˛
 =
NULL
) {

597  
NGX_ERROR
;

600 
˛
->
buf
 = 
b
;

601 
˛
->
√xt
 = 
NULL
;

602 *
˘x
->
œ°_out
 = 
˛
;

603 
˘x
->
œ°_out
 = &
˛
->
√xt
;

605 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

606 
b
->
œ°_ö_chaö
 = 1;

607 
b
->
sync
 = 1;

609 
˘x
->
d⁄e
 = 1;

611  
NGX_OK
;

612 
	}
}

616 
	$ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

618 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

620 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

622 
ôems
, 
size
);

624  
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

625 
	}
}

629 
	$ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
)

632 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

634 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

635 "gunzù fªe: %p", 
addªss
);

637 
	}
}

641 
	$ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

643 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

645 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gunzù_c⁄f_t
));

646 i‡(
c⁄f
 =
NULL
) {

647  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

658  
c⁄f
;

659 
	}
}

663 
	$ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

665 
ngx_hâp_gunzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

666 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

668 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

670 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

671 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

673  
NGX_CONF_OK
;

674 
	}
}

677 
ngx_öt_t


678 
	$ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

680 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

681 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gunzù_hódî_fûãr
;

683 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

684 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gunzù_body_fûãr
;

686  
NGX_OK
;

687 
	}
}

	@src/http/modules/ngx_http_gzip_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<zlib.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	mno_buf„r
;

19 
ngx_hash_t
 
	mty≥s
;

21 
ngx_bufs_t
 
	mbufs
;

23 
size_t
 
	mpo°p⁄e_gzùpög
;

24 
ngx_öt_t
 
	mÀvñ
;

25 
size_t
 
	mwbôs
;

26 
size_t
 
	mmemÀvñ
;

27 
ssize_t
 
	mmö_Àngth
;

29 
ngx_¨øy_t
 *
	mty≥s_keys
;

30 } 
	tngx_hâp_gzù_c⁄f_t
;

34 
ngx_chaö_t
 *
	mö
;

35 
ngx_chaö_t
 *
	m‰ì
;

36 
ngx_chaö_t
 *
	mbusy
;

37 
ngx_chaö_t
 *
	mout
;

38 
ngx_chaö_t
 **
	mœ°_out
;

40 
ngx_chaö_t
 *
	mc›õd
;

41 
ngx_chaö_t
 *
	mc›y_buf
;

43 
ngx_buf_t
 *
	mö_buf
;

44 
ngx_buf_t
 *
	mout_buf
;

45 
ngx_öt_t
 
	mbufs
;

47 *
	m¥óŒoˇãd
;

48 *
	m‰ì_mem
;

49 
ngx_uöt_t
 
	mÆloˇãd
;

51 
	mwbôs
;

52 
	mmemÀvñ
;

54 
	mÊush
:4;

55 
	mªdo
:1;

56 
	md⁄e
:1;

57 
	mnomem
:1;

58 
	mgzhódî
:1;

59 
	mbuf„rög
:1;

60 
	möãl
:1;

62 
size_t
 
	mzö
;

63 
size_t
 
	mzout
;

65 
uöt32_t
 
	m¸c32
;

66 
z_°ªam
 
	mz°ªam
;

67 
ngx_hâp_ªque°_t
 *
	mªque°
;

68 } 
	tngx_hâp_gzù_˘x_t
;

71 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

73 
	sgzåaûî
 {

74 
uöt32_t
 
	m¸c32
;

75 
uöt32_t
 
	mzÀn
;

80 
	sgzåaûî
 {

81 
u_ch¨
 
	m¸c32
[4];

82 
u_ch¨
 
	mzÀn
[4];

88 
ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_gzù_˘x_t
 *
˘x
);

90 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
,

91 
ngx_chaö_t
 *
ö
);

92 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_gzù_˘x_t
 *
˘x
);

94 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_gzù_˘x_t
 *
˘x
);

96 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_hâp_gzù_˘x_t
 *
˘x
);

98 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_gzù_˘x_t
 *
˘x
);

100 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_gzù_˘x_t
 *
˘x
);

102 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_gzù_˘x_t
 *
˘x
);

105 *
ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

106 
u_öt
 
size
);

107 
ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
);

108 
ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_gzù_˘x_t
 *
˘x
);

111 
ngx_öt_t
 
ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

112 
ngx_öt_t
 
ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

113 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

115 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

117 *
ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

118 *
∑ª¡
, *
chûd
);

119 *
ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

120 *
ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

123 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_gzù_comp_Àvñ_bounds
 = {

124 
ngx_c⁄f_check_num_bounds
, 1, 9

127 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_wödow_p
 = 
ngx_hâp_gzù_wödow
;

128 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_hash_p
 = 
ngx_hâp_gzù_hash
;

131 
ngx_comm™d_t
 
	gngx_hâp_gzù_fûãr_comm™ds
[] = {

133 { 
ngx_°rög
("gzip"),

134 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


135 |
NGX_CONF_FLAG
,

136 
ngx_c⁄f_£t_Êag_¶Ÿ
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

138 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
íabÀ
),

139 
NULL
 },

141 { 
ngx_°rög
("gzip_buffers"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

143 
ngx_c⁄f_£t_bufs_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
bufs
),

146 
NULL
 },

148 { 
ngx_°rög
("gzip_types"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

150 
ngx_hâp_ty≥s_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
ty≥s_keys
),

153 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

155 { 
ngx_°rög
("gzip_comp_level"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

157 
ngx_c⁄f_£t_num_¶Ÿ
,

158 
NGX_HTTP_LOC_CONF_OFFSET
,

159 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
Àvñ
),

160 &
ngx_hâp_gzù_comp_Àvñ_bounds
 },

162 { 
ngx_°rög
("gzip_window"),

163 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

164 
ngx_c⁄f_£t_size_¶Ÿ
,

165 
NGX_HTTP_LOC_CONF_OFFSET
,

166 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
wbôs
),

167 &
ngx_hâp_gzù_wödow_p
 },

169 { 
ngx_°rög
("gzip_hash"),

170 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

171 
ngx_c⁄f_£t_size_¶Ÿ
,

172 
NGX_HTTP_LOC_CONF_OFFSET
,

173 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
memÀvñ
),

174 &
ngx_hâp_gzù_hash_p
 },

176 { 
ngx_°rög
("postpone_gzipping"),

177 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

178 
ngx_c⁄f_£t_size_¶Ÿ
,

179 
NGX_HTTP_LOC_CONF_OFFSET
,

180 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
po°p⁄e_gzùpög
),

181 
NULL
 },

183 { 
ngx_°rög
("gzip_no_buffer"),

184 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

185 
ngx_c⁄f_£t_Êag_¶Ÿ
,

186 
NGX_HTTP_LOC_CONF_OFFSET
,

187 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
no_buf„r
),

188 
NULL
 },

190 { 
ngx_°rög
("gzip_min_length"),

191 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

192 
ngx_c⁄f_£t_size_¶Ÿ
,

193 
NGX_HTTP_LOC_CONF_OFFSET
,

194 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
mö_Àngth
),

195 
NULL
 },

197 
ngx_nuŒ_comm™d


201 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ_˘x
 = {

202 
ngx_hâp_gzù_add_v¨übÀs
,

203 
ngx_hâp_gzù_fûãr_öô
,

205 
NULL
,

206 
NULL
,

208 
NULL
,

209 
NULL
,

211 
ngx_hâp_gzù_¸óã_c⁄f
,

212 
ngx_hâp_gzù_mîge_c⁄f


216 
ngx_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ
 = {

217 
NGX_MODULE_V1
,

218 &
ngx_hâp_gzù_fûãr_moduÀ_˘x
,

219 
ngx_hâp_gzù_fûãr_comm™ds
,

220 
NGX_HTTP_MODULE
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NULL
,

228 
NGX_MODULE_V1_PADDING


232 
ngx_°r_t
 
	gngx_hâp_gzù_øtio
 = 
ngx_°rög
("gzip_ratio");

234 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

235 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

237 
ngx_uöt_t
 
	gngx_hâp_gzù_assume_öãl
;

240 
ngx_öt_t


241 
	$ngx_hâp_gzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

243 
ngx_èbÀ_ñt_t
 *
h
;

244 
ngx_hâp_gzù_˘x_t
 *
˘x
;

245 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

247 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

249 i‡(!
c⁄f
->
íabÀ


250 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


251 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_FORBIDDEN


252 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_FOUND
)

253 || (
r
->
hódîs_out
.
c⁄ã¡_ícodög


254 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

255 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1

256 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < 
c⁄f
->
mö_Àngth
)

257 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL


258 || 
r
->
hódî_⁄ly
)

260  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

263 
r
->
gzù_v¨y
 = 1;

265 #i‡(
NGX_HTTP_DEGRADATION
)

267 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

269 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

271 i‡(
˛cf
->
gzù_dißbÀ_degød©i⁄
 && 
	`ngx_hâp_degøded
(
r
)) {

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

277 i‡(!
r
->
gzù_ã°ed
) {

278 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë!
NGX_OK
) {

279  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

282 } i‡(!
r
->
gzù_ok
) {

283  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

286 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gzù_˘x_t
));

287 i‡(
˘x
 =
NULL
) {

288  
NGX_ERROR
;

291 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gzù_fûãr_moduÀ
);

293 
˘x
->
ªque°
 = 
r
;

294 
˘x
->
buf„rög
 = (
c⁄f
->
po°p⁄e_gzùpög
 != 0);

296 
	`ngx_hâp_gzù_fûãr_mem‹y
(
r
, 
˘x
);

298 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

299 i‡(
h
 =
NULL
) {

300  
NGX_ERROR
;

303 
h
->
hash
 = 1;

304 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

305 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

306 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

308 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

310 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

311 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

312 
	`ngx_hâp_wók_ëag
(
r
);

314  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

315 
	}
}

318 
ngx_öt_t


319 
	$ngx_hâp_gzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

321 
rc
;

322 
ngx_uöt_t
 
Êush
;

323 
ngx_chaö_t
 *
˛
;

324 
ngx_hâp_gzù_˘x_t
 *
˘x
;

326 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

328 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
 || 
r
->
hódî_⁄ly
) {

329  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

332 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

335 i‡(
˘x
->
buf„rög
) {

346 i‡(
ö
) {

347 
	`ngx_hâp_gzù_fûãr_buf„r
(
˘x
, 
ö
)) {

349 
NGX_OK
:

350  
NGX_OK
;

352 
NGX_DONE
:

353 
ö
 = 
NULL
;

357 
Áûed
;

361 
˘x
->
buf„rög
 = 0;

365 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

366 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

367 
Áûed
;

371 i‡(
ö
) {

372 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

373 
Áûed
;

376 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

379 i‡(
˘x
->
nomem
) {

383 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

384 
Áûed
;

387 
˛
 = 
NULL
;

389 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

390 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

391 
˘x
->
nomem
 = 0;

392 
Êush
 = 0;

395 
Êush
 = 
˘x
->
busy
 ? 1 : 0;

406 
rc
 = 
	`ngx_hâp_gzù_fûãr_add_d©a
(
r
, 
˘x
);

408 i‡(
rc
 =
NGX_DECLINED
) {

412 i‡(
rc
 =
NGX_AGAIN
) {

419 
rc
 = 
	`ngx_hâp_gzù_fûãr_gë_buf
(
r
, 
˘x
);

421 i‡(
rc
 =
NGX_DECLINED
) {

425 i‡(
rc
 =
NGX_ERROR
) {

426 
Áûed
;

430 
rc
 = 
	`ngx_hâp_gzù_fûãr_deÊ©e
(
r
, 
˘x
);

432 i‡(
rc
 =
NGX_OK
) {

436 i‡(
rc
 =
NGX_ERROR
) {

437 
Áûed
;

443 i‡(
˘x
->
out
 =
NULL
 && !
Êush
) {

444 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

446  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

449 i‡(!
˘x
->
gzhódî
) {

450 i‡(
	`ngx_hâp_gzù_fûãr_gzhódî
(
r
, 
˘x
Ë!
NGX_OK
) {

451 
Áûed
;

455 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

457 i‡(
rc
 =
NGX_ERROR
) {

458 
Áûed
;

461 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

463 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

464 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

465 
˘x
->
œ°_out
 = &˘x->
out
;

467 
˘x
->
nomem
 = 0;

468 
Êush
 = 0;

470 i‡(
˘x
->
d⁄e
) {

471  
rc
;

477 
Áûed
:

479 
˘x
->
d⁄e
 = 1;

481 i‡(
˘x
->
¥óŒoˇãd
) {

482 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

484 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

487 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

489  
NGX_ERROR
;

490 
	}
}

494 
	$ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

496 
wbôs
, 
memÀvñ
;

497 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

499 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

501 
wbôs
 = 
c⁄f
->wbits;

502 
memÀvñ
 = 
c⁄f
->memlevel;

504 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 > 0) {

508 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < ((1 << (
wbôs
 - 1)) - 262)) {

509 
wbôs
--;

510 
memÀvñ
--;

513 i‡(
memÀvñ
 < 1) {

514 
memÀvñ
 = 1;

518 
˘x
->
wbôs
 = wbits;

519 
˘x
->
memÀvñ
 = memlevel;

533 i‡(!
ngx_hâp_gzù_assume_öãl
) {

534 
˘x
->
Æloˇãd
 = 8192 + (1 << (
wbôs
 + 2)Ë+ (1 << (
memÀvñ
 + 9));

545 i‡(
c⁄f
->
Àvñ
 == 1) {

546 
wbôs
 = 
	`ngx_max
(wbits, 13);

549 
˘x
->
Æloˇãd
 = 8192 + 16 + (1 << (
wbôs
 + 2))

550 + (1 << (
	`ngx_max
(
memÀvñ
, 8) + 8))

551 + (1 << (
memÀvñ
 + 8));

552 
˘x
->
öãl
 = 1;

554 
	}
}

557 
ngx_öt_t


558 
	$ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

560 
size_t
 
size
, 
buf„ªd
;

561 
ngx_buf_t
 *
b
, *
buf
;

562 
ngx_chaö_t
 *
˛
, **
Œ
;

563 
ngx_hâp_ªque°_t
 *
r
;

564 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

566 
r
 = 
˘x
->
ªque°
;

568 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

570 
buf„ªd
 = 0;

571 
Œ
 = &
˘x
->
ö
;

573 
˛
 = 
˘x
->
ö
; cl; c»˛->
√xt
) {

574 
buf„ªd
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

575 
Œ
 = &
˛
->
√xt
;

578 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

580 
ö
) {

581 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

582 i‡(
˛
 =
NULL
) {

583  
NGX_ERROR
;

586 
b
 = 
ö
->
buf
;

588 
size
 = 
b
->
œ°
 - b->
pos
;

589 
buf„ªd
 +
size
;

591 i‡(
b
->
Êush
 || b->
œ°_buf
 || 
buf„ªd
 > 
c⁄f
->
po°p⁄e_gzùpög
) {

592 
˘x
->
buf„rög
 = 0;

595 i‡(
˘x
->
buf„rög
 && 
size
) {

597 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

598 i‡(
buf
 =
NULL
) {

599  
NGX_ERROR
;

602 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->
pos
, 
b
->pos, 
size
);

603 
b
->
pos
 = b->
œ°
;

605 
buf
->
œ°_buf
 = 
b
->last_buf;

606 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

608 
˛
->
buf
 = buf;

611 
˛
->
buf
 = 
b
;

614 *
Œ
 = 
˛
;

615 
Œ
 = &
˛
->
√xt
;

616 
ö
 = in->
√xt
;

619 *
Œ
 = 
NULL
;

621  
˘x
->
buf„rög
 ? 
NGX_OK
 : 
NGX_DONE
;

622 
	}
}

625 
ngx_öt_t


626 
	$ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

627 
ngx_hâp_gzù_˘x_t
 *
˘x
)

629 
rc
;

630 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

632 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

634 
˘x
->
¥óŒoˇãd
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Æloˇãd
);

635 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

636  
NGX_ERROR
;

639 
˘x
->
‰ì_mem
 = ctx->
¥óŒoˇãd
;

641 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gzù_fûãr_Æloc
;

642 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gzù_fûãr_‰ì
;

643 
˘x
->
z°ªam
.
›aque
 = ctx;

645 
rc
 = 
	`deÊ©eInô2
(&
˘x
->
z°ªam
, (Ë
c⁄f
->
Àvñ
, 
Z_DEFLATED
,

646 - 
˘x
->
wbôs
, ctx->
memÀvñ
, 
Z_DEFAULT_STRATEGY
);

648 i‡(
rc
 !
Z_OK
) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

650 "deÊ©eInô2(ËÁûed: %d", 
rc
);

651  
NGX_ERROR
;

654 
˘x
->
œ°_out
 = &˘x->
out
;

655 
˘x
->
¸c32
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

656 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

658  
NGX_OK
;

659 
	}
}

662 
ngx_öt_t


663 
	$ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

665 
ngx_buf_t
 *
b
;

666 
ngx_chaö_t
 *
˛
;

667 
u_ch¨
 
gzhódî
[10] =

668 { 0x1f, 0x8b, 
Z_DEFLATED
, 0, 0, 0, 0, 0, 0, 3 };

670 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

671 i‡(
b
 =
NULL
) {

672  
NGX_ERROR
;

675 
b
->
mem‹y
 = 1;

676 
b
->
pos
 = 
gzhódî
;

677 
b
->
œ°
 = b->
pos
 + 10;

679 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

680 i‡(
˛
 =
NULL
) {

681  
NGX_ERROR
;

684 
˛
->
buf
 = 
b
;

685 
˛
->
√xt
 = 
˘x
->
out
;

686 
˘x
->
out
 = 
˛
;

688 
˘x
->
gzhódî
 = 1;

690  
NGX_OK
;

691 
	}
}

694 
ngx_öt_t


695 
	$ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

697 
ngx_chaö_t
 *
˛
;

699 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

700  
NGX_OK
;

703 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

704 "gzù in: %p", 
˘x
->
ö
);

706 i‡(
˘x
->
ö
 =
NULL
) {

707  
NGX_DECLINED
;

710 i‡(
˘x
->
c›y_buf
) {

717 
˘x
->
c›y_buf
->
√xt
 = ctx->
c›õd
;

718 
˘x
->
c›õd
 = ctx->
c›y_buf
;

719 
˘x
->
c›y_buf
 = 
NULL
;

722 
˛
 = 
˘x
->
ö
;

723 
˘x
->
ö_buf
 = 
˛
->
buf
;

724 
˘x
->
ö
 = 
˛
->
√xt
;

726 i‡(
˘x
->
ö_buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
) {

727 
˘x
->
c›y_buf
 = 
˛
;

730 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
˛
);

733 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

734 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

736 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

738 
˘x
->
ö_buf
,

739 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

741 i‡(
˘x
->
ö_buf
->
œ°_buf
) {

742 
˘x
->
Êush
 = 
Z_FINISH
;

744 } i‡(
˘x
->
ö_buf
->
Êush
) {

745 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

748 i‡(
˘x
->
z°ªam
.
avaû_ö
) {

750 
˘x
->
¸c32
 = 
	`¸c32
(˘x->¸c32, ctx->
z°ªam
.
√xt_ö
,

751 
˘x
->
z°ªam
.
avaû_ö
);

753 } i‡(
˘x
->
Êush
 =
Z_NO_FLUSH
) {

754  
NGX_AGAIN
;

757  
NGX_OK
;

758 
	}
}

761 
ngx_öt_t


762 
	$ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

764 
ngx_chaö_t
 *
˛
;

765 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

767 i‡(
˘x
->
z°ªam
.
avaû_out
) {

768  
NGX_OK
;

771 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

773 i‡(
˘x
->
‰ì
) {

775 
˛
 = 
˘x
->
‰ì
;

776 
˘x
->
out_buf
 = 
˛
->
buf
;

777 
˘x
->
‰ì
 = 
˛
->
√xt
;

779 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
˛
);

781 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

783 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

784 i‡(
˘x
->
out_buf
 =
NULL
) {

785  
NGX_ERROR
;

788 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

789 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

790 
˘x
->
bufs
++;

793 
˘x
->
nomem
 = 1;

794  
NGX_DECLINED
;

797 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

798 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

800  
NGX_OK
;

801 
	}
}

804 
ngx_öt_t


805 
	$ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

807 
rc
;

808 
ngx_buf_t
 *
b
;

809 
ngx_chaö_t
 *
˛
;

810 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

812 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

814 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

815 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

816 
˘x
->
Êush
, ctx->
ªdo
);

818 
rc
 = 
	`deÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

820 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

821 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

822 "deÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

823  
NGX_ERROR
;

826 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

828 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

829 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

830 
rc
);

832 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

834 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

836 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

837 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

839 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

840 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

844 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

846 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

850 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

851 i‡(
˛
 =
NULL
) {

852  
NGX_ERROR
;

855 
˛
->
buf
 = 
˘x
->
out_buf
;

856 
˛
->
√xt
 = 
NULL
;

857 *
˘x
->
œ°_out
 = 
˛
;

858 
˘x
->
œ°_out
 = &
˛
->
√xt
;

860 
˘x
->
ªdo
 = 1;

862  
NGX_AGAIN
;

865 
˘x
->
ªdo
 = 0;

867 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

869 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

871 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

872 i‡(
˛
 =
NULL
) {

873  
NGX_ERROR
;

876 
b
 = 
˘x
->
out_buf
;

878 i‡(
	`ngx_buf_size
(
b
) == 0) {

880 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

881 i‡(
b
 =
NULL
) {

882  
NGX_ERROR
;

886 
˘x
->
z°ªam
.
avaû_out
 = 0;

889 
b
->
Êush
 = 1;

891 
˛
->
buf
 = 
b
;

892 
˛
->
√xt
 = 
NULL
;

893 *
˘x
->
œ°_out
 = 
˛
;

894 
˘x
->
œ°_out
 = &
˛
->
√xt
;

896 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

898  
NGX_OK
;

901 i‡(
rc
 =
Z_STREAM_END
) {

903 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

904  
NGX_ERROR
;

907  
NGX_OK
;

910 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

912 i‡(
c⁄f
->
no_buf„r
 && 
˘x
->
ö
 =
NULL
) {

914 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

915 i‡(
˛
 =
NULL
) {

916  
NGX_ERROR
;

919 
˛
->
buf
 = 
˘x
->
out_buf
;

920 
˛
->
√xt
 = 
NULL
;

921 *
˘x
->
œ°_out
 = 
˛
;

922 
˘x
->
œ°_out
 = &
˛
->
√xt
;

924  
NGX_OK
;

927  
NGX_AGAIN
;

928 
	}
}

931 
ngx_öt_t


932 
	$ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

933 
ngx_hâp_gzù_˘x_t
 *
˘x
)

935 
rc
;

936 
ngx_buf_t
 *
b
;

937 
ngx_chaö_t
 *
˛
;

938 
gzåaûî
 *
åaûî
;

940 
˘x
->
zö
 = ctx->
z°ªam
.
tŸÆ_ö
;

941 
˘x
->
zout
 = 10 + ctx->
z°ªam
.
tŸÆ_out
 + 8;

943 
rc
 = 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

945 i‡(
rc
 !
Z_OK
) {

946 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

947 "deÊ©eEnd(ËÁûed: %d", 
rc
);

948  
NGX_ERROR
;

951 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

953 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

954 i‡(
˛
 =
NULL
) {

955  
NGX_ERROR
;

958 
˛
->
buf
 = 
˘x
->
out_buf
;

959 
˛
->
√xt
 = 
NULL
;

960 *
˘x
->
œ°_out
 = 
˛
;

961 
˘x
->
œ°_out
 = &
˛
->
√xt
;

963 i‡(
˘x
->
z°ªam
.
avaû_out
 >= 8) {

964 
åaûî
 = (
gzåaûî
 *Ë
˘x
->
out_buf
->
œ°
;

965 
˘x
->
out_buf
->
œ°
 += 8;

966 
˘x
->
out_buf
->
œ°_buf
 = 1;

969 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 8);

970 i‡(
b
 =
NULL
) {

971  
NGX_ERROR
;

974 
b
->
œ°_buf
 = 1;

976 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

977 i‡(
˛
 =
NULL
) {

978  
NGX_ERROR
;

981 
˛
->
buf
 = 
b
;

982 
˛
->
√xt
 = 
NULL
;

983 *
˘x
->
œ°_out
 = 
˛
;

984 
˘x
->
œ°_out
 = &
˛
->
√xt
;

985 
åaûî
 = (
gzåaûî
 *Ë
b
->
pos
;

986 
b
->
œ°
 += 8;

989 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

991 
åaûî
->
¸c32
 = 
˘x
->crc32;

992 
åaûî
->
zÀn
 = 
˘x
->
zö
;

996 
åaûî
->
¸c32
[0] = (
u_ch¨
Ë(
˘x
->crc32 & 0xff);

997 
åaûî
->
¸c32
[1] = (
u_ch¨
Ë((
˘x
->crc32 >> 8) & 0xff);

998 
åaûî
->
¸c32
[2] = (
u_ch¨
Ë((
˘x
->crc32 >> 16) & 0xff);

999 
åaûî
->
¸c32
[3] = (
u_ch¨
Ë((
˘x
->crc32 >> 24) & 0xff);

1001 
åaûî
->
zÀn
[0] = (
u_ch¨
Ë(
˘x
->
zö
 & 0xff);

1002 
åaûî
->
zÀn
[1] = (
u_ch¨
Ë((
˘x
->
zö
 >> 8) & 0xff);

1003 
åaûî
->
zÀn
[2] = (
u_ch¨
Ë((
˘x
->
zö
 >> 16) & 0xff);

1004 
åaûî
->
zÀn
[3] = (
u_ch¨
Ë((
˘x
->
zö
 >> 24) & 0xff);

1008 
˘x
->
z°ªam
.
avaû_ö
 = 0;

1009 
˘x
->
z°ªam
.
avaû_out
 = 0;

1011 
˘x
->
d⁄e
 = 1;

1013 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

1015  
NGX_OK
;

1016 
	}
}

1020 
	$ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

1022 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1024 *
p
;

1025 
ngx_uöt_t
 
Æloc
;

1027 
Æloc
 = 
ôems
 * 
size
;

1029 i‡(
ôems
 =1 && 
Æloc
 % 512 != 0 &&álloc < 8192) {

1036 
Æloc
 = 8192;

1039 i‡(
Æloc
 <
˘x
->
Æloˇãd
) {

1040 
p
 = 
˘x
->
‰ì_mem
;

1041 
˘x
->
‰ì_mem
 +
Æloc
;

1042 
˘x
->
Æloˇãd
 -
Æloc
;

1044 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1046 
ôems
, 
size
, 
Æloc
, 
p
);

1048  
p
;

1051 i‡(
˘x
->
öãl
) {

1052 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1054 "%ud o‡%ui", 
ôems
 * 
size
, 
˘x
->
Æloˇãd
);

1057 
ngx_hâp_gzù_assume_öãl
 = 1;

1060 
p
 = 
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

1062  
p
;

1063 
	}
}

1067 
	$ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
)

1070 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1072 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1073 "gzù fªe: %p", 
addªss
);

1075 
	}
}

1079 
	$ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

1080 
ngx_hâp_gzù_˘x_t
 *
˘x
)

1082 
ngx_chaö_t
 *
˛
;

1084 
˛
 = 
˘x
->
c›õd
; cl; c»˛->
√xt
) {

1085 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˛
->
buf
->
°¨t
);

1088 
˘x
->
c›õd
 = 
NULL
;

1089 
	}
}

1092 
ngx_öt_t


1093 
	$ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1095 
ngx_hâp_v¨übÀ_t
 *
v¨
;

1097 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_gzù_øtio
, 
NGX_HTTP_VAR_NOHASH
);

1098 i‡(
v¨
 =
NULL
) {

1099  
NGX_ERROR
;

1102 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_gzù_øtio_v¨übÀ
;

1104  
NGX_OK
;

1105 
	}
}

1108 
ngx_öt_t


1109 
	$ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1110 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1112 
ngx_uöt_t
 
zöt
, 
z‰ac
;

1113 
ngx_hâp_gzù_˘x_t
 *
˘x
;

1115 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

1117 i‡(
˘x
 =
NULL
 || ctx->
zout
 == 0) {

1118 
v
->
nŸ_found
 = 1;

1119  
NGX_OK
;

1122 
v
->
vÆid
 = 1;

1123 
v
->
no_ˇchóbÀ
 = 0;

1124 
v
->
nŸ_found
 = 0;

1126 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
 + 3);

1127 i‡(
v
->
d©a
 =
NULL
) {

1128  
NGX_ERROR
;

1131 
zöt
 = (
ngx_uöt_t
Ë(
˘x
->
zö
 / ctx->
zout
);

1132 
z‰ac
 = (
ngx_uöt_t
Ë((
˘x
->
zö
 * 100 / ctx->
zout
) % 100);

1134 i‡((
˘x
->
zö
 * 1000 / ctx->
zout
) % 10 > 4) {

1138 
z‰ac
++;

1140 i‡(
z‰ac
 > 99) {

1141 
zöt
++;

1142 
z‰ac
 = 0;

1146 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui.%02ui", 
zöt
, 
z‰ac
) - v->data;

1148  
NGX_OK
;

1149 
	}
}

1153 
	$ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1155 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

1157 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_c⁄f_t
));

1158 i‡(
c⁄f
 =
NULL
) {

1159  
NULL
;

1170 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1171 
c⁄f
->
no_buf„r
 = 
NGX_CONF_UNSET
;

1173 
c⁄f
->
po°p⁄e_gzùpög
 = 
NGX_CONF_UNSET_SIZE
;

1174 
c⁄f
->
Àvñ
 = 
NGX_CONF_UNSET
;

1175 
c⁄f
->
wbôs
 = 
NGX_CONF_UNSET_SIZE
;

1176 
c⁄f
->
memÀvñ
 = 
NGX_CONF_UNSET_SIZE
;

1177 
c⁄f
->
mö_Àngth
 = 
NGX_CONF_UNSET
;

1179  
c⁄f
;

1180 
	}
}

1184 
	$ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1186 
ngx_hâp_gzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1187 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

1189 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1190 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_buf„r
, 
¥ev
->no_buffer, 0);

1192 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

1193 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

1195 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_gzùpög
, 
¥ev
->postpone_gzipping,

1197 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
Àvñ
, 
¥ev
->level, 1);

1198 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
wbôs
, 
¥ev
->wbôs, 
MAX_WBITS
);

1199 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
memÀvñ
, 
¥ev
->memlevel,

1200 
MAX_MEM_LEVEL
 - 1);

1201 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mö_Àngth
, 
¥ev
->min_length, 20);

1203 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1204 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1205 
ngx_hâp_html_deÁu…_ty≥s
)

1206 !
NGX_OK
)

1208  
NGX_CONF_ERROR
;

1211  
NGX_CONF_OK
;

1212 
	}
}

1215 
ngx_öt_t


1216 
	$ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1218 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1219 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gzù_hódî_fûãr
;

1221 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1222 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gzù_body_fûãr
;

1224  
NGX_OK
;

1225 
	}
}

1229 
	$ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1231 
size_t
 *
≈
 = 
d©a
;

1233 
size_t
 
wbôs
, 
wsize
;

1235 
wbôs
 = 15;

1237 
wsize
 = 32 * 1024; wsize > 256; wsize >>= 1) {

1239 i‡(
wsize
 =*
≈
) {

1240 *
≈
 = 
wbôs
;

1242  
NGX_CONF_OK
;

1245 
wbôs
--;

1249 
	}
}

1253 
	$ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1255 
size_t
 *
≈
 = 
d©a
;

1257 
size_t
 
memÀvñ
, 
hsize
;

1259 
memÀvñ
 = 9;

1261 
hsize
 = 128 * 1024; hsize > 256; hsize >>= 1) {

1263 i‡(
hsize
 =*
≈
) {

1264 *
≈
 = 
memÀvñ
;

1266  
NGX_CONF_OK
;

1269 
memÀvñ
--;

1273 
	}
}

	@src/http/modules/ngx_http_gzip_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_GZIP_STATIC_OFF
 0

	)

14 
	#NGX_HTTP_GZIP_STATIC_ON
 1

	)

15 
	#NGX_HTTP_GZIP_STATIC_ALWAYS
 2

	)

19 
ngx_uöt_t
 
	míabÀ
;

20 } 
	tngx_hâp_gzù_°©ic_c⁄f_t
;

23 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

24 *
ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

26 *
chûd
);

27 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

30 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_°©ic
[] = {

31 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_STATIC_OFF
 },

32 { 
ngx_°rög
("⁄"), 
NGX_HTTP_GZIP_STATIC_ON
 },

33 { 
ngx_°rög
("Æways"), 
NGX_HTTP_GZIP_STATIC_ALWAYS
 },

34 { 
ngx_nuŒ_°rög
, 0 }

38 
ngx_comm™d_t
 
	gngx_hâp_gzù_°©ic_comm™ds
[] = {

40 { 
ngx_°rög
("gzip_static"),

41 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

42 
ngx_c⁄f_£t_íum_¶Ÿ
,

43 
NGX_HTTP_LOC_CONF_OFFSET
,

44 
off£tof
(
ngx_hâp_gzù_°©ic_c⁄f_t
, 
íabÀ
),

45 &
ngx_hâp_gzù_°©ic
 },

47 
ngx_nuŒ_comm™d


51 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ_˘x
 = {

52 
NULL
,

53 
ngx_hâp_gzù_°©ic_öô
,

55 
NULL
,

56 
NULL
,

58 
NULL
,

59 
NULL
,

61 
ngx_hâp_gzù_°©ic_¸óã_c⁄f
,

62 
ngx_hâp_gzù_°©ic_mîge_c⁄f


66 
ngx_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_hâp_gzù_°©ic_moduÀ_˘x
,

69 
ngx_hâp_gzù_°©ic_comm™ds
,

70 
NGX_HTTP_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NGX_MODULE_V1_PADDING


82 
ngx_öt_t


83 
	$ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

85 
u_ch¨
 *
p
;

86 
size_t
 
roŸ
;

87 
ngx_°r_t
 
∑th
;

88 
ngx_öt_t
 
rc
;

89 
ngx_uöt_t
 
Àvñ
;

90 
ngx_log_t
 *
log
;

91 
ngx_buf_t
 *
b
;

92 
ngx_chaö_t
 
out
;

93 
ngx_èbÀ_ñt_t
 *
h
;

94 
ngx_›í_fûe_öfo_t
 
of
;

95 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

96 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
gzcf
;

98 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

99  
NGX_DECLINED
;

102 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

103  
NGX_DECLINED
;

106 
gzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_°©ic_moduÀ
);

108 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_OFF
) {

109  
NGX_DECLINED
;

112 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

113 
rc
 = 
	`ngx_hâp_gzù_ok
(
r
);

117 
rc
 = 
NGX_OK
;

120 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

122 i‡(!
˛cf
->
gzù_v¨y
 && 
rc
 !
NGX_OK
) {

123  
NGX_DECLINED
;

126 
log
 = 
r
->
c⁄√˘i⁄
->log;

128 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, (".gz") - 1);

129 i‡(
p
 =
NULL
) {

130  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

133 *
p
++ = '.';

134 *
p
++ = 'g';

135 *
p
++ = 'z';

136 *
p
 = '\0';

138 
∑th
.
Àn
 = 
p
 -Ö©h.
d©a
;

140 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

141 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

143 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

145 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

146 
of
.
dúe˘io
 = 
˛cf
->directio;

147 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

148 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

149 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

150 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

152 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

153  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

156 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

157 !
NGX_OK
)

159 
of
.
îr
) {

162  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

164 
NGX_ENOENT
:

165 
NGX_ENOTDIR
:

166 
NGX_ENAMETOOLONG
:

168  
NGX_DECLINED
;

170 
NGX_EACCES
:

171 #i‡(
NGX_HAVE_OPENAT
)

172 
NGX_EMLINK
:

173 
NGX_ELOOP
:

176 
Àvñ
 = 
NGX_LOG_ERR
;

181 
Àvñ
 = 
NGX_LOG_CRIT
;

185 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

186 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

188  
NGX_DECLINED
;

191 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

192 
r
->
gzù_v¨y
 = 1;

194 i‡(
rc
 !
NGX_OK
) {

195  
NGX_DECLINED
;

199 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

201 i‡(
of
.
is_dú
) {

202 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

203  
NGX_DECLINED
;

206 #i‡!(
NGX_WIN32
)

208 i‡(!
of
.
is_fûe
) {

209 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

210 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

212  
NGX_HTTP_NOT_FOUND
;

217 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

219 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

221 i‡(
rc
 !
NGX_OK
) {

222  
rc
;

225 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

227 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

229 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

231 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

232  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

235 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

236  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

239 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

240 i‡(
h
 =
NULL
) {

241  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

244 
h
->
hash
 = 1;

245 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

246 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

247 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

251 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

252 i‡(
b
 =
NULL
) {

253  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

256 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

257 i‡(
b
->
fûe
 =
NULL
) {

258  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

261 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

263 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

264  
rc
;

267 
b
->
fûe_pos
 = 0;

268 
b
->
fûe_œ°
 = 
of
.
size
;

270 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

271 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

272 
b
->
œ°_ö_chaö
 = 1;

274 
b
->
fûe
->
fd
 = 
of
.fd;

275 
b
->
fûe
->
«me
 = 
∑th
;

276 
b
->
fûe
->
log
 =Üog;

277 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

279 
out
.
buf
 = 
b
;

280 
out
.
√xt
 = 
NULL
;

282  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

283 
	}
}

287 
	$ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

289 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
;

291 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_°©ic_c⁄f_t
));

292 i‡(
c⁄f
 =
NULL
) {

293  
NULL
;

296 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

298  
c⁄f
;

299 
	}
}

303 
	$ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

305 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

306 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
 = 
chûd
;

308 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

309 
NGX_HTTP_GZIP_STATIC_OFF
);

311  
NGX_CONF_OK
;

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

318 
ngx_hâp_h™dÀr_±
 *
h
;

319 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

321 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

323 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

324 i‡(
h
 =
NULL
) {

325  
NGX_ERROR
;

328 *
h
 = 
ngx_hâp_gzù_°©ic_h™dÀr
;

330  
NGX_OK
;

331 
	}
}

	@src/http/modules/ngx_http_headers_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_hódî_vÆ_s
 
	tngx_hâp_hódî_vÆ_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_£t_hódî_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_hâp_hódî_vÆ_t
 *
	thv
, 
	tngx_°r_t
 *
	tvÆue
);

20 
ngx_°r_t
 
«me
;

21 
ngx_uöt_t
 
off£t
;

22 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

23 } 
	tngx_hâp_£t_hódî_t
;

26 
	sngx_hâp_hódî_vÆ_s
 {

27 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

28 
ngx_°r_t
 
key
;

29 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

30 
ngx_uöt_t
 
off£t
;

31 
ngx_uöt_t
 
Æways
;

36 
NGX_HTTP_EXPIRES_OFF
,

37 
NGX_HTTP_EXPIRES_EPOCH
,

38 
NGX_HTTP_EXPIRES_MAX
,

39 
NGX_HTTP_EXPIRES_ACCESS
,

40 
NGX_HTTP_EXPIRES_MODIFIED
,

41 
NGX_HTTP_EXPIRES_DAILY
,

42 
NGX_HTTP_EXPIRES_UNSET


43 } 
	tngx_hâp_expúes_t
;

47 
ngx_hâp_expúes_t
 
expúes
;

48 
time_t
 
expúes_time
;

49 
ngx_hâp_com∂ex_vÆue_t
 *
expúes_vÆue
;

50 
ngx_¨øy_t
 *
hódîs
;

51 
ngx_¨øy_t
 *
åaûîs
;

52 } 
	tngx_hâp_hódîs_c⁄f_t
;

55 
ngx_öt_t
 
	`ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
);

57 
ngx_öt_t
 
	`ngx_hâp_∑r£_expúes
(
ngx_°r_t
 *
vÆue
,

58 
ngx_hâp_expúes_t
 *
expúes
, 
time_t
 *
expúes_time
, **
îr
);

59 
ngx_öt_t
 
	`ngx_hâp_add_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

61 
ngx_öt_t
 
	`ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
,

62 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

63 
ngx_öt_t
 
	`ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

65 
ngx_öt_t
 
	`ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

66 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

68 *
	`ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

69 *
	`ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

70 *
∑ª¡
, *
chûd
);

71 
ngx_öt_t
 
	`ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

72 *
	`ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
	`ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

78 
ngx_hâp_£t_hódî_t
 
ngx_hâp_£t_hódîs
[] = {

80 { 
	`ngx_°rög
("Cache-Control"),

81 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
),

82 
ngx_hâp_add_mu…i_hódî_löes
 },

84 { 
	`ngx_°rög
("Link"),

85 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
lök
),

86 
ngx_hâp_add_mu…i_hódî_löes
 },

88 { 
	`ngx_°rög
("Last-Modified"),

89 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
),

90 
ngx_hâp_£t_œ°_modifõd
 },

92 { 
	`ngx_°rög
("ETag"),

93 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
),

94 
ngx_hâp_£t_ª•⁄£_hódî
 },

96 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

97 
	}
};

100 
ngx_comm™d_t
 
	gngx_hâp_hódîs_fûãr_comm™ds
[] = {

102 { 
ngx_°rög
("expires"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


104 |
NGX_CONF_TAKE12
,

105 
ngx_hâp_hódîs_expúes
,

106 
NGX_HTTP_LOC_CONF_OFFSET
,

108 
NULL
 },

110 { 
ngx_°rög
("add_header"),

111 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


112 |
NGX_CONF_TAKE23
,

113 
ngx_hâp_hódîs_add
,

114 
NGX_HTTP_LOC_CONF_OFFSET
,

115 
off£tof
(
ngx_hâp_hódîs_c⁄f_t
, 
hódîs
),

116 
NULL
 },

118 { 
ngx_°rög
("add_trailer"),

119 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


120 |
NGX_CONF_TAKE23
,

121 
ngx_hâp_hódîs_add
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
off£tof
(
ngx_hâp_hódîs_c⁄f_t
, 
åaûîs
),

124 
NULL
 },

126 
ngx_nuŒ_comm™d


130 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ_˘x
 = {

131 
NULL
,

132 
ngx_hâp_hódîs_fûãr_öô
,

134 
NULL
,

135 
NULL
,

137 
NULL
,

138 
NULL
,

140 
ngx_hâp_hódîs_¸óã_c⁄f
,

141 
ngx_hâp_hódîs_mîge_c⁄f


145 
ngx_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ
 = {

146 
NGX_MODULE_V1
,

147 &
ngx_hâp_hódîs_fûãr_moduÀ_˘x
,

148 
ngx_hâp_hódîs_fûãr_comm™ds
,

149 
NGX_HTTP_MODULE
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NULL
,

154 
NULL
,

155 
NULL
,

156 
NULL
,

157 
NGX_MODULE_V1_PADDING


161 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

162 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

165 
ngx_öt_t


166 
	$ngx_hâp_hódîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

168 
ngx_°r_t
 
vÆue
;

169 
ngx_uöt_t
 
i
, 
ß„_°©us
;

170 
ngx_hâp_hódî_vÆ_t
 *
h
;

171 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

173 i‡(
r
 !r->
maö
) {

174  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

177 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

179 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_OFF


180 && 
c⁄f
->
hódîs
 =
NULL


181 && 
c⁄f
->
åaûîs
 =
NULL
)

183  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

186 
r
->
hódîs_out
.
°©us
) {

188 
NGX_HTTP_OK
:

189 
NGX_HTTP_CREATED
:

190 
NGX_HTTP_NO_CONTENT
:

191 
NGX_HTTP_PARTIAL_CONTENT
:

192 
NGX_HTTP_MOVED_PERMANENTLY
:

193 
NGX_HTTP_MOVED_TEMPORARILY
:

194 
NGX_HTTP_SEE_OTHER
:

195 
NGX_HTTP_NOT_MODIFIED
:

196 
NGX_HTTP_TEMPORARY_REDIRECT
:

197 
NGX_HTTP_PERMANENT_REDIRECT
:

198 
ß„_°©us
 = 1;

202 
ß„_°©us
 = 0;

206 i‡(
c⁄f
->
expúes
 !
NGX_HTTP_EXPIRES_OFF
 && 
ß„_°©us
) {

207 i‡(
	`ngx_hâp_£t_expúes
(
r
, 
c⁄f
Ë!
NGX_OK
) {

208  
NGX_ERROR
;

212 i‡(
c⁄f
->
hódîs
) {

213 
h
 = 
c⁄f
->
hódîs
->
ñts
;

214 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

216 i‡(!
ß„_°©us
 && !
h
[
i
].
Æways
) {

220 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

221  
NGX_ERROR
;

224 i‡(
h
[
i
].
	`h™dÀr
(
r
, &h[i], &
vÆue
Ë!
NGX_OK
) {

225  
NGX_ERROR
;

230 i‡(
c⁄f
->
åaûîs
) {

231 
h
 = 
c⁄f
->
åaûîs
->
ñts
;

232 
i
 = 0; i < 
c⁄f
->
åaûîs
->
√…s
; i++) {

234 i‡(!
ß„_°©us
 && !
h
[
i
].
Æways
) {

238 
r
->
ex≥˘_åaûîs
 = 1;

243  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

244 
	}
}

247 
ngx_öt_t


248 
	$ngx_hâp_åaûîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

250 
ngx_°r_t
 
vÆue
;

251 
ngx_uöt_t
 
i
, 
ß„_°©us
;

252 
ngx_chaö_t
 *
˛
;

253 
ngx_èbÀ_ñt_t
 *
t
;

254 
ngx_hâp_hódî_vÆ_t
 *
h
;

255 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

257 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

259 i‡(
ö
 =
NULL


260 || 
c⁄f
->
åaûîs
 =
NULL


261 || !
r
->
ex≥˘_åaûîs


262 || 
r
->
hódî_⁄ly
)

264  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

267 
˛
 = 
ö
; cl; c»˛->
√xt
) {

268 i‡(
˛
->
buf
->
œ°_buf
) {

273 i‡(
˛
 =
NULL
) {

274  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

277 
r
->
hódîs_out
.
°©us
) {

279 
NGX_HTTP_OK
:

280 
NGX_HTTP_CREATED
:

281 
NGX_HTTP_NO_CONTENT
:

282 
NGX_HTTP_PARTIAL_CONTENT
:

283 
NGX_HTTP_MOVED_PERMANENTLY
:

284 
NGX_HTTP_MOVED_TEMPORARILY
:

285 
NGX_HTTP_SEE_OTHER
:

286 
NGX_HTTP_NOT_MODIFIED
:

287 
NGX_HTTP_TEMPORARY_REDIRECT
:

288 
NGX_HTTP_PERMANENT_REDIRECT
:

289 
ß„_°©us
 = 1;

293 
ß„_°©us
 = 0;

297 
h
 = 
c⁄f
->
åaûîs
->
ñts
;

298 
i
 = 0; i < 
c⁄f
->
åaûîs
->
√…s
; i++) {

300 i‡(!
ß„_°©us
 && !
h
[
i
].
Æways
) {

304 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

305  
NGX_ERROR
;

308 i‡(
vÆue
.
Àn
) {

309 
t
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
åaûîs
);

310 i‡(
t
 =
NULL
) {

311  
NGX_ERROR
;

314 
t
->
key
 = 
h
[
i
].key;

315 
t
->
vÆue
 = value;

316 
t
->
hash
 = 1;

320  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

321 
	}
}

324 
ngx_öt_t


325 
	$ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
)

327 *
îr
;

328 
size_t
 
Àn
;

329 
time_t
 
now
, 
expúes_time
, 
max_age
;

330 
ngx_°r_t
 
vÆue
;

331 
ngx_öt_t
 
rc
;

332 
ngx_uöt_t
 
i
;

333 
ngx_èbÀ_ñt_t
 *
e
, *
cc
, **
c˝
;

334 
ngx_hâp_expúes_t
 
expúes
;

336 
expúes
 = 
c⁄f
->expires;

337 
expúes_time
 = 
c⁄f
->expires_time;

339 i‡(
c⁄f
->
expúes_vÆue
 !
NULL
) {

341 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
expúes_vÆue
, &
vÆue
Ë!
NGX_OK
) {

342  
NGX_ERROR
;

345 
rc
 = 
	`ngx_hâp_∑r£_expúes
(&
vÆue
, &
expúes
, &
expúes_time
, &
îr
);

347 i‡(
rc
 !
NGX_OK
) {

348  
NGX_OK
;

351 i‡(
expúes
 =
NGX_HTTP_EXPIRES_OFF
) {

352  
NGX_OK
;

356 
e
 = 
r
->
hódîs_out
.
expúes
;

358 i‡(
e
 =
NULL
) {

360 
e
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

361 i‡(
e
 =
NULL
) {

362  
NGX_ERROR
;

365 
r
->
hódîs_out
.
expúes
 = 
e
;

367 
e
->
hash
 = 1;

368 
	`ngx_°r_£t
(&
e
->
key
, "Expires");

371 
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT");

372 
e
->
vÆue
.
Àn
 =Üen - 1;

374 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

376 i‡(
c˝
 =
NULL
) {

378 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

379 1, (
ngx_èbÀ_ñt_t
 *))

380 !
NGX_OK
)

382  
NGX_ERROR
;

385 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

386 i‡(
cc
 =
NULL
) {

387  
NGX_ERROR
;

390 
cc
->
hash
 = 1;

391 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

393 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

394 i‡(
c˝
 =
NULL
) {

395  
NGX_ERROR
;

398 *
c˝
 = 
cc
;

401 
i
 = 1; i < 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
√…s
; i++) {

402 
c˝
[
i
]->
hash
 = 0;

405 
cc
 = 
c˝
[0];

408 i‡(
expúes
 =
NGX_HTTP_EXPIRES_EPOCH
) {

409 
e
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 01 Jan 1970 00:00:01 GMT";

410 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

411  
NGX_OK
;

414 i‡(
expúes
 =
NGX_HTTP_EXPIRES_MAX
) {

415 
e
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 31 Dec 2037 23:55:55 GMT";

417 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=315360000");

418  
NGX_OK
;

421 
e
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

422 i‡(
e
->
vÆue
.
d©a
 =
NULL
) {

423  
NGX_ERROR
;

426 i‡(
expúes_time
 =0 && 
expúes
 !
NGX_HTTP_EXPIRES_DAILY
) {

427 
	`ngx_mem˝y
(
e
->
vÆue
.
d©a
, 
ngx_ˇched_hâp_time
.data,

428 
ngx_ˇched_hâp_time
.
Àn
 + 1);

429 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=0");

430  
NGX_OK
;

433 
now
 = 
	`ngx_time
();

435 i‡(
expúes
 =
NGX_HTTP_EXPIRES_DAILY
) {

436 
expúes_time
 = 
	`ngx_√xt_time
(expires_time);

437 
max_age
 = 
expúes_time
 - 
now
;

439 } i‡(
expúes
 =
NGX_HTTP_EXPIRES_ACCESS


440 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

442 
max_age
 = 
expúes_time
;

443 
expúes_time
 +
now
;

446 
expúes_time
 +
r
->
hódîs_out
.
œ°_modifõd_time
;

447 
max_age
 = 
expúes_time
 - 
now
;

450 
	`ngx_hâp_time
(
e
->
vÆue
.
d©a
, 
expúes_time
);

452 i‡(
c⁄f
->
expúes_time
 < 0 || 
max_age
 < 0) {

453 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

454  
NGX_OK
;

457 
cc
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

458 ("max-age="Ë+ 
NGX_TIME_T_LEN
 + 1);

459 i‡(
cc
->
vÆue
.
d©a
 =
NULL
) {

460  
NGX_ERROR
;

463 
cc
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(cc->vÆue.
d©a
, "max-age=%T", 
max_age
)

464 - 
cc
->
vÆue
.
d©a
;

466  
NGX_OK
;

467 
	}
}

470 
ngx_öt_t


471 
	$ngx_hâp_∑r£_expúes
(
ngx_°r_t
 *
vÆue
, 
ngx_hâp_expúes_t
 *
expúes
,

472 
time_t
 *
expúes_time
, **
îr
)

474 
ngx_uöt_t
 
möus
;

476 i‡(*
expúes
 !
NGX_HTTP_EXPIRES_MODIFIED
) {

478 i‡(
vÆue
->
Àn
 =5 && 
	`ngx_°∫cmp
(vÆue->
d©a
, "epoch", 5) == 0) {

479 *
expúes
 = 
NGX_HTTP_EXPIRES_EPOCH
;

480  
NGX_OK
;

483 i‡(
vÆue
->
Àn
 =3 && 
	`ngx_°∫cmp
(vÆue->
d©a
, "max", 3) == 0) {

484 *
expúes
 = 
NGX_HTTP_EXPIRES_MAX
;

485  
NGX_OK
;

488 i‡(
vÆue
->
Àn
 =3 && 
	`ngx_°∫cmp
(vÆue->
d©a
, "off", 3) == 0) {

489 *
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

490  
NGX_OK
;

494 i‡(
vÆue
->
Àn
 && vÆue->
d©a
[0] == '@') {

495 
vÆue
->
d©a
++;

496 
vÆue
->
Àn
--;

497 
möus
 = 0;

499 i‡(*
expúes
 =
NGX_HTTP_EXPIRES_MODIFIED
) {

500 *
îr
 = "dailyÅime cannot be used with \"modified\"Öarameter";

501  
NGX_ERROR
;

504 *
expúes
 = 
NGX_HTTP_EXPIRES_DAILY
;

506 } i‡(
vÆue
->
Àn
 && vÆue->
d©a
[0] == '+') {

507 
vÆue
->
d©a
++;

508 
vÆue
->
Àn
--;

509 
möus
 = 0;

511 } i‡(
vÆue
->
Àn
 && vÆue->
d©a
[0] == '-') {

512 
vÆue
->
d©a
++;

513 
vÆue
->
Àn
--;

514 
möus
 = 1;

517 
möus
 = 0;

520 *
expúes_time
 = 
	`ngx_∑r£_time
(
vÆue
, 1);

522 i‡(*
expúes_time
 =(
time_t
Ë
NGX_ERROR
) {

523 *
îr
 = "invalid value";

524  
NGX_ERROR
;

527 i‡(*
expúes
 =
NGX_HTTP_EXPIRES_DAILY


528 && *
expúes_time
 > 24 * 60 * 60)

530 *
îr
 = "dailyÅime value must beÜessÅhan 24 hours";

531  
NGX_ERROR
;

534 i‡(
möus
) {

535 *
expúes_time
 = - *expires_time;

538  
NGX_OK
;

539 
	}
}

542 
ngx_öt_t


543 
	$ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

544 
ngx_°r_t
 *
vÆue
)

546 
ngx_èbÀ_ñt_t
 *
h
;

548 i‡(
vÆue
->
Àn
) {

549 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

550 i‡(
h
 =
NULL
) {

551  
NGX_ERROR
;

554 
h
->
hash
 = 1;

555 
h
->
key
 = 
hv
->key;

556 
h
->
vÆue
 = *value;

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_hâp_add_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

565 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
)

567 
ngx_¨øy_t
 *
∑
;

568 
ngx_èbÀ_ñt_t
 *
h
, **
ph
;

570 i‡(
vÆue
->
Àn
 == 0) {

571  
NGX_OK
;

574 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

576 i‡(
∑
->
ñts
 =
NULL
) {

577 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

579  
NGX_ERROR
;

583 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

584 i‡(
h
 =
NULL
) {

585  
NGX_ERROR
;

588 
h
->
hash
 = 1;

589 
h
->
key
 = 
hv
->key;

590 
h
->
vÆue
 = *value;

592 
ph
 = 
	`ngx_¨øy_push
(
∑
);

593 i‡(
ph
 =
NULL
) {

594  
NGX_ERROR
;

597 *
ph
 = 
h
;

599  
NGX_OK
;

600 
	}
}

603 
ngx_öt_t


604 
	$ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

605 
ngx_°r_t
 *
vÆue
)

607 i‡(
	`ngx_hâp_£t_ª•⁄£_hódî
(
r
, 
hv
, 
vÆue
Ë!
NGX_OK
) {

608  
NGX_ERROR
;

611 
r
->
hódîs_out
.
œ°_modifõd_time
 =

612 (
vÆue
->
Àn
Ë? 
	`ngx_∑r£_hâp_time
(vÆue->
d©a
, value->len) : -1;

614  
NGX_OK
;

615 
	}
}

618 
ngx_öt_t


619 
	$ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

620 
ngx_°r_t
 *
vÆue
)

622 
ngx_èbÀ_ñt_t
 *
h
, **
ﬁd
;

624 
ﬁd
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

626 i‡(
vÆue
->
Àn
 == 0) {

627 i‡(*
ﬁd
) {

628 (*
ﬁd
)->
hash
 = 0;

629 *
ﬁd
 = 
NULL
;

632  
NGX_OK
;

635 i‡(*
ﬁd
) {

636 
h
 = *
ﬁd
;

639 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

640 i‡(
h
 =
NULL
) {

641  
NGX_ERROR
;

644 *
ﬁd
 = 
h
;

647 
h
->
hash
 = 1;

648 
h
->
key
 = 
hv
->key;

649 
h
->
vÆue
 = *value;

651  
NGX_OK
;

652 
	}
}

656 
	$ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

658 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

660 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_hódîs_c⁄f_t
));

661 i‡(
c⁄f
 =
NULL
) {

662  
NULL
;

674 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_UNSET
;

676  
c⁄f
;

677 
	}
}

681 
	$ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

683 
ngx_hâp_hódîs_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

684 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
 = 
chûd
;

686 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

687 
c⁄f
->
expúes
 = 
¥ev
->expires;

688 
c⁄f
->
expúes_time
 = 
¥ev
->expires_time;

689 
c⁄f
->
expúes_vÆue
 = 
¥ev
->expires_value;

691 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

692 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

696 i‡(
c⁄f
->
hódîs
 =
NULL
) {

697 
c⁄f
->
hódîs
 = 
¥ev
->headers;

700 i‡(
c⁄f
->
åaûîs
 =
NULL
) {

701 
c⁄f
->
åaûîs
 = 
¥ev
->trailers;

704  
NGX_CONF_OK
;

705 
	}
}

708 
ngx_öt_t


709 
	$ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

711 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

712 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódîs_fûãr
;

714 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

715 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_åaûîs_fûãr
;

717  
NGX_OK
;

718 
	}
}

722 
	$ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

724 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

726 *
îr
;

727 
ngx_°r_t
 *
vÆue
;

728 
ngx_öt_t
 
rc
;

729 
ngx_uöt_t
 
n
;

730 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

731 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

733 i‡(
hcf
->
expúes
 !
NGX_HTTP_EXPIRES_UNSET
) {

737 
vÆue
 = 
cf
->
¨gs
->
ñts
;

739 i‡(
cf
->
¨gs
->
√…s
 == 2) {

741 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_ACCESS
;

743 
n
 = 1;

747 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "modified") != 0) {

751 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MODIFIED
;

753 
n
 = 2;

756 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

758 
ccv
.
cf
 = cf;

759 
ccv
.
vÆue
 = &vÆue[
n
];

760 
ccv
.
com∂ex_vÆue
 = &
cv
;

762 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

763  
NGX_CONF_ERROR
;

766 i‡(
cv
.
Àngths
 !
NULL
) {

768 
hcf
->
expúes_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

769 (
ngx_hâp_com∂ex_vÆue_t
));

770 i‡(
hcf
->
expúes_vÆue
 =
NULL
) {

771  
NGX_CONF_ERROR
;

774 *
hcf
->
expúes_vÆue
 = 
cv
;

776  
NGX_CONF_OK
;

779 
rc
 = 
	`ngx_hâp_∑r£_expúes
(&
vÆue
[
n
], &
hcf
->
expúes
, &hcf->
expúes_time
,

780 &
îr
);

781 i‡(
rc
 !
NGX_OK
) {

782  
îr
;

785  
NGX_CONF_OK
;

786 
	}
}

790 
	$ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

792 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

794 
ngx_°r_t
 *
vÆue
;

795 
ngx_uöt_t
 
i
;

796 
ngx_¨øy_t
 **
hódîs
;

797 
ngx_hâp_hódî_vÆ_t
 *
hv
;

798 
ngx_hâp_£t_hódî_t
 *
£t
;

799 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

801 
vÆue
 = 
cf
->
¨gs
->
ñts
;

803 
hódîs
 = (
ngx_¨øy_t
 **Ë((*Ë
hcf
 + 
cmd
->
off£t
);

805 i‡(*
hódîs
 =
NULL
) {

806 *
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

807 (
ngx_hâp_hódî_vÆ_t
));

808 i‡(*
hódîs
 =
NULL
) {

809  
NGX_CONF_ERROR
;

813 
hv
 = 
	`ngx_¨øy_push
(*
hódîs
);

814 i‡(
hv
 =
NULL
) {

815  
NGX_CONF_ERROR
;

818 
hv
->
key
 = 
vÆue
[1];

819 
hv
->
h™dÀr
 = 
NULL
;

820 
hv
->
off£t
 = 0;

821 
hv
->
Æways
 = 0;

823 i‡(
hódîs
 =&
hcf
->headers) {

824 
hv
->
h™dÀr
 = 
ngx_hâp_add_hódî
;

826 
£t
 = 
ngx_hâp_£t_hódîs
;

827 
i
 = 0; 
£t
[i].
«me
.
Àn
; i++) {

828 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, 
£t
[
i
].
«me
.data) != 0) {

832 
hv
->
off£t
 = 
£t
[
i
].offset;

833 
hv
->
h™dÀr
 = 
£t
[
i
].handler;

839 i‡(
vÆue
[2].
Àn
 == 0) {

840 
	`ngx_memzîo
(&
hv
->
vÆue
, (
ngx_hâp_com∂ex_vÆue_t
));

843 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

845 
ccv
.
cf
 = cf;

846 
ccv
.
vÆue
 = &value[2];

847 
ccv
.
com∂ex_vÆue
 = &
hv
->
vÆue
;

849 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

850  
NGX_CONF_ERROR
;

854 i‡(
cf
->
¨gs
->
√…s
 == 3) {

855  
NGX_CONF_OK
;

858 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "always") != 0) {

859 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

860 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

861  
NGX_CONF_ERROR
;

864 
hv
->
Æways
 = 1;

866  
NGX_CONF_OK
;

867 
	}
}

	@src/http/modules/ngx_http_image_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<gd.h
>

15 
	#NGX_HTTP_IMAGE_OFF
 0

	)

16 
	#NGX_HTTP_IMAGE_TEST
 1

	)

17 
	#NGX_HTTP_IMAGE_SIZE
 2

	)

18 
	#NGX_HTTP_IMAGE_RESIZE
 3

	)

19 
	#NGX_HTTP_IMAGE_CROP
 4

	)

20 
	#NGX_HTTP_IMAGE_ROTATE
 5

	)

23 
	#NGX_HTTP_IMAGE_START
 0

	)

24 
	#NGX_HTTP_IMAGE_READ
 1

	)

25 
	#NGX_HTTP_IMAGE_PROCESS
 2

	)

26 
	#NGX_HTTP_IMAGE_PASS
 3

	)

27 
	#NGX_HTTP_IMAGE_DONE
 4

	)

30 
	#NGX_HTTP_IMAGE_NONE
 0

	)

31 
	#NGX_HTTP_IMAGE_JPEG
 1

	)

32 
	#NGX_HTTP_IMAGE_GIF
 2

	)

33 
	#NGX_HTTP_IMAGE_PNG
 3

	)

34 
	#NGX_HTTP_IMAGE_WEBP
 4

	)

37 
	#NGX_HTTP_IMAGE_BUFFERED
 0x08

	)

41 
ngx_uöt_t
 
	mfûãr
;

42 
ngx_uöt_t
 
	mwidth
;

43 
ngx_uöt_t
 
	mheight
;

44 
ngx_uöt_t
 
	m™gÀ
;

45 
ngx_uöt_t
 
	mj≥g_quÆôy
;

46 
ngx_uöt_t
 
	mwebp_quÆôy
;

47 
ngx_uöt_t
 
	msh¨≥n
;

49 
ngx_Êag_t
 
	må™•¨ícy
;

50 
ngx_Êag_t
 
	möãæa˚
;

52 
ngx_hâp_com∂ex_vÆue_t
 *
	mwcv
;

53 
ngx_hâp_com∂ex_vÆue_t
 *
	mhcv
;

54 
ngx_hâp_com∂ex_vÆue_t
 *
	macv
;

55 
ngx_hâp_com∂ex_vÆue_t
 *
	mjqcv
;

56 
ngx_hâp_com∂ex_vÆue_t
 *
	mwqcv
;

57 
ngx_hâp_com∂ex_vÆue_t
 *
	mshcv
;

59 
size_t
 
	mbuf„r_size
;

60 } 
	tngx_hâp_image_fûãr_c⁄f_t
;

64 
u_ch¨
 *
	mimage
;

65 
u_ch¨
 *
	mœ°
;

67 
size_t
 
	mÀngth
;

69 
ngx_uöt_t
 
	mwidth
;

70 
ngx_uöt_t
 
	mheight
;

71 
ngx_uöt_t
 
	mmax_width
;

72 
ngx_uöt_t
 
	mmax_height
;

73 
ngx_uöt_t
 
	m™gÀ
;

75 
ngx_uöt_t
 
	mpha£
;

76 
ngx_uöt_t
 
	mty≥
;

77 
ngx_uöt_t
 
	mf‹˚
;

78 } 
	tngx_hâp_image_fûãr_˘x_t
;

81 
ngx_öt_t
 
ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

83 
ngx_uöt_t
 
ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

84 
ngx_öt_t
 
ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

85 
ngx_buf_t
 *
ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
);

86 
ngx_buf_t
 *
ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

88 
ngx_buf_t
 *
ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

90 
ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

91 
ngx_öt_t
 
ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

94 
ngx_buf_t
 *
ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

96 
gdImagePå
 
ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

98 
gdImagePå
 
ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
,

99 
cﬁ‹s
);

100 
u_ch¨
 *
ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
,

101 
gdImagePå
 
img
, *
size
);

102 
ngx_hâp_image_˛ónup
(*
d©a
);

103 
ngx_uöt_t
 
ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
);

105 
ngx_uöt_t
 
ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
);

108 *
ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

109 *
ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

110 *
chûd
);

111 *
ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

112 *
c⁄f
);

113 *
ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
,

114 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

115 *
ngx_hâp_image_fûãr_webp_quÆôy
(
ngx_c⁄f_t
 *
cf
,

116 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

117 *
ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

118 *
c⁄f
);

119 
ngx_öt_t
 
ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

122 
ngx_comm™d_t
 
	gngx_hâp_image_fûãr_comm™ds
[] = {

124 { 
ngx_°rög
("image_filter"),

125 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

126 
ngx_hâp_image_fûãr
,

127 
NGX_HTTP_LOC_CONF_OFFSET
,

129 
NULL
 },

131 { 
ngx_°rög
("image_filter_jpeg_quality"),

132 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

133 
ngx_hâp_image_fûãr_j≥g_quÆôy
,

134 
NGX_HTTP_LOC_CONF_OFFSET
,

136 
NULL
 },

138 { 
ngx_°rög
("image_filter_webp_quality"),

139 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

140 
ngx_hâp_image_fûãr_webp_quÆôy
,

141 
NGX_HTTP_LOC_CONF_OFFSET
,

143 
NULL
 },

145 { 
ngx_°rög
("image_filter_sharpen"),

146 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

147 
ngx_hâp_image_fûãr_sh¨≥n
,

148 
NGX_HTTP_LOC_CONF_OFFSET
,

150 
NULL
 },

152 { 
ngx_°rög
("image_filter_transparency"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

154 
ngx_c⁄f_£t_Êag_¶Ÿ
,

155 
NGX_HTTP_LOC_CONF_OFFSET
,

156 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
å™•¨ícy
),

157 
NULL
 },

159 { 
ngx_°rög
("image_filter_interlace"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

161 
ngx_c⁄f_£t_Êag_¶Ÿ
,

162 
NGX_HTTP_LOC_CONF_OFFSET
,

163 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
öãæa˚
),

164 
NULL
 },

166 { 
ngx_°rög
("image_filter_buffer"),

167 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

168 
ngx_c⁄f_£t_size_¶Ÿ
,

169 
NGX_HTTP_LOC_CONF_OFFSET
,

170 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
buf„r_size
),

171 
NULL
 },

173 
ngx_nuŒ_comm™d


177 
ngx_hâp_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ_˘x
 = {

178 
NULL
,

179 
ngx_hâp_image_fûãr_öô
,

181 
NULL
,

182 
NULL
,

184 
NULL
,

185 
NULL
,

187 
ngx_hâp_image_fûãr_¸óã_c⁄f
,

188 
ngx_hâp_image_fûãr_mîge_c⁄f


192 
ngx_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ
 = {

193 
NGX_MODULE_V1
,

194 &
ngx_hâp_image_fûãr_moduÀ_˘x
,

195 
ngx_hâp_image_fûãr_comm™ds
,

196 
NGX_HTTP_MODULE
,

197 
NULL
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NGX_MODULE_V1_PADDING


208 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

209 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

212 
ngx_°r_t
 
	gngx_hâp_image_ty≥s
[] = {

213 
ngx_°rög
("image/jpeg"),

214 
ngx_°rög
("image/gif"),

215 
ngx_°rög
("image/png"),

216 
ngx_°rög
("image/webp")

220 
ngx_öt_t


221 
	$ngx_hâp_image_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

223 
off_t
 
Àn
;

224 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

225 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

227 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

228  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

231 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

233 i‡(
˘x
) {

234 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_image_fûãr_moduÀ
);

235  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

238 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

240 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_OFF
) {

241  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

244 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


246 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

247 (
u_ch¨
 *) "multipart/x-mixed-replace",

251 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

254  
NGX_ERROR
;

257 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_image_fûãr_˘x_t
));

258 i‡(
˘x
 =
NULL
) {

259  
NGX_ERROR
;

262 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_image_fûãr_moduÀ
);

264 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

266 i‡(
Àn
 !-1 &&Üí > (
off_t
Ë
c⁄f
->
buf„r_size
) {

267 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

268 "imagêfûãr:ÅoÿbigÑe•⁄£: %O", 
Àn
);

270  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

273 i‡(
Àn
 == -1) {

274 
˘x
->
Àngth
 = 
c⁄f
->
buf„r_size
;

277 
˘x
->
Àngth
 = (
size_t
Ë
Àn
;

280 i‡(
r
->
hódîs_out
.
ª‰esh
) {

281 
r
->
hódîs_out
.
ª‰esh
->
hash
 = 0;

284 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

285 
r
->
Ælow_ønges
 = 0;

287  
NGX_OK
;

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_hâp_image_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

294 
ngx_öt_t
 
rc
;

295 
ngx_°r_t
 *
˘
;

296 
ngx_chaö_t
 
out
;

297 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

298 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

300 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "image filter");

302 i‡(
ö
 =
NULL
) {

303  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

306 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

308 i‡(
˘x
 =
NULL
) {

309  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

312 
˘x
->
pha£
) {

314 
NGX_HTTP_IMAGE_START
:

316 
˘x
->
ty≥
 = 
	`ngx_hâp_image_ã°
(
r
, 
ö
);

318 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

320 i‡(
˘x
->
ty≥
 =
NGX_HTTP_IMAGE_NONE
) {

322 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

323 
out
.
buf
 = 
	`ngx_hâp_image_js⁄
(
r
, 
NULL
);

325 i‡(
out
.
buf
) {

326 
out
.
√xt
 = 
NULL
;

327 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_DONE
;

329  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

333  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

334 &
ngx_hâp_image_fûãr_moduÀ
,

335 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

340 
˘
 = &
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1];

341 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

342 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

343 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

345 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_TEST
) {

346 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

348  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, 
ö
);

351 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_READ
;

355 
NGX_HTTP_IMAGE_READ
:

357 
rc
 = 
	`ngx_hâp_image_ªad
(
r
, 
ö
);

359 i‡(
rc
 =
NGX_AGAIN
) {

360  
NGX_OK
;

363 i‡(
rc
 =
NGX_ERROR
) {

364  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

365 &
ngx_hâp_image_fûãr_moduÀ
,

366 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

371 
NGX_HTTP_IMAGE_PROCESS
:

373 
out
.
buf
 = 
	`ngx_hâp_image_¥o˚ss
(
r
);

375 i‡(
out
.
buf
 =
NULL
) {

376  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

377 &
ngx_hâp_image_fûãr_moduÀ
,

378 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

381 
out
.
√xt
 = 
NULL
;

382 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

384  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

386 
NGX_HTTP_IMAGE_PASS
:

388  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

392 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

395  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

397 
	}
}

400 
ngx_öt_t


401 
	$ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
,

402 
ngx_chaö_t
 *
ö
)

404 
ngx_öt_t
 
rc
;

406 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

408 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

409  
NGX_ERROR
;

412 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

414 i‡(
˘x
->
pha£
 =
NGX_HTTP_IMAGE_DONE
) {

416  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

419  
rc
;

420 
	}
}

423 
ngx_uöt_t


424 
	$ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

426 
u_ch¨
 *
p
;

428 
p
 = 
ö
->
buf
->
pos
;

430 i‡(
ö
->
buf
->
œ°
 - 
p
 < 16) {

431  
NGX_HTTP_IMAGE_NONE
;

434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

435 "imagêfûãr: \"%c%c\"", 
p
[0],Ö[1]);

437 i‡(
p
[0] == 0xff &&Ö[1] == 0xd8) {

441  
NGX_HTTP_IMAGE_JPEG
;

443 } i‡(
p
[0] == 'G' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == '8'

444 && 
p
[5] == 'a')

446 i‡(
p
[4] == '9' ||Ö[4] == '7') {

448  
NGX_HTTP_IMAGE_GIF
;

451 } i‡(
p
[0] == 0x89 &&Ö[1] == 'P' &&Ö[2] == 'N' &&Ö[3] == 'G'

452 && 
p
[4] == 0x0d &&Ö[5] == 0x0a &&Ö[6] == 0x1a &&Ö[7] == 0x0a)

456  
NGX_HTTP_IMAGE_PNG
;

458 } i‡(
p
[0] == 'R' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == 'F'

459 && 
p
[8] == 'W' &&Ö[9] == 'E' &&Ö[10] == 'B' &&Ö[11] == 'P')

463  
NGX_HTTP_IMAGE_WEBP
;

466  
NGX_HTTP_IMAGE_NONE
;

467 
	}
}

470 
ngx_öt_t


471 
	$ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

473 
u_ch¨
 *
p
;

474 
size_t
 
size
, 
ª°
;

475 
ngx_buf_t
 *
b
;

476 
ngx_chaö_t
 *
˛
;

477 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

479 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

481 i‡(
˘x
->
image
 =
NULL
) {

482 
˘x
->
image
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Àngth
);

483 i‡(
˘x
->
image
 =
NULL
) {

484  
NGX_ERROR
;

487 
˘x
->
œ°
 = ctx->
image
;

490 
p
 = 
˘x
->
œ°
;

492 
˛
 = 
ö
; cl; c»˛->
√xt
) {

494 
b
 = 
˛
->
buf
;

495 
size
 = 
b
->
œ°
 - b->
pos
;

497 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 "imagêbuf: %uz", 
size
);

500 
ª°
 = 
˘x
->
image
 + ctx->
Àngth
 - 
p
;

502 i‡(
size
 > 
ª°
) {

503 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

505  
NGX_ERROR
;

508 
p
 = 
	`ngx_˝ymem
’, 
b
->
pos
, 
size
);

509 
b
->
pos
 +
size
;

511 i‡(
b
->
œ°_buf
) {

512 
˘x
->
œ°
 = 
p
;

513  
NGX_OK
;

517 
˘x
->
œ°
 = 
p
;

518 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_IMAGE_BUFFERED
;

520  
NGX_AGAIN
;

521 
	}
}

524 
ngx_buf_t
 *

525 
	$ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
)

527 
ngx_öt_t
 
rc
;

528 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

529 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

531 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_IMAGE_BUFFERED
;

533 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

535 
rc
 = 
	`ngx_hâp_image_size
(
r
, 
˘x
);

537 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

539 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

540  
	`ngx_hâp_image_js⁄
(
r
, 
rc
 =
NGX_OK
 ? 
˘x
 : 
NULL
);

543 
˘x
->
™gÀ
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
acv
, conf->angle);

545 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

547 i‡(
˘x
->
™gÀ
 != 90 && ctx->angle != 180 && ctx->angle != 270) {

548  
NULL
;

551  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

554 
˘x
->
max_width
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wcv
, c⁄f->
width
);

555 i‡(
˘x
->
max_width
 == 0) {

556  
NULL
;

559 
˘x
->
max_height
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
hcv
,

560 
c⁄f
->
height
);

561 i‡(
˘x
->
max_height
 == 0) {

562  
NULL
;

565 i‡(
rc
 =
NGX_OK


566 && 
˘x
->
width
 <˘x->
max_width


567 && 
˘x
->
height
 <˘x->
max_height


568 && 
˘x
->
™gÀ
 == 0

569 && !
˘x
->
f‹˚
)

571  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

574  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

575 
	}
}

578 
ngx_buf_t
 *

579 
	$ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

581 
size_t
 
Àn
;

582 
ngx_buf_t
 *
b
;

584 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

585 i‡(
b
 =
NULL
) {

586  
NULL
;

589 
b
->
mem‹y
 = 1;

590 
b
->
œ°_buf
 = 1;

592 
	`ngx_hâp_˛ón_hódî
(
r
);

594 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

595 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("application/json") - 1;

596 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/json");

597 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

599 i‡(
˘x
 =
NULL
) {

600 
b
->
pos
 = (
u_ch¨
 *Ë"{}" 
CRLF
;

601 
b
->
œ°
 = b->
pos
 + ("{}" 
CRLF
) - 1;

603 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

605  
b
;

608 
Àn
 = ("{ \"img\" : "

609 "{ \"width\": , \"height\": , \"ty≥\": \"j≥g\" } }" 
CRLF
) - 1

610 + 2 * 
NGX_SIZE_T_LEN
;

612 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

613 i‡(
b
->
pos
 =
NULL
) {

614  
NULL
;

617 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
,

621 " \"ty≥\": \"%s\" } }" 
CRLF
,

622 
˘x
->
width
, ctx->
height
,

623 
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1].
d©a
 + 6);

625 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

627  
b
;

628 
	}
}

631 
ngx_buf_t
 *

632 
	$ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

634 
ngx_buf_t
 *
b
;

636 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

637 i‡(
b
 =
NULL
) {

638  
NULL
;

641 
b
->
pos
 = 
˘x
->
image
;

642 
b
->
œ°
 = 
˘x
->last;

643 
b
->
mem‹y
 = 1;

644 
b
->
œ°_buf
 = 1;

646 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

648  
b
;

649 
	}
}

653 
	$ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

655 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

657 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

658 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

661 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

662 
	}
}

665 
ngx_öt_t


666 
	$ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

668 
u_ch¨
 *
p
, *
œ°
;

669 
size_t
 
Àn
, 
≠p
;

670 
ngx_uöt_t
 
width
, 
height
;

672 
p
 = 
˘x
->
image
;

674 
˘x
->
ty≥
) {

676 
NGX_HTTP_IMAGE_JPEG
:

678 
p
 += 2;

679 
œ°
 = 
˘x
->
image
 + ctx->
Àngth
 - 10;

680 
width
 = 0;

681 
height
 = 0;

682 
≠p
 = 0;

684 
p
 < 
œ°
) {

686 i‡(
p
[0] == 0xff &&Ö[1] != 0xff) {

688 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

689 "JPEG: %02xd %02xd", 
p
[0],Ö[1]);

691 
p
++;

693 i‡((*
p
 == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3

694 || *
p
 == 0xc9 || *p == 0xca || *p == 0xcb)

695 && (
width
 =0 || 
height
 == 0))

697 
width
 = 
p
[6] * 256 +Ö[7];

698 
height
 = 
p
[4] * 256 +Ö[5];

701 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

702 "JPEG: %02xd %02xd", 
p
[1],Ö[2]);

704 
Àn
 = 
p
[1] * 256 +Ö[2];

706 i‡(*
p
 >= 0xe1 && *p <= 0xef) {

708 
≠p
 +
Àn
;

711 
p
 +
Àn
;

716 
p
++;

719 i‡(
width
 =0 || 
height
 == 0) {

720  
NGX_DECLINED
;

723 i‡(
˘x
->
Àngth
 / 20 < 
≠p
) {

725 
˘x
->
f‹˚
 = 1;

726 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

727 "≠∞d©®size: %uz", 
≠p
);

732 
NGX_HTTP_IMAGE_GIF
:

734 i‡(
˘x
->
Àngth
 < 10) {

735  
NGX_DECLINED
;

738 
width
 = 
p
[7] * 256 +Ö[6];

739 
height
 = 
p
[9] * 256 +Ö[8];

743 
NGX_HTTP_IMAGE_PNG
:

745 i‡(
˘x
->
Àngth
 < 24) {

746  
NGX_DECLINED
;

749 
width
 = 
p
[18] * 256 +Ö[19];

750 
height
 = 
p
[22] * 256 +Ö[23];

754 
NGX_HTTP_IMAGE_WEBP
:

756 i‡(
˘x
->
Àngth
 < 30) {

757  
NGX_DECLINED
;

760 i‡(
p
[12] != 'V' ||Ö[13] != 'P' ||Ö[14] != '8') {

761  
NGX_DECLINED
;

764 
p
[15]) {

767 i‡(
p
[20] & 1) {

769  
NGX_DECLINED
;

772 i‡(
p
[23] != 0x9d ||Ö[24] != 0x01 ||Ö[25] != 0x2a) {

774  
NGX_DECLINED
;

777 
width
 = (
p
[26] |Ö[27] << 8) & 0x3fff;

778 
height
 = (
p
[28] |Ö[29] << 8) & 0x3fff;

783 i‡(
p
[20] != 0x2f) {

785  
NGX_DECLINED
;

788 
width
 = ((
p
[21] |Ö[22] << 8) & 0x3fff) + 1;

789 
height
 = ((
p
[22] >> 6 |Ö[23] << 2 |Ö[24] << 10) & 0x3fff) + 1;

794 
width
 = (
p
[24] |Ö[25] << 8 |Ö[26] << 16) + 1;

795 
height
 = (
p
[27] |Ö[28] << 8 |Ö[29] << 16) + 1;

799  
NGX_DECLINED
;

806  
NGX_DECLINED
;

809 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

810 "imagêsize: %d x %d", (Ë
width
, (Ë
height
);

812 
˘x
->
width
 = width;

813 
˘x
->
height
 = height;

815  
NGX_OK
;

816 
	}
}

819 
ngx_buf_t
 *

820 
	$ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

822 
sx
, 
sy
, 
dx
, 
dy
, 
ox
, 
oy
, 
ax
, 
ay
, 
size
,

823 
cﬁ‹s
, 
∑Àâe
, 
å™•¨ít
, 
sh¨≥n
,

824 
ªd
, 
gªí
, 
blue
, 
t
;

825 
u_ch¨
 *
out
;

826 
ngx_buf_t
 *
b
;

827 
ngx_uöt_t
 
ªsize
;

828 
gdImagePå
 
§c
, 
d°
;

829 
ngx_poﬁ_˛ónup_t
 *
˛n
;

830 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

832 
§c
 = 
	`ngx_hâp_image_sour˚
(
r
, 
˘x
);

834 i‡(
§c
 =
NULL
) {

835  
NULL
;

838 
sx
 = 
	`gdImageSX
(
§c
);

839 
sy
 = 
	`gdImageSY
(
§c
);

841 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

843 i‡(!
˘x
->
f‹˚


844 && 
˘x
->
™gÀ
 == 0

845 && (
ngx_uöt_t
Ë
sx
 <
˘x
->
max_width


846 && (
ngx_uöt_t
Ë
sy
 <
˘x
->
max_height
)

848 
	`gdImageDe°roy
(
§c
);

849  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

852 
cﬁ‹s
 = 
	`gdImageCﬁ‹sTŸÆ
(
§c
);

854 i‡(
cﬁ‹s
 && 
c⁄f
->
å™•¨ícy
) {

855 
å™•¨ít
 = 
	`gdImageGëTøn•¨ít
(
§c
);

857 i‡(
å™•¨ít
 != -1) {

858 
∑Àâe
 = 
cﬁ‹s
;

859 
ªd
 = 
	`gdImageRed
(
§c
, 
å™•¨ít
);

860 
gªí
 = 
	`gdImageGªí
(
§c
, 
å™•¨ít
);

861 
blue
 = 
	`gdImageBlue
(
§c
, 
å™•¨ít
);

863 
å™•¨ít
;

867 
∑Àâe
 = 0;

868 
å™•¨ít
 = -1;

869 
ªd
 = 0;

870 
gªí
 = 0;

871 
blue
 = 0;

873 
å™•¨ít
:

875 
	`gdImageCﬁ‹Tøn•¨ít
(
§c
, -1);

877 
dx
 = 
sx
;

878 
dy
 = 
sy
;

880 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_RESIZE
) {

882 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

883 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

884 
dy
 = dy ? dy : 1;

885 
dx
 = 
˘x
->
max_width
;

888 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

889 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

890 
dx
 = dx ? dx : 1;

891 
dy
 = 
˘x
->
max_height
;

894 
ªsize
 = 1;

896 } i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

898 
ªsize
 = 0;

902 
ªsize
 = 0;

904 i‡((Ë
dx
 / 
dy
 < (Ë
˘x
->
max_width
 / ctx->
max_height
) {

905 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

906 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

907 
dy
 = dy ? dy : 1;

908 
dx
 = 
˘x
->
max_width
;

909 
ªsize
 = 1;

913 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

914 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

915 
dx
 = dx ? dx : 1;

916 
dy
 = 
˘x
->
max_height
;

917 
ªsize
 = 1;

922 i‡(
ªsize
) {

923 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

924 i‡(
d°
 =
NULL
) {

925 
	`gdImageDe°roy
(
§c
);

926  
NULL
;

929 i‡(
cﬁ‹s
 == 0) {

930 
	`gdImageSaveAÕha
(
d°
, 1);

931 
	`gdImageAÕhaBÀndög
(
d°
, 0);

934 
	`gdImageC›yReßm∂ed
(
d°
, 
§c
, 0, 0, 0, 0, 
dx
, 
dy
, 
sx
, 
sy
);

936 i‡(
cﬁ‹s
) {

937 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

940 
	`gdImageDe°roy
(
§c
);

943 
d°
 = 
§c
;

946 i‡(
˘x
->
™gÀ
) {

947 
§c
 = 
d°
;

949 
ax
 = (
dx
 % 2 == 0) ? 1 : 0;

950 
ay
 = (
dy
 % 2 == 0) ? 1 : 0;

952 
˘x
->
™gÀ
) {

956 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dy
, 
dx
, 
∑Àâe
);

957 i‡(
d°
 =
NULL
) {

958 
	`gdImageDe°roy
(
§c
);

959  
NULL
;

961 i‡(
˘x
->
™gÀ
 == 90) {

962 
ox
 = 
dy
 / 2 + 
ay
;

963 
oy
 = 
dx
 / 2 - 
ax
;

966 
ox
 = 
dy
 / 2 - 
ay
;

967 
oy
 = 
dx
 / 2 + 
ax
;

970 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
ox
, 
oy
, 0, 0,

971 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

972 
	`gdImageDe°roy
(
§c
);

974 
t
 = 
dx
;

975 
dx
 = 
dy
;

976 
dy
 = 
t
;

980 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

981 i‡(
d°
 =
NULL
) {

982 
	`gdImageDe°roy
(
§c
);

983  
NULL
;

985 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
dx
 / 2 - 
ax
, 
dy
 / 2 - 
ay
, 0, 0,

986 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

987 
	`gdImageDe°roy
(
§c
);

992 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_CROP
) {

994 
§c
 = 
d°
;

996 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

997 
ox
 = 
dx
 - 
˘x
->
max_width
;

1000 
ox
 = 0;

1003 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

1004 
oy
 = 
dy
 - 
˘x
->
max_height
;

1007 
oy
 = 0;

1010 i‡(
ox
 || 
oy
) {

1012 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
 - 
ox
, 
dy
 - 
oy
, 
cﬁ‹s
);

1014 i‡(
d°
 =
NULL
) {

1015 
	`gdImageDe°roy
(
§c
);

1016  
NULL
;

1019 
ox
 /= 2;

1020 
oy
 /= 2;

1022 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1024 
dx
, 
dy
, 
ox
, 
oy
);

1026 i‡(
cﬁ‹s
 == 0) {

1027 
	`gdImageSaveAÕha
(
d°
, 1);

1028 
	`gdImageAÕhaBÀndög
(
d°
, 0);

1031 
	`gdImageC›y
(
d°
, 
§c
, 0, 0, 
ox
, 
oy
, 
dx
 - ox, 
dy
 - oy);

1033 i‡(
cﬁ‹s
) {

1034 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

1037 
	`gdImageDe°roy
(
§c
);

1041 i‡(
å™•¨ít
 !-1 && 
cﬁ‹s
) {

1042 
	`gdImageCﬁ‹Tøn•¨ít
(
d°
, 
	`gdImageCﬁ‹Exa˘
(d°, 
ªd
, 
gªí
, 
blue
));

1045 
sh¨≥n
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
shcv
, conf->sharpen);

1046 i‡(
sh¨≥n
 > 0) {

1047 
	`gdImageSh¨≥n
(
d°
, 
sh¨≥n
);

1050 
	`gdImageI¡îœ˚
(
d°
, (Ë
c⁄f
->
öãæa˚
);

1052 
out
 = 
	`ngx_hâp_image_out
(
r
, 
˘x
->
ty≥
, 
d°
, &
size
);

1054 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1055 "image: %d x %d %d", 
sx
, 
sy
, 
cﬁ‹s
);

1057 
	`gdImageDe°roy
(
d°
);

1058 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
image
);

1060 i‡(
out
 =
NULL
) {

1061  
NULL
;

1064 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

1065 i‡(
˛n
 =
NULL
) {

1066 
	`gdFªe
(
out
);

1067  
NULL
;

1070 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1071 i‡(
b
 =
NULL
) {

1072 
	`gdFªe
(
out
);

1073  
NULL
;

1076 
˛n
->
h™dÀr
 = 
ngx_hâp_image_˛ónup
;

1077 
˛n
->
d©a
 = 
out
;

1079 
b
->
pos
 = 
out
;

1080 
b
->
œ°
 = 
out
 + 
size
;

1081 
b
->
mem‹y
 = 1;

1082 
b
->
œ°_buf
 = 1;

1084 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

1085 
	`ngx_hâp_wók_ëag
(
r
);

1087  
b
;

1088 
	}
}

1091 
gdImagePå


1092 
	$ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

1094 *
Áûed
;

1095 
gdImagePå
 
img
;

1097 
img
 = 
NULL
;

1099 
˘x
->
ty≥
) {

1101 
NGX_HTTP_IMAGE_JPEG
:

1102 
img
 = 
	`gdImageCª©eFromJ≥gPå
(
˘x
->
Àngth
, ctx->
image
);

1103 
Áûed
 = "gdImageCreateFromJpegPtr() failed";

1106 
NGX_HTTP_IMAGE_GIF
:

1107 
img
 = 
	`gdImageCª©eFromGifPå
(
˘x
->
Àngth
, ctx->
image
);

1108 
Áûed
 = "gdImageCreateFromGifPtr() failed";

1111 
NGX_HTTP_IMAGE_PNG
:

1112 
img
 = 
	`gdImageCª©eFromPngPå
(
˘x
->
Àngth
, ctx->
image
);

1113 
Áûed
 = "gdImageCreateFromPngPtr() failed";

1116 
NGX_HTTP_IMAGE_WEBP
:

1117 #i‡(
NGX_HAVE_GD_WEBP
)

1118 
img
 = 
	`gdImageCª©eFromWebpPå
(
˘x
->
Àngth
, ctx->
image
);

1119 
Áûed
 = "gdImageCreateFromWebpPtr() failed";

1121 
Áûed
 = "nginx was built without GD WebP support";

1126 
Áûed
 = "unknown imageÅype";

1130 i‡(
img
 =
NULL
) {

1131 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1134  
img
;

1135 
	}
}

1138 
gdImagePå


1139 
	$ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
, 
cﬁ‹s
)

1141 
gdImagePå
 
img
;

1143 i‡(
cﬁ‹s
 == 0) {

1144 
img
 = 
	`gdImageCª©eTrueCﬁ‹
(
w
, 
h
);

1146 i‡(
img
 =
NULL
) {

1147 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1149  
NULL
;

1153 
img
 = 
	`gdImageCª©e
(
w
, 
h
);

1155 i‡(
img
 =
NULL
) {

1156 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1158  
NULL
;

1162  
img
;

1163 
	}
}

1166 
u_ch¨
 *

1167 
	$ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
, 
gdImagePå
 
img
,

1168 *
size
)

1170 *
Áûed
;

1171 
u_ch¨
 *
out
;

1172 
ngx_öt_t
 
q
;

1173 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1175 
out
 = 
NULL
;

1177 
ty≥
) {

1179 
NGX_HTTP_IMAGE_JPEG
:

1180 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1182 
q
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
jqcv
, c⁄f->
j≥g_quÆôy
);

1183 i‡(
q
 <= 0) {

1184  
NULL
;

1187 
out
 = 
	`gdImageJ≥gPå
(
img
, 
size
, 
q
);

1188 
Áûed
 = "gdImageJpegPtr() failed";

1191 
NGX_HTTP_IMAGE_GIF
:

1192 
out
 = 
	`gdImageGifPå
(
img
, 
size
);

1193 
Áûed
 = "gdImageGifPtr() failed";

1196 
NGX_HTTP_IMAGE_PNG
:

1197 
out
 = 
	`gdImagePngPå
(
img
, 
size
);

1198 
Áûed
 = "gdImagePngPtr() failed";

1201 
NGX_HTTP_IMAGE_WEBP
:

1202 #i‡(
NGX_HAVE_GD_WEBP
)

1203 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1205 
q
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wqcv
, c⁄f->
webp_quÆôy
);

1206 i‡(
q
 <= 0) {

1207  
NULL
;

1210 
out
 = 
	`gdImageWebpPåEx
(
img
, 
size
, 
q
);

1211 
Áûed
 = "gdImageWebpPtrEx() failed";

1213 
Áûed
 = "nginx was built without GD WebP support";

1218 
Áûed
 = "unknown imageÅype";

1222 i‡(
out
 =
NULL
) {

1223 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1226  
out
;

1227 
	}
}

1231 
	$ngx_hâp_image_˛ónup
(*
d©a
)

1233 
	`gdFªe
(
d©a
);

1234 
	}
}

1237 
ngx_uöt_t


1238 
	$ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

1239 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
)

1241 
ngx_°r_t
 
vÆ
;

1243 i‡(
cv
 =
NULL
) {

1244  
v
;

1247 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1251  
	`ngx_hâp_image_fûãr_vÆue
(&
vÆ
);

1252 
	}
}

1255 
ngx_uöt_t


1256 
	$ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
)

1258 
ngx_öt_t
 
n
;

1260 i‡(
vÆue
->
Àn
 =1 && vÆue->
d©a
[0] == '-') {

1261  (
ngx_uöt_t
) -1;

1264 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1266 i‡(
n
 > 0) {

1267  (
ngx_uöt_t
Ë
n
;

1271 
	}
}

1275 
	$ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1277 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1279 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_image_fûãr_c⁄f_t
));

1280 i‡(
c⁄f
 =
NULL
) {

1281  
NULL
;

1298 
c⁄f
->
fûãr
 = 
NGX_CONF_UNSET_UINT
;

1299 
c⁄f
->
j≥g_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1300 
c⁄f
->
webp_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1301 
c⁄f
->
sh¨≥n
 = 
NGX_CONF_UNSET_UINT
;

1302 
c⁄f
->
å™•¨ícy
 = 
NGX_CONF_UNSET
;

1303 
c⁄f
->
öãæa˚
 = 
NGX_CONF_UNSET
;

1304 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1306  
c⁄f
;

1307 
	}
}

1311 
	$ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1313 
ngx_hâp_image_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1314 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

1316 i‡(
c⁄f
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1318 i‡(
¥ev
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1319 
c⁄f
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1322 
c⁄f
->
fûãr
 = 
¥ev
->filter;

1323 
c⁄f
->
width
 = 
¥ev
->width;

1324 
c⁄f
->
height
 = 
¥ev
->height;

1325 
c⁄f
->
™gÀ
 = 
¥ev
->angle;

1326 
c⁄f
->
wcv
 = 
¥ev
->wcv;

1327 
c⁄f
->
hcv
 = 
¥ev
->hcv;

1328 
c⁄f
->
acv
 = 
¥ev
->acv;

1332 i‡(
c⁄f
->
j≥g_quÆôy
 =
NGX_CONF_UNSET_UINT
) {

1335 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
j≥g_quÆôy
, 
¥ev
->jpeg_quality, 75);

1337 i‡(
c⁄f
->
jqcv
 =
NULL
) {

1338 
c⁄f
->
jqcv
 = 
¥ev
->jqcv;

1342 i‡(
c⁄f
->
webp_quÆôy
 =
NGX_CONF_UNSET_UINT
) {

1345 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
webp_quÆôy
, 
¥ev
->webp_quality, 80);

1347 i‡(
c⁄f
->
wqcv
 =
NULL
) {

1348 
c⁄f
->
wqcv
 = 
¥ev
->wqcv;

1352 i‡(
c⁄f
->
sh¨≥n
 =
NGX_CONF_UNSET_UINT
) {

1353 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
sh¨≥n
, 
¥ev
->sharpen, 0);

1355 i‡(
c⁄f
->
shcv
 =
NULL
) {

1356 
c⁄f
->
shcv
 = 
¥ev
->shcv;

1360 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
å™•¨ícy
, 
¥ev
->transparency, 1);

1362 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öãæa˚
, 
¥ev
->interlace, 0);

1364 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1367  
NGX_CONF_OK
;

1368 
	}
}

1372 
	$ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1374 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1376 
ngx_°r_t
 *
vÆue
;

1377 
ngx_öt_t
 
n
;

1378 
ngx_uöt_t
 
i
;

1379 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1380 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1382 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1384 
i
 = 1;

1386 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1387 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1388 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1390 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "test") == 0) {

1391 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_TEST
;

1393 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "size") == 0) {

1394 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_SIZE
;

1397 
Áûed
;

1400  
NGX_CONF_OK
;

1402 } i‡(
cf
->
¨gs
->
√…s
 == 3) {

1404 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "rotate") == 0) {

1405 i‡(
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_RESIZE


1406 && 
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_CROP
)

1408 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_ROTATE
;

1411 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1413 
ccv
.
cf
 = cf;

1414 
ccv
.
vÆue
 = &vÆue[++
i
];

1415 
ccv
.
com∂ex_vÆue
 = &
cv
;

1417 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1418  
NGX_CONF_ERROR
;

1421 i‡(
cv
.
Àngths
 =
NULL
) {

1422 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1424 i‡(
n
 != 90 &&Ç != 180 &&Ç != 270) {

1425 
Áûed
;

1428 
imcf
->
™gÀ
 = (
ngx_uöt_t
Ë
n
;

1431 
imcf
->
acv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1432 (
ngx_hâp_com∂ex_vÆue_t
));

1433 i‡(
imcf
->
acv
 =
NULL
) {

1434  
NGX_CONF_ERROR
;

1437 *
imcf
->
acv
 = 
cv
;

1440  
NGX_CONF_OK
;

1443 
Áûed
;

1447 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "resize") == 0) {

1448 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_RESIZE
;

1450 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "crop") == 0) {

1451 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_CROP
;

1454 
Áûed
;

1457 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1459 
ccv
.
cf
 = cf;

1460 
ccv
.
vÆue
 = &vÆue[++
i
];

1461 
ccv
.
com∂ex_vÆue
 = &
cv
;

1463 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1464  
NGX_CONF_ERROR
;

1467 i‡(
cv
.
Àngths
 =
NULL
) {

1468 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1470 i‡(
n
 == 0) {

1471 
Áûed
;

1474 
imcf
->
width
 = (
ngx_uöt_t
Ë
n
;

1477 
imcf
->
wcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1478 i‡(
imcf
->
wcv
 =
NULL
) {

1479  
NGX_CONF_ERROR
;

1482 *
imcf
->
wcv
 = 
cv
;

1485 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1487 
ccv
.
cf
 = cf;

1488 
ccv
.
vÆue
 = &vÆue[++
i
];

1489 
ccv
.
com∂ex_vÆue
 = &
cv
;

1491 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1492  
NGX_CONF_ERROR
;

1495 i‡(
cv
.
Àngths
 =
NULL
) {

1496 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1498 i‡(
n
 == 0) {

1499 
Áûed
;

1502 
imcf
->
height
 = (
ngx_uöt_t
Ë
n
;

1505 
imcf
->
hcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1506 i‡(
imcf
->
hcv
 =
NULL
) {

1507  
NGX_CONF_ERROR
;

1510 *
imcf
->
hcv
 = 
cv
;

1513  
NGX_CONF_OK
;

1515 
Áûed
:

1517 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

1518 &
vÆue
[
i
]);

1520  
NGX_CONF_ERROR
;

1521 
	}
}

1525 
	$ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1526 *
c⁄f
)

1528 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1530 
ngx_°r_t
 *
vÆue
;

1531 
ngx_öt_t
 
n
;

1532 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1533 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1535 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1537 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1539 
ccv
.
cf
 = cf;

1540 
ccv
.
vÆue
 = &value[1];

1541 
ccv
.
com∂ex_vÆue
 = &
cv
;

1543 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1544  
NGX_CONF_ERROR
;

1547 i‡(
cv
.
Àngths
 =
NULL
) {

1548 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1550 i‡(
n
 <= 0) {

1551 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1552 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1553  
NGX_CONF_ERROR
;

1556 
imcf
->
j≥g_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1559 
imcf
->
jqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1560 i‡(
imcf
->
jqcv
 =
NULL
) {

1561  
NGX_CONF_ERROR
;

1564 *
imcf
->
jqcv
 = 
cv
;

1567  
NGX_CONF_OK
;

1568 
	}
}

1572 
	$ngx_hâp_image_fûãr_webp_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1573 *
c⁄f
)

1575 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1577 
ngx_°r_t
 *
vÆue
;

1578 
ngx_öt_t
 
n
;

1579 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1580 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1582 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1584 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1586 
ccv
.
cf
 = cf;

1587 
ccv
.
vÆue
 = &value[1];

1588 
ccv
.
com∂ex_vÆue
 = &
cv
;

1590 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1591  
NGX_CONF_ERROR
;

1594 i‡(
cv
.
Àngths
 =
NULL
) {

1595 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1597 i‡(
n
 <= 0) {

1598 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1599 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1600  
NGX_CONF_ERROR
;

1603 
imcf
->
webp_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1606 
imcf
->
wqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1607 i‡(
imcf
->
wqcv
 =
NULL
) {

1608  
NGX_CONF_ERROR
;

1611 *
imcf
->
wqcv
 = 
cv
;

1614  
NGX_CONF_OK
;

1615 
	}
}

1619 
	$ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1620 *
c⁄f
)

1622 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1624 
ngx_°r_t
 *
vÆue
;

1625 
ngx_öt_t
 
n
;

1626 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1627 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1629 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1631 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1633 
ccv
.
cf
 = cf;

1634 
ccv
.
vÆue
 = &value[1];

1635 
ccv
.
com∂ex_vÆue
 = &
cv
;

1637 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1638  
NGX_CONF_ERROR
;

1641 i‡(
cv
.
Àngths
 =
NULL
) {

1642 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1644 i‡(
n
 < 0) {

1645 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1646 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1647  
NGX_CONF_ERROR
;

1650 
imcf
->
sh¨≥n
 = (
ngx_uöt_t
Ë
n
;

1653 
imcf
->
shcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1654 i‡(
imcf
->
shcv
 =
NULL
) {

1655  
NGX_CONF_ERROR
;

1658 *
imcf
->
shcv
 = 
cv
;

1661  
NGX_CONF_OK
;

1662 
	}
}

1665 
ngx_öt_t


1666 
	$ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1668 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1669 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_image_hódî_fûãr
;

1671 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1672 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_image_body_fûãr
;

1674  
NGX_OK
;

1675 
	}
}

	@src/http/modules/ngx_http_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	m«me
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 } 
	tngx_hâp_ödex_t
;

21 
ngx_¨øy_t
 *
	mödi˚s
;

22 
size_t
 
	mmax_ödex_Àn
;

23 } 
	tngx_hâp_ödex_loc_c⁄f_t
;

26 
	#NGX_HTTP_DEFAULT_INDEX
 "ödex.html"

	)

29 
ngx_öt_t
 
ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
);

31 
ngx_öt_t
 
ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
);

34 
ngx_öt_t
 
ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_ödex_comm™ds
[] = {

44 { 
ngx_°rög
("index"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

46 
ngx_hâp_ödex_£t_ödex
,

47 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
NULL
 },

51 
ngx_nuŒ_comm™d


55 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ödex_moduÀ_˘x
 = {

56 
NULL
,

57 
ngx_hâp_ödex_öô
,

59 
NULL
,

60 
NULL
,

62 
NULL
,

63 
NULL
,

65 
ngx_hâp_ödex_¸óã_loc_c⁄f
,

66 
ngx_hâp_ödex_mîge_loc_c⁄f


70 
ngx_moduÀ_t
 
	gngx_hâp_ödex_moduÀ
 = {

71 
NGX_MODULE_V1
,

72 &
ngx_hâp_ödex_moduÀ_˘x
,

73 
ngx_hâp_ödex_comm™ds
,

74 
NGX_HTTP_MODULE
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

99 
u_ch¨
 *
p
, *
«me
;

100 
size_t
 
Àn
, 
roŸ
, 
ª£rve
, 
Æloˇãd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_°r_t
 
∑th
, 
uri
;

103 
ngx_uöt_t
 
i
, 
dú_ã°ed
;

104 
ngx_hâp_ödex_t
 *
ödex
;

105 
ngx_›í_fûe_öfo_t
 
of
;

106 
ngx_hâp_s¸ùt_code_±
 
code
;

107 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

109 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
;

110 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

112 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

113  
NGX_DECLINED
;

116 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

117  
NGX_DECLINED
;

120 
ûcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ödex_moduÀ
);

121 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

123 
Æloˇãd
 = 0;

124 
roŸ
 = 0;

125 
dú_ã°ed
 = 0;

126 
«me
 = 
NULL
;

128 
∑th
.
d©a
 = 
NULL
;

130 
ödex
 = 
ûcf
->
ödi˚s
->
ñts
;

131 
i
 = 0; i < 
ûcf
->
ödi˚s
->
√…s
; i++) {

133 i‡(
ödex
[
i
].
Àngths
 =
NULL
) {

135 i‡(
ödex
[
i
].
«me
.
d©a
[0] == '/') {

136  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
ödex
[
i
].
«me
, &r->
¨gs
);

139 
ª£rve
 = 
ûcf
->
max_ödex_Àn
;

140 
Àn
 = 
ödex
[
i
].
«me
.len;

143 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

145 
e
.
ù
 = 
ödex
[
i
].
Àngths
->
ñts
;

146 
e
.
ªque°
 = 
r
;

147 
e
.
Êushed
 = 1;

150 
Àn
 = 1;

152 *(
uöçå_t
 *Ë
e
.
ù
) {

153 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

154 
Àn
 +
	`lcode
(&
e
);

159 
ª£rve
 = 
Àn
 + 16;

162 i‡(
ª£rve
 > 
Æloˇãd
) {

164 
«me
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
);

165 i‡(
«me
 =
NULL
) {

166  
NGX_ERROR
;

169 
Æloˇãd
 = 
∑th
.
d©a
 +Ö©h.
Àn
 - 
«me
;

172 i‡(
ödex
[
i
].
vÆues
 =
NULL
) {

176 
	`ngx_mem˝y
(
«me
, 
ödex
[
i
].«me.
d©a
, index[i].«me.
Àn
);

178 
∑th
.
Àn
 = (
«me
 + 
ödex
[
i
].«me.À¿- 1Ë-Ö©h.
d©a
;

181 
e
.
ù
 = 
ödex
[
i
].
vÆues
->
ñts
;

182 
e
.
pos
 = 
«me
;

184 *(
uöçå_t
 *Ë
e
.
ù
) {

185 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

186 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

189 i‡(*
«me
 == '/') {

190 
uri
.
Àn
 =Üen - 1;

191 
uri
.
d©a
 = 
«me
;

192  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

195 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

197 *
e
.
pos
 = '\0';

200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 "›í index \"%V\"", &
∑th
);

203 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

205 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

206 
of
.
dúe˘io
 = 
˛cf
->directio;

207 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

208 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

209 
of
.
ã°_⁄ly
 = 1;

210 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

211 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

213 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

214  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

217 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

218 !
NGX_OK
)

220 i‡(
of
.
îr
 == 0) {

221  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

224 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

225 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

227 #i‡(
NGX_HAVE_OPENAT
)

228 i‡(
of
.
îr
 =
NGX_EMLINK


229 || 
of
.
îr
 =
NGX_ELOOP
)

231  
NGX_HTTP_FORBIDDEN
;

235 i‡(
of
.
îr
 =
NGX_ENOTDIR


236 || 
of
.
îr
 =
NGX_ENAMETOOLONG


237 || 
of
.
îr
 =
NGX_EACCES
)

239  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
∑th
.
d©a
, 
of
.
îr
);

242 i‡(!
dú_ã°ed
) {

243 
rc
 = 
	`ngx_hâp_ödex_ã°_dú
(
r
, 
˛cf
, 
∑th
.
d©a
, 
«me
 - 1);

245 i‡(
rc
 !
NGX_OK
) {

246  
rc
;

249 
dú_ã°ed
 = 1;

252 i‡(
of
.
îr
 =
NGX_ENOENT
) {

256 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

257 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

259  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

262 
uri
.
Àn
 = 
r
->uri.len +Üen - 1;

264 i‡(!
˛cf
->
Æüs
) {

265 
uri
.
d©a
 = 
∑th
.d©®+ 
roŸ
;

268 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

269 i‡(
uri
.
d©a
 =
NULL
) {

270  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

273 
p
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

274 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 - 1);

277  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

280  
NGX_DECLINED
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

286 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
)

288 
u_ch¨
 
c
;

289 
ngx_°r_t
 
dú
;

290 
ngx_›í_fûe_öfo_t
 
of
;

292 
c
 = *
œ°
;

293 i‡(
c
 !'/' || 
∑th
 =
œ°
) {

295 
c
 = *(++
œ°
);

297 *
œ°
 = '\0';

299 
dú
.
Àn
 = 
œ°
 - 
∑th
;

300 
dú
.
d©a
 = 
∑th
;

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303 "hâ∞ödex check dú: \"%V\"", &
dú
);

305 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

307 
of
.
ã°_dú
 = 1;

308 
of
.
ã°_⁄ly
 = 1;

309 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

310 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

312 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
dú
, &
of
Ë!
NGX_OK
) {

313  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

316 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
dú
, &
of
, 
r
->
poﬁ
)

317 !
NGX_OK
)

319 i‡(
of
.
îr
) {

321 #i‡(
NGX_HAVE_OPENAT
)

322 i‡(
of
.
îr
 =
NGX_EMLINK


323 || 
of
.
îr
 =
NGX_ELOOP
)

325  
NGX_HTTP_FORBIDDEN
;

329 i‡(
of
.
îr
 =
NGX_ENOENT
) {

330 *
œ°
 = 
c
;

331  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
dú
.
d©a
, 
NGX_ENOENT
);

334 i‡(
of
.
îr
 =
NGX_EACCES
) {

336 *
œ°
 = 
c
;

344  
NGX_OK
;

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

348 "%†\"%s\" faûed", 
of
.
Áûed
, 
dú
.
d©a
);

351  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

354 *
œ°
 = 
c
;

356 i‡(
of
.
is_dú
) {

357  
NGX_OK
;

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "\"%s\" i†nŸá dúe˘‹y", 
dú
.
d©a
);

363  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

369 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
)

371 i‡(
îr
 =
NGX_EACCES
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

373 "\"%s\" i†f‹biddí", 
fûe
);

375  
NGX_HTTP_FORBIDDEN
;

378 i‡(
˛cf
->
log_nŸ_found
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

380 "\"%s\" i†nŸ found", 
fûe
);

383  
NGX_HTTP_NOT_FOUND
;

384 
	}
}

388 
	$ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

390 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
;

392 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_ödex_loc_c⁄f_t
));

393 i‡(
c⁄f
 =
NULL
) {

394  
NULL
;

397 
c⁄f
->
ödi˚s
 = 
NULL
;

398 
c⁄f
->
max_ödex_Àn
 = 0;

400  
c⁄f
;

401 
	}
}

405 
	$ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

407 
ngx_hâp_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

408 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

410 
ngx_hâp_ödex_t
 *
ödex
;

412 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

413 
c⁄f
->
ödi˚s
 = 
¥ev
->indices;

414 
c⁄f
->
max_ödex_Àn
 = 
¥ev
->max_index_len;

417 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

418 
c⁄f
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ödex_t
));

419 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

420  
NGX_CONF_ERROR
;

423 
ödex
 = 
	`ngx_¨øy_push
(
c⁄f
->
ödi˚s
);

424 i‡(
ödex
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
ödex
->
«me
.
Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

429 
ödex
->
«me
.
d©a
 = (
u_ch¨
 *Ë
NGX_HTTP_DEFAULT_INDEX
;

430 
ödex
->
Àngths
 = 
NULL
;

431 
ödex
->
vÆues
 = 
NULL
;

433 
c⁄f
->
max_ödex_Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

435  
NGX_CONF_OK
;

438  
NGX_CONF_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

445 
ngx_hâp_h™dÀr_±
 *
h
;

446 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

448 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

450 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

451 i‡(
h
 =
NULL
) {

452  
NGX_ERROR
;

455 *
h
 = 
ngx_hâp_ödex_h™dÀr
;

457  
NGX_OK
;

458 
	}
}

464 
	$ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

466 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
 = 
c⁄f
;

468 
ngx_°r_t
 *
vÆue
;

469 
ngx_uöt_t
 
i
, 
n
;

470 
ngx_hâp_ödex_t
 *
ödex
;

471 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

473 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

474 
ûcf
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_ödex_t
));

475 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

476  
NGX_CONF_ERROR
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

484 i‡(
vÆue
[
i
].
d©a
[0] ='/' && i !
cf
->
¨gs
->
√…s
 - 1) {

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

490 i‡(
vÆue
[
i
].
Àn
 == 0) {

491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

493 &
vÆue
[1]);

494  
NGX_CONF_ERROR
;

497 
ödex
 = 
	`ngx_¨øy_push
(
ûcf
->
ödi˚s
);

498 i‡(
ödex
 =
NULL
) {

499  
NGX_CONF_ERROR
;

502 
ödex
->
«me
.
Àn
 = 
vÆue
[
i
].len;

503 
ödex
->
«me
.
d©a
 = 
vÆue
[
i
].data;

504 
ödex
->
Àngths
 = 
NULL
;

505 
ödex
->
vÆues
 = 
NULL
;

507 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[
i
]);

509 i‡(
n
 == 0) {

510 i‡(
ûcf
->
max_ödex_Àn
 < 
ödex
->
«me
.
Àn
) {

511 
ûcf
->
max_ödex_Àn
 = 
ödex
->
«me
.
Àn
;

514 i‡(
ödex
->
«me
.
d©a
[0] == '/') {

519 
ödex
->
«me
.
Àn
++;

524 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

526 
sc
.
cf
 = cf;

527 
sc
.
sour˚
 = &
vÆue
[
i
];

528 
sc
.
Àngths
 = &
ödex
->lengths;

529 
sc
.
vÆues
 = &
ödex
->values;

530 
sc
.
v¨übÀs
 = 
n
;

531 
sc
.
com∂ëe_Àngths
 = 1;

532 
sc
.
com∂ëe_vÆues
 = 1;

534 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

535  
NGX_CONF_ERROR
;

539  
NGX_CONF_OK
;

540 
	}
}

	@src/http/modules/ngx_http_limit_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_hâp_limô_c⁄n_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_hâp_limô_c⁄n_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_hâp_com∂ex_vÆue_t
 
	mkey
;

30 } 
	tngx_hâp_limô_c⁄n_˘x_t
;

34 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

35 
ngx_uöt_t
 
	mc⁄n
;

36 } 
	tngx_hâp_limô_c⁄n_limô_t
;

40 
ngx_¨øy_t
 
	mlimôs
;

41 
ngx_uöt_t
 
	mlog_Àvñ
;

42 
ngx_uöt_t
 
	m°©us_code
;

43 } 
	tngx_hâp_limô_c⁄n_c⁄f_t
;

46 
ngx_rbåì_node_t
 *
ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
,

47 
ngx_°r_t
 *
key
, 
uöt32_t
 
hash
);

48 
ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
);

49 
ngx_ölöe
 
ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
);

51 *
ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

52 *
ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

53 *
chûd
);

54 *
ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

55 *
c⁄f
);

56 *
ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 
ngx_öt_t
 
ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
);

61 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_c⁄n_log_Àvñs
[] = {

62 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

63 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

64 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

65 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

66 { 
ngx_nuŒ_°rög
, 0 }

70 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_c⁄n_°©us_bounds
 = {

71 
ngx_c⁄f_check_num_bounds
, 400, 599

75 
ngx_comm™d_t
 
	gngx_hâp_limô_c⁄n_comm™ds
[] = {

77 { 
ngx_°rög
("limit_conn_zone"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

79 
ngx_hâp_limô_c⁄n_z⁄e
,

82 
NULL
 },

84 { 
ngx_°rög
("limit_conn"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

86 
ngx_hâp_limô_c⁄n
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("limit_conn_log_level"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_íum_¶Ÿ
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
log_Àvñ
),

96 &
ngx_hâp_limô_c⁄n_log_Àvñs
 },

98 { 
ngx_°rög
("limit_conn_status"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_num_¶Ÿ
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
°©us_code
),

103 &
ngx_hâp_limô_c⁄n_°©us_bounds
 },

105 
ngx_nuŒ_comm™d


109 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ_˘x
 = {

110 
NULL
,

111 
ngx_hâp_limô_c⁄n_öô
,

113 
NULL
,

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_hâp_limô_c⁄n_¸óã_c⁄f
,

120 
ngx_hâp_limô_c⁄n_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_hâp_limô_c⁄n_moduÀ_˘x
,

127 
ngx_hâp_limô_c⁄n_comm™ds
,

128 
NGX_HTTP_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_öt_t


141 
	$ngx_hâp_limô_c⁄n_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

143 
size_t
 
n
;

144 
uöt32_t
 
hash
;

145 
ngx_°r_t
 
key
;

146 
ngx_uöt_t
 
i
;

147 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

148 
ngx_rbåì_node_t
 *
node
;

149 
ngx_poﬁ_˛ónup_t
 *
˛n
;

150 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

151 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

152 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
;

153 
ngx_hâp_limô_c⁄n_limô_t
 *
limôs
;

154 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
;

156 i‡(
r
->
maö
->
limô_c⁄n_£t
) {

157  
NGX_DECLINED
;

160 
lccf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_c⁄n_moduÀ
);

161 
limôs
 = 
lccf
->limôs.
ñts
;

163 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

164 
˘x
 = 
limôs
[
i
].
shm_z⁄e
->
d©a
;

166 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
key
, &keyË!
NGX_OK
) {

167  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

170 i‡(
key
.
Àn
 == 0) {

174 i‡(
key
.
Àn
 > 255) {

175 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

178 &
˘x
->
key
.
vÆue
, &key);

182 
r
->
maö
->
limô_c⁄n_£t
 = 1;

184 
hash
 = 
	`ngx_¸c32_sh‹t
(
key
.
d©a
, key.
Àn
);

186 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
limôs
[
i
].
shm_z⁄e
->
shm
.
addr
;

188 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

190 
node
 = 
	`ngx_hâp_limô_c⁄n_lookup
(
˘x
->
rbåì
, &
key
, 
hash
);

192 i‡(
node
 =
NULL
) {

194 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

195 + 
	`off£tof
(
ngx_hâp_limô_c⁄n_node_t
, 
d©a
)

196 + 
key
.
Àn
;

198 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

200 i‡(
node
 =
NULL
) {

201 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

202 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

203  
lccf
->
°©us_code
;

206 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

208 
node
->
key
 = 
hash
;

209 
lc
->
Àn
 = (
u_ch¨
Ë
key
.len;

210 
lc
->
c⁄n
 = 1;

211 
	`ngx_mem˝y
(
lc
->
d©a
, 
key
.d©a, key.
Àn
);

213 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

217 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

219 i‡((
ngx_uöt_t
Ë
lc
->
c⁄n
 >
limôs
[
i
].conn) {

221 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

223 
	`ngx_log_îr‹
(
lccf
->
log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

225 &
limôs
[
i
].
shm_z⁄e
->
shm
.
«me
);

227 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

228  
lccf
->
°©us_code
;

231 
lc
->
c⁄n
++;

234 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

235 "limô c⁄n: %08Xò%d", 
node
->
key
, 
lc
->
c⁄n
);

237 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

239 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
,

240 (
ngx_hâp_limô_c⁄n_˛ónup_t
));

241 i‡(
˛n
 =
NULL
) {

242  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

245 
˛n
->
h™dÀr
 = 
ngx_hâp_limô_c⁄n_˛ónup
;

246 
lc˛n
 = 
˛n
->
d©a
;

248 
lc˛n
->
shm_z⁄e
 = 
limôs
[
i
].shm_zone;

249 
lc˛n
->
node
 =Çode;

252  
NGX_DECLINED
;

253 
	}
}

257 
	$ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

258 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

260 
ngx_rbåì_node_t
 **
p
;

261 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
, *
l˙t
;

265 i‡(
node
->
key
 < 
ãmp
->key) {

267 
p
 = &
ãmp
->
À·
;

269 } i‡(
node
->
key
 > 
ãmp
->key) {

271 
p
 = &
ãmp
->
right
;

275 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

276 
l˙t
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
ãmp
->
cﬁ‹
;

278 
p
 = (
	`ngx_memn2cmp
(
l˙
->
d©a
, 
l˙t
->d©a,Ü˙->
Àn
,Ücnt->len) < 0)

279 ? &
ãmp
->
À·
 : &ãmp->
right
;

282 i‡(*
p
 =
£¡öñ
) {

286 
ãmp
 = *
p
;

289 *
p
 = 
node
;

290 
node
->
∑ª¡
 = 
ãmp
;

291 
node
->
À·
 = 
£¡öñ
;

292 
node
->
right
 = 
£¡öñ
;

293 
	`ngx_rbt_ªd
(
node
);

294 
	}
}

297 
ngx_rbåì_node_t
 *

298 
	$ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
key
, 
uöt32_t
 
hash
)

300 
ngx_öt_t
 
rc
;

301 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

302 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
;

304 
node
 = 
rbåì
->
roŸ
;

305 
£¡öñ
 = 
rbåì
->sentinel;

307 
node
 !
£¡öñ
) {

309 i‡(
hash
 < 
node
->
key
) {

310 
node
 =Çode->
À·
;

314 i‡(
hash
 > 
node
->
key
) {

315 
node
 =Çode->
right
;

321 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

323 
rc
 = 
	`ngx_memn2cmp
(
key
->
d©a
, 
l˙
->d©a, key->
Àn
, (
size_t
)Ücn->len);

325 i‡(
rc
 == 0) {

326  
node
;

329 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

332  
NULL
;

333 
	}
}

337 
	$ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
)

339 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
 = 
d©a
;

341 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

342 
ngx_rbåì_node_t
 *
node
;

343 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

344 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

346 
˘x
 = 
lc˛n
->
shm_z⁄e
->
d©a
;

347 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lc˛n
->
shm_z⁄e
->
shm
.
addr
;

348 
node
 = 
lc˛n
->node;

349 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

351 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

353 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
lc˛n
->
shm_z⁄e
->
shm
.
log
, 0,

354 "limô c⁄¿˛ónup: %08Xò%d", 
node
->
key
, 
lc
->
c⁄n
);

356 
lc
->
c⁄n
--;

358 i‡(
lc
->
c⁄n
 == 0) {

359 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

360 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

363 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

364 
	}
}

367 
ngx_ölöe
 

368 
	$ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
)

370 
ngx_poﬁ_˛ónup_t
 *
˛n
;

372 
˛n
 = 
poﬁ
->
˛ónup
;

374 
˛n
 && c ->
h™dÀr
 =
ngx_hâp_limô_c⁄n_˛ónup
) {

375 
	`ngx_hâp_limô_c⁄n_˛ónup
(
˛n
->
d©a
);

376 
˛n
 = c ->
√xt
;

379 
poﬁ
->
˛ónup
 = 
˛n
;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_hâp_limô_c⁄n_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

386 
ngx_hâp_limô_c⁄n_˘x_t
 *
o˘x
 = 
d©a
;

388 
size_t
 
Àn
;

389 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

390 
ngx_rbåì_node_t
 *
£¡öñ
;

391 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

393 
˘x
 = 
shm_z⁄e
->
d©a
;

395 i‡(
o˘x
) {

396 i‡(
˘x
->
key
.
vÆue
.
Àn
 !
o˘x
->key.value.len

397 || 
	`ngx_°∫cmp
(
˘x
->
key
.
vÆue
.
d©a
, 
o˘x
->key.value.data,

398 
˘x
->
key
.
vÆue
.
Àn
)

401 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

404 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
key
.
vÆue
,

405 &
o˘x
->
key
.
vÆue
);

406  
NGX_ERROR
;

409 
˘x
->
rbåì
 = 
o˘x
->rbtree;

411  
NGX_OK
;

414 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

416 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

417 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

419  
NGX_OK
;

422 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

423 i‡(
˘x
->
rbåì
 =
NULL
) {

424  
NGX_ERROR
;

427 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

429 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

430 i‡(
£¡öñ
 =
NULL
) {

431  
NGX_ERROR
;

434 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

435 
ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
);

437 
Àn
 = (" i¿limô_c⁄n_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

439 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

440 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

441  
NGX_ERROR
;

444 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_conn_zone \"%V\"%Z",

445 &
shm_z⁄e
->
shm
.
«me
);

447  
NGX_OK
;

448 
	}
}

452 
	$ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

454 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
;

456 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_c⁄f_t
));

457 i‡(
c⁄f
 =
NULL
) {

458  
NULL
;

467 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

468 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

470  
c⁄f
;

471 
	}
}

475 
	$ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

477 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

478 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
 = 
chûd
;

480 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

481 
c⁄f
->
limôs
 = 
¥ev
->limits;

484 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

485 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

486 
NGX_HTTP_SERVICE_UNAVAILABLE
);

488  
NGX_CONF_OK
;

489 
	}
}

493 
	$ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

495 
u_ch¨
 *
p
;

496 
ssize_t
 
size
;

497 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

498 
ngx_uöt_t
 
i
;

499 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

500 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

501 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

503 
vÆue
 = 
cf
->
¨gs
->
ñts
;

505 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

506 i‡(
˘x
 =
NULL
) {

507  
NGX_CONF_ERROR
;

510 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

512 
ccv
.
cf
 = cf;

513 
ccv
.
vÆue
 = &value[1];

514 
ccv
.
com∂ex_vÆue
 = &
˘x
->
key
;

516 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

517  
NGX_CONF_ERROR
;

520 
size
 = 0;

521 
«me
.
Àn
 = 0;

523 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

525 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

527 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

529 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

531 i‡(
p
 =
NULL
) {

532 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

533 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

534  
NGX_CONF_ERROR
;

537 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

539 
s
.
d©a
 = 
p
 + 1;

540 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

542 
size
 = 
	`ngx_∑r£_size
(&
s
);

544 i‡(
size
 =
NGX_ERROR
) {

545 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

546 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

547  
NGX_CONF_ERROR
;

550 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

551 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

552 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

553  
NGX_CONF_ERROR
;

559 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

560 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

561  
NGX_CONF_ERROR
;

564 i‡(
«me
.
Àn
 == 0) {

565 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

567 &
cmd
->
«me
);

568  
NGX_CONF_ERROR
;

571 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

572 &
ngx_hâp_limô_c⁄n_moduÀ
);

573 i‡(
shm_z⁄e
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 i‡(
shm_z⁄e
->
d©a
) {

578 
˘x
 = 
shm_z⁄e
->
d©a
;

580 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

582 &
cmd
->
«me
, &«me, &
˘x
->
key
.
vÆue
);

583  
NGX_CONF_ERROR
;

586 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

587 
shm_z⁄e
->
d©a
 = 
˘x
;

589  
NGX_CONF_OK
;

590 
	}
}

594 
	$ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

596 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

597 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
 = 
c⁄f
;

598 
ngx_hâp_limô_c⁄n_limô_t
 *
limô
, *
limôs
;

600 
ngx_°r_t
 *
vÆue
;

601 
ngx_öt_t
 
n
;

602 
ngx_uöt_t
 
i
;

604 
vÆue
 = 
cf
->
¨gs
->
ñts
;

606 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

607 &
ngx_hâp_limô_c⁄n_moduÀ
);

608 i‡(
shm_z⁄e
 =
NULL
) {

609  
NGX_CONF_ERROR
;

612 
limôs
 = 
lccf
->limôs.
ñts
;

614 i‡(
limôs
 =
NULL
) {

615 i‡(
	`ngx_¨øy_öô
(&
lccf
->
limôs
, 
cf
->
poﬁ
, 1,

616 (
ngx_hâp_limô_c⁄n_limô_t
))

617 !
NGX_OK
)

619  
NGX_CONF_ERROR
;

623 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

624 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

629 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

630 i‡(
n
 <= 0) {

631 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

632 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

633  
NGX_CONF_ERROR
;

636 i‡(
n
 > 65535) {

637 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

639  
NGX_CONF_ERROR
;

642 
limô
 = 
	`ngx_¨øy_push
(&
lccf
->
limôs
);

643 i‡(
limô
 =
NULL
) {

644  
NGX_CONF_ERROR
;

647 
limô
->
c⁄n
 = 
n
;

648 
limô
->
shm_z⁄e
 = shm_zone;

650  
NGX_CONF_OK
;

651 
	}
}

654 
ngx_öt_t


655 
	$ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
)

657 
ngx_hâp_h™dÀr_±
 *
h
;

658 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

660 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

662 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

663 i‡(
h
 =
NULL
) {

664  
NGX_ERROR
;

667 *
h
 = 
ngx_hâp_limô_c⁄n_h™dÀr
;

669  
NGX_OK
;

670 
	}
}

	@src/http/modules/ngx_http_limit_req_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mdummy
;

16 
u_sh‹t
 
	mÀn
;

17 
ngx_queue_t
 
	mqueue
;

18 
ngx_m£c_t
 
	mœ°
;

20 
ngx_uöt_t
 
	mex˚ss
;

21 
ngx_uöt_t
 
	mcou¡
;

22 
u_ch¨
 
	md©a
[1];

23 } 
	tngx_hâp_limô_ªq_node_t
;

27 
ngx_rbåì_t
 
	mrbåì
;

28 
ngx_rbåì_node_t
 
	m£¡öñ
;

29 
ngx_queue_t
 
	mqueue
;

30 } 
	tngx_hâp_limô_ªq_sh˘x_t
;

34 
ngx_hâp_limô_ªq_sh˘x_t
 *
	msh
;

35 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

37 
ngx_uöt_t
 
	møã
;

38 
ngx_hâp_com∂ex_vÆue_t
 
	mkey
;

39 
ngx_hâp_limô_ªq_node_t
 *
	mnode
;

40 } 
	tngx_hâp_limô_ªq_˘x_t
;

44 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

46 
ngx_uöt_t
 
	mbur°
;

47 
ngx_uöt_t
 
	mnodñay
;

48 } 
	tngx_hâp_limô_ªq_limô_t
;

52 
ngx_¨øy_t
 
	mlimôs
;

53 
ngx_uöt_t
 
	mlimô_log_Àvñ
;

54 
ngx_uöt_t
 
	mdñay_log_Àvñ
;

55 
ngx_uöt_t
 
	m°©us_code
;

56 } 
	tngx_hâp_limô_ªq_c⁄f_t
;

59 
ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
);

60 
ngx_öt_t
 
ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
,

61 
ngx_uöt_t
 
hash
, 
ngx_°r_t
 *
key
,Çgx_uöt_à*
ï
,Çgx_uöt_à
accou¡
);

62 
ngx_m£c_t
 
ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
,

63 
ngx_uöt_t
 
n
,Çgx_uöt_à*
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
);

64 
ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
,

65 
ngx_uöt_t
 
n
);

67 *
ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 *
ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

71 *
c⁄f
);

72 *
ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 
ngx_öt_t
 
ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_ªq_log_Àvñs
[] = {

78 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

79 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

80 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

81 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

82 { 
ngx_nuŒ_°rög
, 0 }

86 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_ªq_°©us_bounds
 = {

87 
ngx_c⁄f_check_num_bounds
, 400, 599

91 
ngx_comm™d_t
 
	gngx_hâp_limô_ªq_comm™ds
[] = {

93 { 
ngx_°rög
("limit_req_zone"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

95 
ngx_hâp_limô_ªq_z⁄e
,

98 
NULL
 },

100 { 
ngx_°rög
("limit_req"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

102 
ngx_hâp_limô_ªq
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
NULL
 },

107 { 
ngx_°rög
("limit_req_log_level"),

108 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_íum_¶Ÿ
,

110 
NGX_HTTP_LOC_CONF_OFFSET
,

111 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
limô_log_Àvñ
),

112 &
ngx_hâp_limô_ªq_log_Àvñs
 },

114 { 
ngx_°rög
("limit_req_status"),

115 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_num_¶Ÿ
,

117 
NGX_HTTP_LOC_CONF_OFFSET
,

118 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
°©us_code
),

119 &
ngx_hâp_limô_ªq_°©us_bounds
 },

121 
ngx_nuŒ_comm™d


125 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ_˘x
 = {

126 
NULL
,

127 
ngx_hâp_limô_ªq_öô
,

129 
NULL
,

130 
NULL
,

132 
NULL
,

133 
NULL
,

135 
ngx_hâp_limô_ªq_¸óã_c⁄f
,

136 
ngx_hâp_limô_ªq_mîge_c⁄f


140 
ngx_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ
 = {

141 
NGX_MODULE_V1
,

142 &
ngx_hâp_limô_ªq_moduÀ_˘x
,

143 
ngx_hâp_limô_ªq_comm™ds
,

144 
NGX_HTTP_MODULE
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NGX_MODULE_V1_PADDING


156 
ngx_öt_t


157 
	$ngx_hâp_limô_ªq_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

159 
uöt32_t
 
hash
;

160 
ngx_°r_t
 
key
;

161 
ngx_öt_t
 
rc
;

162 
ngx_uöt_t
 
n
, 
ex˚ss
;

163 
ngx_m£c_t
 
dñay
;

164 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

165 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
;

166 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

168 i‡(
r
->
maö
->
limô_ªq_£t
) {

169  
NGX_DECLINED
;

172 
Ãcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_ªq_moduÀ
);

173 
limôs
 = 
Ãcf
->limôs.
ñts
;

175 
ex˚ss
 = 0;

177 
rc
 = 
NGX_DECLINED
;

179 #i‡(
NGX_SUPPRESS_WARN
)

180 
limô
 = 
NULL
;

183 
n
 = 0;Ç < 
Ãcf
->
limôs
.
√…s
;Ç++) {

185 
limô
 = &
limôs
[
n
];

187 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

189 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
key
, &keyË!
NGX_OK
) {

190  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

193 i‡(
key
.
Àn
 == 0) {

197 i‡(
key
.
Àn
 > 65535) {

198 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 &
˘x
->
key
.
vÆue
, &key);

205 
hash
 = 
	`ngx_¸c32_sh‹t
(
key
.
d©a
, key.
Àn
);

207 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

209 
rc
 = 
	`ngx_hâp_limô_ªq_lookup
(
limô
, 
hash
, &
key
, &
ex˚ss
,

210 (
n
 =
Ãcf
->
limôs
.
√…s
 - 1));

212 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

214 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

216 
n
, 
rc
, 
ex˚ss
 / 1000,Éxcess % 1000);

218 i‡(
rc
 !
NGX_AGAIN
) {

223 i‡(
rc
 =
NGX_DECLINED
) {

224  
NGX_DECLINED
;

227 
r
->
maö
->
limô_ªq_£t
 = 1;

229 i‡(
rc
 =
NGX_BUSY
 ||Ñ¯=
NGX_ERROR
) {

231 i‡(
rc
 =
NGX_BUSY
) {

232 
	`ngx_log_îr‹
(
Ãcf
->
limô_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

234 
ex˚ss
 / 1000,Éxcess % 1000,

235 &
limô
->
shm_z⁄e
->
shm
.
«me
);

238 
n
--) {

239 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

241 i‡(
˘x
->
node
 =
NULL
) {

245 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

247 
˘x
->
node
->
cou¡
--;

249 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

251 
˘x
->
node
 = 
NULL
;

254  
Ãcf
->
°©us_code
;

259 i‡(
rc
 =
NGX_AGAIN
) {

260 
ex˚ss
 = 0;

263 
dñay
 = 
	`ngx_hâp_limô_ªq_accou¡
(
limôs
, 
n
, &
ex˚ss
, &
limô
);

265 i‡(!
dñay
) {

266  
NGX_DECLINED
;

269 
	`ngx_log_îr‹
(
Ãcf
->
dñay_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

271 
ex˚ss
 / 1000,Éx˚s†% 1000, &
limô
->
shm_z⁄e
->
shm
.
«me
);

273 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

274  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

277 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

278 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_limô_ªq_dñay
;

280 
r
->
c⁄√˘i⁄
->
wrôe
->
dñayed
 = 1;

281 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
wrôe
, 
dñay
);

283  
NGX_AGAIN
;

284 
	}
}

288 
	$ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
)

290 
ngx_evít_t
 *
wev
;

292 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

295 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

297 i‡(
wev
->
dñayed
) {

299 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

300 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

306 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

307 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

311 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

312 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

314 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

315 
	}
}

319 
	$ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

320 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

322 
ngx_rbåì_node_t
 **
p
;

323 
ngx_hâp_limô_ªq_node_t
 *
Ãn
, *
Ã¡
;

327 i‡(
node
->
key
 < 
ãmp
->key) {

329 
p
 = &
ãmp
->
À·
;

331 } i‡(
node
->
key
 > 
ãmp
->key) {

333 
p
 = &
ãmp
->
right
;

337 
Ãn
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

338 
Ã¡
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
ãmp
->
cﬁ‹
;

340 
p
 = (
	`ngx_memn2cmp
(
Ãn
->
d©a
, 
Ã¡
->d©a,Ü∫->
Àn
,Ürnt->len) < 0)

341 ? &
ãmp
->
À·
 : &ãmp->
right
;

344 i‡(*
p
 =
£¡öñ
) {

348 
ãmp
 = *
p
;

351 *
p
 = 
node
;

352 
node
->
∑ª¡
 = 
ãmp
;

353 
node
->
À·
 = 
£¡öñ
;

354 
node
->
right
 = 
£¡öñ
;

355 
	`ngx_rbt_ªd
(
node
);

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
, 
ngx_uöt_t
 
hash
,

361 
ngx_°r_t
 *
key
, 
ngx_uöt_t
 *
ï
,Çgx_uöt_à
accou¡
)

363 
size_t
 
size
;

364 
ngx_öt_t
 
rc
, 
ex˚ss
;

365 
ngx_m£c_t
 
now
;

366 
ngx_m£c_öt_t
 
ms
;

367 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

368 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

369 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

371 
now
 = 
ngx_cuºít_m£c
;

373 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

375 
node
 = 
˘x
->
sh
->
rbåì
.
roŸ
;

376 
£¡öñ
 = 
˘x
->
sh
->
rbåì
.sentinel;

378 
node
 !
£¡öñ
) {

380 i‡(
hash
 < 
node
->
key
) {

381 
node
 =Çode->
À·
;

385 i‡(
hash
 > 
node
->
key
) {

386 
node
 =Çode->
right
;

392 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

394 
rc
 = 
	`ngx_memn2cmp
(
key
->
d©a
, 
Ã
->d©a, key->
Àn
, (
size_t
)Ür->len);

396 i‡(
rc
 == 0) {

397 
	`ngx_queue_ªmove
(&
Ã
->
queue
);

398 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

400 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

402 i‡(
ms
 < -60000) {

403 
ms
 = 1;

405 } i‡(
ms
 < 0) {

406 
ms
 = 0;

409 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000 + 1000;

411 i‡(
ex˚ss
 < 0) {

412 
ex˚ss
 = 0;

415 *
ï
 = 
ex˚ss
;

417 i‡((
ngx_uöt_t
Ë
ex˚ss
 > 
limô
->
bur°
) {

418  
NGX_BUSY
;

421 i‡(
accou¡
) {

422 
Ã
->
ex˚ss
 =Éxcess;

424 i‡(
ms
) {

425 
Ã
->
œ°
 = 
now
;

428  
NGX_OK
;

431 
Ã
->
cou¡
++;

433 
˘x
->
node
 = 
Ã
;

435  
NGX_AGAIN
;

438 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

441 *
ï
 = 0;

443 
size
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

444 + 
	`off£tof
(
ngx_hâp_limô_ªq_node_t
, 
d©a
)

445 + 
key
->
Àn
;

447 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 1);

449 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

451 i‡(
node
 =
NULL
) {

452 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 0);

454 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

455 i‡(
node
 =
NULL
) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

457 "couldÇŸáŒoˇãÇode%s", 
˘x
->
shpoﬁ
->
log_˘x
);

458  
NGX_ERROR
;

462 
node
->
key
 = 
hash
;

464 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

466 
Ã
->
Àn
 = (
u_sh‹t
Ë
key
->len;

467 
Ã
->
ex˚ss
 = 0;

469 
	`ngx_mem˝y
(
Ã
->
d©a
, 
key
->d©a, key->
Àn
);

471 
	`ngx_rbåì_ö£π
(&
˘x
->
sh
->
rbåì
, 
node
);

473 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

475 i‡(
accou¡
) {

476 
Ã
->
œ°
 = 
now
;

477 
Ã
->
cou¡
 = 0;

478  
NGX_OK
;

481 
Ã
->
œ°
 = 0;

482 
Ã
->
cou¡
 = 1;

484 
˘x
->
node
 = 
Ã
;

486  
NGX_AGAIN
;

487 
	}
}

490 
ngx_m£c_t


491 
	$ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
, 
ngx_uöt_t
 
n
,

492 
ngx_uöt_t
 *
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
)

494 
ngx_öt_t
 
ex˚ss
;

495 
ngx_m£c_t
 
now
, 
dñay
, 
max_dñay
;

496 
ngx_m£c_öt_t
 
ms
;

497 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

498 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

500 
ex˚ss
 = *
ï
;

502 i‡(
ex˚ss
 =0 || (*
limô
)->
nodñay
) {

503 
max_dñay
 = 0;

506 
˘x
 = (*
limô
)->
shm_z⁄e
->
d©a
;

507 
max_dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

510 
n
--) {

511 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

512 
Ã
 = 
˘x
->
node
;

514 i‡(
Ã
 =
NULL
) {

518 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

520 
now
 = 
ngx_cuºít_m£c
;

521 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

523 i‡(
ms
 < -60000) {

524 
ms
 = 1;

526 } i‡(
ms
 < 0) {

527 
ms
 = 0;

530 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000 + 1000;

532 i‡(
ex˚ss
 < 0) {

533 
ex˚ss
 = 0;

536 i‡(
ms
) {

537 
Ã
->
œ°
 = 
now
;

540 
Ã
->
ex˚ss
 =Éxcess;

541 
Ã
->
cou¡
--;

543 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

545 
˘x
->
node
 = 
NULL
;

547 i‡(
limôs
[
n
].
nodñay
) {

551 
dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

553 i‡(
dñay
 > 
max_dñay
) {

554 
max_dñay
 = 
dñay
;

555 *
ï
 = 
ex˚ss
;

556 *
limô
 = &
limôs
[
n
];

560  
max_dñay
;

561 
	}
}

565 
	$ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
, 
ngx_uöt_t
 
n
)

567 
ngx_öt_t
 
ex˚ss
;

568 
ngx_m£c_t
 
now
;

569 
ngx_queue_t
 *
q
;

570 
ngx_m£c_öt_t
 
ms
;

571 
ngx_rbåì_node_t
 *
node
;

572 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

574 
now
 = 
ngx_cuºít_m£c
;

582 
n
 < 3) {

584 i‡(
	`ngx_queue_em±y
(&
˘x
->
sh
->
queue
)) {

588 
q
 = 
	`ngx_queue_œ°
(&
˘x
->
sh
->
queue
);

590 
Ã
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_limô_ªq_node_t
, 
queue
);

592 i‡(
Ã
->
cou¡
) {

602 i‡(
n
++ != 0) {

604 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

605 
ms
 = 
	`ngx_abs
(ms);

607 i‡(
ms
 < 60000) {

611 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000;

613 i‡(
ex˚ss
 > 0) {

618 
	`ngx_queue_ªmove
(
q
);

620 
node
 = (
ngx_rbåì_node_t
 *)

621 ((
u_ch¨
 *Ë
Ã
 - 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
));

623 
	`ngx_rbåì_dñëe
(&
˘x
->
sh
->
rbåì
, 
node
);

625 
	`ngx_¶ab_‰ì_locked
(
˘x
->
shpoﬁ
, 
node
);

627 
	}
}

630 
ngx_öt_t


631 
	$ngx_hâp_limô_ªq_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

633 
ngx_hâp_limô_ªq_˘x_t
 *
o˘x
 = 
d©a
;

635 
size_t
 
Àn
;

636 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

638 
˘x
 = 
shm_z⁄e
->
d©a
;

640 i‡(
o˘x
) {

641 i‡(
˘x
->
key
.
vÆue
.
Àn
 !
o˘x
->key.value.len

642 || 
	`ngx_°∫cmp
(
˘x
->
key
.
vÆue
.
d©a
, 
o˘x
->key.value.data,

643 
˘x
->
key
.
vÆue
.
Àn
)

646 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

649 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
key
.
vÆue
,

650 &
o˘x
->
key
.
vÆue
);

651  
NGX_ERROR
;

654 
˘x
->
sh
 = 
o˘x
->sh;

655 
˘x
->
shpoﬁ
 = 
o˘x
->shpool;

657  
NGX_OK
;

660 
˘x
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

662 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

663 
˘x
->
sh
 = ctx->
shpoﬁ
->
d©a
;

665  
NGX_OK
;

668 
˘x
->
sh
 = 
	`ngx_¶ab_Æloc
(˘x->
shpoﬁ
, (
ngx_hâp_limô_ªq_sh˘x_t
));

669 i‡(
˘x
->
sh
 =
NULL
) {

670  
NGX_ERROR
;

673 
˘x
->
shpoﬁ
->
d©a
 = ctx->
sh
;

675 
	`ngx_rbåì_öô
(&
˘x
->
sh
->
rbåì
, &˘x->sh->
£¡öñ
,

676 
ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
);

678 
	`ngx_queue_öô
(&
˘x
->
sh
->
queue
);

680 
Àn
 = (" i¿limô_ªq z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

682 
˘x
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(˘x->shpoﬁ, 
Àn
);

683 i‡(
˘x
->
shpoﬁ
->
log_˘x
 =
NULL
) {

684  
NGX_ERROR
;

687 
	`ngx_•rötf
(
˘x
->
shpoﬁ
->
log_˘x
, " inÜimit_req zone \"%V\"%Z",

688 &
shm_z⁄e
->
shm
.
«me
);

690 
˘x
->
shpoﬁ
->
log_nomem
 = 0;

692  
NGX_OK
;

693 
	}
}

697 
	$ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

699 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
;

701 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_c⁄f_t
));

702 i‡(
c⁄f
 =
NULL
) {

703  
NULL
;

712 
c⁄f
->
limô_log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

713 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

715  
c⁄f
;

716 
	}
}

720 
	$ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

722 
ngx_hâp_limô_ªq_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

723 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
 = 
chûd
;

725 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

726 
c⁄f
->
limôs
 = 
¥ev
->limits;

729 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
limô_log_Àvñ
, 
¥ev
->limit_log_level,

730 
NGX_LOG_ERR
);

732 
c⁄f
->
dñay_log_Àvñ
 = (c⁄f->
limô_log_Àvñ
 =
NGX_LOG_INFO
) ?

733 
NGX_LOG_INFO
 : 
c⁄f
->
limô_log_Àvñ
 + 1;

735 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

736 
NGX_HTTP_SERVICE_UNAVAILABLE
);

738  
NGX_CONF_OK
;

739 
	}
}

743 
	$ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

745 
u_ch¨
 *
p
;

746 
size_t
 
Àn
;

747 
ssize_t
 
size
;

748 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

749 
ngx_öt_t
 
øã
, 
sˇÀ
;

750 
ngx_uöt_t
 
i
;

751 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

752 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

753 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

755 
vÆue
 = 
cf
->
¨gs
->
ñts
;

757 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_˘x_t
));

758 i‡(
˘x
 =
NULL
) {

759  
NGX_CONF_ERROR
;

762 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

764 
ccv
.
cf
 = cf;

765 
ccv
.
vÆue
 = &value[1];

766 
ccv
.
com∂ex_vÆue
 = &
˘x
->
key
;

768 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

769  
NGX_CONF_ERROR
;

772 
size
 = 0;

773 
øã
 = 1;

774 
sˇÀ
 = 1;

775 
«me
.
Àn
 = 0;

777 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

779 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

781 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

783 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

785 i‡(
p
 =
NULL
) {

786 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

787 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

788  
NGX_CONF_ERROR
;

791 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

793 
s
.
d©a
 = 
p
 + 1;

794 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

796 
size
 = 
	`ngx_∑r£_size
(&
s
);

798 i‡(
size
 =
NGX_ERROR
) {

799 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

800 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

801  
NGX_CONF_ERROR
;

804 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

805 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

806 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

807  
NGX_CONF_ERROR
;

813 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rate=", 5) == 0) {

815 
Àn
 = 
vÆue
[
i
].len;

816 
p
 = 
vÆue
[
i
].
d©a
 + 
Àn
 - 3;

818 i‡(
	`ngx_°∫cmp
(
p
, "r/s", 3) == 0) {

819 
sˇÀ
 = 1;

820 
Àn
 -= 3;

822 } i‡(
	`ngx_°∫cmp
(
p
, "r/m", 3) == 0) {

823 
sˇÀ
 = 60;

824 
Àn
 -= 3;

827 
øã
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 5, 
Àn
 - 5);

828 i‡(
øã
 <= 0) {

829 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

830 "övÆidÑ©ê\"%V\"", &
vÆue
[
i
]);

831  
NGX_CONF_ERROR
;

837 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

838 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

839  
NGX_CONF_ERROR
;

842 i‡(
«me
.
Àn
 == 0) {

843 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

845 &
cmd
->
«me
);

846  
NGX_CONF_ERROR
;

849 
˘x
->
øã
 =Ñ©ê* 1000 / 
sˇÀ
;

851 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

852 &
ngx_hâp_limô_ªq_moduÀ
);

853 i‡(
shm_z⁄e
 =
NULL
) {

854  
NGX_CONF_ERROR
;

857 i‡(
shm_z⁄e
->
d©a
) {

858 
˘x
 = 
shm_z⁄e
->
d©a
;

860 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

862 &
cmd
->
«me
, &«me, &
˘x
->
key
.
vÆue
);

863  
NGX_CONF_ERROR
;

866 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_ªq_öô_z⁄e
;

867 
shm_z⁄e
->
d©a
 = 
˘x
;

869  
NGX_CONF_OK
;

870 
	}
}

874 
	$ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

876 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
 = 
c⁄f
;

878 
ngx_öt_t
 
bur°
;

879 
ngx_°r_t
 *
vÆue
, 
s
;

880 
ngx_uöt_t
 
i
, 
nodñay
;

881 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

882 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

884 
vÆue
 = 
cf
->
¨gs
->
ñts
;

886 
shm_z⁄e
 = 
NULL
;

887 
bur°
 = 0;

888 
nodñay
 = 0;

890 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

892 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

894 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

895 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

897 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
s
, 0,

898 &
ngx_hâp_limô_ªq_moduÀ
);

899 i‡(
shm_z⁄e
 =
NULL
) {

900  
NGX_CONF_ERROR
;

906 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "burst=", 6) == 0) {

908 
bur°
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 6, vÆue[i].
Àn
 - 6);

909 i‡(
bur°
 <= 0) {

910 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

911 "övÆid bur°Ñ©ê\"%V\"", &
vÆue
[
i
]);

912  
NGX_CONF_ERROR
;

918 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "nodelay") == 0) {

919 
nodñay
 = 1;

923 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

924 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

925  
NGX_CONF_ERROR
;

928 i‡(
shm_z⁄e
 =
NULL
) {

929 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

931 &
cmd
->
«me
);

932  
NGX_CONF_ERROR
;

935 
limôs
 = 
Ãcf
->limôs.
ñts
;

937 i‡(
limôs
 =
NULL
) {

938 i‡(
	`ngx_¨øy_öô
(&
Ãcf
->
limôs
, 
cf
->
poﬁ
, 1,

939 (
ngx_hâp_limô_ªq_limô_t
))

940 !
NGX_OK
)

942  
NGX_CONF_ERROR
;

946 
i
 = 0; i < 
Ãcf
->
limôs
.
√…s
; i++) {

947 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

952 
limô
 = 
	`ngx_¨øy_push
(&
Ãcf
->
limôs
);

953 i‡(
limô
 =
NULL
) {

954  
NGX_CONF_ERROR
;

957 
limô
->
shm_z⁄e
 = shm_zone;

958 
limô
->
bur°
 = burst * 1000;

959 
limô
->
nodñay
 =Çodelay;

961  
NGX_CONF_OK
;

962 
	}
}

965 
ngx_öt_t


966 
	$ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
)

968 
ngx_hâp_h™dÀr_±
 *
h
;

969 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

971 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

973 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

974 i‡(
h
 =
NULL
) {

975  
NGX_ERROR
;

978 *
h
 = 
ngx_hâp_limô_ªq_h™dÀr
;

980  
NGX_OK
;

981 
	}
}

	@src/http/modules/ngx_http_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 #i‡(
NGX_ZLIB
)

13 
	~<zlib.h
>

17 
ngx_hâp_log_›_s
 
	tngx_hâp_log_›_t
;

19 
	gu_ch¨
 *(*
	tngx_hâp_log_›_run_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
, 
	tu_ch¨
 *
	tbuf
,

20 
	tngx_hâp_log_›_t
 *
	t›
);

22 
	$size_t
 (*
	tngx_hâp_log_›_gëÀn_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tuöçå_t
 
	td©a
);

26 
	sngx_hâp_log_›_s
 {

27 
size_t
 
Àn
;

28 
ngx_hâp_log_›_gëÀn_±
 
gëÀn
;

29 
ngx_hâp_log_›_run_±
 
run
;

30 
uöçå_t
 
d©a
;

35 
ngx_°r_t
 
«me
;

36 
ngx_¨øy_t
 *
Êushes
;

37 
ngx_¨øy_t
 *
›s
;

38 } 
	tngx_hâp_log_fmt_t
;

42 
ngx_¨øy_t
 
f‹m©s
;

43 
ngx_uöt_t
 
comböed_u£d
;

44 } 
	tngx_hâp_log_maö_c⁄f_t
;

48 
u_ch¨
 *
°¨t
;

49 
u_ch¨
 *
pos
;

50 
u_ch¨
 *
œ°
;

52 
ngx_evít_t
 *
evít
;

53 
ngx_m£c_t
 
Êush
;

54 
ngx_öt_t
 
gzù
;

55 } 
	tngx_hâp_log_buf_t
;

59 
ngx_¨øy_t
 *
Àngths
;

60 
ngx_¨øy_t
 *
vÆues
;

61 } 
	tngx_hâp_log_s¸ùt_t
;

65 
ngx_›í_fûe_t
 *
fûe
;

66 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
;

67 
time_t
 
disk_fuŒ_time
;

68 
time_t
 
îr‹_log_time
;

69 
ngx_sy¶og_≥î_t
 *
sy¶og_≥î
;

70 
ngx_hâp_log_fmt_t
 *
f‹m©
;

71 
ngx_hâp_com∂ex_vÆue_t
 *
fûãr
;

72 } 
	tngx_hâp_log_t
;

76 
ngx_¨øy_t
 *
logs
;

78 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

79 
time_t
 
›í_fûe_ˇche_vÆid
;

80 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

82 
ngx_uöt_t
 
off
;

83 } 
	tngx_hâp_log_loc_c⁄f_t
;

87 
ngx_°r_t
 
«me
;

88 
size_t
 
Àn
;

89 
ngx_hâp_log_›_run_±
 
run
;

90 } 
	tngx_hâp_log_v¨_t
;

93 
	#NGX_HTTP_LOG_ESCAPE_DEFAULT
 0

	)

94 
	#NGX_HTTP_LOG_ESCAPE_JSON
 1

	)

95 
	#NGX_HTTP_LOG_ESCAPE_NONE
 2

	)

98 
	`ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
,

99 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

100 
ssize_t
 
	`ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

103 #i‡(
NGX_ZLIB
)

104 
ssize_t
 
	`ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
,

105 
ngx_öt_t
 
Àvñ
, 
ngx_log_t
 *
log
);

107 *
	`ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

108 
	`ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
);

111 
	`ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
);

112 
	`ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
);

114 
u_ch¨
 *
	`ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

115 
ngx_hâp_log_›_t
 *
›
);

116 
u_ch¨
 *
	`ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

117 
ngx_hâp_log_›_t
 *
›
);

118 
u_ch¨
 *
	`ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

119 
ngx_hâp_log_›_t
 *
›
);

120 
u_ch¨
 *
	`ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

121 
ngx_hâp_log_›_t
 *
›
);

122 
u_ch¨
 *
	`ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

123 
ngx_hâp_log_›_t
 *
›
);

124 
u_ch¨
 *
	`ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

125 
ngx_hâp_log_›_t
 *
›
);

126 
u_ch¨
 *
	`ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

127 
ngx_hâp_log_›_t
 *
›
);

128 
u_ch¨
 *
	`ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

129 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

130 
u_ch¨
 *
	`ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

131 
ngx_hâp_log_›_t
 *
›
);

133 
ngx_öt_t
 
	`ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

134 
ngx_hâp_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
esˇ≥
);

135 
size_t
 
	`ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

136 
uöçå_t
 
d©a
);

137 
u_ch¨
 *
	`ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

138 
ngx_hâp_log_›_t
 *
›
);

139 
uöçå_t
 
	`ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

140 
size_t
 
	`ngx_hâp_log_js⁄_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

141 
uöçå_t
 
d©a
);

142 
u_ch¨
 *
	`ngx_hâp_log_js⁄_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

143 
ngx_hâp_log_›_t
 *
›
);

144 
size_t
 
	`ngx_hâp_log_u√sˇ≥d_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

145 
uöçå_t
 
d©a
);

146 
u_ch¨
 *
	`ngx_hâp_log_u√sˇ≥d_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

147 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

150 *
	`ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

151 *
	`ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

152 *
	`ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

153 *
chûd
);

154 *
	`ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

155 *
c⁄f
);

156 *
	`ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

157 *
c⁄f
);

158 *
	`ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

159 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

160 *
	`ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

161 *
c⁄f
);

162 
ngx_öt_t
 
	`ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
);

165 
ngx_comm™d_t
 
ngx_hâp_log_comm™ds
[] = {

167 { 
	`ngx_°rög
("log_format"),

168 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

169 
ngx_hâp_log_£t_f‹m©
,

170 
NGX_HTTP_MAIN_CONF_OFFSET
,

172 
NULL
 },

174 { 
	`ngx_°rög
("access_log"),

175 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


176 |
NGX_HTTP_LMT_CONF
|
NGX_CONF_1MORE
,

177 
ngx_hâp_log_£t_log
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

180 
NULL
 },

182 { 
	`ngx_°rög
("open_log_file_cache"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

184 
ngx_hâp_log_›í_fûe_ˇche
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

187 
NULL
 },

189 
ngx_nuŒ_comm™d


190 
	}
};

193 
ngx_hâp_moduÀ_t
 
	gngx_hâp_log_moduÀ_˘x
 = {

194 
NULL
,

195 
ngx_hâp_log_öô
,

197 
ngx_hâp_log_¸óã_maö_c⁄f
,

198 
NULL
,

200 
NULL
,

201 
NULL
,

203 
ngx_hâp_log_¸óã_loc_c⁄f
,

204 
ngx_hâp_log_mîge_loc_c⁄f


208 
ngx_moduÀ_t
 
	gngx_hâp_log_moduÀ
 = {

209 
NGX_MODULE_V1
,

210 &
ngx_hâp_log_moduÀ_˘x
,

211 
ngx_hâp_log_comm™ds
,

212 
NGX_HTTP_MODULE
,

213 
NULL
,

214 
NULL
,

215 
NULL
,

216 
NULL
,

217 
NULL
,

218 
NULL
,

219 
NULL
,

220 
NGX_MODULE_V1_PADDING


224 
ngx_°r_t
 
	gngx_hâp_ac˚ss_log
 = 
ngx_°rög
(
NGX_HTTP_LOG_PATH
);

227 
ngx_°r_t
 
	gngx_hâp_comböed_fmt
 =

228 
ngx_°rög
("$remote_addr - $remote_user [$time_local] "

233 
ngx_hâp_log_v¨_t
 
	gngx_hâp_log_v¨s
[] = {

234 { 
ngx_°rög
("pùe"), 1, 
ngx_hâp_log_pùe
 },

235 { 
ngx_°rög
("time_local"), ("28/Sep/1970:12:00:00 +0600") - 1,

236 
ngx_hâp_log_time
 },

237 { 
ngx_°rög
("time_iso8601"), ("1970-09-28T12:00:00+06:00") - 1,

238 
ngx_hâp_log_iso8601
 },

239 { 
ngx_°rög
("m£c"), 
NGX_TIME_T_LEN
 + 4, 
ngx_hâp_log_m£c
 },

240 { 
ngx_°rög
("ªque°_time"), 
NGX_TIME_T_LEN
 + 4,

241 
ngx_hâp_log_ªque°_time
 },

242 { 
ngx_°rög
("°©us"), 
NGX_INT_T_LEN
, 
ngx_hâp_log_°©us
 },

243 { 
ngx_°rög
("byãs_£¡"), 
NGX_OFF_T_LEN
, 
ngx_hâp_log_byãs_£¡
 },

244 { 
ngx_°rög
("body_byãs_£¡"), 
NGX_OFF_T_LEN
,

245 
ngx_hâp_log_body_byãs_£¡
 },

246 { 
ngx_°rög
("ªque°_Àngth"), 
NGX_SIZE_T_LEN
,

247 
ngx_hâp_log_ªque°_Àngth
 },

249 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

253 
ngx_öt_t


254 
	$ngx_hâp_log_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

256 
u_ch¨
 *
löe
, *
p
;

257 
size_t
 
Àn
, 
size
;

258 
ssize_t
 
n
;

259 
ngx_°r_t
 
vÆ
;

260 
ngx_uöt_t
 
i
, 
l
;

261 
ngx_hâp_log_t
 *
log
;

262 
ngx_hâp_log_›_t
 *
›
;

263 
ngx_hâp_log_buf_t
 *
buf„r
;

264 
ngx_hâp_log_loc_c⁄f_t
 *
lcf
;

266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

269 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

271 i‡(
lcf
->
off
) {

272  
NGX_OK
;

275 
log
 = 
lcf
->
logs
->
ñts
;

276 
l
 = 0;Ü < 
lcf
->
logs
->
√…s
;Ü++) {

278 i‡(
log
[
l
].
fûãr
) {

279 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
log
[
l
].
fûãr
, &
vÆ
Ë!
NGX_OK
) {

280  
NGX_ERROR
;

283 i‡(
vÆ
.
Àn
 =0 || (vÆ.À¿=1 && vÆ.
d©a
[0] == '0')) {

288 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

299 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
log
[
l
].
f‹m©
->
Êushes
);

301 
Àn
 = 0;

302 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

303 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

304 i‡(
›
[
i
].
Àn
 == 0) {

305 
Àn
 +
›
[
i
].
	`gëÀn
(
r
, op[i].
d©a
);

308 
Àn
 +
›
[
i
].len;

312 i‡(
log
[
l
].
sy¶og_≥î
) {

315 
Àn
 += ("<255>Jan 01 00:00:00 ") - 1

316 + 
ngx_cy˛e
->
ho°«me
.
Àn
 + 1

317 + 
log
[
l
].
sy¶og_≥î
->
èg
.
Àn
 + 2;

319 
Æloc_löe
;

322 
Àn
 +
NGX_LINEFEED_SIZE
;

324 
buf„r
 = 
log
[
l
].
fûe
 ?Üog[l].fûe->
d©a
 : 
NULL
;

326 i‡(
buf„r
) {

328 i‡(
Àn
 > (
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

330 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
buf„r
->
°¨t
,

331 
buf„r
->
pos
 - buf„r->
°¨t
);

333 
buf„r
->
pos
 = buf„r->
°¨t
;

336 i‡(
Àn
 <(
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

338 
p
 = 
buf„r
->
pos
;

340 i‡(
buf„r
->
evít
 && 
p
 =buf„r->
°¨t
) {

341 
	`ngx_add_timî
(
buf„r
->
evít
, buf„r->
Êush
);

344 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

345 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

348 
	`ngx_löe„ed
(
p
);

350 
buf„r
->
pos
 = 
p
;

355 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

356 
	`ngx_dñ_timî
(
buf„r
->
evít
);

360 
Æloc_löe
:

362 
löe
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

363 i‡(
löe
 =
NULL
) {

364  
NGX_ERROR
;

367 
p
 = 
löe
;

369 i‡(
log
[
l
].
sy¶og_≥î
) {

370 
p
 = 
	`ngx_sy¶og_add_hódî
(
log
[
l
].
sy¶og_≥î
, 
löe
);

373 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

374 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

377 i‡(
log
[
l
].
sy¶og_≥î
) {

379 
size
 = 
p
 - 
löe
;

381 
n
 = 
	`ngx_sy¶og_£nd
(
log
[
l
].
sy¶og_≥î
, 
löe
, 
size
);

383 i‡(
n
 < 0) {

384 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

387 } i‡((
size_t
Ë
n
 !
size
) {

388 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

390 
n
, 
size
);

396 
	`ngx_löe„ed
(
p
);

398 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
löe
, 
p
 -Üine);

401  
NGX_OK
;

402 
	}
}

406 
	$ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
, 
u_ch¨
 *
buf
,

407 
size_t
 
Àn
)

409 
u_ch¨
 *
«me
;

410 
time_t
 
now
;

411 
ssize_t
 
n
;

412 
ngx_îr_t
 
îr
;

413 #i‡(
NGX_ZLIB
)

414 
ngx_hâp_log_buf_t
 *
buf„r
;

417 i‡(
log
->
s¸ùt
 =
NULL
) {

418 
«me
 = 
log
->
fûe
->«me.
d©a
;

420 #i‡(
NGX_ZLIB
)

421 
buf„r
 = 
log
->
fûe
->
d©a
;

423 i‡(
buf„r
 && buf„r->
gzù
) {

424 
n
 = 
	`ngx_hâp_log_gzù
(
log
->
fûe
->
fd
, 
buf
, 
Àn
, 
buf„r
->
gzù
,

425 
r
->
c⁄√˘i⁄
->
log
);

427 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

430 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

434 
«me
 = 
NULL
;

435 
n
 = 
	`ngx_hâp_log_s¸ùt_wrôe
(
r
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

438 i‡(
n
 =(
ssize_t
Ë
Àn
) {

442 
now
 = 
	`ngx_time
();

444 i‡(
n
 == -1) {

445 
îr
 = 
ngx_î∫o
;

447 i‡(
îr
 =
NGX_ENOSPC
) {

448 
log
->
disk_fuŒ_time
 = 
now
;

451 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

452 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

453 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

455 
log
->
îr‹_log_time
 = 
now
;

461 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

462 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

463 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

464 
«me
, 
n
, 
Àn
);

466 
log
->
îr‹_log_time
 = 
now
;

468 
	}
}

471 
ssize_t


472 
	$ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
,

473 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

475 
size_t
 
roŸ
;

476 
ssize_t
 
n
;

477 
ngx_°r_t
 
log
, 
∑th
;

478 
ngx_›í_fûe_öfo_t
 
of
;

479 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
;

480 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

482 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

484 i‡(!
r
->
roŸ_ã°ed
) {

488 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

490  
Àn
;

493 
∑th
.
d©a
[
roŸ
] = '\0';

495 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

497 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

498 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

499 
of
.
ã°_dú
 = 1;

500 
of
.
ã°_⁄ly
 = 1;

501 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

502 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

504 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

506  
Àn
;

509 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

510 !
NGX_OK
)

512 i‡(
of
.
îr
 == 0) {

514  
Àn
;

517 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

518 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

521  
Àn
;

524 i‡(!
of
.
is_dú
) {

525 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ENOTDIR
,

526 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

529  
Àn
;

533 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

534 
s¸ùt
->
vÆues
->
ñts
)

535 =
NULL
)

538  
Àn
;

541 
log
.
d©a
[log.
Àn
 - 1] = '\0';

542 *
«me
 = 
log
.
d©a
;

544 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

545 "hâ∞log \"%s\"", 
log
.
d©a
);

547 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

549 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

551 
of
.
log
 = 1;

552 
of
.
vÆid
 = 
Œcf
->
›í_fûe_ˇche_vÆid
;

553 
of
.
mö_u£s
 = 
Œcf
->
›í_fûe_ˇche_mö_u£s
;

554 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

556 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
log
, &
of
Ë!
NGX_OK
) {

558  
Àn
;

561 i‡(
	`ngx_›í_ˇched_fûe
(
Œcf
->
›í_fûe_ˇche
, &
log
, &
of
, 
r
->
poﬁ
)

562 !
NGX_OK
)

564 i‡(
of
.
îr
 == 0) {

566  
Àn
;

569 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

570 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

572  
Àn
;

575 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

576 "hâ∞log #%d", 
of
.
fd
);

578 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

580  
n
;

581 
	}
}

584 #i‡(
NGX_ZLIB
)

586 
ssize_t


587 
	$ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
, 
ngx_öt_t
 
Àvñ
,

588 
ngx_log_t
 *
log
)

590 
rc
, 
wbôs
, 
memÀvñ
;

591 
u_ch¨
 *
out
;

592 
size_t
 
size
;

593 
ssize_t
 
n
;

594 
z_°ªam
 
z°ªam
;

595 
ngx_îr_t
 
îr
;

596 
ngx_poﬁ_t
 *
poﬁ
;

598 
wbôs
 = 
MAX_WBITS
;

599 
memÀvñ
 = 
MAX_MEM_LEVEL
 - 1;

601 (
ssize_t
Ë
Àn
 < ((1 << (
wbôs
 - 1)) - 262)) {

602 
wbôs
--;

603 
memÀvñ
--;

611 
size
 = 
Àn
 + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;

613 
	`ngx_memzîo
(&
z°ªam
, (
z_°ªam
));

615 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(256, 
log
);

616 i‡(
poﬁ
 =
NULL
) {

618  
Àn
;

621 
poﬁ
->
log
 =Üog;

623 
z°ªam
.
zÆloc
 = 
ngx_hâp_log_gzù_Æloc
;

624 
z°ªam
.
z‰ì
 = 
ngx_hâp_log_gzù_‰ì
;

625 
z°ªam
.
›aque
 = 
poﬁ
;

627 
out
 = 
	`ngx_≤Æloc
(
poﬁ
, 
size
);

628 i‡(
out
 =
NULL
) {

629 
d⁄e
;

632 
z°ªam
.
√xt_ö
 = 
buf
;

633 
z°ªam
.
avaû_ö
 = 
Àn
;

634 
z°ªam
.
√xt_out
 = 
out
;

635 
z°ªam
.
avaû_out
 = 
size
;

637 
rc
 = 
	`deÊ©eInô2
(&
z°ªam
, (Ë
Àvñ
, 
Z_DEFLATED
, 
wbôs
 + 16, 
memÀvñ
,

638 
Z_DEFAULT_STRATEGY
);

640 i‡(
rc
 !
Z_OK
) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eInô2(ËÁûed: %d", 
rc
);

642 
d⁄e
;

645 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

647 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

648 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
);

650 
rc
 = 
	`deÊ©e
(&
z°ªam
, 
Z_FINISH
);

652 i‡(
rc
 !
Z_STREAM_END
) {

653 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

654 "deÊ©e(Z_FINISHËÁûed: %d", 
rc
);

655 
d⁄e
;

658 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

660 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

661 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
,

662 
rc
);

664 
size
 -
z°ªam
.
avaû_out
;

666 
rc
 = 
	`deÊ©eEnd
(&
z°ªam
);

668 i‡(
rc
 !
Z_OK
) {

669 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eEnd(ËÁûed: %d", 
rc
);

670 
d⁄e
;

673 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
out
, 
size
);

675 i‡(
n
 !(
ssize_t
Ë
size
) {

676 
îr
 = (
n
 =-1Ë? 
ngx_î∫o
 : 0;

678 
	`ngx_de°roy_poﬁ
(
poﬁ
);

680 
	`ngx_£t_î∫o
(
îr
);

684 
d⁄e
:

686 
	`ngx_de°roy_poﬁ
(
poﬁ
);

689  
Àn
;

690 
	}
}

694 
	$ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

696 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

698 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

699 "gzùáŒoc:Ç:%ud s:%ud", 
ôems
, 
size
);

701  
	`ngx_∑Œoc
(
poﬁ
, 
ôems
 * 
size
);

702 
	}
}

706 
	$ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
)

709 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

711 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0, "gzù fªe: %p", 
addªss
);

713 
	}
}

719 
	$ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
)

721 
size_t
 
Àn
;

722 
ssize_t
 
n
;

723 
ngx_hâp_log_buf_t
 *
buf„r
;

725 
buf„r
 = 
fûe
->
d©a
;

727 
Àn
 = 
buf„r
->
pos
 - buf„r->
°¨t
;

729 i‡(
Àn
 == 0) {

733 #i‡(
NGX_ZLIB
)

734 i‡(
buf„r
->
gzù
) {

735 
n
 = 
	`ngx_hâp_log_gzù
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
, buf„r->
gzù
, 
log
);

737 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

740 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

743 i‡(
n
 == -1) {

744 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

745 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

746 
fûe
->
«me
.
d©a
);

748 } i‡((
size_t
Ë
n
 !
Àn
) {

749 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

750 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

751 
fûe
->
«me
.
d©a
, 
n
, 
Àn
);

754 
buf„r
->
pos
 = buf„r->
°¨t
;

756 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

757 
	`ngx_dñ_timî
(
buf„r
->
evít
);

759 
	}
}

763 
	$ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
)

765 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

768 
	`ngx_hâp_log_Êush
(
ev
->
d©a
,Év->
log
);

769 
	}
}

772 
u_ch¨
 *

773 
	$ngx_hâp_log_c›y_sh‹t
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

774 
ngx_hâp_log_›_t
 *
›
)

776 
size_t
 
Àn
;

777 
uöçå_t
 
d©a
;

779 
Àn
 = 
›
->len;

780 
d©a
 = 
›
->data;

782 
Àn
--) {

783 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

784 
d©a
 >>= 8;

787  
buf
;

788 
	}
}

791 
u_ch¨
 *

792 
	$ngx_hâp_log_c›y_l⁄g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

793 
ngx_hâp_log_›_t
 *
›
)

795  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

796 
	}
}

799 
u_ch¨
 *

800 
	$ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

802 i‡(
r
->
pùñöe
) {

803 *
buf
 = 'p';

805 *
buf
 = '.';

808  
buf
 + 1;

809 
	}
}

812 
u_ch¨
 *

813 
	$ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

815  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

816 
ngx_ˇched_hâp_log_time
.
Àn
);

817 
	}
}

819 
u_ch¨
 *

820 
	$ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

822  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

823 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

824 
	}
}

826 
u_ch¨
 *

827 
	$ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

829 
ngx_time_t
 *
ç
;

831 
ç
 = 
	`ngx_timeofday
();

833  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

834 
	}
}

837 
u_ch¨
 *

838 
	$ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

839 
ngx_hâp_log_›_t
 *
›
)

841 
ngx_time_t
 *
ç
;

842 
ngx_m£c_öt_t
 
ms
;

844 
ç
 = 
	`ngx_timeofday
();

846 
ms
 = (
ngx_m£c_öt_t
)

847 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

848 
ms
 = 
	`ngx_max
(ms, 0);

850  
	`ngx_•rötf
(
buf
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

851 
	}
}

854 
u_ch¨
 *

855 
	$ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

857 
ngx_uöt_t
 
°©us
;

859 i‡(
r
->
îr_°©us
) {

860 
°©us
 = 
r
->
îr_°©us
;

862 } i‡(
r
->
hódîs_out
.
°©us
) {

863 
°©us
 = 
r
->
hódîs_out
.status;

865 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

866 
°©us
 = 9;

869 
°©us
 = 0;

872  
	`ngx_•rötf
(
buf
, "%03ui", 
°©us
);

873 
	}
}

876 
u_ch¨
 *

877 
	$ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

878 
ngx_hâp_log_›_t
 *
›
)

880  
	`ngx_•rötf
(
buf
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
);

881 
	}
}

889 
u_ch¨
 *

890 
	$ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

891 
ngx_hâp_log_›_t
 *
›
)

893 
off_t
 
Àngth
;

895 
Àngth
 = 
r
->
c⁄√˘i⁄
->
£¡
 -Ñ->
hódî_size
;

897 i‡(
Àngth
 > 0) {

898  
	`ngx_•rötf
(
buf
, "%O", 
Àngth
);

901 *
buf
 = '0';

903  
buf
 + 1;

904 
	}
}

907 
u_ch¨
 *

908 
	$ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

909 
ngx_hâp_log_›_t
 *
›
)

911  
	`ngx_•rötf
(
buf
, "%O", 
r
->
ªque°_Àngth
);

912 
	}
}

915 
ngx_öt_t


916 
	$ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_log_›_t
 *
›
,

917 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
esˇ≥
)

919 
ngx_öt_t
 
ödex
;

921 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

922 i‡(
ödex
 =
NGX_ERROR
) {

923  
NGX_ERROR
;

926 
›
->
Àn
 = 0;

928 
esˇ≥
) {

929 
NGX_HTTP_LOG_ESCAPE_JSON
:

930 
›
->
gëÀn
 = 
ngx_hâp_log_js⁄_v¨übÀ_gëÀn
;

931 
›
->
run
 = 
ngx_hâp_log_js⁄_v¨übÀ
;

934 
NGX_HTTP_LOG_ESCAPE_NONE
:

935 
›
->
gëÀn
 = 
ngx_hâp_log_u√sˇ≥d_v¨übÀ_gëÀn
;

936 
›
->
run
 = 
ngx_hâp_log_u√sˇ≥d_v¨übÀ
;

940 
›
->
gëÀn
 = 
ngx_hâp_log_v¨übÀ_gëÀn
;

941 
›
->
run
 = 
ngx_hâp_log_v¨übÀ
;

944 
›
->
d©a
 = 
ödex
;

946  
NGX_OK
;

947 
	}
}

950 
size_t


951 
	$ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

953 
uöçå_t
 
Àn
;

954 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

956 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

958 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

962 
Àn
 = 
	`ngx_hâp_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

964 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

966  
vÆue
->
Àn
 +Üen * 3;

967 
	}
}

970 
u_ch¨
 *

971 
	$ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

973 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

975 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

977 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

978 *
buf
 = '-';

979  
buf
 + 1;

982 i‡(
vÆue
->
esˇ≥
 == 0) {

983  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

986  (
u_ch¨
 *Ë
	`ngx_hâp_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

988 
	}
}

991 
uöçå_t


992 
	$ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

994 
ngx_uöt_t
 
n
;

995 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

997 
uöt32_t
 
esˇ≥
[] = {

1016 i‡(
d°
 =
NULL
) {

1020 
n
 = 0;

1022 
size
) {

1023 i‡(
esˇ≥
[*
§c
 >> 5] & (1U << (*src & 0x1f))) {

1024 
n
++;

1026 
§c
++;

1027 
size
--;

1030  (
uöçå_t
Ë
n
;

1033 
size
) {

1034 i‡(
esˇ≥
[*
§c
 >> 5] & (1U << (*src & 0x1f))) {

1035 *
d°
++ = '\\';

1036 *
d°
++ = 'x';

1037 *
d°
++ = 
hex
[*
§c
 >> 4];

1038 *
d°
++ = 
hex
[*
§c
 & 0xf];

1039 
§c
++;

1042 *
d°
++ = *
§c
++;

1044 
size
--;

1047  (
uöçå_t
Ë
d°
;

1048 
	}
}

1051 
size_t


1052 
	$ngx_hâp_log_js⁄_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

1054 
uöçå_t
 
Àn
;

1055 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1057 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

1059 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

1063 
Àn
 = 
	`ngx_esˇ≥_js⁄
(
NULL
, 
vÆue
->
d©a
, value->len);

1065 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

1067  
vÆue
->
Àn
 +Üen;

1068 
	}
}

1071 
u_ch¨
 *

1072 
	$ngx_hâp_log_js⁄_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

1073 
ngx_hâp_log_›_t
 *
›
)

1075 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1077 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

1079 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

1080  
buf
;

1083 i‡(
vÆue
->
esˇ≥
 == 0) {

1084  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

1087  (
u_ch¨
 *Ë
	`ngx_esˇ≥_js⁄
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

1089 
	}
}

1092 
size_t


1093 
	$ngx_hâp_log_u√sˇ≥d_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

1095 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1097 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

1099 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

1103 
vÆue
->
esˇ≥
 = 0;

1105  
vÆue
->
Àn
;

1106 
	}
}

1109 
u_ch¨
 *

1110 
	$ngx_hâp_log_u√sˇ≥d_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

1111 
ngx_hâp_log_›_t
 *
›
)

1113 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1115 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

1117 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

1118  
buf
;

1121  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

1122 
	}
}

1126 
	$ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1128 
ngx_hâp_log_maö_c⁄f_t
 *
c⁄f
;

1130 
ngx_hâp_log_fmt_t
 *
fmt
;

1132 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_maö_c⁄f_t
));

1133 i‡(
c⁄f
 =
NULL
) {

1134  
NULL
;

1137 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_hâp_log_fmt_t
))

1138 !
NGX_OK
)

1140  
NULL
;

1143 
fmt
 = 
	`ngx_¨øy_push
(&
c⁄f
->
f‹m©s
);

1144 i‡(
fmt
 =
NULL
) {

1145  
NULL
;

1148 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

1150 
fmt
->
Êushes
 = 
NULL
;

1152 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1153 i‡(
fmt
->
›s
 =
NULL
) {

1154  
NULL
;

1157  
c⁄f
;

1158 
	}
}

1162 
	$ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1164 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
;

1166 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_loc_c⁄f_t
));

1167 i‡(
c⁄f
 =
NULL
) {

1168  
NULL
;

1171 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1173  
c⁄f
;

1174 
	}
}

1178 
	$ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1180 
ngx_hâp_log_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1181 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1183 
ngx_hâp_log_t
 *
log
;

1184 
ngx_hâp_log_fmt_t
 *
fmt
;

1185 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1187 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1189 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

1190 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

1191 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

1193 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1194 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

1198 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1199  
NGX_CONF_OK
;

1202 
c⁄f
->
logs
 = 
¥ev
->logs;

1203 
c⁄f
->
off
 = 
¥ev
->off;

1205 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1206  
NGX_CONF_OK
;

1209 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1210 i‡(
c⁄f
->
logs
 =
NULL
) {

1211  
NGX_CONF_ERROR
;

1214 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

1215 i‡(
log
 =
NULL
) {

1216  
NGX_CONF_ERROR
;

1219 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1221 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_hâp_ac˚ss_log
);

1222 i‡(
log
->
fûe
 =
NULL
) {

1223  
NGX_CONF_ERROR
;

1226 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1227 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1230 
log
->
f‹m©
 = &
fmt
[0];

1231 
lmcf
->
comböed_u£d
 = 1;

1233  
NGX_CONF_OK
;

1234 
	}
}

1238 
	$ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1240 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1242 
ssize_t
 
size
;

1243 
ngx_öt_t
 
gzù
;

1244 
ngx_uöt_t
 
i
, 
n
;

1245 
ngx_m£c_t
 
Êush
;

1246 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

1247 
ngx_hâp_log_t
 *
log
;

1248 
ngx_sy¶og_≥î_t
 *
≥î
;

1249 
ngx_hâp_log_buf_t
 *
buf„r
;

1250 
ngx_hâp_log_fmt_t
 *
fmt
;

1251 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1252 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1253 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1255 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1257 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1258 
Œcf
->
off
 = 1;

1259 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1260  
NGX_CONF_OK
;

1263 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1264 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

1265  
NGX_CONF_ERROR
;

1268 i‡(
Œcf
->
logs
 =
NULL
) {

1269 
Œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1270 i‡(
Œcf
->
logs
 =
NULL
) {

1271  
NGX_CONF_ERROR
;

1275 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1277 
log
 = 
	`ngx_¨øy_push
(
Œcf
->
logs
);

1278 i‡(
log
 =
NULL
) {

1279  
NGX_CONF_ERROR
;

1282 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1285 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "syslog:", 7) == 0) {

1287 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_sy¶og_≥î_t
));

1288 i‡(
≥î
 =
NULL
) {

1289  
NGX_CONF_ERROR
;

1292 i‡(
	`ngx_sy¶og_¥o˚ss_c⁄f
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

1293  
NGX_CONF_ERROR
;

1296 
log
->
sy¶og_≥î
 = 
≥î
;

1298 
¥o˚ss_f‹m©s
;

1301 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1303 i‡(
n
 == 0) {

1304 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

1305 i‡(
log
->
fûe
 =
NULL
) {

1306  
NGX_CONF_ERROR
;

1310 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

1311  
NGX_CONF_ERROR
;

1314 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_s¸ùt_t
));

1315 i‡(
log
->
s¸ùt
 =
NULL
) {

1316  
NGX_CONF_ERROR
;

1319 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1321 
sc
.
cf
 = cf;

1322 
sc
.
sour˚
 = &
vÆue
[1];

1323 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

1324 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

1325 
sc
.
v¨übÀs
 = 
n
;

1326 
sc
.
com∂ëe_Àngths
 = 1;

1327 
sc
.
com∂ëe_vÆues
 = 1;

1329 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1330  
NGX_CONF_ERROR
;

1334 
¥o˚ss_f‹m©s
:

1336 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

1337 
«me
 = 
vÆue
[2];

1339 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

1340 
lmcf
->
comböed_u£d
 = 1;

1344 
	`ngx_°r_£t
(&
«me
, "combined");

1345 
lmcf
->
comböed_u£d
 = 1;

1348 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1349 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1350 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

1351 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

1353 
log
->
f‹m©
 = &
fmt
[
i
];

1358 i‡(
log
->
f‹m©
 =
NULL
) {

1359 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1360 "unknow¿log f‹m© \"%V\"", &
«me
);

1361  
NGX_CONF_ERROR
;

1364 
size
 = 0;

1365 
Êush
 = 0;

1366 
gzù
 = 0;

1368 
i
 = 3; i < 
cf
->
¨gs
->
√…s
; i++) {

1370 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "buffer=", 7) == 0) {

1371 
s
.
Àn
 = 
vÆue
[
i
].len - 7;

1372 
s
.
d©a
 = 
vÆue
[
i
].data + 7;

1374 
size
 = 
	`ngx_∑r£_size
(&
s
);

1376 i‡(
size
 =
NGX_ERROR
 || size == 0) {

1377 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1378 "övÆid buf„∏sizê\"%V\"", &
s
);

1379  
NGX_CONF_ERROR
;

1385 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "flush=", 6) == 0) {

1386 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1387 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1389 
Êush
 = 
	`ngx_∑r£_time
(&
s
, 0);

1391 i‡(
Êush
 =(
ngx_m£c_t
Ë
NGX_ERROR
 || flush == 0) {

1392 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1393 "övÆid flushÅimê\"%V\"", &
s
);

1394  
NGX_CONF_ERROR
;

1400 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "gzip", 4) == 0

1401 && (
vÆue
[
i
].
Àn
 =4 || vÆue[i].
d©a
[4] == '='))

1403 #i‡(
NGX_ZLIB
)

1404 i‡(
size
 == 0) {

1405 
size
 = 64 * 1024;

1408 i‡(
vÆue
[
i
].
Àn
 == 4) {

1409 
gzù
 = 
Z_BEST_SPEED
;

1413 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

1414 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

1416 
gzù
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

1418 i‡(
gzù
 < 1 || gzip > 9) {

1419 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1420 "övÆid com¥essi⁄Üevñ \"%V\"", &
s
);

1421  
NGX_CONF_ERROR
;

1427 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1429  
NGX_CONF_ERROR
;

1433 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "if=", 3) == 0) {

1434 
s
.
Àn
 = 
vÆue
[
i
].len - 3;

1435 
s
.
d©a
 = 
vÆue
[
i
].data + 3;

1437 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1439 
ccv
.
cf
 = cf;

1440 
ccv
.
vÆue
 = &
s
;

1441 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1442 (
ngx_hâp_com∂ex_vÆue_t
));

1443 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

1444  
NGX_CONF_ERROR
;

1447 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1448  
NGX_CONF_ERROR
;

1451 
log
->
fûãr
 = 
ccv
.
com∂ex_vÆue
;

1456 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1457 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1458  
NGX_CONF_ERROR
;

1461 i‡(
Êush
 && 
size
 == 0) {

1462 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1464 &
vÆue
[1]);

1465  
NGX_CONF_ERROR
;

1468 i‡(
size
) {

1470 i‡(
log
->
s¸ùt
) {

1471 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1473  
NGX_CONF_ERROR
;

1476 i‡(
log
->
sy¶og_≥î
) {

1477 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1479  
NGX_CONF_ERROR
;

1482 i‡(
log
->
fûe
->
d©a
) {

1483 
buf„r
 = 
log
->
fûe
->
d©a
;

1485 i‡(
buf„r
->
œ°
 - buf„r->
°¨t
 !
size


1486 || 
buf„r
->
Êush
 != flush

1487 || 
buf„r
->
gzù
 != gzip)

1489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1492 &
vÆue
[1]);

1493  
NGX_CONF_ERROR
;

1496  
NGX_CONF_OK
;

1499 
buf„r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_buf_t
));

1500 i‡(
buf„r
 =
NULL
) {

1501  
NGX_CONF_ERROR
;

1504 
buf„r
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

1505 i‡(
buf„r
->
°¨t
 =
NULL
) {

1506  
NGX_CONF_ERROR
;

1509 
buf„r
->
pos
 = buf„r->
°¨t
;

1510 
buf„r
->
œ°
 = buf„r->
°¨t
 + 
size
;

1512 i‡(
Êush
) {

1513 
buf„r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1514 i‡(
buf„r
->
evít
 =
NULL
) {

1515  
NGX_CONF_ERROR
;

1518 
buf„r
->
evít
->
d©a
 = 
log
->
fûe
;

1519 
buf„r
->
evít
->
h™dÀr
 = 
ngx_hâp_log_Êush_h™dÀr
;

1520 
buf„r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1521 
buf„r
->
evít
->
ˇn˚œbÀ
 = 1;

1523 
buf„r
->
Êush
 = flush;

1526 
buf„r
->
gzù
 = gzip;

1528 
log
->
fûe
->
Êush
 = 
ngx_hâp_log_Êush
;

1529 
log
->
fûe
->
d©a
 = 
buf„r
;

1532  
NGX_CONF_OK
;

1533 
	}
}

1537 
	$ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1539 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1541 
ngx_°r_t
 *
vÆue
;

1542 
ngx_uöt_t
 
i
;

1543 
ngx_hâp_log_fmt_t
 *
fmt
;

1545 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1547 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1548 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1549 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1550 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1552 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1554 &
vÆue
[1]);

1555  
NGX_CONF_ERROR
;

1559 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1560 i‡(
fmt
 =
NULL
) {

1561  
NGX_CONF_ERROR
;

1564 
fmt
->
«me
 = 
vÆue
[1];

1566 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1567 i‡(
fmt
->
Êushes
 =
NULL
) {

1568  
NGX_CONF_ERROR
;

1571 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1572 i‡(
fmt
->
›s
 =
NULL
) {

1573  
NGX_CONF_ERROR
;

1576  
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
, cf->
¨gs
, 2);

1577 
	}
}

1581 
	$ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1582 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1584 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1585 
size_t
 
i
, 
Àn
;

1586 
ngx_°r_t
 *
vÆue
, 
v¨
;

1587 
ngx_öt_t
 *
Êush
;

1588 
ngx_uöt_t
 
bøckë
, 
esˇ≥
;

1589 
ngx_hâp_log_›_t
 *
›
;

1590 
ngx_hâp_log_v¨_t
 *
v
;

1592 
esˇ≥
 = 
NGX_HTTP_LOG_ESCAPE_DEFAULT
;

1593 
vÆue
 = 
¨gs
->
ñts
;

1595 i‡(
s
 < 
¨gs
->
√…s
 && 
	`ngx_°∫cmp
(
vÆue
[s].
d©a
, "escape=", 7) == 0) {

1596 
d©a
 = 
vÆue
[
s
].data + 7;

1598 i‡(
	`ngx_°rcmp
(
d©a
, "json") == 0) {

1599 
esˇ≥
 = 
NGX_HTTP_LOG_ESCAPE_JSON
;

1601 } i‡(
	`ngx_°rcmp
(
d©a
, "none") == 0) {

1602 
esˇ≥
 = 
NGX_HTTP_LOG_ESCAPE_NONE
;

1604 } i‡(
	`ngx_°rcmp
(
d©a
, "default") != 0) {

1605 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1606 "unknow¿log f‹m©Ésˇpög \"%s\"", 
d©a
);

1607  
NGX_CONF_ERROR
;

1610 
s
++;

1613  ; 
s
 < 
¨gs
->
√…s
; s++) {

1615 
i
 = 0;

1617 
i
 < 
vÆue
[
s
].
Àn
) {

1619 
›
 = 
	`ngx_¨øy_push
(
›s
);

1620 i‡(
›
 =
NULL
) {

1621  
NGX_CONF_ERROR
;

1624 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1626 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1628 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1629 
övÆid
;

1632 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1633 
bøckë
 = 1;

1635 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1636 
övÆid
;

1639 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1642 
bøckë
 = 0;

1643 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1646 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1647 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1649 i‡(
ch
 ='}' && 
bøckë
) {

1650 
i
++;

1651 
bøckë
 = 0;

1655 i‡((
ch
 >= 'A' && ch <= 'Z')

1656 || (
ch
 >= 'a' && ch <= 'z')

1657 || (
ch
 >= '0' && ch <= '9')

1658 || 
ch
 == '_')

1666 i‡(
bøckë
) {

1667 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1669 "v¨übÀ i†missög", &
v¨
);

1670  
NGX_CONF_ERROR
;

1673 i‡(
v¨
.
Àn
 == 0) {

1674 
övÆid
;

1677 
v
 = 
ngx_hâp_log_v¨s
; v->
«me
.
Àn
; v++) {

1679 i‡(
v
->
«me
.
Àn
 =
v¨
.len

1680 && 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

1682 
›
->
Àn
 = 
v
->len;

1683 
›
->
gëÀn
 = 
NULL
;

1684 
›
->
run
 = 
v
->run;

1685 
›
->
d©a
 = 0;

1687 
found
;

1691 i‡(
	`ngx_hâp_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
, 
esˇ≥
)

1692 !
NGX_OK
)

1694  
NGX_CONF_ERROR
;

1697 i‡(
Êushes
) {

1699 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1700 i‡(
Êush
 =
NULL
) {

1701  
NGX_CONF_ERROR
;

1704 *
Êush
 = 
›
->
d©a
;

1707 
found
:

1712 
i
++;

1714 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1715 
i
++;

1718 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1720 i‡(
Àn
) {

1722 
›
->
Àn
 =Üen;

1723 
›
->
gëÀn
 = 
NULL
;

1725 i‡(
Àn
 <(
uöçå_t
)) {

1726 
›
->
run
 = 
ngx_hâp_log_c›y_sh‹t
;

1727 
›
->
d©a
 = 0;

1729 
Àn
--) {

1730 
›
->
d©a
 <<= 8;

1731 
›
->
d©a
 |d©a[
Àn
];

1735 
›
->
run
 = 
ngx_hâp_log_c›y_l⁄g
;

1737 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1738 i‡(
p
 =
NULL
) {

1739  
NGX_CONF_ERROR
;

1742 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1743 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1749  
NGX_CONF_OK
;

1751 
övÆid
:

1753 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1755  
NGX_CONF_ERROR
;

1756 
	}
}

1760 
	$ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1762 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1764 
time_t
 
öa˘ive
, 
vÆid
;

1765 
ngx_°r_t
 *
vÆue
, 
s
;

1766 
ngx_öt_t
 
max
, 
mö_u£s
;

1767 
ngx_uöt_t
 
i
;

1769 i‡(
Œcf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1773 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1775 
max
 = 0;

1776 
öa˘ive
 = 10;

1777 
vÆid
 = 60;

1778 
mö_u£s
 = 1;

1780 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1782 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1784 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1785 i‡(
max
 =
NGX_ERROR
) {

1786 
Áûed
;

1792 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1794 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1795 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1797 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1798 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1799 
Áûed
;

1805 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1807 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1808 i‡(
mö_u£s
 =
NGX_ERROR
) {

1809 
Áûed
;

1815 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1817 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1818 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1820 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1821 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1822 
Áûed
;

1828 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1830 
Œcf
->
›í_fûe_ˇche
 = 
NULL
;

1835 
Áûed
:

1837 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1839 &
vÆue
[
i
]);

1840  
NGX_CONF_ERROR
;

1843 i‡(
Œcf
->
›í_fûe_ˇche
 =
NULL
) {

1844  
NGX_CONF_OK
;

1847 i‡(
max
 == 0) {

1848 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1850  
NGX_CONF_ERROR
;

1853 
Œcf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1855 i‡(
Œcf
->
›í_fûe_ˇche
) {

1857 
Œcf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1858 
Œcf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1860  
NGX_CONF_OK
;

1863  
NGX_CONF_ERROR
;

1864 
	}
}

1867 
ngx_öt_t


1868 
	$ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
)

1870 
ngx_°r_t
 *
vÆue
;

1871 
ngx_¨øy_t
 
a
;

1872 
ngx_hâp_h™dÀr_±
 *
h
;

1873 
ngx_hâp_log_fmt_t
 *
fmt
;

1874 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1875 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1877 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1879 i‡(
lmcf
->
comböed_u£d
) {

1880 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1881  
NGX_ERROR
;

1884 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

1885 i‡(
vÆue
 =
NULL
) {

1886  
NGX_ERROR
;

1889 *
vÆue
 = 
ngx_hâp_comböed_fmt
;

1890 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1892 i‡(
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
NULL
, 
fmt
->
›s
, &
a
, 0)

1893 !
NGX_CONF_OK
)

1895  
NGX_ERROR
;

1899 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1901 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
);

1902 i‡(
h
 =
NULL
) {

1903  
NGX_ERROR
;

1906 *
h
 = 
ngx_hâp_log_h™dÀr
;

1908  
NGX_OK
;

1909 
	}
}

	@src/http/modules/ngx_http_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_hâp_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 #i‡(
NGX_PCRE
)

24 
ngx_¨øy_t
 
	mªgexes
;

27 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

28 
ngx_c⁄f_t
 *
	mcf
;

29 
	mho°«mes
:1;

30 
	mno_ˇchóbÀ
:1;

31 } 
	tngx_hâp_m≠_c⁄f_˘x_t
;

35 
ngx_hâp_m≠_t
 
	mm≠
;

36 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_hâp_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

46 *
ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

49 
ngx_comm™d_t
 
	gngx_hâp_m≠_comm™ds
[] = {

51 { 
ngx_°rög
("map"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

53 
ngx_hâp_m≠_block
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("map_hash_max_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_max_size
),

63 
NULL
 },

65 { 
ngx_°rög
("map_hash_bucket_size"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_buckë_size
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_m≠_moduÀ_˘x
 = {

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_m≠_¸óã_c⁄f
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_hâp_m≠_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_m≠_moduÀ_˘x
,

94 
ngx_hâp_m≠_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_m≠_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

109 
uöçå_t
 
d©a
)

111 
ngx_hâp_m≠_˘x_t
 *
m≠
 = (ngx_hâp_m≠_˘x_à*Ë
d©a
;

113 
ngx_°r_t
 
vÆ
, 
°r
;

114 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

115 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

117 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

120 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

121  
NGX_ERROR
;

124 i‡(
m≠
->
ho°«mes
 && 
vÆ
.
Àn
 > 0 && vÆ.
d©a
[val.len - 1] == '.') {

125 
vÆ
.
Àn
--;

128 
vÆue
 = 
	`ngx_hâp_m≠_föd
(
r
, &
m≠
->m≠, &
vÆ
);

130 i‡(
vÆue
 =
NULL
) {

131 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

134 i‡(!
vÆue
->
vÆid
) {

135 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 *Ë
vÆue
->
d©a
;

137 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
°r
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
v
->
vÆid
 = 1;

142 
v
->
no_ˇchóbÀ
 = 0;

143 
v
->
nŸ_found
 = 0;

144 
v
->
Àn
 = 
°r
.len;

145 
v
->
d©a
 = 
°r
.data;

148 *
v
 = *
vÆue
;

151 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

152 "hâ∞m≠: \"%V\" \"%v\"", &
vÆ
, 
v
);

154  
NGX_OK
;

155 
	}
}

159 
	$ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

161 
ngx_hâp_m≠_c⁄f_t
 *
mcf
;

163 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_c⁄f_t
));

164 i‡(
mcf
 =
NULL
) {

165  
NULL
;

168 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

169 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

171  
mcf
;

172 
	}
}

176 
	$ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

178 
ngx_hâp_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

180 *
rv
;

181 
ngx_°r_t
 *
vÆue
, 
«me
;

182 
ngx_c⁄f_t
 
ßve
;

183 
ngx_poﬁ_t
 *
poﬁ
;

184 
ngx_hash_öô_t
 
hash
;

185 
ngx_hâp_m≠_˘x_t
 *
m≠
;

186 
ngx_hâp_v¨übÀ_t
 *
v¨
;

187 
ngx_hâp_m≠_c⁄f_˘x_t
 
˘x
;

188 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

190 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

191 
mcf
->
hash_max_size
 = 2048;

194 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

195 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

198 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

199 
ngx_ˇchñöe_size
);

202 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_˘x_t
));

203 i‡(
m≠
 =
NULL
) {

204  
NGX_CONF_ERROR
;

207 
vÆue
 = 
cf
->
¨gs
->
ñts
;

209 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

211 
ccv
.
cf
 = cf;

212 
ccv
.
vÆue
 = &value[1];

213 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

215 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

216  
NGX_CONF_ERROR
;

219 
«me
 = 
vÆue
[2];

221 i‡(
«me
.
d©a
[0] != '$') {

222 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

223 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

224  
NGX_CONF_ERROR
;

227 
«me
.
Àn
--;

228 
«me
.
d©a
++;

230 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

231 i‡(
v¨
 =
NULL
) {

232  
NGX_CONF_ERROR
;

235 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_m≠_v¨übÀ
;

236 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

238 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

239 i‡(
poﬁ
 =
NULL
) {

240  
NGX_CONF_ERROR
;

243 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

244 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

246 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

247 
	`ngx_de°roy_poﬁ
(
poﬁ
);

248  
NGX_CONF_ERROR
;

251 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

252 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

253 
	`ngx_de°roy_poﬁ
(
poﬁ
);

254  
NGX_CONF_ERROR
;

257 #i‡(
NGX_PCRE
)

258 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2, (
ngx_hâp_m≠_ªgex_t
))

259 !
NGX_OK
)

261 
	`ngx_de°roy_poﬁ
(
poﬁ
);

262  
NGX_CONF_ERROR
;

266 
˘x
.
deÁu…_vÆue
 = 
NULL
;

267 
˘x
.
cf
 = &
ßve
;

268 
˘x
.
ho°«mes
 = 0;

269 
˘x
.
no_ˇchóbÀ
 = 0;

271 
ßve
 = *
cf
;

272 
cf
->
poﬁ
 =Öool;

273 
cf
->
˘x
 = &ctx;

274 
cf
->
h™dÀr
 = 
ngx_hâp_m≠
;

275 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

277 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

279 *
cf
 = 
ßve
;

281 i‡(
rv
 !
NGX_CONF_OK
) {

282 
	`ngx_de°roy_poﬁ
(
poﬁ
);

283  
rv
;

286 i‡(
˘x
.
no_ˇchóbÀ
) {

287 
v¨
->
Êags
 |
NGX_HTTP_VAR_NOCACHEABLE
;

290 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

291 &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

293 
m≠
->
ho°«mes
 = 
˘x
.hostnames;

295 
hash
.
key
 = 
ngx_hash_key_lc
;

296 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

297 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

298 
hash
.
«me
 = "map_hash";

299 
hash
.
poﬁ
 = 
cf
->pool;

301 i‡(
˘x
.
keys
.keys.
√…s
) {

302 
hash
.hash = &
m≠
->map.hash.hash;

303 
hash
.
ãmp_poﬁ
 = 
NULL
;

305 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

306 !
NGX_OK
)

308 
	`ngx_de°roy_poﬁ
(
poﬁ
);

309  
NGX_CONF_ERROR
;

313 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

315 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

316 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

317 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

319 
hash
.hash = 
NULL
;

320 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

322 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

323 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

324 !
NGX_OK
)

326 
	`ngx_de°roy_poﬁ
(
poﬁ
);

327  
NGX_CONF_ERROR
;

330 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

333 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

335 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

336 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

337 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

339 
hash
.hash = 
NULL
;

340 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

342 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

343 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

344 !
NGX_OK
)

346 
	`ngx_de°roy_poﬁ
(
poﬁ
);

347  
NGX_CONF_ERROR
;

350 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

353 #i‡(
NGX_PCRE
)

355 i‡(
˘x
.
ªgexes
.
√…s
) {

356 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

357 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

362 
	`ngx_de°roy_poﬁ
(
poﬁ
);

364  
rv
;

365 
	}
}

368 
ngx_libc_cde˛


369 
	$ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

371 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

373 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

374 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

376  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

377 
	}
}

381 
	$ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

383 
u_ch¨
 *
d©a
;

384 
size_t
 
Àn
;

385 
ngx_öt_t
 
rv
;

386 
ngx_°r_t
 *
vÆue
, 
v
;

387 
ngx_uöt_t
 
i
, 
key
;

388 
ngx_hâp_m≠_c⁄f_˘x_t
 *
˘x
;

389 
ngx_hâp_com∂ex_vÆue_t
 
cv
, *
cvp
;

390 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

391 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

393 
˘x
 = 
cf
->ctx;

395 
vÆue
 = 
cf
->
¨gs
->
ñts
;

397 i‡(
cf
->
¨gs
->
√…s
 == 1

398 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

400 
˘x
->
ho°«mes
 = 1;

401  
NGX_CONF_OK
;

404 i‡(
cf
->
¨gs
->
√…s
 == 1

405 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "volatile") == 0)

407 
˘x
->
no_ˇchóbÀ
 = 1;

408  
NGX_CONF_OK
;

411 i‡(
cf
->
¨gs
->
√…s
 != 2) {

412 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

414  
NGX_CONF_ERROR
;

417 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

418  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

421 
key
 = 0;

423 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

424 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

427 
key
 %
˘x
->
keys
.
hsize
;

429 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

431 i‡(
vp
) {

432 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

434 i‡(
vp
[
i
]->
vÆid
) {

435 
d©a
 = 
vp
[
i
]->data;

436 
Àn
 = 
vp
[
i
]->len;

439 
cvp
 = (
ngx_hâp_com∂ex_vÆue_t
 *Ë
vp
[
i
]->
d©a
;

440 
d©a
 = 
cvp
->
vÆue
.data;

441 
Àn
 = 
cvp
->
vÆue
.len;

444 i‡(
vÆue
[1].
Àn
 !=Üen) {

448 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, d©a, 
Àn
) == 0) {

449 
v¨
 = 
vp
[
i
];

450 
found
;

455 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

456 (
ngx_hâp_v¨übÀ_vÆue_t
 *))

457 !
NGX_OK
)

459  
NGX_CONF_ERROR
;

463 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

464 i‡(
v¨
 =
NULL
) {

465  
NGX_CONF_ERROR
;

468 
v
.
Àn
 = 
vÆue
[1].len;

469 
v
.
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

470 i‡(
v
.
d©a
 =
NULL
) {

471  
NGX_CONF_ERROR
;

474 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

476 
ccv
.
cf
 = 
˘x
->cf;

477 
ccv
.
vÆue
 = &
v
;

478 
ccv
.
com∂ex_vÆue
 = &
cv
;

480 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

481  
NGX_CONF_ERROR
;

484 i‡(
cv
.
Àngths
 !
NULL
) {

485 
cvp
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

486 i‡(
cvp
 =
NULL
) {

487  
NGX_CONF_ERROR
;

490 *
cvp
 = 
cv
;

492 
v¨
->
Àn
 = 0;

493 
v¨
->
d©a
 = (
u_ch¨
 *Ë
cvp
;

494 
v¨
->
vÆid
 = 0;

497 
v¨
->
Àn
 = 
v
.len;

498 
v¨
->
d©a
 = 
v
.data;

499 
v¨
->
vÆid
 = 1;

502 
v¨
->
no_ˇchóbÀ
 = 0;

503 
v¨
->
nŸ_found
 = 0;

505 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

506 i‡(
vp
 =
NULL
) {

507  
NGX_CONF_ERROR
;

510 *
vp
 = 
v¨
;

512 
found
:

514 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

516 i‡(
˘x
->
deÁu…_vÆue
) {

517 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

519  
NGX_CONF_ERROR
;

522 
˘x
->
deÁu…_vÆue
 = 
v¨
;

524  
NGX_CONF_OK
;

527 #i‡(
NGX_PCRE
)

529 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

530 
ngx_ªgex_compûe_t
 
rc
;

531 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

532 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

534 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

535 i‡(
ªgex
 =
NULL
) {

536  
NGX_CONF_ERROR
;

539 
vÆue
[0].
Àn
--;

540 
vÆue
[0].
d©a
++;

542 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

544 i‡(
vÆue
[0].
d©a
[0] == '*') {

545 
vÆue
[0].
Àn
--;

546 
vÆue
[0].
d©a
++;

547 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

550 
rc
.
∑âîn
 = 
vÆue
[0];

551 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

552 
rc
.
îr
.
d©a
 = 
îr°r
;

554 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
˘x
->
cf
, &
rc
);

555 i‡(
ªgex
->ªgex =
NULL
) {

556  
NGX_CONF_ERROR
;

559 
ªgex
->
vÆue
 = 
v¨
;

561  
NGX_CONF_OK
;

566 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

567 
vÆue
[0].
Àn
--;

568 
vÆue
[0].
d©a
++;

571 
rv
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

572 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

574 i‡(
rv
 =
NGX_OK
) {

575  
NGX_CONF_OK
;

578 i‡(
rv
 =
NGX_DECLINED
) {

579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

580 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

583 i‡(
rv
 =
NGX_BUSY
) {

584 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

585 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

588  
NGX_CONF_ERROR
;

589 
	}
}

	@src/http/modules/ngx_http_memcached_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

15 
ngx_öt_t
 
	mödex
;

16 
ngx_uöt_t
 
	mgzù_Êag
;

17 } 
	tngx_hâp_memˇched_loc_c⁄f_t
;

21 
size_t
 
	mª°
;

22 
ngx_hâp_ªque°_t
 *
	mªque°
;

23 
ngx_°r_t
 
	mkey
;

24 } 
	tngx_hâp_memˇched_˘x_t
;

27 
ngx_öt_t
 
ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t
 
ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

30 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr_öô
(*
d©a
);

31 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

32 
ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

33 
ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_öt_t
 
rc
);

36 *
ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

37 *
ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

38 *
∑ª¡
, *
chûd
);

40 *
ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

44 
ngx_c⁄f_bômask_t
 
	gngx_hâp_memˇched_√xt_up°ªam_masks
[] = {

45 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

46 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

47 { 
ngx_°rög
("övÆid_ª•⁄£"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

48 { 
ngx_°rög
("nŸ_found"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

49 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

50 { 
ngx_nuŒ_°rög
, 0 }

54 
ngx_comm™d_t
 
	gngx_hâp_memˇched_comm™ds
[] = {

56 { 
ngx_°rög
("memcached_pass"),

57 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_hâp_memˇched_∑ss
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("memcached_bind"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

65 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

68 
NULL
 },

70 { 
ngx_°rög
("memcached_connect_timeout"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_m£c_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

75 
NULL
 },

77 { 
ngx_°rög
("memcached_send_timeout"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_m£c_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

82 
NULL
 },

84 { 
ngx_°rög
("memcached_buffer_size"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_size_¶Ÿ
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

88 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

89 
NULL
 },

91 { 
ngx_°rög
("memcached_read_timeout"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_m£c_¶Ÿ
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

96 
NULL
 },

98 { 
ngx_°rög
("memcached_next_upstream"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

100 
ngx_c⁄f_£t_bômask_¶Ÿ
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

103 &
ngx_hâp_memˇched_√xt_up°ªam_masks
 },

105 { 
ngx_°rög
("memcached_next_upstream_tries"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_num_¶Ÿ
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

110 
NULL
 },

112 { 
ngx_°rög
("memcached_next_upstream_timeout"),

113 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

114 
ngx_c⁄f_£t_m£c_¶Ÿ
,

115 
NGX_HTTP_LOC_CONF_OFFSET
,

116 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

117 
NULL
 },

119 { 
ngx_°rög
("memcached_gzip_flag"),

120 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_c⁄f_£t_num_¶Ÿ
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
gzù_Êag
),

124 
NULL
 },

126 
ngx_nuŒ_comm™d


130 
ngx_hâp_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ_˘x
 = {

131 
NULL
,

132 
NULL
,

134 
NULL
,

135 
NULL
,

137 
NULL
,

138 
NULL
,

140 
ngx_hâp_memˇched_¸óã_loc_c⁄f
,

141 
ngx_hâp_memˇched_mîge_loc_c⁄f


145 
ngx_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ
 = {

146 
NGX_MODULE_V1
,

147 &
ngx_hâp_memˇched_moduÀ_˘x
,

148 
ngx_hâp_memˇched_comm™ds
,

149 
NGX_HTTP_MODULE
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NULL
,

154 
NULL
,

155 
NULL
,

156 
NULL
,

157 
NGX_MODULE_V1_PADDING


161 
ngx_°r_t
 
	gngx_hâp_memˇched_key
 = 
ngx_°rög
("memcached_key");

164 
	#NGX_HTTP_MEMCACHED_END
 ((
ngx_hâp_memˇched_íd
Ë- 1)

	)

165 
u_ch¨
 
	gngx_hâp_memˇched_íd
[] = 
CRLF
 "END" CRLF;

168 
ngx_öt_t


169 
	$ngx_hâp_memˇched_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

171 
ngx_öt_t
 
rc
;

172 
ngx_hâp_up°ªam_t
 *
u
;

173 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

174 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

176 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

177  
NGX_HTTP_NOT_ALLOWED
;

180 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

182 i‡(
rc
 !
NGX_OK
) {

183  
rc
;

186 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

187  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

190 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

191  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

194 
u
 = 
r
->
up°ªam
;

196 
	`ngx_°r_£t
(&
u
->
schema
, "memcached://");

197 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_memˇched_moduÀ
;

199 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

201 
u
->
c⁄f
 = &
mlcf
->
up°ªam
;

203 
u
->
¸óã_ªque°
 = 
ngx_hâp_memˇched_¸óã_ªque°
;

204 
u
->
ªöô_ªque°
 = 
ngx_hâp_memˇched_ªöô_ªque°
;

205 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_memˇched_¥o˚ss_hódî
;

206 
u
->
ab‹t_ªque°
 = 
ngx_hâp_memˇched_ab‹t_ªque°
;

207 
u
->
föÆize_ªque°
 = 
ngx_hâp_memˇched_föÆize_ªque°
;

209 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_memˇched_˘x_t
));

210 i‡(
˘x
 =
NULL
) {

211  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

214 
˘x
->
ªque°
 = 
r
;

216 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_memˇched_moduÀ
);

218 
u
->
öput_fûãr_öô
 = 
ngx_hâp_memˇched_fûãr_öô
;

219 
u
->
öput_fûãr
 = 
ngx_hâp_memˇched_fûãr
;

220 
u
->
öput_fûãr_˘x
 = 
˘x
;

222 
r
->
maö
->
cou¡
++;

224 
	`ngx_hâp_up°ªam_öô
(
r
);

226  
NGX_DONE
;

227 
	}
}

230 
ngx_öt_t


231 
	$ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

233 
size_t
 
Àn
;

234 
uöçå_t
 
esˇ≥
;

235 
ngx_buf_t
 *
b
;

236 
ngx_chaö_t
 *
˛
;

237 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

238 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

239 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

241 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

243 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
mlcf
->
ödex
);

245 i‡(
vv
 =
NULL
 || vv->
nŸ_found
 || vv->
Àn
 == 0) {

246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

248  
NGX_ERROR
;

251 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vv
->
d©a
, vv->
Àn
, 
NGX_ESCAPE_MEMCACHED
);

253 
Àn
 = ("gë "Ë- 1 + 
vv
->À¿+ 
esˇ≥
 + (
CRLF
) - 1;

255 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

256 i‡(
b
 =
NULL
) {

257  
NGX_ERROR
;

260 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

261 i‡(
˛
 =
NULL
) {

262  
NGX_ERROR
;

265 
˛
->
buf
 = 
b
;

266 
˛
->
√xt
 = 
NULL
;

268 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

270 *
b
->
œ°
++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';

272 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

274 
˘x
->
key
.
d©a
 = 
b
->
œ°
;

276 i‡(
esˇ≥
 == 0) {

277 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vv
->
d©a
, vv->
Àn
);

280 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
(b->œ°, 
vv
->
d©a
, vv->
Àn
,

281 
NGX_ESCAPE_MEMCACHED
);

284 
˘x
->
key
.
Àn
 = 
b
->
œ°
 - ctx->key.
d©a
;

286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

287 "hâ∞memˇchedÑeque°: \"%V\"", &
˘x
->
key
);

289 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

291  
NGX_OK
;

292 
	}
}

295 
ngx_öt_t


296 
	$ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

298  
NGX_OK
;

299 
	}
}

302 
ngx_öt_t


303 
	$ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

305 
u_ch¨
 *
p
, *
°¨t
;

306 
ngx_°r_t
 
löe
;

307 
ngx_uöt_t
 
Êags
;

308 
ngx_èbÀ_ñt_t
 *
h
;

309 
ngx_hâp_up°ªam_t
 *
u
;

310 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

311 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

313 
u
 = 
r
->
up°ªam
;

315 
p
 = 
u
->
buf„r
.
pos
;Ö < u->buf„r.
œ°
;Ö++) {

316 i‡(*
p
 =
LF
) {

317 
found
;

321  
NGX_AGAIN
;

323 
found
:

325 
löe
.
d©a
 = 
u
->
buf„r
.
pos
;

326 
löe
.
Àn
 = 
p
 - 
u
->
buf„r
.
pos
;

328 i‡(
löe
.
Àn
 =0 || *(
p
 - 1Ë!
CR
) {

329 
no_vÆid
;

332 *
p
 = '\0';

333 
löe
.
Àn
--;

335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

336 "memˇched: \"%V\"", &
löe
);

338 
p
 = 
u
->
buf„r
.
pos
;

340 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

341 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

343 i‡(
	`ngx_°∫cmp
(
p
, "VALUE ", ("VALUE ") - 1) == 0) {

345 
p
 += ("VALUE ") - 1;

347 i‡(
	`ngx_°∫cmp
(
p
, 
˘x
->
key
.
d©a
, ctx->key.
Àn
) != 0) {

348 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

351 &
löe
, &
˘x
->
key
);

353  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

356 
p
 +
˘x
->
key
.
Àn
;

358 i‡(*
p
++ != ' ') {

359 
no_vÆid
;

364 
°¨t
 = 
p
;

366 *
p
) {

367 i‡(*
p
++ == ' ') {

368 i‡(
mlcf
->
gzù_Êag
) {

369 
Êags
;

371 
Àngth
;

376 
no_vÆid
;

378 
Êags
:

380 
Êags
 = 
	`ngx_©oi
(
°¨t
, 
p
 - start - 1);

382 i‡(
Êags
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

386 &
löe
, &
˘x
->
key
);

387  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

390 i‡(
Êags
 & 
mlcf
->
gzù_Êag
) {

391 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

392 i‡(
h
 =
NULL
) {

393  
NGX_ERROR
;

396 
h
->
hash
 = 1;

397 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

398 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

399 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

402 
Àngth
:

404 
°¨t
 = 
p
;

405 
p
 = 
löe
.
d©a
 +Üöe.
Àn
;

407 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
°¨t
, 
p
 - start);

408 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

409 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

412 &
löe
, &
˘x
->
key
);

413  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

416 
u
->
hódîs_ö
.
°©us_n
 = 200;

417 
u
->
°©e
->
°©us
 = 200;

418 
u
->
buf„r
.
pos
 = 
p
 + (
CRLF
) - 1;

420  
NGX_OK
;

423 i‡(
	`ngx_°rcmp
(
p
, "END\x0d") == 0) {

424 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

425 "key: \"%V\" wa†nŸ found by memˇched", &
˘x
->
key
);

427 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

428 
u
->
hódîs_ö
.
°©us_n
 = 404;

429 
u
->
°©e
->
°©us
 = 404;

430 
u
->
buf„r
.
pos
 = 
p
 + ("END" 
CRLF
) - 1;

431 
u
->
kì∑live
 = 1;

433  
NGX_OK
;

436 
no_vÆid
:

438 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

439 "memˇched síàövÆidÑe•⁄£: \"%V\"", &
löe
);

441  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

442 
	}
}

445 
ngx_öt_t


446 
	$ngx_hâp_memˇched_fûãr_öô
(*
d©a
)

448 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

450 
ngx_hâp_up°ªam_t
 *
u
;

452 
u
 = 
˘x
->
ªque°
->
up°ªam
;

454 i‡(
u
->
hódîs_ö
.
°©us_n
 != 404) {

455 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
 + 
NGX_HTTP_MEMCACHED_END
;

456 
˘x
->
ª°
 = 
NGX_HTTP_MEMCACHED_END
;

459 
u
->
Àngth
 = 0;

462  
NGX_OK
;

463 
	}
}

466 
ngx_öt_t


467 
	$ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

469 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

471 
u_ch¨
 *
œ°
;

472 
ngx_buf_t
 *
b
;

473 
ngx_chaö_t
 *
˛
, **
Œ
;

474 
ngx_hâp_up°ªam_t
 *
u
;

476 
u
 = 
˘x
->
ªque°
->
up°ªam
;

477 
b
 = &
u
->
buf„r
;

479 i‡(
u
->
Àngth
 =(
ssize_t
Ë
˘x
->
ª°
) {

481 i‡(
	`ngx_°∫cmp
(
b
->
œ°
,

482 
ngx_hâp_memˇched_íd
 + 
NGX_HTTP_MEMCACHED_END
 - 
˘x
->
ª°
,

483 
byãs
)

486 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

489 
u
->
Àngth
 = 0;

490 
˘x
->
ª°
 = 0;

492  
NGX_OK
;

495 
u
->
Àngth
 -
byãs
;

496 
˘x
->
ª°
 -
byãs
;

498 i‡(
u
->
Àngth
 == 0) {

499 
u
->
kì∑live
 = 1;

502  
NGX_OK
;

505 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

506 
Œ
 = &
˛
->
√xt
;

509 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
˘x
->
ªque°
->
poﬁ
, &
u
->
‰ì_bufs
);

510 i‡(
˛
 =
NULL
) {

511  
NGX_ERROR
;

514 
˛
->
buf
->
Êush
 = 1;

515 
˛
->
buf
->
mem‹y
 = 1;

517 *
Œ
 = 
˛
;

519 
œ°
 = 
b
->last;

520 
˛
->
buf
->
pos
 = 
œ°
;

521 
b
->
œ°
 +
byãs
;

522 
˛
->
buf
->
œ°
 = 
b
->last;

523 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

525 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

527 
byãs
, 
b
->
œ°
 - b->
pos
, 
u
->
Àngth
, 
˘x
->
ª°
);

529 i‡(
byãs
 <(
ssize_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
)) {

530 
u
->
Àngth
 -
byãs
;

531  
NGX_OK
;

534 
œ°
 +(
size_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
);

536 i‡(
	`ngx_°∫cmp
(
œ°
, 
ngx_hâp_memˇched_íd
, 
b
->last -Üast) != 0) {

537 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

540 
b
->
œ°
 =Üast;

541 
˛
->
buf
->
œ°
 =Üast;

542 
u
->
Àngth
 = 0;

543 
˘x
->
ª°
 = 0;

545  
NGX_OK
;

548 
˘x
->
ª°
 -
b
->
œ°
 -Üast;

549 
b
->
œ°
 =Üast;

550 
˛
->
buf
->
œ°
 =Üast;

551 
u
->
Àngth
 = 
˘x
->
ª°
;

553 i‡(
u
->
Àngth
 == 0) {

554 
u
->
kì∑live
 = 1;

557  
NGX_OK
;

558 
	}
}

562 
	$ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

564 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

567 
	}
}

571 
	$ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

573 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

576 
	}
}

580 
	$ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

582 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
;

584 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_memˇched_loc_c⁄f_t
));

585 i‡(
c⁄f
 =
NULL
) {

586  
NULL
;

597 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

598 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

599 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

600 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

601 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

602 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

604 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

607 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

608 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

609 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

610 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

611 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

612 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

613 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

614 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

615 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 1;

616 
c⁄f
->
up°ªam
.
öãr˚±_404
 = 1;

617 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 0;

618 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 0;

619 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 1;

621 
c⁄f
->
ödex
 = 
NGX_CONF_UNSET
;

622 
c⁄f
->
gzù_Êag
 = 
NGX_CONF_UNSET_UINT
;

624  
c⁄f
;

625 
	}
}

629 
	$ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

631 
ngx_hâp_memˇched_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

632 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

634 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

635 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

637 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

638 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

640 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

641 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

643 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

644 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

646 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

647 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

649 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

650 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

652 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

653 
¥ev
->
up°ªam
.
buf„r_size
,

654 (
size_t
Ë
ngx_∑gesize
);

656 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

657 
¥ev
->
up°ªam
.
√xt_up°ªam
,

658 (
NGX_CONF_BITMASK_SET


659 |
NGX_HTTP_UPSTREAM_FT_ERROR


660 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

662 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

663 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


664 |
NGX_HTTP_UPSTREAM_FT_OFF
;

667 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

668 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

671 i‡(
c⁄f
->
ödex
 =
NGX_CONF_UNSET
) {

672 
c⁄f
->
ödex
 = 
¥ev
->index;

675 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_Êag
, 
¥ev
->gzip_flag, 0);

677  
NGX_CONF_OK
;

678 
	}
}

682 
	$ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

684 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

686 
ngx_°r_t
 *
vÆue
;

687 
ngx_uæ_t
 
u
;

688 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

690 i‡(
mlcf
->
up°ªam
.upstream) {

694 
vÆue
 = 
cf
->
¨gs
->
ñts
;

696 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

698 
u
.
uæ
 = 
vÆue
[1];

699 
u
.
no_ªsﬁve
 = 1;

701 
mlcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

702 i‡(
mlcf
->
up°ªam
.up°ªam =
NULL
) {

703  
NGX_CONF_ERROR
;

706 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

708 
˛cf
->
h™dÀr
 = 
ngx_hâp_memˇched_h™dÀr
;

710 i‡(
˛cf
->
«me
.
Àn
 && clcf->«me.
d©a
[clcf->name.len - 1] == '/') {

711 
˛cf
->
auto_ªdúe˘
 = 1;

714 
mlcf
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_memˇched_key
);

716 i‡(
mlcf
->
ödex
 =
NGX_ERROR
) {

717  
NGX_CONF_ERROR
;

720  
NGX_CONF_OK
;

721 
	}
}

	@src/http/modules/ngx_http_mirror_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mmúr‹
;

15 
ngx_Êag_t
 
	mªque°_body
;

16 } 
	tngx_hâp_múr‹_loc_c⁄f_t
;

20 
ngx_öt_t
 
	m°©us
;

21 } 
	tngx_hâp_múr‹_˘x_t
;

24 
ngx_öt_t
 
ngx_hâp_múr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_hâp_múr‹_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

26 
ngx_öt_t
 
ngx_hâp_múr‹_h™dÀr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
);

27 *
ngx_hâp_múr‹_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_múr‹_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 *
ngx_hâp_múr‹
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

31 
ngx_öt_t
 
ngx_hâp_múr‹_öô
(
ngx_c⁄f_t
 *
cf
);

34 
ngx_comm™d_t
 
	gngx_hâp_múr‹_comm™ds
[] = {

36 { 
ngx_°rög
("mirror"),

37 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

38 
ngx_hâp_múr‹
,

39 
NGX_HTTP_LOC_CONF_OFFSET
,

41 
NULL
 },

43 { 
ngx_°rög
("mirror_request_body"),

44 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

45 
ngx_c⁄f_£t_Êag_¶Ÿ
,

46 
NGX_HTTP_LOC_CONF_OFFSET
,

47 
off£tof
(
ngx_hâp_múr‹_loc_c⁄f_t
, 
ªque°_body
),

48 
NULL
 },

50 
ngx_nuŒ_comm™d


54 
ngx_hâp_moduÀ_t
 
	gngx_hâp_múr‹_moduÀ_˘x
 = {

55 
NULL
,

56 
ngx_hâp_múr‹_öô
,

58 
NULL
,

59 
NULL
,

61 
NULL
,

62 
NULL
,

64 
ngx_hâp_múr‹_¸óã_loc_c⁄f
,

65 
ngx_hâp_múr‹_mîge_loc_c⁄f


69 
ngx_moduÀ_t
 
	gngx_hâp_múr‹_moduÀ
 = {

70 
NGX_MODULE_V1
,

71 &
ngx_hâp_múr‹_moduÀ_˘x
,

72 
ngx_hâp_múr‹_comm™ds
,

73 
NGX_HTTP_MODULE
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NGX_MODULE_V1_PADDING


85 
ngx_öt_t


86 
	$ngx_hâp_múr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

88 
ngx_öt_t
 
rc
;

89 
ngx_hâp_múr‹_˘x_t
 *
˘x
;

90 
ngx_hâp_múr‹_loc_c⁄f_t
 *
mlcf
;

92 i‡(
r
 !r->
maö
) {

93  
NGX_DECLINED
;

96 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_múr‹_moduÀ
);

98 i‡(
mlcf
->
múr‹
 =
NULL
) {

99  
NGX_DECLINED
;

102 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "mirror handler");

104 i‡(
mlcf
->
ªque°_body
) {

105 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_múr‹_moduÀ
);

107 i‡(
˘x
) {

108  
˘x
->
°©us
;

111 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_múr‹_˘x_t
));

112 i‡(
˘x
 =
NULL
) {

113  
NGX_ERROR
;

116 
˘x
->
°©us
 = 
NGX_DONE
;

118 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_múr‹_moduÀ
);

120 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_múr‹_body_h™dÀr
);

121 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

122  
rc
;

125 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

126  
NGX_DONE
;

129  
	`ngx_hâp_múr‹_h™dÀr_öã∫Æ
(
r
);

130 
	}
}

134 
	$ngx_hâp_múr‹_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

136 
ngx_hâp_múr‹_˘x_t
 *
˘x
;

138 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_múr‹_moduÀ
);

140 
˘x
->
°©us
 = 
	`ngx_hâp_múr‹_h™dÀr_öã∫Æ
(
r
);

142 
r
->
¥e£rve_body
 = 1;

144 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

145 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

146 
	}
}

149 
ngx_öt_t


150 
	$ngx_hâp_múr‹_h™dÀr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
)

152 
ngx_°r_t
 *
«me
;

153 
ngx_uöt_t
 
i
;

154 
ngx_hâp_ªque°_t
 *
§
;

155 
ngx_hâp_múr‹_loc_c⁄f_t
 *
mlcf
;

157 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_múr‹_moduÀ
);

159 
«me
 = 
mlcf
->
múr‹
->
ñts
;

161 
i
 = 0; i < 
mlcf
->
múr‹
->
√…s
; i++) {

162 i‡(
	`ngx_hâp_subªque°
(
r
, &
«me
[
i
], &r->
¨gs
, &
§
, 
NULL
,

163 
NGX_HTTP_SUBREQUEST_BACKGROUND
)

164 !
NGX_OK
)

166  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

169 
§
->
hódî_⁄ly
 = 1;

170 
§
->
mëhod
 = 
r
->method;

171 
§
->
mëhod_«me
 = 
r
->method_name;

174  
NGX_DECLINED
;

175 
	}
}

179 
	$ngx_hâp_múr‹_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

181 
ngx_hâp_múr‹_loc_c⁄f_t
 *
mlcf
;

183 
mlcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_múr‹_loc_c⁄f_t
));

184 i‡(
mlcf
 =
NULL
) {

185  
NULL
;

188 
mlcf
->
múr‹
 = 
NGX_CONF_UNSET_PTR
;

189 
mlcf
->
ªque°_body
 = 
NGX_CONF_UNSET
;

191  
mlcf
;

192 
	}
}

196 
	$ngx_hâp_múr‹_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

198 
ngx_hâp_múr‹_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

199 
ngx_hâp_múr‹_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

201 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
múr‹
, 
¥ev
->múr‹, 
NULL
);

202 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªque°_body
, 
¥ev
->request_body, 1);

204  
NGX_CONF_OK
;

205 
	}
}

209 
	$ngx_hâp_múr‹
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

211 
ngx_hâp_múr‹_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

213 
ngx_°r_t
 *
vÆue
, *
s
;

215 
vÆue
 = 
cf
->
¨gs
->
ñts
;

217 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

218 i‡(
mlcf
->
múr‹
 !
NGX_CONF_UNSET_PTR
) {

222 
mlcf
->
múr‹
 = 
NULL
;

223  
NGX_CONF_OK
;

226 i‡(
mlcf
->
múr‹
 =
NULL
) {

230 i‡(
mlcf
->
múr‹
 =
NGX_CONF_UNSET_PTR
) {

231 
mlcf
->
múr‹
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

232 i‡(
mlcf
->
múr‹
 =
NULL
) {

233  
NGX_CONF_ERROR
;

237 
s
 = 
	`ngx_¨øy_push
(
mlcf
->
múr‹
);

238 i‡(
s
 =
NULL
) {

239  
NGX_CONF_ERROR
;

242 *
s
 = 
vÆue
[1];

244  
NGX_CONF_OK
;

245 
	}
}

248 
ngx_öt_t


249 
	$ngx_hâp_múr‹_öô
(
ngx_c⁄f_t
 *
cf
)

251 
ngx_hâp_h™dÀr_±
 *
h
;

252 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

254 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

256 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PRECONTENT_PHASE
].
h™dÀrs
);

257 i‡(
h
 =
NULL
) {

258  
NGX_ERROR
;

261 *
h
 = 
ngx_hâp_múr‹_h™dÀr
;

263  
NGX_OK
;

264 
	}
}

	@src/http/modules/ngx_http_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_MP4_TRAK_ATOM
 0

	)

13 
	#NGX_HTTP_MP4_TKHD_ATOM
 1

	)

14 
	#NGX_HTTP_MP4_MDIA_ATOM
 2

	)

15 
	#NGX_HTTP_MP4_MDHD_ATOM
 3

	)

16 
	#NGX_HTTP_MP4_HDLR_ATOM
 4

	)

17 
	#NGX_HTTP_MP4_MINF_ATOM
 5

	)

18 
	#NGX_HTTP_MP4_VMHD_ATOM
 6

	)

19 
	#NGX_HTTP_MP4_SMHD_ATOM
 7

	)

20 
	#NGX_HTTP_MP4_DINF_ATOM
 8

	)

21 
	#NGX_HTTP_MP4_STBL_ATOM
 9

	)

22 
	#NGX_HTTP_MP4_STSD_ATOM
 10

	)

23 
	#NGX_HTTP_MP4_STTS_ATOM
 11

	)

24 
	#NGX_HTTP_MP4_STTS_DATA
 12

	)

25 
	#NGX_HTTP_MP4_STSS_ATOM
 13

	)

26 
	#NGX_HTTP_MP4_STSS_DATA
 14

	)

27 
	#NGX_HTTP_MP4_CTTS_ATOM
 15

	)

28 
	#NGX_HTTP_MP4_CTTS_DATA
 16

	)

29 
	#NGX_HTTP_MP4_STSC_ATOM
 17

	)

30 
	#NGX_HTTP_MP4_STSC_START
 18

	)

31 
	#NGX_HTTP_MP4_STSC_DATA
 19

	)

32 
	#NGX_HTTP_MP4_STSC_END
 20

	)

33 
	#NGX_HTTP_MP4_STSZ_ATOM
 21

	)

34 
	#NGX_HTTP_MP4_STSZ_DATA
 22

	)

35 
	#NGX_HTTP_MP4_STCO_ATOM
 23

	)

36 
	#NGX_HTTP_MP4_STCO_DATA
 24

	)

37 
	#NGX_HTTP_MP4_CO64_ATOM
 25

	)

38 
	#NGX_HTTP_MP4_CO64_DATA
 26

	)

40 
	#NGX_HTTP_MP4_LAST_ATOM
 
NGX_HTTP_MP4_CO64_DATA


	)

44 
size_t
 
	mbuf„r_size
;

45 
size_t
 
	mmax_buf„r_size
;

46 } 
	tngx_hâp_mp4_c⁄f_t
;

50 
u_ch¨
 
	mchunk
[4];

51 
u_ch¨
 
	mßm∂es
[4];

52 
u_ch¨
 
	mid
[4];

53 } 
	tngx_mp4_°sc_íåy_t
;

57 
uöt32_t
 
	mtimesˇÀ
;

58 
uöt32_t
 
	mtime_to_ßm∂e_íåõs
;

59 
uöt32_t
 
	mßm∂e_to_chunk_íåõs
;

60 
uöt32_t
 
	msync_ßm∂es_íåõs
;

61 
uöt32_t
 
	mcomposôi⁄_off£t_íåõs
;

62 
uöt32_t
 
	mßm∂e_sizes_íåõs
;

63 
uöt32_t
 
	mchunks
;

65 
ngx_uöt_t
 
	m°¨t_ßm∂e
;

66 
ngx_uöt_t
 
	míd_ßm∂e
;

67 
ngx_uöt_t
 
	m°¨t_chunk
;

68 
ngx_uöt_t
 
	míd_chunk
;

69 
ngx_uöt_t
 
	m°¨t_chunk_ßm∂es
;

70 
ngx_uöt_t
 
	míd_chunk_ßm∂es
;

71 
uöt64_t
 
	m°¨t_chunk_ßm∂es_size
;

72 
uöt64_t
 
	míd_chunk_ßm∂es_size
;

73 
off_t
 
	m°¨t_off£t
;

74 
off_t
 
	míd_off£t
;

76 
size_t
 
	mtkhd_size
;

77 
size_t
 
	mmdhd_size
;

78 
size_t
 
	mhdÃ_size
;

79 
size_t
 
	mvmhd_size
;

80 
size_t
 
	msmhd_size
;

81 
size_t
 
	mdöf_size
;

82 
size_t
 
	msize
;

84 
ngx_chaö_t
 
	mout
[
NGX_HTTP_MP4_LAST_ATOM
 + 1];

86 
ngx_buf_t
 
	måak_©om_buf
;

87 
ngx_buf_t
 
	mtkhd_©om_buf
;

88 
ngx_buf_t
 
	mmdü_©om_buf
;

89 
ngx_buf_t
 
	mmdhd_©om_buf
;

90 
ngx_buf_t
 
	mhdÃ_©om_buf
;

91 
ngx_buf_t
 
	mmöf_©om_buf
;

92 
ngx_buf_t
 
	mvmhd_©om_buf
;

93 
ngx_buf_t
 
	msmhd_©om_buf
;

94 
ngx_buf_t
 
	mdöf_©om_buf
;

95 
ngx_buf_t
 
	m°bl_©om_buf
;

96 
ngx_buf_t
 
	m°sd_©om_buf
;

97 
ngx_buf_t
 
	m°ts_©om_buf
;

98 
ngx_buf_t
 
	m°ts_d©a_buf
;

99 
ngx_buf_t
 
	m°ss_©om_buf
;

100 
ngx_buf_t
 
	m°ss_d©a_buf
;

101 
ngx_buf_t
 
	m˘ts_©om_buf
;

102 
ngx_buf_t
 
	m˘ts_d©a_buf
;

103 
ngx_buf_t
 
	m°sc_©om_buf
;

104 
ngx_buf_t
 
	m°sc_°¨t_chunk_buf
;

105 
ngx_buf_t
 
	m°sc_íd_chunk_buf
;

106 
ngx_buf_t
 
	m°sc_d©a_buf
;

107 
ngx_buf_t
 
	m°sz_©om_buf
;

108 
ngx_buf_t
 
	m°sz_d©a_buf
;

109 
ngx_buf_t
 
	m°co_©om_buf
;

110 
ngx_buf_t
 
	m°co_d©a_buf
;

111 
ngx_buf_t
 
	mco64_©om_buf
;

112 
ngx_buf_t
 
	mco64_d©a_buf
;

114 
ngx_mp4_°sc_íåy_t
 
	m°sc_°¨t_chunk_íåy
;

115 
ngx_mp4_°sc_íåy_t
 
	m°sc_íd_chunk_íåy
;

116 } 
	tngx_hâp_mp4_åak_t
;

120 
ngx_fûe_t
 
	mfûe
;

122 
u_ch¨
 *
	mbuf„r
;

123 
u_ch¨
 *
	mbuf„r_°¨t
;

124 
u_ch¨
 *
	mbuf„r_pos
;

125 
u_ch¨
 *
	mbuf„r_íd
;

126 
size_t
 
	mbuf„r_size
;

128 
off_t
 
	moff£t
;

129 
off_t
 
	míd
;

130 
off_t
 
	mc⁄ã¡_Àngth
;

131 
ngx_uöt_t
 
	m°¨t
;

132 
ngx_uöt_t
 
	mÀngth
;

133 
uöt32_t
 
	mtimesˇÀ
;

134 
ngx_hâp_ªque°_t
 *
	mªque°
;

135 
ngx_¨øy_t
 
	måak
;

136 
ngx_hâp_mp4_åak_t
 
	måaks
[2];

138 
size_t
 
	m·yp_size
;

139 
size_t
 
	mmoov_size
;

141 
ngx_chaö_t
 *
	mout
;

142 
ngx_chaö_t
 
	m·yp_©om
;

143 
ngx_chaö_t
 
	mmoov_©om
;

144 
ngx_chaö_t
 
	mmvhd_©om
;

145 
ngx_chaö_t
 
	mmd©_©om
;

146 
ngx_chaö_t
 
	mmd©_d©a
;

148 
ngx_buf_t
 
	m·yp_©om_buf
;

149 
ngx_buf_t
 
	mmoov_©om_buf
;

150 
ngx_buf_t
 
	mmvhd_©om_buf
;

151 
ngx_buf_t
 
	mmd©_©om_buf
;

152 
ngx_buf_t
 
	mmd©_d©a_buf
;

154 
u_ch¨
 
	mmoov_©om_hódî
[8];

155 
u_ch¨
 
	mmd©_©om_hódî
[16];

156 } 
	tngx_hâp_mp4_fûe_t
;

160 *
	m«me
;

161 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_mp4_fûe_t
 *
	mmp4
,

162 
uöt64_t
 
	m©om_d©a_size
);

163 } 
	tngx_hâp_mp4_©om_h™dÀr_t
;

166 
	#ngx_mp4_©om_hódî
(
mp4
Ë(mp4->
buf„r_pos
 - 8)

	)

167 
	#ngx_mp4_©om_d©a
(
mp4
Ëmp4->
buf„r_pos


	)

168 
	#ngx_mp4_©om_d©a_size
(
t
Ë(
uöt64_t
Ë(—Ë- 8)

	)

171 
	#ngx_mp4_©om_√xt
(
mp4
, 
n
) \

172 
mp4
->
buf„r_pos
 +(
size_t
Ë
n
; \

173 
mp4
->
off£t
 +
n


	)

176 
	#ngx_mp4_£t_©om_«me
(
p
, 
n1
, 
n2
, 
n3
, 
n4
) \

177 ((
u_ch¨
 *Ë(
p
))[4] = 
n1
; \

178 ((
u_ch¨
 *Ë(
p
))[5] = 
n2
; \

179 ((
u_ch¨
 *Ë(
p
))[6] = 
n3
; \

180 ((
u_ch¨
 *Ë(
p
))[7] = 
n4


	)

182 
	#ngx_mp4_gë_32vÆue
(
p
) \

183 –((
uöt32_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 24) \

184 + ( ((
u_ch¨
 *Ë(
p
))[1] << 16) \

185 + ( ((
u_ch¨
 *Ë(
p
))[2] << 8) \

186 + ( ((
u_ch¨
 *Ë(
p
))[3]Ë)

	)

188 
	#ngx_mp4_£t_32vÆue
(
p
, 
n
) \

189 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
n
) >> 24); \

190 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
n
) >> 16); \

191 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
n
) >> 8); \

192 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë(
n
)

	)

194 
	#ngx_mp4_gë_64vÆue
(
p
) \

195 –((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 56) \

196 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[1] << 48) \

197 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[2] << 40) \

198 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[3] << 32) \

199 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[4] << 24) \

200 + ( ((
u_ch¨
 *Ë(
p
))[5] << 16) \

201 + ( ((
u_ch¨
 *Ë(
p
))[6] << 8) \

202 + ( ((
u_ch¨
 *Ë(
p
))[7]Ë)

	)

204 
	#ngx_mp4_£t_64vÆue
(
p
, 
n
) \

205 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 56); \

206 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 48); \

207 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 40); \

208 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 32); \

209 ((
u_ch¨
 *Ë(
p
))[4] = (u_ch¨Ë–(
n
) >> 24); \

210 ((
u_ch¨
 *Ë(
p
))[5] = (u_ch¨Ë–(
n
) >> 16); \

211 ((
u_ch¨
 *Ë(
p
))[6] = (u_ch¨Ë–(
n
) >> 8); \

212 ((
u_ch¨
 *Ë(
p
))[7] = (u_ch¨Ë(
n
)

	)

214 
	#ngx_mp4_œ°_åak
(
mp4
) \

215 &((
ngx_hâp_mp4_åak_t
 *Ë
mp4
->
åak
.
ñts
)[mp4->åak.
√…s
 - 1]

	)

218 
ngx_öt_t
 
ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

219 
ngx_öt_t
 
ngx_hâp_mp4_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

221 
ngx_öt_t
 
ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
);

222 
ngx_öt_t
 
ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

223 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
);

224 
ngx_öt_t
 
ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
);

225 
ngx_öt_t
 
ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

226 
uöt64_t
 
©om_d©a_size
);

227 
ngx_öt_t
 
ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

228 
uöt64_t
 
©om_d©a_size
);

229 
ngx_öt_t
 
ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

230 
uöt64_t
 
©om_d©a_size
);

231 
size_t
 
ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

232 
off_t
 
°¨t_off£t
, off_à
íd_off£t
);

233 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

234 
uöt64_t
 
©om_d©a_size
);

235 
ngx_öt_t
 
ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

236 
uöt64_t
 
©om_d©a_size
);

237 
ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

238 
ngx_hâp_mp4_åak_t
 *
åak
);

239 
ngx_öt_t
 
ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

240 
uöt64_t
 
©om_d©a_size
);

241 
ngx_öt_t
 
ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

242 
uöt64_t
 
©om_d©a_size
);

243 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

244 
uöt64_t
 
©om_d©a_size
);

245 
ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

246 
ngx_hâp_mp4_åak_t
 *
åak
);

247 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

248 
uöt64_t
 
©om_d©a_size
);

249 
ngx_öt_t
 
ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

250 
uöt64_t
 
©om_d©a_size
);

251 
ngx_öt_t
 
ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

252 
uöt64_t
 
©om_d©a_size
);

253 
ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

254 
ngx_hâp_mp4_åak_t
 *
åak
);

255 
ngx_öt_t
 
ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

256 
uöt64_t
 
©om_d©a_size
);

257 
ngx_öt_t
 
ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

258 
uöt64_t
 
©om_d©a_size
);

259 
ngx_öt_t
 
ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

260 
uöt64_t
 
©om_d©a_size
);

261 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

262 
uöt64_t
 
©om_d©a_size
);

263 
ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

264 
ngx_hâp_mp4_åak_t
 *
åak
);

265 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

266 
uöt64_t
 
©om_d©a_size
);

267 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

268 
uöt64_t
 
©om_d©a_size
);

269 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

270 
ngx_hâp_mp4_åak_t
 *
åak
);

271 
ngx_öt_t
 
ngx_hâp_mp4_¸›_°ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

272 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

273 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

274 
uöt64_t
 
©om_d©a_size
);

275 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

276 
ngx_hâp_mp4_åak_t
 *
åak
);

277 
ngx_hâp_mp4_¸›_°ss_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

278 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

279 
ngx_öt_t
 
ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

280 
uöt64_t
 
©om_d©a_size
);

281 
ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

282 
ngx_hâp_mp4_åak_t
 *
åak
);

283 
ngx_hâp_mp4_¸›_˘ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

284 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

285 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

286 
uöt64_t
 
©om_d©a_size
);

287 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

288 
ngx_hâp_mp4_åak_t
 *
åak
);

289 
ngx_öt_t
 
ngx_hâp_mp4_¸›_°sc_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

290 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

291 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

292 
uöt64_t
 
©om_d©a_size
);

293 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

294 
ngx_hâp_mp4_åak_t
 *
åak
);

295 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

296 
uöt64_t
 
©om_d©a_size
);

297 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

298 
ngx_hâp_mp4_åak_t
 *
åak
);

299 
ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

300 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
);

301 
ngx_öt_t
 
ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

302 
uöt64_t
 
©om_d©a_size
);

303 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

304 
ngx_hâp_mp4_åak_t
 *
åak
);

305 
ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

306 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
);

308 *
ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

309 *
ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

310 *
ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

313 
ngx_comm™d_t
 
	gngx_hâp_mp4_comm™ds
[] = {

315 { 
ngx_°rög
("mp4"),

316 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

317 
ngx_hâp_mp4
,

320 
NULL
 },

322 { 
ngx_°rög
("mp4_buffer_size"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

324 
ngx_c⁄f_£t_size_¶Ÿ
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
buf„r_size
),

327 
NULL
 },

329 { 
ngx_°rög
("mp4_max_buffer_size"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

331 
ngx_c⁄f_£t_size_¶Ÿ
,

332 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
max_buf„r_size
),

334 
NULL
 },

336 
ngx_nuŒ_comm™d


340 
ngx_hâp_moduÀ_t
 
	gngx_hâp_mp4_moduÀ_˘x
 = {

341 
NULL
,

342 
NULL
,

344 
NULL
,

345 
NULL
,

347 
NULL
,

348 
NULL
,

350 
ngx_hâp_mp4_¸óã_c⁄f
,

351 
ngx_hâp_mp4_mîge_c⁄f


355 
ngx_moduÀ_t
 
	gngx_hâp_mp4_moduÀ
 = {

356 
NGX_MODULE_V1
,

357 &
ngx_hâp_mp4_moduÀ_˘x
,

358 
ngx_hâp_mp4_comm™ds
,

359 
NGX_HTTP_MODULE
,

360 
NULL
,

361 
NULL
,

362 
NULL
,

363 
NULL
,

364 
NULL
,

365 
NULL
,

366 
NULL
,

367 
NGX_MODULE_V1_PADDING


371 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_©oms
[] = {

372 { "·yp", 
ngx_hâp_mp4_ªad_·yp_©om
 },

373 { "moov", 
ngx_hâp_mp4_ªad_moov_©om
 },

374 { "md©", 
ngx_hâp_mp4_ªad_md©_©om
 },

375 { 
NULL
, NULL }

378 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_moov_©oms
[] = {

379 { "mvhd", 
ngx_hâp_mp4_ªad_mvhd_©om
 },

380 { "åak", 
ngx_hâp_mp4_ªad_åak_©om
 },

381 { "cmov", 
ngx_hâp_mp4_ªad_cmov_©om
 },

382 { 
NULL
, NULL }

385 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_åak_©oms
[] = {

386 { "tkhd", 
ngx_hâp_mp4_ªad_tkhd_©om
 },

387 { "mdü", 
ngx_hâp_mp4_ªad_mdü_©om
 },

388 { 
NULL
, NULL }

391 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_mdü_©oms
[] = {

392 { "mdhd", 
ngx_hâp_mp4_ªad_mdhd_©om
 },

393 { "hdÃ", 
ngx_hâp_mp4_ªad_hdÃ_©om
 },

394 { "möf", 
ngx_hâp_mp4_ªad_möf_©om
 },

395 { 
NULL
, NULL }

398 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_möf_©oms
[] = {

399 { "vmhd", 
ngx_hâp_mp4_ªad_vmhd_©om
 },

400 { "smhd", 
ngx_hâp_mp4_ªad_smhd_©om
 },

401 { "döf", 
ngx_hâp_mp4_ªad_döf_©om
 },

402 { "°bl", 
ngx_hâp_mp4_ªad_°bl_©om
 },

403 { 
NULL
, NULL }

406 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_°bl_©oms
[] = {

407 { "°sd", 
ngx_hâp_mp4_ªad_°sd_©om
 },

408 { "°ts", 
ngx_hâp_mp4_ªad_°ts_©om
 },

409 { "°ss", 
ngx_hâp_mp4_ªad_°ss_©om
 },

410 { "˘ts", 
ngx_hâp_mp4_ªad_˘ts_©om
 },

411 { "°sc", 
ngx_hâp_mp4_ªad_°sc_©om
 },

412 { "°sz", 
ngx_hâp_mp4_ªad_°sz_©om
 },

413 { "°co", 
ngx_hâp_mp4_ªad_°co_©om
 },

414 { "co64", 
ngx_hâp_mp4_ªad_co64_©om
 },

415 { 
NULL
, NULL }

419 
ngx_öt_t


420 
	$ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

422 
u_ch¨
 *
œ°
;

423 
size_t
 
roŸ
;

424 
ngx_öt_t
 
rc
, 
°¨t
, 
íd
;

425 
ngx_uöt_t
 
Àvñ
, 
Àngth
;

426 
ngx_°r_t
 
∑th
, 
vÆue
;

427 
ngx_log_t
 *
log
;

428 
ngx_buf_t
 *
b
;

429 
ngx_chaö_t
 
out
;

430 
ngx_hâp_mp4_fûe_t
 *
mp4
;

431 
ngx_›í_fûe_öfo_t
 
of
;

432 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

434 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

435  
NGX_HTTP_NOT_ALLOWED
;

438 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

439  
NGX_DECLINED
;

442 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

444 i‡(
rc
 !
NGX_OK
) {

445  
rc
;

448 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

449 i‡(
œ°
 =
NULL
) {

450  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

453 
log
 = 
r
->
c⁄√˘i⁄
->log;

455 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

457 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

458 "hâ∞mp4 fûíame: \"%V\"", &
∑th
);

460 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

462 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

464 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

465 
of
.
dúe˘io
 = 
NGX_MAX_OFF_T_VALUE
;

466 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

467 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

468 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

469 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

471 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

472  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

475 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

476 !
NGX_OK
)

478 
of
.
îr
) {

481  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

483 
NGX_ENOENT
:

484 
NGX_ENOTDIR
:

485 
NGX_ENAMETOOLONG
:

487 
Àvñ
 = 
NGX_LOG_ERR
;

488 
rc
 = 
NGX_HTTP_NOT_FOUND
;

491 
NGX_EACCES
:

492 #i‡(
NGX_HAVE_OPENAT
)

493 
NGX_EMLINK
:

494 
NGX_ELOOP
:

497 
Àvñ
 = 
NGX_LOG_ERR
;

498 
rc
 = 
NGX_HTTP_FORBIDDEN
;

503 
Àvñ
 = 
NGX_LOG_CRIT
;

504 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

508 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

509 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

510 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

513  
rc
;

516 i‡(!
of
.
is_fûe
) {

518 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

519 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

520 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

523  
NGX_DECLINED
;

526 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

527 
r
->
Ælow_ønges
 = 1;

529 
°¨t
 = -1;

530 
Àngth
 = 0;

531 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

532 
mp4
 = 
NULL
;

533 
b
 = 
NULL
;

535 i‡(
r
->
¨gs
.
Àn
) {

537 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

544 
°¨t
 = 
	`ngx_hâp_mp4_©oÂ
(
vÆue
.
d©a
, vÆue.
Àn
, 3);

547 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"íd", 3, &
vÆue
Ë=
NGX_OK
) {

549 
íd
 = 
	`ngx_hâp_mp4_©oÂ
(
vÆue
.
d©a
, vÆue.
Àn
, 3);

551 i‡(
íd
 > 0) {

552 i‡(
°¨t
 < 0) {

553 
°¨t
 = 0;

556 i‡(
íd
 > 
°¨t
) {

557 
Àngth
 = 
íd
 - 
°¨t
;

563 i‡(
°¨t
 >= 0) {

564 
r
->
sögÀ_ønge
 = 1;

566 
mp4
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_mp4_fûe_t
));

567 i‡(
mp4
 =
NULL
) {

568  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

571 
mp4
->
fûe
.
fd
 = 
of
.fd;

572 
mp4
->
fûe
.
«me
 = 
∑th
;

573 
mp4
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

574 
mp4
->
íd
 = 
of
.
size
;

575 
mp4
->
°¨t
 = (
ngx_uöt_t
) start;

576 
mp4
->
Àngth
 =Üength;

577 
mp4
->
ªque°
 = 
r
;

579 
	`ngx_hâp_mp4_¥o˚ss
(
mp4
)) {

581 
NGX_DECLINED
:

582 i‡(
mp4
->
buf„r
) {

583 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

586 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

587 
mp4
 = 
NULL
;

591 
NGX_OK
:

592 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
mp4
->
c⁄ã¡_Àngth
;

596 i‡(
mp4
->
buf„r
) {

597 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

600 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

602  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

606 
log
->
a˘i⁄
 = "sending mp4Åo client";

608 i‡(
˛cf
->
dúe˘io
 <
of
.
size
) {

615 i‡(
	`ngx_dúe˘io_⁄
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

616 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

617 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
∑th
.
d©a
);

620 
of
.
is_dúe˘io
 = 1;

622 i‡(
mp4
) {

623 
mp4
->
fûe
.
dúe˘io
 = 1;

627 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

628 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

630 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

631  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

634 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

635  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

638 i‡(
mp4
 =
NULL
) {

639 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

640 i‡(
b
 =
NULL
) {

641  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

644 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

645 i‡(
b
->
fûe
 =
NULL
) {

646  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

650 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

652 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

653  
rc
;

656 i‡(
mp4
) {

657  
	`ngx_hâp_ouçut_fûãr
(
r
, 
mp4
->
out
);

660 
b
->
fûe_pos
 = 0;

661 
b
->
fûe_œ°
 = 
of
.
size
;

663 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

664 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

665 
b
->
œ°_ö_chaö
 = 1;

667 
b
->
fûe
->
fd
 = 
of
.fd;

668 
b
->
fûe
->
«me
 = 
∑th
;

669 
b
->
fûe
->
log
 =Üog;

670 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

672 
out
.
buf
 = 
b
;

673 
out
.
√xt
 = 
NULL
;

675  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_hâp_mp4_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

682 
ngx_öt_t
 
vÆue
, 
cutoff
, 
cuéim
;

683 
ngx_uöt_t
 
dŸ
;

687 i‡(
n
 == 0) {

688  
NGX_ERROR
;

691 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

692 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

694 
dŸ
 = 0;

696 
vÆue
 = 0; 
n
--; 
löe
++) {

698 i‡(*
löe
 == '.') {

699 i‡(
dŸ
) {

700  
NGX_ERROR
;

703 
dŸ
 = 1;

707 i‡(*
löe
 < '0' || *line > '9') {

708  
NGX_ERROR
;

711 i‡(
poöt
 == 0) {

715 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

716  
NGX_ERROR
;

719 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

720 
poöt
 -
dŸ
;

723 
poöt
--) {

724 i‡(
vÆue
 > 
cutoff
) {

725  
NGX_ERROR
;

728 
vÆue
 = value * 10;

731  
vÆue
;

732 
	}
}

735 
ngx_öt_t


736 
	$ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
)

738 
off_t
 
°¨t_off£t
, 
íd_off£t
, 
adju°mít
;

739 
ngx_öt_t
 
rc
;

740 
ngx_uöt_t
 
i
, 
j
;

741 
ngx_chaö_t
 **
¥ev
;

742 
ngx_hâp_mp4_åak_t
 *
åak
;

743 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

745 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

746 "mp4 sèπ:%ui,Üígth:%ui", 
mp4
->
°¨t
, mp4->
Àngth
);

748 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

750 
mp4
->
buf„r_size
 = 
c⁄f
->buffer_size;

752 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_©oms
, mp4->
íd
);

753 i‡(
rc
 !
NGX_OK
) {

754  
rc
;

757 i‡(
mp4
->
åak
.
√…s
 == 0) {

758 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

760 
mp4
->
fûe
.
«me
.
d©a
);

761  
NGX_ERROR
;

764 i‡(
mp4
->
md©_©om
.
buf
 =
NULL
) {

765 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

767 
mp4
->
fûe
.
«me
.
d©a
);

768  
NGX_ERROR
;

771 
¥ev
 = &
mp4
->
out
;

773 i‡(
mp4
->
·yp_©om
.
buf
) {

774 *
¥ev
 = &
mp4
->
·yp_©om
;

775 
¥ev
 = &
mp4
->
·yp_©om
.
√xt
;

778 *
¥ev
 = &
mp4
->
moov_©om
;

779 
¥ev
 = &
mp4
->
moov_©om
.
√xt
;

781 i‡(
mp4
->
mvhd_©om
.
buf
) {

782 
mp4
->
moov_size
 +mp4->
mvhd_©om_buf
.
œ°
 - mp4->mvhd_©om_buf.
pos
;

783 *
¥ev
 = &
mp4
->
mvhd_©om
;

784 
¥ev
 = &
mp4
->
mvhd_©om
.
√xt
;

787 
°¨t_off£t
 = 
mp4
->
íd
;

788 
íd_off£t
 = 0;

789 
åak
 = 
mp4
->åak.
ñts
;

791 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

793 i‡(
	`ngx_hâp_mp4_upd©e_°ts_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

794  
NGX_ERROR
;

797 i‡(
	`ngx_hâp_mp4_upd©e_°ss_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

798  
NGX_ERROR
;

801 
	`ngx_hâp_mp4_upd©e_˘ts_©om
(
mp4
, &
åak
[
i
]);

803 i‡(
	`ngx_hâp_mp4_upd©e_°sc_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

804  
NGX_ERROR
;

807 i‡(
	`ngx_hâp_mp4_upd©e_°sz_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

808  
NGX_ERROR
;

811 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

812 i‡(
	`ngx_hâp_mp4_upd©e_co64_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

813  
NGX_ERROR
;

817 i‡(
	`ngx_hâp_mp4_upd©e_°co_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

818  
NGX_ERROR
;

822 
	`ngx_hâp_mp4_upd©e_°bl_©om
(
mp4
, &
åak
[
i
]);

823 
	`ngx_hâp_mp4_upd©e_möf_©om
(
mp4
, &
åak
[
i
]);

824 
åak
[
i
].
size
 +åak[i].
mdhd_size
;

825 
åak
[
i
].
size
 +åak[i].
hdÃ_size
;

826 
	`ngx_hâp_mp4_upd©e_mdü_©om
(
mp4
, &
åak
[
i
]);

827 
åak
[
i
].
size
 +åak[i].
tkhd_size
;

828 
	`ngx_hâp_mp4_upd©e_åak_©om
(
mp4
, &
åak
[
i
]);

830 
mp4
->
moov_size
 +
åak
[
i
].
size
;

832 i‡(
°¨t_off£t
 > 
åak
[
i
].start_offset) {

833 
°¨t_off£t
 = 
åak
[
i
].start_offset;

836 i‡(
íd_off£t
 < 
åak
[
i
].end_offset) {

837 
íd_off£t
 = 
åak
[
i
].end_offset;

840 *
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
];

841 
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
√xt
;

843 
j
 = 0; j < 
NGX_HTTP_MP4_LAST_ATOM
 + 1; j++) {

844 i‡(
åak
[
i
].
out
[
j
].
buf
) {

845 *
¥ev
 = &
åak
[
i
].
out
[
j
];

846 
¥ev
 = &
åak
[
i
].
out
[
j
].
√xt
;

851 i‡(
íd_off£t
 < 
°¨t_off£t
) {

852 
íd_off£t
 = 
°¨t_off£t
;

855 
mp4
->
moov_size
 += 8;

857 
	`ngx_mp4_£t_32vÆue
(
mp4
->
moov_©om_hódî
, mp4->
moov_size
);

858 
	`ngx_mp4_£t_©om_«me
(
mp4
->
moov_©om_hódî
, 'm', 'o', 'o', 'v');

859 
mp4
->
c⁄ã¡_Àngth
 +mp4->
moov_size
;

861 *
¥ev
 = &
mp4
->
md©_©om
;

863 i‡(
°¨t_off£t
 > 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
) {

864 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

866 
mp4
->
fûe
.
«me
.
d©a
);

867  
NGX_ERROR
;

870 
adju°mít
 = 
mp4
->
·yp_size
 + mp4->
moov_size


871 + 
	`ngx_hâp_mp4_upd©e_md©_©om
(
mp4
, 
°¨t_off£t
, 
íd_off£t
)

872 - 
°¨t_off£t
;

874 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

875 "mp4ádju°mít:%O", 
adju°mít
);

877 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

878 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

879 
	`ngx_hâp_mp4_adju°_co64_©om
(
mp4
, &
åak
[
i
], 
adju°mít
);

881 
	`ngx_hâp_mp4_adju°_°co_©om
(
mp4
, &
åak
[
i
], (
öt32_t
Ë
adju°mít
);

885  
NGX_OK
;

886 
	}
}

890 
u_ch¨
 
	msize
[4];

891 
u_ch¨
 
	m«me
[4];

892 } 
	tngx_mp4_©om_hódî_t
;

895 
u_ch¨
 
	msize
[4];

896 
u_ch¨
 
	m«me
[4];

897 
u_ch¨
 
	msize64
[8];

898 } 
	tngx_mp4_©om_hódî64_t
;

901 
ngx_öt_t


902 
	$ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

903 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
)

905 
off_t
 
íd
;

906 
size_t
 
©om_hódî_size
;

907 
u_ch¨
 *
©om_hódî
, *
©om_«me
;

908 
uöt64_t
 
©om_size
;

909 
ngx_öt_t
 
rc
;

910 
ngx_uöt_t
 
n
;

912 
íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

914 
mp4
->
off£t
 < 
íd
) {

916 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
uöt32_t
)Ë!
NGX_OK
) {

917  
NGX_ERROR
;

920 
©om_hódî
 = 
mp4
->
buf„r_pos
;

921 
©om_size
 = 
	`ngx_mp4_gë_32vÆue
(
©om_hódî
);

922 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

924 i‡(
©om_size
 == 0) {

925 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

927  
NGX_OK
;

930 i‡(
©om_size
 < (
ngx_mp4_©om_hódî_t
)) {

932 i‡(
©om_size
 == 1) {

934 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî64_t
))

935 !
NGX_OK
)

937  
NGX_ERROR
;

941 
©om_hódî
 = 
mp4
->
buf„r_pos
;

942 
©om_size
 = 
	`ngx_mp4_gë_64vÆue
(
©om_hódî
 + 8);

943 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

946 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

948 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

949  
NGX_ERROR
;

953 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî_t
)Ë!
NGX_OK
) {

954  
NGX_ERROR
;

957 
©om_hódî
 = 
mp4
->
buf„r_pos
;

958 
©om_«me
 = 
©om_hódî
 + (
uöt32_t
);

960 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

962 (
size_t
Ë4, 
©om_«me
, 
mp4
->
off£t
, 
©om_size
);

964 i‡(
©om_size
 > (
uöt64_t
Ë(
NGX_MAX_OFF_T_VALUE
 - 
mp4
->
off£t
)

965 || 
mp4
->
off£t
 + (
off_t
Ë
©om_size
 > 
íd
)

967 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

969 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

970  
NGX_ERROR
;

973 
n
 = 0; 
©om
[n].
«me
;Ç++) {

975 i‡(
	`ngx_°∫cmp
(
©om_«me
, 
©om
[
n
].
«me
, 4) == 0) {

977 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_hódî_size
);

979 
rc
 = 
©om
[
n
].
	`h™dÀr
(
mp4
, 
©om_size
 - 
©om_hódî_size
);

980 i‡(
rc
 !
NGX_OK
) {

981  
rc
;

984 
√xt
;

988 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_size
);

990 
√xt
:

994  
NGX_OK
;

995 
	}
}

998 
ngx_öt_t


999 
	$ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
)

1001 
ssize_t
 
n
;

1003 i‡(
mp4
->
buf„r_pos
 + 
size
 <mp4->
buf„r_íd
) {

1004  
NGX_OK
;

1007 i‡(
mp4
->
off£t
 + (
off_t
Ëmp4->
buf„r_size
 > mp4->
íd
) {

1008 
mp4
->
buf„r_size
 = (
size_t
Ë(mp4->
íd
 - mp4->
off£t
);

1011 i‡(
mp4
->
buf„r_size
 < 
size
) {

1012 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1013 "\"%s\" mp4 fûêåunˇãd", 
mp4
->
fûe
.
«me
.
d©a
);

1014  
NGX_ERROR
;

1017 i‡(
mp4
->
buf„r
 =
NULL
) {

1018 
mp4
->
buf„r
 = 
	`ngx_∑Œoc
(mp4->
ªque°
->
poﬁ
, mp4->
buf„r_size
);

1019 i‡(
mp4
->
buf„r
 =
NULL
) {

1020  
NGX_ERROR
;

1023 
mp4
->
buf„r_°¨t
 = mp4->
buf„r
;

1026 
n
 = 
	`ngx_ªad_fûe
(&
mp4
->
fûe
, mp4->
buf„r_°¨t
, mp4->
buf„r_size
,

1027 
mp4
->
off£t
);

1029 i‡(
n
 =
NGX_ERROR
) {

1030  
NGX_ERROR
;

1033 i‡((
size_t
Ë
n
 !
mp4
->
buf„r_size
) {

1034 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
mp4
->
fûe
.
log
, 0,

1035 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

1036 
n
, 
mp4
->
buf„r_size
, mp4->
fûe
.
«me
.
d©a
);

1037  
NGX_ERROR
;

1040 
mp4
->
buf„r_pos
 = mp4->
buf„r_°¨t
;

1041 
mp4
->
buf„r_íd
 = mp4->
buf„r_°¨t
 + mp4->
buf„r_size
;

1043  
NGX_OK
;

1044 
	}
}

1047 
ngx_öt_t


1048 
	$ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1050 
u_ch¨
 *
·yp_©om
;

1051 
size_t
 
©om_size
;

1052 
ngx_buf_t
 *
©om
;

1054 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 ftypátom");

1056 i‡(
©om_d©a_size
 > 1024

1057 || 
	`ngx_mp4_©om_d©a
(
mp4
Ë+ (
size_t
Ë
©om_d©a_size
 > mp4->
buf„r_íd
)

1059 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1061 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1062  
NGX_ERROR
;

1065 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1067 
·yp_©om
 = 
	`ngx_∑Œoc
(
mp4
->
ªque°
->
poﬁ
, 
©om_size
);

1068 i‡(
·yp_©om
 =
NULL
) {

1069  
NGX_ERROR
;

1072 
	`ngx_mp4_£t_32vÆue
(
·yp_©om
, 
©om_size
);

1073 
	`ngx_mp4_£t_©om_«me
(
·yp_©om
, 'f', 't', 'y', 'p');

1079 
	`ngx_mem˝y
(
·yp_©om
 + (
ngx_mp4_©om_hódî_t
),

1080 
	`ngx_mp4_©om_d©a
(
mp4
), (
size_t
Ë
©om_d©a_size
);

1082 
©om
 = &
mp4
->
·yp_©om_buf
;

1083 
©om
->
ãmp‹¨y
 = 1;

1084 
©om
->
pos
 = 
·yp_©om
;

1085 
©om
->
œ°
 = 
·yp_©om
 + 
©om_size
;

1087 
mp4
->
·yp_©om
.
buf
 = 
©om
;

1088 
mp4
->
·yp_size
 = 
©om_size
;

1089 
mp4
->
c⁄ã¡_Àngth
 = 
©om_size
;

1091 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1093  
NGX_OK
;

1094 
	}
}

1101 
	#NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 (4 * 1024)

	)

1103 
ngx_öt_t


1104 
	$ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1106 
ngx_öt_t
 
rc
;

1107 
ngx_uöt_t
 
no_md©
;

1108 
ngx_buf_t
 *
©om
;

1109 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

1111 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom");

1113 
no_md©
 = (
mp4
->
md©_©om
.
buf
 =
NULL
);

1115 i‡(
no_md©
 && 
mp4
->
°¨t
 =0 && mp4->
Àngth
 == 0) {

1120  
NGX_DECLINED
;

1123 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

1125 i‡(
©om_d©a_size
 > 
mp4
->
buf„r_size
) {

1127 i‡(
©om_d©a_size
 > 
c⁄f
->
max_buf„r_size
) {

1128 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1131 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1132  
NGX_ERROR
;

1135 
	`ngx_p‰ì
(
mp4
->
ªque°
->
poﬁ
, mp4->
buf„r
);

1136 
mp4
->
buf„r
 = 
NULL
;

1137 
mp4
->
buf„r_pos
 = 
NULL
;

1138 
mp4
->
buf„r_íd
 = 
NULL
;

1140 
mp4
->
buf„r_size
 = (
size_t
Ë
©om_d©a_size


1141 + 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 * 
no_md©
;

1144 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
size_t
Ë
©om_d©a_size
Ë!
NGX_OK
) {

1145  
NGX_ERROR
;

1148 
mp4
->
åak
.
ñts
 = &mp4->
åaks
;

1149 
mp4
->
åak
.
size
 = (
ngx_hâp_mp4_åak_t
);

1150 
mp4
->
åak
.
«Œoc
 = 2;

1151 
mp4
->
åak
.
poﬁ
 = mp4->
ªque°
->pool;

1153 
©om
 = &
mp4
->
moov_©om_buf
;

1154 
©om
->
ãmp‹¨y
 = 1;

1155 
©om
->
pos
 = 
mp4
->
moov_©om_hódî
;

1156 
©om
->
œ°
 = 
mp4
->
moov_©om_hódî
 + 8;

1158 
mp4
->
moov_©om
.
buf
 = &mp4->
moov_©om_buf
;

1160 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_moov_©oms
, 
©om_d©a_size
);

1162 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom done");

1164 i‡(
no_md©
) {

1165 
mp4
->
buf„r_°¨t
 = mp4->
buf„r_pos
;

1166 
mp4
->
buf„r_size
 = 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
;

1168 i‡(
mp4
->
buf„r_°¨t
 + mp4->
buf„r_size
 > mp4->
buf„r_íd
) {

1169 
mp4
->
buf„r
 = 
NULL
;

1170 
mp4
->
buf„r_pos
 = 
NULL
;

1171 
mp4
->
buf„r_íd
 = 
NULL
;

1176 
mp4
->
off£t
 = mp4->
íd
;

1179  
rc
;

1180 
	}
}

1183 
ngx_öt_t


1184 
	$ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1186 
ngx_buf_t
 *
d©a
;

1188 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdatátom");

1190 
d©a
 = &
mp4
->
md©_d©a_buf
;

1191 
d©a
->
fûe
 = &
mp4
->file;

1192 
d©a
->
ö_fûe
 = 1;

1193 
d©a
->
œ°_buf
 = (
mp4
->
ªque°
 =mp4->ªque°->
maö
) ? 1 : 0;

1194 
d©a
->
œ°_ö_chaö
 = 1;

1195 
d©a
->
fûe_œ°
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1197 
mp4
->
md©_©om
.
buf
 = &mp4->
md©_©om_buf
;

1198 
mp4
->
md©_©om
.
√xt
 = &mp4->
md©_d©a
;

1199 
mp4
->
md©_d©a
.
buf
 = 
d©a
;

1201 i‡(
mp4
->
åak
.
√…s
) {

1203 
mp4
->
off£t
 = mp4->
íd
;

1206 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1209  
NGX_OK
;

1210 
	}
}

1213 
size_t


1214 
	$ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
off_t
 
°¨t_off£t
,

1215 
off_t
 
íd_off£t
)

1217 
off_t
 
©om_d©a_size
;

1218 
u_ch¨
 *
©om_hódî
;

1219 
uöt32_t
 
©om_hódî_size
;

1220 
uöt64_t
 
©om_size
;

1221 
ngx_buf_t
 *
©om
;

1223 
©om_d©a_size
 = 
íd_off£t
 - 
°¨t_off£t
;

1224 
mp4
->
md©_d©a
.
buf
->
fûe_pos
 = 
°¨t_off£t
;

1225 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
 = 
íd_off£t
;

1227 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1228 "md©Çew off£à@%O:%O", 
°¨t_off£t
, 
©om_d©a_size
);

1230 
©om_hódî
 = 
mp4
->
md©_©om_hódî
;

1232 i‡((
uöt64_t
Ë
©om_d©a_size


1233 > (
uöt64_t
Ë0xfffffff‡- (
ngx_mp4_©om_hódî_t
))

1235 
©om_size
 = 1;

1236 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

1237 
	`ngx_mp4_£t_64vÆue
(
©om_hódî
 + (
ngx_mp4_©om_hódî_t
),

1238 (
ngx_mp4_©om_hódî64_t
Ë+ 
©om_d©a_size
);

1240 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ 
©om_d©a_size
;

1241 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

1244 
mp4
->
c⁄ã¡_Àngth
 +
©om_hódî_size
 + 
©om_d©a_size
;

1246 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1247 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'a', 't');

1249 
©om
 = &
mp4
->
md©_©om_buf
;

1250 
©om
->
ãmp‹¨y
 = 1;

1251 
©om
->
pos
 = 
©om_hódî
;

1252 
©om
->
œ°
 = 
©om_hódî
 + 
©om_hódî_size
;

1254  
©om_hódî_size
;

1255 
	}
}

1259 
u_ch¨
 
	msize
[4];

1260 
u_ch¨
 
	m«me
[4];

1261 
u_ch¨
 
	mvîsi⁄
[1];

1262 
u_ch¨
 
	mÊags
[3];

1263 
u_ch¨
 
	m¸óti⁄_time
[4];

1264 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1265 
u_ch¨
 
	mtimesˇÀ
[4];

1266 
u_ch¨
 
	mduøti⁄
[4];

1267 
u_ch¨
 
	møã
[4];

1268 
u_ch¨
 
	mvﬁume
[2];

1269 
u_ch¨
 
	mª£rved
[10];

1270 
u_ch¨
 
	mm©rix
[36];

1271 
u_ch¨
 
	m¥evõw_time
[4];

1272 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1273 
u_ch¨
 
	mpo°î_time
[4];

1274 
u_ch¨
 
	m£À˘i⁄_time
[4];

1275 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1276 
u_ch¨
 
	mcuºít_time
[4];

1277 
u_ch¨
 
	m√xt_åack_id
[4];

1278 } 
	tngx_mp4_mvhd_©om_t
;

1281 
u_ch¨
 
	msize
[4];

1282 
u_ch¨
 
	m«me
[4];

1283 
u_ch¨
 
	mvîsi⁄
[1];

1284 
u_ch¨
 
	mÊags
[3];

1285 
u_ch¨
 
	m¸óti⁄_time
[8];

1286 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1287 
u_ch¨
 
	mtimesˇÀ
[4];

1288 
u_ch¨
 
	mduøti⁄
[8];

1289 
u_ch¨
 
	møã
[4];

1290 
u_ch¨
 
	mvﬁume
[2];

1291 
u_ch¨
 
	mª£rved
[10];

1292 
u_ch¨
 
	mm©rix
[36];

1293 
u_ch¨
 
	m¥evõw_time
[4];

1294 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1295 
u_ch¨
 
	mpo°î_time
[4];

1296 
u_ch¨
 
	m£À˘i⁄_time
[4];

1297 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1298 
u_ch¨
 
	mcuºít_time
[4];

1299 
u_ch¨
 
	m√xt_åack_id
[4];

1300 } 
	tngx_mp4_mvhd64_©om_t
;

1303 
ngx_öt_t


1304 
	$ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1306 
u_ch¨
 *
©om_hódî
;

1307 
size_t
 
©om_size
;

1308 
uöt32_t
 
timesˇÀ
;

1309 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1310 
ngx_buf_t
 *
©om
;

1311 
ngx_mp4_mvhd_©om_t
 *
mvhd_©om
;

1312 
ngx_mp4_mvhd64_©om_t
 *
mvhd64_©om
;

1314 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mvhdátom");

1316 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1317 
mvhd_©om
 = (
ngx_mp4_mvhd_©om_t
 *Ë
©om_hódî
;

1318 
mvhd64_©om
 = (
ngx_mp4_mvhd64_©om_t
 *Ë
©om_hódî
;

1319 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'v', 'h', 'd');

1321 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd_©om_t
Ë> 
©om_d©a_size
) {

1322 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1323 "\"%s\" mp4 mvhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1324  
NGX_ERROR
;

1327 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1329 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->timescale);

1330 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->duration);

1335 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd64_©om_t
Ë> 
©om_d©a_size
) {

1336 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1338 
mp4
->
fûe
.
«me
.
d©a
);

1339  
NGX_ERROR
;

1342 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd64_©om
->timescale);

1343 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mvhd64_©om
->duration);

1346 
mp4
->
timesˇÀ
 =Åimescale;

1348 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1350 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1352 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1354 i‡(
duøti⁄
 < 
°¨t_time
) {

1355 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1357 
mp4
->
fûe
.
«me
.
d©a
);

1358  
NGX_ERROR
;

1361 
duøti⁄
 -
°¨t_time
;

1363 i‡(
mp4
->
Àngth
) {

1364 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * 
timesˇÀ
 / 1000;

1366 i‡(
duøti⁄
 > 
Àngth_time
) {

1367 
duøti⁄
 = 
Àngth_time
;

1371 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1373 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1375 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1376 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
size
, 
©om_size
);

1378 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1379 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
duøti⁄
, duration);

1382 
	`ngx_mp4_£t_64vÆue
(
mvhd64_©om
->
duøti⁄
, duration);

1385 
©om
 = &
mp4
->
mvhd_©om_buf
;

1386 
©om
->
ãmp‹¨y
 = 1;

1387 
©om
->
pos
 = 
©om_hódî
;

1388 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1390 
mp4
->
mvhd_©om
.
buf
 = 
©om
;

1392 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1394  
NGX_OK
;

1395 
	}
}

1398 
ngx_öt_t


1399 
	$ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1401 
u_ch¨
 *
©om_hódî
, *
©om_íd
;

1402 
off_t
 
©om_fûe_íd
;

1403 
ngx_öt_t
 
rc
;

1404 
ngx_buf_t
 *
©om
;

1405 
ngx_hâp_mp4_åak_t
 *
åak
;

1407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Årakátom");

1409 
åak
 = 
	`ngx_¨øy_push
(&
mp4
->trak);

1410 i‡(
åak
 =
NULL
) {

1411  
NGX_ERROR
;

1414 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1416 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1417 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 't', 'r', 'a', 'k');

1419 
©om
 = &
åak
->
åak_©om_buf
;

1420 
©om
->
ãmp‹¨y
 = 1;

1421 
©om
->
pos
 = 
©om_hódî
;

1422 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1424 
åak
->
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
buf
 = 
©om
;

1426 
©om_íd
 = 
mp4
->
buf„r_pos
 + (
size_t
Ë
©om_d©a_size
;

1427 
©om_fûe_íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1429 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_åak_©oms
, 
©om_d©a_size
);

1431 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1432 "mp4Åøkátom: %i", 
rc
);

1434 i‡(
rc
 =
NGX_DECLINED
) {

1436 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1437 
mp4
->
åak
.
√…s
--;

1438 
mp4
->
buf„r_pos
 = 
©om_íd
;

1439 
mp4
->
off£t
 = 
©om_fûe_íd
;

1440  
NGX_OK
;

1443  
rc
;

1444 
	}
}

1448 
	$ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1449 
ngx_hâp_mp4_åak_t
 *
åak
)

1451 
ngx_buf_t
 *
©om
;

1453 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1454 
©om
 = &
åak
->
åak_©om_buf
;

1455 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1456 
	}
}

1459 
ngx_öt_t


1460 
	$ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1462 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1464 
mp4
->
fûe
.
«me
.
d©a
);

1466  
NGX_ERROR
;

1467 
	}
}

1471 
u_ch¨
 
	msize
[4];

1472 
u_ch¨
 
	m«me
[4];

1473 
u_ch¨
 
	mvîsi⁄
[1];

1474 
u_ch¨
 
	mÊags
[3];

1475 
u_ch¨
 
	m¸óti⁄_time
[4];

1476 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1477 
u_ch¨
 
	måack_id
[4];

1478 
u_ch¨
 
	mª£rved1
[4];

1479 
u_ch¨
 
	mduøti⁄
[4];

1480 
u_ch¨
 
	mª£rved2
[8];

1481 
u_ch¨
 
	mœyî
[2];

1482 
u_ch¨
 
	mgroup
[2];

1483 
u_ch¨
 
	mvﬁume
[2];

1484 
u_ch¨
 
	mª£rved3
[2];

1485 
u_ch¨
 
	mm©rix
[36];

1486 
u_ch¨
 
	mwidth
[4];

1487 
u_ch¨
 
	mheight
[4];

1488 } 
	tngx_mp4_tkhd_©om_t
;

1491 
u_ch¨
 
	msize
[4];

1492 
u_ch¨
 
	m«me
[4];

1493 
u_ch¨
 
	mvîsi⁄
[1];

1494 
u_ch¨
 
	mÊags
[3];

1495 
u_ch¨
 
	m¸óti⁄_time
[8];

1496 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1497 
u_ch¨
 
	måack_id
[4];

1498 
u_ch¨
 
	mª£rved1
[4];

1499 
u_ch¨
 
	mduøti⁄
[8];

1500 
u_ch¨
 
	mª£rved2
[8];

1501 
u_ch¨
 
	mœyî
[2];

1502 
u_ch¨
 
	mgroup
[2];

1503 
u_ch¨
 
	mvﬁume
[2];

1504 
u_ch¨
 
	mª£rved3
[2];

1505 
u_ch¨
 
	mm©rix
[36];

1506 
u_ch¨
 
	mwidth
[4];

1507 
u_ch¨
 
	mheight
[4];

1508 } 
	tngx_mp4_tkhd64_©om_t
;

1511 
ngx_öt_t


1512 
	$ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1514 
u_ch¨
 *
©om_hódî
;

1515 
size_t
 
©om_size
;

1516 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1517 
ngx_buf_t
 *
©om
;

1518 
ngx_hâp_mp4_åak_t
 *
åak
;

1519 
ngx_mp4_tkhd_©om_t
 *
tkhd_©om
;

1520 
ngx_mp4_tkhd64_©om_t
 *
tkhd64_©om
;

1522 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Åkhdátom");

1524 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1525 
tkhd_©om
 = (
ngx_mp4_tkhd_©om_t
 *Ë
©om_hódî
;

1526 
tkhd64_©om
 = (
ngx_mp4_tkhd64_©om_t
 *Ë
©om_hódî
;

1527 
	`ngx_mp4_£t_©om_«me
(
tkhd_©om
, 't', 'k', 'h', 'd');

1529 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd_©om_t
Ë> 
©om_d©a_size
) {

1530 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1531 "\"%s\" mp4ÅkhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1532  
NGX_ERROR
;

1535 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1537 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
tkhd_©om
->duration);

1542 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd64_©om_t
Ë> 
©om_d©a_size
) {

1543 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1545 
mp4
->
fûe
.
«me
.
d©a
);

1546  
NGX_ERROR
;

1549 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
tkhd64_©om
->duration);

1552 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1554 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1556 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * mp4->
timesˇÀ
 / 1000;

1558 i‡(
duøti⁄
 <
°¨t_time
) {

1559 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1561  
NGX_DECLINED
;

1564 
duøti⁄
 -
°¨t_time
;

1566 i‡(
mp4
->
Àngth
) {

1567 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * mp4->
timesˇÀ
 / 1000;

1569 i‡(
duøti⁄
 > 
Àngth_time
) {

1570 
duøti⁄
 = 
Àngth_time
;

1574 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1576 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1578 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1580 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1581 
åak
->
tkhd_size
 = 
©om_size
;

1583 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
size
, 
©om_size
);

1585 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1586 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
duøti⁄
, duration);

1589 
	`ngx_mp4_£t_64vÆue
(
tkhd64_©om
->
duøti⁄
, duration);

1592 
©om
 = &
åak
->
tkhd_©om_buf
;

1593 
©om
->
ãmp‹¨y
 = 1;

1594 
©om
->
pos
 = 
©om_hódî
;

1595 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1597 
åak
->
out
[
NGX_HTTP_MP4_TKHD_ATOM
].
buf
 = 
©om
;

1599 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1601  
NGX_OK
;

1602 
	}
}

1605 
ngx_öt_t


1606 
	$ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1608 
u_ch¨
 *
©om_hódî
;

1609 
ngx_buf_t
 *
©om
;

1610 
ngx_hâp_mp4_åak_t
 *
åak
;

1612 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process mdiaátom");

1614 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1615 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'i', 'a');

1617 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1619 
©om
 = &
åak
->
mdü_©om_buf
;

1620 
©om
->
ãmp‹¨y
 = 1;

1621 
©om
->
pos
 = 
©om_hódî
;

1622 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1624 
åak
->
out
[
NGX_HTTP_MP4_MDIA_ATOM
].
buf
 = 
©om
;

1626  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_mdü_©oms
, 
©om_d©a_size
);

1627 
	}
}

1631 
	$ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1632 
ngx_hâp_mp4_åak_t
 *
åak
)

1634 
ngx_buf_t
 *
©om
;

1636 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1637 
©om
 = &
åak
->
mdü_©om_buf
;

1638 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1639 
	}
}

1643 
u_ch¨
 
	msize
[4];

1644 
u_ch¨
 
	m«me
[4];

1645 
u_ch¨
 
	mvîsi⁄
[1];

1646 
u_ch¨
 
	mÊags
[3];

1647 
u_ch¨
 
	m¸óti⁄_time
[4];

1648 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1649 
u_ch¨
 
	mtimesˇÀ
[4];

1650 
u_ch¨
 
	mduøti⁄
[4];

1651 
u_ch¨
 
	mœnguage
[2];

1652 
u_ch¨
 
	mquÆôy
[2];

1653 } 
	tngx_mp4_mdhd_©om_t
;

1656 
u_ch¨
 
	msize
[4];

1657 
u_ch¨
 
	m«me
[4];

1658 
u_ch¨
 
	mvîsi⁄
[1];

1659 
u_ch¨
 
	mÊags
[3];

1660 
u_ch¨
 
	m¸óti⁄_time
[8];

1661 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1662 
u_ch¨
 
	mtimesˇÀ
[4];

1663 
u_ch¨
 
	mduøti⁄
[8];

1664 
u_ch¨
 
	mœnguage
[2];

1665 
u_ch¨
 
	mquÆôy
[2];

1666 } 
	tngx_mp4_mdhd64_©om_t
;

1669 
ngx_öt_t


1670 
	$ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1672 
u_ch¨
 *
©om_hódî
;

1673 
size_t
 
©om_size
;

1674 
uöt32_t
 
timesˇÀ
;

1675 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1676 
ngx_buf_t
 *
©om
;

1677 
ngx_hâp_mp4_åak_t
 *
åak
;

1678 
ngx_mp4_mdhd_©om_t
 *
mdhd_©om
;

1679 
ngx_mp4_mdhd64_©om_t
 *
mdhd64_©om
;

1681 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdhdátom");

1683 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1684 
mdhd_©om
 = (
ngx_mp4_mdhd_©om_t
 *Ë
©om_hódî
;

1685 
mdhd64_©om
 = (
ngx_mp4_mdhd64_©om_t
 *Ë
©om_hódî
;

1686 
	`ngx_mp4_£t_©om_«me
(
mdhd_©om
, 'm', 'd', 'h', 'd');

1688 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd_©om_t
Ë> 
©om_d©a_size
) {

1689 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1690 "\"%s\" mp4 mdhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1691  
NGX_ERROR
;

1694 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1696 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->timescale);

1697 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->duration);

1702 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd64_©om_t
Ë> 
©om_d©a_size
) {

1703 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1705 
mp4
->
fûe
.
«me
.
d©a
);

1706  
NGX_ERROR
;

1709 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd64_©om
->timescale);

1710 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mdhd64_©om
->duration);

1713 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1715 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1717 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1719 i‡(
duøti⁄
 <
°¨t_time
) {

1720 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1722  
NGX_DECLINED
;

1725 
duøti⁄
 -
°¨t_time
;

1727 i‡(
mp4
->
Àngth
) {

1728 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * 
timesˇÀ
 / 1000;

1730 i‡(
duøti⁄
 > 
Àngth_time
) {

1731 
duøti⁄
 = 
Àngth_time
;

1735 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1737 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1739 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1741 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1742 
åak
->
mdhd_size
 = 
©om_size
;

1743 
åak
->
timesˇÀ
 =Åimescale;

1745 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
size
, 
©om_size
);

1747 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1748 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
duøti⁄
, duration);

1751 
	`ngx_mp4_£t_64vÆue
(
mdhd64_©om
->
duøti⁄
, duration);

1754 
©om
 = &
åak
->
mdhd_©om_buf
;

1755 
©om
->
ãmp‹¨y
 = 1;

1756 
©om
->
pos
 = 
©om_hódî
;

1757 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1759 
åak
->
out
[
NGX_HTTP_MP4_MDHD_ATOM
].
buf
 = 
©om
;

1761 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1763  
NGX_OK
;

1764 
	}
}

1767 
ngx_öt_t


1768 
	$ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1770 
u_ch¨
 *
©om_hódî
;

1771 
size_t
 
©om_size
;

1772 
ngx_buf_t
 *
©om
;

1773 
ngx_hâp_mp4_åak_t
 *
åak
;

1775 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 hdlrátom");

1777 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1778 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1779 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1780 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'h', 'd', 'l', 'r');

1782 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1784 
©om
 = &
åak
->
hdÃ_©om_buf
;

1785 
©om
->
ãmp‹¨y
 = 1;

1786 
©om
->
pos
 = 
©om_hódî
;

1787 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1789 
åak
->
hdÃ_size
 = 
©om_size
;

1790 
åak
->
out
[
NGX_HTTP_MP4_HDLR_ATOM
].
buf
 = 
©om
;

1792 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1794  
NGX_OK
;

1795 
	}
}

1798 
ngx_öt_t


1799 
	$ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1801 
u_ch¨
 *
©om_hódî
;

1802 
ngx_buf_t
 *
©om
;

1803 
ngx_hâp_mp4_åak_t
 *
åak
;

1805 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process minfátom");

1807 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1808 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'i', 'n', 'f');

1810 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1812 
©om
 = &
åak
->
möf_©om_buf
;

1813 
©om
->
ãmp‹¨y
 = 1;

1814 
©om
->
pos
 = 
©om_hódî
;

1815 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1817 
åak
->
out
[
NGX_HTTP_MP4_MINF_ATOM
].
buf
 = 
©om
;

1819  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_möf_©oms
, 
©om_d©a_size
);

1820 
	}
}

1824 
	$ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1825 
ngx_hâp_mp4_åak_t
 *
åak
)

1827 
ngx_buf_t
 *
©om
;

1829 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
)

1830 + 
åak
->
vmhd_size


1831 + 
åak
->
smhd_size


1832 + 
åak
->
döf_size
;

1833 
©om
 = &
åak
->
möf_©om_buf
;

1834 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1835 
	}
}

1838 
ngx_öt_t


1839 
	$ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1841 
u_ch¨
 *
©om_hódî
;

1842 
size_t
 
©om_size
;

1843 
ngx_buf_t
 *
©om
;

1844 
ngx_hâp_mp4_åak_t
 *
åak
;

1846 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 vmhdátom");

1848 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1849 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1850 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1851 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'v', 'm', 'h', 'd');

1853 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1855 
©om
 = &
åak
->
vmhd_©om_buf
;

1856 
©om
->
ãmp‹¨y
 = 1;

1857 
©om
->
pos
 = 
©om_hódî
;

1858 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1860 
åak
->
vmhd_size
 +
©om_size
;

1861 
åak
->
out
[
NGX_HTTP_MP4_VMHD_ATOM
].
buf
 = 
©om
;

1863 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1865  
NGX_OK
;

1866 
	}
}

1869 
ngx_öt_t


1870 
	$ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1872 
u_ch¨
 *
©om_hódî
;

1873 
size_t
 
©om_size
;

1874 
ngx_buf_t
 *
©om
;

1875 
ngx_hâp_mp4_åak_t
 *
åak
;

1877 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 smhdátom");

1879 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1880 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1881 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1882 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 'm', 'h', 'd');

1884 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1886 
©om
 = &
åak
->
smhd_©om_buf
;

1887 
©om
->
ãmp‹¨y
 = 1;

1888 
©om
->
pos
 = 
©om_hódî
;

1889 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1891 
åak
->
smhd_size
 +
©om_size
;

1892 
åak
->
out
[
NGX_HTTP_MP4_SMHD_ATOM
].
buf
 = 
©om
;

1894 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1896  
NGX_OK
;

1897 
	}
}

1900 
ngx_öt_t


1901 
	$ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1903 
u_ch¨
 *
©om_hódî
;

1904 
size_t
 
©om_size
;

1905 
ngx_buf_t
 *
©om
;

1906 
ngx_hâp_mp4_åak_t
 *
åak
;

1908 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 dinfátom");

1910 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1911 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1912 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1913 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'd', 'i', 'n', 'f');

1915 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1917 
©om
 = &
åak
->
döf_©om_buf
;

1918 
©om
->
ãmp‹¨y
 = 1;

1919 
©om
->
pos
 = 
©om_hódî
;

1920 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1922 
åak
->
döf_size
 +
©om_size
;

1923 
åak
->
out
[
NGX_HTTP_MP4_DINF_ATOM
].
buf
 = 
©om
;

1925 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1927  
NGX_OK
;

1928 
	}
}

1931 
ngx_öt_t


1932 
	$ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1934 
u_ch¨
 *
©om_hódî
;

1935 
ngx_buf_t
 *
©om
;

1936 
ngx_hâp_mp4_åak_t
 *
åak
;

1938 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process stblátom");

1940 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1941 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 't', 'b', 'l');

1943 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1945 
©om
 = &
åak
->
°bl_©om_buf
;

1946 
©om
->
ãmp‹¨y
 = 1;

1947 
©om
->
pos
 = 
©om_hódî
;

1948 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1950 
åak
->
out
[
NGX_HTTP_MP4_STBL_ATOM
].
buf
 = 
©om
;

1952  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_°bl_©oms
, 
©om_d©a_size
);

1953 
	}
}

1957 
	$ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1958 
ngx_hâp_mp4_åak_t
 *
åak
)

1960 
ngx_buf_t
 *
©om
;

1962 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1963 
©om
 = &
åak
->
°bl_©om_buf
;

1964 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1965 
	}
}

1969 
u_ch¨
 
	msize
[4];

1970 
u_ch¨
 
	m«me
[4];

1971 
u_ch¨
 
	mvîsi⁄
[1];

1972 
u_ch¨
 
	mÊags
[3];

1973 
u_ch¨
 
	míåõs
[4];

1975 
u_ch¨
 
	mmedü_size
[4];

1976 
u_ch¨
 
	mmedü_«me
[4];

1977 } 
	tngx_mp4_°sd_©om_t
;

1980 
ngx_öt_t


1981 
	$ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1983 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
;

1984 
size_t
 
©om_size
;

1985 
ngx_buf_t
 *
©om
;

1986 
ngx_mp4_°sd_©om_t
 *
°sd_©om
;

1987 
ngx_hâp_mp4_åak_t
 *
åak
;

1991 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stsdátom");

1993 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1994 
°sd_©om
 = (
ngx_mp4_°sd_©om_t
 *Ë
©om_hódî
;

1995 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1996 
©om_èbÀ
 = 
©om_hódî
 + 
©om_size
;

1997 
	`ngx_mp4_£t_32vÆue
(
°sd_©om
->
size
, 
©om_size
);

1998 
	`ngx_mp4_£t_©om_«me
(
°sd_©om
, 's', 't', 's', 'd');

2000 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sd_©om_t
Ë> 
©om_d©a_size
) {

2001 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2002 "\"%s\" mp4 stsdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2003  
NGX_ERROR
;

2006 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2008 
	`ngx_mp4_gë_32vÆue
(
°sd_©om
->
íåõs
),

2009 (
size_t
Ë4, 
°sd_©om
->
medü_«me
);

2011 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2013 
©om
 = &
åak
->
°sd_©om_buf
;

2014 
©om
->
ãmp‹¨y
 = 1;

2015 
©om
->
pos
 = 
©om_hódî
;

2016 
©om
->
œ°
 = 
©om_èbÀ
;

2018 
åak
->
out
[
NGX_HTTP_MP4_STSD_ATOM
].
buf
 = 
©om
;

2019 
åak
->
size
 +
©om_size
;

2021 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2023  
NGX_OK
;

2024 
	}
}

2028 
u_ch¨
 
	msize
[4];

2029 
u_ch¨
 
	m«me
[4];

2030 
u_ch¨
 
	mvîsi⁄
[1];

2031 
u_ch¨
 
	mÊags
[3];

2032 
u_ch¨
 
	míåõs
[4];

2033 } 
	tngx_mp4_°ts_©om_t
;

2036 
u_ch¨
 
	mcou¡
[4];

2037 
u_ch¨
 
	mduøti⁄
[4];

2038 } 
	tngx_mp4_°ts_íåy_t
;

2041 
ngx_öt_t


2042 
	$ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2044 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2045 
uöt32_t
 
íåõs
;

2046 
ngx_buf_t
 *
©om
, *
d©a
;

2047 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

2048 
ngx_hâp_mp4_åak_t
 *
åak
;

2052 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 sttsátom");

2054 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2055 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om_hódî
;

2056 
	`ngx_mp4_£t_©om_«me
(
°ts_©om
, 's', 't', 't', 's');

2058 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
Ë> 
©om_d©a_size
) {

2059 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2060 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2061  
NGX_ERROR
;

2064 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ts_©om
->entries);

2066 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2067 "mp4Åime-to-ßm∂êíåõs:%uD", 
íåõs
);

2069 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
)

2070 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
Ë> 
©om_d©a_size
)

2072 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2073 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2074  
NGX_ERROR
;

2077 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°ts_©om_t
);

2078 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
);

2080 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2081 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

2083 
©om
 = &
åak
->
°ts_©om_buf
;

2084 
©om
->
ãmp‹¨y
 = 1;

2085 
©om
->
pos
 = 
©om_hódî
;

2086 
©om
->
œ°
 = 
©om_èbÀ
;

2088 
d©a
 = &
åak
->
°ts_d©a_buf
;

2089 
d©a
->
ãmp‹¨y
 = 1;

2090 
d©a
->
pos
 = 
©om_èbÀ
;

2091 
d©a
->
œ°
 = 
©om_íd
;

2093 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
 = 
©om
;

2094 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
 = 
d©a
;

2096 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2098  
NGX_OK
;

2099 
	}
}

2102 
ngx_öt_t


2103 
	$ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2104 
ngx_hâp_mp4_åak_t
 *
åak
)

2106 
size_t
 
©om_size
;

2107 
ngx_buf_t
 *
©om
, *
d©a
;

2108 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

2115 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2118 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

2120 i‡(
d©a
 =
NULL
) {

2121 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2123 
mp4
->
fûe
.
«me
.
d©a
);

2124  
NGX_ERROR
;

2127 i‡(
	`ngx_hâp_mp4_¸›_°ts_d©a
(
mp4
, 
åak
, 1Ë!
NGX_OK
) {

2128  
NGX_ERROR
;

2131 i‡(
	`ngx_hâp_mp4_¸›_°ts_d©a
(
mp4
, 
åak
, 0Ë!
NGX_OK
) {

2132  
NGX_ERROR
;

2135 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2136 "time-to-ßm∂êíåõs:%uD", 
åak
->
time_to_ßm∂e_íåõs
);

2138 
©om_size
 = (
ngx_mp4_°ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2139 
åak
->
size
 +
©om_size
;

2141 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
;

2142 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om
->
pos
;

2143 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
size
, 
©om_size
);

2144 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
íåõs
, 
åak
->
time_to_ßm∂e_íåõs
);

2146  
NGX_OK
;

2147 
	}
}

2150 
ngx_öt_t


2151 
	$ngx_hâp_mp4_¸›_°ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2152 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2154 
uöt32_t
 
cou¡
, 
duøti⁄
, 
ª°
;

2155 
uöt64_t
 
°¨t_time
;

2156 
ngx_buf_t
 *
d©a
;

2157 
ngx_uöt_t
 
°¨t_ßm∂e
, 
íåõs
, 
°¨t_£c
;

2158 
ngx_mp4_°ts_íåy_t
 *
íåy
, *
íd
;

2160 i‡(
°¨t
) {

2161 
°¨t_£c
 = 
mp4
->
°¨t
;

2163 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2164 "mp4 sâ†¸› sèπ_time:%ui", 
°¨t_£c
);

2166 } i‡(
mp4
->
Àngth
) {

2167 
°¨t_£c
 = 
mp4
->
Àngth
;

2169 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2170 "mp4 sâ†¸›Énd_time:%ui", 
°¨t_£c
);

2173  
NGX_OK
;

2176 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

2178 
°¨t_time
 = (
uöt64_t
Ë
°¨t_£c
 * 
åak
->
timesˇÀ
 / 1000;

2180 
íåõs
 = 
åak
->
time_to_ßm∂e_íåõs
;

2181 
°¨t_ßm∂e
 = 0;

2182 
íåy
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
pos
;

2183 
íd
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
œ°
;

2185 
íåy
 < 
íd
) {

2186 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2187 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->duration);

2189 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2191 
°¨t_time
, 
cou¡
, 
duøti⁄
);

2193 i‡(
°¨t_time
 < (
uöt64_t
Ë
cou¡
 * 
duøti⁄
) {

2194 
°¨t_ßm∂e
 +(
ngx_uöt_t
Ë(
°¨t_time
 / 
duøti⁄
);

2195 
ª°
 = (
uöt32_t
Ë(
°¨t_time
 / 
duøti⁄
);

2196 
found
;

2199 
°¨t_ßm∂e
 +
cou¡
;

2200 
°¨t_time
 -
cou¡
 * 
duøti⁄
;

2201 
íåõs
--;

2202 
íåy
++;

2205 i‡(
°¨t
) {

2206 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2208 
mp4
->
fûe
.
«me
.
d©a
);

2210  
NGX_ERROR
;

2213 
åak
->
íd_ßm∂e
 =Åøk->
°¨t_ßm∂e
 + start_sample;

2215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2216 "íd_ßm∂e:%ui", 
åak
->
íd_ßm∂e
);

2218  
NGX_OK
;

2221 
found
:

2223 i‡(
°¨t
) {

2224 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, cou¡ - 
ª°
);

2225 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2226 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

2227 
åak
->
°¨t_ßm∂e
 = start_sample;

2229 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2231 
åak
->
°¨t_ßm∂e
, 
cou¡
 - 
ª°
);

2234 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, 
ª°
);

2235 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2236 
åak
->
time_to_ßm∂e_íåõs
 -
íåõs
 - 1;

2237 
åak
->
íd_ßm∂e
 =Åøk->
°¨t_ßm∂e
 + start_sample;

2239 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2241 
åak
->
íd_ßm∂e
, 
ª°
);

2244  
NGX_OK
;

2245 
	}
}

2249 
u_ch¨
 
	msize
[4];

2250 
u_ch¨
 
	m«me
[4];

2251 
u_ch¨
 
	mvîsi⁄
[1];

2252 
u_ch¨
 
	mÊags
[3];

2253 
u_ch¨
 
	míåõs
[4];

2254 } 
	tngx_hâp_mp4_°ss_©om_t
;

2257 
ngx_öt_t


2258 
	$ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2260 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2261 
uöt32_t
 
íåõs
;

2262 
ngx_buf_t
 *
©om
, *
d©a
;

2263 
ngx_hâp_mp4_åak_t
 *
åak
;

2264 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2268 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stssátom");

2270 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2271 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om_hódî
;

2272 
	`ngx_mp4_£t_©om_«me
(
°ss_©om
, 's', 't', 's', 's');

2274 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
Ë> 
©om_d©a_size
) {

2275 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2276 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2277  
NGX_ERROR
;

2280 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ss_©om
->entries);

2282 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2283 "syn¯ßm∂êíåõs:%uD", 
íåõs
);

2285 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2286 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2288 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_hâp_mp4_°ss_©om_t
);

2290 
©om
 = &
åak
->
°ss_©om_buf
;

2291 
©om
->
ãmp‹¨y
 = 1;

2292 
©om
->
pos
 = 
©om_hódî
;

2293 
©om
->
œ°
 = 
©om_èbÀ
;

2295 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
)

2296 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2298 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2299 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2300  
NGX_ERROR
;

2303 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2305 
d©a
 = &
åak
->
°ss_d©a_buf
;

2306 
d©a
->
ãmp‹¨y
 = 1;

2307 
d©a
->
pos
 = 
©om_èbÀ
;

2308 
d©a
->
œ°
 = 
©om_íd
;

2310 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
 = 
©om
;

2311 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
d©a
;

2313 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2315  
NGX_OK
;

2316 
	}
}

2319 
ngx_öt_t


2320 
	$ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2321 
ngx_hâp_mp4_åak_t
 *
åak
)

2323 
size_t
 
©om_size
;

2324 
uöt32_t
 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2325 
ngx_buf_t
 *
©om
, *
d©a
;

2326 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2334 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2337 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2339 i‡(
d©a
 =
NULL
) {

2340  
NGX_OK
;

2343 
	`ngx_hâp_mp4_¸›_°ss_d©a
(
mp4
, 
åak
, 1);

2344 
	`ngx_hâp_mp4_¸›_°ss_d©a
(
mp4
, 
åak
, 0);

2346 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2347 "syn¯ßm∂êíåõs:%uD", 
åak
->
sync_ßm∂es_íåõs
);

2349 i‡(
åak
->
sync_ßm∂es_íåõs
) {

2350 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2351 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2353 
°¨t_ßm∂e
 = 
åak
->start_sample;

2355 
íåy
 < 
íd
) {

2356 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2357 
ßm∂e
 -
°¨t_ßm∂e
;

2358 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
ßm∂e
);

2359 
íåy
++;

2363 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
NULL
;

2366 
©om_size
 = (
ngx_hâp_mp4_°ss_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2367 
åak
->
size
 +
©om_size
;

2369 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
;

2370 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om
->
pos
;

2372 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
size
, 
©om_size
);

2373 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
íåõs
, 
åak
->
sync_ßm∂es_íåõs
);

2375  
NGX_OK
;

2376 
	}
}

2380 
	$ngx_hâp_mp4_¸›_°ss_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2381 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2383 
uöt32_t
 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2384 
ngx_buf_t
 *
d©a
;

2385 
ngx_uöt_t
 
íåõs
;

2389 i‡(
°¨t
) {

2390 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2392 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2393 "mp4 sts†¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2395 } i‡(
mp4
->
Àngth
) {

2396 
°¨t_ßm∂e
 = 
åak
->
íd_ßm∂e
 + 1;

2398 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2399 "mp4 sts†¸›Énd_ßm∂e:%uD", 
°¨t_ßm∂e
);

2405 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2407 
íåõs
 = 
åak
->
sync_ßm∂es_íåõs
;

2408 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2409 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2411 
íåy
 < 
íd
) {

2412 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2414 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2415 "sync:%uD", 
ßm∂e
);

2417 i‡(
ßm∂e
 >
°¨t_ßm∂e
) {

2418 
found
;

2421 
íåõs
--;

2422 
íåy
++;

2425 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2428 
found
:

2430 i‡(
°¨t
) {

2431 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2432 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2435 
d©a
->
œ°
 = (
u_ch¨
 *Ë
íåy
;

2436 
åak
->
sync_ßm∂es_íåõs
 -
íåõs
;

2438 
	}
}

2442 
u_ch¨
 
	msize
[4];

2443 
u_ch¨
 
	m«me
[4];

2444 
u_ch¨
 
	mvîsi⁄
[1];

2445 
u_ch¨
 
	mÊags
[3];

2446 
u_ch¨
 
	míåõs
[4];

2447 } 
	tngx_mp4_˘ts_©om_t
;

2450 
u_ch¨
 
	mcou¡
[4];

2451 
u_ch¨
 
	moff£t
[4];

2452 } 
	tngx_mp4_˘ts_íåy_t
;

2455 
ngx_öt_t


2456 
	$ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2458 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2459 
uöt32_t
 
íåõs
;

2460 
ngx_buf_t
 *
©om
, *
d©a
;

2461 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2462 
ngx_hâp_mp4_åak_t
 *
åak
;

2466 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 cttsátom");

2468 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2469 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om_hódî
;

2470 
	`ngx_mp4_£t_©om_«me
(
˘ts_©om
, 'c', 't', 't', 's');

2472 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
Ë> 
©om_d©a_size
) {

2473 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2474 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2475  
NGX_ERROR
;

2478 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
˘ts_©om
->entries);

2480 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2481 "composôi⁄ off£àíåõs:%uD", 
íåõs
);

2483 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2484 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2486 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_˘ts_©om_t
);

2488 
©om
 = &
åak
->
˘ts_©om_buf
;

2489 
©om
->
ãmp‹¨y
 = 1;

2490 
©om
->
pos
 = 
©om_hódî
;

2491 
©om
->
œ°
 = 
©om_èbÀ
;

2493 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
)

2494 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
Ë> 
©om_d©a_size
)

2496 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2497 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2498  
NGX_ERROR
;

2501 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
);

2503 
d©a
 = &
åak
->
˘ts_d©a_buf
;

2504 
d©a
->
ãmp‹¨y
 = 1;

2505 
d©a
->
pos
 = 
©om_èbÀ
;

2506 
d©a
->
œ°
 = 
©om_íd
;

2508 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
©om
;

2509 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
d©a
;

2511 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2513  
NGX_OK
;

2514 
	}
}

2518 
	$ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2519 
ngx_hâp_mp4_åak_t
 *
åak
)

2521 
size_t
 
©om_size
;

2522 
ngx_buf_t
 *
©om
, *
d©a
;

2523 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2531 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2534 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2536 i‡(
d©a
 =
NULL
) {

2540 
	`ngx_hâp_mp4_¸›_˘ts_d©a
(
mp4
, 
åak
, 1);

2541 
	`ngx_hâp_mp4_¸›_˘ts_d©a
(
mp4
, 
åak
, 0);

2543 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2545 
åak
->
composôi⁄_off£t_íåõs
);

2547 i‡(
åak
->
composôi⁄_off£t_íåõs
 == 0) {

2548 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
NULL
;

2549 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
NULL
;

2553 
©om_size
 = (
ngx_mp4_˘ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2554 
åak
->
size
 +
©om_size
;

2556 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
;

2557 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om
->
pos
;

2559 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
size
, 
©om_size
);

2560 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
íåõs
, 
åak
->
composôi⁄_off£t_íåõs
);

2563 
	}
}

2567 
	$ngx_hâp_mp4_¸›_˘ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2568 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2570 
uöt32_t
 
cou¡
, 
°¨t_ßm∂e
, 
ª°
;

2571 
ngx_buf_t
 *
d©a
;

2572 
ngx_uöt_t
 
íåõs
;

2573 
ngx_mp4_˘ts_íåy_t
 *
íåy
, *
íd
;

2577 i‡(
°¨t
) {

2578 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2580 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2581 "mp4 câ†¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2583 } i‡(
mp4
->
Àngth
) {

2584 
°¨t_ßm∂e
 = 
åak
->
íd_ßm∂e
 -Årak->start_sample + 1;

2586 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2587 "mp4 câ†¸›Énd_ßm∂e:%uD", 
°¨t_ßm∂e
);

2593 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2595 
íåõs
 = 
åak
->
composôi⁄_off£t_íåõs
;

2596 
íåy
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
pos
;

2597 
íd
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
œ°
;

2599 
íåy
 < 
íd
) {

2600 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2602 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2604 
°¨t_ßm∂e
, 
cou¡
, 
	`ngx_mp4_gë_32vÆue
(
íåy
->
off£t
));

2606 i‡(
°¨t_ßm∂e
 <
cou¡
) {

2607 
ª°
 = 
°¨t_ßm∂e
 - 1;

2608 
found
;

2611 
°¨t_ßm∂e
 -
cou¡
;

2612 
íåõs
--;

2613 
íåy
++;

2616 i‡(
°¨t
) {

2617 
d©a
->
pos
 = (
u_ch¨
 *Ë
íd
;

2618 
åak
->
composôi⁄_off£t_íåõs
 = 0;

2623 
found
:

2625 i‡(
°¨t
) {

2626 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, cou¡ - 
ª°
);

2627 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2628 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2631 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, 
ª°
);

2632 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2633 
åak
->
composôi⁄_off£t_íåõs
 -
íåõs
 - 1;

2635 
	}
}

2639 
u_ch¨
 
	msize
[4];

2640 
u_ch¨
 
	m«me
[4];

2641 
u_ch¨
 
	mvîsi⁄
[1];

2642 
u_ch¨
 
	mÊags
[3];

2643 
u_ch¨
 
	míåõs
[4];

2644 } 
	tngx_mp4_°sc_©om_t
;

2647 
ngx_öt_t


2648 
	$ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2650 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2651 
uöt32_t
 
íåõs
;

2652 
ngx_buf_t
 *
©om
, *
d©a
;

2653 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2654 
ngx_hâp_mp4_åak_t
 *
åak
;

2658 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stscátom");

2660 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2661 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om_hódî
;

2662 
	`ngx_mp4_£t_©om_«me
(
°sc_©om
, 's', 't', 's', 'c');

2664 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
Ë> 
©om_d©a_size
) {

2665 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2666 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2667  
NGX_ERROR
;

2670 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sc_©om
->entries);

2672 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2673 "ßm∂e-to-chunkÉ¡rõs:%uD", 
íåõs
);

2675 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
)

2676 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
Ë> 
©om_d©a_size
)

2678 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2679 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2680  
NGX_ERROR
;

2683 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sc_©om_t
);

2684 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2686 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2687 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2689 
©om
 = &
åak
->
°sc_©om_buf
;

2690 
©om
->
ãmp‹¨y
 = 1;

2691 
©om
->
pos
 = 
©om_hódî
;

2692 
©om
->
œ°
 = 
©om_èbÀ
;

2694 
d©a
 = &
åak
->
°sc_d©a_buf
;

2695 
d©a
->
ãmp‹¨y
 = 1;

2696 
d©a
->
pos
 = 
©om_èbÀ
;

2697 
d©a
->
œ°
 = 
©om_íd
;

2699 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
 = 
©om
;

2700 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
 = 
d©a
;

2702 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2704  
NGX_OK
;

2705 
	}
}

2708 
ngx_öt_t


2709 
	$ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2710 
ngx_hâp_mp4_åak_t
 *
åak
)

2712 
size_t
 
©om_size
;

2713 
uöt32_t
 
chunk
;

2714 
ngx_buf_t
 *
©om
, *
d©a
;

2715 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2716 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
íd
;

2724 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2727 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2729 i‡(
d©a
 =
NULL
) {

2730 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2732 
mp4
->
fûe
.
«me
.
d©a
);

2733  
NGX_ERROR
;

2736 i‡(
åak
->
ßm∂e_to_chunk_íåõs
 == 0) {

2737 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2739 
mp4
->
fûe
.
«me
.
d©a
);

2740  
NGX_ERROR
;

2743 i‡(
	`ngx_hâp_mp4_¸›_°sc_d©a
(
mp4
, 
åak
, 1Ë!
NGX_OK
) {

2744  
NGX_ERROR
;

2747 i‡(
	`ngx_hâp_mp4_¸›_°sc_d©a
(
mp4
, 
åak
, 0Ë!
NGX_OK
) {

2748  
NGX_ERROR
;

2751 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2753 
åak
->
ßm∂e_to_chunk_íåõs
);

2755 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2756 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2758 
íåy
 < 
íd
) {

2759 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2760 
chunk
 -
åak
->
°¨t_chunk
;

2761 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, chunk);

2762 
íåy
++;

2765 
©om_size
 = (
ngx_mp4_°sc_©om_t
)

2766 + 
åak
->
ßm∂e_to_chunk_íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2768 
åak
->
size
 +
©om_size
;

2770 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
;

2771 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om
->
pos
;

2773 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
size
, 
©om_size
);

2774 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
íåõs
, 
åak
->
ßm∂e_to_chunk_íåõs
);

2776  
NGX_OK
;

2777 
	}
}

2780 
ngx_öt_t


2781 
	$ngx_hâp_mp4_¸›_°sc_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2782 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2784 
uöt32_t
 
°¨t_ßm∂e
, 
chunk
, 
ßm∂es
, 
id
, 
√xt_chunk
, 
n
,

2785 
¥ev_ßm∂es
;

2786 
ngx_buf_t
 *
d©a
, *
buf
;

2787 
ngx_uöt_t
 
íåõs
, 
èrgë_chunk
, 
chunk_ßm∂es
;

2788 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
íd
, *
fú°
;

2790 
íåõs
 = 
åak
->
ßm∂e_to_chunk_íåõs
 - 1;

2792 i‡(
°¨t
) {

2793 
°¨t_ßm∂e
 = (
uöt32_t
Ë
åak
->start_sample;

2795 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2796 "mp4 sts¯¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2798 } i‡(
mp4
->
Àngth
) {

2799 
°¨t_ßm∂e
 = (
uöt32_t
Ë(
åak
->
íd_ßm∂e
 -Årak->start_sample);

2800 
ßm∂es
 = 0;

2802 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_START
].
buf
;

2804 i‡(
d©a
) {

2805 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2806 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2807 
íåõs
--;

2809 i‡(
ßm∂es
 > 
°¨t_ßm∂e
) {

2810 
ßm∂es
 = 
°¨t_ßm∂e
;

2811 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, samples);

2814 
°¨t_ßm∂e
 -
ßm∂es
;

2817 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2819 
°¨t_ßm∂e
, 
ßm∂es
);

2822  
NGX_OK
;

2825 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2827 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2828 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2830 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2831 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2832 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2833 
¥ev_ßm∂es
 = 0;

2834 
íåy
++;

2836 
íåy
 < 
íd
) {

2838 
√xt_chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->
chunk
);

2840 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2843 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
, 
id
);

2845 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2847 i‡(
°¨t_ßm∂e
 < 
n
) {

2848 
found
;

2851 
°¨t_ßm∂e
 -
n
;

2853 
¥ev_ßm∂es
 = 
ßm∂es
;

2854 
chunk
 = 
√xt_chunk
;

2855 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2856 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2857 
íåõs
--;

2858 
íåy
++;

2861 
√xt_chunk
 = 
åak
->
chunks
 + 1;

2863 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2865 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
);

2867 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2869 i‡(
°¨t_ßm∂e
 > 
n
) {

2870 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2872 
°¨t
 ? "°¨t" : "íd", 
mp4
->
fûe
.
«me
.
d©a
);

2873  
NGX_ERROR
;

2876 
found
:

2878 
íåõs
++;

2879 
íåy
--;

2881 i‡(
ßm∂es
 == 0) {

2882 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2884 
mp4
->
fûe
.
«me
.
d©a
);

2885  
NGX_ERROR
;

2888 
èrgë_chunk
 = 
chunk
 - 1;

2889 
èrgë_chunk
 +
°¨t_ßm∂e
 / 
ßm∂es
;

2890 
chunk_ßm∂es
 = 
°¨t_ßm∂e
 % 
ßm∂es
;

2892 i‡(
°¨t
) {

2893 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2895 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2896 
åak
->
°¨t_chunk
 = 
èrgë_chunk
;

2897 
åak
->
°¨t_chunk_ßm∂es
 = 
chunk_ßm∂es
;

2899 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 
åak
->
°¨t_chunk
 + 1);

2901 
ßm∂es
 -
chunk_ßm∂es
;

2903 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2905 
åak
->
°¨t_chunk
,Åøk->
°¨t_chunk_ßm∂es
);

2908 i‡(
°¨t_ßm∂e
) {

2909 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2910 
åak
->
ßm∂e_to_chunk_íåõs
 -
íåõs
 - 1;

2911 
åak
->
íd_chunk_ßm∂es
 = 
ßm∂es
;

2914 
d©a
->
œ°
 = (
u_ch¨
 *Ë
íåy
;

2915 
åak
->
ßm∂e_to_chunk_íåõs
 -
íåõs
;

2916 
åak
->
íd_chunk_ßm∂es
 = 
¥ev_ßm∂es
;

2919 i‡(
chunk_ßm∂es
) {

2920 
åak
->
íd_chunk
 = 
èrgë_chunk
 + 1;

2921 
åak
->
íd_chunk_ßm∂es
 = 
chunk_ßm∂es
;

2924 
åak
->
íd_chunk
 = 
èrgë_chunk
;

2927 
ßm∂es
 = 
chunk_ßm∂es
;

2928 
√xt_chunk
 = 
chunk
 + 1;

2930 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2932 
åak
->
íd_chunk
,Åøk->
íd_chunk_ßm∂es
);

2935 i‡(
chunk_ßm∂es
 && 
√xt_chunk
 - 
èrgë_chunk
 == 2) {

2937 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, samples);

2939 } i‡(
chunk_ßm∂es
 && 
°¨t
) {

2941 
fú°
 = &
åak
->
°sc_°¨t_chunk_íåy
;

2942 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 1);

2943 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, samples);

2944 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2946 
buf
 = &
åak
->
°sc_°¨t_chunk_buf
;

2947 
buf
->
ãmp‹¨y
 = 1;

2948 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2949 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2951 
åak
->
out
[
NGX_HTTP_MP4_STSC_START
].
buf
 = buf;

2953 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 
åak
->
°¨t_chunk
 + 2);

2955 
åak
->
ßm∂e_to_chunk_íåõs
++;

2957 } i‡(
chunk_ßm∂es
) {

2959 
fú°
 = &
åak
->
°sc_íd_chunk_íåy
;

2960 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
);

2961 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, samples);

2962 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2964 
buf
 = &
åak
->
°sc_íd_chunk_buf
;

2965 
buf
->
ãmp‹¨y
 = 1;

2966 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2967 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2969 
åak
->
out
[
NGX_HTTP_MP4_STSC_END
].
buf
 = buf;

2971 
åak
->
ßm∂e_to_chunk_íåõs
++;

2974  
NGX_OK
;

2975 
	}
}

2979 
u_ch¨
 
	msize
[4];

2980 
u_ch¨
 
	m«me
[4];

2981 
u_ch¨
 
	mvîsi⁄
[1];

2982 
u_ch¨
 
	mÊags
[3];

2983 
u_ch¨
 
	munif‹m_size
[4];

2984 
u_ch¨
 
	míåõs
[4];

2985 } 
	tngx_mp4_°sz_©om_t
;

2988 
ngx_öt_t


2989 
	$ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2991 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2992 
size_t
 
©om_size
;

2993 
uöt32_t
 
íåõs
, 
size
;

2994 
ngx_buf_t
 *
©om
, *
d©a
;

2995 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2996 
ngx_hâp_mp4_åak_t
 *
åak
;

3000 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stszátom");

3002 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3003 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om_hódî
;

3004 
	`ngx_mp4_£t_©om_«me
(
°sz_©om
, 's', 't', 's', 'z');

3006 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
Ë> 
©om_d©a_size
) {

3007 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3008 "\"%s\" mp4 stszátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3009  
NGX_ERROR
;

3012 
size
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->
unif‹m_size
);

3013 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->entries);

3015 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3016 "ßm∂êunif‹m size:%uD,É¡rõs:%uD", 
size
, 
íåõs
);

3018 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3019 
åak
->
ßm∂e_sizes_íåõs
 = 
íåõs
;

3021 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sz_©om_t
);

3023 
©om
 = &
åak
->
°sz_©om_buf
;

3024 
©om
->
ãmp‹¨y
 = 1;

3025 
©om
->
pos
 = 
©om_hódî
;

3026 
©om
->
œ°
 = 
©om_èbÀ
;

3028 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
 = 
©om
;

3030 i‡(
size
 == 0) {

3031 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
)

3032 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

3034 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3036 
mp4
->
fûe
.
«me
.
d©a
);

3037  
NGX_ERROR
;

3040 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

3042 
d©a
 = &
åak
->
°sz_d©a_buf
;

3043 
d©a
->
ãmp‹¨y
 = 1;

3044 
d©a
->
pos
 = 
©om_èbÀ
;

3045 
d©a
->
œ°
 = 
©om_íd
;

3047 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
 = 
d©a
;

3052 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

3053 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

3054 
åak
->
size
 +
©om_size
;

3057 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3059  
NGX_OK
;

3060 
	}
}

3063 
ngx_öt_t


3064 
	$ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3065 
ngx_hâp_mp4_åak_t
 *
åak
)

3067 
size_t
 
©om_size
;

3068 
uöt32_t
 *
pos
, *
íd
, 
íåõs
;

3069 
ngx_buf_t
 *
©om
, *
d©a
;

3070 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

3078 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3081 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
;

3083 i‡(
d©a
) {

3084 
íåõs
 = 
åak
->
ßm∂e_sizes_íåõs
;

3086 i‡(
åak
->
°¨t_ßm∂e
 > 
íåõs
) {

3087 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3089 
mp4
->
fûe
.
«me
.
d©a
);

3090  
NGX_ERROR
;

3093 
íåõs
 -
åak
->
°¨t_ßm∂e
;

3094 
d©a
->
pos
 +
åak
->
°¨t_ßm∂e
 * (
uöt32_t
);

3095 
íd
 = (
uöt32_t
 *Ë
d©a
->
pos
;

3097 
pos
 = 
íd
 - 
åak
->
°¨t_chunk_ßm∂es
;Öos <Énd;Öos++) {

3098 
åak
->
°¨t_chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

3101 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3103 
åak
->
°¨t_chunk_ßm∂es_size
);

3105 i‡(
mp4
->
Àngth
) {

3106 i‡(
åak
->
íd_ßm∂e
 -Åøk->
°¨t_ßm∂e
 > 
íåõs
) {

3107 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3109 
mp4
->
fûe
.
«me
.
d©a
);

3110  
NGX_ERROR
;

3113 
íåõs
 = 
åak
->
íd_ßm∂e
 -Åøk->
°¨t_ßm∂e
;

3114 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt32_t
);

3115 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

3117 
pos
 = 
íd
 - 
åak
->
íd_chunk_ßm∂es
;Öos <Énd;Öos++) {

3118 
åak
->
íd_chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

3121 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3123 
åak
->
íd_chunk_ßm∂es_size
);

3126 
©om_size
 = (
ngx_mp4_°sz_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3127 
åak
->
size
 +
©om_size
;

3129 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
;

3130 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om
->
pos
;

3132 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
size
, 
©om_size
);

3133 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
íåõs
,Éntries);

3136  
NGX_OK
;

3137 
	}
}

3141 
u_ch¨
 
	msize
[4];

3142 
u_ch¨
 
	m«me
[4];

3143 
u_ch¨
 
	mvîsi⁄
[1];

3144 
u_ch¨
 
	mÊags
[3];

3145 
u_ch¨
 
	míåõs
[4];

3146 } 
	tngx_mp4_°co_©om_t
;

3149 
ngx_öt_t


3150 
	$ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

3152 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

3153 
uöt32_t
 
íåõs
;

3154 
ngx_buf_t
 *
©om
, *
d©a
;

3155 
ngx_mp4_°co_©om_t
 *
°co_©om
;

3156 
ngx_hâp_mp4_åak_t
 *
åak
;

3160 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stcoátom");

3162 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3163 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om_hódî
;

3164 
	`ngx_mp4_£t_©om_«me
(
°co_©om
, 's', 't', 'c', 'o');

3166 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
Ë> 
©om_d©a_size
) {

3167 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3168 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3169  
NGX_ERROR
;

3172 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°co_©om
->entries);

3174 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

3176 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
)

3177 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

3179 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3180 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3181  
NGX_ERROR
;

3184 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°co_©om_t
);

3185 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

3187 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3188 
åak
->
chunks
 = 
íåõs
;

3190 
©om
 = &
åak
->
°co_©om_buf
;

3191 
©om
->
ãmp‹¨y
 = 1;

3192 
©om
->
pos
 = 
©om_hódî
;

3193 
©om
->
œ°
 = 
©om_èbÀ
;

3195 
d©a
 = &
åak
->
°co_d©a_buf
;

3196 
d©a
->
ãmp‹¨y
 = 1;

3197 
d©a
->
pos
 = 
©om_èbÀ
;

3198 
d©a
->
œ°
 = 
©om_íd
;

3200 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
 = 
©om
;

3201 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
 = 
d©a
;

3203 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3205  
NGX_OK
;

3206 
	}
}

3209 
ngx_öt_t


3210 
	$ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3211 
ngx_hâp_mp4_åak_t
 *
åak
)

3213 
size_t
 
©om_size
;

3214 
uöt32_t
 
íåõs
;

3215 
ngx_buf_t
 *
©om
, *
d©a
;

3216 
ngx_mp4_°co_©om_t
 *
°co_©om
;

3224 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3227 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

3229 i‡(
d©a
 =
NULL
) {

3230 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3232 
mp4
->
fûe
.
«me
.
d©a
);

3233  
NGX_ERROR
;

3236 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

3237 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3239 
mp4
->
fûe
.
«me
.
d©a
);

3240  
NGX_ERROR
;

3243 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt32_t
);

3245 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_32vÆue
(
d©a
->
pos
);

3246 
åak
->
°¨t_off£t
 +åak->
°¨t_chunk_ßm∂es_size
;

3247 
	`ngx_mp4_£t_32vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

3249 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3250 "°¨àchunk off£t:%O", 
åak
->
°¨t_off£t
);

3252 i‡(
mp4
->
Àngth
) {

3254 i‡(
åak
->
íd_chunk
 >Åøk->
chunks
) {

3255 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3257 
mp4
->
fûe
.
«me
.
d©a
);

3258  
NGX_ERROR
;

3261 
íåõs
 = 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
;

3262 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt32_t
);

3264 i‡(
íåõs
) {

3265 
åak
->
íd_off£t
 =

3266 
	`ngx_mp4_gë_32vÆue
(
d©a
->
œ°
 - (
uöt32_t
));

3267 
åak
->
íd_off£t
 +åak->
íd_chunk_ßm∂es_size
;

3269 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3270 "íd chunk off£t:%O", 
åak
->
íd_off£t
);

3274 
íåõs
 = 
åak
->
chunks
 -Åøk->
°¨t_chunk
;

3275 
åak
->
íd_off£t
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
;

3278 i‡(
íåõs
 == 0) {

3279 
åak
->
°¨t_off£t
 = 
mp4
->
íd
;

3280 
åak
->
íd_off£t
 = 0;

3283 
©om_size
 = (
ngx_mp4_°co_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3284 
åak
->
size
 +
©om_size
;

3286 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
;

3287 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om
->
pos
;

3289 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
size
, 
©om_size
);

3290 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
íåõs
,Éntries);

3292  
NGX_OK
;

3293 
	}
}

3297 
	$ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3298 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
)

3300 
uöt32_t
 
off£t
, *
íåy
, *
íd
;

3301 
ngx_buf_t
 *
d©a
;

3308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3311 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

3312 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

3313 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

3315 
íåy
 < 
íd
) {

3316 
off£t
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

3317 
off£t
 +
adju°mít
;

3318 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
off£t
);

3319 
íåy
++;

3321 
	}
}

3325 
u_ch¨
 
	msize
[4];

3326 
u_ch¨
 
	m«me
[4];

3327 
u_ch¨
 
	mvîsi⁄
[1];

3328 
u_ch¨
 
	mÊags
[3];

3329 
u_ch¨
 
	míåõs
[4];

3330 } 
	tngx_mp4_co64_©om_t
;

3333 
ngx_öt_t


3334 
	$ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

3336 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

3337 
uöt32_t
 
íåõs
;

3338 
ngx_buf_t
 *
©om
, *
d©a
;

3339 
ngx_mp4_co64_©om_t
 *
co64_©om
;

3340 
ngx_hâp_mp4_åak_t
 *
åak
;

3344 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 co64átom");

3346 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3347 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om_hódî
;

3348 
	`ngx_mp4_£t_©om_«me
(
co64_©om
, 'c', 'o', '6', '4');

3350 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
Ë> 
©om_d©a_size
) {

3351 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3352 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3353  
NGX_ERROR
;

3356 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
co64_©om
->entries);

3358 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

3360 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
)

3361 + 
íåõs
 * (
uöt64_t
Ë> 
©om_d©a_size
)

3363 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3364 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3365  
NGX_ERROR
;

3368 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_co64_©om_t
);

3369 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt64_t
);

3371 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3372 
åak
->
chunks
 = 
íåõs
;

3374 
©om
 = &
åak
->
co64_©om_buf
;

3375 
©om
->
ãmp‹¨y
 = 1;

3376 
©om
->
pos
 = 
©om_hódî
;

3377 
©om
->
œ°
 = 
©om_èbÀ
;

3379 
d©a
 = &
åak
->
co64_d©a_buf
;

3380 
d©a
->
ãmp‹¨y
 = 1;

3381 
d©a
->
pos
 = 
©om_èbÀ
;

3382 
d©a
->
œ°
 = 
©om_íd
;

3384 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
 = 
©om
;

3385 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
 = 
d©a
;

3387 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3389  
NGX_OK
;

3390 
	}
}

3393 
ngx_öt_t


3394 
	$ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3395 
ngx_hâp_mp4_åak_t
 *
åak
)

3397 
size_t
 
©om_size
;

3398 
uöt64_t
 
íåõs
;

3399 
ngx_buf_t
 *
©om
, *
d©a
;

3400 
ngx_mp4_co64_©om_t
 *
co64_©om
;

3408 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3411 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

3413 i‡(
d©a
 =
NULL
) {

3414 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3416 
mp4
->
fûe
.
«me
.
d©a
);

3417  
NGX_ERROR
;

3420 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

3421 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3423 
mp4
->
fûe
.
«me
.
d©a
);

3424  
NGX_ERROR
;

3427 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt64_t
);

3429 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_64vÆue
(
d©a
->
pos
);

3430 
åak
->
°¨t_off£t
 +åak->
°¨t_chunk_ßm∂es_size
;

3431 
	`ngx_mp4_£t_64vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

3433 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3434 "°¨àchunk off£t:%O", 
åak
->
°¨t_off£t
);

3436 i‡(
mp4
->
Àngth
) {

3438 i‡(
åak
->
íd_chunk
 >Åøk->
chunks
) {

3439 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3441 
mp4
->
fûe
.
«me
.
d©a
);

3442  
NGX_ERROR
;

3445 
íåõs
 = 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
;

3446 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt64_t
);

3448 i‡(
íåõs
) {

3449 
åak
->
íd_off£t
 =

3450 
	`ngx_mp4_gë_64vÆue
(
d©a
->
œ°
 - (
uöt64_t
));

3451 
åak
->
íd_off£t
 +åak->
íd_chunk_ßm∂es_size
;

3453 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3454 "íd chunk off£t:%O", 
åak
->
íd_off£t
);

3458 
íåõs
 = 
åak
->
chunks
 -Åøk->
°¨t_chunk
;

3459 
åak
->
íd_off£t
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
;

3462 i‡(
íåõs
 == 0) {

3463 
åak
->
°¨t_off£t
 = 
mp4
->
íd
;

3464 
åak
->
íd_off£t
 = 0;

3467 
©om_size
 = (
ngx_mp4_co64_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3468 
åak
->
size
 +
©om_size
;

3470 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
;

3471 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om
->
pos
;

3473 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
size
, 
©om_size
);

3474 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
íåõs
,Éntries);

3476  
NGX_OK
;

3477 
	}
}

3481 
	$ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3482 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
)

3484 
uöt64_t
 
off£t
, *
íåy
, *
íd
;

3485 
ngx_buf_t
 *
d©a
;

3492 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3495 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

3496 
íåy
 = (
uöt64_t
 *Ë
d©a
->
pos
;

3497 
íd
 = (
uöt64_t
 *Ë
d©a
->
œ°
;

3499 
íåy
 < 
íd
) {

3500 
off£t
 = 
	`ngx_mp4_gë_64vÆue
(
íåy
);

3501 
off£t
 +
adju°mít
;

3502 
	`ngx_mp4_£t_64vÆue
(
íåy
, 
off£t
);

3503 
íåy
++;

3505 
	}
}

3509 
	$ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3511 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3513 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3514 
˛cf
->
h™dÀr
 = 
ngx_hâp_mp4_h™dÀr
;

3516  
NGX_CONF_OK
;

3517 
	}
}

3521 
	$ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3523 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

3525 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_mp4_c⁄f_t
));

3526 i‡(
c⁄f
 =
NULL
) {

3527  
NULL
;

3530 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3531 
c⁄f
->
max_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3533  
c⁄f
;

3534 
	}
}

3538 
	$ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3540 
ngx_hâp_mp4_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3541 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
 = 
chûd
;

3543 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size, 512 * 1024);

3544 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_buf„r_size
, 
¥ev
->max_buffer_size,

3547  
NGX_CONF_OK
;

3548 
	}
}

	@src/http/modules/ngx_http_not_modified_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_uöt_t
 
ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_uöt_t
 
ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_èbÀ_ñt_t
 *
hódî
, 
ngx_uöt_t
 
wók
);

17 
ngx_öt_t
 
ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

20 
ngx_hâp_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
 = {

21 
NULL
,

22 
ngx_hâp_nŸ_modifõd_fûãr_öô
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL
,

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
,

38 
NULL
,

39 
NGX_HTTP_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_öt_t


55 
	$ngx_hâp_nŸ_modifõd_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

57 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


58 || 
r
 !r->
maö


59 || 
r
->
dißbÀ_nŸ_modifõd
)

61  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

64 i‡(
r
->
hódîs_ö
.
if_unmodifõd_sö˚


65 && !
	`ngx_hâp_ã°_if_unmodifõd
(
r
))

67  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

68 
NGX_HTTP_PRECONDITION_FAILED
);

71 i‡(
r
->
hódîs_ö
.
if_m©ch


72 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_m©ch
, 0))

74  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

75 
NGX_HTTP_PRECONDITION_FAILED
);

78 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚
 ||Ñ->hódîs_ö.
if_n⁄e_m©ch
) {

80 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚


81 && 
	`ngx_hâp_ã°_if_modifõd
(
r
))

83  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

86 i‡(
r
->
hódîs_ö
.
if_n⁄e_m©ch


87 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_n⁄e_m©ch
, 1))

89  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

94 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_NOT_MODIFIED
;

95 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

96 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

97 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

98 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

100 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög
) {

101 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

102 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

105  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

109 
	}
}

112 
ngx_uöt_t


113 
	$ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
)

115 
time_t
 
iums
;

117 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

121 
iums
 = 
	`ngx_∑r£_hâp_time
(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
d©a
,

122 
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
Àn
);

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

125 "hâ∞iums:%TÜm:%T", 
iums
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

127 i‡(
iums
 >
r
->
hódîs_out
.
œ°_modifõd_time
) {

132 
	}
}

135 
ngx_uöt_t


136 
	$ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
)

138 
time_t
 
ims
;

139 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

141 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

145 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_OFF
) {

151 
ims
 = 
	`ngx_∑r£_hâp_time
(
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
d©a
,

152 
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
Àn
);

154 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

155 "hâ∞ims:%TÜm:%T", 
ims
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

157 i‡(
ims
 =
r
->
hódîs_out
.
œ°_modifõd_time
) {

161 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_EXACT


162 || 
ims
 < 
r
->
hódîs_out
.
œ°_modifõd_time
)

168 
	}
}

171 
ngx_uöt_t


172 
	$ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
hódî
,

173 
ngx_uöt_t
 
wók
)

175 
u_ch¨
 *
°¨t
, *
íd
, 
ch
;

176 
ngx_°r_t
 
ëag
, *
li°
;

178 
li°
 = &
hódî
->
vÆue
;

180 i‡(
li°
->
Àn
 =1 &&Üi°->
d©a
[0] == '*') {

184 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

188 
ëag
 = 
r
->
hódîs_out
.ëag->
vÆue
;

190 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

191 "hâ∞im:\"%V\"Éèg:%V", 
li°
, &
ëag
);

193 i‡(
wók


194 && 
ëag
.
Àn
 > 2

195 && 
ëag
.
d©a
[0] == 'W'

196 && 
ëag
.
d©a
[1] == '/')

198 
ëag
.
Àn
 -= 2;

199 
ëag
.
d©a
 += 2;

202 
°¨t
 = 
li°
->
d©a
;

203 
íd
 = 
li°
->
d©a
 +Üi°->
Àn
;

205 
°¨t
 < 
íd
) {

207 i‡(
wók


208 && 
íd
 - 
°¨t
 > 2

209 && 
°¨t
[0] == 'W'

210 && 
°¨t
[1] == '/')

212 
°¨t
 += 2;

215 i‡(
ëag
.
Àn
 > (
size_t
Ë(
íd
 - 
°¨t
)) {

219 i‡(
	`ngx_°∫cmp
(
°¨t
, 
ëag
.
d©a
,Éèg.
Àn
) != 0) {

220 
skù
;

223 
°¨t
 +
ëag
.
Àn
;

225 
°¨t
 < 
íd
) {

226 
ch
 = *
°¨t
;

228 i‡(
ch
 == ' ' || ch == '\t') {

229 
°¨t
++;

236 i‡(
°¨t
 =
íd
 || *start == ',') {

240 
skù
:

242 
°¨t
 < 
íd
 && *start != ',') { start++; }

243 
°¨t
 < 
íd
) {

244 
ch
 = *
°¨t
;

246 i‡(
ch
 == ' ' || ch == '\t' || ch == ',') {

247 
°¨t
++;

256 
	}
}

259 
ngx_öt_t


260 
	$ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

262 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

263 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_nŸ_modifõd_hódî_fûãr
;

265  
NGX_OK
;

266 
	}
}

	@src/http/modules/ngx_http_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 
	mˇches
;

15 } 
	tngx_hâp_¥oxy_maö_c⁄f_t
;

18 
ngx_hâp_¥oxy_ªwrôe_s
 
	tngx_hâp_¥oxy_ªwrôe_t
;

20 
	$ngx_öt_t
 (*
	tngx_hâp_¥oxy_ªwrôe_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

21 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tsize_t
 
	t¥efix
, size_à
	tÀn
,

22 
	tngx_hâp_¥oxy_ªwrôe_t
 *
	t¥
);

24 
	sngx_hâp_¥oxy_ªwrôe_s
 {

25 
ngx_hâp_¥oxy_ªwrôe_±
 
h™dÀr
;

28 
ngx_hâp_com∂ex_vÆue_t
 
com∂ex
;

29 #i‡(
NGX_PCRE
)

30 
ngx_hâp_ªgex_t
 *
ªgex
;

32 } 
∑âîn
;

34 
ngx_hâp_com∂ex_vÆue_t
 
ª∂a˚mít
;

39 
ngx_°r_t
 
key_°¨t
;

40 
ngx_°r_t
 
schema
;

41 
ngx_°r_t
 
ho°_hódî
;

42 
ngx_°r_t
 
p‹t
;

43 
ngx_°r_t
 
uri
;

44 } 
	tngx_hâp_¥oxy_v¨s_t
;

48 
ngx_¨øy_t
 *
Êushes
;

49 
ngx_¨øy_t
 *
Àngths
;

50 
ngx_¨øy_t
 *
vÆues
;

51 
ngx_hash_t
 
hash
;

52 } 
	tngx_hâp_¥oxy_hódîs_t
;

56 
ngx_hâp_up°ªam_c⁄f_t
 
up°ªam
;

58 
ngx_¨øy_t
 *
body_Êushes
;

59 
ngx_¨øy_t
 *
body_Àngths
;

60 
ngx_¨øy_t
 *
body_vÆues
;

61 
ngx_°r_t
 
body_sour˚
;

63 
ngx_hâp_¥oxy_hódîs_t
 
hódîs
;

64 #i‡(
NGX_HTTP_CACHE
)

65 
ngx_hâp_¥oxy_hódîs_t
 
hódîs_ˇche
;

67 
ngx_¨øy_t
 *
hódîs_sour˚
;

69 
ngx_¨øy_t
 *
¥oxy_Àngths
;

70 
ngx_¨øy_t
 *
¥oxy_vÆues
;

72 
ngx_¨øy_t
 *
ªdúe˘s
;

73 
ngx_¨øy_t
 *
cookõ_domaös
;

74 
ngx_¨øy_t
 *
cookõ_∑ths
;

76 
ngx_hâp_com∂ex_vÆue_t
 *
mëhod
;

77 
ngx_°r_t
 
loˇti⁄
;

78 
ngx_°r_t
 
uæ
;

80 #i‡(
NGX_HTTP_CACHE
)

81 
ngx_hâp_com∂ex_vÆue_t
 
ˇche_key
;

84 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

86 
ngx_Êag_t
 
ªdúe˘
;

88 
ngx_uöt_t
 
hâp_vîsi⁄
;

90 
ngx_uöt_t
 
hódîs_hash_max_size
;

91 
ngx_uöt_t
 
hódîs_hash_buckë_size
;

93 #i‡(
NGX_HTTP_SSL
)

94 
ngx_uöt_t
 
s¶
;

95 
ngx_uöt_t
 
s¶_¥Ÿocﬁs
;

96 
ngx_°r_t
 
s¶_cùhîs
;

97 
ngx_uöt_t
 
s¶_vîify_dïth
;

98 
ngx_°r_t
 
s¶_åu°ed_˚πifiˇã
;

99 
ngx_°r_t
 
s¶_¸l
;

100 
ngx_°r_t
 
s¶_˚πifiˇã
;

101 
ngx_°r_t
 
s¶_˚πifiˇã_key
;

102 
ngx_¨øy_t
 *
s¶_∑ssw‹ds
;

104 } 
	tngx_hâp_¥oxy_loc_c⁄f_t
;

108 
ngx_hâp_°©us_t
 
°©us
;

109 
ngx_hâp_chunked_t
 
chunked
;

110 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

111 
off_t
 
öã∫Æ_body_Àngth
;

113 
ngx_chaö_t
 *
‰ì
;

114 
ngx_chaö_t
 *
busy
;

116 
hód
:1;

117 
öã∫Æ_chunked
:1;

118 
hódî_£¡
:1;

119 } 
	tngx_hâp_¥oxy_˘x_t
;

122 
ngx_öt_t
 
	`ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_¥oxy_˘x_t
 *
˘x
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

124 #i‡(
NGX_HTTP_CACHE
)

125 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

127 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

128 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

129 
ngx_öt_t
 
	`ngx_hâp_¥oxy_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
);

130 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

131 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

132 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
);

133 
ngx_öt_t
 
	`ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
,

134 
ngx_buf_t
 *
buf
);

135 
ngx_öt_t
 
	`ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
,

136 
ngx_buf_t
 *
buf
);

137 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
,

138 
ssize_t
 
byãs
);

139 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
,

140 
ssize_t
 
byãs
);

141 
	`ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

142 
	`ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

143 
ngx_öt_t
 
rc
);

145 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

146 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

147 
ngx_öt_t
 
	`ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

149 
ngx_öt_t


150 
	`ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

151 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

152 
ngx_öt_t


153 
	`ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

154 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

155 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öã∫Æ_chunked_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

156 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

157 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

158 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

159 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

160 
ngx_èbÀ_ñt_t
 *
h
);

161 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

162 
ngx_èbÀ_ñt_t
 *
h
, 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
);

163 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
,

164 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
);

166 
ngx_öt_t
 
	`ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

167 *
	`ngx_hâp_¥oxy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

168 *
	`ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

169 *
	`ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

170 *
∑ª¡
, *
chûd
);

171 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öô_hódîs
(
ngx_c⁄f_t
 *
cf
,

172 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_¥oxy_hódîs_t
 *
hódîs
,

173 
ngx_keyvÆ_t
 *
deÁu…_hódîs
);

175 *
	`ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

176 *
c⁄f
);

177 *
	`ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

178 *
c⁄f
);

179 *
	`ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

180 *
c⁄f
);

181 *
	`ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

182 *
c⁄f
);

183 *
	`ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

184 *
c⁄f
);

185 #i‡(
NGX_HTTP_CACHE
)

186 *
	`ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

187 *
c⁄f
);

188 *
	`ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

189 *
c⁄f
);

191 #i‡(
NGX_HTTP_SSL
)

192 *
	`ngx_hâp_¥oxy_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
,

193 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

196 *
	`ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

198 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
,

199 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

201 #i‡(
NGX_HTTP_SSL
)

202 
ngx_öt_t
 
	`ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

203 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

205 
	`ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
);

208 
ngx_c⁄f_po°_t
 
ngx_hâp_¥oxy_low©_po°
 =

209 { 
ngx_hâp_¥oxy_low©_check
 
	}
};

212 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_√xt_up°ªam_masks
[] = {

213 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

214 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

215 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

216 { 
ngx_°rög
("n⁄_idempŸít"), 
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
 },

217 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

218 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

219 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

220 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

221 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

222 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

223 { 
ngx_°rög
("hâp_429"), 
NGX_HTTP_UPSTREAM_FT_HTTP_429
 },

224 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

225 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

226 { 
ngx_nuŒ_°rög
, 0 }

230 #i‡(
NGX_HTTP_SSL
)

232 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_s¶_¥Ÿocﬁs
[] = {

233 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

234 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

235 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

236 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

237 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

238 { 
ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

239 { 
ngx_nuŒ_°rög
, 0 }

245 
ngx_c⁄f_íum_t
 
	gngx_hâp_¥oxy_hâp_vîsi⁄
[] = {

246 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

247 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

248 { 
ngx_nuŒ_°rög
, 0 }

252 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
;

255 
ngx_comm™d_t
 
	gngx_hâp_¥oxy_comm™ds
[] = {

257 { 
ngx_°rög
("proxy_pass"),

258 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

259 
ngx_hâp_¥oxy_∑ss
,

260 
NGX_HTTP_LOC_CONF_OFFSET
,

262 
NULL
 },

264 { 
ngx_°rög
("proxy_redirect"),

265 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

266 
ngx_hâp_¥oxy_ªdúe˘
,

267 
NGX_HTTP_LOC_CONF_OFFSET
,

269 
NULL
 },

271 { 
ngx_°rög
("proxy_cookie_domain"),

272 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

273 
ngx_hâp_¥oxy_cookõ_domaö
,

274 
NGX_HTTP_LOC_CONF_OFFSET
,

276 
NULL
 },

278 { 
ngx_°rög
("proxy_cookie_path"),

279 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

280 
ngx_hâp_¥oxy_cookõ_∑th
,

281 
NGX_HTTP_LOC_CONF_OFFSET
,

283 
NULL
 },

285 { 
ngx_°rög
("proxy_store"),

286 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

287 
ngx_hâp_¥oxy_°‹e
,

288 
NGX_HTTP_LOC_CONF_OFFSET
,

290 
NULL
 },

292 { 
ngx_°rög
("proxy_store_access"),

293 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

294 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

295 
NGX_HTTP_LOC_CONF_OFFSET
,

296 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

297 
NULL
 },

299 { 
ngx_°rög
("proxy_buffering"),

300 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

301 
ngx_c⁄f_£t_Êag_¶Ÿ
,

302 
NGX_HTTP_LOC_CONF_OFFSET
,

303 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

304 
NULL
 },

306 { 
ngx_°rög
("proxy_request_buffering"),

307 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

308 
ngx_c⁄f_£t_Êag_¶Ÿ
,

309 
NGX_HTTP_LOC_CONF_OFFSET
,

310 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

311 
NULL
 },

313 { 
ngx_°rög
("proxy_ignore_client_abort"),

314 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

315 
ngx_c⁄f_£t_Êag_¶Ÿ
,

316 
NGX_HTTP_LOC_CONF_OFFSET
,

317 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

318 
NULL
 },

320 { 
ngx_°rög
("proxy_bind"),

321 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

322 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

323 
NGX_HTTP_LOC_CONF_OFFSET
,

324 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

325 
NULL
 },

327 { 
ngx_°rög
("proxy_connect_timeout"),

328 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

329 
ngx_c⁄f_£t_m£c_¶Ÿ
,

330 
NGX_HTTP_LOC_CONF_OFFSET
,

331 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

332 
NULL
 },

334 { 
ngx_°rög
("proxy_send_timeout"),

335 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

336 
ngx_c⁄f_£t_m£c_¶Ÿ
,

337 
NGX_HTTP_LOC_CONF_OFFSET
,

338 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

339 
NULL
 },

341 { 
ngx_°rög
("proxy_send_lowat"),

342 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

343 
ngx_c⁄f_£t_size_¶Ÿ
,

344 
NGX_HTTP_LOC_CONF_OFFSET
,

345 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

346 &
ngx_hâp_¥oxy_low©_po°
 },

348 { 
ngx_°rög
("proxy_intercept_errors"),

349 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

350 
ngx_c⁄f_£t_Êag_¶Ÿ
,

351 
NGX_HTTP_LOC_CONF_OFFSET
,

352 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

353 
NULL
 },

355 { 
ngx_°rög
("proxy_set_header"),

356 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

357 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

358 
NGX_HTTP_LOC_CONF_OFFSET
,

359 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_sour˚
),

360 
NULL
 },

362 { 
ngx_°rög
("proxy_headers_hash_max_size"),

363 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

364 
ngx_c⁄f_£t_num_¶Ÿ
,

365 
NGX_HTTP_LOC_CONF_OFFSET
,

366 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_max_size
),

367 
NULL
 },

369 { 
ngx_°rög
("proxy_headers_hash_bucket_size"),

370 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

371 
ngx_c⁄f_£t_num_¶Ÿ
,

372 
NGX_HTTP_LOC_CONF_OFFSET
,

373 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_buckë_size
),

374 
NULL
 },

376 { 
ngx_°rög
("proxy_set_body"),

377 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

378 
ngx_c⁄f_£t_°r_¶Ÿ
,

379 
NGX_HTTP_LOC_CONF_OFFSET
,

380 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
body_sour˚
),

381 
NULL
 },

383 { 
ngx_°rög
("proxy_method"),

384 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

385 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

386 
NGX_HTTP_LOC_CONF_OFFSET
,

387 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
mëhod
),

388 
NULL
 },

390 { 
ngx_°rög
("proxy_pass_request_headers"),

391 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

392 
ngx_c⁄f_£t_Êag_¶Ÿ
,

393 
NGX_HTTP_LOC_CONF_OFFSET
,

394 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

395 
NULL
 },

397 { 
ngx_°rög
("proxy_pass_request_body"),

398 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

399 
ngx_c⁄f_£t_Êag_¶Ÿ
,

400 
NGX_HTTP_LOC_CONF_OFFSET
,

401 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

402 
NULL
 },

404 { 
ngx_°rög
("proxy_buffer_size"),

405 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

406 
ngx_c⁄f_£t_size_¶Ÿ
,

407 
NGX_HTTP_LOC_CONF_OFFSET
,

408 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

409 
NULL
 },

411 { 
ngx_°rög
("proxy_read_timeout"),

412 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

413 
ngx_c⁄f_£t_m£c_¶Ÿ
,

414 
NGX_HTTP_LOC_CONF_OFFSET
,

415 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

416 
NULL
 },

418 { 
ngx_°rög
("proxy_buffers"),

419 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

420 
ngx_c⁄f_£t_bufs_¶Ÿ
,

421 
NGX_HTTP_LOC_CONF_OFFSET
,

422 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
bufs
),

423 
NULL
 },

425 { 
ngx_°rög
("proxy_busy_buffers_size"),

426 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

427 
ngx_c⁄f_£t_size_¶Ÿ
,

428 
NGX_HTTP_LOC_CONF_OFFSET
,

429 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

430 
NULL
 },

432 { 
ngx_°rög
("proxy_force_ranges"),

433 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

434 
ngx_c⁄f_£t_Êag_¶Ÿ
,

435 
NGX_HTTP_LOC_CONF_OFFSET
,

436 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

437 
NULL
 },

439 { 
ngx_°rög
("proxy_limit_rate"),

440 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

441 
ngx_c⁄f_£t_size_¶Ÿ
,

442 
NGX_HTTP_LOC_CONF_OFFSET
,

443 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

444 
NULL
 },

446 #i‡(
NGX_HTTP_CACHE
)

448 { 
ngx_°rög
("proxy_cache"),

449 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

450 
ngx_hâp_¥oxy_ˇche
,

451 
NGX_HTTP_LOC_CONF_OFFSET
,

453 
NULL
 },

455 { 
ngx_°rög
("proxy_cache_key"),

456 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

457 
ngx_hâp_¥oxy_ˇche_key
,

458 
NGX_HTTP_LOC_CONF_OFFSET
,

460 
NULL
 },

462 { 
ngx_°rög
("proxy_cache_path"),

463 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

464 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

465 
NGX_HTTP_MAIN_CONF_OFFSET
,

466 
off£tof
(
ngx_hâp_¥oxy_maö_c⁄f_t
, 
ˇches
),

467 &
ngx_hâp_¥oxy_moduÀ
 },

469 { 
ngx_°rög
("proxy_cache_bypass"),

470 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

471 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

472 
NGX_HTTP_LOC_CONF_OFFSET
,

473 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

474 
NULL
 },

476 { 
ngx_°rög
("proxy_no_cache"),

477 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

478 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

479 
NGX_HTTP_LOC_CONF_OFFSET
,

480 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

481 
NULL
 },

483 { 
ngx_°rög
("proxy_cache_valid"),

484 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

485 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

486 
NGX_HTTP_LOC_CONF_OFFSET
,

487 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

488 
NULL
 },

490 { 
ngx_°rög
("proxy_cache_min_uses"),

491 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

492 
ngx_c⁄f_£t_num_¶Ÿ
,

493 
NGX_HTTP_LOC_CONF_OFFSET
,

494 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

495 
NULL
 },

497 { 
ngx_°rög
("proxy_cache_max_range_offset"),

498 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

499 
ngx_c⁄f_£t_off_¶Ÿ
,

500 
NGX_HTTP_LOC_CONF_OFFSET
,

501 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_max_ønge_off£t
),

502 
NULL
 },

504 { 
ngx_°rög
("proxy_cache_use_stale"),

505 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

506 
ngx_c⁄f_£t_bômask_¶Ÿ
,

507 
NGX_HTTP_LOC_CONF_OFFSET
,

508 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

509 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

511 { 
ngx_°rög
("proxy_cache_methods"),

512 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

513 
ngx_c⁄f_£t_bômask_¶Ÿ
,

514 
NGX_HTTP_LOC_CONF_OFFSET
,

515 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

516 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

518 { 
ngx_°rög
("proxy_cache_lock"),

519 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

520 
ngx_c⁄f_£t_Êag_¶Ÿ
,

521 
NGX_HTTP_LOC_CONF_OFFSET
,

522 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

523 
NULL
 },

525 { 
ngx_°rög
("proxy_cache_lock_timeout"),

526 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

527 
ngx_c⁄f_£t_m£c_¶Ÿ
,

528 
NGX_HTTP_LOC_CONF_OFFSET
,

529 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

530 
NULL
 },

532 { 
ngx_°rög
("proxy_cache_lock_age"),

533 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

534 
ngx_c⁄f_£t_m£c_¶Ÿ
,

535 
NGX_HTTP_LOC_CONF_OFFSET
,

536 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

537 
NULL
 },

539 { 
ngx_°rög
("proxy_cache_revalidate"),

540 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

541 
ngx_c⁄f_£t_Êag_¶Ÿ
,

542 
NGX_HTTP_LOC_CONF_OFFSET
,

543 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

544 
NULL
 },

546 { 
ngx_°rög
("proxy_cache_convert_head"),

547 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

548 
ngx_c⁄f_£t_Êag_¶Ÿ
,

549 
NGX_HTTP_LOC_CONF_OFFSET
,

550 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_c⁄vît_hód
),

551 
NULL
 },

553 { 
ngx_°rög
("proxy_cache_background_update"),

554 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

555 
ngx_c⁄f_£t_Êag_¶Ÿ
,

556 
NGX_HTTP_LOC_CONF_OFFSET
,

557 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_background_upd©e
),

558 
NULL
 },

562 { 
ngx_°rög
("proxy_temp_path"),

563 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

564 
ngx_c⁄f_£t_∑th_¶Ÿ
,

565 
NGX_HTTP_LOC_CONF_OFFSET
,

566 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

567 
NULL
 },

569 { 
ngx_°rög
("proxy_max_temp_file_size"),

570 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

571 
ngx_c⁄f_£t_size_¶Ÿ
,

572 
NGX_HTTP_LOC_CONF_OFFSET
,

573 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

574 
NULL
 },

576 { 
ngx_°rög
("proxy_temp_file_write_size"),

577 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

578 
ngx_c⁄f_£t_size_¶Ÿ
,

579 
NGX_HTTP_LOC_CONF_OFFSET
,

580 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

581 
NULL
 },

583 { 
ngx_°rög
("proxy_next_upstream"),

584 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

585 
ngx_c⁄f_£t_bômask_¶Ÿ
,

586 
NGX_HTTP_LOC_CONF_OFFSET
,

587 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

588 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

590 { 
ngx_°rög
("proxy_next_upstream_tries"),

591 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

592 
ngx_c⁄f_£t_num_¶Ÿ
,

593 
NGX_HTTP_LOC_CONF_OFFSET
,

594 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

595 
NULL
 },

597 { 
ngx_°rög
("proxy_next_upstream_timeout"),

598 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

599 
ngx_c⁄f_£t_m£c_¶Ÿ
,

600 
NGX_HTTP_LOC_CONF_OFFSET
,

601 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

602 
NULL
 },

604 { 
ngx_°rög
("proxy_pass_header"),

605 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

606 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

607 
NGX_HTTP_LOC_CONF_OFFSET
,

608 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

609 
NULL
 },

611 { 
ngx_°rög
("proxy_hide_header"),

612 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

613 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

614 
NGX_HTTP_LOC_CONF_OFFSET
,

615 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

616 
NULL
 },

618 { 
ngx_°rög
("proxy_ignore_headers"),

619 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

620 
ngx_c⁄f_£t_bômask_¶Ÿ
,

621 
NGX_HTTP_LOC_CONF_OFFSET
,

622 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

623 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

625 { 
ngx_°rög
("proxy_http_version"),

626 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

627 
ngx_c⁄f_£t_íum_¶Ÿ
,

628 
NGX_HTTP_LOC_CONF_OFFSET
,

629 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hâp_vîsi⁄
),

630 &
ngx_hâp_¥oxy_hâp_vîsi⁄
 },

632 #i‡(
NGX_HTTP_SSL
)

634 { 
ngx_°rög
("proxy_ssl_session_reuse"),

635 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

636 
ngx_c⁄f_£t_Êag_¶Ÿ
,

637 
NGX_HTTP_LOC_CONF_OFFSET
,

638 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

639 
NULL
 },

641 { 
ngx_°rög
("proxy_ssl_protocols"),

642 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

643 
ngx_c⁄f_£t_bômask_¶Ÿ
,

644 
NGX_HTTP_LOC_CONF_OFFSET
,

645 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

646 &
ngx_hâp_¥oxy_s¶_¥Ÿocﬁs
 },

648 { 
ngx_°rög
("proxy_ssl_ciphers"),

649 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

650 
ngx_c⁄f_£t_°r_¶Ÿ
,

651 
NGX_HTTP_LOC_CONF_OFFSET
,

652 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_cùhîs
),

653 
NULL
 },

655 { 
ngx_°rög
("proxy_ssl_name"),

656 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

657 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

658 
NGX_HTTP_LOC_CONF_OFFSET
,

659 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_«me
),

660 
NULL
 },

662 { 
ngx_°rög
("proxy_ssl_server_name"),

663 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

664 
ngx_c⁄f_£t_Êag_¶Ÿ
,

665 
NGX_HTTP_LOC_CONF_OFFSET
,

666 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£rvî_«me
),

667 
NULL
 },

669 { 
ngx_°rög
("proxy_ssl_verify"),

670 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

671 
ngx_c⁄f_£t_Êag_¶Ÿ
,

672 
NGX_HTTP_LOC_CONF_OFFSET
,

673 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_vîify
),

674 
NULL
 },

676 { 
ngx_°rög
("proxy_ssl_verify_depth"),

677 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

678 
ngx_c⁄f_£t_num_¶Ÿ
,

679 
NGX_HTTP_LOC_CONF_OFFSET
,

680 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_vîify_dïth
),

681 
NULL
 },

683 { 
ngx_°rög
("proxy_ssl_trusted_certificate"),

684 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

685 
ngx_c⁄f_£t_°r_¶Ÿ
,

686 
NGX_HTTP_LOC_CONF_OFFSET
,

687 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_åu°ed_˚πifiˇã
),

688 
NULL
 },

690 { 
ngx_°rög
("proxy_ssl_crl"),

691 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

692 
ngx_c⁄f_£t_°r_¶Ÿ
,

693 
NGX_HTTP_LOC_CONF_OFFSET
,

694 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_¸l
),

695 
NULL
 },

697 { 
ngx_°rög
("proxy_ssl_certificate"),

698 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

699 
ngx_c⁄f_£t_°r_¶Ÿ
,

700 
NGX_HTTP_LOC_CONF_OFFSET
,

701 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_˚πifiˇã
),

702 
NULL
 },

704 { 
ngx_°rög
("proxy_ssl_certificate_key"),

705 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

706 
ngx_c⁄f_£t_°r_¶Ÿ
,

707 
NGX_HTTP_LOC_CONF_OFFSET
,

708 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_˚πifiˇã_key
),

709 
NULL
 },

711 { 
ngx_°rög
("proxy_ssl_password_file"),

712 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

713 
ngx_hâp_¥oxy_s¶_∑ssw‹d_fûe
,

714 
NGX_HTTP_LOC_CONF_OFFSET
,

716 
NULL
 },

720 
ngx_nuŒ_comm™d


724 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ_˘x
 = {

725 
ngx_hâp_¥oxy_add_v¨übÀs
,

726 
NULL
,

728 
ngx_hâp_¥oxy_¸óã_maö_c⁄f
,

729 
NULL
,

731 
NULL
,

732 
NULL
,

734 
ngx_hâp_¥oxy_¸óã_loc_c⁄f
,

735 
ngx_hâp_¥oxy_mîge_loc_c⁄f


739 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
 = {

740 
NGX_MODULE_V1
,

741 &
ngx_hâp_¥oxy_moduÀ_˘x
,

742 
ngx_hâp_¥oxy_comm™ds
,

743 
NGX_HTTP_MODULE
,

744 
NULL
,

745 
NULL
,

746 
NULL
,

747 
NULL
,

748 
NULL
,

749 
NULL
,

750 
NULL
,

751 
NGX_MODULE_V1_PADDING


755 
	gngx_hâp_¥oxy_vîsi⁄
[] = " HTTP/1.0" 
CRLF
;

756 
	gngx_hâp_¥oxy_vîsi⁄_11
[] = " HTTP/1.1" 
CRLF
;

759 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_hódîs
[] = {

760 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

761 { 
ngx_°rög
("Connection"),Çgx_string("close") },

762 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

763 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("$proxy_internal_chunked") },

764 { 
ngx_°rög
("TE"),Çgx_string("") },

765 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

766 { 
ngx_°rög
("Expect"),Çgx_string("") },

767 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

768 { 
ngx_nuŒ_°rög
,Çgx_null_string }

772 
ngx_°r_t
 
	gngx_hâp_¥oxy_hide_hódîs
[] = {

773 
ngx_°rög
("Date"),

774 
ngx_°rög
("Server"),

775 
ngx_°rög
("X-Pad"),

776 
ngx_°rög
("X-Accel-Expires"),

777 
ngx_°rög
("X-Accel-Redirect"),

778 
ngx_°rög
("X-Accel-Limit-Rate"),

779 
ngx_°rög
("X-Accel-Buffering"),

780 
ngx_°rög
("X-Accel-Charset"),

781 
ngx_nuŒ_°rög


785 #i‡(
NGX_HTTP_CACHE
)

787 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_ˇche_hódîs
[] = {

788 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

789 { 
ngx_°rög
("Connection"),Çgx_string("close") },

790 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

791 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("$proxy_internal_chunked") },

792 { 
ngx_°rög
("TE"),Çgx_string("") },

793 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

794 { 
ngx_°rög
("Expect"),Çgx_string("") },

795 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

796 { 
ngx_°rög
("If-Modified-Since"),

797 
ngx_°rög
("$upstream_cache_last_modified") },

798 { 
ngx_°rög
("If-Unmodified-Since"),Çgx_string("") },

799 { 
ngx_°rög
("If-None-Match"),Çgx_string("$upstream_cache_etag") },

800 { 
ngx_°rög
("If-Match"),Çgx_string("") },

801 { 
ngx_°rög
("Range"),Çgx_string("") },

802 { 
ngx_°rög
("If-Range"),Çgx_string("") },

803 { 
ngx_nuŒ_°rög
,Çgx_null_string }

809 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_¥oxy_v¨s
[] = {

811 { 
ngx_°rög
("¥oxy_ho°"), 
NULL
, 
ngx_hâp_¥oxy_ho°_v¨übÀ
, 0,

812 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

814 { 
ngx_°rög
("¥oxy_p‹t"), 
NULL
, 
ngx_hâp_¥oxy_p‹t_v¨übÀ
, 0,

815 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

817 { 
ngx_°rög
("¥oxy_add_x_f‹w¨ded_f‹"), 
NULL
,

818 
ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

821 { 
ngx_°rög
("¥oxy_add_vü"), 
NULL
, NULL, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

824 { 
ngx_°rög
("¥oxy_öã∫Æ_body_Àngth"), 
NULL
,

825 
ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
, 0,

826 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

828 { 
ngx_°rög
("¥oxy_öã∫Æ_chunked"), 
NULL
,

829 
ngx_hâp_¥oxy_öã∫Æ_chunked_v¨übÀ
, 0,

830 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

832 
ngx_hâp_nuŒ_v¨übÀ


836 
ngx_∑th_öô_t
 
	gngx_hâp_¥oxy_ãmp_∑th
 = {

837 
ngx_°rög
(
NGX_HTTP_PROXY_TEMP_PATH
), { 1, 2, 0 }

841 
ngx_öt_t


842 
	$ngx_hâp_¥oxy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

844 
ngx_öt_t
 
rc
;

845 
ngx_hâp_up°ªam_t
 *
u
;

846 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

847 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

848 #i‡(
NGX_HTTP_CACHE
)

849 
ngx_hâp_¥oxy_maö_c⁄f_t
 *
pmcf
;

852 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

853  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

856 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¥oxy_˘x_t
));

857 i‡(
˘x
 =
NULL
) {

858  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

861 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¥oxy_moduÀ
);

863 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

865 
u
 = 
r
->
up°ªam
;

867 i‡(
∂cf
->
¥oxy_Àngths
 =
NULL
) {

868 
˘x
->
v¨s
 = 
∂cf
->vars;

869 
u
->
schema
 = 
∂cf
->
v¨s
.schema;

870 #i‡(
NGX_HTTP_SSL
)

871 
u
->
s¶
 = (
∂cf
->
up°ªam
.s¶ !
NULL
);

875 i‡(
	`ngx_hâp_¥oxy_evÆ
(
r
, 
˘x
, 
∂cf
Ë!
NGX_OK
) {

876  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

880 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_moduÀ
;

882 
u
->
c⁄f
 = &
∂cf
->
up°ªam
;

884 #i‡(
NGX_HTTP_CACHE
)

885 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

887 
u
->
ˇches
 = &
pmcf
->caches;

888 
u
->
¸óã_key
 = 
ngx_hâp_¥oxy_¸óã_key
;

891 
u
->
¸óã_ªque°
 = 
ngx_hâp_¥oxy_¸óã_ªque°
;

892 
u
->
ªöô_ªque°
 = 
ngx_hâp_¥oxy_ªöô_ªque°
;

893 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

894 
u
->
ab‹t_ªque°
 = 
ngx_hâp_¥oxy_ab‹t_ªque°
;

895 
u
->
föÆize_ªque°
 = 
ngx_hâp_¥oxy_föÆize_ªque°
;

896 
r
->
°©e
 = 0;

898 i‡(
∂cf
->
ªdúe˘s
) {

899 
u
->
ªwrôe_ªdúe˘
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘
;

902 i‡(
∂cf
->
cookõ_domaös
 ||Ölcf->
cookõ_∑ths
) {

903 
u
->
ªwrôe_cookõ
 = 
ngx_hâp_¥oxy_ªwrôe_cookõ
;

906 
u
->
buf„rög
 = 
∂cf
->
up°ªam
.buffering;

908 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

909 i‡(
u
->
pùe
 =
NULL
) {

910  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

913 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

914 
u
->
pùe
->
öput_˘x
 = 
r
;

916 
u
->
öput_fûãr_öô
 = 
ngx_hâp_¥oxy_öput_fûãr_öô
;

917 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

918 
u
->
öput_fûãr_˘x
 = 
r
;

920 
u
->
ac˚l
 = 1;

922 i‡(!
∂cf
->
up°ªam
.
ªque°_buf„rög


923 && 
∂cf
->
body_vÆues
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body


924 && (!
r
->
hódîs_ö
.
chunked


925 || 
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
))

927 
r
->
ªque°_body_no_buf„rög
 = 1;

930 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

932 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

933  
rc
;

936  
NGX_DONE
;

937 
	}
}

940 
ngx_öt_t


941 
	$ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_¥oxy_˘x_t
 *
˘x
,

942 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

944 
u_ch¨
 *
p
;

945 
size_t
 
add
;

946 
u_sh‹t
 
p‹t
;

947 
ngx_°r_t
 
¥oxy
;

948 
ngx_uæ_t
 
uæ
;

949 
ngx_hâp_up°ªam_t
 *
u
;

951 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
¥oxy
, 
∂cf
->
¥oxy_Àngths
->
ñts
, 0,

952 
∂cf
->
¥oxy_vÆues
->
ñts
)

953 =
NULL
)

955  
NGX_ERROR
;

958 i‡(
¥oxy
.
Àn
 > 7

959 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

961 
add
 = 7;

962 
p‹t
 = 80;

964 #i‡(
NGX_HTTP_SSL
)

966 } i‡(
¥oxy
.
Àn
 > 8

967 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "https://", 8) == 0)

969 
add
 = 8;

970 
p‹t
 = 443;

971 
r
->
up°ªam
->
s¶
 = 1;

976 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

977 "övÆid URLÖªfix i¿\"%V\"", &
¥oxy
);

978  
NGX_ERROR
;

981 
u
 = 
r
->
up°ªam
;

983 
u
->
schema
.
Àn
 = 
add
;

984 
u
->
schema
.
d©a
 = 
¥oxy
.data;

986 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

988 
uæ
.uæ.
Àn
 = 
¥oxy
.À¿- 
add
;

989 
uæ
.uæ.
d©a
 = 
¥oxy
.d©®+ 
add
;

990 
uæ
.
deÁu…_p‹t
 = 
p‹t
;

991 
uæ
.
uri_∑π
 = 1;

992 
uæ
.
no_ªsﬁve
 = 1;

994 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

995 i‡(
uæ
.
îr
) {

996 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

997 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

1000  
NGX_ERROR
;

1003 i‡(
uæ
.
uri
.
Àn
) {

1004 i‡(
uæ
.
uri
.
d©a
[0] == '?') {

1005 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uæ
.
uri
.
Àn
 + 1);

1006 i‡(
p
 =
NULL
) {

1007  
NGX_ERROR
;

1010 *
p
++ = '/';

1011 
	`ngx_mem˝y
(
p
, 
uæ
.
uri
.
d©a
, uæ.uri.
Àn
);

1013 
uæ
.
uri
.
Àn
++;

1014 
uæ
.
uri
.
d©a
 = 
p
 - 1;

1018 
˘x
->
v¨s
.
key_°¨t
 = 
u
->
schema
;

1020 
	`ngx_hâp_¥oxy_£t_v¨s
(&
uæ
, &
˘x
->
v¨s
);

1022 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

1023 i‡(
u
->
ªsﬁved
 =
NULL
) {

1024  
NGX_ERROR
;

1027 i‡(
uæ
.
addrs
) {

1028 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

1029 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

1030 
u
->
ªsﬁved
->
«me
 = 
uæ
.
addrs
[0].name;

1031 
u
->
ªsﬁved
->
«ddrs
 = 1;

1034 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

1035 
u
->
ªsﬁved
->
p‹t
 = (
ö_p‹t_t
Ë(
uæ
.
no_p‹t
 ?Öort : url.port);

1036 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

1038  
NGX_OK
;

1039 
	}
}

1042 #i‡(
NGX_HTTP_CACHE
)

1044 
ngx_öt_t


1045 
	$ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

1047 
size_t
 
Àn
, 
loc_Àn
;

1048 
u_ch¨
 *
p
;

1049 
uöçå_t
 
esˇ≥
;

1050 
ngx_°r_t
 *
key
;

1051 
ngx_hâp_up°ªam_t
 *
u
;

1052 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1053 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

1055 
u
 = 
r
->
up°ªam
;

1057 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1059 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1061 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

1062 i‡(
key
 =
NULL
) {

1063  
NGX_ERROR
;

1066 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

1068 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∂cf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

1069  
NGX_ERROR
;

1072  
NGX_OK
;

1075 *
key
 = 
˘x
->
v¨s
.
key_°¨t
;

1077 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

1078 i‡(
key
 =
NULL
) {

1079  
NGX_ERROR
;

1082 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1084 *
key
 = 
˘x
->
v¨s
.
uri
;

1085 
u
->
uri
 = 
˘x
->
v¨s
.uri;

1087  
NGX_OK
;

1089 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
) {

1090 *
key
 = 
r
->
u≈¨£d_uri
;

1091 
u
->
uri
 = 
r
->
u≈¨£d_uri
;

1093  
NGX_OK
;

1096 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
Ë? 
∂cf
->
loˇti⁄
.len : 0;

1098 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

1099 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1100 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1102 
esˇ≥
 = 0;

1105 
Àn
 = 
˘x
->
v¨s
.
uri
.À¿+ 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


1106 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

1108 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1109 i‡(
p
 =
NULL
) {

1110  
NGX_ERROR
;

1113 
key
->
d©a
 = 
p
;

1115 i‡(
r
->
vÆid_loˇti⁄
) {

1116 
p
 = 
	`ngx_c›y
’, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1119 i‡(
esˇ≥
) {

1120 
	`ngx_esˇ≥_uri
(
p
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1121 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1122 
p
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1125 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
 + 
loc_Àn
,Ñ->uri.
Àn
 -Üoc_len);

1128 i‡(
r
->
¨gs
.
Àn
 > 0) {

1129 *
p
++ = '?';

1130 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1133 
key
->
Àn
 = 
p
 - key->
d©a
;

1134 
u
->
uri
 = *
key
;

1136  
NGX_OK
;

1137 
	}
}

1142 
ngx_öt_t


1143 
	$ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1145 
size_t
 
Àn
, 
uri_Àn
, 
loc_Àn
, 
body_Àn
,

1146 
key_Àn
, 
vÆ_Àn
;

1147 
uöçå_t
 
esˇ≥
;

1148 
ngx_buf_t
 *
b
;

1149 
ngx_°r_t
 
mëhod
;

1150 
ngx_uöt_t
 
i
, 
u≈¨£d_uri
;

1151 
ngx_chaö_t
 *
˛
, *
body
;

1152 
ngx_li°_∑π_t
 *
∑π
;

1153 
ngx_èbÀ_ñt_t
 *
hódî
;

1154 
ngx_hâp_up°ªam_t
 *
u
;

1155 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1156 
ngx_hâp_s¸ùt_code_±
 
code
;

1157 
ngx_hâp_¥oxy_hódîs_t
 *
hódîs
;

1158 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

1159 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

1160 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1162 
u
 = 
r
->
up°ªam
;

1164 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1166 #i‡(
NGX_HTTP_CACHE
)

1167 
hódîs
 = 
u
->
ˇchóbÀ
 ? &
∂cf
->
hódîs_ˇche
 : &plcf->headers;

1169 
hódîs
 = &
∂cf
->headers;

1172 i‡(
u
->
mëhod
.
Àn
) {

1174 
mëhod
 = 
u
->method;

1176 } i‡(
∂cf
->
mëhod
) {

1177 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
∂cf
->
mëhod
, &mëhodË!
NGX_OK
) {

1178  
NGX_ERROR
;

1182 
mëhod
 = 
r
->
mëhod_«me
;

1185 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1187 i‡(
mëhod
.
Àn
 == 4

1188 && 
	`ngx_°∫ˇ£cmp
(
mëhod
.
d©a
, (
u_ch¨
 *) "HEAD", 4) == 0)

1190 
˘x
->
hód
 = 1;

1193 
Àn
 = 
mëhod
.À¿+ 1 + (
ngx_hâp_¥oxy_vîsi⁄
) - 1

1194 + (
CRLF
) - 1;

1196 
esˇ≥
 = 0;

1197 
loc_Àn
 = 0;

1198 
u≈¨£d_uri
 = 0;

1200 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1201 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
;

1203 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
) {

1204 
u≈¨£d_uri
 = 1;

1205 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

1208 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
) ?

1209 
∂cf
->
loˇti⁄
.
Àn
 : 0;

1211 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

1212 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1213 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1216 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
 + 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


1217 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

1220 i‡(
uri_Àn
 == 0) {

1221 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1223  
NGX_ERROR
;

1226 
Àn
 +
uri_Àn
;

1228 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1230 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∂cf
->
body_Êushes
);

1231 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
hódîs
->
Êushes
);

1233 i‡(
∂cf
->
body_Àngths
) {

1234 
À
.
ù
 = 
∂cf
->
body_Àngths
->
ñts
;

1235 
À
.
ªque°
 = 
r
;

1236 
À
.
Êushed
 = 1;

1237 
body_Àn
 = 0;

1239 *(
uöçå_t
 *Ë
À
.
ù
) {

1240 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1241 
body_Àn
 +
	`lcode
(&
À
);

1244 
˘x
->
öã∫Æ_body_Àngth
 = 
body_Àn
;

1245 
Àn
 +
body_Àn
;

1247 } i‡(
r
->
hódîs_ö
.
chunked
 &&Ñ->
ªadög_body
) {

1248 
˘x
->
öã∫Æ_body_Àngth
 = -1;

1249 
˘x
->
öã∫Æ_chunked
 = 1;

1252 
˘x
->
öã∫Æ_body_Àngth
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1255 
À
.
ù
 = 
hódîs
->
Àngths
->
ñts
;

1256 
À
.
ªque°
 = 
r
;

1257 
À
.
Êushed
 = 1;

1259 *(
uöçå_t
 *Ë
À
.
ù
) {

1261 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1262 
key_Àn
 = 
	`lcode
(&
À
);

1264 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

1265 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1267 
À
.
ù
 +(
uöçå_t
);

1269 i‡(
vÆ_Àn
 == 0) {

1273 
Àn
 +
key_Àn
 + (": "Ë- 1 + 
vÆ_Àn
 + (
CRLF
) - 1;

1277 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1278 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1279 
hódî
 = 
∑π
->
ñts
;

1281 
i
 = 0; ; i++) {

1283 i‡(
i
 >
∑π
->
√…s
) {

1284 i‡(
∑π
->
√xt
 =
NULL
) {

1288 
∑π
 =Ö¨t->
√xt
;

1289 
hódî
 = 
∑π
->
ñts
;

1290 
i
 = 0;

1293 i‡(
	`ngx_hash_föd
(&
hódîs
->
hash
, 
hódî
[
i
].hash,

1294 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1299 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

1300 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

1305 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

1306 i‡(
b
 =
NULL
) {

1307  
NGX_ERROR
;

1310 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1311 i‡(
˛
 =
NULL
) {

1312  
NGX_ERROR
;

1315 
˛
->
buf
 = 
b
;

1320 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
mëhod
.
d©a
, mëhod.
Àn
);

1321 *
b
->
œ°
++ = ' ';

1323 
u
->
uri
.
d©a
 = 
b
->
œ°
;

1325 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1326 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1328 } i‡(
u≈¨£d_uri
) {

1329 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

1332 i‡(
r
->
vÆid_loˇti⁄
) {

1333 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1336 i‡(
esˇ≥
) {

1337 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1338 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1339 
b
->
œ°
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1342 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1343 
r
->
uri
.
Àn
 - 
loc_Àn
);

1346 i‡(
r
->
¨gs
.
Àn
 > 0) {

1347 *
b
->
œ°
++ = '?';

1348 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1352 
u
->
uri
.
Àn
 = 
b
->
œ°
 - u->uri.
d©a
;

1354 i‡(
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
) {

1355 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄_11
,

1356 (
ngx_hâp_¥oxy_vîsi⁄_11
) - 1);

1359 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄
,

1360 (
ngx_hâp_¥oxy_vîsi⁄
) - 1);

1363 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1365 
e
.
ù
 = 
hódîs
->
vÆues
->
ñts
;

1366 
e
.
pos
 = 
b
->
œ°
;

1367 
e
.
ªque°
 = 
r
;

1368 
e
.
Êushed
 = 1;

1370 
À
.
ù
 = 
hódîs
->
Àngths
->
ñts
;

1372 *(
uöçå_t
 *Ë
À
.
ù
) {

1374 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1375 (Ë
	`lcode
(&
À
);

1377 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

1378 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1380 
À
.
ù
 +(
uöçå_t
);

1382 i‡(
vÆ_Àn
 == 0) {

1383 
e
.
skù
 = 1;

1385 *(
uöçå_t
 *Ë
e
.
ù
) {

1386 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1387 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1389 
e
.
ù
 +(
uöçå_t
);

1391 
e
.
skù
 = 0;

1396 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1397 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1399 *
e
.
pos
++ = ':'; *e.pos++ = ' ';

1401 *(
uöçå_t
 *Ë
e
.
ù
) {

1402 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1403 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1405 
e
.
ù
 +(
uöçå_t
);

1407 *
e
.
pos
++ = 
CR
; *e.pos++ = 
LF
;

1410 
b
->
œ°
 = 
e
.
pos
;

1413 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1414 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1415 
hódî
 = 
∑π
->
ñts
;

1417 
i
 = 0; ; i++) {

1419 i‡(
i
 >
∑π
->
√…s
) {

1420 i‡(
∑π
->
√xt
 =
NULL
) {

1424 
∑π
 =Ö¨t->
√xt
;

1425 
hódî
 = 
∑π
->
ñts
;

1426 
i
 = 0;

1429 i‡(
	`ngx_hash_föd
(&
hódîs
->
hash
, 
hódî
[
i
].hash,

1430 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1435 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1437 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

1439 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

1440 
hódî
[
i
].
vÆue
.
Àn
);

1442 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1444 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1446 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1452 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1454 i‡(
∂cf
->
body_vÆues
) {

1455 
e
.
ù
 = 
∂cf
->
body_vÆues
->
ñts
;

1456 
e
.
pos
 = 
b
->
œ°
;

1457 
e
.
skù
 = 0;

1459 *(
uöçå_t
 *Ë
e
.
ù
) {

1460 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1461 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1464 
b
->
œ°
 = 
e
.
pos
;

1467 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1469 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1471 i‡(
r
->
ªque°_body_no_buf„rög
) {

1473 
u
->
ªque°_bufs
 = 
˛
;

1475 i‡(
˘x
->
öã∫Æ_chunked
) {

1476 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1477 
u
->
ouçut
.
fûãr_˘x
 = 
r
;

1480 } i‡(
∂cf
->
body_vÆues
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body
) {

1482 
body
 = 
u
->
ªque°_bufs
;

1483 
u
->
ªque°_bufs
 = 
˛
;

1485 
body
) {

1486 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1487 i‡(
b
 =
NULL
) {

1488  
NGX_ERROR
;

1491 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1493 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1494 i‡(
˛
->
√xt
 =
NULL
) {

1495  
NGX_ERROR
;

1498 
˛
 = cl->
√xt
;

1499 
˛
->
buf
 = 
b
;

1501 
body
 = body->
√xt
;

1505 
u
->
ªque°_bufs
 = 
˛
;

1508 
b
->
Êush
 = 1;

1509 
˛
->
√xt
 = 
NULL
;

1511  
NGX_OK
;

1512 
	}
}

1515 
ngx_öt_t


1516 
	$ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1518 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1520 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1522 i‡(
˘x
 =
NULL
) {

1523  
NGX_OK
;

1526 
˘x
->
°©us
.
code
 = 0;

1527 
˘x
->
°©us
.
cou¡
 = 0;

1528 
˘x
->
°©us
.
°¨t
 = 
NULL
;

1529 
˘x
->
°©us
.
íd
 = 
NULL
;

1530 
˘x
->
chunked
.
°©e
 = 0;

1532 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

1533 
r
->
up°ªam
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

1534 
r
->
up°ªam
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

1535 
r
->
°©e
 = 0;

1537  
NGX_OK
;

1538 
	}
}

1541 
ngx_öt_t


1542 
	$ngx_hâp_¥oxy_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
)

1544 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1546 
off_t
 
size
;

1547 
u_ch¨
 *
chunk
;

1548 
ngx_öt_t
 
rc
;

1549 
ngx_buf_t
 *
b
;

1550 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
, **
Ê
;

1551 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1553 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1556 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1558 i‡(
ö
 =
NULL
) {

1559 
out
 = 
ö
;

1560 
out
;

1563 
out
 = 
NULL
;

1564 
Œ
 = &
out
;

1566 i‡(!
˘x
->
hódî_£¡
) {

1569 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1572 
˘x
->
hódî_£¡
 = 1;

1574 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1575 i‡(
é
 =
NULL
) {

1576  
NGX_ERROR
;

1579 
é
->
buf
 = 
ö
->buf;

1580 *
Œ
 = 
é
;

1581 
Œ
 = &
é
->
√xt
;

1583 
ö
 = in->
√xt
;

1585 i‡(
ö
 =
NULL
) {

1586 
é
->
√xt
 = 
NULL
;

1587 
out
;

1591 
size
 = 0;

1592 
˛
 = 
ö
;

1593 
Ê
 = 
Œ
;

1596 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1597 "¥oxy ouçuàchunk: %O", 
	`ngx_buf_size
(
˛
->
buf
));

1599 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

1601 i‡(
˛
->
buf
->
Êush


1602 || 
˛
->
buf
->
sync


1603 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

1604 || 
˛
->
buf
->
ö_fûe
)

1606 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1607 i‡(
é
 =
NULL
) {

1608  
NGX_ERROR
;

1611 
é
->
buf
 = 
˛
->buf;

1612 *
Œ
 = 
é
;

1613 
Œ
 = &
é
->
√xt
;

1616 i‡(
˛
->
√xt
 =
NULL
) {

1620 
˛
 = cl->
√xt
;

1623 i‡(
size
) {

1624 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1625 i‡(
é
 =
NULL
) {

1626  
NGX_ERROR
;

1629 
b
 = 
é
->
buf
;

1630 
chunk
 = 
b
->
°¨t
;

1632 i‡(
chunk
 =
NULL
) {

1635 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

1636 i‡(
chunk
 =
NULL
) {

1637  
NGX_ERROR
;

1640 
b
->
°¨t
 = 
chunk
;

1641 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

1644 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1645 
b
->
mem‹y
 = 0;

1646 
b
->
ãmp‹¨y
 = 1;

1647 
b
->
pos
 = 
chunk
;

1648 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

1650 
é
->
√xt
 = *
Ê
;

1651 *
Ê
 = 
é
;

1654 i‡(
˛
->
buf
->
œ°_buf
) {

1655 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1656 i‡(
é
 =
NULL
) {

1657  
NGX_ERROR
;

1660 
b
 = 
é
->
buf
;

1662 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1663 
b
->
ãmp‹¨y
 = 0;

1664 
b
->
mem‹y
 = 1;

1665 
b
->
œ°_buf
 = 1;

1666 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

1667 
b
->
œ°
 = b->
pos
 + 7;

1669 
˛
->
buf
->
œ°_buf
 = 0;

1671 *
Œ
 = 
é
;

1673 i‡(
size
 == 0) {

1674 
b
->
pos
 += 2;

1677 } i‡(
size
 > 0) {

1678 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1679 i‡(
é
 =
NULL
) {

1680  
NGX_ERROR
;

1683 
b
 = 
é
->
buf
;

1685 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1686 
b
->
ãmp‹¨y
 = 0;

1687 
b
->
mem‹y
 = 1;

1688 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

1689 
b
->
œ°
 = b->
pos
 + 2;

1691 *
Œ
 = 
é
;

1694 *
Œ
 = 
NULL
;

1697 
out
:

1699 
rc
 = 
	`ngx_chaö_wrôî
(&
r
->
up°ªam
->
wrôî
, 
out
);

1701 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

1702 (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
);

1704  
rc
;

1705 
	}
}

1708 
ngx_öt_t


1709 
	$ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1711 
size_t
 
Àn
;

1712 
ngx_öt_t
 
rc
;

1713 
ngx_hâp_up°ªam_t
 *
u
;

1714 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1716 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1718 i‡(
˘x
 =
NULL
) {

1719  
NGX_ERROR
;

1722 
u
 = 
r
->
up°ªam
;

1724 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, &
˘x
->
°©us
);

1726 i‡(
rc
 =
NGX_AGAIN
) {

1727  
rc
;

1730 i‡(
rc
 =
NGX_ERROR
) {

1732 #i‡(
NGX_HTTP_CACHE
)

1734 i‡(
r
->
ˇche
) {

1735 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1736  
NGX_OK
;

1741 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1745 i‡(
u
->
ac˚l
) {

1746  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1750 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1751 
u
->
°©e
->
°©us
 = 
NGX_HTTP_OK
;

1752 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1754  
NGX_OK
;

1757 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1758 
u
->
°©e
->
°©us
 = 
˘x
->°©us.
code
;

1761 
u
->
hódîs_ö
.
°©us_n
 = 
˘x
->
°©us
.
code
;

1763 
Àn
 = 
˘x
->
°©us
.
íd
 - ctx->°©us.
°¨t
;

1764 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1766 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1767 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1768  
NGX_ERROR
;

1771 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
˘x
->
°©us
.
°¨t
, 
Àn
);

1773 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1775 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1777 i‡(
˘x
->
°©us
.
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

1778 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1781 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_hódî
;

1783  
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
r
);

1784 
	}
}

1787 
ngx_öt_t


1788 
	$ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1790 
ngx_öt_t
 
rc
;

1791 
ngx_èbÀ_ñt_t
 *
h
;

1792 
ngx_hâp_up°ªam_t
 *
u
;

1793 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1794 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1795 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1797 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1801 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1803 i‡(
rc
 =
NGX_OK
) {

1807 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1808 i‡(
h
 =
NULL
) {

1809  
NGX_ERROR
;

1812 
h
->
hash
 = 
r
->
hódî_hash
;

1814 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1815 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1817 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1818 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1 + h->key.len);

1819 i‡(
h
->
key
.
d©a
 =
NULL
) {

1820 
h
->
hash
 = 0;

1821  
NGX_ERROR
;

1824 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1825 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1827 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1828 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1829 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1830 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1832 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1833 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1836 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1839 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1840 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1842 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1843  
NGX_ERROR
;

1846 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1848 &
h
->
key
, &h->
vÆue
);

1853 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1857 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1865 i‡(
r
->
up°ªam
->
hódîs_ö
.
£rvî
 =
NULL
) {

1866 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1867 i‡(
h
 =
NULL
) {

1868  
NGX_ERROR
;

1871 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

1872 
	`ngx_hash
('s', 'e'), 'r'), 'v'), 'e'), 'r');

1874 
	`ngx_°r_£t
(&
h
->
key
, "Server");

1875 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1876 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "server";

1879 i‡(
r
->
up°ªam
->
hódîs_ö
.
d©e
 =
NULL
) {

1880 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1881 i‡(
h
 =
NULL
) {

1882  
NGX_ERROR
;

1885 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

1887 
	`ngx_°r_£t
(&
h
->
key
, "Date");

1888 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1889 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "date";

1894 
u
 = 
r
->
up°ªam
;

1896 i‡(
u
->
hódîs_ö
.
chunked
) {

1897 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1905 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1907 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1908 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1909 || 
˘x
->
hód


1910 || (!
u
->
hódîs_ö
.
chunked


1911 && 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0))

1913 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1916 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1917 
u
->
kì∑live
 = 0;

1919 i‡(
r
->
hódîs_ö
.
upgøde
) {

1920 
u
->
upgøde
 = 1;

1924  
NGX_OK
;

1927 i‡(
rc
 =
NGX_AGAIN
) {

1928  
NGX_AGAIN
;

1933 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1936  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1938 
	}
}

1941 
ngx_öt_t


1942 
	$ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
)

1944 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1945 
ngx_hâp_up°ªam_t
 *
u
;

1946 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1948 
u
 = 
r
->
up°ªam
;

1949 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1951 i‡(
˘x
 =
NULL
) {

1952  
NGX_ERROR
;

1955 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1957 
u
->
hódîs_ö
.
°©us_n
, 
˘x
->
hód
, u->hódîs_ö.
chunked
,

1958 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1962 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1963 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1964 || 
˘x
->
hód
)

1969 
u
->
pùe
->
Àngth
 = 0;

1970 
u
->
Àngth
 = 0;

1971 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1973 } i‡(
u
->
hódîs_ö
.
chunked
) {

1976 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_chunked_fûãr
;

1977 
u
->
pùe
->
Àngth
 = 3;

1979 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
;

1980 
u
->
Àngth
 = 1;

1982 } i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

1985 
u
->
pùe
->
Àngth
 = 0;

1986 
u
->
Àngth
 = 0;

1987 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1992 
u
->
pùe
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1993 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1996  
NGX_OK
;

1997 
	}
}

2000 
ngx_öt_t


2001 
	$ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

2003 
ngx_buf_t
 *
b
;

2004 
ngx_chaö_t
 *
˛
;

2005 
ngx_hâp_ªque°_t
 *
r
;

2007 i‡(
buf
->
pos
 =buf->
œ°
) {

2008  
NGX_OK
;

2011 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

2012 i‡(
˛
 =
NULL
) {

2013  
NGX_ERROR
;

2016 
b
 = 
˛
->
buf
;

2018 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

2019 
b
->
shadow
 = 
buf
;

2020 
b
->
èg
 = 
p
->tag;

2021 
b
->
œ°_shadow
 = 1;

2022 
b
->
ªcy˛ed
 = 1;

2023 
buf
->
shadow
 = 
b
;

2025 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

2027 i‡(
p
->
ö
) {

2028 *
p
->
œ°_ö
 = 
˛
;

2030 
p
->
ö
 = 
˛
;

2032 
p
->
œ°_ö
 = &
˛
->
√xt
;

2034 i‡(
p
->
Àngth
 == -1) {

2035  
NGX_OK
;

2038 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

2040 i‡(
p
->
Àngth
 == 0) {

2041 
r
 = 
p
->
öput_˘x
;

2042 
p
->
up°ªam_d⁄e
 = 1;

2043 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2045 } i‡(
p
->
Àngth
 < 0) {

2046 
r
 = 
p
->
öput_˘x
;

2047 
p
->
up°ªam_d⁄e
 = 1;

2049 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2054  
NGX_OK
;

2055 
	}
}

2058 
ngx_öt_t


2059 
	$ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

2061 
ngx_öt_t
 
rc
;

2062 
ngx_buf_t
 *
b
, **
¥ev
;

2063 
ngx_chaö_t
 *
˛
;

2064 
ngx_hâp_ªque°_t
 *
r
;

2065 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2067 i‡(
buf
->
pos
 =buf->
œ°
) {

2068  
NGX_OK
;

2071 
r
 = 
p
->
öput_˘x
;

2072 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2074 i‡(
˘x
 =
NULL
) {

2075  
NGX_ERROR
;

2078 
b
 = 
NULL
;

2079 
¥ev
 = &
buf
->
shadow
;

2083 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

2085 i‡(
rc
 =
NGX_OK
) {

2089 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

2090 i‡(
˛
 =
NULL
) {

2091  
NGX_ERROR
;

2094 
b
 = 
˛
->
buf
;

2096 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

2098 
b
->
pos
 = 
buf
->pos;

2099 
b
->
°¨t
 = 
buf
->start;

2100 
b
->
íd
 = 
buf
->end;

2101 
b
->
èg
 = 
p
->tag;

2102 
b
->
ãmp‹¨y
 = 1;

2103 
b
->
ªcy˛ed
 = 1;

2105 *
¥ev
 = 
b
;

2106 
¥ev
 = &
b
->
shadow
;

2108 i‡(
p
->
ö
) {

2109 *
p
->
œ°_ö
 = 
˛
;

2111 
p
->
ö
 = 
˛
;

2113 
p
->
œ°_ö
 = &
˛
->
√xt
;

2115  
b
->
num
 = 
buf
->num;

2117 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2118 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

2120 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

2122 
buf
->
pos
 +(
size_t
Ë
˘x
->
chunked
.
size
;

2123 
b
->
œ°
 = 
buf
->
pos
;

2124 
˘x
->
chunked
.
size
 = 0;

2129 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

2130 
buf
->
pos
 = buf->
œ°
;

2131 
b
->
œ°
 = 
buf
->last;

2136 i‡(
rc
 =
NGX_DONE
) {

2140 
p
->
up°ªam_d⁄e
 = 1;

2141 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2146 i‡(
rc
 =
NGX_AGAIN
) {

2150 
p
->
Àngth
 = 
˘x
->
chunked
.length;

2157 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2160  
NGX_ERROR
;

2163 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2165 
˘x
->
chunked
.
°©e
, 
p
->
Àngth
);

2167 i‡(
b
) {

2168 
b
->
shadow
 = 
buf
;

2169 
b
->
œ°_shadow
 = 1;

2171 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2172 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

2174  
NGX_OK
;

2179 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

2180  
NGX_ERROR
;

2183  
NGX_OK
;

2184 
	}
}

2187 
ngx_öt_t


2188 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2190 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2192 
ngx_buf_t
 *
b
;

2193 
ngx_chaö_t
 *
˛
, **
Œ
;

2194 
ngx_hâp_up°ªam_t
 *
u
;

2196 
u
 = 
r
->
up°ªam
;

2198 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2199 
Œ
 = &
˛
->
√xt
;

2202 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2203 i‡(
˛
 =
NULL
) {

2204  
NGX_ERROR
;

2207 *
Œ
 = 
˛
;

2209 
˛
->
buf
->
Êush
 = 1;

2210 
˛
->
buf
->
mem‹y
 = 1;

2212 
b
 = &
u
->
buf„r
;

2214 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2215 
b
->
œ°
 +
byãs
;

2216 
˛
->
buf
->
œ°
 = 
b
->last;

2217 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2219 i‡(
u
->
Àngth
 == -1) {

2220  
NGX_OK
;

2223 
u
->
Àngth
 -
byãs
;

2225 i‡(
u
->
Àngth
 == 0) {

2226 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2229  
NGX_OK
;

2230 
	}
}

2233 
ngx_öt_t


2234 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2236 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2238 
ngx_öt_t
 
rc
;

2239 
ngx_buf_t
 *
b
, *
buf
;

2240 
ngx_chaö_t
 *
˛
, **
Œ
;

2241 
ngx_hâp_up°ªam_t
 *
u
;

2242 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2244 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2246 i‡(
˘x
 =
NULL
) {

2247  
NGX_ERROR
;

2250 
u
 = 
r
->
up°ªam
;

2251 
buf
 = &
u
->
buf„r
;

2253 
buf
->
pos
 = buf->
œ°
;

2254 
buf
->
œ°
 +
byãs
;

2256 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2257 
Œ
 = &
˛
->
√xt
;

2262 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

2264 i‡(
rc
 =
NGX_OK
) {

2268 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2269 i‡(
˛
 =
NULL
) {

2270  
NGX_ERROR
;

2273 *
Œ
 = 
˛
;

2274 
Œ
 = &
˛
->
√xt
;

2276 
b
 = 
˛
->
buf
;

2278 
b
->
Êush
 = 1;

2279 
b
->
mem‹y
 = 1;

2281 
b
->
pos
 = 
buf
->pos;

2282 
b
->
èg
 = 
u
->
ouçut
.tag;

2284 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

2285 
buf
->
pos
 +(
size_t
Ë
˘x
->
chunked
.
size
;

2286 
b
->
œ°
 = 
buf
->
pos
;

2287 
˘x
->
chunked
.
size
 = 0;

2290 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

2291 
buf
->
pos
 = buf->
œ°
;

2292 
b
->
œ°
 = 
buf
->last;

2295 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2297 
b
->
pos
, b->
œ°
 - b->pos);

2302 i‡(
rc
 =
NGX_DONE
) {

2306 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2307 
u
->
Àngth
 = 0;

2312 i‡(
rc
 =
NGX_AGAIN
) {

2318 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2321  
NGX_ERROR
;

2324  
NGX_OK
;

2325 
	}
}

2329 
	$ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2331 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2335 
	}
}

2339 
	$ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2341 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2345 
	}
}

2348 
ngx_öt_t


2349 
	$ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2350 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2352 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2354 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2356 i‡(
˘x
 =
NULL
) {

2357 
v
->
nŸ_found
 = 1;

2358  
NGX_OK
;

2361 
v
->
Àn
 = 
˘x
->
v¨s
.
ho°_hódî
.len;

2362 
v
->
vÆid
 = 1;

2363 
v
->
no_ˇchóbÀ
 = 0;

2364 
v
->
nŸ_found
 = 0;

2365 
v
->
d©a
 = 
˘x
->
v¨s
.
ho°_hódî
.data;

2367  
NGX_OK
;

2368 
	}
}

2371 
ngx_öt_t


2372 
	$ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2373 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2375 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2377 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2379 i‡(
˘x
 =
NULL
) {

2380 
v
->
nŸ_found
 = 1;

2381  
NGX_OK
;

2384 
v
->
Àn
 = 
˘x
->
v¨s
.
p‹t
.len;

2385 
v
->
vÆid
 = 1;

2386 
v
->
no_ˇchóbÀ
 = 0;

2387 
v
->
nŸ_found
 = 0;

2388 
v
->
d©a
 = 
˘x
->
v¨s
.
p‹t
.data;

2390  
NGX_OK
;

2391 
	}
}

2394 
ngx_öt_t


2395 
	$ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2396 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2398 
size_t
 
Àn
;

2399 
u_ch¨
 *
p
;

2400 
ngx_uöt_t
 
i
, 
n
;

2401 
ngx_èbÀ_ñt_t
 **
h
;

2403 
v
->
vÆid
 = 1;

2404 
v
->
no_ˇchóbÀ
 = 0;

2405 
v
->
nŸ_found
 = 0;

2407 
n
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
√…s
;

2408 
h
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
ñts
;

2410 
Àn
 = 0;

2412 
i
 = 0; i < 
n
; i++) {

2413 
Àn
 +
h
[
i
]->
vÆue
.len + (", ") - 1;

2416 i‡(
Àn
 == 0) {

2417 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2418 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

2419  
NGX_OK
;

2422 
Àn
 +
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2424 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2425 i‡(
p
 =
NULL
) {

2426  
NGX_ERROR
;

2429 
v
->
Àn
 =Üen;

2430 
v
->
d©a
 = 
p
;

2432 
i
 = 0; i < 
n
; i++) {

2433 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

2434 *
p
++ = ','; *p++ = ' ';

2437 
	`ngx_mem˝y
(
p
, 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,Ñ->c⁄√˘i⁄->addr_ãxt.
Àn
);

2439  
NGX_OK
;

2440 
	}
}

2443 
ngx_öt_t


2444 
	$ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2445 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2447 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2449 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2451 i‡(
˘x
 =
NULL
 || ctx->
öã∫Æ_body_Àngth
 < 0) {

2452 
v
->
nŸ_found
 = 1;

2453  
NGX_OK
;

2456 
v
->
vÆid
 = 1;

2457 
v
->
no_ˇchóbÀ
 = 0;

2458 
v
->
nŸ_found
 = 0;

2460 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

2462 i‡(
v
->
d©a
 =
NULL
) {

2463  
NGX_ERROR
;

2466 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%O", 
˘x
->
öã∫Æ_body_Àngth
) - v->data;

2468  
NGX_OK
;

2469 
	}
}

2472 
ngx_öt_t


2473 
	$ngx_hâp_¥oxy_öã∫Æ_chunked_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2474 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2476 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2478 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2480 i‡(
˘x
 =
NULL
 || !˘x->
öã∫Æ_chunked
) {

2481 
v
->
nŸ_found
 = 1;

2482  
NGX_OK
;

2485 
v
->
vÆid
 = 1;

2486 
v
->
no_ˇchóbÀ
 = 0;

2487 
v
->
nŸ_found
 = 0;

2489 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

2490 
v
->
Àn
 = ("chunked") - 1;

2492  
NGX_OK
;

2493 
	}
}

2496 
ngx_öt_t


2497 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2498 
size_t
 
¥efix
)

2500 
size_t
 
Àn
;

2501 
ngx_öt_t
 
rc
;

2502 
ngx_uöt_t
 
i
;

2503 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2504 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2506 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2508 
¥
 = 
∂cf
->
ªdúe˘s
->
ñts
;

2510 i‡(
¥
 =
NULL
) {

2511  
NGX_DECLINED
;

2514 
Àn
 = 
h
->
vÆue
.À¿- 
¥efix
;

2516 
i
 = 0; i < 
∂cf
->
ªdúe˘s
->
√…s
; i++) {

2517 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2519 i‡(
rc
 !
NGX_DECLINED
) {

2520  
rc
;

2524  
NGX_DECLINED
;

2525 
	}
}

2528 
ngx_öt_t


2529 
	$ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
)

2531 
size_t
 
¥efix
;

2532 
u_ch¨
 *
p
;

2533 
ngx_öt_t
 
rc
, 
rv
;

2534 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2536 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
h
->
vÆue
.
d©a
, ';');

2537 i‡(
p
 =
NULL
) {

2538  
NGX_DECLINED
;

2541 
¥efix
 = 
p
 + 1 - 
h
->
vÆue
.
d©a
;

2543 
rv
 = 
NGX_DECLINED
;

2545 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2547 i‡(
∂cf
->
cookõ_domaös
) {

2548 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "domain=", 7 - 1);

2550 i‡(
p
) {

2551 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 7,

2552 
∂cf
->
cookõ_domaös
);

2553 i‡(
rc
 =
NGX_ERROR
) {

2554  
NGX_ERROR
;

2557 i‡(
rc
 !
NGX_DECLINED
) {

2558 
rv
 = 
rc
;

2563 i‡(
∂cf
->
cookõ_∑ths
) {

2564 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "path=", 5 - 1);

2566 i‡(
p
) {

2567 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 5,

2568 
∂cf
->
cookõ_∑ths
);

2569 i‡(
rc
 =
NGX_ERROR
) {

2570  
NGX_ERROR
;

2573 i‡(
rc
 !
NGX_DECLINED
) {

2574 
rv
 = 
rc
;

2579  
rv
;

2580 
	}
}

2583 
ngx_öt_t


2584 
	$ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2585 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
)

2587 
size_t
 
Àn
, 
¥efix
;

2588 
u_ch¨
 *
p
;

2589 
ngx_öt_t
 
rc
;

2590 
ngx_uöt_t
 
i
;

2591 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2593 
¥efix
 = 
vÆue
 - 
h
->vÆue.
d©a
;

2595 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
, ';');

2597 
Àn
 = 
p
 ? (
size_t
Ë’ - 
vÆue
Ë: (
h
->vÆue.À¿- 
¥efix
);

2599 
¥
 = 
ªwrôes
->
ñts
;

2601 
i
 = 0; i < 
ªwrôes
->
√…s
; i++) {

2602 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2604 i‡(
rc
 !
NGX_DECLINED
) {

2605  
rc
;

2609  
NGX_DECLINED
;

2610 
	}
}

2613 
ngx_öt_t


2614 
	$ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2615 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2617 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2619 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2620  
NGX_ERROR
;

2623 i‡(
∑âîn
.
Àn
 >Üen

2624 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
∑âîn
.data,

2625 
∑âîn
.
Àn
) != 0)

2627  
NGX_DECLINED
;

2630 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2631  
NGX_ERROR
;

2634  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
∑âîn
.
Àn
, &
ª∂a˚mít
);

2635 
	}
}

2638 #i‡(
NGX_PCRE
)

2640 
ngx_öt_t


2641 
	$ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2642 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2644 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2646 
∑âîn
.
Àn
 =Üen;

2647 
∑âîn
.
d©a
 = 
h
->
vÆue
.d©®+ 
¥efix
;

2649 i‡(
	`ngx_hâp_ªgex_exec
(
r
, 
¥
->
∑âîn
.
ªgex
, &∑âînË!
NGX_OK
) {

2650  
NGX_DECLINED
;

2653 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2654  
NGX_ERROR
;

2657 i‡(
¥efix
 =0 && 
h
->
vÆue
.
Àn
 ==Üen) {

2658 
h
->
vÆue
 = 
ª∂a˚mít
;

2659  
NGX_OK
;

2662  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2663 
	}
}

2668 
ngx_öt_t


2669 
	$ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2670 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2672 
u_ch¨
 *
p
;

2673 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2675 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2676  
NGX_ERROR
;

2679 
p
 = 
h
->
vÆue
.
d©a
 + 
¥efix
;

2681 i‡(
p
[0] == '.') {

2682 
p
++;

2683 
¥efix
++;

2684 
Àn
--;

2687 i‡(
∑âîn
.
Àn
 !À¿|| 
	`ngx_r°∫ˇ£cmp
’©ã∫.
d©a
, 
p
,Üen) != 0) {

2688  
NGX_DECLINED
;

2691 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2692  
NGX_ERROR
;

2695  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2696 
	}
}

2699 
ngx_öt_t


2700 
	$ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
,

2701 
size_t
 
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
)

2703 
u_ch¨
 *
p
, *
d©a
;

2704 
size_t
 
√w_Àn
;

2706 
√w_Àn
 = 
ª∂a˚mít
->
Àn
 + 
h
->
vÆue
.len -Üen;

2708 i‡(
ª∂a˚mít
->
Àn
 >Üen) {

2710 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
√w_Àn
 + 1);

2711 i‡(
d©a
 =
NULL
) {

2712  
NGX_ERROR
;

2715 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

2716 
p
 = 
	`ngx_c›y
’, 
ª∂a˚mít
->
d©a
,Ñïœ˚mít->
Àn
);

2718 
	`ngx_mem˝y
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2719 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
 + 1);

2721 
h
->
vÆue
.
d©a
 = data;

2724 
p
 = 
	`ngx_c›y
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
ª∂a˚mít
->data,

2725 
ª∂a˚mít
->
Àn
);

2727 
	`ngx_memmove
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2728 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
 + 1);

2731 
h
->
vÆue
.
Àn
 = 
√w_Àn
;

2733  
NGX_OK
;

2734 
	}
}

2737 
ngx_öt_t


2738 
	$ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2740 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2742 
v
 = 
ngx_hâp_¥oxy_v¨s
; v->
«me
.
Àn
; v++) {

2743 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2744 i‡(
v¨
 =
NULL
) {

2745  
NGX_ERROR
;

2748 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2749 
v¨
->
d©a
 = 
v
->data;

2752  
NGX_OK
;

2753 
	}
}

2757 
	$ngx_hâp_¥oxy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2759 
ngx_hâp_¥oxy_maö_c⁄f_t
 *
c⁄f
;

2761 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_maö_c⁄f_t
));

2762 i‡(
c⁄f
 =
NULL
) {

2763  
NULL
;

2766 #i‡(
NGX_HTTP_CACHE
)

2767 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

2768 (
ngx_hâp_fûe_ˇche_t
 *))

2769 !
NGX_OK
)

2771  
NULL
;

2775  
c⁄f
;

2776 
	}
}

2780 
	$ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2782 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
;

2784 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_loc_c⁄f_t
));

2785 i‡(
c⁄f
 =
NULL
) {

2786  
NULL
;

2827 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2828 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2829 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

2830 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2831 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

2832 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2833 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

2835 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2837 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2838 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2839 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2840 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2842 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2843 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2844 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

2846 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2847 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2848 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2850 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2851 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2853 #i‡(
NGX_HTTP_CACHE
)

2854 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

2855 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2856 
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
 = 
NGX_CONF_UNSET
;

2857 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2858 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2859 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2860 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2861 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2862 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

2863 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

2864 
c⁄f
->
up°ªam
.
ˇche_c⁄vît_hód
 = 
NGX_CONF_UNSET
;

2865 
c⁄f
->
up°ªam
.
ˇche_background_upd©e
 = 
NGX_CONF_UNSET
;

2868 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2869 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2871 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2873 #i‡(
NGX_HTTP_SSL
)

2874 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

2875 
c⁄f
->
up°ªam
.
s¶_£rvî_«me
 = 
NGX_CONF_UNSET
;

2876 
c⁄f
->
up°ªam
.
s¶_vîify
 = 
NGX_CONF_UNSET
;

2877 
c⁄f
->
s¶_vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

2878 
c⁄f
->
s¶_∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

2882 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2884 
c⁄f
->
ªdúe˘
 = 
NGX_CONF_UNSET
;

2885 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2887 
c⁄f
->
cookõ_domaös
 = 
NGX_CONF_UNSET_PTR
;

2888 
c⁄f
->
cookõ_∑ths
 = 
NGX_CONF_UNSET_PTR
;

2890 
c⁄f
->
hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

2892 
c⁄f
->
hódîs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

2893 
c⁄f
->
hódîs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

2895 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "proxy");

2897  
c⁄f
;

2898 
	}
}

2902 
	$ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2904 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2905 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2907 
u_ch¨
 *
p
;

2908 
size_t
 
size
;

2909 
ngx_öt_t
 
rc
;

2910 
ngx_hash_öô_t
 
hash
;

2911 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2912 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2913 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2915 #i‡(
NGX_HTTP_CACHE
)

2917 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

2918 
c⁄f
->
up°ªam
.
ˇche
 = 0;

2921 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

2922 
c⁄f
->
up°ªam
.
°‹e
 = 0;

2927 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

2928 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2929 
¥ev
->
up°ªam
.
°‹e
, 0);

2931 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2932 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2935 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2936 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2938 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

2939 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

2941 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2942 
¥ev
->
up°ªam
.
buf„rög
, 1);

2944 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

2945 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

2947 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2948 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2950 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

2951 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

2953 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2954 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2956 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2957 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2959 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2960 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2962 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2963 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2965 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

2966 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

2968 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2969 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2971 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2972 
¥ev
->
up°ªam
.
buf„r_size
,

2973 (
size_t
Ë
ngx_∑gesize
);

2975 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

2976 
¥ev
->
up°ªam
.
limô_øã
, 0);

2978 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2979 8, 
ngx_∑gesize
);

2981 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2982 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2984  
NGX_CONF_ERROR
;

2988 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2989 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2990 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2994 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2995 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2996 
NGX_CONF_UNSET_SIZE
);

2998 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2999 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

3001 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

3002 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

3005 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

3006 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3011  
NGX_CONF_ERROR
;

3014 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


3015 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

3017 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3021  
NGX_CONF_ERROR
;

3025 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

3026 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

3027 
NGX_CONF_UNSET_SIZE
);

3029 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

3030 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

3032 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

3033 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

3036 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

3037 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3042  
NGX_CONF_ERROR
;

3045 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

3046 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

3047 
NGX_CONF_UNSET_SIZE
);

3049 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

3050 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

3052 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

3053 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

3056 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

3057 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

3059 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3065  
NGX_CONF_ERROR
;

3069 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

3070 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

3071 
NGX_CONF_BITMASK_SET
);

3074 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

3075 
¥ev
->
up°ªam
.
√xt_up°ªam
,

3076 (
NGX_CONF_BITMASK_SET


3077 |
NGX_HTTP_UPSTREAM_FT_ERROR


3078 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

3080 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

3081 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


3082 |
NGX_HTTP_UPSTREAM_FT_OFF
;

3085 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

3086 
¥ev
->
up°ªam
.
ãmp_∑th
,

3087 &
ngx_hâp_¥oxy_ãmp_∑th
)

3088 !
NGX_OK
)

3090  
NGX_CONF_ERROR
;

3094 #i‡(
NGX_HTTP_CACHE
)

3096 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

3097 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

3098 
¥ev
->
up°ªam
.
ˇche
, 0);

3100 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

3101 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

3104 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

3105 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

3107 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

3109 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3111 &
shm_z⁄e
->
shm
.
«me
);

3113  
NGX_CONF_ERROR
;

3116 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

3117 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

3119 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
,

3120 
¥ev
->
up°ªam
.
ˇche_max_ønge_off£t
,

3121 
NGX_MAX_OFF_T_VALUE
);

3123 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

3124 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

3125 (
NGX_CONF_BITMASK_SET


3126 |
NGX_HTTP_UPSTREAM_FT_OFF
));

3128 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

3129 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


3130 |
NGX_HTTP_UPSTREAM_FT_OFF
;

3133 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

3134 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

3137 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

3138 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

3141 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

3143 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

3144 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

3146 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

3147 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

3149 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

3150 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

3152 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

3153 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

3156 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

3157 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

3159 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

3160 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

3162 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

3163 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

3165 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

3166 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

3168 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_c⁄vît_hód
,

3169 
¥ev
->
up°ªam
.
ˇche_c⁄vît_hód
, 1);

3171 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_background_upd©e
,

3172 
¥ev
->
up°ªam
.
ˇche_background_upd©e
, 0);

3176 i‡(
c⁄f
->
mëhod
 =
NULL
) {

3177 
c⁄f
->
mëhod
 = 
¥ev
->method;

3180 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

3181 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

3182 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

3183 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

3185 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

3186 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

3188 #i‡(
NGX_HTTP_SSL
)

3190 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

3191 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

3193 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

3194 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


3195 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

3197 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

3200 i‡(
c⁄f
->
up°ªam
.
s¶_«me
 =
NULL
) {

3201 
c⁄f
->
up°ªam
.
s¶_«me
 = 
¥ev
->upstream.ssl_name;

3204 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£rvî_«me
,

3205 
¥ev
->
up°ªam
.
s¶_£rvî_«me
, 0);

3206 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_vîify
,

3207 
¥ev
->
up°ªam
.
s¶_vîify
, 0);

3208 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
s¶_vîify_dïth
,

3209 
¥ev
->
s¶_vîify_dïth
, 1);

3210 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_åu°ed_˚πifiˇã
,

3211 
¥ev
->
s¶_åu°ed_˚πifiˇã
, "");

3212 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_¸l
, 
¥ev
->ssl_crl, "");

3214 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã
,

3215 
¥ev
->
s¶_˚πifiˇã
, "");

3216 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã_key
,

3217 
¥ev
->
s¶_˚πifiˇã_key
, "");

3218 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
s¶_∑ssw‹ds
, 
¥ev
->s¶_∑ssw‹ds, 
NULL
);

3220 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

3221  
NGX_CONF_ERROR
;

3226 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªdúe˘
, 
¥ev
->redirect, 1);

3228 i‡(
c⁄f
->
ªdúe˘
) {

3230 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

3231 
c⁄f
->
ªdúe˘s
 = 
¥ev
->redirects;

3234 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
 && c⁄f->
uæ
.
d©a
) {

3236 
c⁄f
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3237 (
ngx_hâp_¥oxy_ªwrôe_t
));

3238 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

3239  
NGX_CONF_ERROR
;

3242 
¥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ªdúe˘s
);

3243 i‡(
¥
 =
NULL
) {

3244  
NGX_CONF_ERROR
;

3247 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
,

3248 (
ngx_hâp_com∂ex_vÆue_t
));

3250 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3252 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3254 i‡(
c⁄f
->
v¨s
.
uri
.
Àn
) {

3255 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
c⁄f
->
uæ
;

3256 
¥
->
ª∂a˚mít
.
vÆue
 = 
c⁄f
->
loˇti⁄
;

3259 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
c⁄f
->
uæ
.len

3262 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3263 i‡(
p
 =
NULL
) {

3264  
NGX_CONF_ERROR
;

3267 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3269 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
uæ
.
d©a
, c⁄f->uæ.
Àn
);

3270 *
p
 = '/';

3272 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3277 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_domaös
, 
¥ev
->cookõ_domaös, 
NULL
);

3279 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_∑ths
, 
¥ev
->cookõ_∑ths, 
NULL
);

3281 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hâp_vîsi⁄
, 
¥ev
->http_version,

3282 
NGX_HTTP_VERSION_10
);

3284 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_max_size
,

3285 
¥ev
->
hódîs_hash_max_size
, 512);

3287 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_buckë_size
,

3288 
¥ev
->
hódîs_hash_buckë_size
, 64);

3290 
c⁄f
->
hódîs_hash_buckë_size
 = 
	`ngx_Æign
(conf->headers_hash_bucket_size,

3291 
ngx_ˇchñöe_size
);

3293 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3294 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3295 
hash
.
«me
 = "proxy_headers_hash";

3297 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

3298 &
¥ev
->
up°ªam
, 
ngx_hâp_¥oxy_hide_hódîs
, &
hash
)

3299 !
NGX_OK
)

3301  
NGX_CONF_ERROR
;

3304 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3306 i‡(
˛cf
->
n⁄ame


3307 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
¥oxy_Àngths
 == NULL)

3309 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

3310 
c⁄f
->
loˇti⁄
 = 
¥ev
->location;

3311 
c⁄f
->
v¨s
 = 
¥ev
->vars;

3313 
c⁄f
->
¥oxy_Àngths
 = 
¥ev
->proxy_lengths;

3314 
c⁄f
->
¥oxy_vÆues
 = 
¥ev
->proxy_values;

3316 #i‡(
NGX_HTTP_SSL
)

3317 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

3321 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


3322 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
¥oxy_Àngths
))

3324 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3327 i‡(
c⁄f
->
body_sour˚
.
d©a
 =
NULL
) {

3328 
c⁄f
->
body_Êushes
 = 
¥ev
->body_flushes;

3329 
c⁄f
->
body_sour˚
 = 
¥ev
->body_source;

3330 
c⁄f
->
body_Àngths
 = 
¥ev
->body_lengths;

3331 
c⁄f
->
body_vÆues
 = 
¥ev
->body_values;

3334 i‡(
c⁄f
->
body_sour˚
.
d©a
 && c⁄f->
body_Àngths
 =
NULL
) {

3336 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3338 
sc
.
cf
 = cf;

3339 
sc
.
sour˚
 = &
c⁄f
->
body_sour˚
;

3340 
sc
.
Êushes
 = &
c⁄f
->
body_Êushes
;

3341 
sc
.
Àngths
 = &
c⁄f
->
body_Àngths
;

3342 
sc
.
vÆues
 = &
c⁄f
->
body_vÆues
;

3343 
sc
.
com∂ëe_Àngths
 = 1;

3344 
sc
.
com∂ëe_vÆues
 = 1;

3346 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3347  
NGX_CONF_ERROR
;

3351 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3352 
c⁄f
->
hódîs
 = 
¥ev
->headers;

3353 #i‡(
NGX_HTTP_CACHE
)

3354 
c⁄f
->
hódîs_ˇche
 = 
¥ev
->headers_cache;

3356 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

3359 
rc
 = 
	`ngx_hâp_¥oxy_öô_hódîs
(
cf
, 
c⁄f
, &c⁄f->
hódîs
,

3360 
ngx_hâp_¥oxy_hódîs
);

3361 i‡(
rc
 !
NGX_OK
) {

3362  
NGX_CONF_ERROR
;

3365 #i‡(
NGX_HTTP_CACHE
)

3367 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

3368 
rc
 = 
	`ngx_hâp_¥oxy_öô_hódîs
(
cf
, 
c⁄f
, &c⁄f->
hódîs_ˇche
,

3369 
ngx_hâp_¥oxy_ˇche_hódîs
);

3370 i‡(
rc
 !
NGX_OK
) {

3371  
NGX_CONF_ERROR
;

3382 i‡(
¥ev
->
hódîs
.
hash
.
buckës
 =
NULL


3383 && 
c⁄f
->
hódîs_sour˚
 =
¥ev
->headers_source)

3385 
¥ev
->
hódîs
 = 
c⁄f
->headers;

3386 #i‡(
NGX_HTTP_CACHE
)

3387 
¥ev
->
hódîs_ˇche
 = 
c⁄f
->headers_cache;

3391  
NGX_CONF_OK
;

3392 
	}
}

3395 
ngx_öt_t


3396 
	$ngx_hâp_¥oxy_öô_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,

3397 
ngx_hâp_¥oxy_hódîs_t
 *
hódîs
, 
ngx_keyvÆ_t
 *
deÁu…_hódîs
)

3399 
u_ch¨
 *
p
;

3400 
size_t
 
size
;

3401 
uöçå_t
 *
code
;

3402 
ngx_uöt_t
 
i
;

3403 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

3404 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

3405 
ngx_hash_key_t
 *
hk
;

3406 
ngx_hash_öô_t
 
hash
;

3407 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3408 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

3410 i‡(
hódîs
->
hash
.
buckës
) {

3411  
NGX_OK
;

3414 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

3415 !
NGX_OK
)

3417  
NGX_ERROR
;

3420 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

3421 !
NGX_OK
)

3423  
NGX_ERROR
;

3426 
hódîs
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

3427 i‡(
hódîs
->
Àngths
 =
NULL
) {

3428  
NGX_ERROR
;

3431 
hódîs
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

3432 i‡(
hódîs
->
vÆues
 =
NULL
) {

3433  
NGX_ERROR
;

3436 i‡(
c⁄f
->
hódîs_sour˚
) {

3438 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

3439 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

3441 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3442 i‡(
s
 =
NULL
) {

3443  
NGX_ERROR
;

3446 *
s
 = 
§c
[
i
];

3450 
h
 = 
deÁu…_hódîs
;

3452 
h
->
key
.
Àn
) {

3454 
§c
 = 
hódîs_mîged
.
ñts
;

3455 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

3456 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

3457 
√xt
;

3461 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3462 i‡(
s
 =
NULL
) {

3463  
NGX_ERROR
;

3466 *
s
 = *
h
;

3468 
√xt
:

3470 
h
++;

3474 
§c
 = 
hódîs_mîged
.
ñts
;

3475 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

3477 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

3478 i‡(
hk
 =
NULL
) {

3479  
NGX_ERROR
;

3482 
hk
->
key
 = 
§c
[
i
].key;

3483 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3484 
hk
->
vÆue
 = (*) 1;

3486 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

3490 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
,

3491 (
ngx_hâp_s¸ùt_c›y_code_t
));

3492 i‡(
c›y
 =
NULL
) {

3493  
NGX_ERROR
;

3496 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

3497 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3498 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

3500 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3501 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

3502 & ~((
uöçå_t
) - 1);

3504 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, 
size
);

3505 i‡(
c›y
 =
NULL
) {

3506  
NGX_ERROR
;

3509 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3510 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

3512 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3513 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3515 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3517 
sc
.
cf
 = cf;

3518 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3519 
sc
.
Êushes
 = &
hódîs
->flushes;

3520 
sc
.
Àngths
 = &
hódîs
->lengths;

3521 
sc
.
vÆues
 = &
hódîs
->values;

3523 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3524  
NGX_ERROR
;

3527 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
, (
uöçå_t
));

3528 i‡(
code
 =
NULL
) {

3529  
NGX_ERROR
;

3532 *
code
 = (
uöçå_t
Ë
NULL
;

3534 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, (
uöçå_t
));

3535 i‡(
code
 =
NULL
) {

3536  
NGX_ERROR
;

3539 *
code
 = (
uöçå_t
Ë
NULL
;

3542 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
, (
uöçå_t
));

3543 i‡(
code
 =
NULL
) {

3544  
NGX_ERROR
;

3547 *
code
 = (
uöçå_t
Ë
NULL
;

3550 
hash
.hash = &
hódîs
->hash;

3551 
hash
.
key
 = 
ngx_hash_key_lc
;

3552 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3553 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3554 
hash
.
«me
 = "proxy_headers_hash";

3555 
hash
.
poﬁ
 = 
cf
->pool;

3556 
hash
.
ãmp_poﬁ
 = 
NULL
;

3558  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3559 
	}
}

3563 
	$ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3565 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3567 
size_t
 
add
;

3568 
u_sh‹t
 
p‹t
;

3569 
ngx_°r_t
 *
vÆue
, *
uæ
;

3570 
ngx_uæ_t
 
u
;

3571 
ngx_uöt_t
 
n
;

3572 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3573 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3575 i‡(
∂cf
->
up°ªam
.up°ªam ||Ölcf->
¥oxy_Àngths
) {

3579 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3581 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3583 i‡(
˛cf
->
«me
.
Àn
 && clcf->«me.
d©a
[clcf->name.len - 1] == '/') {

3584 
˛cf
->
auto_ªdúe˘
 = 1;

3587 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3589 
uæ
 = &
vÆue
[1];

3591 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3593 i‡(
n
) {

3595 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3597 
sc
.
cf
 = cf;

3598 
sc
.
sour˚
 = 
uæ
;

3599 
sc
.
Àngths
 = &
∂cf
->
¥oxy_Àngths
;

3600 
sc
.
vÆues
 = &
∂cf
->
¥oxy_vÆues
;

3601 
sc
.
v¨übÀs
 = 
n
;

3602 
sc
.
com∂ëe_Àngths
 = 1;

3603 
sc
.
com∂ëe_vÆues
 = 1;

3605 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3606  
NGX_CONF_ERROR
;

3609 #i‡(
NGX_HTTP_SSL
)

3610 
∂cf
->
s¶
 = 1;

3613  
NGX_CONF_OK
;

3616 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

3617 
add
 = 7;

3618 
p‹t
 = 80;

3620 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "https://", 8) == 0) {

3622 #i‡(
NGX_HTTP_SSL
)

3623 
∂cf
->
s¶
 = 1;

3625 
add
 = 8;

3626 
p‹t
 = 443;

3628 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3630  
NGX_CONF_ERROR
;

3634 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalid URLÖrefix");

3635  
NGX_CONF_ERROR
;

3638 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3640 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

3641 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

3642 
u
.
deÁu…_p‹t
 = 
p‹t
;

3643 
u
.
uri_∑π
 = 1;

3644 
u
.
no_ªsﬁve
 = 1;

3646 
∂cf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3647 i‡(
∂cf
->
up°ªam
.up°ªam =
NULL
) {

3648  
NGX_CONF_ERROR
;

3651 
∂cf
->
v¨s
.
schema
.
Àn
 = 
add
;

3652 
∂cf
->
v¨s
.
schema
.
d©a
 = 
uæ
->data;

3653 
∂cf
->
v¨s
.
key_°¨t
 =Ölcf->v¨s.
schema
;

3655 
	`ngx_hâp_¥oxy_£t_v¨s
(&
u
, &
∂cf
->
v¨s
);

3657 
∂cf
->
loˇti⁄
 = 
˛cf
->
«me
;

3659 i‡(
˛cf
->
«med


3660 #i‡(
NGX_PCRE
)

3661 || 
˛cf
->
ªgex


3663 || 
˛cf
->
n⁄ame
)

3665 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3666 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3672  
NGX_CONF_ERROR
;

3675 
∂cf
->
loˇti⁄
.
Àn
 = 0;

3678 
∂cf
->
uæ
 = *url;

3680  
NGX_CONF_OK
;

3681 
	}
}

3685 
	$ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3687 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3689 
u_ch¨
 *
p
;

3690 
ngx_°r_t
 *
vÆue
;

3691 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3692 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3694 i‡(
∂cf
->
ªdúe˘
 == 0) {

3695  
NGX_CONF_OK
;

3698 
∂cf
->
ªdúe˘
 = 1;

3700 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3702 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3703 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3704 
∂cf
->
ªdúe˘
 = 0;

3705 
∂cf
->
ªdúe˘s
 = 
NULL
;

3706  
NGX_CONF_OK
;

3709 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "false") == 0) {

3710 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

3712 
∂cf
->
ªdúe˘
 = 0;

3713 
∂cf
->
ªdúe˘s
 = 
NULL
;

3714  
NGX_CONF_OK
;

3717 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") != 0) {

3718 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3719 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3720  
NGX_CONF_ERROR
;

3724 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3725 
∂cf
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3726 (
ngx_hâp_¥oxy_ªwrôe_t
));

3727 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3728  
NGX_CONF_ERROR
;

3732 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
ªdúe˘s
);

3733 i‡(
¥
 =
NULL
) {

3734  
NGX_CONF_ERROR
;

3737 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") == 0) {

3738 i‡(
∂cf
->
¥oxy_Àngths
) {

3739 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3742  
NGX_CONF_ERROR
;

3745 i‡(
∂cf
->
uæ
.
d©a
 =
NULL
) {

3746 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3749  
NGX_CONF_ERROR
;

3752 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3754 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
, (
ngx_hâp_com∂ex_vÆue_t
));

3756 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3758 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3759 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
∂cf
->
uæ
;

3760 
¥
->
ª∂a˚mít
.
vÆue
 = 
∂cf
->
loˇti⁄
;

3763 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
∂cf
->
uæ
.len + ("/") - 1;

3765 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3766 i‡(
p
 =
NULL
) {

3767  
NGX_CONF_ERROR
;

3770 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3772 
p
 = 
	`ngx_˝ymem
’, 
∂cf
->
uæ
.
d©a
,Ölcf->uæ.
Àn
);

3773 *
p
 = '/';

3775 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3778  
NGX_CONF_OK
;

3782 i‡(
vÆue
[1].
d©a
[0] == '~') {

3783 
vÆue
[1].
Àn
--;

3784 
vÆue
[1].
d©a
++;

3786 i‡(
vÆue
[1].
d©a
[0] == '*') {

3787 
vÆue
[1].
Àn
--;

3788 
vÆue
[1].
d©a
++;

3790 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3791  
NGX_CONF_ERROR
;

3795 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3796  
NGX_CONF_ERROR
;

3802 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3804 
ccv
.
cf
 = cf;

3805 
ccv
.
vÆue
 = &value[1];

3806 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3808 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3809  
NGX_CONF_ERROR
;

3812 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3816 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3818 
ccv
.
cf
 = cf;

3819 
ccv
.
vÆue
 = &value[2];

3820 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3822 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3823  
NGX_CONF_ERROR
;

3826  
NGX_CONF_OK
;

3827 
	}
}

3831 
	$ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3833 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3835 
ngx_°r_t
 *
vÆue
;

3836 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3837 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3839 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3840  
NGX_CONF_OK
;

3843 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3845 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3847 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3848 
∂cf
->
cookõ_domaös
 = 
NULL
;

3849  
NGX_CONF_OK
;

3852 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3853 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3854  
NGX_CONF_ERROR
;

3857 i‡(
∂cf
->
cookõ_domaös
 =
NGX_CONF_UNSET_PTR
) {

3858 
∂cf
->
cookõ_domaös
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3859 (
ngx_hâp_¥oxy_ªwrôe_t
));

3860 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3861  
NGX_CONF_ERROR
;

3865 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_domaös
);

3866 i‡(
¥
 =
NULL
) {

3867  
NGX_CONF_ERROR
;

3870 i‡(
vÆue
[1].
d©a
[0] == '~') {

3871 
vÆue
[1].
Àn
--;

3872 
vÆue
[1].
d©a
++;

3874 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3875  
NGX_CONF_ERROR
;

3880 i‡(
vÆue
[1].
d©a
[0] == '.') {

3881 
vÆue
[1].
Àn
--;

3882 
vÆue
[1].
d©a
++;

3885 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3887 
ccv
.
cf
 = cf;

3888 
ccv
.
vÆue
 = &value[1];

3889 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3891 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3892  
NGX_CONF_ERROR
;

3895 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
;

3897 i‡(
vÆue
[2].
d©a
[0] == '.') {

3898 
vÆue
[2].
Àn
--;

3899 
vÆue
[2].
d©a
++;

3903 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3905 
ccv
.
cf
 = cf;

3906 
ccv
.
vÆue
 = &value[2];

3907 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3909 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3910  
NGX_CONF_ERROR
;

3913  
NGX_CONF_OK
;

3914 
	}
}

3918 
	$ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3920 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3922 
ngx_°r_t
 *
vÆue
;

3923 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3924 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3926 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3927  
NGX_CONF_OK
;

3930 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3932 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3934 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3935 
∂cf
->
cookõ_∑ths
 = 
NULL
;

3936  
NGX_CONF_OK
;

3939 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3940 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3941  
NGX_CONF_ERROR
;

3944 i‡(
∂cf
->
cookõ_∑ths
 =
NGX_CONF_UNSET_PTR
) {

3945 
∂cf
->
cookõ_∑ths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3946 (
ngx_hâp_¥oxy_ªwrôe_t
));

3947 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3948  
NGX_CONF_ERROR
;

3952 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_∑ths
);

3953 i‡(
¥
 =
NULL
) {

3954  
NGX_CONF_ERROR
;

3957 i‡(
vÆue
[1].
d©a
[0] == '~') {

3958 
vÆue
[1].
Àn
--;

3959 
vÆue
[1].
d©a
++;

3961 i‡(
vÆue
[1].
d©a
[0] == '*') {

3962 
vÆue
[1].
Àn
--;

3963 
vÆue
[1].
d©a
++;

3965 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3966  
NGX_CONF_ERROR
;

3970 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3971  
NGX_CONF_ERROR
;

3977 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3979 
ccv
.
cf
 = cf;

3980 
ccv
.
vÆue
 = &value[1];

3981 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3983 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3984  
NGX_CONF_ERROR
;

3987 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3990 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3992 
ccv
.
cf
 = cf;

3993 
ccv
.
vÆue
 = &value[2];

3994 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3996 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3997  
NGX_CONF_ERROR
;

4000  
NGX_CONF_OK
;

4001 
	}
}

4004 
ngx_öt_t


4005 
	$ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
,

4006 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

4008 #i‡(
NGX_PCRE
)

4009 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4010 
ngx_ªgex_compûe_t
 
rc
;

4012 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4014 
rc
.
∑âîn
 = *
ªgex
;

4015 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4016 
rc
.
îr
.
d©a
 = 
îr°r
;

4018 i‡(
ˇ£Àss
) {

4019 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4022 
¥
->
∑âîn
.
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4023 i‡(
¥
->
∑âîn
.
ªgex
 =
NULL
) {

4024  
NGX_ERROR
;

4027 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
;

4029  
NGX_OK
;

4033 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4034 "usögÑegex \"%V\"Ñequúe†PCREÜibøry", 
ªgex
);

4035  
NGX_ERROR
;

4038 
	}
}

4042 
	$ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4044 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4046 
ngx_°r_t
 *
vÆue
;

4047 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4049 i‡(
∂cf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

4053 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4055 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4056 
∂cf
->
up°ªam
.
°‹e
 = 0;

4057  
NGX_CONF_OK
;

4060 #i‡(
NGX_HTTP_CACHE
)

4061 i‡(
∂cf
->
up°ªam
.
ˇche
 > 0) {

4066 
∂cf
->
up°ªam
.
°‹e
 = 1;

4068 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

4069  
NGX_CONF_OK
;

4073 
vÆue
[1].
Àn
++;

4075 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4077 
sc
.
cf
 = cf;

4078 
sc
.
sour˚
 = &
vÆue
[1];

4079 
sc
.
Àngths
 = &
∂cf
->
up°ªam
.
°‹e_Àngths
;

4080 
sc
.
vÆues
 = &
∂cf
->
up°ªam
.
°‹e_vÆues
;

4081 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

4082 
sc
.
com∂ëe_Àngths
 = 1;

4083 
sc
.
com∂ëe_vÆues
 = 1;

4085 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4086  
NGX_CONF_ERROR
;

4089  
NGX_CONF_OK
;

4090 
	}
}

4093 #i‡(
NGX_HTTP_CACHE
)

4096 
	$ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4098 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4100 
ngx_°r_t
 *
vÆue
;

4101 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4102 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4104 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4106 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

4110 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4111 
∂cf
->
up°ªam
.
ˇche
 = 0;

4112  
NGX_CONF_OK
;

4115 i‡(
∂cf
->
up°ªam
.
°‹e
 > 0) {

4119 
∂cf
->
up°ªam
.
ˇche
 = 1;

4121 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4123 
ccv
.
cf
 = cf;

4124 
ccv
.
vÆue
 = &value[1];

4125 
ccv
.
com∂ex_vÆue
 = &
cv
;

4127 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4128  
NGX_CONF_ERROR
;

4131 i‡(
cv
.
Àngths
 !
NULL
) {

4133 
∂cf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

4134 (
ngx_hâp_com∂ex_vÆue_t
));

4135 i‡(
∂cf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

4136  
NGX_CONF_ERROR
;

4139 *
∂cf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

4141  
NGX_CONF_OK
;

4144 
∂cf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

4145 &
ngx_hâp_¥oxy_moduÀ
);

4146 i‡(
∂cf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

4147  
NGX_CONF_ERROR
;

4150  
NGX_CONF_OK
;

4151 
	}
}

4155 
	$ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4157 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4159 
ngx_°r_t
 *
vÆue
;

4160 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4162 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4164 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

4168 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4170 
ccv
.
cf
 = cf;

4171 
ccv
.
vÆue
 = &value[1];

4172 
ccv
.
com∂ex_vÆue
 = &
∂cf
->
ˇche_key
;

4174 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4175  
NGX_CONF_ERROR
;

4178  
NGX_CONF_OK
;

4179 
	}
}

4184 #i‡(
NGX_HTTP_SSL
)

4187 
	$ngx_hâp_¥oxy_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4189 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4191 
ngx_°r_t
 *
vÆue
;

4193 i‡(
∂cf
->
s¶_∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

4197 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4199 
∂cf
->
s¶_∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

4201 i‡(
∂cf
->
s¶_∑ssw‹ds
 =
NULL
) {

4202  
NGX_CONF_ERROR
;

4205  
NGX_CONF_OK
;

4206 
	}
}

4212 
	$ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

4214 #i‡(
NGX_FREEBSD
)

4215 
ssize_t
 *
≈
 = 
d©a
;

4217 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

4218 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4221 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

4223  
NGX_CONF_ERROR
;

4226 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

4227 
ssize_t
 *
≈
 = 
d©a
;

4229 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4232 *
≈
 = 0;

4236  
NGX_CONF_OK
;

4237 
	}
}

4240 #i‡(
NGX_HTTP_SSL
)

4242 
ngx_öt_t


4243 
	$ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

4245 
ngx_poﬁ_˛ónup_t
 *
˛n
;

4247 
∂cf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

4248 i‡(
∂cf
->
up°ªam
.
s¶
 =
NULL
) {

4249  
NGX_ERROR
;

4252 
∂cf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

4254 i‡(
	`ngx_s¶_¸óã
(
∂cf
->
up°ªam
.
s¶
,Ölcf->
s¶_¥Ÿocﬁs
, 
NULL
)

4255 !
NGX_OK
)

4257  
NGX_ERROR
;

4260 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

4261 i‡(
˛n
 =
NULL
) {

4262  
NGX_ERROR
;

4265 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

4266 
˛n
->
d©a
 = 
∂cf
->
up°ªam
.
s¶
;

4268 i‡(
∂cf
->
s¶_˚πifiˇã
.
Àn
) {

4270 i‡(
∂cf
->
s¶_˚πifiˇã_key
.
Àn
 == 0) {

4271 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4273 "f‹ cîtifiˇã \"%V\"", &
∂cf
->
s¶_˚πifiˇã
);

4274  
NGX_ERROR
;

4277 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
∂cf
->
up°ªam
.
s¶
, &∂cf->
s¶_˚πifiˇã
,

4278 &
∂cf
->
s¶_˚πifiˇã_key
,Ölcf->
s¶_∑ssw‹ds
)

4279 !
NGX_OK
)

4281  
NGX_ERROR
;

4285 i‡(
	`ngx_s¶_cùhîs
(
cf
, 
∂cf
->
up°ªam
.
s¶
, &∂cf->
s¶_cùhîs
, 0)

4286 !
NGX_OK
)

4288  
NGX_ERROR
;

4291 i‡(
∂cf
->
up°ªam
.
s¶_vîify
) {

4292 i‡(
∂cf
->
s¶_åu°ed_˚πifiˇã
.
Àn
 == 0) {

4293 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4295  
NGX_ERROR
;

4298 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, 
∂cf
->
up°ªam
.
s¶
,

4299 &
∂cf
->
s¶_åu°ed_˚πifiˇã
,

4300 
∂cf
->
s¶_vîify_dïth
)

4301 !
NGX_OK
)

4303  
NGX_ERROR
;

4306 i‡(
	`ngx_s¶_¸l
(
cf
, 
∂cf
->
up°ªam
.
s¶
, &∂cf->
s¶_¸l
Ë!
NGX_OK
) {

4307  
NGX_ERROR
;

4311 i‡(
	`ngx_s¶_˛õ¡_£ssi⁄_ˇche
(
cf
, 
∂cf
->
up°ªam
.
s¶
,

4312 
∂cf
->
up°ªam
.
s¶_£ssi⁄_ªu£
)

4313 !
NGX_OK
)

4315  
NGX_ERROR
;

4318  
NGX_OK
;

4319 
	}
}

4325 
	$ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
)

4327 i‡(
u
->
Ámûy
 !
AF_UNIX
) {

4329 i‡(
u
->
no_p‹t
 || u->
p‹t
 =u->
deÁu…_p‹t
) {

4331 
v
->
ho°_hódî
 = 
u
->
ho°
;

4333 i‡(
u
->
deÁu…_p‹t
 == 80) {

4334 
	`ngx_°r_£t
(&
v
->
p‹t
, "80");

4337 
	`ngx_°r_£t
(&
v
->
p‹t
, "443");

4341 
v
->
ho°_hódî
.
Àn
 = 
u
->
ho°
.À¿+ 1 + u->
p‹t_ãxt
.len;

4342 
v
->
ho°_hódî
.
d©a
 = 
u
->
ho°
.data;

4343 
v
->
p‹t
 = 
u
->
p‹t_ãxt
;

4346 
v
->
key_°¨t
.
Àn
 +v->
ho°_hódî
.len;

4349 
	`ngx_°r_£t
(&
v
->
ho°_hódî
, "localhost");

4350 
	`ngx_°r_nuŒ
(&
v
->
p‹t
);

4351 
v
->
key_°¨t
.
Àn
 +("unix:"Ë- 1 + 
u
->
ho°
.len + 1;

4354 
v
->
uri
 = 
u
->uri;

4355 
	}
}

	@src/http/modules/ngx_http_random_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_øndom_ödex_loc_c⁄f_t
;

18 
	#NGX_HTTP_RANDOM_INDEX_PREALLOCATE
 50

	)

21 
ngx_öt_t
 
ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

23 
ngx_öt_t
 
ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

29 
ngx_comm™d_t
 
	gngx_hâp_øndom_ödex_comm™ds
[] = {

31 { 
ngx_°rög
("random_index"),

32 
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

33 
ngx_c⁄f_£t_Êag_¶Ÿ
,

34 
NGX_HTTP_LOC_CONF_OFFSET
,

35 
off£tof
(
ngx_hâp_øndom_ödex_loc_c⁄f_t
, 
íabÀ
),

36 
NULL
 },

38 
ngx_nuŒ_comm™d


42 
ngx_hâp_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ_˘x
 = {

43 
NULL
,

44 
ngx_hâp_øndom_ödex_öô
,

46 
NULL
,

47 
NULL
,

49 
NULL
,

50 
NULL
,

52 
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
,

53 
ngx_hâp_øndom_ödex_mîge_loc_c⁄f


57 
ngx_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_hâp_øndom_ödex_moduÀ_˘x
,

60 
ngx_hâp_øndom_ödex_comm™ds
,

61 
NGX_HTTP_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


73 
ngx_öt_t


74 
	$ngx_hâp_øndom_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

76 
u_ch¨
 *
œ°
, *
fûíame
;

77 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

78 
ngx_îr_t
 
îr
;

79 
ngx_öt_t
 
rc
;

80 
ngx_°r_t
 
∑th
, 
uri
, *
«me
;

81 
ngx_dú_t
 
dú
;

82 
ngx_uöt_t
 
n
, 
Àvñ
;

83 
ngx_¨øy_t
 
«mes
;

84 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
æcf
;

86 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

87  
NGX_DECLINED
;

90 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

91  
NGX_DECLINED
;

94 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_øndom_ödex_moduÀ
);

96 i‡(!
æcf
->
íabÀ
) {

97  
NGX_DECLINED
;

100 #i‡(
NGX_HAVE_D_TYPE
)

101 
Àn
 = 
NGX_DIR_MASK_LEN
;

103 
Àn
 = 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

106 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Àn
);

107 i‡(
œ°
 =
NULL
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

111 
Æloˇãd
 = 
∑th
.
Àn
;

113 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
 - 1;

114 
∑th
.
d©a
[∑th.
Àn
] = '\0';

116 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

117 "hâ∞øndom index: \"%s\"", 
∑th
.
d©a
);

119 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 =
NGX_ENOENT


123 || 
îr
 =
NGX_ENOTDIR


124 || 
îr
 =
NGX_ENAMETOOLONG
)

126 
Àvñ
 = 
NGX_LOG_ERR
;

127 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 } i‡(
îr
 =
NGX_EACCES
) {

130 
Àvñ
 = 
NGX_LOG_ERR
;

131 
rc
 = 
NGX_HTTP_FORBIDDEN
;

134 
Àvñ
 = 
NGX_LOG_CRIT
;

135 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

138 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

139 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

141  
rc
;

144 i‡(
	`ngx_¨øy_öô
(&
«mes
, 
r
->
poﬁ
, 32, (
ngx_°r_t
)Ë!
NGX_OK
) {

145  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

148 
fûíame
 = 
∑th
.
d©a
;

149 
fûíame
[
∑th
.
Àn
] = '/';

152 
	`ngx_£t_î∫o
(0);

154 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

155 
îr
 = 
ngx_î∫o
;

157 i‡(
îr
 !
NGX_ENOMOREFILES
) {

158 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

159 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

160  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167 "hâ∞øndom index fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

169 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

173 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

175 i‡(
dú
.
ty≥
 =0 || 
	`ngx_de_is_lök
(&dir)) {

179 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

180 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

181 + 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

183 
fûíame
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

184 i‡(
fûíame
 =
NULL
) {

185  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

188 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

189 *
œ°
++ = '/';

192 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

194 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_ENOENT
) {

198 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

199 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

200  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

203 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

205 
ngx_de_lök_öfo_n
 " \"%s\" failed",

206 
fûíame
);

207  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

212 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

216 
«me
 = 
	`ngx_¨øy_push
(&
«mes
);

217 i‡(
«me
 =
NULL
) {

218  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

221 
«me
->
Àn
 =Üen;

223 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

224 i‡(
«me
->
d©a
 =
NULL
) {

225  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

228 
	`ngx_mem˝y
(
«me
->
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
);

231 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

236 
n
 = 
«mes
.
√…s
;

238 i‡(
n
 == 0) {

239  
NGX_DECLINED
;

242 
«me
 = 
«mes
.
ñts
;

244 
n
 = (
ngx_uöt_t
Ë(((
uöt64_t
Ë
	`ngx_øndom
() *Ç) / 0x80000000);

246 
uri
.
Àn
 = 
r
->uri.À¿+ 
«me
[
n
].len;

248 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

249 i‡(
uri
.
d©a
 =
NULL
) {

250  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

253 
œ°
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

254 
	`ngx_mem˝y
(
œ°
, 
«me
[
n
].
d©a
,Çame[n].
Àn
);

256  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
,

262 
ngx_°r_t
 *
«me
)

264 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

266 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

270 
	}
}

274 
	$ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

276 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
;

278 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_øndom_ödex_loc_c⁄f_t
));

279 i‡(
c⁄f
 =
NULL
) {

280  
NULL
;

283 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

285  
c⁄f
;

286 
	}
}

290 
	$ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

292 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

293 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

297  
NGX_CONF_OK
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

304 
ngx_hâp_h™dÀr_±
 *
h
;

305 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

307 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

309 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

310 i‡(
h
 =
NULL
) {

311  
NGX_ERROR
;

314 *
h
 = 
ngx_hâp_øndom_ödex_h™dÀr
;

316  
NGX_OK
;

317 
	}
}

	@src/http/modules/ngx_http_range_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

49 
off_t
 
	m°¨t
;

50 
off_t
 
	míd
;

51 
ngx_°r_t
 
	mc⁄ã¡_ønge
;

52 } 
	tngx_hâp_ønge_t
;

56 
off_t
 
	moff£t
;

57 
ngx_°r_t
 
	mbound¨y_hódî
;

58 
ngx_¨øy_t
 
	mønges
;

59 } 
	tngx_hâp_ønge_fûãr_˘x_t
;

62 
ngx_öt_t
 
ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_uöt_t
 
ønges
);

64 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

68 
ngx_öt_t
 
ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

71 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

73 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

76 
ngx_öt_t
 
ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_öt_t
 
ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
 = {

81 
NULL
,

82 
ngx_hâp_ønge_hódî_fûãr_öô
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

95 
ngx_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
,

98 
NULL
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_ønge_body_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

126 
ngx_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_ønge_body_fûãr_moduÀ_˘x
,

129 
NULL
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

143 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

146 
ngx_öt_t


147 
	$ngx_hâp_ønge_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

149 
time_t
 
if_ønge_time
;

150 
ngx_°r_t
 *
if_ønge
, *
ëag
;

151 
ngx_uöt_t
 
ønges
;

152 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

153 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

155 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10


156 || 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


157 || (
r
 !r->
maö
 && !r->
subªque°_ønges
)

158 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

159 || !
r
->
Ælow_ønges
)

161  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

164 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

166 i‡(
˛cf
->
max_ønges
 == 0) {

167  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

170 i‡(
r
->
hódîs_ö
.
ønge
 =
NULL


171 || 
r
->
hódîs_ö
.
ønge
->
vÆue
.
Àn
 < 7

172 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
,

173 (
u_ch¨
 *) "bytes=", 6)

176 
√xt_fûãr
;

179 i‡(
r
->
hódîs_ö
.
if_ønge
) {

181 
if_ønge
 = &
r
->
hódîs_ö
.if_ønge->
vÆue
;

183 i‡(
if_ønge
->
Àn
 >2 && if_ønge->
d©a
[if_range->len - 1] == '"') {

185 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

186 
√xt_fûãr
;

189 
ëag
 = &
r
->
hódîs_out
.ëag->
vÆue
;

191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

192 "hâ∞ú:%VÉèg:%V", 
if_ønge
, 
ëag
);

194 i‡(
if_ønge
->
Àn
 !
ëag
->len

195 || 
	`ngx_°∫cmp
(
if_ønge
->
d©a
, 
ëag
->d©a,Éèg->
Àn
) != 0)

197 
√xt_fûãr
;

200 
∑r£
;

203 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

204 
√xt_fûãr
;

207 
if_ønge_time
 = 
	`ngx_∑r£_hâp_time
(
if_ønge
->
d©a
, if_ønge->
Àn
);

209 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

211 
if_ønge_time
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

213 i‡(
if_ønge_time
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

214 
√xt_fûãr
;

218 
∑r£
:

220 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ønge_fûãr_˘x_t
));

221 i‡(
˘x
 =
NULL
) {

222  
NGX_ERROR
;

225 
˘x
->
off£t
 = 
r
->
hódîs_out
.
c⁄ã¡_off£t
;

227 
ønges
 = 
r
->
sögÀ_ønge
 ? 1 : 
˛cf
->
max_ønges
;

229 
	`ngx_hâp_ønge_∑r£
(
r
, 
˘x
, 
ønges
)) {

231 
NGX_OK
:

232 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

234 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_PARTIAL_CONTENT
;

235 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

237 i‡(
˘x
->
ønges
.
√…s
 == 1) {

238  
	`ngx_hâp_ønge_sögÀ∑π_hódî
(
r
, 
˘x
);

241  
	`ngx_hâp_ønge_mu…ù¨t_hódî
(
r
, 
˘x
);

243 
NGX_HTTP_RANGE_NOT_SATISFIABLE
:

244  
	`ngx_hâp_ønge_nŸ_ßtisfübÀ
(
r
);

246 
NGX_ERROR
:

247  
NGX_ERROR
;

253 
√xt_fûãr
:

255 
r
->
hódîs_out
.
ac˚±_ønges
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

256 i‡(
r
->
hódîs_out
.
ac˚±_ønges
 =
NULL
) {

257  
NGX_ERROR
;

260 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 1;

261 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
key
, "Accept-Ranges");

262 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
vÆue
, "bytes");

264  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
,

270 
ngx_uöt_t
 
ønges
)

272 
u_ch¨
 *
p
;

273 
off_t
 
°¨t
, 
íd
, 
size
, 
c⁄ã¡_Àngth
, 
cutoff
,

274 
cuéim
;

275 
ngx_uöt_t
 
suffix
;

276 
ngx_hâp_ønge_t
 *
ønge
;

277 
ngx_hâp_ønge_fûãr_˘x_t
 *
m˘x
;

279 i‡(
r
 !r->
maö
) {

280 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

281 
ngx_hâp_ønge_body_fûãr_moduÀ
);

282 i‡(
m˘x
) {

283 
˘x
->
ønges
 = 
m˘x
->ranges;

284  
NGX_OK
;

288 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ønges
, 
r
->
poﬁ
, 1, (
ngx_hâp_ønge_t
))

289 !
NGX_OK
)

291  
NGX_ERROR
;

294 
p
 = 
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
 + 6;

295 
size
 = 0;

296 
c⁄ã¡_Àngth
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

298 
cutoff
 = 
NGX_MAX_OFF_T_VALUE
 / 10;

299 
cuéim
 = 
NGX_MAX_OFF_T_VALUE
 % 10;

302 
°¨t
 = 0;

303 
íd
 = 0;

304 
suffix
 = 0;

306 *
p
 == ' ') {Ö++; }

308 i‡(*
p
 != '-') {

309 i‡(*
p
 < '0' || *p > '9') {

310  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

313 *
p
 >= '0' && *p <= '9') {

314 i‡(
°¨t
 >
cutoff
 && (°¨à> cutof‡|| *
p
 - '0' > 
cuéim
)) {

315  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

318 
°¨t
 = sèπ * 10 + (*
p
++ - '0');

321 *
p
 == ' ') {Ö++; }

323 i‡(*
p
++ != '-') {

324  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

327 *
p
 == ' ') {Ö++; }

329 i‡(*
p
 == ',' || *p == '\0') {

330 
íd
 = 
c⁄ã¡_Àngth
;

331 
found
;

335 
suffix
 = 1;

336 
p
++;

339 i‡(*
p
 < '0' || *p > '9') {

340  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

343 *
p
 >= '0' && *p <= '9') {

344 i‡(
íd
 >
cutoff
 && (íd > cutof‡|| *
p
 - '0' > 
cuéim
)) {

345  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

348 
íd
 =Énd * 10 + (*
p
++ - '0');

351 *
p
 == ' ') {Ö++; }

353 i‡(*
p
 != ',' && *p != '\0') {

354  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

357 i‡(
suffix
) {

358 
°¨t
 = (
íd
 < 
c⁄ã¡_Àngth
) ? content_length -Énd : 0;

359 
íd
 = 
c⁄ã¡_Àngth
 - 1;

362 i‡(
íd
 >
c⁄ã¡_Àngth
) {

363 
íd
 = 
c⁄ã¡_Àngth
;

366 
íd
++;

369 
found
:

371 i‡(
°¨t
 < 
íd
) {

372 
ønge
 = 
	`ngx_¨øy_push
(&
˘x
->
ønges
);

373 i‡(
ønge
 =
NULL
) {

374  
NGX_ERROR
;

377 
ønge
->
°¨t
 = start;

378 
ønge
->
íd
 =Énd;

380 i‡(
size
 > 
NGX_MAX_OFF_T_VALUE
 - (
íd
 - 
°¨t
)) {

381  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

384 
size
 +
íd
 - 
°¨t
;

386 i‡(
ønges
-- == 0) {

387  
NGX_DECLINED
;

390 } i‡(
°¨t
 == 0) {

391  
NGX_DECLINED
;

394 i‡(*
p
++ != ',') {

399 i‡(
˘x
->
ønges
.
√…s
 == 0) {

400  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

403 i‡(
size
 > 
c⁄ã¡_Àngth
) {

404  
NGX_DECLINED
;

407  
NGX_OK
;

408 
	}
}

411 
ngx_öt_t


412 
	$ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

413 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

415 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

416 
ngx_hâp_ønge_t
 *
ønge
;

418 i‡(
r
 !r->
maö
) {

419  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

422 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

423 i‡(
c⁄ã¡_ønge
 =
NULL
) {

424  
NGX_ERROR
;

427 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

429 
c⁄ã¡_ønge
->
hash
 = 1;

430 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

432 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

433 ("byã†-/"Ë- 1 + 3 * 
NGX_OFF_T_LEN
);

434 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

435 
c⁄ã¡_ønge
->
hash
 = 0;

436 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = 
NULL
;

437  
NGX_ERROR
;

442 
ønge
 = 
˘x
->
ønges
.
ñts
;

444 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

446 
ønge
->
°¨t
,Ñ™ge->
íd
 - 1,

447 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

448 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

450 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ønge
->
íd
 -Ñ™ge->
°¨t
;

451 
r
->
hódîs_out
.
c⁄ã¡_off£t
 = 
ønge
->
°¨t
;

453 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

454 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

455 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

458  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

459 
	}
}

462 
ngx_öt_t


463 
	$ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

464 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

466 
off_t
 
Àn
;

467 
size_t
 
size
;

468 
ngx_uöt_t
 
i
;

469 
ngx_hâp_ønge_t
 *
ønge
;

470 
ngx_©omic_uöt_t
 
bound¨y
;

472 
size
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


473 + (
CRLF
 "Content-Type: ") - 1

474 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


475 + (
CRLF
 "Content-Range: bytes ") - 1;

477 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


478 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

480 
size
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.
Àn
;

483 
˘x
->
bound¨y_hódî
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

484 i‡(
˘x
->
bound¨y_hódî
.
d©a
 =
NULL
) {

485  
NGX_ERROR
;

488 
bound¨y
 = 
	`ngx_√xt_ãmp_numbî
(0);

498 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


499 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

501 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

502 
CRLF
 "--%0muA" CRLF

503 "C⁄ã¡-Ty≥: %V; ch¨£t=%V" 
CRLF


505 
bound¨y
,

506 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
,

507 &
r
->
hódîs_out
.
ch¨£t
)

508 - 
˘x
->
bound¨y_hódî
.
d©a
;

510 } i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

511 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

512 
CRLF
 "--%0muA" CRLF

513 "C⁄ã¡-Ty≥: %V" 
CRLF


515 
bound¨y
,

516 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
)

517 - 
˘x
->
bound¨y_hódî
.
d©a
;

520 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

521 
CRLF
 "--%0muA" CRLF

523 
bound¨y
)

524 - 
˘x
->
bound¨y_hódî
.
d©a
;

527 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =

528 
	`ngx_≤Æloc
(
r
->
poﬁ
,

530 + 
NGX_ATOMIC_T_LEN
);

532 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =
NULL
) {

533  
NGX_ERROR
;

536 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

540 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =

541 
	`ngx_•rötf
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

543 
bound¨y
)

544 - 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
;

546 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

548 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

552 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
 + ("--" CRLF) - 1;

554 
ønge
 = 
˘x
->
ønges
.
ñts
;

555 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

559 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =

560 
	`ngx_≤Æloc
(
r
->
poﬁ
, 3 * 
NGX_OFF_T_LEN
 + 2 + 4);

562 i‡(
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =
NULL
) {

563  
NGX_ERROR
;

566 
ønge
[
i
].
c⁄ã¡_ønge
.
Àn
 = 
	`ngx_•rötf
‘™ge[i].c⁄ã¡_ønge.
d©a
,

567 "%O-%O/%O" 
CRLF
 CRLF,

568 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
 - 1,

569 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

570 - 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

572 
Àn
 +
˘x
->
bound¨y_hódî
.À¿+ 
ønge
[
i
].
c⁄ã¡_ønge
.len

573 + (
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
);

576 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

578 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

579 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

580 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

583  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

584 
	}
}

587 
ngx_öt_t


588 
	$ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
)

590 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

592 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

594 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

595 i‡(
c⁄ã¡_ønge
 =
NULL
) {

596  
NGX_ERROR
;

599 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

601 
c⁄ã¡_ønge
->
hash
 = 1;

602 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

604 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

605 ("byã†*/"Ë- 1 + 
NGX_OFF_T_LEN
);

606 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

607 
c⁄ã¡_ønge
->
hash
 = 0;

608 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = 
NULL
;

609  
NGX_ERROR
;

612 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

614 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

615 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

617 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

619  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

620 
	}
}

623 
ngx_öt_t


624 
	$ngx_hâp_ønge_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

626 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

628 i‡(
ö
 =
NULL
) {

629  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

632 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

634 i‡(
˘x
 =
NULL
) {

635  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

638 i‡(
˘x
->
ønges
.
√…s
 == 1) {

639  
	`ngx_hâp_ønge_sögÀ∑π_body
(
r
, 
˘x
, 
ö
);

646 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

647  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

650 i‡(
	`ngx_hâp_ønge_ã°_ovîœµed
(
r
, 
˘x
, 
ö
Ë!
NGX_OK
) {

651  
NGX_ERROR
;

654  
	`ngx_hâp_ønge_mu…ù¨t_body
(
r
, 
˘x
, 
ö
);

655 
	}
}

658 
ngx_öt_t


659 
	$ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

660 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

662 
off_t
 
°¨t
, 
œ°
;

663 
ngx_buf_t
 *
buf
;

664 
ngx_uöt_t
 
i
;

665 
ngx_hâp_ønge_t
 *
ønge
;

667 i‡(
˘x
->
off£t
) {

668 
ovîœµed
;

671 
buf
 = 
ö
->buf;

673 i‡(!
buf
->
œ°_buf
) {

674 
°¨t
 = 
˘x
->
off£t
;

675 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

677 
ønge
 = 
˘x
->
ønges
.
ñts
;

678 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

679 i‡(
°¨t
 > 
ønge
[
i
].°¨à|| 
œ°
 <Ñ™ge[i].
íd
) {

680 
ovîœµed
;

685 
˘x
->
off£t
 = 
	`ngx_buf_size
(
buf
);

687  
NGX_OK
;

689 
ovîœµed
:

691 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

694  
NGX_ERROR
;

695 
	}
}

698 
ngx_öt_t


699 
	$ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

700 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

702 
off_t
 
°¨t
, 
œ°
;

703 
ngx_buf_t
 *
buf
;

704 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

705 
ngx_hâp_ønge_t
 *
ønge
;

707 
out
 = 
NULL
;

708 
Œ
 = &
out
;

709 
ønge
 = 
˘x
->
ønges
.
ñts
;

711 
˛
 = 
ö
; cl; c»˛->
√xt
) {

713 
buf
 = 
˛
->buf;

715 
°¨t
 = 
˘x
->
off£t
;

716 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

718 
˘x
->
off£t
 = 
œ°
;

720 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

721 "hâ∞øngêbody buf: %O-%O", 
°¨t
, 
œ°
);

723 i‡(
	`ngx_buf_•ecül
(
buf
)) {

724 *
Œ
 = 
˛
;

725 
Œ
 = &
˛
->
√xt
;

729 i‡(
ønge
->
íd
 <
°¨t
 ||Ñ™ge->°¨à>
œ°
) {

731 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

734 i‡(
buf
->
ö_fûe
) {

735 
buf
->
fûe_pos
 = buf->
fûe_œ°
;

738 
buf
->
pos
 = buf->
œ°
;

739 
buf
->
sync
 = 1;

744 i‡(
ønge
->
°¨t
 > start) {

746 i‡(
buf
->
ö_fûe
) {

747 
buf
->
fûe_pos
 +
ønge
->
°¨t
 - start;

750 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

751 
buf
->
pos
 +(
size_t
Ë(
ønge
->
°¨t
 - start);

755 i‡(
ønge
->
íd
 <
œ°
) {

757 i‡(
buf
->
ö_fûe
) {

758 
buf
->
fûe_œ°
 -
œ°
 - 
ønge
->
íd
;

761 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

762 
buf
->
œ°
 -(
size_t
Ë÷a° - 
ønge
->
íd
);

765 
buf
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

766 
buf
->
œ°_ö_chaö
 = 1;

767 *
Œ
 = 
˛
;

768 
˛
->
√xt
 = 
NULL
;

773 *
Œ
 = 
˛
;

774 
Œ
 = &
˛
->
√xt
;

777 i‡(
out
 =
NULL
) {

778  
NGX_OK
;

781  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

782 
	}
}

785 
ngx_öt_t


786 
	$ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

787 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

789 
ngx_buf_t
 *
b
, *
buf
;

790 
ngx_uöt_t
 
i
;

791 
ngx_chaö_t
 *
out
, *
h˛
, *
r˛
, *
d˛
, **
Œ
;

792 
ngx_hâp_ønge_t
 *
ønge
;

794 
Œ
 = &
out
;

795 
buf
 = 
ö
->buf;

796 
ønge
 = 
˘x
->
ønges
.
ñts
;

798 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

808 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

809 i‡(
b
 =
NULL
) {

810  
NGX_ERROR
;

813 
b
->
mem‹y
 = 1;

814 
b
->
pos
 = 
˘x
->
bound¨y_hódî
.
d©a
;

815 
b
->
œ°
 = 
˘x
->
bound¨y_hódî
.
d©a
 + ctx->bound¨y_hódî.
Àn
;

817 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

818 i‡(
h˛
 =
NULL
) {

819  
NGX_ERROR
;

822 
h˛
->
buf
 = 
b
;

827 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

828 i‡(
b
 =
NULL
) {

829  
NGX_ERROR
;

832 
b
->
ãmp‹¨y
 = 1;

833 
b
->
pos
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

834 
b
->
œ°
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 +Ñ™ge[i].c⁄ã¡_ønge.
Àn
;

836 
r˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

837 i‡(
r˛
 =
NULL
) {

838  
NGX_ERROR
;

841 
r˛
->
buf
 = 
b
;

846 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

847 i‡(
b
 =
NULL
) {

848  
NGX_ERROR
;

851 
b
->
ö_fûe
 = 
buf
->in_file;

852 
b
->
ãmp‹¨y
 = 
buf
->temporary;

853 
b
->
mem‹y
 = 
buf
->memory;

854 
b
->
mm≠
 = 
buf
->mmap;

855 
b
->
fûe
 = 
buf
->file;

857 i‡(
buf
->
ö_fûe
) {

858 
b
->
fûe_pos
 = 
buf
->fûe_po†+ 
ønge
[
i
].
°¨t
;

859 
b
->
fûe_œ°
 = 
buf
->
fûe_pos
 + 
ønge
[
i
].
íd
;

862 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

863 
b
->
pos
 = 
buf
->po†+ (
size_t
Ë
ønge
[
i
].
°¨t
;

864 
b
->
œ°
 = 
buf
->
pos
 + (
size_t
Ë
ønge
[
i
].
íd
;

867 
d˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

868 i‡(
d˛
 =
NULL
) {

869  
NGX_ERROR
;

872 
d˛
->
buf
 = 
b
;

874 *
Œ
 = 
h˛
;

875 
h˛
->
√xt
 = 
r˛
;

876 
r˛
->
√xt
 = 
d˛
;

877 
Œ
 = &
d˛
->
√xt
;

882 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

883 i‡(
b
 =
NULL
) {

884  
NGX_ERROR
;

887 
b
->
ãmp‹¨y
 = 1;

888 
b
->
œ°_buf
 = 1;

890 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


891 + ("--" 
CRLF
) - 1);

892 i‡(
b
->
pos
 =
NULL
) {

893  
NGX_ERROR
;

896 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
bound¨y_hódî
.
d©a
,

897 (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
);

898 *
b
->
œ°
++ = '-'; *b->last++ = '-';

899 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

901 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

902 i‡(
h˛
 =
NULL
) {

903  
NGX_ERROR
;

906 
h˛
->
buf
 = 
b
;

907 
h˛
->
√xt
 = 
NULL
;

909 *
Œ
 = 
h˛
;

911  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

912 
	}
}

915 
ngx_öt_t


916 
	$ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

918 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

919 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ønge_hódî_fûãr
;

921  
NGX_OK
;

922 
	}
}

925 
ngx_öt_t


926 
	$ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

928 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

929 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ønge_body_fûãr
;

931  
NGX_OK
;

932 
	}
}

	@src/http/modules/ngx_http_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REALIP_XREALIP
 0

	)

14 
	#NGX_HTTP_REALIP_XFWD
 1

	)

15 
	#NGX_HTTP_REALIP_HEADER
 2

	)

16 
	#NGX_HTTP_REALIP_PROXY
 3

	)

20 
ngx_¨øy_t
 *
	m‰om
;

21 
ngx_uöt_t
 
	mty≥
;

22 
ngx_uöt_t
 
	mhash
;

23 
ngx_°r_t
 
	mhódî
;

24 
ngx_Êag_t
 
	mªcursive
;

25 } 
	tngx_hâp_ªÆù_loc_c⁄f_t
;

29 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

30 
sockaddr
 *
	msockaddr
;

31 
sockÀn_t
 
	msockÀn
;

32 
ngx_°r_t
 
	maddr_ãxt
;

33 } 
	tngx_hâp_ªÆù_˘x_t
;

36 
ngx_öt_t
 
ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
,

38 
ngx_addr_t
 *
addr
);

39 
ngx_hâp_ªÆù_˛ónup
(*
d©a
);

40 *
ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

42 *
ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

43 *
ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

45 *
∑ª¡
, *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_ªÆù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

47 
ngx_öt_t
 
ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

48 
ngx_hâp_ªÆù_˘x_t
 *
ngx_hâp_ªÆù_gë_moduÀ_˘x
(

49 
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_öt_t
 
ngx_hâp_ªÆù_ªmŸe_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

54 
ngx_öt_t
 
ngx_hâp_ªÆù_ªmŸe_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

58 
ngx_comm™d_t
 
	gngx_hâp_ªÆù_comm™ds
[] = {

60 { 
ngx_°rög
("set_real_ip_from"),

61 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

62 
ngx_hâp_ªÆù_‰om
,

63 
NGX_HTTP_LOC_CONF_OFFSET
,

65 
NULL
 },

67 { 
ngx_°rög
("real_ip_header"),

68 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

69 
ngx_hâp_ªÆù
,

70 
NGX_HTTP_LOC_CONF_OFFSET
,

72 
NULL
 },

74 { 
ngx_°rög
("real_ip_recursive"),

75 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

76 
ngx_c⁄f_£t_Êag_¶Ÿ
,

77 
NGX_HTTP_LOC_CONF_OFFSET
,

78 
off£tof
(
ngx_hâp_ªÆù_loc_c⁄f_t
, 
ªcursive
),

79 
NULL
 },

81 
ngx_nuŒ_comm™d


86 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ_˘x
 = {

87 
ngx_hâp_ªÆù_add_v¨übÀs
,

88 
ngx_hâp_ªÆù_öô
,

90 
NULL
,

91 
NULL
,

93 
NULL
,

94 
NULL
,

96 
ngx_hâp_ªÆù_¸óã_loc_c⁄f
,

97 
ngx_hâp_ªÆù_mîge_loc_c⁄f


101 
ngx_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_hâp_ªÆù_moduÀ_˘x
,

104 
ngx_hâp_ªÆù_comm™ds
,

105 
NGX_HTTP_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


117 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ªÆù_v¨s
[] = {

119 { 
ngx_°rög
("ªÆù_ªmŸe_addr"), 
NULL
,

120 
ngx_hâp_ªÆù_ªmŸe_addr_v¨übÀ
, 0, 0, 0 },

122 { 
ngx_°rög
("ªÆù_ªmŸe_p‹t"), 
NULL
,

123 
ngx_hâp_ªÆù_ªmŸe_p‹t_v¨übÀ
, 0, 0, 0 },

125 
ngx_hâp_nuŒ_v¨übÀ


129 
ngx_öt_t


130 
	$ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

132 
u_ch¨
 *
p
;

133 
size_t
 
Àn
;

134 
ngx_°r_t
 *
vÆue
;

135 
ngx_uöt_t
 
i
, 
hash
;

136 
ngx_addr_t
 
addr
;

137 
ngx_¨øy_t
 *
xfwd
;

138 
ngx_li°_∑π_t
 *
∑π
;

139 
ngx_èbÀ_ñt_t
 *
hódî
;

140 
ngx_c⁄√˘i⁄_t
 *
c
;

141 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

142 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
;

144 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

146 i‡(
æcf
->
‰om
 =
NULL
) {

147  
NGX_DECLINED
;

150 
˘x
 = 
	`ngx_hâp_ªÆù_gë_moduÀ_˘x
(
r
);

152 i‡(
˘x
) {

153  
NGX_DECLINED
;

156 
æcf
->
ty≥
) {

158 
NGX_HTTP_REALIP_XREALIP
:

160 i‡(
r
->
hódîs_ö
.
x_ªÆ_ù
 =
NULL
) {

161  
NGX_DECLINED
;

164 
vÆue
 = &
r
->
hódîs_ö
.
x_ªÆ_ù
->value;

165 
xfwd
 = 
NULL
;

169 
NGX_HTTP_REALIP_XFWD
:

171 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

173 i‡(
xfwd
->
ñts
 =
NULL
) {

174  
NGX_DECLINED
;

177 
vÆue
 = 
NULL
;

181 
NGX_HTTP_REALIP_PROXY
:

183 
vÆue
 = &
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
;

185 i‡(
vÆue
->
Àn
 == 0) {

186  
NGX_DECLINED
;

189 
xfwd
 = 
NULL
;

195 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

196 
hódî
 = 
∑π
->
ñts
;

198 
hash
 = 
æcf
->hash;

199 
Àn
 = 
æcf
->
hódî
.len;

200 
p
 = 
æcf
->
hódî
.
d©a
;

202 
i
 = 0; ; i++) {

204 i‡(
i
 >
∑π
->
√…s
) {

205 i‡(
∑π
->
√xt
 =
NULL
) {

209 
∑π
 =Ö¨t->
√xt
;

210 
hódî
 = 
∑π
->
ñts
;

211 
i
 = 0;

214 i‡(
hash
 =
hódî
[
i
].hash

215 && 
Àn
 =
hódî
[
i
].
key
.len

216 && 
	`ngx_°∫cmp
(
p
, 
hódî
[
i
].
lowˇ£_key
, 
Àn
) == 0)

218 
vÆue
 = &
hódî
[
i
].value;

219 
xfwd
 = 
NULL
;

221 
found
;

225  
NGX_DECLINED
;

228 
found
:

230 
c
 = 
r
->
c⁄√˘i⁄
;

232 
addr
.
sockaddr
 = 
c
->sockaddr;

233 
addr
.
sockÀn
 = 
c
->socklen;

236 i‡(
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
vÆue
, 
æcf
->
‰om
,

237 
æcf
->
ªcursive
)

238 !
NGX_DECLINED
)

240 i‡(
æcf
->
ty≥
 =
NGX_HTTP_REALIP_PROXY
) {

241 
	`ngx_öë_£t_p‹t
(
addr
.
sockaddr
, 
c
->
¥oxy_¥Ÿocﬁ_p‹t
);

244  
	`ngx_hâp_ªÆù_£t_addr
(
r
, &
addr
);

247  
NGX_DECLINED
;

248 
	}
}

251 
ngx_öt_t


252 
	$ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
)

254 
size_t
 
Àn
;

255 
u_ch¨
 *
p
;

256 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

257 
ngx_c⁄√˘i⁄_t
 *
c
;

258 
ngx_poﬁ_˛ónup_t
 *
˛n
;

259 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

261 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_ªÆù_˘x_t
));

262 i‡(
˛n
 =
NULL
) {

263  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

266 
˘x
 = 
˛n
->
d©a
;

268 
c
 = 
r
->
c⁄√˘i⁄
;

270 
Àn
 = 
	`ngx_sock_¡›
(
addr
->
sockaddr
,áddr->
sockÀn
, 
ãxt
,

271 
NGX_SOCKADDR_STRLEN
, 0);

272 i‡(
Àn
 == 0) {

273  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

276 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

277 i‡(
p
 =
NULL
) {

278  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

281 
	`ngx_mem˝y
(
p
, 
ãxt
, 
Àn
);

283 
˛n
->
h™dÀr
 = 
ngx_hâp_ªÆù_˛ónup
;

284 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ªÆù_moduÀ
);

286 
˘x
->
c⁄√˘i⁄
 = 
c
;

287 
˘x
->
sockaddr
 = 
c
->sockaddr;

288 
˘x
->
sockÀn
 = 
c
->socklen;

289 
˘x
->
addr_ãxt
 = 
c
->addr_text;

291 
c
->
sockaddr
 = 
addr
->sockaddr;

292 
c
->
sockÀn
 = 
addr
->socklen;

293 
c
->
addr_ãxt
.
Àn
 =Üen;

294 
c
->
addr_ãxt
.
d©a
 = 
p
;

296  
NGX_DECLINED
;

297 
	}
}

301 
	$ngx_hâp_ªÆù_˛ónup
(*
d©a
)

303 
ngx_hâp_ªÆù_˘x_t
 *
˘x
 = 
d©a
;

305 
ngx_c⁄√˘i⁄_t
 *
c
;

307 
c
 = 
˘x
->
c⁄√˘i⁄
;

309 
c
->
sockaddr
 = 
˘x
->sockaddr;

310 
c
->
sockÀn
 = 
˘x
->socklen;

311 
c
->
addr_ãxt
 = 
˘x
->addr_text;

312 
	}
}

316 
	$ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

318 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

320 
ngx_öt_t
 
rc
;

321 
ngx_°r_t
 *
vÆue
;

322 
ngx_uæ_t
 
u
;

323 
ngx_cidr_t
 
c
, *
cidr
;

324 
ngx_uöt_t
 
i
;

325 
sockaddr_ö
 *
sö
;

326 #i‡(
NGX_HAVE_INET6
)

327 
sockaddr_ö6
 *
sö6
;

330 
vÆue
 = 
cf
->
¨gs
->
ñts
;

332 i‡(
æcf
->
‰om
 =
NULL
) {

333 
æcf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

334 (
ngx_cidr_t
));

335 i‡(
æcf
->
‰om
 =
NULL
) {

336  
NGX_CONF_ERROR
;

340 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

342 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

343 
cidr
 = 
	`ngx_¨øy_push
(
æcf
->
‰om
);

344 i‡(
cidr
 =
NULL
) {

345  
NGX_CONF_ERROR
;

348 
cidr
->
Ámûy
 = 
AF_UNIX
;

349  
NGX_CONF_OK
;

354 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

356 i‡(
rc
 !
NGX_ERROR
) {

357 i‡(
rc
 =
NGX_DONE
) {

358 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

360 &
vÆue
[1]);

363 
cidr
 = 
	`ngx_¨øy_push
(
æcf
->
‰om
);

364 i‡(
cidr
 =
NULL
) {

365  
NGX_CONF_ERROR
;

368 *
cidr
 = 
c
;

370  
NGX_CONF_OK
;

373 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

374 
u
.
ho°
 = 
vÆue
[1];

376 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

377 i‡(
u
.
îr
) {

378 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

380 
u
.
îr
, &u.
ho°
);

383  
NGX_CONF_ERROR
;

386 
cidr
 = 
	`ngx_¨øy_push_n
(
æcf
->
‰om
, 
u
.
«ddrs
);

387 i‡(
cidr
 =
NULL
) {

388  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

393 
i
 = 0; i < 
u
.
«ddrs
; i++) {

394 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

396 
cidr
[
i
].
Ámûy
) {

398 #i‡(
NGX_HAVE_INET6
)

399 
AF_INET6
:

400 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

401 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

402 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

407 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

408 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

409 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

414  
NGX_CONF_OK
;

415 
	}
}

419 
	$ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

421 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

423 
ngx_°r_t
 *
vÆue
;

425 i‡(
æcf
->
ty≥
 !
NGX_CONF_UNSET_UINT
) {

429 
vÆue
 = 
cf
->
¨gs
->
ñts
;

431 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Real-IP") == 0) {

432 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XREALIP
;

433  
NGX_CONF_OK
;

436 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Forwarded-For") == 0) {

437 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XFWD
;

438  
NGX_CONF_OK
;

441 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "proxy_protocol") == 0) {

442 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_PROXY
;

443  
NGX_CONF_OK
;

446 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_HEADER
;

447 
æcf
->
hash
 = 
	`ngx_hash_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

448 
æcf
->
hódî
 = 
vÆue
[1];

450  
NGX_CONF_OK
;

451 
	}
}

455 
	$ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

457 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
;

459 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªÆù_loc_c⁄f_t
));

460 i‡(
c⁄f
 =
NULL
) {

461  
NULL
;

472 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

473 
c⁄f
->
ªcursive
 = 
NGX_CONF_UNSET
;

475  
c⁄f
;

476 
	}
}

480 
	$ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

482 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

483 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

485 i‡(
c⁄f
->
‰om
 =
NULL
) {

486 
c⁄f
->
‰om
 = 
¥ev
->from;

489 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->ty≥, 
NGX_HTTP_REALIP_XREALIP
);

490 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive
, 
¥ev
->recursive, 0);

492 i‡(
c⁄f
->
hódî
.
Àn
 == 0) {

493 
c⁄f
->
hash
 = 
¥ev
->hash;

494 
c⁄f
->
hódî
 = 
¥ev
->header;

497  
NGX_CONF_OK
;

498 
	}
}

501 
ngx_öt_t


502 
	$ngx_hâp_ªÆù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

504 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

506 
v
 = 
ngx_hâp_ªÆù_v¨s
; v->
«me
.
Àn
; v++) {

507 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

508 i‡(
v¨
 =
NULL
) {

509  
NGX_ERROR
;

512 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

513 
v¨
->
d©a
 = 
v
->data;

516  
NGX_OK
;

517 
	}
}

520 
ngx_öt_t


521 
	$ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

523 
ngx_hâp_h™dÀr_±
 *
h
;

524 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

526 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

528 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
);

529 i‡(
h
 =
NULL
) {

530  
NGX_ERROR
;

533 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

535 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

536 i‡(
h
 =
NULL
) {

537  
NGX_ERROR
;

540 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

542  
NGX_OK
;

543 
	}
}

546 
ngx_hâp_ªÆù_˘x_t
 *

547 
	$ngx_hâp_ªÆù_gë_moduÀ_˘x
(
ngx_hâp_ªque°_t
 *
r
)

549 
ngx_poﬁ_˛ónup_t
 *
˛n
;

550 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

552 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

554 i‡(
˘x
 =
NULL
 && (
r
->
öã∫Æ
 ||Ñ->
fûãr_föÆize
)) {

561 
˛n
 = 
r
->
poﬁ
->
˛ónup
; c ; c  = c ->
√xt
) {

562 i‡(
˛n
->
h™dÀr
 =
ngx_hâp_ªÆù_˛ónup
) {

563 
˘x
 = 
˛n
->
d©a
;

569  
˘x
;

570 
	}
}

573 
ngx_öt_t


574 
	$ngx_hâp_ªÆù_ªmŸe_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

575 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

577 
ngx_°r_t
 *
addr_ãxt
;

578 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

580 
˘x
 = 
	`ngx_hâp_ªÆù_gë_moduÀ_˘x
(
r
);

582 
addr_ãxt
 = 
˘x
 ? &˘x->addr_ãxà: &
r
->
c⁄√˘i⁄
->addr_text;

584 
v
->
Àn
 = 
addr_ãxt
->len;

585 
v
->
vÆid
 = 1;

586 
v
->
no_ˇchóbÀ
 = 0;

587 
v
->
nŸ_found
 = 0;

588 
v
->
d©a
 = 
addr_ãxt
->data;

590  
NGX_OK
;

591 
	}
}

594 
ngx_öt_t


595 
	$ngx_hâp_ªÆù_ªmŸe_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

596 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

598 
ngx_uöt_t
 
p‹t
;

599 
sockaddr
 *
ß
;

600 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

602 
˘x
 = 
	`ngx_hâp_ªÆù_gë_moduÀ_˘x
(
r
);

604 
ß
 = 
˘x
 ? ctx->
sockaddr
 : 
r
->
c⁄√˘i⁄
->sockaddr;

606 
v
->
Àn
 = 0;

607 
v
->
vÆid
 = 1;

608 
v
->
no_ˇchóbÀ
 = 0;

609 
v
->
nŸ_found
 = 0;

611 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

612 i‡(
v
->
d©a
 =
NULL
) {

613  
NGX_ERROR
;

616 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
ß
);

618 i‡(
p‹t
 > 0 &&Öort < 65536) {

619 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

622  
NGX_OK
;

623 
	}
}

	@src/http/modules/ngx_http_referer_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REFERER_NO_URI_PART
 ((*Ë4)

	)

17 
ngx_hash_comböed_t
 
	mhash
;

19 #i‡(
NGX_PCRE
)

20 
ngx_¨øy_t
 *
	mªgex
;

21 
ngx_¨øy_t
 *
	m£rvî_«me_ªgex
;

24 
ngx_Êag_t
 
	mno_ª„ªr
;

25 
ngx_Êag_t
 
	mblocked_ª„ªr
;

26 
ngx_Êag_t
 
	m£rvî_«mes
;

28 
ngx_hash_keys_¨øys_t
 *
	mkeys
;

30 
ngx_uöt_t
 
	mª„ªr_hash_max_size
;

31 
ngx_uöt_t
 
	mª„ªr_hash_buckë_size
;

32 } 
	tngx_hâp_ª„ªr_c⁄f_t
;

35 
ngx_öt_t
 
ngx_hâp_ª„ªr_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

36 * 
ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

37 * 
ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

38 *
chûd
);

39 *
ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

41 
ngx_öt_t
 
ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hash_keys_¨øys_t
 *
keys
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
);

43 
ngx_öt_t
 
ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

44 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_°r_t
 *
«me
);

45 #i‡(
NGX_PCRE
)

46 
ngx_öt_t
 
ngx_hâp_add_ªgex_£rvî_«me
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_hâp_ªgex_t
 *
ªgex
);

49 
ngx_libc_cde˛
 
ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
,

50 c⁄° *
two
);

53 
ngx_comm™d_t
 
	gngx_hâp_ª„ªr_comm™ds
[] = {

55 { 
ngx_°rög
("valid_referers"),

56 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

57 
ngx_hâp_vÆid_ª„ªrs
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("referer_hash_max_size"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_num_¶Ÿ
,

65 
NGX_HTTP_LOC_CONF_OFFSET
,

66 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_max_size
),

67 
NULL
 },

69 { 
ngx_°rög
("referer_hash_bucket_size"),

70 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_num_¶Ÿ
,

72 
NGX_HTTP_LOC_CONF_OFFSET
,

73 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_buckë_size
),

74 
NULL
 },

76 
ngx_nuŒ_comm™d


80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ_˘x
 = {

81 
ngx_hâp_ª„ªr_add_v¨übÀs
,

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
ngx_hâp_ª„ªr_¸óã_c⁄f
,

91 
ngx_hâp_ª„ªr_mîge_c⁄f


95 
ngx_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ª„ªr_moduÀ_˘x
,

98 
ngx_hâp_ª„ªr_comm™ds
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_°r_t
 
	gngx_hâp_övÆid_ª„ªr_«me
 = 
ngx_°rög
("invalid_referer");

114 
ngx_öt_t


115 
	$ngx_hâp_ª„ªr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

116 
uöçå_t
 
d©a
)

118 
u_ch¨
 *
p
, *
ªf
, *
œ°
;

119 
size_t
 
Àn
;

120 
ngx_°r_t
 *
uri
;

121 
ngx_uöt_t
 
i
, 
key
;

122 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
;

123 
u_ch¨
 
buf
[256];

124 #i‡(
NGX_PCRE
)

125 
ngx_öt_t
 
rc
;

126 
ngx_°r_t
 
ª„ªr
;

129 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ª„ªr_moduÀ
);

131 i‡(
æcf
->
hash
.hash.
buckës
 =
NULL


132 && 
æcf
->
hash
.
wc_hód
 =
NULL


133 && 
æcf
->
hash
.
wc_èû
 =
NULL


134 #i‡(
NGX_PCRE
)

135 && 
æcf
->
ªgex
 =
NULL


136 && 
æcf
->
£rvî_«me_ªgex
 =
NULL


140 
vÆid
;

143 i‡(
r
->
hódîs_ö
.
ª„ªr
 =
NULL
) {

144 i‡(
æcf
->
no_ª„ªr
) {

145 
vÆid
;

148 
övÆid
;

151 
Àn
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.len;

152 
ªf
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.
d©a
;

154 i‡(
Àn
 >= ("http://i.ru") - 1) {

155 
œ°
 = 
ªf
 + 
Àn
;

157 i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "http://", 7) == 0) {

158 
ªf
 += 7;

159 
Àn
 -= 7;

160 
vÆid_scheme
;

162 } i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "https://", 8) == 0) {

163 
ªf
 += 8;

164 
Àn
 -= 8;

165 
vÆid_scheme
;

169 i‡(
æcf
->
blocked_ª„ªr
) {

170 
vÆid
;

173 
övÆid
;

175 
vÆid_scheme
:

177 
i
 = 0;

178 
key
 = 0;

180 
p
 = 
ªf
;Ö < 
œ°
;Ö++) {

181 i‡(*
p
 == '/' || *p == ':') {

185 i‡(
i
 == 256) {

186 
övÆid
;

189 
buf
[
i
] = 
	`ngx_tﬁowî
(*
p
);

190 
key
 = 
	`ngx_hash
(key, 
buf
[
i
++]);

193 
uri
 = 
	`ngx_hash_föd_comböed
(&
æcf
->
hash
, 
key
, 
buf
, 
p
 - 
ªf
);

195 i‡(
uri
) {

196 
uri
;

199 #i‡(
NGX_PCRE
)

201 i‡(
æcf
->
£rvî_«me_ªgex
) {

202 
ª„ªr
.
Àn
 = 
p
 - 
ªf
;

203 
ª„ªr
.
d©a
 = 
buf
;

205 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
£rvî_«me_ªgex
, &
ª„ªr
,

206 
r
->
c⁄√˘i⁄
->
log
);

208 i‡(
rc
 =
NGX_OK
) {

209 
vÆid
;

212 i‡(
rc
 =
NGX_ERROR
) {

213  
rc
;

219 i‡(
æcf
->
ªgex
) {

220 
ª„ªr
.
Àn
 =Üen;

221 
ª„ªr
.
d©a
 = 
ªf
;

223 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
ªgex
, &
ª„ªr
, 
r
->
c⁄√˘i⁄
->
log
);

225 i‡(
rc
 =
NGX_OK
) {

226 
vÆid
;

229 i‡(
rc
 =
NGX_ERROR
) {

230  
rc
;

238 
övÆid
:

240 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

242  
NGX_OK
;

244 
uri
:

246  ; 
p
 < 
œ°
;Ö++) {

247 i‡(*
p
 == '/') {

252 
Àn
 = 
œ°
 - 
p
;

254 i‡(
uri
 =
NGX_HTTP_REFERER_NO_URI_PART
) {

255 
vÆid
;

258 i‡(
Àn
 < 
uri
->À¿|| 
	`ngx_°∫cmp
(uri->
d©a
, 
p
, uri->len) != 0) {

259 
övÆid
;

262 
vÆid
:

264 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_ª„ªr_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

273 
ngx_hâp_v¨übÀ_t
 *
v¨
;

275 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_övÆid_ª„ªr_«me
,

276 
NGX_HTTP_VAR_CHANGEABLE
);

277 i‡(
v¨
 =
NULL
) {

278  
NGX_ERROR
;

281 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_ª„ªr_v¨übÀ
;

283  
NGX_OK
;

284 
	}
}

288 
	$ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

290 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
;

292 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ª„ªr_c⁄f_t
));

293 i‡(
c⁄f
 =
NULL
) {

294  
NULL
;

305 #i‡(
NGX_PCRE
)

306 
c⁄f
->
ªgex
 = 
NGX_CONF_UNSET_PTR
;

307 
c⁄f
->
£rvî_«me_ªgex
 = 
NGX_CONF_UNSET_PTR
;

310 
c⁄f
->
no_ª„ªr
 = 
NGX_CONF_UNSET
;

311 
c⁄f
->
blocked_ª„ªr
 = 
NGX_CONF_UNSET
;

312 
c⁄f
->
ª„ªr_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

313 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

315  
c⁄f
;

316 
	}
}

320 
	$ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

322 
ngx_hâp_ª„ªr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

323 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
 = 
chûd
;

325 
ngx_uöt_t
 
n
;

326 
ngx_hash_öô_t
 
hash
;

327 
ngx_hâp_£rvî_«me_t
 *
¢
;

328 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

330 i‡(
c⁄f
->
keys
 =
NULL
) {

331 
c⁄f
->
hash
 = 
¥ev
->hash;

333 #i‡(
NGX_PCRE
)

334 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

335 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£rvî_«me_ªgex
,

336 
¥ev
->
£rvî_«me_ªgex
, 
NULL
);

338 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_ª„ªr
, 
¥ev
->no_referer, 0);

339 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
blocked_ª„ªr
, 
¥ev
->blocked_referer, 0);

340 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

341 
¥ev
->
ª„ªr_hash_max_size
, 2048);

342 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

343 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

345  
NGX_CONF_OK
;

348 i‡(
c⁄f
->
£rvî_«mes
 == 1) {

349 
cscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

351 
¢
 = 
cscf
->
£rvî_«mes
.
ñts
;

352 
n
 = 0;Ç < 
cscf
->
£rvî_«mes
.
√…s
;Ç++) {

354 #i‡(
NGX_PCRE
)

355 i‡(
¢
[
n
].
ªgex
) {

357 i‡(
	`ngx_hâp_add_ªgex_£rvî_«me
(
cf
, 
c⁄f
, 
¢
[
n
].
ªgex
)

358 !
NGX_OK
)

360  
NGX_CONF_ERROR
;

367 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
c⁄f
->
keys
, &
¢
[
n
].
«me
, 
NULL
)

368 !
NGX_OK
)

370  
NGX_CONF_ERROR
;

375 i‡((
c⁄f
->
no_ª„ªr
 =1 || c⁄f->
blocked_ª„ªr
 == 1)

376 && 
c⁄f
->
keys
->keys.
√…s
 == 0

377 && 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
 == 0

378 && 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
 == 0)

380 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

384  
NGX_CONF_ERROR
;

387 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

388 
¥ev
->
ª„ªr_hash_max_size
, 2048);

389 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

390 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

391 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
	`ngx_Æign
(conf->referer_hash_bucket_size,

392 
ngx_ˇchñöe_size
);

394 
hash
.
key
 = 
ngx_hash_key_lc
;

395 
hash
.
max_size
 = 
c⁄f
->
ª„ªr_hash_max_size
;

396 
hash
.
buckë_size
 = 
c⁄f
->
ª„ªr_hash_buckë_size
;

397 
hash
.
«me
 = "referer_hash";

398 
hash
.
poﬁ
 = 
cf
->pool;

400 i‡(
c⁄f
->
keys
->keys.
√…s
) {

401 
hash
.hash = &
c⁄f
->hash.hash;

402 
hash
.
ãmp_poﬁ
 = 
NULL
;

404 i‡(
	`ngx_hash_öô
(&
hash
, 
c⁄f
->
keys
->keys.
ñts
, c⁄f->keys->keys.
√…s
)

405 !
NGX_OK
)

407  
NGX_CONF_ERROR
;

411 i‡(
c⁄f
->
keys
->
dns_wc_hód
.
√…s
) {

413 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

414 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_hód
.
√…s
,

415 (
ngx_hash_key_t
),

416 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

418 
hash
.hash = 
NULL
;

419 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

421 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

422 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
)

423 !
NGX_OK
)

425  
NGX_CONF_ERROR
;

428 
c⁄f
->
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

431 i‡(
c⁄f
->
keys
->
dns_wc_èû
.
√…s
) {

433 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

434 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_èû
.
√…s
,

435 (
ngx_hash_key_t
),

436 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

438 
hash
.hash = 
NULL
;

439 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

441 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

442 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
)

443 !
NGX_OK
)

445  
NGX_CONF_ERROR
;

448 
c⁄f
->
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

451 #i‡(
NGX_PCRE
)

452 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

453 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£rvî_«me_ªgex
, 
¥ev
->server_name_regex,

454 
NULL
);

457 i‡(
c⁄f
->
no_ª„ªr
 =
NGX_CONF_UNSET
) {

458 
c⁄f
->
no_ª„ªr
 = 0;

461 i‡(
c⁄f
->
blocked_ª„ªr
 =
NGX_CONF_UNSET
) {

462 
c⁄f
->
blocked_ª„ªr
 = 0;

465 
c⁄f
->
keys
 = 
NULL
;

467  
NGX_CONF_OK
;

468 
	}
}

472 
	$ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

474 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
 = 
c⁄f
;

476 
u_ch¨
 *
p
;

477 
ngx_°r_t
 *
vÆue
, 
uri
;

478 
ngx_uöt_t
 
i
;

480 i‡(
æcf
->
keys
 =
NULL
) {

481 
æcf
->
keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
, (
ngx_hash_keys_¨øys_t
));

482 i‡(
æcf
->
keys
 =
NULL
) {

483  
NGX_CONF_ERROR
;

486 
æcf
->
keys
->
poﬁ
 = 
cf
->pool;

487 
æcf
->
keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

489 i‡(
	`ngx_hash_keys_¨øy_öô
(
æcf
->
keys
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

490  
NGX_CONF_ERROR
;

494 
vÆue
 = 
cf
->
¨gs
->
ñts
;

496 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

497 i‡(
vÆue
[
i
].
Àn
 == 0) {

498 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

499 "övÆidÑe„ª∏\"%V\"", &
vÆue
[
i
]);

500  
NGX_CONF_ERROR
;

503 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

504 
æcf
->
no_ª„ªr
 = 1;

508 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "blocked") == 0) {

509 
æcf
->
blocked_ª„ªr
 = 1;

513 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "server_names") == 0) {

514 
æcf
->
£rvî_«mes
 = 1;

518 i‡(
vÆue
[
i
].
d©a
[0] == '~') {

519 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
vÆue
[
i
]Ë!
NGX_OK
) {

520  
NGX_CONF_ERROR
;

526 
	`ngx_°r_nuŒ
(&
uri
);

528 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/');

530 i‡(
p
) {

531 
uri
.
Àn
 = (
vÆue
[
i
].
d©a
 + vÆue[i].ÀnË- 
p
;

532 
uri
.
d©a
 = 
p
;

533 
vÆue
[
i
].
Àn
 = 
p
 - vÆue[i].
d©a
;

536 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
vÆue
[
i
], &
uri
Ë!
NGX_OK
) {

537  
NGX_CONF_ERROR
;

541  
NGX_CONF_OK
;

542 
	}
}

545 
ngx_öt_t


546 
	$ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

547 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
)

549 
ngx_öt_t
 
rc
;

550 
ngx_°r_t
 *
u
;

552 i‡(
uri
 =
NULL
 || uri->
Àn
 == 0) {

553 
u
 = 
NGX_HTTP_REFERER_NO_URI_PART
;

556 
u
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

557 i‡(
u
 =
NULL
) {

558  
NGX_ERROR
;

561 *
u
 = *
uri
;

564 
rc
 = 
	`ngx_hash_add_key
(
keys
, 
vÆue
, 
u
, 
NGX_HASH_WILDCARD_KEY
);

566 i‡(
rc
 =
NGX_OK
) {

567  
NGX_OK
;

570 i‡(
rc
 =
NGX_DECLINED
) {

571 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

572 "övÆid ho°«mê‹ wûdˇrd \"%V\"", 
vÆue
);

575 i‡(
rc
 =
NGX_BUSY
) {

576 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

577 "c⁄Êi˘ögÖ¨amëî \"%V\"", 
vÆue
);

580  
NGX_ERROR
;

581 
	}
}

584 
ngx_öt_t


585 
	$ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

586 
ngx_°r_t
 *
«me
)

588 #i‡(
NGX_PCRE
)

589 
ngx_ªgex_ñt_t
 *
ª
;

590 
ngx_ªgex_compûe_t
 
rc
;

591 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

593 i‡(
«me
->
Àn
 == 1) {

594 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "em±yÑegex i¿\"%V\"", 
«me
);

595  
NGX_ERROR
;

598 i‡(
æcf
->
ªgex
 =
NGX_CONF_UNSET_PTR
) {

599 
æcf
->
ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_ªgex_ñt_t
));

600 i‡(
æcf
->
ªgex
 =
NULL
) {

601  
NGX_ERROR
;

605 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
ªgex
);

606 i‡(
ª
 =
NULL
) {

607  
NGX_ERROR
;

610 
«me
->
Àn
--;

611 
«me
->
d©a
++;

613 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

615 
rc
.
∑âîn
 = *
«me
;

616 
rc
.
poﬁ
 = 
cf
->pool;

617 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

618 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

619 
rc
.
îr
.
d©a
 = 
îr°r
;

621 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

622 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

623  
NGX_ERROR
;

626 
ª
->
ªgex
 = 
rc
.regex;

627 
ª
->
«me
 =Çame->
d©a
;

629  
NGX_OK
;

633 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

635 
«me
);

637  
NGX_ERROR
;

640 
	}
}

643 #i‡(
NGX_PCRE
)

645 
ngx_öt_t


646 
	$ngx_hâp_add_ªgex_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

647 
ngx_hâp_ªgex_t
 *
ªgex
)

649 
ngx_ªgex_ñt_t
 *
ª
;

651 i‡(
æcf
->
£rvî_«me_ªgex
 =
NGX_CONF_UNSET_PTR
) {

652 
æcf
->
£rvî_«me_ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

653 (
ngx_ªgex_ñt_t
));

654 i‡(
æcf
->
£rvî_«me_ªgex
 =
NULL
) {

655  
NGX_ERROR
;

659 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
£rvî_«me_ªgex
);

660 i‡(
ª
 =
NULL
) {

661  
NGX_ERROR
;

664 
ª
->
ªgex
 =Ñegex->regex;

665 
ª
->
«me
 = 
ªgex
->«me.
d©a
;

667  
NGX_OK
;

668 
	}
}

673 
ngx_libc_cde˛


674 
	$ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

676 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

678 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

679 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

681  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

682 
	}
}

	@src/http/modules/ngx_http_rewrite_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mcodes
;

16 
ngx_uöt_t
 
	m°ack_size
;

18 
ngx_Êag_t
 
	mlog
;

19 
ngx_Êag_t
 
	munöôülized_v¨übÀ_w¨n
;

20 } 
	tngx_hâp_ªwrôe_loc_c⁄f_t
;

23 *
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 
ngx_öt_t
 
ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

31 *
c⁄f
);

32 *
ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

34 * 
ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
,

35 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
);

36 *
ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

38 *
ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 * 
ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

44 
ngx_comm™d_t
 
	gngx_hâp_ªwrôe_comm™ds
[] = {

46 { 
ngx_°rög
("rewrite"),

47 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


48 |
NGX_CONF_TAKE23
,

49 
ngx_hâp_ªwrôe
,

50 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("return"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


56 |
NGX_CONF_TAKE12
,

57 
ngx_hâp_ªwrôe_ªtu∫
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("break"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


64 |
NGX_CONF_NOARGS
,

65 
ngx_hâp_ªwrôe_bªak
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
NULL
 },

70 { 
ngx_°rög
("if"),

71 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

72 
ngx_hâp_ªwrôe_if
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

75 
NULL
 },

77 { 
ngx_°rög
("set"),

78 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


79 |
NGX_CONF_TAKE2
,

80 
ngx_hâp_ªwrôe_£t
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("rewrite_log"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


87 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
log
),

91 
NULL
 },

93 { 
ngx_°rög
("uninitialized_variable_warn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


95 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

96 
ngx_c⁄f_£t_Êag_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
unöôülized_v¨übÀ_w¨n
),

99 
NULL
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_ªwrôe_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
,

116 
ngx_hâp_ªwrôe_mîge_loc_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_ªwrôe_moduÀ_˘x
,

123 
ngx_hâp_ªwrôe_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_ªwrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
ngx_öt_t
 
ödex
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

141 
ngx_hâp_s¸ùt_ígöe_t
 *
e
;

142 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

143 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

144 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

146 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

148 
ödex
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

150 i‡(
r
->
pha£_h™dÀr
 =
ödex
 &&Ñ->
loc_c⁄f
 =
cscf
->
˘x
->loc_conf) {

152  
NGX_DECLINED
;

155 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

157 i‡(
æcf
->
codes
 =
NULL
) {

158  
NGX_DECLINED
;

161 
e
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_s¸ùt_ígöe_t
));

162 i‡(
e
 =
NULL
) {

163  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

166 
e
->
•
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

167 
æcf
->
°ack_size
 * (
ngx_hâp_v¨übÀ_vÆue_t
));

168 i‡(
e
->
•
 =
NULL
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
e
->
ù
 = 
æcf
->
codes
->
ñts
;

173 
e
->
ªque°
 = 
r
;

174 
e
->
quŸe
 = 1;

175 
e
->
log
 = 
æcf
->log;

176 
e
->
°©us
 = 
NGX_DECLINED
;

178 *(
uöçå_t
 *Ë
e
->
ù
) {

179 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
->
ù
;

180 
	`code
(
e
);

183 i‡(
e
->
°©us
 < 
NGX_HTTP_BAD_REQUEST
) {

184  
e
->
°©us
;

187 i‡(
r
->
îr_°©us
 == 0) {

188  
e
->
°©us
;

191  
r
->
îr_°©us
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_hâp_ªwrôe_v¨
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

197 
uöçå_t
 
d©a
)

199 
ngx_hâp_v¨übÀ_t
 *
v¨
;

200 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

201 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

203 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

205 i‡(
æcf
->
unöôülized_v¨übÀ_w¨n
 == 0) {

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

207  
NGX_OK
;

210 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

212 
v¨
 = 
cmcf
->
v¨übÀs
.
ñts
;

220 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "usög unöôülized \"%V\" v¨übÀ", &
v¨
[
d©a
].
«me
);

223 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

225  
NGX_OK
;

226 
	}
}

230 
	$ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

232 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
;

234 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªwrôe_loc_c⁄f_t
));

235 i‡(
c⁄f
 =
NULL
) {

236  
NULL
;

239 
c⁄f
->
°ack_size
 = 
NGX_CONF_UNSET_UINT
;

240 
c⁄f
->
log
 = 
NGX_CONF_UNSET
;

241 
c⁄f
->
unöôülized_v¨übÀ_w¨n
 = 
NGX_CONF_UNSET
;

243  
c⁄f
;

244 
	}
}

248 
	$ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

250 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

251 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

253 
uöçå_t
 *
code
;

255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log
, 
¥ev
->log, 0);

256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unöôülized_v¨übÀ_w¨n
,

257 
¥ev
->
unöôülized_v¨übÀ_w¨n
, 1);

258 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ack_size
, 
¥ev
->stack_size, 10);

260 i‡(
c⁄f
->
codes
 =
NULL
) {

261  
NGX_CONF_OK
;

264 i‡(
c⁄f
->
codes
 =
¥ev
->codes) {

265  
NGX_CONF_OK
;

268 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
codes
, (
uöçå_t
));

269 i‡(
code
 =
NULL
) {

270  
NGX_CONF_ERROR
;

273 *
code
 = (
uöçå_t
Ë
NULL
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_hâp_h™dÀr_±
 *
h
;

283 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

285 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

287 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
);

288 i‡(
h
 =
NULL
) {

289  
NGX_ERROR
;

292 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

294 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
);

295 i‡(
h
 =
NULL
) {

296  
NGX_ERROR
;

299 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

301  
NGX_OK
;

302 
	}
}

306 
	$ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

308 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

310 
ngx_°r_t
 *
vÆue
;

311 
ngx_uöt_t
 
œ°
;

312 
ngx_ªgex_compûe_t
 
rc
;

313 
ngx_hâp_s¸ùt_code_±
 *
code
;

314 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

315 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

316 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
ªgex_íd
;

317 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

319 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

320 (
ngx_hâp_s¸ùt_ªgex_code_t
));

321 i‡(
ªgex
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

327 
vÆue
 = 
cf
->
¨gs
->
ñts
;

329 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

331 
rc
.
∑âîn
 = 
vÆue
[1];

332 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

333 
rc
.
îr
.
d©a
 = 
îr°r
;

337 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

338 i‡(
ªgex
->ªgex =
NULL
) {

339  
NGX_CONF_ERROR
;

342 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

343 
ªgex
->
uri
 = 1;

344 
ªgex
->
«me
 = 
vÆue
[1];

346 i‡(
vÆue
[2].
d©a
[vÆue[2].
Àn
 - 1] == '?') {

349 
vÆue
[2].
Àn
--;

352 
ªgex
->
add_¨gs
 = 1;

355 
œ°
 = 0;

357 i‡(
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "http://", ("http://") - 1) == 0

358 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "https://", ("https://") - 1) == 0

359 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "$scheme", ("$scheme") - 1) == 0)

361 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

362 
ªgex
->
ªdúe˘
 = 1;

363 
œ°
 = 1;

366 i‡(
cf
->
¨gs
->
√…s
 == 4) {

367 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "last") == 0) {

368 
œ°
 = 1;

370 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "break") == 0) {

371 
ªgex
->
bªak_cy˛e
 = 1;

372 
œ°
 = 1;

374 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "redirect") == 0) {

375 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

376 
ªgex
->
ªdúe˘
 = 1;

377 
œ°
 = 1;

379 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "permanent") == 0) {

380 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_PERMANENTLY
;

381 
ªgex
->
ªdúe˘
 = 1;

382 
œ°
 = 1;

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

386 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

387  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

393 
sc
.
cf
 = cf;

394 
sc
.
sour˚
 = &
vÆue
[2];

395 
sc
.
Àngths
 = &
ªgex
->lengths;

396 
sc
.
vÆues
 = &
lcf
->
codes
;

397 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]);

398 
sc
.
maö
 = 
ªgex
;

399 
sc
.
com∂ëe_Àngths
 = 1;

400 
sc
.
compûe_¨gs
 = !
ªgex
->
ªdúe˘
;

402 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

403  
NGX_CONF_ERROR
;

406 
ªgex
 = 
sc
.
maö
;

408 
ªgex
->
size
 = 
sc
.size;

409 
ªgex
->
¨gs
 = 
sc
.args;

411 i‡(
sc
.
v¨übÀs
 =0 && !sc.
dup_ˇ±uª
) {

412 
ªgex
->
Àngths
 = 
NULL
;

415 
ªgex_íd
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
,

416 (
ngx_hâp_s¸ùt_ªgex_íd_code_t
),

417 &
ªgex
);

418 i‡(
ªgex_íd
 =
NULL
) {

419  
NGX_CONF_ERROR
;

422 
ªgex_íd
->
code
 = 
ngx_hâp_s¸ùt_ªgex_íd_code
;

423 
ªgex_íd
->
uri
 = 
ªgex
->uri;

424 
ªgex_íd
->
¨gs
 = 
ªgex
->args;

425 
ªgex_íd
->
add_¨gs
 = 
ªgex
->add_args;

426 
ªgex_íd
->
ªdúe˘
 = 
ªgex
->redirect;

428 i‡(
œ°
) {

429 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
, (
uöçå_t
), &
ªgex
);

430 i‡(
code
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 *
code
 = 
NULL
;

437 
ªgex
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


438 - (
u_ch¨
 *Ë
ªgex
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

449 
u_ch¨
 *
p
;

450 
ngx_°r_t
 *
vÆue
, *
v
;

451 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
ªt
;

452 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

454 
ªt
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

455 (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

456 i‡(
ªt
 =
NULL
) {

457  
NGX_CONF_ERROR
;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
	`ngx_memzîo
(
ªt
, (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

464 
ªt
->
code
 = 
ngx_hâp_s¸ùt_ªtu∫_code
;

466 
p
 = 
vÆue
[1].
d©a
;

468 
ªt
->
°©us
 = 
	`ngx_©oi
(
p
, 
vÆue
[1].
Àn
);

470 i‡(
ªt
->
°©us
 =(
uöçå_t
Ë
NGX_ERROR
) {

472 i‡(
cf
->
¨gs
->
√…s
 == 2

473 && (
	`ngx_°∫cmp
(
p
, "http://", ("http://") - 1) == 0

474 || 
	`ngx_°∫cmp
(
p
, "https://", ("https://") - 1) == 0

475 || 
	`ngx_°∫cmp
(
p
, "$scheme", ("$scheme") - 1) == 0))

477 
ªt
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

478 
v
 = &
vÆue
[1];

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

483  
NGX_CONF_ERROR
;

488 i‡(
ªt
->
°©us
 > 999) {

489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

490 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

491  
NGX_CONF_ERROR
;

494 i‡(
cf
->
¨gs
->
√…s
 == 2) {

495  
NGX_CONF_OK
;

498 
v
 = &
vÆue
[2];

501 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

503 
ccv
.
cf
 = cf;

504 
ccv
.
vÆue
 = 
v
;

505 
ccv
.
com∂ex_vÆue
 = &
ªt
->
ãxt
;

507 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

508  
NGX_CONF_ERROR
;

511  
NGX_CONF_OK
;

512 
	}
}

516 
	$ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

518 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

520 
ngx_hâp_s¸ùt_code_±
 *
code
;

522 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
, (
uöçå_t
));

523 i‡(
code
 =
NULL
) {

524  
NGX_CONF_ERROR
;

527 *
code
 = 
ngx_hâp_s¸ùt_bªak_code
;

529  
NGX_CONF_OK
;

530 
	}
}

534 
	$ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

536 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

538 *
mc⁄f
;

539 *
rv
;

540 
u_ch¨
 *
ñts
;

541 
ngx_uöt_t
 
i
;

542 
ngx_c⁄f_t
 
ßve
;

543 
ngx_hâp_moduÀ_t
 *
moduÀ
;

544 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

546 
ngx_hâp_s¸ùt_if_code_t
 *
if_code
;

547 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
∆cf
;

549 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

550 i‡(
˘x
 =
NULL
) {

551  
NGX_CONF_ERROR
;

554 
p˘x
 = 
cf
->
˘x
;

555 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

556 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

558 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

560  
NGX_CONF_ERROR
;

563 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

564 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

568 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x
;

570 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

572 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

573 i‡(
mc⁄f
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 
˘x
->
loc_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

581 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

583 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

584 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

585 
˛cf
->
«me
 = 
p˛cf
->name;

586 
˛cf
->
n⁄ame
 = 1;

588 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

589  
NGX_CONF_ERROR
;

592 i‡(
	`ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
cf
, 
lcf
Ë!
NGX_CONF_OK
) {

593  
NGX_CONF_ERROR
;

596 
if_code
 = 
	`ngx_¨øy_push_n
(
lcf
->
codes
, (
ngx_hâp_s¸ùt_if_code_t
));

597 i‡(
if_code
 =
NULL
) {

598  
NGX_CONF_ERROR
;

601 
if_code
->
code
 = 
ngx_hâp_s¸ùt_if_code
;

603 
ñts
 = 
lcf
->
codes
->elts;

608 
∆cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_ªwrôe_moduÀ
.
˘x_ödex
];

609 
∆cf
->
codes
 = 
lcf
->codes;

612 
ßve
 = *
cf
;

613 
cf
->
˘x
 = ctx;

615 i‡(
cf
->
cmd_ty≥
 =
NGX_HTTP_SRV_CONF
) {

616 
if_code
->
loc_c⁄f
 = 
NULL
;

617 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SIF_CONF
;

620 
if_code
->
loc_c⁄f
 = 
˘x
->loc_conf;

621 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LIF_CONF
;

624 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

626 *
cf
 = 
ßve
;

628 i‡(
rv
 !
NGX_CONF_OK
) {

629  
rv
;

633 i‡(
ñts
 !
lcf
->
codes
->elts) {

634 
if_code
 = (
ngx_hâp_s¸ùt_if_code_t
 *)

635 ((
u_ch¨
 *Ë
if_code
 + ((u_ch¨ *Ë
lcf
->
codes
->
ñts
 -Élts));

638 
if_code
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


639 - (
u_ch¨
 *Ë
if_code
;

643 
∆cf
->
codes
 = 
NULL
;

645  
NGX_CONF_OK
;

646 
	}
}

650 
	$ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
)

652 
u_ch¨
 *
p
;

653 
size_t
 
Àn
;

654 
ngx_°r_t
 *
vÆue
;

655 
ngx_uöt_t
 
cur
, 
œ°
;

656 
ngx_ªgex_compûe_t
 
rc
;

657 
ngx_hâp_s¸ùt_code_±
 *
code
;

658 
ngx_hâp_s¸ùt_fûe_code_t
 *
f›
;

659 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

660 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

662 
vÆue
 = 
cf
->
¨gs
->
ñts
;

663 
œ°
 = 
cf
->
¨gs
->
√…s
 - 1;

665 i‡(
vÆue
[1].
Àn
 < 1 || vÆue[1].
d©a
[0] != '(') {

666 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

667 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[1]);

668  
NGX_CONF_ERROR
;

671 i‡(
vÆue
[1].
Àn
 == 1) {

672 
cur
 = 2;

675 
cur
 = 1;

676 
vÆue
[1].
Àn
--;

677 
vÆue
[1].
d©a
++;

680 i‡(
vÆue
[
œ°
].
Àn
 < 1 || vÆue[œ°].
d©a
[value[last].len - 1] != ')') {

681 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

682 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
œ°
]);

683  
NGX_CONF_ERROR
;

686 i‡(
vÆue
[
œ°
].
Àn
 == 1) {

687 
œ°
--;

690 
vÆue
[
œ°
].
Àn
--;

691 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

694 
Àn
 = 
vÆue
[
cur
].len;

695 
p
 = 
vÆue
[
cur
].
d©a
;

697 i‡(
Àn
 > 1 && 
p
[0] == '$') {

699 i‡(
cur
 !
œ°
 && cur + 2 !=Üast) {

700 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

701 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

702  
NGX_CONF_ERROR
;

705 i‡(
	`ngx_hâp_ªwrôe_v¨übÀ
(
cf
, 
lcf
, &
vÆue
[
cur
]Ë!
NGX_CONF_OK
) {

706  
NGX_CONF_ERROR
;

709 i‡(
cur
 =
œ°
) {

710  
NGX_CONF_OK
;

713 
cur
++;

715 
Àn
 = 
vÆue
[
cur
].len;

716 
p
 = 
vÆue
[
cur
].
d©a
;

718 i‡(
Àn
 =1 && 
p
[0] == '=') {

720 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

721  
NGX_CONF_ERROR
;

724 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

725 (
uöçå_t
));

726 i‡(
code
 =
NULL
) {

727  
NGX_CONF_ERROR
;

730 *
code
 = 
ngx_hâp_s¸ùt_equÆ_code
;

732  
NGX_CONF_OK
;

735 i‡(
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '=') {

737 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

738  
NGX_CONF_ERROR
;

741 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

742 (
uöçå_t
));

743 i‡(
code
 =
NULL
) {

744  
NGX_CONF_ERROR
;

747 *
code
 = 
ngx_hâp_s¸ùt_nŸ_equÆ_code
;

748  
NGX_CONF_OK
;

751 i‡((
Àn
 =1 && 
p
[0] == '~')

752 || (
Àn
 =2 && 
p
[0] == '~' &&Ö[1] == '*')

753 || (
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '~')

754 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '~' &&Ö[2] == '*'))

756 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

757 (
ngx_hâp_s¸ùt_ªgex_code_t
));

758 i‡(
ªgex
 =
NULL
) {

759  
NGX_CONF_ERROR
;

762 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

764 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

766 
rc
.
∑âîn
 = 
vÆue
[
œ°
];

767 
rc
.
›ti⁄s
 = (
p
[
Àn
 - 1] ='*'Ë? 
NGX_REGEX_CASELESS
 : 0;

768 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

769 
rc
.
îr
.
d©a
 = 
îr°r
;

771 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

772 i‡(
ªgex
->ªgex =
NULL
) {

773  
NGX_CONF_ERROR
;

776 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

777 
ªgex
->
√xt
 = (
ngx_hâp_s¸ùt_ªgex_code_t
);

778 
ªgex
->
ã°
 = 1;

779 i‡(
p
[0] == '!') {

780 
ªgex
->
√g©ive_ã°
 = 1;

782 
ªgex
->
«me
 = 
vÆue
[
œ°
];

784  
NGX_CONF_OK
;

787 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

788 "u√x≥˘ed \"%V\" i¿c⁄dôi⁄", &
vÆue
[
cur
]);

789  
NGX_CONF_ERROR
;

791 } i‡((
Àn
 =2 && 
p
[0] == '-')

792 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '-'))

794 i‡(
cur
 + 1 !
œ°
) {

795 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

796 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

797  
NGX_CONF_ERROR
;

800 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

801 
vÆue
[
œ°
].
Àn
++;

803 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

804  
NGX_CONF_ERROR
;

807 
f›
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

808 (
ngx_hâp_s¸ùt_fûe_code_t
));

809 i‡(
f›
 =
NULL
) {

810  
NGX_CONF_ERROR
;

813 
f›
->
code
 = 
ngx_hâp_s¸ùt_fûe_code
;

815 i‡(
p
[1] == 'f') {

816 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_∂aö
;

817  
NGX_CONF_OK
;

820 i‡(
p
[1] == 'd') {

821 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_dú
;

822  
NGX_CONF_OK
;

825 i‡(
p
[1] == 'e') {

826 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exi°s
;

827  
NGX_CONF_OK
;

830 i‡(
p
[1] == 'x') {

831 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exec
;

832  
NGX_CONF_OK
;

835 i‡(
p
[0] == '!') {

836 i‡(
p
[2] == 'f') {

837 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
;

838  
NGX_CONF_OK
;

841 i‡(
p
[2] == 'd') {

842 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_dú
;

843  
NGX_CONF_OK
;

846 i‡(
p
[2] == 'e') {

847 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
;

848  
NGX_CONF_OK
;

851 i‡(
p
[2] == 'x') {

852 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exec
;

853  
NGX_CONF_OK
;

857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

858 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

859  
NGX_CONF_ERROR
;

862 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

863 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

865  
NGX_CONF_ERROR
;

866 
	}
}

870 
	$ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

871 
ngx_°r_t
 *
vÆue
)

873 
ngx_öt_t
 
ödex
;

874 
ngx_hâp_s¸ùt_v¨_code_t
 *
v¨_code
;

876 
vÆue
->
Àn
--;

877 
vÆue
->
d©a
++;

879 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

881 i‡(
ödex
 =
NGX_ERROR
) {

882  
NGX_CONF_ERROR
;

885 
v¨_code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

886 (
ngx_hâp_s¸ùt_v¨_code_t
));

887 i‡(
v¨_code
 =
NULL
) {

888  
NGX_CONF_ERROR
;

891 
v¨_code
->
code
 = 
ngx_hâp_s¸ùt_v¨_code
;

892 
v¨_code
->
ödex
 = index;

894  
NGX_CONF_OK
;

895 
	}
}

899 
	$ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

901 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

903 
ngx_öt_t
 
ödex
;

904 
ngx_°r_t
 *
vÆue
;

905 
ngx_hâp_v¨übÀ_t
 *
v
;

906 
ngx_hâp_s¸ùt_v¨_code_t
 *
vcode
;

907 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
vhcode
;

909 
vÆue
 = 
cf
->
¨gs
->
ñts
;

911 i‡(
vÆue
[1].
d©a
[0] != '$') {

912 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

913 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

914  
NGX_CONF_ERROR
;

917 
vÆue
[1].
Àn
--;

918 
vÆue
[1].
d©a
++;

920 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1],

921 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_WEAK
);

922 i‡(
v
 =
NULL
) {

923  
NGX_CONF_ERROR
;

926 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

927 i‡(
ödex
 =
NGX_ERROR
) {

928  
NGX_CONF_ERROR
;

931 i‡(
v
->
gë_h™dÀr
 =
NULL
) {

932 
v
->
gë_h™dÀr
 = 
ngx_hâp_ªwrôe_v¨
;

933 
v
->
d©a
 = 
ödex
;

936 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[2]Ë!
NGX_CONF_OK
) {

937  
NGX_CONF_ERROR
;

940 i‡(
v
->
£t_h™dÀr
) {

941 
vhcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

942 (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
));

943 i‡(
vhcode
 =
NULL
) {

944  
NGX_CONF_ERROR
;

947 
vhcode
->
code
 = 
ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
;

948 
vhcode
->
h™dÀr
 = 
v
->
£t_h™dÀr
;

949 
vhcode
->
d©a
 = 
v
->data;

951  
NGX_CONF_OK
;

954 
vcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

955 (
ngx_hâp_s¸ùt_v¨_code_t
));

956 i‡(
vcode
 =
NULL
) {

957  
NGX_CONF_ERROR
;

960 
vcode
->
code
 = 
ngx_hâp_s¸ùt_£t_v¨_code
;

961 
vcode
->
ödex
 = (
uöçå_t
) index;

963  
NGX_CONF_OK
;

964 
	}
}

968 
	$ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

969 
ngx_°r_t
 *
vÆue
)

971 
ngx_öt_t
 
n
;

972 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

973 
ngx_hâp_s¸ùt_vÆue_code_t
 *
vÆ
;

974 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
com∂ex
;

976 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
vÆue
);

978 i‡(
n
 == 0) {

979 
vÆ
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

980 (
ngx_hâp_s¸ùt_vÆue_code_t
));

981 i‡(
vÆ
 =
NULL
) {

982  
NGX_CONF_ERROR
;

985 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

987 i‡(
n
 =
NGX_ERROR
) {

988 
n
 = 0;

991 
vÆ
->
code
 = 
ngx_hâp_s¸ùt_vÆue_code
;

992 
vÆ
->
vÆue
 = (
uöçå_t
Ë
n
;

993 
vÆ
->
ãxt_Àn
 = (
uöçå_t
Ë
vÆue
->
Àn
;

994 
vÆ
->
ãxt_d©a
 = (
uöçå_t
Ë
vÆue
->
d©a
;

996  
NGX_CONF_OK
;

999 
com∂ex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

1000 (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
));

1001 i‡(
com∂ex
 =
NULL
) {

1002  
NGX_CONF_ERROR
;

1005 
com∂ex
->
code
 = 
ngx_hâp_s¸ùt_com∂ex_vÆue_code
;

1006 
com∂ex
->
Àngths
 = 
NULL
;

1008 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1010 
sc
.
cf
 = cf;

1011 
sc
.
sour˚
 = 
vÆue
;

1012 
sc
.
Àngths
 = &
com∂ex
->lengths;

1013 
sc
.
vÆues
 = &
lcf
->
codes
;

1014 
sc
.
v¨übÀs
 = 
n
;

1015 
sc
.
com∂ëe_Àngths
 = 1;

1017 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1018  
NGX_CONF_ERROR
;

1021  
NGX_CONF_OK
;

1022 
	}
}

	@src/http/modules/ngx_http_scgi_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
ngx_¨øy_t
 
	mˇches
;

16 } 
	tngx_hâp_scgi_maö_c⁄f_t
;

20 
ngx_¨øy_t
 *
	mÊushes
;

21 
ngx_¨øy_t
 *
	mÀngths
;

22 
ngx_¨øy_t
 *
	mvÆues
;

23 
ngx_uöt_t
 
	mnumbî
;

24 
ngx_hash_t
 
	mhash
;

25 } 
	tngx_hâp_scgi_∑øms_t
;

29 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

31 
ngx_hâp_scgi_∑øms_t
 
	m∑øms
;

32 #i‡(
NGX_HTTP_CACHE
)

33 
ngx_hâp_scgi_∑øms_t
 
	m∑øms_ˇche
;

35 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

37 
ngx_¨øy_t
 *
	mscgi_Àngths
;

38 
ngx_¨øy_t
 *
	mscgi_vÆues
;

40 #i‡(
NGX_HTTP_CACHE
)

41 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

43 } 
	tngx_hâp_scgi_loc_c⁄f_t
;

46 
ngx_öt_t
 
ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
);

48 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_öt_t
 
ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

51 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

53 
ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

55 *
ngx_hâp_scgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

56 *
ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

58 *
chûd
);

59 
ngx_öt_t
 
ngx_hâp_scgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
,

60 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_scgi_∑øms_t
 *
∑øms
,

61 
ngx_keyvÆ_t
 *
deÁu…_∑øms
);

63 *
ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

64 *
ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

69 *
ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

76 
ngx_c⁄f_bômask_t
 
	gngx_hâp_scgi_√xt_up°ªam_masks
[] = {

77 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

78 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

79 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

80 { 
ngx_°rög
("n⁄_idempŸít"), 
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
 },

81 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

82 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

83 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

84 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

85 { 
ngx_°rög
("hâp_429"), 
NGX_HTTP_UPSTREAM_FT_HTTP_429
 },

86 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

87 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

88 { 
ngx_nuŒ_°rög
, 0 }

92 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
;

95 
ngx_comm™d_t
 
	gngx_hâp_scgi_comm™ds
[] = {

97 { 
ngx_°rög
("scgi_pass"),

98 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

99 
ngx_hâp_scgi_∑ss
,

100 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
NULL
 },

104 { 
ngx_°rög
("scgi_store"),

105 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

106 
ngx_hâp_scgi_°‹e
,

107 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
NULL
 },

111 { 
ngx_°rög
("scgi_store_access"),

112 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

113 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

114 
NGX_HTTP_LOC_CONF_OFFSET
,

115 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

116 
NULL
 },

118 { 
ngx_°rög
("scgi_buffering"),

119 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

120 
ngx_c⁄f_£t_Êag_¶Ÿ
,

121 
NGX_HTTP_LOC_CONF_OFFSET
,

122 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

123 
NULL
 },

125 { 
ngx_°rög
("scgi_request_buffering"),

126 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

127 
ngx_c⁄f_£t_Êag_¶Ÿ
,

128 
NGX_HTTP_LOC_CONF_OFFSET
,

129 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

130 
NULL
 },

132 { 
ngx_°rög
("scgi_ignore_client_abort"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

134 
ngx_c⁄f_£t_Êag_¶Ÿ
,

135 
NGX_HTTP_LOC_CONF_OFFSET
,

136 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

137 
NULL
 },

139 { 
ngx_°rög
("scgi_bind"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

141 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

142 
NGX_HTTP_LOC_CONF_OFFSET
,

143 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

144 
NULL
 },

146 { 
ngx_°rög
("scgi_connect_timeout"),

147 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

148 
ngx_c⁄f_£t_m£c_¶Ÿ
,

149 
NGX_HTTP_LOC_CONF_OFFSET
,

150 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

151 
NULL
 },

153 { 
ngx_°rög
("scgi_send_timeout"),

154 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

155 
ngx_c⁄f_£t_m£c_¶Ÿ
,

156 
NGX_HTTP_LOC_CONF_OFFSET
,

157 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

158 
NULL
 },

160 { 
ngx_°rög
("scgi_buffer_size"),

161 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

162 
ngx_c⁄f_£t_size_¶Ÿ
,

163 
NGX_HTTP_LOC_CONF_OFFSET
,

164 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

165 
NULL
 },

167 { 
ngx_°rög
("scgi_pass_request_headers"),

168 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

169 
ngx_c⁄f_£t_Êag_¶Ÿ
,

170 
NGX_HTTP_LOC_CONF_OFFSET
,

171 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

172 
NULL
 },

174 { 
ngx_°rög
("scgi_pass_request_body"),

175 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

176 
ngx_c⁄f_£t_Êag_¶Ÿ
,

177 
NGX_HTTP_LOC_CONF_OFFSET
,

178 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

179 
NULL
 },

181 { 
ngx_°rög
("scgi_intercept_errors"),

182 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

183 
ngx_c⁄f_£t_Êag_¶Ÿ
,

184 
NGX_HTTP_LOC_CONF_OFFSET
,

185 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

186 
NULL
 },

188 { 
ngx_°rög
("scgi_read_timeout"),

189 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

190 
ngx_c⁄f_£t_m£c_¶Ÿ
,

191 
NGX_HTTP_LOC_CONF_OFFSET
,

192 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

193 
NULL
 },

195 { 
ngx_°rög
("scgi_buffers"),

196 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

197 
ngx_c⁄f_£t_bufs_¶Ÿ
,

198 
NGX_HTTP_LOC_CONF_OFFSET
,

199 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

200 
NULL
 },

202 { 
ngx_°rög
("scgi_busy_buffers_size"),

203 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

204 
ngx_c⁄f_£t_size_¶Ÿ
,

205 
NGX_HTTP_LOC_CONF_OFFSET
,

206 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

207 
NULL
 },

209 { 
ngx_°rög
("scgi_force_ranges"),

210 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

211 
ngx_c⁄f_£t_Êag_¶Ÿ
,

212 
NGX_HTTP_LOC_CONF_OFFSET
,

213 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

214 
NULL
 },

216 { 
ngx_°rög
("scgi_limit_rate"),

217 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

218 
ngx_c⁄f_£t_size_¶Ÿ
,

219 
NGX_HTTP_LOC_CONF_OFFSET
,

220 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

221 
NULL
 },

223 #i‡(
NGX_HTTP_CACHE
)

225 { 
ngx_°rög
("scgi_cache"),

226 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

227 
ngx_hâp_scgi_ˇche
,

228 
NGX_HTTP_LOC_CONF_OFFSET
,

230 
NULL
 },

232 { 
ngx_°rög
("scgi_cache_key"),

233 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

234 
ngx_hâp_scgi_ˇche_key
,

235 
NGX_HTTP_LOC_CONF_OFFSET
,

237 
NULL
 },

239 { 
ngx_°rög
("scgi_cache_path"),

240 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

241 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

242 
NGX_HTTP_MAIN_CONF_OFFSET
,

243 
off£tof
(
ngx_hâp_scgi_maö_c⁄f_t
, 
ˇches
),

244 &
ngx_hâp_scgi_moduÀ
 },

246 { 
ngx_°rög
("scgi_cache_bypass"),

247 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

248 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

249 
NGX_HTTP_LOC_CONF_OFFSET
,

250 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

251 
NULL
 },

253 { 
ngx_°rög
("scgi_no_cache"),

254 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

255 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

256 
NGX_HTTP_LOC_CONF_OFFSET
,

257 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

258 
NULL
 },

260 { 
ngx_°rög
("scgi_cache_valid"),

261 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

262 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

263 
NGX_HTTP_LOC_CONF_OFFSET
,

264 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

265 
NULL
 },

267 { 
ngx_°rög
("scgi_cache_min_uses"),

268 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

269 
ngx_c⁄f_£t_num_¶Ÿ
,

270 
NGX_HTTP_LOC_CONF_OFFSET
,

271 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

272 
NULL
 },

274 { 
ngx_°rög
("scgi_cache_max_range_offset"),

275 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

276 
ngx_c⁄f_£t_off_¶Ÿ
,

277 
NGX_HTTP_LOC_CONF_OFFSET
,

278 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_max_ønge_off£t
),

279 
NULL
 },

281 { 
ngx_°rög
("scgi_cache_use_stale"),

282 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

283 
ngx_c⁄f_£t_bômask_¶Ÿ
,

284 
NGX_HTTP_LOC_CONF_OFFSET
,

285 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

286 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

288 { 
ngx_°rög
("scgi_cache_methods"),

289 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

290 
ngx_c⁄f_£t_bômask_¶Ÿ
,

291 
NGX_HTTP_LOC_CONF_OFFSET
,

292 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

293 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

295 { 
ngx_°rög
("scgi_cache_lock"),

296 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

297 
ngx_c⁄f_£t_Êag_¶Ÿ
,

298 
NGX_HTTP_LOC_CONF_OFFSET
,

299 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

300 
NULL
 },

302 { 
ngx_°rög
("scgi_cache_lock_timeout"),

303 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

304 
ngx_c⁄f_£t_m£c_¶Ÿ
,

305 
NGX_HTTP_LOC_CONF_OFFSET
,

306 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

307 
NULL
 },

309 { 
ngx_°rög
("scgi_cache_lock_age"),

310 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

311 
ngx_c⁄f_£t_m£c_¶Ÿ
,

312 
NGX_HTTP_LOC_CONF_OFFSET
,

313 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

314 
NULL
 },

316 { 
ngx_°rög
("scgi_cache_revalidate"),

317 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

318 
ngx_c⁄f_£t_Êag_¶Ÿ
,

319 
NGX_HTTP_LOC_CONF_OFFSET
,

320 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

321 
NULL
 },

323 { 
ngx_°rög
("scgi_cache_background_update"),

324 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

325 
ngx_c⁄f_£t_Êag_¶Ÿ
,

326 
NGX_HTTP_LOC_CONF_OFFSET
,

327 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_background_upd©e
),

328 
NULL
 },

332 { 
ngx_°rög
("scgi_temp_path"),

333 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

334 
ngx_c⁄f_£t_∑th_¶Ÿ
,

335 
NGX_HTTP_LOC_CONF_OFFSET
,

336 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

337 
NULL
 },

339 { 
ngx_°rög
("scgi_max_temp_file_size"),

340 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

341 
ngx_c⁄f_£t_size_¶Ÿ
,

342 
NGX_HTTP_LOC_CONF_OFFSET
,

343 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

344 
NULL
 },

346 { 
ngx_°rög
("scgi_temp_file_write_size"),

347 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

348 
ngx_c⁄f_£t_size_¶Ÿ
,

349 
NGX_HTTP_LOC_CONF_OFFSET
,

350 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

351 
NULL
 },

353 { 
ngx_°rög
("scgi_next_upstream"),

354 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

355 
ngx_c⁄f_£t_bômask_¶Ÿ
,

356 
NGX_HTTP_LOC_CONF_OFFSET
,

357 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

358 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

360 { 
ngx_°rög
("scgi_next_upstream_tries"),

361 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

362 
ngx_c⁄f_£t_num_¶Ÿ
,

363 
NGX_HTTP_LOC_CONF_OFFSET
,

364 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

365 
NULL
 },

367 { 
ngx_°rög
("scgi_next_upstream_timeout"),

368 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

369 
ngx_c⁄f_£t_m£c_¶Ÿ
,

370 
NGX_HTTP_LOC_CONF_OFFSET
,

371 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

372 
NULL
 },

374 { 
ngx_°rög
("scgi_param"),

375 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

376 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

377 
NGX_HTTP_LOC_CONF_OFFSET
,

378 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
∑øms_sour˚
),

379 
NULL
 },

381 { 
ngx_°rög
("scgi_pass_header"),

382 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

383 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

384 
NGX_HTTP_LOC_CONF_OFFSET
,

385 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

386 
NULL
 },

388 { 
ngx_°rög
("scgi_hide_header"),

389 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

390 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

391 
NGX_HTTP_LOC_CONF_OFFSET
,

392 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

393 
NULL
 },

395 { 
ngx_°rög
("scgi_ignore_headers"),

396 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

397 
ngx_c⁄f_£t_bômask_¶Ÿ
,

398 
NGX_HTTP_LOC_CONF_OFFSET
,

399 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

400 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

402 
ngx_nuŒ_comm™d


406 
ngx_hâp_moduÀ_t
 
	gngx_hâp_scgi_moduÀ_˘x
 = {

407 
NULL
,

408 
NULL
,

410 
ngx_hâp_scgi_¸óã_maö_c⁄f
,

411 
NULL
,

413 
NULL
,

414 
NULL
,

416 
ngx_hâp_scgi_¸óã_loc_c⁄f
,

417 
ngx_hâp_scgi_mîge_loc_c⁄f


421 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
 = {

422 
NGX_MODULE_V1
,

423 &
ngx_hâp_scgi_moduÀ_˘x
,

424 
ngx_hâp_scgi_comm™ds
,

425 
NGX_HTTP_MODULE
,

426 
NULL
,

427 
NULL
,

428 
NULL
,

429 
NULL
,

430 
NULL
,

431 
NULL
,

432 
NULL
,

433 
NGX_MODULE_V1_PADDING


437 
ngx_°r_t
 
	gngx_hâp_scgi_hide_hódîs
[] = {

438 
ngx_°rög
("Status"),

439 
ngx_°rög
("X-Accel-Expires"),

440 
ngx_°rög
("X-Accel-Redirect"),

441 
ngx_°rög
("X-Accel-Limit-Rate"),

442 
ngx_°rög
("X-Accel-Buffering"),

443 
ngx_°rög
("X-Accel-Charset"),

444 
ngx_nuŒ_°rög


448 #i‡(
NGX_HTTP_CACHE
)

450 
ngx_keyvÆ_t
 
	gngx_hâp_scgi_ˇche_hódîs
[] = {

451 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

452 
ngx_°rög
("$upstream_cache_last_modified") },

453 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

454 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("$upstream_cache_etag") },

455 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

456 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

457 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

458 { 
ngx_nuŒ_°rög
,Çgx_null_string }

464 
ngx_∑th_öô_t
 
	gngx_hâp_scgi_ãmp_∑th
 = {

465 
ngx_°rög
(
NGX_HTTP_SCGI_TEMP_PATH
), { 1, 2, 0 }

469 
ngx_öt_t


470 
	$ngx_hâp_scgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

472 
ngx_öt_t
 
rc
;

473 
ngx_hâp_°©us_t
 *
°©us
;

474 
ngx_hâp_up°ªam_t
 *
u
;

475 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

476 #i‡(
NGX_HTTP_CACHE
)

477 
ngx_hâp_scgi_maö_c⁄f_t
 *
smcf
;

480 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

481  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

484 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

485 i‡(
°©us
 =
NULL
) {

486  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

489 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_scgi_moduÀ
);

491 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

493 i‡(
scf
->
scgi_Àngths
) {

494 i‡(
	`ngx_hâp_scgi_evÆ
(
r
, 
scf
Ë!
NGX_OK
) {

495  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

499 
u
 = 
r
->
up°ªam
;

501 
	`ngx_°r_£t
(&
u
->
schema
, "scgi://");

502 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_scgi_moduÀ
;

504 
u
->
c⁄f
 = &
scf
->
up°ªam
;

506 #i‡(
NGX_HTTP_CACHE
)

507 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

509 
u
->
ˇches
 = &
smcf
->caches;

510 
u
->
¸óã_key
 = 
ngx_hâp_scgi_¸óã_key
;

513 
u
->
¸óã_ªque°
 = 
ngx_hâp_scgi_¸óã_ªque°
;

514 
u
->
ªöô_ªque°
 = 
ngx_hâp_scgi_ªöô_ªque°
;

515 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

516 
u
->
ab‹t_ªque°
 = 
ngx_hâp_scgi_ab‹t_ªque°
;

517 
u
->
föÆize_ªque°
 = 
ngx_hâp_scgi_föÆize_ªque°
;

518 
r
->
°©e
 = 0;

520 
u
->
buf„rög
 = 
scf
->
up°ªam
.buffering;

522 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

523 i‡(
u
->
pùe
 =
NULL
) {

524  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

527 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

528 
u
->
pùe
->
öput_˘x
 = 
r
;

530 i‡(!
scf
->
up°ªam
.
ªque°_buf„rög


531 && 
scf
->
up°ªam
.
∑ss_ªque°_body


532 && !
r
->
hódîs_ö
.
chunked
)

534 
r
->
ªque°_body_no_buf„rög
 = 1;

537 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

539 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

540  
rc
;

543  
NGX_DONE
;

544 
	}
}

547 
ngx_öt_t


548 
	$ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_scgi_loc_c⁄f_t
 * 
scf
)

550 
ngx_uæ_t
 
uæ
;

551 
ngx_hâp_up°ªam_t
 *
u
;

553 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

555 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
scf
->
scgi_Àngths
->
ñts
, 0,

556 
scf
->
scgi_vÆues
->
ñts
)

557 =
NULL
)

559  
NGX_ERROR
;

562 
uæ
.
no_ªsﬁve
 = 1;

564 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

565 i‡(
uæ
.
îr
) {

566 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

567 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

570  
NGX_ERROR
;

573 
u
 = 
r
->
up°ªam
;

575 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

576 i‡(
u
->
ªsﬁved
 =
NULL
) {

577  
NGX_ERROR
;

580 i‡(
uæ
.
addrs
) {

581 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

582 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

583 
u
->
ªsﬁved
->
«me
 = 
uæ
.
addrs
[0].name;

584 
u
->
ªsﬁved
->
«ddrs
 = 1;

587 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

588 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

589 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

591  
NGX_OK
;

592 
	}
}

595 #i‡(
NGX_HTTP_CACHE
)

597 
ngx_öt_t


598 
	$ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

600 
ngx_°r_t
 *
key
;

601 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

603 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

604 i‡(
key
 =
NULL
) {

605  
NGX_ERROR
;

608 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

610 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
scf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

611  
NGX_ERROR
;

614  
NGX_OK
;

615 
	}
}

620 
ngx_öt_t


621 
	$ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

623 
off_t
 
c⁄ã¡_Àngth_n
;

624 
u_ch¨
 
ch
, *
key
, *
vÆ
, *
lowˇ£_key
;

625 
size_t
 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
Æloˇãd
;

626 
ngx_buf_t
 *
b
;

627 
ngx_°r_t
 
c⁄ã¡_Àngth
;

628 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

629 
ngx_chaö_t
 *
˛
, *
body
;

630 
ngx_li°_∑π_t
 *
∑π
;

631 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

632 
ngx_hâp_scgi_∑øms_t
 *
∑øms
;

633 
ngx_hâp_s¸ùt_code_±
 
code
;

634 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

635 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

636 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

637 
u_ch¨
 
buf„r
[
NGX_OFF_T_LEN
];

639 
c⁄ã¡_Àngth_n
 = 0;

640 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

642 
body
) {

643 
c⁄ã¡_Àngth_n
 +
	`ngx_buf_size
(
body
->
buf
);

644 
body
 = body->
√xt
;

647 
c⁄ã¡_Àngth
.
d©a
 = 
buf„r
;

648 
c⁄ã¡_Àngth
.
Àn
 = 
	`ngx_•rötf
(
buf„r
, "%O", 
c⁄ã¡_Àngth_n
) - buffer;

650 
Àn
 = ("CONTENT_LENGTH"Ë+ 
c⁄ã¡_Àngth
.len + 1;

652 
hódî_∑øms
 = 0;

653 
ign‹ed
 = 
NULL
;

655 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

657 #i‡(
NGX_HTTP_CACHE
)

658 
∑øms
 = 
r
->
up°ªam
->
ˇchóbÀ
 ? &
scf
->
∑øms_ˇche
 : &scf->params;

660 
∑øms
 = &
scf
->params;

663 i‡(
∑øms
->
Àngths
) {

664 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

666 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∑øms
->
Êushes
);

667 
À
.
Êushed
 = 1;

669 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

670 
À
.
ªque°
 = 
r
;

672 *(
uöçå_t
 *Ë
À
.
ù
) {

674 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

675 
key_Àn
 = 
	`lcode
(&
À
);

677 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

678 
skù_em±y
 = 
	`lcode
(&
À
);

680 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

681 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

683 
À
.
ù
 +(
uöçå_t
);

685 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

689 
Àn
 +
key_Àn
 + 
vÆ_Àn
 + 1;

693 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

695 
Æloˇãd
 = 0;

696 
lowˇ£_key
 = 
NULL
;

698 i‡(
∑øms
->
numbî
) {

699 
n
 = 0;

700 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

702 
∑π
) {

703 
n
 +
∑π
->
√…s
;

704 
∑π
 =Ö¨t->
√xt
;

707 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

708 i‡(
ign‹ed
 =
NULL
) {

709  
NGX_ERROR
;

713 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

714 
hódî
 = 
∑π
->
ñts
;

716 
i
 = 0; ; i++) {

718 i‡(
i
 >
∑π
->
√…s
) {

719 i‡(
∑π
->
√xt
 =
NULL
) {

723 
∑π
 =Ö¨t->
√xt
;

724 
hódî
 = 
∑π
->
ñts
;

725 
i
 = 0;

728 i‡(
∑øms
->
numbî
) {

729 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

730 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

731 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

732 i‡(
lowˇ£_key
 =
NULL
) {

733  
NGX_ERROR
;

737 
hash
 = 0;

739 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

740 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

742 i‡(
ch
 >= 'A' && ch <= 'Z') {

743 
ch
 |= 0x20;

745 } i‡(
ch
 == '-') {

746 
ch
 = '_';

749 
hash
 = 
	`ngx_hash
(hash, 
ch
);

750 
lowˇ£_key
[
n
] = 
ch
;

753 i‡(
	`ngx_hash_föd
(&
∑øms
->
hash
, hash, 
lowˇ£_key
, 
n
)) {

754 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

759 
Àn
 +("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len + 1

760 + 
hódî
[
i
].
vÆue
.
Àn
 + 1;

766 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
 + 1 + 
Àn
 + 1);

767 i‡(
b
 =
NULL
) {

768  
NGX_ERROR
;

771 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

772 i‡(
˛
 =
NULL
) {

773  
NGX_ERROR
;

776 
˛
->
buf
 = 
b
;

778 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%ui:CONTENT_LENGTH%Z%V%Z",

779 
Àn
, &
c⁄ã¡_Àngth
);

781 i‡(
∑øms
->
Àngths
) {

782 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

784 
e
.
ù
 = 
∑øms
->
vÆues
->
ñts
;

785 
e
.
pos
 = 
b
->
œ°
;

786 
e
.
ªque°
 = 
r
;

787 
e
.
Êushed
 = 1;

789 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

791 *(
uöçå_t
 *Ë
À
.
ù
) {

793 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

794 
	`lcode
(&
À
);

796 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

797 
skù_em±y
 = 
	`lcode
(&
À
);

799 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

800 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

802 
À
.
ù
 +(
uöçå_t
);

804 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

805 
e
.
skù
 = 1;

807 *(
uöçå_t
 *Ë
e
.
ù
) {

808 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

809 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

811 
e
.
ù
 +(
uöçå_t
);

813 
e
.
skù
 = 0;

818 #i‡(
NGX_DEBUG
)

819 
key
 = 
e
.
pos
;

821 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

822 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

824 #i‡(
NGX_DEBUG
)

825 
vÆ
 = 
e
.
pos
;

827 *(
uöçå_t
 *Ë
e
.
ù
) {

828 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

829 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

831 *
e
.
pos
++ = '\0';

832 
e
.
ù
 +(
uöçå_t
);

834 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

835 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

838 
b
->
œ°
 = 
e
.
pos
;

841 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

843 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

844 
hódî
 = 
∑π
->
ñts
;

846 
i
 = 0; ; i++) {

848 i‡(
i
 >
∑π
->
√…s
) {

849 i‡(
∑π
->
√xt
 =
NULL
) {

853 
∑π
 =Ö¨t->
√xt
;

854 
hódî
 = 
∑π
->
ñts
;

855 
i
 = 0;

858 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

859 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

860 
√xt
;

864 
key
 = 
b
->
œ°
;

865 
b
->
œ°
 = 
	`ngx_˝ymem
(
key
, "HTTP_", ("HTTP_") - 1);

867 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

868 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

870 i‡(
ch
 >= 'a' && ch <= 'z') {

871 
ch
 &= ~0x20;

873 } i‡(
ch
 == '-') {

874 
ch
 = '_';

877 *
b
->
œ°
++ = 
ch
;

880 *
b
->
œ°
++ = (
u_ch¨
) 0;

882 
vÆ
 = 
b
->
œ°
;

883 
b
->
œ°
 = 
	`ngx_c›y
(
vÆ
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

884 *
b
->
œ°
++ = (
u_ch¨
) 0;

886 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

887 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

889 
√xt
:

895 *
b
->
œ°
++ = (
u_ch¨
) ',';

897 i‡(
r
->
ªque°_body_no_buf„rög
) {

898 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

900 } i‡(
scf
->
up°ªam
.
∑ss_ªque°_body
) {

901 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

902 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

904 
body
) {

905 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

906 i‡(
b
 =
NULL
) {

907  
NGX_ERROR
;

910 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

912 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

913 i‡(
˛
->
√xt
 =
NULL
) {

914  
NGX_ERROR
;

917 
˛
 = cl->
√xt
;

918 
˛
->
buf
 = 
b
;

920 
body
 = body->
√xt
;

924 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

927 
˛
->
√xt
 = 
NULL
;

929  
NGX_OK
;

930 
	}
}

933 
ngx_öt_t


934 
	$ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

936 
ngx_hâp_°©us_t
 *
°©us
;

938 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

940 i‡(
°©us
 =
NULL
) {

941  
NGX_OK
;

944 
°©us
->
code
 = 0;

945 
°©us
->
cou¡
 = 0;

946 
°©us
->
°¨t
 = 
NULL
;

947 
°©us
->
íd
 = 
NULL
;

949 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

950 
r
->
°©e
 = 0;

952  
NGX_OK
;

953 
	}
}

956 
ngx_öt_t


957 
	$ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

959 
size_t
 
Àn
;

960 
ngx_öt_t
 
rc
;

961 
ngx_hâp_°©us_t
 *
°©us
;

962 
ngx_hâp_up°ªam_t
 *
u
;

964 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

966 i‡(
°©us
 =
NULL
) {

967  
NGX_ERROR
;

970 
u
 = 
r
->
up°ªam
;

972 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

974 i‡(
rc
 =
NGX_AGAIN
) {

975  
rc
;

978 i‡(
rc
 =
NGX_ERROR
) {

979 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

980  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

983 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

984 
u
->
°©e
->
°©us
 = sètus->
code
;

987 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

989 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

990 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

992 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

993 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

994  
NGX_ERROR
;

997 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

999 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1001 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1003 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

1005  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

1006 
	}
}

1009 
ngx_öt_t


1010 
	$ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1012 
ngx_°r_t
 *
°©us_löe
;

1013 
ngx_öt_t
 
rc
, 
°©us
;

1014 
ngx_èbÀ_ñt_t
 *
h
;

1015 
ngx_hâp_up°ªam_t
 *
u
;

1016 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1017 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1019 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1023 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1025 i‡(
rc
 =
NGX_OK
) {

1029 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1030 i‡(
h
 =
NULL
) {

1031  
NGX_ERROR
;

1034 
h
->
hash
 = 
r
->
hódî_hash
;

1036 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1037 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1039 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1040 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1041 + 
h
->
key
.
Àn
);

1042 i‡(
h
->
key
.
d©a
 =
NULL
) {

1043 
h
->
hash
 = 0;

1044  
NGX_ERROR
;

1047 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1048 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1050 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1051 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1052 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1053 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1055 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1056 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1059 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1062 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1063 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1065 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1066  
NGX_ERROR
;

1069 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1070 "hâ∞scgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1075 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1079 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1082 
u
 = 
r
->
up°ªam
;

1084 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1085 
d⁄e
;

1088 i‡(
u
->
hódîs_ö
.
°©us
) {

1089 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1091 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1092 i‡(
°©us
 =
NGX_ERROR
) {

1093 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1095 
°©us_löe
);

1096  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1099 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1100 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1102 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1103 
u
->
hódîs_ö
.
°©us_n
 = 302;

1104 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1108 
u
->
hódîs_ö
.
°©us_n
 = 200;

1109 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1112 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1113 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1116 
d⁄e
:

1118 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1119 && 
r
->
hódîs_ö
.
upgøde
)

1121 
u
->
upgøde
 = 1;

1124  
NGX_OK
;

1127 i‡(
rc
 =
NGX_AGAIN
) {

1128  
NGX_AGAIN
;

1133 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1136  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1138 
	}
}

1142 
	$ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1144 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1148 
	}
}

1152 
	$ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1154 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1158 
	}
}

1162 
	$ngx_hâp_scgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1164 
ngx_hâp_scgi_maö_c⁄f_t
 *
c⁄f
;

1166 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_maö_c⁄f_t
));

1167 i‡(
c⁄f
 =
NULL
) {

1168  
NULL
;

1171 #i‡(
NGX_HTTP_CACHE
)

1172 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

1173 (
ngx_hâp_fûe_ˇche_t
 *))

1174 !
NGX_OK
)

1176  
NULL
;

1180  
c⁄f
;

1181 
	}
}

1185 
	$ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1187 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
;

1189 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_loc_c⁄f_t
));

1190 i‡(
c⁄f
 =
NULL
) {

1191  
NULL
;

1194 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1195 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1196 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

1197 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1198 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

1199 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1200 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

1202 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1204 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1205 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1206 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1207 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1209 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1210 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1211 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

1213 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1214 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1215 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1217 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1218 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1220 #i‡(
NGX_HTTP_CACHE
)

1221 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

1222 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1223 
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
 = 
NGX_CONF_UNSET
;

1224 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1225 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1226 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1227 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1228 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1229 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

1230 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

1231 
c⁄f
->
up°ªam
.
ˇche_background_upd©e
 = 
NGX_CONF_UNSET
;

1234 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1235 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1237 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1240 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1242 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1244 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "scgi");

1246  
c⁄f
;

1247 
	}
}

1251 
	$ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1253 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1254 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1256 
size_t
 
size
;

1257 
ngx_öt_t
 
rc
;

1258 
ngx_hash_öô_t
 
hash
;

1259 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1261 #i‡(
NGX_HTTP_CACHE
)

1263 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

1264 
c⁄f
->
up°ªam
.
ˇche
 = 0;

1267 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

1268 
c⁄f
->
up°ªam
.
°‹e
 = 0;

1273 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

1274 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1276 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1277 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1280 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1281 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1283 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

1284 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

1286 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1287 
¥ev
->
up°ªam
.
buf„rög
, 1);

1289 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

1290 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

1292 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1293 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

1296 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

1298 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1299 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1301 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1302 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1304 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1305 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1307 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1308 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1310 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

1311 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

1313 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1314 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1316 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1317 
¥ev
->
up°ªam
.
buf„r_size
,

1318 (
size_t
Ë
ngx_∑gesize
);

1320 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

1321 
¥ev
->
up°ªam
.
limô_øã
, 0);

1324 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1325 8, 
ngx_∑gesize
);

1327 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1328 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1330  
NGX_CONF_ERROR
;

1334 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1335 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1336 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1340 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1341 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1342 
NGX_CONF_UNSET_SIZE
);

1344 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1345 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1347 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1348 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1351 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1352 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1357  
NGX_CONF_ERROR
;

1360 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1361 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1363 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1367  
NGX_CONF_ERROR
;

1371 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1372 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1373 
NGX_CONF_UNSET_SIZE
);

1375 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1376 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1378 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1379 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1382 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1383 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1388  
NGX_CONF_ERROR
;

1392 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1393 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1394 
NGX_CONF_UNSET_SIZE
);

1396 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1397 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1399 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1400 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1403 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1404 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

1406 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1412  
NGX_CONF_ERROR
;

1416 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1417 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1418 
NGX_CONF_BITMASK_SET
);

1421 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1422 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1423 (
NGX_CONF_BITMASK_SET


1424 |
NGX_HTTP_UPSTREAM_FT_ERROR


1425 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1427 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1428 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1429 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1432 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1433 
¥ev
->
up°ªam
.
ãmp_∑th
,

1434 &
ngx_hâp_scgi_ãmp_∑th
)

1435 !
NGX_OK
)

1437  
NGX_CONF_ERROR
;

1440 #i‡(
NGX_HTTP_CACHE
)

1442 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

1443 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1444 
¥ev
->
up°ªam
.
ˇche
, 0);

1446 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

1447 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

1450 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

1451 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1453 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

1455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1457 &
shm_z⁄e
->
shm
.
«me
);

1459  
NGX_CONF_ERROR
;

1462 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1463 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1465 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
,

1466 
¥ev
->
up°ªam
.
ˇche_max_ønge_off£t
,

1467 
NGX_MAX_OFF_T_VALUE
);

1469 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1470 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1471 (
NGX_CONF_BITMASK_SET


1472 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1474 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1475 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1476 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1479 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1480 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1483 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1484 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1487 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1489 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1490 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1492 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1493 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1495 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1496 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1498 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1499 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1502 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1503 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1507 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1508 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1510 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1511 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1513 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

1514 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

1516 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

1517 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

1519 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_background_upd©e
,

1520 
¥ev
->
up°ªam
.
ˇche_background_upd©e
, 0);

1524 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1525 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1526 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1527 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1529 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1530 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1532 
hash
.
max_size
 = 512;

1533 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1534 
hash
.
«me
 = "scgi_hide_headers_hash";

1536 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1537 &
¥ev
->
up°ªam
, 
ngx_hâp_scgi_hide_hódîs
, &
hash
)

1538 !
NGX_OK
)

1540  
NGX_CONF_ERROR
;

1543 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1545 i‡(
˛cf
->
n⁄ame


1546 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
scgi_Àngths
 == NULL)

1548 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1549 
c⁄f
->
scgi_Àngths
 = 
¥ev
->scgi_lengths;

1550 
c⁄f
->
scgi_vÆues
 = 
¥ev
->scgi_values;

1553 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


1554 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
scgi_Àngths
))

1556 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1559 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1560 
c⁄f
->
∑øms
 = 
¥ev
->params;

1561 #i‡(
NGX_HTTP_CACHE
)

1562 
c⁄f
->
∑øms_ˇche
 = 
¥ev
->params_cache;

1564 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1567 
rc
 = 
	`ngx_hâp_scgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms
, 
NULL
);

1568 i‡(
rc
 !
NGX_OK
) {

1569  
NGX_CONF_ERROR
;

1572 #i‡(
NGX_HTTP_CACHE
)

1574 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1575 
rc
 = 
	`ngx_hâp_scgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms_ˇche
,

1576 
ngx_hâp_scgi_ˇche_hódîs
);

1577 i‡(
rc
 !
NGX_OK
) {

1578  
NGX_CONF_ERROR
;

1589 i‡(
¥ev
->
∑øms
.
hash
.
buckës
 =
NULL


1590 && 
c⁄f
->
∑øms_sour˚
 =
¥ev
->params_source)

1592 
¥ev
->
∑øms
 = 
c⁄f
->params;

1593 #i‡(
NGX_HTTP_CACHE
)

1594 
¥ev
->
∑øms_ˇche
 = 
c⁄f
->params_cache;

1598  
NGX_CONF_OK
;

1599 
	}
}

1602 
ngx_öt_t


1603 
	$ngx_hâp_scgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,

1604 
ngx_hâp_scgi_∑øms_t
 *
∑øms
, 
ngx_keyvÆ_t
 *
deÁu…_∑øms
)

1606 
u_ch¨
 *
p
;

1607 
size_t
 
size
;

1608 
uöçå_t
 *
code
;

1609 
ngx_uöt_t
 
i
, 
n§c
;

1610 
ngx_¨øy_t
 
hódîs_«mes
, 
∑øms_mîged
;

1611 
ngx_keyvÆ_t
 *
h
;

1612 
ngx_hash_key_t
 *
hk
;

1613 
ngx_hash_öô_t
 
hash
;

1614 
ngx_hâp_up°ªam_∑øm_t
 *
§c
, *
s
;

1615 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1616 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1618 i‡(
∑øms
->
hash
.
buckës
) {

1619  
NGX_OK
;

1622 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
 && 
deÁu…_∑øms
 == NULL) {

1623 
∑øms
->
hash
.
buckës
 = (*) 1;

1624  
NGX_OK
;

1627 
∑øms
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1628 i‡(
∑øms
->
Àngths
 =
NULL
) {

1629  
NGX_ERROR
;

1632 
∑øms
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1633 i‡(
∑øms
->
vÆues
 =
NULL
) {

1634  
NGX_ERROR
;

1637 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1638 !
NGX_OK
)

1640  
NGX_ERROR
;

1643 i‡(
c⁄f
->
∑øms_sour˚
) {

1644 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1645 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1648 
§c
 = 
NULL
;

1649 
n§c
 = 0;

1652 i‡(
deÁu…_∑øms
) {

1653 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1654 (
ngx_hâp_up°ªam_∑øm_t
))

1655 !
NGX_OK
)

1657  
NGX_ERROR
;

1660 
i
 = 0; i < 
n§c
; i++) {

1662 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1663 i‡(
s
 =
NULL
) {

1664  
NGX_ERROR
;

1667 *
s
 = 
§c
[
i
];

1670 
h
 = 
deÁu…_∑øms
;

1672 
h
->
key
.
Àn
) {

1674 
§c
 = 
∑øms_mîged
.
ñts
;

1675 
n§c
 = 
∑øms_mîged
.
√…s
;

1677 
i
 = 0; i < 
n§c
; i++) {

1678 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1679 
√xt
;

1683 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1684 i‡(
s
 =
NULL
) {

1685  
NGX_ERROR
;

1688 
s
->
key
 = 
h
->key;

1689 
s
->
vÆue
 = 
h
->value;

1690 
s
->
skù_em±y
 = 1;

1692 
√xt
:

1694 
h
++;

1697 
§c
 = 
∑øms_mîged
.
ñts
;

1698 
n§c
 = 
∑øms_mîged
.
√…s
;

1701 
i
 = 0; i < 
n§c
; i++) {

1703 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1704 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1706 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1707 i‡(
hk
 =
NULL
) {

1708  
NGX_ERROR
;

1711 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1712 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1713 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1714 
hk
->
vÆue
 = (*) 1;

1716 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1721 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1722 (
ngx_hâp_s¸ùt_c›y_code_t
));

1723 i‡(
c›y
 =
NULL
) {

1724  
NGX_ERROR
;

1727 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

1728 
ngx_hâp_s¸ùt_c›y_Àn_code
;

1729 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1731 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1732 (
ngx_hâp_s¸ùt_c›y_code_t
));

1733 i‡(
c›y
 =
NULL
) {

1734  
NGX_ERROR
;

1737 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

1738 
ngx_hâp_s¸ùt_c›y_Àn_code
;

1739 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1742 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1743 + 
§c
[
i
].
key
.
Àn
 + 1 + (
uöçå_t
) - 1)

1744 & ~((
uöçå_t
) - 1);

1746 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, 
size
);

1747 i‡(
c›y
 =
NULL
) {

1748  
NGX_ERROR
;

1751 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1752 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1754 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1755 (Ë
	`ngx_˝y°∫
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
 + 1);

1758 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1760 
sc
.
cf
 = cf;

1761 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1762 
sc
.
Êushes
 = &
∑øms
->flushes;

1763 
sc
.
Àngths
 = &
∑øms
->lengths;

1764 
sc
.
vÆues
 = &
∑øms
->values;

1766 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1767  
NGX_ERROR
;

1770 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

1771 i‡(
code
 =
NULL
) {

1772  
NGX_ERROR
;

1775 *
code
 = (
uöçå_t
Ë
NULL
;

1778 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, (
uöçå_t
));

1779 i‡(
code
 =
NULL
) {

1780  
NGX_ERROR
;

1783 *
code
 = (
uöçå_t
Ë
NULL
;

1786 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

1787 i‡(
code
 =
NULL
) {

1788  
NGX_ERROR
;

1791 *
code
 = (
uöçå_t
Ë
NULL
;

1793 
∑øms
->
numbî
 = 
hódîs_«mes
.
√…s
;

1795 
hash
.hash = &
∑øms
->hash;

1796 
hash
.
key
 = 
ngx_hash_key_lc
;

1797 
hash
.
max_size
 = 512;

1798 
hash
.
buckë_size
 = 64;

1799 
hash
.
«me
 = "scgi_params_hash";

1800 
hash
.
poﬁ
 = 
cf
->pool;

1801 
hash
.
ãmp_poﬁ
 = 
NULL
;

1803  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1804 
	}
}

1808 
	$ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1810 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1812 
ngx_uæ_t
 
u
;

1813 
ngx_°r_t
 *
vÆue
, *
uæ
;

1814 
ngx_uöt_t
 
n
;

1815 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1816 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1818 i‡(
scf
->
up°ªam
.up°ªam || scf->
scgi_Àngths
) {

1822 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1823 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1825 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1827 
uæ
 = &
vÆue
[1];

1829 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1831 i‡(
n
) {

1833 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1835 
sc
.
cf
 = cf;

1836 
sc
.
sour˚
 = 
uæ
;

1837 
sc
.
Àngths
 = &
scf
->
scgi_Àngths
;

1838 
sc
.
vÆues
 = &
scf
->
scgi_vÆues
;

1839 
sc
.
v¨übÀs
 = 
n
;

1840 
sc
.
com∂ëe_Àngths
 = 1;

1841 
sc
.
com∂ëe_vÆues
 = 1;

1843 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1844  
NGX_CONF_ERROR
;

1847  
NGX_CONF_OK
;

1850 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1852 
u
.
uæ
 = 
vÆue
[1];

1853 
u
.
no_ªsﬁve
 = 1;

1855 
scf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1856 i‡(
scf
->
up°ªam
.up°ªam =
NULL
) {

1857  
NGX_CONF_ERROR
;

1860 i‡(
˛cf
->
«me
.
Àn
 && clcf->«me.
d©a
[clcf->name.len - 1] == '/') {

1861 
˛cf
->
auto_ªdúe˘
 = 1;

1864  
NGX_CONF_OK
;

1865 
	}
}

1869 
	$ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1871 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1873 
ngx_°r_t
 *
vÆue
;

1874 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1876 i‡(
scf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

1880 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1882 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1883 
scf
->
up°ªam
.
°‹e
 = 0;

1884  
NGX_CONF_OK
;

1887 #i‡(
NGX_HTTP_CACHE
)

1888 i‡(
scf
->
up°ªam
.
ˇche
 > 0) {

1893 
scf
->
up°ªam
.
°‹e
 = 1;

1895 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1896  
NGX_CONF_OK
;

1900 
vÆue
[1].
Àn
++;

1902 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1904 
sc
.
cf
 = cf;

1905 
sc
.
sour˚
 = &
vÆue
[1];

1906 
sc
.
Àngths
 = &
scf
->
up°ªam
.
°‹e_Àngths
;

1907 
sc
.
vÆues
 = &
scf
->
up°ªam
.
°‹e_vÆues
;

1908 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1909 
sc
.
com∂ëe_Àngths
 = 1;

1910 
sc
.
com∂ëe_vÆues
 = 1;

1912 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1913  
NGX_CONF_ERROR
;

1916  
NGX_CONF_OK
;

1917 
	}
}

1920 #i‡(
NGX_HTTP_CACHE
)

1923 
	$ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1925 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1927 
ngx_°r_t
 *
vÆue
;

1928 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1929 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1931 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1933 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

1937 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1938 
scf
->
up°ªam
.
ˇche
 = 0;

1939  
NGX_CONF_OK
;

1942 i‡(
scf
->
up°ªam
.
°‹e
 > 0) {

1946 
scf
->
up°ªam
.
ˇche
 = 1;

1948 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1950 
ccv
.
cf
 = cf;

1951 
ccv
.
vÆue
 = &value[1];

1952 
ccv
.
com∂ex_vÆue
 = &
cv
;

1954 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1955  
NGX_CONF_ERROR
;

1958 i‡(
cv
.
Àngths
 !
NULL
) {

1960 
scf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1961 (
ngx_hâp_com∂ex_vÆue_t
));

1962 i‡(
scf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

1963  
NGX_CONF_ERROR
;

1966 *
scf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

1968  
NGX_CONF_OK
;

1971 
scf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1972 &
ngx_hâp_scgi_moduÀ
);

1973 i‡(
scf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

1974  
NGX_CONF_ERROR
;

1977  
NGX_CONF_OK
;

1978 
	}
}

1982 
	$ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1984 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1986 
ngx_°r_t
 *
vÆue
;

1987 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1989 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1991 i‡(
scf
->
ˇche_key
.
vÆue
.
d©a
) {

1995 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1997 
ccv
.
cf
 = cf;

1998 
ccv
.
vÆue
 = &value[1];

1999 
ccv
.
com∂ex_vÆue
 = &
scf
->
ˇche_key
;

2001 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2002  
NGX_CONF_ERROR
;

2005  
NGX_CONF_OK
;

2006 
	}
}

	@src/http/modules/ngx_http_secure_link_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

15 
ngx_hâp_com∂ex_vÆue_t
 *
	mv¨übÀ
;

16 
ngx_hâp_com∂ex_vÆue_t
 *
	mmd5
;

17 
ngx_°r_t
 
	m£¸ë
;

18 } 
	tngx_hâp_£cuª_lök_c⁄f_t
;

22 
ngx_°r_t
 
	mexpúes
;

23 } 
	tngx_hâp_£cuª_lök_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

28 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 *
ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 
ngx_öt_t
 
ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_comm™d_t
 
	gngx_hâp_£cuª_lök_comm™ds
[] = {

39 { 
ngx_°rög
("secure_link"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

41 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

42 
NGX_HTTP_LOC_CONF_OFFSET
,

43 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
v¨übÀ
),

44 
NULL
 },

46 { 
ngx_°rög
("secure_link_md5"),

47 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

49 
NGX_HTTP_LOC_CONF_OFFSET
,

50 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
md5
),

51 
NULL
 },

53 { 
ngx_°rög
("secure_link_secret"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_°r_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
£¸ë
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ_˘x
 = {

65 
ngx_hâp_£cuª_lök_add_v¨übÀs
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_£cuª_lök_¸óã_c⁄f
,

75 
ngx_hâp_£cuª_lök_mîge_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_£cuª_lök_moduÀ_˘x
,

82 
ngx_hâp_£cuª_lök_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_«me
 = 
ngx_°rög
("secure_link");

96 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_expúes_«me
 =

97 
ngx_°rög
("secure_link_expires");

100 
ngx_öt_t


101 
	$ngx_hâp_£cuª_lök_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_°r_t
 
vÆ
, 
hash
;

106 
time_t
 
expúes
;

107 
ngx_md5_t
 
md5
;

108 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

109 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

110 
u_ch¨
 
hash_buf
[18], 
md5_buf
[16];

112 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

114 i‡(
c⁄f
->
£¸ë
.
d©a
) {

115  
	`ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
r
, 
c⁄f
, 
v
, 
d©a
);

118 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 || c⁄f->
md5
 == NULL) {

119 
nŸ_found
;

122 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
v¨übÀ
, &
vÆ
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 "£cuªÜök: \"%V\"", &
vÆ
);

129 
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

131 
p
 = 
	`ngx_°æchr
(
vÆ
.
d©a
, 
œ°
, ',');

132 
expúes
 = 0;

134 i‡(
p
) {

135 
vÆ
.
Àn
 = 
p
++ - vÆ.
d©a
;

137 
expúes
 = 
	`ngx_©Ÿm
(
p
, 
œ°
 -Ö);

138 i‡(
expúes
 <= 0) {

139 
nŸ_found
;

142 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_£cuª_lök_˘x_t
));

143 i‡(
˘x
 =
NULL
) {

144  
NGX_ERROR
;

147 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_£cuª_lök_moduÀ
);

149 
˘x
->
expúes
.
Àn
 = 
œ°
 - 
p
;

150 
˘x
->
expúes
.
d©a
 = 
p
;

153 i‡(
vÆ
.
Àn
 > 24) {

154 
nŸ_found
;

157 
hash
.
d©a
 = 
hash_buf
;

159 i‡(
	`ngx_decode_ba£64uæ
(&
hash
, &
vÆ
Ë!
NGX_OK
) {

160 
nŸ_found
;

163 i‡(
hash
.
Àn
 != 16) {

164 
nŸ_found
;

167 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
md5
, &
vÆ
Ë!
NGX_OK
) {

168  
NGX_ERROR
;

171 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

172 "£cuªÜök md5: \"%V\"", &
vÆ
);

174 
	`ngx_md5_öô
(&
md5
);

175 
	`ngx_md5_upd©e
(&
md5
, 
vÆ
.
d©a
, vÆ.
Àn
);

176 
	`ngx_md5_föÆ
(
md5_buf
, &
md5
);

178 i‡(
	`ngx_memcmp
(
hash_buf
, 
md5_buf
, 16) != 0) {

179 
nŸ_found
;

182 
v
->
d©a
 = (
u_ch¨
 *Ë((
expúes
 &&Éxpúe†< 
	`ngx_time
()) ? "0" : "1");

183 
v
->
Àn
 = 1;

184 
v
->
vÆid
 = 1;

185 
v
->
no_ˇchóbÀ
 = 0;

186 
v
->
nŸ_found
 = 0;

188  
NGX_OK
;

190 
nŸ_found
:

192 
v
->
nŸ_found
 = 1;

194  
NGX_OK
;

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

200 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

201 
uöçå_t
 
d©a
)

203 
u_ch¨
 *
p
, *
°¨t
, *
íd
, *
œ°
;

204 
size_t
 
Àn
;

205 
ngx_öt_t
 
n
;

206 
ngx_uöt_t
 
i
;

207 
ngx_md5_t
 
md5
;

208 
u_ch¨
 
hash
[16];

210 
p
 = &
r
->
u≈¨£d_uri
.
d©a
[1];

211 
œ°
 = 
r
->
u≈¨£d_uri
.
d©a
 +Ñ->u≈¨£d_uri.
Àn
;

213 
p
 < 
œ°
) {

214 i‡(*
p
++ == '/') {

215 
°¨t
 = 
p
;

216 
md5_°¨t
;

220 
nŸ_found
;

222 
md5_°¨t
:

224 
p
 < 
œ°
) {

225 i‡(*
p
++ == '/') {

226 
íd
 = 
p
 - 1;

227 
uæ_°¨t
;

231 
nŸ_found
;

233 
uæ_°¨t
:

235 
Àn
 = 
œ°
 - 
p
;

237 i‡(
íd
 - 
°¨t
 !32 || 
Àn
 == 0) {

238 
nŸ_found
;

241 
	`ngx_md5_öô
(&
md5
);

242 
	`ngx_md5_upd©e
(&
md5
, 
p
, 
Àn
);

243 
	`ngx_md5_upd©e
(&
md5
, 
c⁄f
->
£¸ë
.
d©a
, c⁄f->£¸ë.
Àn
);

244 
	`ngx_md5_föÆ
(
hash
, &
md5
);

246 
i
 = 0; i < 16; i++) {

247 
n
 = 
	`ngx_hextoi
(&
°¨t
[2 * 
i
], 2);

248 i‡(
n
 =
NGX_ERROR
 ||Ç !
hash
[
i
]) {

249 
nŸ_found
;

253 
v
->
Àn
 =Üen;

254 
v
->
vÆid
 = 1;

255 
v
->
no_ˇchóbÀ
 = 0;

256 
v
->
nŸ_found
 = 0;

257 
v
->
d©a
 = 
p
;

259  
NGX_OK
;

261 
nŸ_found
:

263 
v
->
nŸ_found
 = 1;

265  
NGX_OK
;

266 
	}
}

269 
ngx_öt_t


270 
	$ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

271 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

273 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

275 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

277 i‡(
˘x
) {

278 
v
->
Àn
 = 
˘x
->
expúes
.len;

279 
v
->
vÆid
 = 1;

280 
v
->
no_ˇchóbÀ
 = 0;

281 
v
->
nŸ_found
 = 0;

282 
v
->
d©a
 = 
˘x
->
expúes
.data;

285 
v
->
nŸ_found
 = 1;

288  
NGX_OK
;

289 
	}
}

293 
	$ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

295 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

297 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_£cuª_lök_c⁄f_t
));

298 i‡(
c⁄f
 =
NULL
) {

299  
NULL
;

310  
c⁄f
;

311 
	}
}

315 
	$ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

317 
ngx_hâp_£cuª_lök_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

318 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
 = 
chûd
;

320 i‡(
c⁄f
->
£¸ë
.
d©a
) {

321 i‡(
c⁄f
->
v¨übÀ
 || c⁄f->
md5
) {

322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

325  
NGX_CONF_ERROR
;

328  
NGX_CONF_OK
;

331 i‡(
c⁄f
->
v¨übÀ
 =
NULL
) {

332 
c⁄f
->
v¨übÀ
 = 
¥ev
->variable;

335 i‡(
c⁄f
->
md5
 =
NULL
) {

336 
c⁄f
->
md5
 = 
¥ev
->md5;

339 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 && c⁄f->
md5
 == NULL) {

340 
c⁄f
->
£¸ë
 = 
¥ev
->secret;

343  
NGX_CONF_OK
;

344 
	}
}

347 
ngx_öt_t


348 
	$ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

350 
ngx_hâp_v¨übÀ_t
 *
v¨
;

352 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_«me
, 0);

353 i‡(
v¨
 =
NULL
) {

354  
NGX_ERROR
;

357 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_v¨übÀ
;

359 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_expúes_«me
, 0);

360 i‡(
v¨
 =
NULL
) {

361  
NGX_ERROR
;

364 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
;

366  
NGX_OK
;

367 
	}
}

	@src/http/modules/ngx_http_slice_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msize
;

15 } 
	tngx_hâp_¶i˚_loc_c⁄f_t
;

19 
off_t
 
	m°¨t
;

20 
off_t
 
	míd
;

21 
ngx_°r_t
 
	mønge
;

22 
ngx_°r_t
 
	mëag
;

23 
	mœ°
:1;

24 
	ma˘ive
:1;

25 
ngx_hâp_ªque°_t
 *
	m§
;

26 } 
	tngx_hâp_¶i˚_˘x_t
;

30 
off_t
 
	m°¨t
;

31 
off_t
 
	míd
;

32 
off_t
 
	mcom∂ëe_Àngth
;

33 } 
	tngx_hâp_¶i˚_c⁄ã¡_ønge_t
;

36 
ngx_öt_t
 
ngx_hâp_¶i˚_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_¶i˚_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

38 
ngx_chaö_t
 *
ö
);

39 
ngx_öt_t
 
ngx_hâp_¶i˚_∑r£_c⁄ã¡_ønge
(
ngx_hâp_ªque°_t
 *
r
,

40 
ngx_hâp_¶i˚_c⁄ã¡_ønge_t
 *
¸
);

41 
ngx_öt_t
 
ngx_hâp_¶i˚_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

43 
off_t
 
ngx_hâp_¶i˚_gë_°¨t
(
ngx_hâp_ªque°_t
 *
r
);

44 *
ngx_hâp_¶i˚_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_¶i˚_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

46 *
chûd
);

47 
ngx_öt_t
 
ngx_hâp_¶i˚_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

48 
ngx_öt_t
 
ngx_hâp_¶i˚_öô
(
ngx_c⁄f_t
 *
cf
);

51 
ngx_comm™d_t
 
	gngx_hâp_¶i˚_fûãr_comm™ds
[] = {

53 { 
ngx_°rög
("slice"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_size_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_¶i˚_loc_c⁄f_t
, 
size
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¶i˚_fûãr_moduÀ_˘x
 = {

65 
ngx_hâp_¶i˚_add_v¨übÀs
,

66 
ngx_hâp_¶i˚_öô
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_¶i˚_¸óã_loc_c⁄f
,

75 
ngx_hâp_¶i˚_mîge_loc_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_¶i˚_fûãr_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_¶i˚_fûãr_moduÀ_˘x
,

82 
ngx_hâp_¶i˚_fûãr_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_¶i˚_ønge_«me
 = 
ngx_°rög
("slice_range");

97 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

98 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

101 
ngx_öt_t


102 
	$ngx_hâp_¶i˚_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

104 
off_t
 
íd
;

105 
ngx_öt_t
 
rc
;

106 
ngx_èbÀ_ñt_t
 *
h
;

107 
ngx_hâp_¶i˚_˘x_t
 *
˘x
;

108 
ngx_hâp_¶i˚_loc_c⁄f_t
 *
¶cf
;

109 
ngx_hâp_¶i˚_c⁄ã¡_ønge_t
 
¸
;

111 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

112 i‡(
˘x
 =
NULL
) {

113  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

116 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT
) {

117 i‡(
r
 =r->
maö
) {

118 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

119  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

122 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

124 
r
->
hódîs_out
.
°©us
);

125  
NGX_ERROR
;

128 
h
 = 
r
->
hódîs_out
.
ëag
;

130 i‡(
˘x
->
ëag
.
Àn
) {

131 i‡(
h
 =
NULL


132 || 
h
->
vÆue
.
Àn
 !
˘x
->
ëag
.len

133 || 
	`ngx_°∫cmp
(
h
->
vÆue
.
d©a
, 
˘x
->
ëag
.d©a, ctx->ëag.
Àn
)

136 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

138  
NGX_ERROR
;

142 i‡(
h
) {

143 
˘x
->
ëag
 = 
h
->
vÆue
;

146 i‡(
	`ngx_hâp_¶i˚_∑r£_c⁄ã¡_ønge
(
r
, &
¸
Ë!
NGX_OK
) {

147 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

149  
NGX_ERROR
;

152 i‡(
¸
.
com∂ëe_Àngth
 == -1) {

153 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

155  
NGX_ERROR
;

158 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

160 
¸
.
°¨t
, cr.
íd
, cr.
com∂ëe_Àngth
);

162 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

164 
íd
 = 
	`ngx_mö
(
¸
.
°¨t
 + (
off_t
Ë
¶cf
->
size
, cr.
com∂ëe_Àngth
);

166 i‡(
¸
.
°¨t
 !
˘x
->°¨à|| cr.
íd
 !=Énd) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

169 
¸
.
°¨t
, cr.
íd
);

170  
NGX_ERROR
;

173 
˘x
->
°¨t
 = 
íd
;

174 
˘x
->
a˘ive
 = 1;

176 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

177 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

178 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
¸
.
com∂ëe_Àngth
;

179 
r
->
hódîs_out
.
c⁄ã¡_off£t
 = 
¸
.
°¨t
;

180 
r
->
hódîs_out
.
c⁄ã¡_ønge
->
hash
 = 0;

181 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = 
NULL
;

183 
r
->
Ælow_ønges
 = 1;

184 
r
->
subªque°_ønges
 = 1;

185 
r
->
sögÀ_ønge
 = 1;

187 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

189 i‡(
r
 !r->
maö
) {

190  
rc
;

193 
r
->
¥e£rve_body
 = 1;

195 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_PARTIAL_CONTENT
) {

196 i‡(
˘x
->
°¨t
 + (
off_t
Ë
¶cf
->
size
 <
r
->
hódîs_out
.
c⁄ã¡_off£t
) {

197 
˘x
->
°¨t
 = 
¶cf
->
size


198 * (
r
->
hódîs_out
.
c⁄ã¡_off£t
 / 
¶cf
->
size
);

201 
˘x
->
íd
 = 
r
->
hódîs_out
.
c⁄ã¡_off£t


202 + 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

205 
˘x
->
íd
 = 
¸
.
com∂ëe_Àngth
;

208  
rc
;

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_hâp_¶i˚_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

215 
ngx_öt_t
 
rc
;

216 
ngx_chaö_t
 *
˛
;

217 
ngx_hâp_¶i˚_˘x_t
 *
˘x
;

218 
ngx_hâp_¶i˚_loc_c⁄f_t
 *
¶cf
;

220 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

222 i‡(
˘x
 =
NULL
 || 
r
 !r->
maö
) {

223  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

226 
˛
 = 
ö
; cl; c»˛->
√xt
) {

227 i‡(
˛
->
buf
->
œ°_buf
) {

228 
˛
->
buf
->
œ°_buf
 = 0;

229 
˛
->
buf
->
œ°_ö_chaö
 = 1;

230 
˛
->
buf
->
sync
 = 1;

231 
˘x
->
œ°
 = 1;

235 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

237 i‡(
rc
 =
NGX_ERROR
 || !
˘x
->
œ°
) {

238  
rc
;

241 i‡(
˘x
->
§
 && !˘x->§->
d⁄e
) {

242  
rc
;

245 i‡(!
˘x
->
a˘ive
) {

246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

248  
NGX_ERROR
;

251 i‡(
˘x
->
°¨t
 >˘x->
íd
) {

252 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

253 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

254  
rc
;

257 i‡(
r
->
buf„ªd
) {

258  
rc
;

261 i‡(
	`ngx_hâp_subªque°
(
r
, &r->
uri
, &r->
¨gs
, &
˘x
->
§
, 
NULL
,

262 
NGX_HTTP_SUBREQUEST_CLONE
)

263 !
NGX_OK
)

265  
NGX_ERROR
;

268 
	`ngx_hâp_£t_˘x
(
˘x
->
§
, ctx, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

270 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

272 
˘x
->
ønge
.
Àn
 = 
	`ngx_•rötf
(˘x->ønge.
d©a
, "byãs=%O-%O", ctx->
°¨t
,

273 
˘x
->
°¨t
 + (
off_t
Ë
¶cf
->
size
 - 1)

274 - 
˘x
->
ønge
.
d©a
;

276 
˘x
->
a˘ive
 = 0;

278 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

279 "hâ∞¶i˚ subªque°: \"%V\"", &
˘x
->
ønge
);

281  
rc
;

282 
	}
}

285 
ngx_öt_t


286 
	$ngx_hâp_¶i˚_∑r£_c⁄ã¡_ønge
(
ngx_hâp_ªque°_t
 *
r
,

287 
ngx_hâp_¶i˚_c⁄ã¡_ønge_t
 *
¸
)

289 
off_t
 
°¨t
, 
íd
, 
com∂ëe_Àngth
, 
cutoff
, 
cuéim
;

290 
u_ch¨
 *
p
;

291 
ngx_èbÀ_ñt_t
 *
h
;

293 
h
 = 
r
->
hódîs_out
.
c⁄ã¡_ønge
;

295 i‡(
h
 =
NULL


296 || 
h
->
vÆue
.
Àn
 < 7

297 || 
	`ngx_°∫cmp
(
h
->
vÆue
.
d©a
, "bytes ", 6) != 0)

299  
NGX_ERROR
;

302 
p
 = 
h
->
vÆue
.
d©a
 + 6;

304 
cutoff
 = 
NGX_MAX_OFF_T_VALUE
 / 10;

305 
cuéim
 = 
NGX_MAX_OFF_T_VALUE
 % 10;

307 
°¨t
 = 0;

308 
íd
 = 0;

309 
com∂ëe_Àngth
 = 0;

311 *
p
 == ' ') {Ö++; }

313 i‡(*
p
 < '0' || *p > '9') {

314  
NGX_ERROR
;

317 *
p
 >= '0' && *p <= '9') {

318 i‡(
°¨t
 >
cutoff
 && (°¨à> cutof‡|| *
p
 - '0' > 
cuéim
)) {

319  
NGX_ERROR
;

322 
°¨t
 = sèπ * 10 + (*
p
++ - '0');

325 *
p
 == ' ') {Ö++; }

327 i‡(*
p
++ != '-') {

328  
NGX_ERROR
;

331 *
p
 == ' ') {Ö++; }

333 i‡(*
p
 < '0' || *p > '9') {

334  
NGX_ERROR
;

337 *
p
 >= '0' && *p <= '9') {

338 i‡(
íd
 >
cutoff
 && (íd > cutof‡|| *
p
 - '0' > 
cuéim
)) {

339  
NGX_ERROR
;

342 
íd
 =Énd * 10 + (*
p
++ - '0');

345 
íd
++;

347 *
p
 == ' ') {Ö++; }

349 i‡(*
p
++ != '/') {

350  
NGX_ERROR
;

353 *
p
 == ' ') {Ö++; }

355 i‡(*
p
 != '*') {

356 i‡(*
p
 < '0' || *p > '9') {

357  
NGX_ERROR
;

360 *
p
 >= '0' && *p <= '9') {

361 i‡(
com∂ëe_Àngth
 >
cutoff


362 && (
com∂ëe_Àngth
 > 
cutoff
 || *
p
 - '0' > 
cuéim
))

364  
NGX_ERROR
;

367 
com∂ëe_Àngth
 = com∂ëe_Àngth * 10 + (*
p
++ - '0');

371 
com∂ëe_Àngth
 = -1;

372 
p
++;

375 *
p
 == ' ') {Ö++; }

377 i‡(*
p
 != '\0') {

378  
NGX_ERROR
;

381 
¸
->
°¨t
 = start;

382 
¸
->
íd
 =Énd;

383 
¸
->
com∂ëe_Àngth
 = complete_length;

385  
NGX_OK
;

386 
	}
}

389 
ngx_öt_t


390 
	$ngx_hâp_¶i˚_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

391 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

393 
u_ch¨
 *
p
;

394 
ngx_hâp_¶i˚_˘x_t
 *
˘x
;

395 
ngx_hâp_¶i˚_loc_c⁄f_t
 *
¶cf
;

397 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

399 i‡(
˘x
 =
NULL
) {

400 i‡(
r
 !r->
maö
 ||Ñ->
hódîs_out
.
°©us
) {

401 
v
->
nŸ_found
 = 1;

402  
NGX_OK
;

405 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

407 i‡(
¶cf
->
size
 == 0) {

408 
v
->
nŸ_found
 = 1;

409  
NGX_OK
;

412 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¶i˚_˘x_t
));

413 i‡(
˘x
 =
NULL
) {

414  
NGX_ERROR
;

417 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¶i˚_fûãr_moduÀ
);

419 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("byãs=-"Ë- 1 + 2 * 
NGX_OFF_T_LEN
);

420 i‡(
p
 =
NULL
) {

421  
NGX_ERROR
;

424 
˘x
->
°¨t
 = 
¶cf
->
size
 * (
	`ngx_hâp_¶i˚_gë_°¨t
(
r
) / slcf->size);

426 
˘x
->
ønge
.
d©a
 = 
p
;

427 
˘x
->
ønge
.
Àn
 = 
	`ngx_•rötf
(
p
, "byãs=%O-%O", ctx->
°¨t
,

428 
˘x
->
°¨t
 + (
off_t
Ë
¶cf
->
size
 - 1)

429 - 
p
;

432 
v
->
d©a
 = 
˘x
->
ønge
.data;

433 
v
->
vÆid
 = 1;

434 
v
->
nŸ_found
 = 0;

435 
v
->
no_ˇchóbÀ
 = 1;

436 
v
->
Àn
 = 
˘x
->
ønge
.len;

438  
NGX_OK
;

439 
	}
}

442 
off_t


443 
	$ngx_hâp_¶i˚_gë_°¨t
(
ngx_hâp_ªque°_t
 *
r
)

445 
off_t
 
°¨t
, 
cutoff
, 
cuéim
;

446 
u_ch¨
 *
p
;

447 
ngx_èbÀ_ñt_t
 *
h
;

449 i‡(
r
->
hódîs_ö
.
if_ønge
) {

453 
h
 = 
r
->
hódîs_ö
.
ønge
;

455 i‡(
h
 =
NULL


456 || 
h
->
vÆue
.
Àn
 < 7

457 || 
	`ngx_°∫ˇ£cmp
(
h
->
vÆue
.
d©a
, (
u_ch¨
 *) "bytes=", 6) != 0)

462 
p
 = 
h
->
vÆue
.
d©a
 + 6;

464 i‡(
	`ngx_°rchr
(
p
, ',')) {

468 *
p
 == ' ') {Ö++; }

470 i‡(*
p
 == '-') {

474 
cutoff
 = 
NGX_MAX_OFF_T_VALUE
 / 10;

475 
cuéim
 = 
NGX_MAX_OFF_T_VALUE
 % 10;

477 
°¨t
 = 0;

479 *
p
 >= '0' && *p <= '9') {

480 i‡(
°¨t
 >
cutoff
 && (°¨à> cutof‡|| *
p
 - '0' > 
cuéim
)) {

484 
°¨t
 = sèπ * 10 + (*
p
++ - '0');

487  
°¨t
;

488 
	}
}

492 
	$ngx_hâp_¶i˚_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

494 
ngx_hâp_¶i˚_loc_c⁄f_t
 *
¶cf
;

496 
¶cf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_¶i˚_loc_c⁄f_t
));

497 i‡(
¶cf
 =
NULL
) {

498  
NULL
;

501 
¶cf
->
size
 = 
NGX_CONF_UNSET_SIZE
;

503  
¶cf
;

504 
	}
}

508 
	$ngx_hâp_¶i˚_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

510 
ngx_hâp_¶i˚_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

511 
ngx_hâp_¶i˚_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

513 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
size
, 
¥ev
->size, 0);

515  
NGX_CONF_OK
;

516 
	}
}

519 
ngx_öt_t


520 
	$ngx_hâp_¶i˚_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

522 
ngx_hâp_v¨übÀ_t
 *
v¨
;

524 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_¶i˚_ønge_«me
, 0);

525 i‡(
v¨
 =
NULL
) {

526  
NGX_ERROR
;

529 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_¶i˚_ønge_v¨übÀ
;

531  
NGX_OK
;

532 
	}
}

535 
ngx_öt_t


536 
	$ngx_hâp_¶i˚_öô
(
ngx_c⁄f_t
 *
cf
)

538 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

539 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_¶i˚_hódî_fûãr
;

541 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

542 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_¶i˚_body_fûãr
;

544  
NGX_OK
;

545 
	}
}

	@src/http/modules/ngx_http_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_hâp_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_•lô_˛õ¡s_∑π_t
;

20 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_hâp_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_hâp_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_HTTP_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL


58 
ngx_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_hâp_•lô_˛õ¡s_moduÀ_˘x
,

61 
ngx_hâp_•lô_˛õ¡s_comm™ds
,

62 
NGX_HTTP_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_hâp_•lô_˛õ¡s_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

78 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
 = (ngx_hâp_•lô_˛õ¡s_˘x_à*Ë
d©a
;

80 
uöt32_t
 
hash
;

81 
ngx_°r_t
 
vÆ
;

82 
ngx_uöt_t
 
i
;

83 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

85 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

87 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

88  
NGX_OK
;

91 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

93 
∑π
 = 
˘x
->
∑πs
.
ñts
;

95 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞•lô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

100 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
 ||Öart[i].percent == 0) {

101 *
v
 = 
∑π
[
i
].
vÆue
;

102  
NGX_OK
;

106  
NGX_OK
;

107 
	}
}

111 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

113 *
rv
;

114 
uöt32_t
 
sum
, 
œ°
;

115 
ngx_°r_t
 *
vÆue
, 
«me
;

116 
ngx_uöt_t
 
i
;

117 
ngx_c⁄f_t
 
ßve
;

118 
ngx_hâp_v¨übÀ_t
 *
v¨
;

119 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

120 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

121 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

123 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•lô_˛õ¡s_˘x_t
));

124 i‡(
˘x
 =
NULL
) {

125  
NGX_CONF_ERROR
;

128 
vÆue
 = 
cf
->
¨gs
->
ñts
;

130 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

132 
ccv
.
cf
 = cf;

133 
ccv
.
vÆue
 = &value[1];

134 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

136 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

137  
NGX_CONF_ERROR
;

140 
«me
 = 
vÆue
[2];

142 i‡(
«me
.
d©a
[0] != '$') {

143 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

144 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

145  
NGX_CONF_ERROR
;

148 
«me
.
Àn
--;

149 
«me
.
d©a
++;

151 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

152 i‡(
v¨
 =
NULL
) {

153  
NGX_CONF_ERROR
;

156 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s_v¨übÀ
;

157 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

159 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

160 (
ngx_hâp_•lô_˛õ¡s_∑π_t
))

161 !
NGX_OK
)

163  
NGX_CONF_ERROR
;

166 
ßve
 = *
cf
;

167 
cf
->
˘x
 = ctx;

168 
cf
->
h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s
;

169 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

171 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

173 *
cf
 = 
ßve
;

175 i‡(
rv
 !
NGX_CONF_OK
) {

176  
rv
;

179 
sum
 = 0;

180 
œ°
 = 0;

181 
∑π
 = 
˘x
->
∑πs
.
ñts
;

183 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

184 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

185 i‡(
sum
 > 10000) {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

188  
NGX_CONF_ERROR
;

191 i‡(
∑π
[
i
].
≥r˚¡
) {

192 
œ°
 +
∑π
[
i
].
≥r˚¡
 * (
uöt64_t
) 0xffffffff / 10000;

193 
∑π
[
i
].
≥r˚¡
 = 
œ°
;

197  
rv
;

198 
	}
}

202 
	$ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

204 
ngx_öt_t
 
n
;

205 
ngx_°r_t
 *
vÆue
;

206 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

207 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

209 
˘x
 = 
cf
->ctx;

210 
vÆue
 = 
cf
->
¨gs
->
ñts
;

212 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

213 i‡(
∑π
 =
NULL
) {

214  
NGX_CONF_ERROR
;

217 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

218 
∑π
->
≥r˚¡
 = 0;

221 i‡(
vÆue
[0].
Àn
 =0 || vÆue[0].
d©a
[value[0].len - 1] != '%') {

222 
övÆid
;

225 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

226 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

227 
övÆid
;

230 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

233 
∑π
->
vÆue
.
Àn
 = value[1].len;

234 
∑π
->
vÆue
.
vÆid
 = 1;

235 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

236 
∑π
->
vÆue
.
nŸ_found
 = 0;

237 
∑π
->
vÆue
.
d©a
 = value[1].data;

239  
NGX_CONF_OK
;

241 
övÆid
:

243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

244 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

245  
NGX_CONF_ERROR
;

246 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_SSI_ERROR
 1

	)

14 
	#NGX_HTTP_SSI_DATE_LEN
 2048

	)

16 
	#NGX_HTTP_SSI_ADD_PREFIX
 1

	)

17 
	#NGX_HTTP_SSI_ADD_ZERO
 2

	)

21 
ngx_Êag_t
 
	míabÀ
;

22 
ngx_Êag_t
 
	msûít_îr‹s
;

23 
ngx_Êag_t
 
	mign‹e_ªcy˛ed_buf„rs
;

24 
ngx_Êag_t
 
	mœ°_modifõd
;

26 
ngx_hash_t
 
	mty≥s
;

28 
size_t
 
	mmö_fûe_chunk
;

29 
size_t
 
	mvÆue_Àn
;

31 
ngx_¨øy_t
 *
	mty≥s_keys
;

32 } 
	tngx_hâp_ssi_loc_c⁄f_t
;

36 
ngx_°r_t
 
	m«me
;

37 
ngx_uöt_t
 
	mkey
;

38 
ngx_°r_t
 
	mvÆue
;

39 } 
	tngx_hâp_ssi_v¨_t
;

43 
ngx_°r_t
 
	m«me
;

44 
ngx_chaö_t
 *
	mbufs
;

45 
ngx_uöt_t
 
	mcou¡
;

46 } 
	tngx_hâp_ssi_block_t
;

50 
	mssi_°¨t_°©e
 = 0,

51 
	mssi_èg_°©e
,

52 
	mssi_commít0_°©e
,

53 
	mssi_commít1_°©e
,

54 
	mssi_sh¨p_°©e
,

55 
	mssi_¥ecomm™d_°©e
,

56 
	mssi_comm™d_°©e
,

57 
	mssi_¥ï¨am_°©e
,

58 
	mssi_∑øm_°©e
,

59 
	mssi_¥ìquÆ_°©e
,

60 
	mssi_¥evÆue_°©e
,

61 
	mssi_doubÀ_quŸed_vÆue_°©e
,

62 
	mssi_quŸed_vÆue_°©e
,

63 
	mssi_quŸed_symbﬁ_°©e
,

64 
	mssi_po°∑øm_°©e
,

65 
	mssi_commít_íd0_°©e
,

66 
	mssi_commít_íd1_°©e
,

67 
	mssi_îr‹_°©e
,

68 
	mssi_îr‹_íd0_°©e
,

69 
	mssi_îr‹_íd1_°©e


70 } 
	tngx_hâp_ssi_°©e_e
;

73 
ngx_öt_t
 
ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ssi_˘x_t
 *
˘x
);

75 
ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_ssi_˘x_t
 *
˘x
);

77 
ngx_öt_t
 
ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_ssi_˘x_t
 *
˘x
);

79 
ngx_°r_t
 *
ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

81 
ngx_öt_t
 
ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
);

83 
ngx_öt_t
 
ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_°r_t
 *
∑âîn
,Çgx_°r_à*
°r
);

86 
ngx_öt_t
 
ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

88 
ngx_öt_t
 
ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

89 
ngx_öt_t
 
rc
);

90 
ngx_öt_t
 
ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

91 
ngx_öt_t
 
rc
);

92 
ngx_öt_t
 
ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

94 
ngx_öt_t
 
ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

96 
ngx_öt_t
 
ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

98 
ngx_öt_t
 
ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

100 
ngx_öt_t
 
ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

102 
ngx_öt_t
 
ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

104 
ngx_öt_t
 
ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

106 
ngx_öt_t
 
ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

109 
ngx_öt_t
 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

110 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
);

112 
ngx_öt_t
 
ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

113 *
ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

114 *
ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

115 *
ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 
ngx_öt_t
 
ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

121 
ngx_comm™d_t
 
	gngx_hâp_ssi_fûãr_comm™ds
[] = {

123 { 
ngx_°rög
("ssi"),

124 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


125 |
NGX_CONF_FLAG
,

126 
ngx_c⁄f_£t_Êag_¶Ÿ
,

127 
NGX_HTTP_LOC_CONF_OFFSET
,

128 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
íabÀ
),

129 
NULL
 },

131 { 
ngx_°rög
("ssi_silent_errors"),

132 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

133 
ngx_c⁄f_£t_Êag_¶Ÿ
,

134 
NGX_HTTP_LOC_CONF_OFFSET
,

135 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
sûít_îr‹s
),

136 
NULL
 },

138 { 
ngx_°rög
("ssi_ignore_recycled_buffers"),

139 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

140 
ngx_c⁄f_£t_Êag_¶Ÿ
,

141 
NGX_HTTP_LOC_CONF_OFFSET
,

142 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ign‹e_ªcy˛ed_buf„rs
),

143 
NULL
 },

145 { 
ngx_°rög
("ssi_min_file_chunk"),

146 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

147 
ngx_c⁄f_£t_size_¶Ÿ
,

148 
NGX_HTTP_LOC_CONF_OFFSET
,

149 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
mö_fûe_chunk
),

150 
NULL
 },

152 { 
ngx_°rög
("ssi_value_length"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
NGX_HTTP_LOC_CONF_OFFSET
,

156 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
vÆue_Àn
),

157 
NULL
 },

159 { 
ngx_°rög
("ssi_types"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

161 
ngx_hâp_ty≥s_¶Ÿ
,

162 
NGX_HTTP_LOC_CONF_OFFSET
,

163 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ty≥s_keys
),

164 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

166 { 
ngx_°rög
("ssi_last_modified"),

167 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

168 
ngx_c⁄f_£t_Êag_¶Ÿ
,

169 
NGX_HTTP_LOC_CONF_OFFSET
,

170 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
œ°_modifõd
),

171 
NULL
 },

173 
ngx_nuŒ_comm™d


178 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ_˘x
 = {

179 
ngx_hâp_ssi_¥ec⁄figuøti⁄
,

180 
ngx_hâp_ssi_fûãr_öô
,

182 
ngx_hâp_ssi_¸óã_maö_c⁄f
,

183 
ngx_hâp_ssi_öô_maö_c⁄f
,

185 
NULL
,

186 
NULL
,

188 
ngx_hâp_ssi_¸óã_loc_c⁄f
,

189 
ngx_hâp_ssi_mîge_loc_c⁄f


193 
ngx_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ
 = {

194 
NGX_MODULE_V1
,

195 &
ngx_hâp_ssi_fûãr_moduÀ_˘x
,

196 
ngx_hâp_ssi_fûãr_comm™ds
,

197 
NGX_HTTP_MODULE
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NGX_MODULE_V1_PADDING


209 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

210 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

213 
u_ch¨
 
	gngx_hâp_ssi_°rög
[] = "<!--";

215 
ngx_°r_t
 
	gngx_hâp_ssi_n⁄e
 = 
ngx_°rög
("(none)");

216 
ngx_°r_t
 
	gngx_hâp_ssi_timefmt
 = 
ngx_°rög
("%A, %d-%b-%Y %H:%M:%S %Z");

217 
ngx_°r_t
 
	gngx_hâp_ssi_nuŒ_°rög
 = 
ngx_nuŒ_°rög
;

220 
	#NGX_HTTP_SSI_INCLUDE_VIRTUAL
 0

	)

221 
	#NGX_HTTP_SSI_INCLUDE_FILE
 1

	)

222 
	#NGX_HTTP_SSI_INCLUDE_WAIT
 2

	)

223 
	#NGX_HTTP_SSI_INCLUDE_SET
 3

	)

224 
	#NGX_HTTP_SSI_INCLUDE_STUB
 4

	)

226 
	#NGX_HTTP_SSI_ECHO_VAR
 0

	)

227 
	#NGX_HTTP_SSI_ECHO_DEFAULT
 1

	)

228 
	#NGX_HTTP_SSI_ECHO_ENCODING
 2

	)

230 
	#NGX_HTTP_SSI_CONFIG_ERRMSG
 0

	)

231 
	#NGX_HTTP_SSI_CONFIG_TIMEFMT
 1

	)

233 
	#NGX_HTTP_SSI_SET_VAR
 0

	)

234 
	#NGX_HTTP_SSI_SET_VALUE
 1

	)

236 
	#NGX_HTTP_SSI_IF_EXPR
 0

	)

238 
	#NGX_HTTP_SSI_BLOCK_NAME
 0

	)

241 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_ö˛ude_∑øms
[] = {

242 { 
ngx_°rög
("vútuÆ"), 
NGX_HTTP_SSI_INCLUDE_VIRTUAL
, 0, 0 },

243 { 
ngx_°rög
("fûe"), 
NGX_HTTP_SSI_INCLUDE_FILE
, 0, 0 },

244 { 
ngx_°rög
("waô"), 
NGX_HTTP_SSI_INCLUDE_WAIT
, 0, 0 },

245 { 
ngx_°rög
("£t"), 
NGX_HTTP_SSI_INCLUDE_SET
, 0, 0 },

246 { 
ngx_°rög
("°ub"), 
NGX_HTTP_SSI_INCLUDE_STUB
, 0, 0 },

247 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

251 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_echo_∑øms
[] = {

252 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_ECHO_VAR
, 1, 0 },

253 { 
ngx_°rög
("deÁu…"), 
NGX_HTTP_SSI_ECHO_DEFAULT
, 0, 0 },

254 { 
ngx_°rög
("ícodög"), 
NGX_HTTP_SSI_ECHO_ENCODING
, 0, 0 },

255 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

259 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_c⁄fig_∑øms
[] = {

260 { 
ngx_°rög
("îrmsg"), 
NGX_HTTP_SSI_CONFIG_ERRMSG
, 0, 0 },

261 { 
ngx_°rög
("timefmt"), 
NGX_HTTP_SSI_CONFIG_TIMEFMT
, 0, 0 },

262 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

266 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_£t_∑øms
[] = {

267 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_SET_VAR
, 1, 0 },

268 { 
ngx_°rög
("vÆue"), 
NGX_HTTP_SSI_SET_VALUE
, 1, 0 },

269 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

273 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_if_∑øms
[] = {

274 { 
ngx_°rög
("ex¥"), 
NGX_HTTP_SSI_IF_EXPR
, 1, 0 },

275 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

279 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_block_∑øms
[] = {

280 { 
ngx_°rög
("«me"), 
NGX_HTTP_SSI_BLOCK_NAME
, 1, 0 },

281 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

285 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_no_∑øms
[] = {

286 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

290 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_ssi_comm™ds
[] = {

291 { 
ngx_°rög
("ö˛ude"), 
ngx_hâp_ssi_ö˛ude
,

292 
ngx_hâp_ssi_ö˛ude_∑øms
, 0, 0, 1 },

293 { 
ngx_°rög
("echo"), 
ngx_hâp_ssi_echo
,

294 
ngx_hâp_ssi_echo_∑øms
, 0, 0, 0 },

295 { 
ngx_°rög
("c⁄fig"), 
ngx_hâp_ssi_c⁄fig
,

296 
ngx_hâp_ssi_c⁄fig_∑øms
, 0, 0, 0 },

297 { 
ngx_°rög
("£t"), 
ngx_hâp_ssi_£t
, 
ngx_hâp_ssi_£t_∑øms
, 0, 0, 0 },

299 { 
ngx_°rög
("if"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
, 0, 0, 0 },

300 { 
ngx_°rög
("ñif"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
,

301 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

302 { 
ngx_°rög
("ñ£"), 
ngx_hâp_ssi_ñ£
, 
ngx_hâp_ssi_no_∑øms
,

303 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

304 { 
ngx_°rög
("ídif"), 
ngx_hâp_ssi_ídif
, 
ngx_hâp_ssi_no_∑øms
,

305 
NGX_HTTP_SSI_COND_ELSE
, 0, 0 },

307 { 
ngx_°rög
("block"), 
ngx_hâp_ssi_block
,

308 
ngx_hâp_ssi_block_∑øms
, 0, 0, 0 },

309 { 
ngx_°rög
("ídblock"), 
ngx_hâp_ssi_ídblock
,

310 
ngx_hâp_ssi_no_∑øms
, 0, 1, 0 },

312 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

316 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ssi_v¨s
[] = {

318 { 
ngx_°rög
("d©e_loˇl"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 0,

319 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

321 { 
ngx_°rög
("d©e_gmt"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 1,

322 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

324 
ngx_hâp_nuŒ_v¨übÀ


329 
ngx_öt_t


330 
	$ngx_hâp_ssi_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

332 
ngx_hâp_ssi_˘x_t
 *
˘x
;

333 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

335 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

337 i‡(!
¶cf
->
íabÀ


338 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

339 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

341  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

344 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ssi_˘x_t
));

345 i‡(
˘x
 =
NULL
) {

346  
NGX_ERROR
;

349 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ssi_fûãr_moduÀ
);

352 
˘x
->
vÆue_Àn
 = 
¶cf
->value_len;

353 
˘x
->
œ°_out
 = &˘x->
out
;

355 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

356 
˘x
->
ouçut
 = 1;

358 
˘x
->
∑øms
.
ñts
 = ctx->
∑øms_¨øy
;

359 
˘x
->
∑øms
.
size
 = (
ngx_èbÀ_ñt_t
);

360 
˘x
->
∑øms
.
«Œoc
 = 
NGX_HTTP_SSI_PARAMS_N
;

361 
˘x
->
∑øms
.
poﬁ
 = 
r
->pool;

363 
˘x
->
timefmt
 = 
ngx_hâp_ssi_timefmt
;

364 
	`ngx_°r_£t
(&
˘x
->
îrmsg
,

367 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

369 i‡(
r
 =r->
maö
) {

370 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

371 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

373 
r
->
¥e£rve_body
 = 1;

375 i‡(!
¶cf
->
œ°_modifõd
) {

376 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

377 
	`ngx_hâp_˛ór_ëag
(
r
);

380 
	`ngx_hâp_wók_ëag
(
r
);

384  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_hâp_ssi_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

391 
size_t
 
Àn
;

392 
ngx_öt_t
 
rc
;

393 
ngx_buf_t
 *
b
;

394 
ngx_uöt_t
 
i
, 
ödex
;

395 
ngx_chaö_t
 *
˛
, **
Œ
;

396 
ngx_èbÀ_ñt_t
 *
∑øm
;

397 
ngx_hâp_ssi_˘x_t
 *
˘x
, *
m˘x
;

398 
ngx_hâp_ssi_block_t
 *
bl
;

399 
ngx_hâp_ssi_∑øm_t
 *
¥m
;

400 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

401 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

402 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

403 
ngx_°r_t
 *
∑øms
[
NGX_HTTP_SSI_MAX_PARAMS
 + 1];

405 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

407 i‡(
˘x
 =
NULL


408 || (
ö
 =
NULL


409 && 
˘x
->
buf
 =
NULL


410 && 
˘x
->
ö
 =
NULL


411 && 
˘x
->
busy
 =
NULL
))

413  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

418 i‡(
ö
) {

419 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

420  
NGX_ERROR
;

424 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

425 "hâ∞ssòfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

427 i‡(
˘x
->
waô
) {

429 i‡(
r
 !r->
c⁄√˘i⁄
->
d©a
) {

430 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

432 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

434  
NGX_AGAIN
;

437 i‡(
˘x
->
waô
->
d⁄e
) {

438 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

440 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

442 
˘x
->
waô
 = 
NULL
;

445 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

447 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

449  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

453 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

455 
˘x
->
ö
 || ctx->
buf
) {

457 i‡(
˘x
->
buf
 =
NULL
) {

458 
˘x
->
buf
 = ctx->
ö
->buf;

459 
˘x
->
ö
 = ctx->ö->
√xt
;

460 
˘x
->
pos
 = ctx->
buf
->pos;

463 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

464 
˘x
->
c›y_°¨t
 = ctx->
pos
;

465 
˘x
->
c›y_íd
 = ctx->
pos
;

468 
b
 = 
NULL
;

470 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

472 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

473 "ßved: %uz sèã: %ui", 
˘x
->
ßved
, ctx->
°©e
);

475 
rc
 = 
	`ngx_hâp_ssi_∑r£
(
r
, 
˘x
);

477 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

479 
rc
, 
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

481 i‡(
rc
 =
NGX_ERROR
) {

482  
rc
;

485 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

487 i‡(
˘x
->
ouçut
) {

489 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

490 "ßved: %uz", 
˘x
->
ßved
);

492 i‡(
˘x
->
ßved
) {

494 i‡(
˘x
->
‰ì
) {

495 
˛
 = 
˘x
->
‰ì
;

496 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

497 
b
 = 
˛
->
buf
;

498 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

501 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

502 i‡(
b
 =
NULL
) {

503  
NGX_ERROR
;

506 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

507 i‡(
˛
 =
NULL
) {

508  
NGX_ERROR
;

511 
˛
->
buf
 = 
b
;

514 
b
->
mem‹y
 = 1;

515 
b
->
pos
 = 
ngx_hâp_ssi_°rög
;

516 
b
->
œ°
 = 
ngx_hâp_ssi_°rög
 + 
˘x
->
ßved
;

518 *
˘x
->
œ°_out
 = 
˛
;

519 
˘x
->
œ°_out
 = &
˛
->
√xt
;

521 
˘x
->
ßved
 = 0;

524 i‡(
˘x
->
‰ì
) {

525 
˛
 = 
˘x
->
‰ì
;

526 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

527 
b
 = 
˛
->
buf
;

530 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

531 i‡(
b
 =
NULL
) {

532  
NGX_ERROR
;

535 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

536 i‡(
˛
 =
NULL
) {

537  
NGX_ERROR
;

540 
˛
->
buf
 = 
b
;

543 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

545 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

546 
b
->
œ°
 = 
˘x
->
c›y_íd
;

547 
b
->
shadow
 = 
NULL
;

548 
b
->
œ°_buf
 = 0;

549 
b
->
ªcy˛ed
 = 0;

551 i‡(
b
->
ö_fûe
) {

552 i‡(
¶cf
->
mö_fûe_chunk
 < (
size_t
Ë(
b
->
œ°
 - b->
pos
))

554 
b
->
fûe_œ°
 = b->
fûe_pos


555 + (
b
->
œ°
 - 
˘x
->
buf
->
pos
);

556 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

559 
b
->
ö_fûe
 = 0;

563 
˛
->
√xt
 = 
NULL
;

564 *
˘x
->
œ°_out
 = 
˛
;

565 
˘x
->
œ°_out
 = &
˛
->
√xt
;

568 i‡(
˘x
->
block


569 && 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
))

571 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

572 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
));

574 i‡(
b
 =
NULL
) {

575  
NGX_ERROR
;

578 i‡(
˘x
->
ßved
) {

579 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
ngx_hâp_ssi_°rög
,

580 
˘x
->
ßved
);

583 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
c›y_°¨t
,

584 
˘x
->
c›y_íd
 - ctx->
c›y_°¨t
);

586 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

587 i‡(
˛
 =
NULL
) {

588  
NGX_ERROR
;

591 
˛
->
buf
 = 
b
;

592 
˛
->
√xt
 = 
NULL
;

594 
b
 = 
NULL
;

596 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

597 
ngx_hâp_ssi_fûãr_moduÀ
);

598 
bl
 = 
m˘x
->
blocks
->
ñts
;

599 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

600 *
Œ
;

601 
Œ
 = &(*Œ)->
√xt
)

606 *
Œ
 = 
˛
;

609 
˘x
->
ßved
 = 0;

613 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

614 
˘x
->
c›y_°¨t
 = ctx->
pos
;

615 
˘x
->
c›y_íd
 = ctx->
pos
;

618 
˘x
->
c›y_°¨t
 = 
NULL
;

619 
˘x
->
c›y_íd
 = 
NULL
;

622 i‡(
rc
 =
NGX_AGAIN
) {

627 
b
 = 
NULL
;

629 i‡(
rc
 =
NGX_OK
) {

631 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
,

632 
ngx_hâp_ssi_fûãr_moduÀ
);

634 
cmd
 = 
	`ngx_hash_föd
(&
smcf
->
hash
, 
˘x
->
key
, ctx->
comm™d
.
d©a
,

635 
˘x
->
comm™d
.
Àn
);

637 i‡(
cmd
 =
NULL
) {

638 i‡(
˘x
->
ouçut
) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

641 &
˘x
->
comm™d
);

642 
ssi_îr‹
;

648 i‡(!
˘x
->
ouçut
 && !
cmd
->
block
) {

650 i‡(
˘x
->
block
) {

654 
Àn
 = 5 + 
˘x
->
comm™d
.len + 4;

656 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

657 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

658 
Àn
 +1 + 
∑øm
[
i
].
key
.len + 2

659 + 
∑øm
[
i
].
vÆue
.
Àn
 + 1;

662 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

664 i‡(
b
 =
NULL
) {

665  
NGX_ERROR
;

668 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

669 i‡(
˛
 =
NULL
) {

670  
NGX_ERROR
;

673 
˛
->
buf
 = 
b
;

674 
˛
->
√xt
 = 
NULL
;

676 *
b
->
œ°
++ = '<';

677 *
b
->
œ°
++ = '!';

678 *
b
->
œ°
++ = '-';

679 *
b
->
œ°
++ = '-';

680 *
b
->
œ°
++ = '#';

682 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
comm™d
.
d©a
,

683 
˘x
->
comm™d
.
Àn
);

685 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

686 *
b
->
œ°
++ = ' ';

687 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
key
.
d©a
,

688 
∑øm
[
i
].
key
.
Àn
);

689 *
b
->
œ°
++ = '=';

690 *
b
->
œ°
++ = '"';

691 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
vÆue
.
d©a
,

692 
∑øm
[
i
].
vÆue
.
Àn
);

693 *
b
->
œ°
++ = '"';

696 *
b
->
œ°
++ = ' ';

697 *
b
->
œ°
++ = '-';

698 *
b
->
œ°
++ = '-';

699 *
b
->
œ°
++ = '>';

701 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

702 
ngx_hâp_ssi_fûãr_moduÀ
);

703 
bl
 = 
m˘x
->
blocks
->
ñts
;

704 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

705 *
Œ
;

706 
Œ
 = &(*Œ)->
√xt
)

711 *
Œ
 = 
˛
;

713 
b
 = 
NULL
;

718 i‡(
cmd
->
c⁄dôi⁄Æ
 == 0) {

723 i‡(
cmd
->
c⁄dôi⁄Æ


724 && (
˘x
->
c⁄dôi⁄Æ
 == 0

725 || 
˘x
->
c⁄dôi⁄Æ
 > 
cmd
->conditional))

727 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

729 &
˘x
->
comm™d
);

730 
ssi_îr‹
;

733 i‡(
˘x
->
∑øms
.
√…s
 > 
NGX_HTTP_SSI_MAX_PARAMS
) {

734 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

736 &
˘x
->
comm™d
);

737 
ssi_îr‹
;

740 
	`ngx_memzîo
(
∑øms
,

741 (
NGX_HTTP_SSI_MAX_PARAMS
 + 1Ë* (
ngx_°r_t
 *));

743 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

745 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

747 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

749 i‡(
∑øm
[
i
].
key
.
Àn
 !
¥m
->
«me
.len

750 || 
	`ngx_°∫cmp
(
∑øm
[
i
].
key
.
d©a
, 
¥m
->
«me
.data,

751 
¥m
->
«me
.
Àn
) != 0)

756 i‡(!
¥m
->
mu…ùÀ
) {

757 i‡(
∑øms
[
¥m
->
ödex
]) {

758 
	`ngx_log_îr‹
(
NGX_LOG_ERR
,

759 
r
->
c⁄√˘i⁄
->
log
, 0,

762 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

764 
ssi_îr‹
;

767 
∑øms
[
¥m
->
ödex
] = &
∑øm
[
i
].
vÆue
;

772 
ödex
 = 
¥m
->ödex; 
∑øms
[index]; index++) {

776 
∑øms
[
ödex
] = &
∑øm
[
i
].
vÆue
;

781 i‡(
¥m
->
«me
.
Àn
 == 0) {

782 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

785 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

787 
ssi_îr‹
;

791 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

792 i‡(
¥m
->
m™d©‹y
 && 
∑øms
[¥m->
ödex
] == 0) {

793 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

796 &
¥m
->
«me
, &
˘x
->
comm™d
);

798 
ssi_îr‹
;

802 i‡(
cmd
->
Êush
 && 
˘x
->
out
) {

804 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

807 i‡(
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

808  
NGX_ERROR
;

812 
rc
 = 
cmd
->
	`h™dÀr
(
r
, 
˘x
, 
∑øms
);

814 i‡(
rc
 =
NGX_OK
) {

818 i‡(
rc
 =
NGX_DONE
 ||Ñ¯=
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

819 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

820  
rc
;

827 
ssi_îr‹
:

829 i‡(
¶cf
->
sûít_îr‹s
) {

833 i‡(
˘x
->
‰ì
) {

834 
˛
 = 
˘x
->
‰ì
;

835 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

836 
b
 = 
˛
->
buf
;

837 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

840 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

841 i‡(
b
 =
NULL
) {

842  
NGX_ERROR
;

845 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

846 i‡(
˛
 =
NULL
) {

847  
NGX_ERROR
;

850 
˛
->
buf
 = 
b
;

853 
b
->
mem‹y
 = 1;

854 
b
->
pos
 = 
˘x
->
îrmsg
.
d©a
;

855 
b
->
œ°
 = 
˘x
->
îrmsg
.
d©a
 + ctx->îrmsg.
Àn
;

857 
˛
->
√xt
 = 
NULL
;

858 *
˘x
->
œ°_out
 = 
˛
;

859 
˘x
->
œ°_out
 = &
˛
->
√xt
;

864 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

865 i‡(
b
 =
NULL
) {

866 i‡(
˘x
->
‰ì
) {

867 
˛
 = 
˘x
->
‰ì
;

868 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

869 
b
 = 
˛
->
buf
;

870 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

873 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

874 i‡(
b
 =
NULL
) {

875  
NGX_ERROR
;

878 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

879 i‡(
˛
 =
NULL
) {

880  
NGX_ERROR
;

883 
˛
->
buf
 = 
b
;

886 
b
->
sync
 = 1;

888 
˛
->
√xt
 = 
NULL
;

889 *
˘x
->
œ°_out
 = 
˛
;

890 
˘x
->
œ°_out
 = &
˛
->
√xt
;

893 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

894 
b
->
shadow
 = 
˘x
->
buf
;

896 i‡(
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 == 0) {

897 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

901 
˘x
->
buf
 = 
NULL
;

903 
˘x
->
ßved
 = ctx->
looked
;

906 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

907  
NGX_OK
;

910  
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
);

911 
	}
}

914 
ngx_öt_t


915 
	$ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

917 
ngx_öt_t
 
rc
;

918 
ngx_buf_t
 *
b
;

919 
ngx_chaö_t
 *
˛
;

922 
b
 = 
NULL
;

923 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

924 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

925 "ssòout: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

926 i‡(
˛
->
buf
 =
b
) {

927 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

929 
	`ngx_debug_poöt
();

930  
NGX_ERROR
;

932 
b
 = 
˛
->
buf
;

936 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

938 i‡(
˘x
->
busy
 =
NULL
) {

939 
˘x
->
busy
 = ctx->
out
;

942 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

943 
˛
->
√xt
 = 
˘x
->
out
;

946 
˘x
->
out
 = 
NULL
;

947 
˘x
->
œ°_out
 = &˘x->
out
;

949 
˘x
->
busy
) {

951 
˛
 = 
˘x
->
busy
;

952 
b
 = 
˛
->
buf
;

954 i‡(
	`ngx_buf_size
(
b
) != 0) {

958 i‡(
b
->
shadow
) {

959 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

962 
˘x
->
busy
 = 
˛
->
√xt
;

964 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

967 
˛
->
√xt
 = 
˘x
->
‰ì
;

968 
˘x
->
‰ì
 = 
˛
;

972 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

974  
rc
;

975 
	}
}

979 
	$ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

981 i‡(
˘x
->
ö
 || ctx->
buf
) {

982 
r
->
buf„ªd
 |
NGX_HTTP_SSI_BUFFERED
;

985 
r
->
buf„ªd
 &~
NGX_HTTP_SSI_BUFFERED
;

987 
	}
}

990 
ngx_öt_t


991 
	$ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

993 
u_ch¨
 *
p
, *
vÆue
, *
œ°
, *
c›y_íd
, 
ch
;

994 
size_t
 
looked
;

995 
ngx_hâp_ssi_°©e_e
 
°©e
;

997 
°©e
 = 
˘x
->state;

998 
looked
 = 
˘x
->looked;

999 
œ°
 = 
˘x
->
buf
->last;

1000 
c›y_íd
 = 
˘x
->copy_end;

1002 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

1004 
ch
 = *
p
;

1006 i‡(
°©e
 =
ssi_°¨t_°©e
) {

1011 i‡(
ch
 == '<') {

1012 
c›y_íd
 = 
p
;

1013 
looked
 = 1;

1014 
°©e
 = 
ssi_èg_°©e
;

1016 
èg_°¨ãd
;

1019 i‡(++
p
 =
œ°
) {

1023 
ch
 = *
p
;

1026 
˘x
->
°©e
 = state;

1027 
˘x
->
pos
 = 
p
;

1028 
˘x
->
looked
 =Üooked;

1029 
˘x
->
c›y_íd
 = 
p
;

1031 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

1032 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1035  
NGX_AGAIN
;

1037 
èg_°¨ãd
:

1042 
°©e
) {

1044 
ssi_°¨t_°©e
:

1048 
ssi_èg_°©e
:

1049 
ch
) {

1051 
looked
 = 2;

1052 
°©e
 = 
ssi_commít0_°©e
;

1056 
c›y_íd
 = 
p
;

1060 
c›y_íd
 = 
p
;

1061 
looked
 = 0;

1062 
°©e
 = 
ssi_°¨t_°©e
;

1068 
ssi_commít0_°©e
:

1069 
ch
) {

1071 
looked
 = 3;

1072 
°©e
 = 
ssi_commít1_°©e
;

1076 
c›y_íd
 = 
p
;

1077 
looked
 = 1;

1078 
°©e
 = 
ssi_èg_°©e
;

1082 
c›y_íd
 = 
p
;

1083 
looked
 = 0;

1084 
°©e
 = 
ssi_°¨t_°©e
;

1090 
ssi_commít1_°©e
:

1091 
ch
) {

1093 
looked
 = 4;

1094 
°©e
 = 
ssi_sh¨p_°©e
;

1098 
c›y_íd
 = 
p
;

1099 
looked
 = 1;

1100 
°©e
 = 
ssi_èg_°©e
;

1104 
c›y_íd
 = 
p
;

1105 
looked
 = 0;

1106 
°©e
 = 
ssi_°¨t_°©e
;

1112 
ssi_sh¨p_°©e
:

1113 
ch
) {

1115 i‡(
p
 - 
˘x
->
pos
 < 4) {

1116 
˘x
->
ßved
 = 0;

1118 
looked
 = 0;

1119 
°©e
 = 
ssi_¥ecomm™d_°©e
;

1123 
c›y_íd
 = 
p
;

1124 
looked
 = 1;

1125 
°©e
 = 
ssi_èg_°©e
;

1129 
c›y_íd
 = 
p
;

1130 
looked
 = 0;

1131 
°©e
 = 
ssi_°¨t_°©e
;

1137 
ssi_¥ecomm™d_°©e
:

1138 
ch
) {

1140 
CR
:

1141 
LF
:

1146 
˘x
->
comm™d
.
Àn
 = 1;

1147 
˘x
->
comm™d
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1148 
NGX_HTTP_SSI_COMMAND_LEN
);

1149 i‡(
˘x
->
comm™d
.
d©a
 =
NULL
) {

1150  
NGX_ERROR
;

1153 
˘x
->
comm™d
.
d©a
[0] = 
ch
;

1155 
˘x
->
key
 = 0;

1156 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1158 
˘x
->
∑øms
.
√…s
 = 0;

1160 
°©e
 = 
ssi_comm™d_°©e
;

1166 
ssi_comm™d_°©e
:

1167 
ch
) {

1169 
CR
:

1170 
LF
:

1172 
°©e
 = 
ssi_¥ï¨am_°©e
;

1176 
°©e
 = 
ssi_commít_íd0_°©e
;

1180 i‡(
˘x
->
comm™d
.
Àn
 =
NGX_HTTP_SSI_COMMAND_LEN
) {

1181 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1183 &
˘x
->
comm™d
, 
ch
);

1185 
°©e
 = 
ssi_îr‹_°©e
;

1189 
˘x
->
comm™d
.
d©a
[˘x->comm™d.
Àn
++] = 
ch
;

1190 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1195 
ssi_¥ï¨am_°©e
:

1196 
ch
) {

1198 
CR
:

1199 
LF
:

1204 
°©e
 = 
ssi_commít_íd0_°©e
;

1208 
˘x
->
∑øm
 = 
	`ngx_¨øy_push
(&˘x->
∑øms
);

1209 i‡(
˘x
->
∑øm
 =
NULL
) {

1210  
NGX_ERROR
;

1213 
˘x
->
∑øm
->
key
.
Àn
 = 1;

1214 
˘x
->
∑øm
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1215 
NGX_HTTP_SSI_PARAM_LEN
);

1216 i‡(
˘x
->
∑øm
->
key
.
d©a
 =
NULL
) {

1217  
NGX_ERROR
;

1220 
˘x
->
∑øm
->
key
.
d©a
[0] = 
ch
;

1222 
˘x
->
∑øm
->
vÆue
.
Àn
 = 0;

1224 i‡(
˘x
->
vÆue_buf
 =
NULL
) {

1225 
˘x
->
∑øm
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1226 
˘x
->
vÆue_Àn
 + 1);

1227 i‡(
˘x
->
∑øm
->
vÆue
.
d©a
 =
NULL
) {

1228  
NGX_ERROR
;

1232 
˘x
->
∑øm
->
vÆue
.
d©a
 = ctx->
vÆue_buf
;

1235 
°©e
 = 
ssi_∑øm_°©e
;

1241 
ssi_∑øm_°©e
:

1242 
ch
) {

1244 
CR
:

1245 
LF
:

1247 
°©e
 = 
ssi_¥ìquÆ_°©e
;

1251 
°©e
 = 
ssi_¥evÆue_°©e
;

1255 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1257 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1258 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1260 &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1264 i‡(
˘x
->
∑øm
->
key
.
Àn
 =
NGX_HTTP_SSI_PARAM_LEN
) {

1265 
°©e
 = 
ssi_îr‹_°©e
;

1266 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1269 &
˘x
->
∑øm
->
key
, 
ch
, &˘x->
comm™d
);

1273 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1278 
ssi_¥ìquÆ_°©e
:

1279 
ch
) {

1281 
CR
:

1282 
LF
:

1287 
°©e
 = 
ssi_¥evÆue_°©e
;

1291 i‡(
ch
 == '-') {

1292 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1294 
°©e
 = 
ssi_îr‹_°©e
;

1297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1300 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1306 
ssi_¥evÆue_°©e
:

1307 
ch
) {

1309 
CR
:

1310 
LF
:

1315 
°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1319 
°©e
 = 
ssi_quŸed_vÆue_°©e
;

1323 i‡(
ch
 == '-') {

1324 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1326 
°©e
 = 
ssi_îr‹_°©e
;

1329 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1332 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1338 
ssi_doubÀ_quŸed_vÆue_°©e
:

1339 
ch
) {

1341 
°©e
 = 
ssi_po°∑øm_°©e
;

1345 
˘x
->
ßved_°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1346 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1351 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1352 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1355 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1356 &
˘x
->
comm™d
);

1357 
°©e
 = 
ssi_îr‹_°©e
;

1361 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1366 
ssi_quŸed_vÆue_°©e
:

1367 
ch
) {

1369 
°©e
 = 
ssi_po°∑øm_°©e
;

1373 
˘x
->
ßved_°©e
 = 
ssi_quŸed_vÆue_°©e
;

1374 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1379 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1380 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1383 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1384 &
˘x
->
comm™d
);

1385 
°©e
 = 
ssi_îr‹_°©e
;

1389 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1394 
ssi_quŸed_symbﬁ_°©e
:

1395 
°©e
 = 
˘x
->
ßved_°©e
;

1397 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1401 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1402 &
˘x
->
comm™d
);

1403 
°©e
 = 
ssi_îr‹_°©e
;

1407 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1411 
ssi_po°∑øm_°©e
:

1413 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 + 1 < ctx->
vÆue_Àn
 / 2) {

1414 
vÆue
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
∑øm
->vÆue.
Àn
 + 1);

1415 i‡(
vÆue
 =
NULL
) {

1416  
NGX_ERROR
;

1419 
	`ngx_mem˝y
(
vÆue
, 
˘x
->
∑øm
->vÆue.
d©a
,

1420 
˘x
->
∑øm
->
vÆue
.
Àn
);

1422 
˘x
->
vÆue_buf
 = ctx->
∑øm
->
vÆue
.
d©a
;

1423 
˘x
->
∑øm
->
vÆue
.
d©a
 = value;

1426 
˘x
->
vÆue_buf
 = 
NULL
;

1429 
ch
) {

1431 
CR
:

1432 
LF
:

1434 
°©e
 = 
ssi_¥ï¨am_°©e
;

1438 
°©e
 = 
ssi_commít_íd0_°©e
;

1442 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1445 
ch
, &
˘x
->
∑øm
->
vÆue
, &˘x->∑øm->
key
,

1446 &
˘x
->
comm™d
);

1447 
°©e
 = 
ssi_îr‹_°©e
;

1453 
ssi_commít_íd0_°©e
:

1454 
ch
) {

1456 
°©e
 = 
ssi_commít_íd1_°©e
;

1460 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1462 
ch
, &
˘x
->
comm™d
);

1463 
°©e
 = 
ssi_îr‹_°©e
;

1469 
ssi_commít_íd1_°©e
:

1470 
ch
) {

1472 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1473 
˘x
->
pos
 = 
p
 + 1;

1474 
˘x
->
looked
 =Üooked;

1475 
˘x
->
c›y_íd
 = copy_end;

1477 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1478 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1481  
NGX_OK
;

1484 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1486 
ch
, &
˘x
->
comm™d
);

1487 
°©e
 = 
ssi_îr‹_°©e
;

1493 
ssi_îr‹_°©e
:

1494 
ch
) {

1496 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1505 
ssi_îr‹_íd0_°©e
:

1506 
ch
) {

1508 
°©e
 = 
ssi_îr‹_íd1_°©e
;

1512 
°©e
 = 
ssi_îr‹_°©e
;

1518 
ssi_îr‹_íd1_°©e
:

1519 
ch
) {

1521 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1522 
˘x
->
pos
 = 
p
 + 1;

1523 
˘x
->
looked
 =Üooked;

1524 
˘x
->
c›y_íd
 = copy_end;

1526 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1527 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1530  
NGX_HTTP_SSI_ERROR
;

1533 
°©e
 = 
ssi_îr‹_°©e
;

1541 
˘x
->
°©e
 = state;

1542 
˘x
->
pos
 = 
p
;

1543 
˘x
->
looked
 =Üooked;

1545 
˘x
->
c›y_íd
 = (
°©e
 =
ssi_°¨t_°©e
Ë? 
p
 : copy_end;

1547 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

1548 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1551  
NGX_AGAIN
;

1552 
	}
}

1555 
ngx_°r_t
 *

1556 
	$ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

1557 
ngx_uöt_t
 
key
)

1559 
ngx_uöt_t
 
i
;

1560 
ngx_li°_∑π_t
 *
∑π
;

1561 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1562 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1564 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1566 #i‡(
NGX_PCRE
)

1568 
ngx_°r_t
 *
vÆue
;

1570 i‡(
key
 >= '0' && key <= '9') {

1571 
i
 = 
key
 - '0';

1573 i‡(
i
 < 
˘x
->
nˇ±uªs
) {

1574 
vÆue
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_°r_t
));

1575 i‡(
vÆue
 =
NULL
) {

1576  
NULL
;

1579 
i
 *= 2;

1581 
vÆue
->
d©a
 = 
˘x
->
ˇ±uªs_d©a
 + ctx->
ˇ±uªs
[
i
];

1582 
vÆue
->
Àn
 = 
˘x
->
ˇ±uªs
[
i
 + 1] - ctx->captures[i];

1584  
vÆue
;

1590 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1591  
NULL
;

1594 
∑π
 = &
˘x
->
v¨übÀs
->part;

1595 
v¨
 = 
∑π
->
ñts
;

1597 
i
 = 0; ; i++) {

1599 i‡(
i
 >
∑π
->
√…s
) {

1600 i‡(
∑π
->
√xt
 =
NULL
) {

1604 
∑π
 =Ö¨t->
√xt
;

1605 
v¨
 = 
∑π
->
ñts
;

1606 
i
 = 0;

1609 i‡(
«me
->
Àn
 !
v¨
[
i
].name.len) {

1613 i‡(
key
 !
v¨
[
i
].key) {

1617 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
v¨
[
i
].«me.d©a,Çame->
Àn
) == 0) {

1618  &
v¨
[
i
].
vÆue
;

1622  
NULL
;

1623 
	}
}

1626 
ngx_öt_t


1627 
	$ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1628 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
)

1630 
u_ch¨
 
ch
, *
p
, **
vÆue
, *
d©a
, *
∑π_d©a
;

1631 
size_t
 *
size
, 
Àn
, 
¥efix
, 
∑π_Àn
;

1632 
ngx_°r_t
 
v¨
, *
vÆ
;

1633 
ngx_uöt_t
 
i
, 
n
, 
bøckë
, 
quŸed
, 
key
;

1634 
ngx_¨øy_t
 
Àngths
, 
vÆues
;

1635 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1637 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ãxt
);

1639 i‡(
n
 == 0) {

1641 
d©a
 = 
ãxt
->data;

1642 
p
 = 
d©a
;

1644 i‡((
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
Ë&& 
ãxt
->
d©a
[0] != '/') {

1646 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1647 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1652 i‡(
¥efix
) {

1653 
Àn
 = 
¥efix
 + 
ãxt
->len;

1655 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1656 i‡(
d©a
 =
NULL
) {

1657  
NGX_ERROR
;

1660 
p
 = 
	`ngx_c›y
(
d©a
, 
r
->
uri
.d©a, 
¥efix
);

1664 
quŸed
 = 0;

1666 
i
 = 0; i < 
ãxt
->
Àn
; i++) {

1667 
ch
 = 
ãxt
->
d©a
[
i
];

1669 i‡(!
quŸed
) {

1671 i‡(
ch
 == '\\') {

1672 
quŸed
 = 1;

1677 
quŸed
 = 0;

1679 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1680 *
p
++ = '\\';

1684 *
p
++ = 
ch
;

1687 
ãxt
->
Àn
 = 
p
 - 
d©a
;

1688 
ãxt
->
d©a
 = data;

1690  
NGX_OK
;

1693 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
r
->
poﬁ
, 8, (
size_t
 *)Ë!
NGX_OK
) {

1694  
NGX_ERROR
;

1697 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
r
->
poﬁ
, 8, (
u_ch¨
 *)Ë!
NGX_OK
) {

1698  
NGX_ERROR
;

1701 
Àn
 = 0;

1702 
i
 = 0;

1704 
i
 < 
ãxt
->
Àn
) {

1706 i‡(
ãxt
->
d©a
[
i
] == '$') {

1708 
v¨
.
Àn
 = 0;

1710 i‡(++
i
 =
ãxt
->
Àn
) {

1711 
övÆid_v¨übÀ
;

1714 i‡(
ãxt
->
d©a
[
i
] == '{') {

1715 
bøckë
 = 1;

1717 i‡(++
i
 =
ãxt
->
Àn
) {

1718 
övÆid_v¨übÀ
;

1721 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1724 
bøckë
 = 0;

1725 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1728  ; 
i
 < 
ãxt
->
Àn
; i++, 
v¨
.len++) {

1729 
ch
 = 
ãxt
->
d©a
[
i
];

1731 i‡(
ch
 ='}' && 
bøckë
) {

1732 
i
++;

1733 
bøckë
 = 0;

1737 i‡((
ch
 >= 'A' && ch <= 'Z')

1738 || (
ch
 >= 'a' && ch <= 'z')

1739 || (
ch
 >= '0' && ch <= '9')

1740 || 
ch
 == '_')

1748 i‡(
bøckë
) {

1749 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1751 "v¨übÀ i†missög", &
v¨
);

1752  
NGX_HTTP_SSI_ERROR
;

1755 i‡(
v¨
.
Àn
 == 0) {

1756 
övÆid_v¨übÀ
;

1759 
key
 = 
	`ngx_hash_°æow
(
v¨
.
d©a
, v¨.d©a, v¨.
Àn
);

1761 
vÆ
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1763 i‡(
vÆ
 =
NULL
) {

1764 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1765 i‡(
vv
 =
NULL
) {

1766  
NGX_ERROR
;

1769 i‡(
vv
->
nŸ_found
) {

1773 
∑π_d©a
 = 
vv
->
d©a
;

1774 
∑π_Àn
 = 
vv
->
Àn
;

1777 
∑π_d©a
 = 
vÆ
->
d©a
;

1778 
∑π_Àn
 = 
vÆ
->
Àn
;

1782 
∑π_d©a
 = &
ãxt
->
d©a
[
i
];

1783 
quŸed
 = 0;

1785 
p
 = 
∑π_d©a
; 
i
 < 
ãxt
->
Àn
; i++) {

1786 
ch
 = 
ãxt
->
d©a
[
i
];

1788 i‡(!
quŸed
) {

1790 i‡(
ch
 == '\\') {

1791 
quŸed
 = 1;

1795 i‡(
ch
 == '$') {

1800 
quŸed
 = 0;

1802 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1803 *
p
++ = '\\';

1807 *
p
++ = 
ch
;

1810 
∑π_Àn
 = 
p
 - 
∑π_d©a
;

1813 
Àn
 +
∑π_Àn
;

1815 
size
 = 
	`ngx_¨øy_push
(&
Àngths
);

1816 i‡(
size
 =
NULL
) {

1817  
NGX_ERROR
;

1820 *
size
 = 
∑π_Àn
;

1822 
vÆue
 = 
	`ngx_¨øy_push
(&
vÆues
);

1823 i‡(
vÆue
 =
NULL
) {

1824  
NGX_ERROR
;

1827 *
vÆue
 = 
∑π_d©a
;

1830 
¥efix
 = 0;

1832 
size
 = 
Àngths
.
ñts
;

1833 
vÆue
 = 
vÆues
.
ñts
;

1835 i‡(
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
) {

1836 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1837 i‡(
size
[
i
] != 0) {

1838 i‡(*
vÆue
[
i
] != '/') {

1839 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1840 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1841 
Àn
 +
¥efix
;

1852 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + ((
Êags
 & 
NGX_HTTP_SSI_ADD_ZERO
) ? 1 : 0));

1853 i‡(
p
 =
NULL
) {

1854  
NGX_ERROR
;

1857 
ãxt
->
Àn
 =Üen;

1858 
ãxt
->
d©a
 = 
p
;

1860 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
, 
¥efix
);

1862 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1863 
p
 = 
	`ngx_c›y
’, 
vÆue
[
i
], 
size
[i]);

1866  
NGX_OK
;

1868 
övÆid_v¨übÀ
:

1870 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1871 "övÆid v¨übÀÇamêö \"%V\"", 
ãxt
);

1873  
NGX_HTTP_SSI_ERROR
;

1874 
	}
}

1877 
ngx_öt_t


1878 
	$ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑âîn
,

1879 
ngx_°r_t
 *
°r
)

1881 #i‡(
NGX_PCRE
)

1882 
rc
, *
ˇ±uªs
;

1883 
u_ch¨
 *
p
, 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1884 
size_t
 
size
;

1885 
ngx_°r_t
 *
vv
, 
«me
, 
vÆue
;

1886 
ngx_uöt_t
 
i
, 
n
, 
key
;

1887 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1888 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1889 
ngx_ªgex_compûe_t
 
rgc
;

1891 
	`ngx_memzîo
(&
rgc
, (
ngx_ªgex_compûe_t
));

1893 
rgc
.
∑âîn
 = *pattern;

1894 
rgc
.
poﬁ
 = 
r
->pool;

1895 
rgc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

1896 
rgc
.
îr
.
d©a
 = 
îr°r
;

1898 i‡(
	`ngx_ªgex_compûe
(&
rgc
Ë!
NGX_OK
) {

1899 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "%V", &
rgc
.
îr
);

1900  
NGX_HTTP_SSI_ERROR
;

1903 
n
 = (
rgc
.
ˇ±uªs
 + 1) * 3;

1905 
ˇ±uªs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * ());

1906 i‡(
ˇ±uªs
 =
NULL
) {

1907  
NGX_ERROR
;

1910 
rc
 = 
	`ngx_ªgex_exec
(
rgc
.
ªgex
, 
°r
, 
ˇ±uªs
, 
n
);

1912 i‡(
rc
 < 
NGX_REGEX_NO_MATCHED
) {

1913 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1914 
ngx_ªgex_exec_n
 " failed: %d on \"%V\" using \"%V\"",

1915 
rc
, 
°r
, 
∑âîn
);

1916  
NGX_HTTP_SSI_ERROR
;

1919 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1920  
NGX_DECLINED
;

1923 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1925 
˘x
->
nˇ±uªs
 = 
rc
;

1926 
˘x
->
ˇ±uªs
 = captures;

1927 
˘x
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1929 i‡(
rgc
.
«med_ˇ±uªs
 > 0) {

1931 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1932 
˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

1933 (
ngx_hâp_ssi_v¨_t
));

1934 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1935  
NGX_ERROR
;

1939 
size
 = 
rgc
.
«me_size
;

1940 
p
 = 
rgc
.
«mes
;

1942 
i
 = 0; i < (
ngx_uöt_t
Ë
rgc
.
«med_ˇ±uªs
; i++, 
p
 +
size
) {

1944 
«me
.
d©a
 = &
p
[2];

1945 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1947 
n
 = 2 * ((
p
[0] << 8) +Ö[1]);

1949 
vÆue
.
d©a
 = &
°r
->d©a[
ˇ±uªs
[
n
]];

1950 
vÆue
.
Àn
 = 
ˇ±uªs
[
n
 + 1] - captures[n];

1952 
key
 = 
	`ngx_hash_°æow
(
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

1954 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
«me
, 
key
);

1956 i‡(
vv
) {

1957 *
vv
 = 
vÆue
;

1961 
v¨
 = 
	`ngx_li°_push
(
˘x
->
v¨übÀs
);

1962 i‡(
v¨
 =
NULL
) {

1963  
NGX_ERROR
;

1966 
v¨
->
«me
 =Çame;

1967 
v¨
->
key
 = key;

1968 
v¨
->
vÆue
 = value;

1972  
NGX_OK
;

1976 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1978 
∑âîn
);

1979  
NGX_HTTP_SSI_ERROR
;

1982 
	}
}

1985 
ngx_öt_t


1986 
	$ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1987 
ngx_°r_t
 **
∑øms
)

1989 
ngx_öt_t
 
rc
;

1990 
ngx_°r_t
 *
uri
, *
fûe
, *
waô
, *
£t
, *
°ub
, 
¨gs
;

1991 
ngx_buf_t
 *
b
;

1992 
ngx_uöt_t
 
Êags
, 
i
, 
key
;

1993 
ngx_chaö_t
 *
˛
, *
é
, **
Œ
, *
out
;

1994 
ngx_hâp_ªque°_t
 *
§
;

1995 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1996 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

1997 
ngx_hâp_ssi_block_t
 *
bl
;

1998 
ngx_hâp_po°_subªque°_t
 *
p§
;

2000 
uri
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_VIRTUAL
];

2001 
fûe
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_FILE
];

2002 
waô
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_WAIT
];

2003 
£t
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_SET
];

2004 
°ub
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_STUB
];

2006 i‡(
uri
 && 
fûe
) {

2007 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2009 
uri
, 
fûe
);

2010  
NGX_HTTP_SSI_ERROR
;

2013 i‡(
uri
 =
NULL
 && 
fûe
 == NULL) {

2014 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2016  
NGX_HTTP_SSI_ERROR
;

2019 i‡(
£t
 && 
°ub
) {

2020 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2023  
NGX_HTTP_SSI_ERROR
;

2026 i‡(
waô
) {

2027 i‡(
uri
 =
NULL
) {

2028 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2029 "\"waô\" c™nŸ bêu£d wôh fûe=\"%V\"", 
fûe
);

2030  
NGX_HTTP_SSI_ERROR
;

2033 i‡(
waô
->
Àn
 == 2

2034 && 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "no", 2) == 0)

2036 
waô
 = 
NULL
;

2038 } i‡(
waô
->
Àn
 != 3

2039 || 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "yes", 3) != 0)

2041 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2043 
waô
);

2044  
NGX_HTTP_SSI_ERROR
;

2048 i‡(
uri
 =
NULL
) {

2049 
uri
 = 
fûe
;

2050 
waô
 = (
ngx_°r_t
 *) -1;

2053 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
uri
, 
NGX_HTTP_SSI_ADD_PREFIX
);

2055 i‡(
rc
 !
NGX_OK
) {

2056  
rc
;

2059 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2060 "ssòö˛ude: \"%V\"", 
uri
);

2062 
	`ngx_°r_nuŒ
(&
¨gs
);

2063 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2065 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2066  
NGX_HTTP_SSI_ERROR
;

2069 
p§
 = 
NULL
;

2071 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2073 i‡(
°ub
) {

2074 i‡(
m˘x
->
blocks
) {

2075 
bl
 = 
m˘x
->
blocks
->
ñts
;

2076 
i
 = 0; i < 
m˘x
->
blocks
->
√…s
; i++) {

2077 i‡(
°ub
->
Àn
 =
bl
[
i
].
«me
.len

2078 && 
	`ngx_°∫cmp
(
°ub
->
d©a
, 
bl
[
i
].
«me
.d©a, stub->
Àn
) == 0)

2080 
found
;

2085 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2086 "\"°ub\"=\"%V\" f‹ \"ö˛ude\"ÇŸ found", 
°ub
);

2087  
NGX_HTTP_SSI_ERROR
;

2089 
found
:

2091 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2092 i‡(
p§
 =
NULL
) {

2093  
NGX_ERROR
;

2096 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_°ub_ouçut
;

2098 i‡(
bl
[
i
].
cou¡
++) {

2100 
out
 = 
NULL
;

2101 
Œ
 = &
out
;

2103 
é
 = 
bl
[
i
].
bufs
;Ål;Å»é->
√xt
) {

2105 i‡(
˘x
->
‰ì
) {

2106 
˛
 = 
˘x
->
‰ì
;

2107 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

2108 
b
 = 
˛
->
buf
;

2111 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

2112 i‡(
b
 =
NULL
) {

2113  
NGX_ERROR
;

2116 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2117 i‡(
˛
 =
NULL
) {

2118  
NGX_ERROR
;

2121 
˛
->
buf
 = 
b
;

2124 
	`ngx_mem˝y
(
b
, 
é
->
buf
, (
ngx_buf_t
));

2126 
b
->
pos
 = b->
°¨t
;

2128 *
Œ
 = 
˛
;

2129 
˛
->
√xt
 = 
NULL
;

2130 
Œ
 = &
˛
->
√xt
;

2133 
p§
->
d©a
 = 
out
;

2136 
p§
->
d©a
 = 
bl
[
i
].
bufs
;

2140 i‡(
waô
) {

2141 
Êags
 |
NGX_HTTP_SUBREQUEST_WAITED
;

2144 i‡(
£t
) {

2145 
key
 = 
	`ngx_hash_°æow
(
£t
->
d©a
, së->d©a, së->
Àn
);

2147 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2148 i‡(
p§
 =
NULL
) {

2149  
NGX_ERROR
;

2152 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_£t_v¨übÀ
;

2153 
p§
->
d©a
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
£t
, 
key
);

2155 i‡(
p§
->
d©a
 =
NULL
) {

2157 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2158 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2159 (
ngx_hâp_ssi_v¨_t
));

2160 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2161  
NGX_ERROR
;

2165 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2166 i‡(
v¨
 =
NULL
) {

2167  
NGX_ERROR
;

2170 
v¨
->
«me
 = *
£t
;

2171 
v¨
->
key
 = key;

2172 
v¨
->
vÆue
 = 
ngx_hâp_ssi_nuŒ_°rög
;

2173 
p§
->
d©a
 = &
v¨
->
vÆue
;

2176 
Êags
 |
NGX_HTTP_SUBREQUEST_IN_MEMORY
|
NGX_HTTP_SUBREQUEST_WAITED
;

2179 i‡(
	`ngx_hâp_subªque°
(
r
, 
uri
, &
¨gs
, &
§
, 
p§
, 
Êags
Ë!
NGX_OK
) {

2180  
NGX_HTTP_SSI_ERROR
;

2183 i‡(
waô
 =
NULL
 && 
£t
 == NULL) {

2184  
NGX_OK
;

2187 i‡(
˘x
->
waô
 =
NULL
) {

2188 
˘x
->
waô
 = 
§
;

2190  
NGX_AGAIN
;

2193 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2197  
NGX_OK
;

2198 
	}
}

2201 
ngx_öt_t


2202 
	$ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2204 
ngx_chaö_t
 *
out
;

2206 i‡(
rc
 =
NGX_ERROR
 || 
r
->
c⁄√˘i⁄
->
îr‹
 ||Ñ->
ªque°_ouçut
) {

2207  
rc
;

2210 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2211 "ssò°ub ouçut: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2213 
out
 = 
d©a
;

2215 i‡(!
r
->
hódî_£¡
) {

2216 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =

2217 
r
->
∑ª¡
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

2218 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 =Ñ->
∑ª¡
->headers_out.content_type;

2220 i‡(
	`ngx_hâp_£nd_hódî
(
r
Ë=
NGX_ERROR
) {

2221  
NGX_ERROR
;

2225  
	`ngx_hâp_ouçut_fûãr
(
r
, 
out
);

2226 
	}
}

2229 
ngx_öt_t


2230 
	$ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2232 
ngx_°r_t
 *
vÆue
 = 
d©a
;

2234 i‡(
r
->
hódîs_out
.
°©us
 < 
NGX_HTTP_SPECIAL_RESPONSE


2235 && 
r
->
out
 &&Ñ->out->
buf
)

2237 
vÆue
->
Àn
 = 
r
->
out
->
buf
->
œ°
 -Ñ->out->buf->
pos
;

2238 
vÆue
->
d©a
 = 
r
->
out
->
buf
->
pos
;

2241  
rc
;

2242 
	}
}

2245 
ngx_öt_t


2246 
	$ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2247 
ngx_°r_t
 **
∑øms
)

2249 
u_ch¨
 *
p
;

2250 
uöçå_t
 
Àn
;

2251 
ngx_buf_t
 *
b
;

2252 
ngx_°r_t
 *
v¨
, *
vÆue
, *
íc
, 
ãxt
;

2253 
ngx_uöt_t
 
key
;

2254 
ngx_chaö_t
 *
˛
;

2255 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2257 
v¨
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_VAR
];

2259 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2260 "ssòechÿ\"%V\"", 
v¨
);

2262 
key
 = 
	`ngx_hash_°æow
(
v¨
->
d©a
, v¨->d©a, v¨->
Àn
);

2264 
vÆue
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2266 i‡(
vÆue
 =
NULL
) {

2267 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2269 i‡(
vv
 =
NULL
) {

2270  
NGX_HTTP_SSI_ERROR
;

2273 i‡(!
vv
->
nŸ_found
) {

2274 
ãxt
.
d©a
 = 
vv
->data;

2275 
ãxt
.
Àn
 = 
vv
->len;

2276 
vÆue
 = &
ãxt
;

2280 i‡(
vÆue
 =
NULL
) {

2281 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_DEFAULT
];

2283 i‡(
vÆue
 =
NULL
) {

2284 
vÆue
 = &
ngx_hâp_ssi_n⁄e
;

2286 } i‡(
vÆue
->
Àn
 == 0) {

2287  
NGX_OK
;

2291 i‡(
vÆue
->
Àn
 == 0) {

2292  
NGX_OK
;

2296 
íc
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_ENCODING
];

2298 i‡(
íc
) {

2299 i‡(
íc
->
Àn
 =4 && 
	`ngx_°∫cmp
”nc->
d©a
, "none", 4) == 0) {

2301 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_NO_ENCODING
;

2303 } i‡(
íc
->
Àn
 =3 && 
	`ngx_°∫cmp
”nc->
d©a
, "url", 3) == 0) {

2305 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_URL_ENCODING
;

2307 } i‡(
íc
->
Àn
 =6 && 
	`ngx_°∫cmp
”nc->
d©a
, "entity", 6) == 0) {

2309 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

2312 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2314 
íc
);

2318 
p
 = 
vÆue
->
d©a
;

2320 
˘x
->
ícodög
) {

2322 
NGX_HTTP_SSI_URL_ENCODING
:

2323 
Àn
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vÆue
->
d©a
, value->len,

2324 
NGX_ESCAPE_HTML
);

2326 i‡(
Àn
) {

2327 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2328 i‡(
p
 =
NULL
) {

2329  
NGX_HTTP_SSI_ERROR
;

2332 (Ë
	`ngx_esˇ≥_uri
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
, 
NGX_ESCAPE_HTML
);

2335 
Àn
 +
vÆue
->len;

2338 
NGX_HTTP_SSI_ENTITY_ENCODING
:

2339 
Àn
 = 
	`ngx_esˇ≥_html
(
NULL
, 
vÆue
->
d©a
, value->len);

2341 i‡(
Àn
) {

2342 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2343 i‡(
p
 =
NULL
) {

2344  
NGX_HTTP_SSI_ERROR
;

2347 (Ë
	`ngx_esˇ≥_html
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

2350 
Àn
 +
vÆue
->len;

2354 
Àn
 = 
vÆue
->len;

2358 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2359 i‡(
b
 =
NULL
) {

2360  
NGX_HTTP_SSI_ERROR
;

2363 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2364 i‡(
˛
 =
NULL
) {

2365  
NGX_HTTP_SSI_ERROR
;

2368 
b
->
mem‹y
 = 1;

2369 
b
->
pos
 = 
p
;

2370 
b
->
œ°
 = 
p
 + 
Àn
;

2372 
˛
->
buf
 = 
b
;

2373 
˛
->
√xt
 = 
NULL
;

2374 *
˘x
->
œ°_out
 = 
˛
;

2375 
˘x
->
œ°_out
 = &
˛
->
√xt
;

2377  
NGX_OK
;

2378 
	}
}

2381 
ngx_öt_t


2382 
	$ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2383 
ngx_°r_t
 **
∑øms
)

2385 
ngx_°r_t
 *
vÆue
;

2387 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_TIMEFMT
];

2389 i‡(
vÆue
) {

2390 
˘x
->
timefmt
.
Àn
 = 
vÆue
->len;

2391 
˘x
->
timefmt
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 + 1);

2392 i‡(
˘x
->
timefmt
.
d©a
 =
NULL
) {

2393  
NGX_ERROR
;

2396 
	`ngx_˝y°∫
(
˘x
->
timefmt
.
d©a
, 
vÆue
->d©a, vÆue->
Àn
 + 1);

2399 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_ERRMSG
];

2401 i‡(
vÆue
) {

2402 
˘x
->
îrmsg
 = *
vÆue
;

2405  
NGX_OK
;

2406 
	}
}

2409 
ngx_öt_t


2410 
	$ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2411 
ngx_°r_t
 **
∑øms
)

2413 
ngx_öt_t
 
rc
;

2414 
ngx_°r_t
 *
«me
, *
vÆue
, *
vv
;

2415 
ngx_uöt_t
 
key
;

2416 
ngx_hâp_ssi_v¨_t
 *
v¨
;

2417 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2419 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2421 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2422 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2423 (
ngx_hâp_ssi_v¨_t
));

2424 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2425  
NGX_ERROR
;

2429 
«me
 = 
∑øms
[
NGX_HTTP_SSI_SET_VAR
];

2430 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_SET_VALUE
];

2432 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2433 "ssò£à\"%V\" \"%V\"", 
«me
, 
vÆue
);

2435 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
vÆue
, 0);

2437 i‡(
rc
 !
NGX_OK
) {

2438  
rc
;

2441 
key
 = 
	`ngx_hash_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

2443 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
«me
, 
key
);

2445 i‡(
vv
) {

2446 *
vv
 = *
vÆue
;

2447  
NGX_OK
;

2450 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2451 i‡(
v¨
 =
NULL
) {

2452  
NGX_ERROR
;

2455 
v¨
->
«me
 = *name;

2456 
v¨
->
key
 = key;

2457 
v¨
->
vÆue
 = *value;

2459 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2460 "£t: \"%V\"=\"%V\"", 
«me
, 
vÆue
);

2462  
NGX_OK
;

2463 
	}
}

2466 
ngx_öt_t


2467 
	$ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2468 
ngx_°r_t
 **
∑øms
)

2470 
u_ch¨
 *
p
, *
œ°
;

2471 
ngx_°r_t
 *
ex¥
, 
À·
, 
right
;

2472 
ngx_öt_t
 
rc
;

2473 
ngx_uöt_t
 
√g©ive
, 
n‹egex
, 
Êags
;

2475 i‡(
˘x
->
comm™d
.
Àn
 == 2) {

2476 i‡(
˘x
->
c⁄dôi⁄Æ
) {

2477 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2479  
NGX_HTTP_SSI_ERROR
;

2483 i‡(
˘x
->
ouçut_cho£n
) {

2484 
˘x
->
ouçut
 = 0;

2485  
NGX_OK
;

2488 
ex¥
 = 
∑øms
[
NGX_HTTP_SSI_IF_EXPR
];

2490 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2491 "ssòi‡ex¥=\"%V\"", 
ex¥
);

2493 
À·
.
d©a
 = 
ex¥
->data;

2494 
œ°
 = 
ex¥
->
d©a
 +Éx¥->
Àn
;

2496 
p
 = 
À·
.
d©a
;Ö < 
œ°
;Ö++) {

2497 i‡(*
p
 >= 'A' && *p <= 'Z') {

2498 *
p
 |= 0x20;

2502 i‡((*
p
 >= 'a' && *p <= 'z')

2503 || (*
p
 >= '0' && *p <= '9')

2504 || *
p
 == '$' || *p == '{' || *p == '}' || *p == '_'

2505 || *
p
 == '"' || *p == '\'')

2513 
À·
.
Àn
 = 
p
 -Üe·.
d©a
;

2515 
p
 < 
œ°
 && *p == ' ') {

2516 
p
++;

2519 
Êags
 = 0;

2521 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2522 "À·: \"%V\"", &
À·
);

2524 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
À·
, 
Êags
);

2526 i‡(
rc
 !
NGX_OK
) {

2527  
rc
;

2530 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2531 "evÆu©edÜe·: \"%V\"", &
À·
);

2533 i‡(
p
 =
œ°
) {

2534 i‡(
À·
.
Àn
) {

2535 
˘x
->
ouçut
 = 1;

2536 
˘x
->
ouçut_cho£n
 = 1;

2539 
˘x
->
ouçut
 = 0;

2542 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2544  
NGX_OK
;

2547 i‡(
p
 < 
œ°
 && *p == '=') {

2548 
√g©ive
 = 0;

2549 
p
++;

2551 } i‡(
p
 + 1 < 
œ°
 && *p == '!' && *(p + 1) == '=') {

2552 
√g©ive
 = 1;

2553 
p
 += 2;

2556 
övÆid_ex¥essi⁄
;

2559 
p
 < 
œ°
 && *p == ' ') {

2560 
p
++;

2563 i‡(
p
 < 
œ°
 - 1 && *p == '/') {

2564 i‡(*(
œ°
 - 1) != '/') {

2565 
övÆid_ex¥essi⁄
;

2568 
n‹egex
 = 0;

2569 
Êags
 = 
NGX_HTTP_SSI_ADD_ZERO
;

2570 
œ°
--;

2571 
p
++;

2574 
n‹egex
 = 1;

2575 
Êags
 = 0;

2577 i‡(
p
 < 
œ°
 - 1 &&Ö[0] == '\\' &&Ö[1] == '/') {

2578 
p
++;

2582 
right
.
Àn
 = 
œ°
 - 
p
;

2583 
right
.
d©a
 = 
p
;

2585 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2586 "right: \"%V\"", &
right
);

2588 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
right
, 
Êags
);

2590 i‡(
rc
 !
NGX_OK
) {

2591  
rc
;

2594 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2595 "evÆu©edÑight: \"%V\"", &
right
);

2597 i‡(
n‹egex
) {

2598 i‡(
À·
.
Àn
 !
right
.len) {

2599 
rc
 = -1;

2602 
rc
 = 
	`ngx_°∫cmp
(
À·
.
d©a
, 
right
.d©a,Ñight.
Àn
);

2606 
right
.
d©a
[right.
Àn
] = '\0';

2608 
rc
 = 
	`ngx_hâp_ssi_ªgex_m©ch
(
r
, &
right
, &
À·
);

2610 i‡(
rc
 =
NGX_OK
) {

2611 
rc
 = 0;

2612 } i‡(
rc
 =
NGX_DECLINED
) {

2613 
rc
 = -1;

2615  
rc
;

2619 i‡((
rc
 =0 && !
√g©ive
) || (rc != 0 &&Çegative)) {

2620 
˘x
->
ouçut
 = 1;

2621 
˘x
->
ouçut_cho£n
 = 1;

2624 
˘x
->
ouçut
 = 0;

2627 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2629  
NGX_OK
;

2631 
övÆid_ex¥essi⁄
:

2633 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2634 "övÆidÉx¥essi⁄ i¿\"%V\"", 
ex¥
);

2636  
NGX_HTTP_SSI_ERROR
;

2637 
	}
}

2640 
ngx_öt_t


2641 
	$ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2642 
ngx_°r_t
 **
∑øms
)

2644 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2647 i‡(
˘x
->
ouçut_cho£n
) {

2648 
˘x
->
ouçut
 = 0;

2650 
˘x
->
ouçut
 = 1;

2653 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_ELSE
;

2655  
NGX_OK
;

2656 
	}
}

2659 
ngx_öt_t


2660 
	$ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2661 
ngx_°r_t
 **
∑øms
)

2663 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2666 
˘x
->
ouçut
 = 1;

2667 
˘x
->
ouçut_cho£n
 = 0;

2668 
˘x
->
c⁄dôi⁄Æ
 = 0;

2670  
NGX_OK
;

2671 
	}
}

2674 
ngx_öt_t


2675 
	$ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2676 
ngx_°r_t
 **
∑øms
)

2678 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2679 
ngx_hâp_ssi_block_t
 *
bl
;

2681 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2684 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2686 i‡(
m˘x
->
blocks
 =
NULL
) {

2687 
m˘x
->
blocks
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 4,

2688 (
ngx_hâp_ssi_block_t
));

2689 i‡(
m˘x
->
blocks
 =
NULL
) {

2690  
NGX_HTTP_SSI_ERROR
;

2694 
bl
 = 
	`ngx_¨øy_push
(
m˘x
->
blocks
);

2695 i‡(
bl
 =
NULL
) {

2696  
NGX_HTTP_SSI_ERROR
;

2699 
bl
->
«me
 = *
∑øms
[
NGX_HTTP_SSI_BLOCK_NAME
];

2700 
bl
->
bufs
 = 
NULL
;

2701 
bl
->
cou¡
 = 0;

2703 
˘x
->
ouçut
 = 0;

2704 
˘x
->
block
 = 1;

2706  
NGX_OK
;

2707 
	}
}

2710 
ngx_öt_t


2711 
	$ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2712 
ngx_°r_t
 **
∑øms
)

2714 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2717 
˘x
->
ouçut
 = 1;

2718 
˘x
->
block
 = 0;

2720  
NGX_OK
;

2721 
	}
}

2724 
ngx_öt_t


2725 
	$ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2726 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
)

2728 
time_t
 
now
;

2729 
ngx_hâp_ssi_˘x_t
 *
˘x
;

2730 
ngx_°r_t
 *
timefmt
;

2731 
tm
Åm;

2732 
buf
[
NGX_HTTP_SSI_DATE_LEN
];

2734 
v
->
vÆid
 = 1;

2735 
v
->
no_ˇchóbÀ
 = 0;

2736 
v
->
nŸ_found
 = 0;

2738 
now
 = 
	`ngx_time
();

2740 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2742 
timefmt
 = 
˘x
 ? &˘x->timefmà: &
ngx_hâp_ssi_timefmt
;

2744 i‡(
timefmt
->
Àn
 == ("%s") - 1

2745 && 
timefmt
->
d©a
[0] == '%' &&Åimefmt->data[1] == 's')

2747 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
);

2748 i‡(
v
->
d©a
 =
NULL
) {

2749  
NGX_ERROR
;

2752 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%T", 
now
) - v->data;

2754  
NGX_OK
;

2757 i‡(
gmt
) {

2758 
	`ngx_libc_gmtime
(
now
, &
tm
);

2760 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

2763 
v
->
Àn
 = 
	`°r·ime
(
buf
, 
NGX_HTTP_SSI_DATE_LEN
,

2764 (*Ë
timefmt
->
d©a
, &
tm
);

2765 i‡(
v
->
Àn
 == 0) {

2766  
NGX_ERROR
;

2769 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2770 i‡(
v
->
d©a
 =
NULL
) {

2771  
NGX_ERROR
;

2774 
	`ngx_mem˝y
(
v
->
d©a
, 
buf
, v->
Àn
);

2776  
NGX_OK
;

2777 
	}
}

2780 
ngx_öt_t


2781 
	$ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2783 
ngx_öt_t
 
rc
;

2784 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2785 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

2786 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2788 
v
 = 
ngx_hâp_ssi_v¨s
; v->
«me
.
Àn
; v++) {

2789 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2790 i‡(
v¨
 =
NULL
) {

2791  
NGX_ERROR
;

2794 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2795 
v¨
->
d©a
 = 
v
->data;

2798 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2800 
cmd
 = 
ngx_hâp_ssi_comm™ds
; cmd->
«me
.
Àn
; cmd++) {

2801 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
cmd
->
«me
, cmd,

2802 
NGX_HASH_READONLY_KEY
);

2804 i‡(
rc
 =
NGX_OK
) {

2808 i‡(
rc
 =
NGX_BUSY
) {

2809 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2810 "c⁄Êi˘ög SSI comm™d \"%V\"", &
cmd
->
«me
);

2813  
NGX_ERROR
;

2816  
NGX_OK
;

2817 
	}
}

2821 
	$ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2823 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2825 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_maö_c⁄f_t
));

2826 i‡(
smcf
 =
NULL
) {

2827  
NULL
;

2830 
smcf
->
comm™ds
.
poﬁ
 = 
cf
->pool;

2831 
smcf
->
comm™ds
.
ãmp_poﬁ
 = 
cf
->temp_pool;

2833 i‡(
	`ngx_hash_keys_¨øy_öô
(&
smcf
->
comm™ds
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

2834  
NULL
;

2837  
smcf
;

2838 
	}
}

2842 
	$ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

2844 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

2846 
ngx_hash_öô_t
 
hash
;

2848 
hash
.hash = &
smcf
->hash;

2849 
hash
.
key
 = 
ngx_hash_key
;

2850 
hash
.
max_size
 = 1024;

2851 
hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

2852 
hash
.
«me
 = "ssi_command_hash";

2853 
hash
.
poﬁ
 = 
cf
->pool;

2854 
hash
.
ãmp_poﬁ
 = 
NULL
;

2856 i‡(
	`ngx_hash_öô
(&
hash
, 
smcf
->
comm™ds
.
keys
.
ñts
,

2857 
smcf
->
comm™ds
.
keys
.
√…s
)

2858 !
NGX_OK
)

2860  
NGX_CONF_ERROR
;

2863  
NGX_CONF_OK
;

2864 
	}
}

2868 
	$ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2870 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

2872 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_loc_c⁄f_t
));

2873 i‡(
¶cf
 =
NULL
) {

2874  
NULL
;

2884 
¶cf
->
íabÀ
 = 
NGX_CONF_UNSET
;

2885 
¶cf
->
sûít_îr‹s
 = 
NGX_CONF_UNSET
;

2886 
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 = 
NGX_CONF_UNSET
;

2887 
¶cf
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

2889 
¶cf
->
mö_fûe_chunk
 = 
NGX_CONF_UNSET_SIZE
;

2890 
¶cf
->
vÆue_Àn
 = 
NGX_CONF_UNSET_SIZE
;

2892  
¶cf
;

2893 
	}
}

2897 
	$ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2899 
ngx_hâp_ssi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2900 
ngx_hâp_ssi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2902 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

2903 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sûít_îr‹s
, 
¥ev
->silent_errors, 0);

2904 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_ªcy˛ed_buf„rs
,

2905 
¥ev
->
ign‹e_ªcy˛ed_buf„rs
, 0);

2906 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

2908 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
mö_fûe_chunk
, 
¥ev
->min_file_chunk, 1024);

2909 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
vÆue_Àn
, 
¥ev
->value_len, 255);

2911 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

2912 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

2913 
ngx_hâp_html_deÁu…_ty≥s
)

2914 !
NGX_OK
)

2916  
NGX_CONF_ERROR
;

2919  
NGX_CONF_OK
;

2920 
	}
}

2923 
ngx_öt_t


2924 
	$ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2926 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2927 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ssi_hódî_fûãr
;

2929 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

2930 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ssi_body_fûãr
;

2932  
NGX_OK
;

2933 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@src/http/modules/ngx_http_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "auto"

	)

20 
	#NGX_HTTP_NPN_ADVERTISE
 "\x08hâp/1.1"

	)

23 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


24 
	`ngx_hâp_s¶_Æ≤_£À˘
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

25 c⁄° **
out
, *
ouéí
,

26 c⁄° *
ö
, 
öÀn
, *
¨g
);

29 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


30 
	`ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

31 c⁄° **
out
, *
ouéí
, *
¨g
);

34 
ngx_öt_t
 
	`ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
	`ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
	`ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

40 *
	`ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

41 *
	`ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

42 *
∑ª¡
, *
chûd
);

44 *
	`ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

45 *
c⁄f
);

46 *
	`ngx_hâp_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

48 *
	`ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

49 *
c⁄f
);

51 
ngx_öt_t
 
	`ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
);

54 
ngx_c⁄f_bômask_t
 
ngx_hâp_s¶_¥Ÿocﬁs
[] = {

55 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

56 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

57 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

58 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

59 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

60 { 
	`ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

61 { 
ngx_nuŒ_°rög
, 0 }

62 
	}
};

65 
ngx_c⁄f_íum_t
 
	gngx_hâp_s¶_vîify
[] = {

66 { 
ngx_°rög
("off"), 0 },

67 { 
ngx_°rög
("on"), 1 },

68 { 
ngx_°rög
("optional"), 2 },

69 { 
ngx_°rög
("optional_no_ca"), 3 },

70 { 
ngx_nuŒ_°rög
, 0 }

74 
ngx_c⁄f_dïªˇãd_t
 
	gngx_hâp_s¶_dïªˇãd
 = {

75 
ngx_c⁄f_dïªˇãd
, "ssl", "listen ... ssl"

79 
ngx_comm™d_t
 
	gngx_hâp_s¶_comm™ds
[] = {

81 { 
ngx_°rög
("ssl"),

82 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

83 
ngx_hâp_s¶_íabÀ
,

84 
NGX_HTTP_SRV_CONF_OFFSET
,

85 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
íabÀ
),

86 &
ngx_hâp_s¶_dïªˇãd
 },

88 { 
ngx_°rög
("ssl_certificate"),

89 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

91 
NGX_HTTP_SRV_CONF_OFFSET
,

92 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇãs
),

93 
NULL
 },

95 { 
ngx_°rög
("ssl_certificate_key"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

98 
NGX_HTTP_SRV_CONF_OFFSET
,

99 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã_keys
),

100 
NULL
 },

102 { 
ngx_°rög
("ssl_password_file"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

104 
ngx_hâp_s¶_∑ssw‹d_fûe
,

105 
NGX_HTTP_SRV_CONF_OFFSET
,

107 
NULL
 },

109 { 
ngx_°rög
("ssl_dhparam"),

110 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

111 
ngx_c⁄f_£t_°r_¶Ÿ
,

112 
NGX_HTTP_SRV_CONF_OFFSET
,

113 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
dh∑øm
),

114 
NULL
 },

116 { 
ngx_°rög
("ssl_ecdh_curve"),

117 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_c⁄f_£t_°r_¶Ÿ
,

119 
NGX_HTTP_SRV_CONF_OFFSET
,

120 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
ecdh_curve
),

121 
NULL
 },

123 { 
ngx_°rög
("ssl_protocols"),

124 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

125 
ngx_c⁄f_£t_bômask_¶Ÿ
,

126 
NGX_HTTP_SRV_CONF_OFFSET
,

127 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥Ÿocﬁs
),

128 &
ngx_hâp_s¶_¥Ÿocﬁs
 },

130 { 
ngx_°rög
("ssl_ciphers"),

131 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

132 
ngx_c⁄f_£t_°r_¶Ÿ
,

133 
NGX_HTTP_SRV_CONF_OFFSET
,

134 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
cùhîs
),

135 
NULL
 },

137 { 
ngx_°rög
("ssl_buffer_size"),

138 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_c⁄f_£t_size_¶Ÿ
,

140 
NGX_HTTP_SRV_CONF_OFFSET
,

141 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
buf„r_size
),

142 
NULL
 },

144 { 
ngx_°rög
("ssl_verify_client"),

145 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_íum_¶Ÿ
,

147 
NGX_HTTP_SRV_CONF_OFFSET
,

148 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify
),

149 &
ngx_hâp_s¶_vîify
 },

151 { 
ngx_°rög
("ssl_verify_depth"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_num_¶Ÿ
,

154 
NGX_HTTP_SRV_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify_dïth
),

156 
NULL
 },

158 { 
ngx_°rög
("ssl_client_certificate"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

160 
ngx_c⁄f_£t_°r_¶Ÿ
,

161 
NGX_HTTP_SRV_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

163 
NULL
 },

165 { 
ngx_°rög
("ssl_trusted_certificate"),

166 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

167 
ngx_c⁄f_£t_°r_¶Ÿ
,

168 
NGX_HTTP_SRV_CONF_OFFSET
,

169 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
åu°ed_˚πifiˇã
),

170 
NULL
 },

172 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

173 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

174 
ngx_c⁄f_£t_Êag_¶Ÿ
,

175 
NGX_HTTP_SRV_CONF_OFFSET
,

176 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

177 
NULL
 },

179 { 
ngx_°rög
("ssl_session_cache"),

180 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE12
,

181 
ngx_hâp_s¶_£ssi⁄_ˇche
,

182 
NGX_HTTP_SRV_CONF_OFFSET
,

184 
NULL
 },

186 { 
ngx_°rög
("ssl_session_tickets"),

187 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

188 
ngx_c⁄f_£t_Êag_¶Ÿ
,

189 
NGX_HTTP_SRV_CONF_OFFSET
,

190 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_tickës
),

191 
NULL
 },

193 { 
ngx_°rög
("ssl_session_ticket_key"),

194 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

195 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

196 
NGX_HTTP_SRV_CONF_OFFSET
,

197 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_tickë_keys
),

198 
NULL
 },

200 { 
ngx_°rög
("ssl_session_timeout"),

201 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

202 
ngx_c⁄f_£t_£c_¶Ÿ
,

203 
NGX_HTTP_SRV_CONF_OFFSET
,

204 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_timeout
),

205 
NULL
 },

207 { 
ngx_°rög
("ssl_crl"),

208 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

209 
ngx_c⁄f_£t_°r_¶Ÿ
,

210 
NGX_HTTP_SRV_CONF_OFFSET
,

211 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¸l
),

212 
NULL
 },

214 { 
ngx_°rög
("ssl_stapling"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

216 
ngx_c⁄f_£t_Êag_¶Ÿ
,

217 
NGX_HTTP_SRV_CONF_OFFSET
,

218 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög
),

219 
NULL
 },

221 { 
ngx_°rög
("ssl_stapling_file"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_c⁄f_£t_°r_¶Ÿ
,

224 
NGX_HTTP_SRV_CONF_OFFSET
,

225 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_fûe
),

226 
NULL
 },

228 { 
ngx_°rög
("ssl_stapling_responder"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

230 
ngx_c⁄f_£t_°r_¶Ÿ
,

231 
NGX_HTTP_SRV_CONF_OFFSET
,

232 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_ª•⁄dî
),

233 
NULL
 },

235 { 
ngx_°rög
("ssl_stapling_verify"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

237 
ngx_c⁄f_£t_Êag_¶Ÿ
,

238 
NGX_HTTP_SRV_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_vîify
),

240 
NULL
 },

242 
ngx_nuŒ_comm™d


246 
ngx_hâp_moduÀ_t
 
	gngx_hâp_s¶_moduÀ_˘x
 = {

247 
ngx_hâp_s¶_add_v¨übÀs
,

248 
ngx_hâp_s¶_öô
,

250 
NULL
,

251 
NULL
,

253 
ngx_hâp_s¶_¸óã_§v_c⁄f
,

254 
ngx_hâp_s¶_mîge_§v_c⁄f
,

256 
NULL
,

257 
NULL


261 
ngx_moduÀ_t
 
	gngx_hâp_s¶_moduÀ
 = {

262 
NGX_MODULE_V1
,

263 &
ngx_hâp_s¶_moduÀ_˘x
,

264 
ngx_hâp_s¶_comm™ds
,

265 
NGX_HTTP_MODULE
,

266 
NULL
,

267 
NULL
,

268 
NULL
,

269 
NULL
,

270 
NULL
,

271 
NULL
,

272 
NULL
,

273 
NGX_MODULE_V1_PADDING


277 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_s¶_v¨s
[] = {

279 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

280 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

282 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

283 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

285 { 
ngx_°rög
("s¶_cùhîs"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

286 (
uöçå_t
Ë
ngx_s¶_gë_cùhîs
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

288 { 
ngx_°rög
("s¶_curves"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

289 (
uöçå_t
Ë
ngx_s¶_gë_curves
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

291 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

292 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

294 { 
ngx_°rög
("s¶_£ssi⁄_ªu£d"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

295 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_ªu£d
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

297 { 
ngx_°rög
("s¶_£rvî_«me"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

298 (
uöçå_t
Ë
ngx_s¶_gë_£rvî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

300 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

301 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

303 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

304 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

305 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

307 { 
ngx_°rög
("s¶_˛õ¡_esˇ≥d_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

308 (
uöçå_t
Ë
ngx_s¶_gë_esˇ≥d_˚πifiˇã
,

309 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

311 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

312 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

314 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

315 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

317 { 
ngx_°rög
("s¶_˛õ¡_s_dn_Àgacy"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

318 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn_Àgacy
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

320 { 
ngx_°rög
("s¶_˛õ¡_i_dn_Àgacy"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

321 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn_Àgacy
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

323 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

324 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

326 { 
ngx_°rög
("s¶_˛õ¡_fögî¥öt"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

327 (
uöçå_t
Ë
ngx_s¶_gë_fögî¥öt
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

329 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

330 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

332 { 
ngx_°rög
("s¶_˛õ¡_v_°¨t"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

333 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_v_°¨t
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

335 { 
ngx_°rög
("s¶_˛õ¡_v_íd"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

336 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_v_íd
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

338 { 
ngx_°rög
("s¶_˛õ¡_v_ªmaö"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

339 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_v_ªmaö
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

341 
ngx_hâp_nuŒ_v¨übÀ


345 
ngx_°r_t
 
	gngx_hâp_s¶_£ss_id_˘x
 = 
ngx_°rög
("HTTP");

348 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


351 
	$ngx_hâp_s¶_Æ≤_£À˘
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, c⁄° **
out
,

352 *
ouéí
, c⁄° *
ö
, 
öÀn
,

353 *
¨g
)

355 
§vÀn
;

356 *
§v
;

357 #i‡(
NGX_DEBUG
)

358 
i
;

360 #i‡(
NGX_HTTP_V2
)

361 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

363 #i‡(
NGX_HTTP_V2
 || 
NGX_DEBUG
)

364 
ngx_c⁄√˘i⁄_t
 *
c
;

366 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

369 #i‡(
NGX_DEBUG
)

370 
i
 = 0; i < 
öÀn
; i +
ö
[i] + 1) {

371 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

373 (
size_t
Ë
ö
[
i
], &in[i + 1]);

377 #i‡(
NGX_HTTP_V2
)

378 
hc
 = 
c
->
d©a
;

380 i‡(
hc
->
addr_c⁄f
->
hâp2
) {

381 
§v
 =

382 (*Ë
NGX_HTTP_V2_ALPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

383 
§vÀn
 = (
NGX_HTTP_V2_ALPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

388 
§v
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

389 
§vÀn
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

392 i‡(
	`SSL_£À˘_√xt_¥Ÿo
((**Ë
out
, 
ouéí
, 
§v
, 
§vÀn
,

393 
ö
, 
öÀn
)

394 !
OPENSSL_NPN_NEGOTIATED
)

396  
SSL_TLSEXT_ERR_NOACK
;

399 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

400 "SSL ALPN sñe˘ed: %*s", (
size_t
Ë*
ouéí
, *
out
);

402  
SSL_TLSEXT_ERR_OK
;

403 
	}
}

408 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


411 
	$ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

412 c⁄° **
out
, *
ouéí
, *
¨g
)

414 #i‡(
NGX_HTTP_V2
 || 
NGX_DEBUG
)

415 
ngx_c⁄√˘i⁄_t
 *
c
;

417 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

418 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "SSL NPNádvertised");

421 #i‡(
NGX_HTTP_V2
)

423 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

425 
hc
 = 
c
->
d©a
;

427 i‡(
hc
->
addr_c⁄f
->
hâp2
) {

428 *
out
 =

429 (*Ë
NGX_HTTP_V2_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

430 *
ouéí
 = (
NGX_HTTP_V2_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

432  
SSL_TLSEXT_ERR_OK
;

437 *
out
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

438 *
ouéí
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

440  
SSL_TLSEXT_ERR_OK
;

441 
	}
}

446 
ngx_öt_t


447 
	$ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

448 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

450 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

452 
size_t
 
Àn
;

453 
ngx_°r_t
 
s
;

455 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

457 (Ë
	`h™dÀr
(
r
->
c⁄√˘i⁄
, 
NULL
, &
s
);

459 
v
->
d©a
 = 
s
.data;

461 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

463 
v
->
Àn
 =Üen;

464 
v
->
vÆid
 = 1;

465 
v
->
no_ˇchóbÀ
 = 0;

466 
v
->
nŸ_found
 = 0;

468  
NGX_OK
;

471 
v
->
nŸ_found
 = 1;

473  
NGX_OK
;

474 
	}
}

477 
ngx_öt_t


478 
	$ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

479 
uöçå_t
 
d©a
)

481 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

483 
ngx_°r_t
 
s
;

485 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

487 i‡(
	`h™dÀr
(
r
->
c⁄√˘i⁄
,Ñ->
poﬁ
, &
s
Ë!
NGX_OK
) {

488  
NGX_ERROR
;

491 
v
->
Àn
 = 
s
.len;

492 
v
->
d©a
 = 
s
.data;

494 i‡(
v
->
Àn
) {

495 
v
->
vÆid
 = 1;

496 
v
->
no_ˇchóbÀ
 = 0;

497 
v
->
nŸ_found
 = 0;

499  
NGX_OK
;

503 
v
->
nŸ_found
 = 1;

505  
NGX_OK
;

506 
	}
}

509 
ngx_öt_t


510 
	$ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

512 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

514 
v
 = 
ngx_hâp_s¶_v¨s
; v->
«me
.
Àn
; v++) {

515 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

516 i‡(
v¨
 =
NULL
) {

517  
NGX_ERROR
;

520 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

521 
v¨
->
d©a
 = 
v
->data;

524  
NGX_OK
;

525 
	}
}

529 
	$ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

531 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

533 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_s¶_§v_c⁄f_t
));

534 i‡(
sscf
 =
NULL
) {

535  
NULL
;

553 
sscf
->
íabÀ
 = 
NGX_CONF_UNSET
;

554 
sscf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

555 
sscf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

556 
sscf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

557 
sscf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

558 
sscf
->
˚πifiˇãs
 = 
NGX_CONF_UNSET_PTR
;

559 
sscf
->
˚πifiˇã_keys
 = 
NGX_CONF_UNSET_PTR
;

560 
sscf
->
∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

561 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

562 
sscf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

563 
sscf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

564 
sscf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

565 
sscf
->
°≠lög
 = 
NGX_CONF_UNSET
;

566 
sscf
->
°≠lög_vîify
 = 
NGX_CONF_UNSET
;

568  
sscf
;

569 
	}
}

573 
	$ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

575 
ngx_hâp_s¶_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

576 
ngx_hâp_s¶_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

578 
ngx_poﬁ_˛ónup_t
 *
˛n
;

580 i‡(
c⁄f
->
íabÀ
 =
NGX_CONF_UNSET
) {

581 i‡(
¥ev
->
íabÀ
 =
NGX_CONF_UNSET
) {

582 
c⁄f
->
íabÀ
 = 0;

585 
c⁄f
->
íabÀ
 = 
¥ev
->enable;

586 
c⁄f
->
fûe
 = 
¥ev
->file;

587 
c⁄f
->
löe
 = 
¥ev
->line;

591 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

592 
¥ev
->
£ssi⁄_timeout
, 300);

594 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

595 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

597 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

598 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


599 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

601 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

602 
NGX_SSL_BUFSIZE
);

604 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

605 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

607 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
˚πifiˇãs
, 
¥ev
->˚πifiˇãs, 
NULL
);

608 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
˚πifiˇã_keys
, 
¥ev
->certificate_keys,

609 
NULL
);

611 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
∑ssw‹ds
, 
¥ev
->∑ssw‹ds, 
NULL
);

613 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

615 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

617 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

618 
¥ev
->
åu°ed_˚πifiˇã
, "");

619 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

621 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

622 
NGX_DEFAULT_ECDH_CURVE
);

624 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

626 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög
, 
¥ev
->stapling, 0);

627 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög_vîify
, 
¥ev
->stapling_verify, 0);

628 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_fûe
, 
¥ev
->stapling_file, "");

629 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_ª•⁄dî
,

630 
¥ev
->
°≠lög_ª•⁄dî
, "");

632 
c⁄f
->
s¶
.
log
 = 
cf
->log;

634 i‡(
c⁄f
->
íabÀ
) {

636 i‡(
c⁄f
->
˚πifiˇãs
 =
NULL
) {

637 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

640 
c⁄f
->
fûe
, c⁄f->
löe
);

641  
NGX_CONF_ERROR
;

644 i‡(
c⁄f
->
˚πifiˇã_keys
 =
NULL
) {

645 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

648 
c⁄f
->
fûe
, c⁄f->
löe
);

649  
NGX_CONF_ERROR
;

652 i‡(
c⁄f
->
˚πifiˇã_keys
->
√…s
 < c⁄f->
˚πifiˇãs
->nelts) {

653 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

657 ((
ngx_°r_t
 *Ë
c⁄f
->
˚πifiˇãs
->
ñts
)

658 + 
c⁄f
->
˚πifiˇãs
->
√…s
 - 1,

659 
c⁄f
->
fûe
, c⁄f->
löe
);

660  
NGX_CONF_ERROR
;

665 i‡(
c⁄f
->
˚πifiˇãs
 =
NULL
) {

666  
NGX_CONF_OK
;

669 i‡(
c⁄f
->
˚πifiˇã_keys
 =
NULL


670 || 
c⁄f
->
˚πifiˇã_keys
->
√…s
 < c⁄f->
˚πifiˇãs
->nelts)

672 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

675 ((
ngx_°r_t
 *Ë
c⁄f
->
˚πifiˇãs
->
ñts
)

676 + 
c⁄f
->
˚πifiˇãs
->
√…s
 - 1);

677  
NGX_CONF_ERROR
;

681 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, c⁄fË!
NGX_OK
) {

682  
NGX_CONF_ERROR
;

685 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


687 i‡(
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
c⁄f
->
s¶
.
˘x
,

688 
ngx_hâp_s¶_£rvî«me
)

691 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

699 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


700 
	`SSL_CTX_£t_Æ≤_£À˘_cb
(
c⁄f
->
s¶
.
˘x
, 
ngx_hâp_s¶_Æ≤_£À˘
, 
NULL
);

703 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


704 
	`SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
c⁄f
->
s¶
.
˘x
,

705 
ngx_hâp_s¶_≈n_advîti£d
, 
NULL
);

708 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

709 i‡(
˛n
 =
NULL
) {

710  
NGX_CONF_ERROR
;

713 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

714 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

716 i‡(
	`ngx_s¶_˚πifiˇãs
(
cf
, &
c⁄f
->
s¶
, c⁄f->
˚πifiˇãs
,

717 
c⁄f
->
˚πifiˇã_keys
, c⁄f->
∑ssw‹ds
)

718 !
NGX_OK
)

720  
NGX_CONF_ERROR
;

723 i‡(
	`ngx_s¶_cùhîs
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
cùhîs
,

724 
c⁄f
->
¥e„r_£rvî_cùhîs
)

725 !
NGX_OK
)

727  
NGX_CONF_ERROR
;

730 
c⁄f
->
s¶
.
buf„r_size
 = conf->buffer_size;

732 i‡(
c⁄f
->
vîify
) {

734 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

735 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

737  
NGX_CONF_ERROR
;

740 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

741 &
c⁄f
->
˛õ¡_˚πifiˇã
,

742 
c⁄f
->
vîify_dïth
)

743 !
NGX_OK
)

745  
NGX_CONF_ERROR
;

749 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

750 &
c⁄f
->
åu°ed_˚πifiˇã
,

751 
c⁄f
->
vîify_dïth
)

752 !
NGX_OK
)

754  
NGX_CONF_ERROR
;

757 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

758  
NGX_CONF_ERROR
;

761 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

762  
NGX_CONF_ERROR
;

765 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

766  
NGX_CONF_ERROR
;

769 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

770 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

772 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

773 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

776 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_hâp_s¶_£ss_id_˘x
,

777 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

778 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

779 !
NGX_OK
)

781  
NGX_CONF_ERROR
;

784 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
, 
¥ev
->session_tickets, 1);

786 #ifde‡
SSL_OP_NO_TICKET


787 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

788 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

792 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

793 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

795 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

796 !
NGX_OK
)

798  
NGX_CONF_ERROR
;

801 i‡(
c⁄f
->
°≠lög
) {

803 i‡(
	`ngx_s¶_°≠lög
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
°≠lög_fûe
,

804 &
c⁄f
->
°≠lög_ª•⁄dî
, c⁄f->
°≠lög_vîify
)

805 !
NGX_OK
)

807  
NGX_CONF_ERROR
;

812  
NGX_CONF_OK
;

813 
	}
}

817 
	$ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

819 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

821 *
rv
;

823 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

825 i‡(
rv
 !
NGX_CONF_OK
) {

826  
rv
;

829 
sscf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

830 
sscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

832  
NGX_CONF_OK
;

833 
	}
}

837 
	$ngx_hâp_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

839 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

841 
ngx_°r_t
 *
vÆue
;

843 i‡(
sscf
->
∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

847 
vÆue
 = 
cf
->
¨gs
->
ñts
;

849 
sscf
->
∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

851 i‡(
sscf
->
∑ssw‹ds
 =
NULL
) {

852  
NGX_CONF_ERROR
;

855  
NGX_CONF_OK
;

856 
	}
}

860 
	$ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

862 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

864 
size_t
 
Àn
;

865 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

866 
ngx_öt_t
 
n
;

867 
ngx_uöt_t
 
i
, 
j
;

869 
vÆue
 = 
cf
->
¨gs
->
ñts
;

871 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

873 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

874 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

878 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

879 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

883 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

884 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

888 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

889 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

892 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

893 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

895 i‡(
n
 =
NGX_ERROR
) {

896 
övÆid
;

899 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

904 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

905 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

908 
Àn
 = 0;

910 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

911 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

915 
Àn
++;

918 i‡(
Àn
 == 0) {

919 
övÆid
;

922 
«me
.
Àn
 =Üen;

923 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

925 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

926 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

928 
n
 = 
	`ngx_∑r£_size
(&
size
);

930 i‡(
n
 =
NGX_ERROR
) {

931 
övÆid
;

934 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

935 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

937 &
vÆue
[
i
]);

939  
NGX_CONF_ERROR
;

942 
sscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

943 &
ngx_hâp_s¶_moduÀ
);

944 i‡(
sscf
->
shm_z⁄e
 =
NULL
) {

945  
NGX_CONF_ERROR
;

948 
sscf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

953 
övÆid
;

956 i‡(
sscf
->
shm_z⁄e
 && sscf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

957 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

960  
NGX_CONF_OK
;

962 
övÆid
:

964 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

965 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

967  
NGX_CONF_ERROR
;

968 
	}
}

971 
ngx_öt_t


972 
	$ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
)

974 
ngx_uöt_t
 
a
, 
p
, 
s
;

975 
ngx_hâp_c⁄f_addr_t
 *
addr
;

976 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

977 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

978 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

979 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
, *
cscf
;

980 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

982 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

983 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

985 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

987 
sscf
 = 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
ngx_hâp_s¶_moduÀ
.
˘x_ödex
];

989 i‡(
sscf
->
s¶
.
˘x
 =
NULL
 || !sscf->
°≠lög
) {

993 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

995 i‡(
	`ngx_s¶_°≠lög_ªsﬁvî
(
cf
, &
sscf
->
s¶
, 
˛cf
->
ªsﬁvî
,

996 
˛cf
->
ªsﬁvî_timeout
)

997 !
NGX_OK
)

999  
NGX_ERROR
;

1003 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1004  
NGX_OK
;

1007 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1008 
p
 = 0;Ö < 
cmcf
->
p‹ts
->
√…s
;Ö++) {

1010 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1011 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1013 i‡(!
addr
[
a
].
›t
.
s¶
) {

1017 
cscf
 = 
addr
[
a
].
deÁu…_£rvî
;

1018 
sscf
 = 
cscf
->
˘x
->
§v_c⁄f
[
ngx_hâp_s¶_moduÀ
.
˘x_ödex
];

1020 i‡(
sscf
->
˚πifiˇãs
 =
NULL
) {

1021 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1024 
cscf
->
fûe_«me
, cscf->
löe
);

1025  
NGX_ERROR
;

1030  
NGX_OK
;

1031 
	}
}

	@src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
size_t
 
	mbuf„r_size
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_¨øy_t
 *
	m˚πifiˇãs
;

36 
ngx_¨øy_t
 *
	m˚πifiˇã_keys
;

38 
ngx_°r_t
 
	mdh∑øm
;

39 
ngx_°r_t
 
	mecdh_curve
;

40 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

41 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

42 
ngx_°r_t
 
	m¸l
;

44 
ngx_°r_t
 
	mcùhîs
;

46 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

48 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

50 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

51 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

53 
ngx_Êag_t
 
	m°≠lög
;

54 
ngx_Êag_t
 
	m°≠lög_vîify
;

55 
ngx_°r_t
 
	m°≠lög_fûe
;

56 
ngx_°r_t
 
	m°≠lög_ª•⁄dî
;

58 
u_ch¨
 *
	mfûe
;

59 
ngx_uöt_t
 
	mlöe
;

60 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

63 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@src/http/modules/ngx_http_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

17 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ_˘x
 = {

18 
NULL
,

19 
ngx_hâp_°©ic_öô
,

21 
NULL
,

22 
NULL
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL


32 
ngx_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 &
ngx_hâp_°©ic_moduÀ_˘x
,

35 
NULL
,

36 
NGX_HTTP_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


48 
ngx_öt_t


49 
	$ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

51 
u_ch¨
 *
œ°
, *
loˇti⁄
;

52 
size_t
 
roŸ
, 
Àn
;

53 
ngx_°r_t
 
∑th
;

54 
ngx_öt_t
 
rc
;

55 
ngx_uöt_t
 
Àvñ
;

56 
ngx_log_t
 *
log
;

57 
ngx_buf_t
 *
b
;

58 
ngx_chaö_t
 
out
;

59 
ngx_›í_fûe_öfo_t
 
of
;

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

62 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

63  
NGX_HTTP_NOT_ALLOWED
;

66 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

67  
NGX_DECLINED
;

70 
log
 = 
r
->
c⁄√˘i⁄
->log;

77 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

78 i‡(
œ°
 =
NULL
) {

79  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

82 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

84 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

85 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

87 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

89 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

91 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

92 
of
.
dúe˘io
 = 
˛cf
->directio;

93 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

94 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

95 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

96 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

98 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

99  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

102 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

103 !
NGX_OK
)

105 
of
.
îr
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

110 
NGX_ENOENT
:

111 
NGX_ENOTDIR
:

112 
NGX_ENAMETOOLONG
:

114 
Àvñ
 = 
NGX_LOG_ERR
;

115 
rc
 = 
NGX_HTTP_NOT_FOUND
;

118 
NGX_EACCES
:

119 #i‡(
NGX_HAVE_OPENAT
)

120 
NGX_EMLINK
:

121 
NGX_ELOOP
:

124 
Àvñ
 = 
NGX_LOG_ERR
;

125 
rc
 = 
NGX_HTTP_FORBIDDEN
;

130 
Àvñ
 = 
NGX_LOG_CRIT
;

131 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

135 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

136 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

137 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

140  
rc
;

143 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

145 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

147 i‡(
of
.
is_dú
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

151 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

153 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

154 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

155  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
Àn
 = 
r
->
uri
.len + 1;

160 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
 && 
r
->
¨gs
.
Àn
 == 0) {

161 
loˇti⁄
 = 
∑th
.
d©a
 + 
˛cf
->
roŸ
.
Àn
;

163 *
œ°
 = '/';

166 i‡(
r
->
¨gs
.
Àn
) {

167 
Àn
 +
r
->
¨gs
.len + 1;

170 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

171 i‡(
loˇti⁄
 =
NULL
) {

172 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 
œ°
 = 
	`ngx_c›y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

178 *
œ°
 = '/';

180 i‡(
r
->
¨gs
.
Àn
) {

181 *++
œ°
 = '?';

182 
	`ngx_mem˝y
(++
œ°
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

186 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

187 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

188 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

189 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

191  
NGX_HTTP_MOVED_PERMANENTLY
;

194 #i‡!(
NGX_WIN32
)

196 i‡(!
of
.
is_fûe
) {

197 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

198 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

200  
NGX_HTTP_NOT_FOUND
;

205 i‡(
r
->
mëhod
 =
NGX_HTTP_POST
) {

206  
NGX_HTTP_NOT_ALLOWED
;

209 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

211 i‡(
rc
 !
NGX_OK
) {

212  
rc
;

215 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

217 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

218 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

219 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

221 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

222  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

225 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

226  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

229 i‡(
r
 !r->
maö
 && 
of
.
size
 == 0) {

230  
	`ngx_hâp_£nd_hódî
(
r
);

233 
r
->
Ælow_ønges
 = 1;

237 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

238 i‡(
b
 =
NULL
) {

239  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

242 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

243 i‡(
b
->
fûe
 =
NULL
) {

244  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

247 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

249 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

250  
rc
;

253 
b
->
fûe_pos
 = 0;

254 
b
->
fûe_œ°
 = 
of
.
size
;

256 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

257 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

258 
b
->
œ°_ö_chaö
 = 1;

260 
b
->
fûe
->
fd
 = 
of
.fd;

261 
b
->
fûe
->
«me
 = 
∑th
;

262 
b
->
fûe
->
log
 =Üog;

263 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

265 
out
.
buf
 = 
b
;

266 
out
.
√xt
 = 
NULL
;

268  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

275 
ngx_hâp_h™dÀr_±
 *
h
;

276 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

278 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

280 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

281 i‡(
h
 =
NULL
) {

282  
NGX_ERROR
;

285 *
h
 = 
ngx_hâp_°©ic_h™dÀr
;

287  
NGX_OK
;

288 
	}
}

	@src/http/modules/ngx_http_stub_status_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°ub_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_öt_t
 
ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

17 *
ngx_hâp_£t_°ub_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

18 *
c⁄f
);

21 
ngx_comm™d_t
 
	gngx_hâp_°©us_comm™ds
[] = {

23 { 
ngx_°rög
("stub_status"),

24 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
|
NGX_CONF_TAKE1
,

25 
ngx_hâp_£t_°ub_°©us
,

28 
NULL
 },

30 
ngx_nuŒ_comm™d


34 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ_˘x
 = {

35 
ngx_hâp_°ub_°©us_add_v¨übÀs
,

36 
NULL
,

38 
NULL
,

39 
NULL
,

41 
NULL
,

42 
NULL
,

44 
NULL
,

45 
NULL


49 
ngx_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ
 = {

50 
NGX_MODULE_V1
,

51 &
ngx_hâp_°ub_°©us_moduÀ_˘x
,

52 
ngx_hâp_°©us_comm™ds
,

53 
NGX_HTTP_MODULE
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NGX_MODULE_V1_PADDING


65 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_°ub_°©us_v¨s
[] = {

67 { 
ngx_°rög
("c⁄√˘i⁄s_a˘ive"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

68 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

70 { 
ngx_°rög
("c⁄√˘i⁄s_ªadög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

71 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

73 { 
ngx_°rög
("c⁄√˘i⁄s_wrôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

74 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

76 { 
ngx_°rög
("c⁄√˘i⁄s_waôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

77 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

79 
ngx_hâp_nuŒ_v¨übÀ


83 
ngx_öt_t


84 
	$ngx_hâp_°ub_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

86 
size_t
 
size
;

87 
ngx_öt_t
 
rc
;

88 
ngx_buf_t
 *
b
;

89 
ngx_chaö_t
 
out
;

90 
ngx_©omic_öt_t
 
≠
, 
hn
, 
ac
, 
rq
, 
rd
, 
wr
, 
wa
;

92 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

93  
NGX_HTTP_NOT_ALLOWED
;

96 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

98 i‡(
rc
 !
NGX_OK
) {

99  
rc
;

102 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/plain") - 1;

103 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

104 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

106 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

107 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

109 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

111 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

112  
rc
;

116 
size
 = ("A˘ivêc⁄√˘i⁄s: \n"Ë+ 
NGX_ATOMIC_T_LEN


118 + 6 + 3 * 
NGX_ATOMIC_T_LEN


119 + ("Ródög: Wrôög: Waôög: \n"Ë+ 3 * 
NGX_ATOMIC_T_LEN
;

121 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

122 i‡(
b
 =
NULL
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

126 
out
.
buf
 = 
b
;

127 
out
.
√xt
 = 
NULL
;

129 
≠
 = *
ngx_°©_ac˚±ed
;

130 
hn
 = *
ngx_°©_h™dÀd
;

131 
ac
 = *
ngx_°©_a˘ive
;

132 
rq
 = *
ngx_°©_ªque°s
;

133 
rd
 = *
ngx_°©_ªadög
;

134 
wr
 = *
ngx_°©_wrôög
;

135 
wa
 = *
ngx_°©_waôög
;

137 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "A˘ivêc⁄√˘i⁄s: %uA \n", 
ac
);

139 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "serveráccepts handledÑequests\n",

142 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %uA %uA %uA \n", 
≠
, 
hn
, 
rq
);

144 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",

145 
rd
, 
wr
, 
wa
);

147 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

148 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

150 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

151 
b
->
œ°_ö_chaö
 = 1;

153 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

155 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

156  
rc
;

159  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

160 
	}
}

163 
ngx_öt_t


164 
	$ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

165 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

167 
u_ch¨
 *
p
;

168 
ngx_©omic_öt_t
 
vÆue
;

170 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

171 i‡(
p
 =
NULL
) {

172  
NGX_ERROR
;

175 
d©a
) {

177 
vÆue
 = *
ngx_°©_a˘ive
;

181 
vÆue
 = *
ngx_°©_ªadög
;

185 
vÆue
 = *
ngx_°©_wrôög
;

189 
vÆue
 = *
ngx_°©_waôög
;

194 
vÆue
 = 0;

198 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
vÆue
) -Ö;

199 
v
->
vÆid
 = 1;

200 
v
->
no_ˇchóbÀ
 = 0;

201 
v
->
nŸ_found
 = 0;

202 
v
->
d©a
 = 
p
;

204  
NGX_OK
;

205 
	}
}

208 
ngx_öt_t


209 
	$ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

211 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

213 
v
 = 
ngx_hâp_°ub_°©us_v¨s
; v->
«me
.
Àn
; v++) {

214 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

215 i‡(
v¨
 =
NULL
) {

216  
NGX_ERROR
;

219 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

220 
v¨
->
d©a
 = 
v
->data;

223  
NGX_OK
;

224 
	}
}

228 
	$ngx_hâp_£t_°ub_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

230 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

232 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

233 
˛cf
->
h™dÀr
 = 
ngx_hâp_°ub_°©us_h™dÀr
;

235  
NGX_CONF_OK
;

236 
	}
}

	@src/http/modules/ngx_http_sub_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_com∂ex_vÆue_t
 
	mm©ch
;

15 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_sub_∑ú_t
;

20 
ngx_°r_t
 
	mm©ch
;

21 
ngx_hâp_com∂ex_vÆue_t
 *
	mvÆue
;

22 } 
	tngx_hâp_sub_m©ch_t
;

26 
ngx_uöt_t
 
	mmö_m©ch_Àn
;

27 
ngx_uöt_t
 
	mmax_m©ch_Àn
;

29 
u_ch¨
 
	mödex
[257];

30 
u_ch¨
 
	mshi·
[256];

31 } 
	tngx_hâp_sub_èbÀs_t
;

35 
ngx_uöt_t
 
	mdy«mic
;

37 
ngx_¨øy_t
 *
	m∑ús
;

39 
ngx_hâp_sub_èbÀs_t
 *
	mèbÀs
;

41 
ngx_hash_t
 
	mty≥s
;

43 
ngx_Êag_t
 
	m⁄˚
;

44 
ngx_Êag_t
 
	mœ°_modifõd
;

46 
ngx_¨øy_t
 *
	mty≥s_keys
;

47 
ngx_¨øy_t
 *
	mm©ches
;

48 } 
	tngx_hâp_sub_loc_c⁄f_t
;

52 
ngx_°r_t
 
	mßved
;

53 
ngx_°r_t
 
	mlooked
;

55 
ngx_uöt_t
 
	m⁄˚
;

57 
ngx_buf_t
 *
	mbuf
;

59 
u_ch¨
 *
	mpos
;

60 
u_ch¨
 *
	mc›y_°¨t
;

61 
u_ch¨
 *
	mc›y_íd
;

63 
ngx_chaö_t
 *
	mö
;

64 
ngx_chaö_t
 *
	mout
;

65 
ngx_chaö_t
 **
	mœ°_out
;

66 
ngx_chaö_t
 *
	mbusy
;

67 
ngx_chaö_t
 *
	m‰ì
;

69 
ngx_°r_t
 *
	msub
;

70 
ngx_uöt_t
 
	m≠∂õd
;

72 
ngx_öt_t
 
	moff£t
;

73 
ngx_uöt_t
 
	mödex
;

75 
ngx_hâp_sub_èbÀs_t
 *
	mèbÀs
;

76 
ngx_¨øy_t
 *
	mm©ches
;

77 } 
	tngx_hâp_sub_˘x_t
;

80 
ngx_uöt_t
 
	gngx_hâp_sub_cmp_ödex
;

83 
ngx_öt_t
 
ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_sub_˘x_t
 *
˘x
);

85 
ngx_öt_t
 
ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_sub_˘x_t
 *
˘x
, 
ngx_uöt_t
 
Êush
);

87 
ngx_öt_t
 
ngx_hâp_sub_m©ch
(
ngx_hâp_sub_˘x_t
 *
˘x
,Çgx_öt_à
°¨t
,

88 
ngx_°r_t
 *
m
);

90 * 
ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

91 *
c⁄f
);

92 *
ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

93 *
ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

94 *
∑ª¡
, *
chûd
);

95 
ngx_hâp_sub_öô_èbÀs
(
ngx_hâp_sub_èbÀs_t
 *
èbÀs
,

96 
ngx_hâp_sub_m©ch_t
 *
m©ch
, 
ngx_uöt_t
 
n
);

97 
ngx_öt_t
 
ngx_hâp_sub_cmp_m©ches
(c⁄° *
⁄e
, c⁄° *
two
);

98 
ngx_öt_t
 
ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

101 
ngx_comm™d_t
 
	gngx_hâp_sub_fûãr_comm™ds
[] = {

103 { 
ngx_°rög
("sub_filter"),

104 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

105 
ngx_hâp_sub_fûãr
,

106 
NGX_HTTP_LOC_CONF_OFFSET
,

108 
NULL
 },

110 { 
ngx_°rög
("sub_filter_types"),

111 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

112 
ngx_hâp_ty≥s_¶Ÿ
,

113 
NGX_HTTP_LOC_CONF_OFFSET
,

114 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
ty≥s_keys
),

115 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

117 { 
ngx_°rög
("sub_filter_once"),

118 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

119 
ngx_c⁄f_£t_Êag_¶Ÿ
,

120 
NGX_HTTP_LOC_CONF_OFFSET
,

121 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
⁄˚
),

122 
NULL
 },

124 { 
ngx_°rög
("sub_filter_last_modified"),

125 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

126 
ngx_c⁄f_£t_Êag_¶Ÿ
,

127 
NGX_HTTP_LOC_CONF_OFFSET
,

128 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
œ°_modifõd
),

129 
NULL
 },

131 
ngx_nuŒ_comm™d


135 
ngx_hâp_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ_˘x
 = {

136 
NULL
,

137 
ngx_hâp_sub_fûãr_öô
,

139 
NULL
,

140 
NULL
,

142 
NULL
,

143 
NULL
,

145 
ngx_hâp_sub_¸óã_c⁄f
,

146 
ngx_hâp_sub_mîge_c⁄f


150 
ngx_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ
 = {

151 
NGX_MODULE_V1
,

152 &
ngx_hâp_sub_fûãr_moduÀ_˘x
,

153 
ngx_hâp_sub_fûãr_comm™ds
,

154 
NGX_HTTP_MODULE
,

155 
NULL
,

156 
NULL
,

157 
NULL
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NGX_MODULE_V1_PADDING


166 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

167 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

170 
ngx_öt_t


171 
	$ngx_hâp_sub_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

173 
ngx_°r_t
 *
m
;

174 
ngx_uöt_t
 
i
, 
j
, 
n
;

175 
ngx_hâp_sub_˘x_t
 *
˘x
;

176 
ngx_hâp_sub_∑ú_t
 *
∑ús
;

177 
ngx_hâp_sub_m©ch_t
 *
m©ches
;

178 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

180 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

182 i‡(
¶cf
->
∑ús
 =
NULL


183 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

184 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

186  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

189 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_˘x_t
));

190 i‡(
˘x
 =
NULL
) {

191  
NGX_ERROR
;

194 i‡(
¶cf
->
dy«mic
 == 0) {

195 
˘x
->
èbÀs
 = 
¶cf
->tables;

196 
˘x
->
m©ches
 = 
¶cf
->matches;

199 
∑ús
 = 
¶cf
->∑ús->
ñts
;

200 
n
 = 
¶cf
->
∑ús
->
√…s
;

202 
m©ches
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_m©ch_t
Ë* 
n
);

203 i‡(
m©ches
 =
NULL
) {

204  
NGX_ERROR
;

207 
j
 = 0;

208 
i
 = 0; i < 
n
; i++) {

209 
m©ches
[
j
].
vÆue
 = &
∑ús
[
i
].value;

211 i‡(
∑ús
[
i
].
m©ch
.
Àngths
 =
NULL
) {

212 
m©ches
[
j
].
m©ch
 = 
∑ús
[
i
].m©ch.
vÆue
;

213 
j
++;

217 
m
 = &
m©ches
[
j
].
m©ch
;

218 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑ús
[
i
].
m©ch
, 
m
Ë!
NGX_OK
) {

219  
NGX_ERROR
;

222 i‡(
m
->
Àn
 == 0) {

226 
	`ngx_°æow
(
m
->
d©a
, m->d©a, m->
Àn
);

227 
j
++;

230 i‡(
j
 == 0) {

231  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

234 
˘x
->
m©ches
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_¨øy_t
));

235 i‡(
˘x
->
m©ches
 =
NULL
) {

236  
NGX_ERROR
;

239 
˘x
->
m©ches
->
ñts
 = matches;

240 
˘x
->
m©ches
->
√…s
 = 
j
;

242 
˘x
->
èbÀs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_sub_èbÀs_t
));

243 i‡(
˘x
->
èbÀs
 =
NULL
) {

244  
NGX_ERROR
;

247 
	`ngx_hâp_sub_öô_èbÀs
(
˘x
->
èbÀs
, ctx->
m©ches
->
ñts
,

248 
˘x
->
m©ches
->
√…s
);

251 
˘x
->
ßved
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ctx->
èbÀs
->
max_m©ch_Àn
 - 1);

252 i‡(
˘x
->
ßved
.
d©a
 =
NULL
) {

253  
NGX_ERROR
;

256 
˘x
->
looked
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ctx->
èbÀs
->
max_m©ch_Àn
 - 1);

257 i‡(
˘x
->
looked
.
d©a
 =
NULL
) {

258  
NGX_ERROR
;

261 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_sub_fûãr_moduÀ
);

263 
˘x
->
off£t
 = ctx->
èbÀs
->
mö_m©ch_Àn
 - 1;

264 
˘x
->
œ°_out
 = &˘x->
out
;

266 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

268 i‡(
r
 =r->
maö
) {

269 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

271 i‡(!
¶cf
->
œ°_modifõd
) {

272 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

273 
	`ngx_hâp_˛ór_ëag
(
r
);

276 
	`ngx_hâp_wók_ëag
(
r
);

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_hâp_sub_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

287 
ngx_öt_t
 
rc
;

288 
ngx_buf_t
 *
b
;

289 
ngx_°r_t
 *
sub
;

290 
ngx_uöt_t
 
Êush
, 
œ°
;

291 
ngx_chaö_t
 *
˛
;

292 
ngx_hâp_sub_˘x_t
 *
˘x
;

293 
ngx_hâp_sub_m©ch_t
 *
m©ch
;

294 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

296 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

298 i‡(
˘x
 =
NULL
) {

299  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

302 i‡((
ö
 =
NULL


303 && 
˘x
->
buf
 =
NULL


304 && 
˘x
->
ö
 =
NULL


305 && 
˘x
->
busy
 =
NULL
))

307  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

310 i‡(
˘x
->
⁄˚
 && (˘x->
buf
 =
NULL
 || ctx->
ö
 == NULL)) {

312 i‡(
˘x
->
busy
) {

313 i‡(
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

314  
NGX_ERROR
;

318  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

323 i‡(
ö
) {

324 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

325  
NGX_ERROR
;

329 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

330 "hâ∞sub fûã∏\"%V\"", &
r
->
uri
);

332 
Êush
 = 0;

333 
œ°
 = 0;

335 
˘x
->
ö
 || ctx->
buf
) {

337 i‡(
˘x
->
buf
 =
NULL
) {

338 
˘x
->
buf
 = ctx->
ö
->buf;

339 
˘x
->
ö
 = ctx->ö->
√xt
;

340 
˘x
->
pos
 = ctx->
buf
->pos;

343 i‡(
˘x
->
buf
->
Êush
 || ctx->buf->
ªcy˛ed
) {

344 
Êush
 = 1;

347 i‡(
˘x
->
ö
 =
NULL
) {

348 
œ°
 = 
Êush
;

351 
b
 = 
NULL
;

353 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

355 
rc
 = 
	`ngx_hâp_sub_∑r£
(
r
, 
˘x
, 
œ°
);

357 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

359 
rc
, &
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

361 i‡(
rc
 =
NGX_ERROR
) {

362  
rc
;

365 i‡(
˘x
->
ßved
.
Àn
) {

367 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 "ßved: \"%V\"", &
˘x
->
ßved
);

370 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

371 i‡(
˛
 =
NULL
) {

372  
NGX_ERROR
;

375 
b
 = 
˛
->
buf
;

377 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

379 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
ßved
.
Àn
);

380 i‡(
b
->
pos
 =
NULL
) {

381  
NGX_ERROR
;

384 
	`ngx_mem˝y
(
b
->
pos
, 
˘x
->
ßved
.
d©a
, ctx->ßved.
Àn
);

385 
b
->
œ°
 = b->
pos
 + 
˘x
->
ßved
.
Àn
;

386 
b
->
mem‹y
 = 1;

388 *
˘x
->
œ°_out
 = 
˛
;

389 
˘x
->
œ°_out
 = &
˛
->
√xt
;

391 
˘x
->
ßved
.
Àn
 = 0;

394 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

396 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

397 i‡(
˛
 =
NULL
) {

398  
NGX_ERROR
;

401 
b
 = 
˛
->
buf
;

403 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

405 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

406 
b
->
œ°
 = 
˘x
->
c›y_íd
;

407 
b
->
shadow
 = 
NULL
;

408 
b
->
œ°_buf
 = 0;

409 
b
->
œ°_ö_chaö
 = 0;

410 
b
->
ªcy˛ed
 = 0;

412 i‡(
b
->
ö_fûe
) {

413 
b
->
fûe_œ°
 = b->
fûe_pos
 + (b->
œ°
 - 
˘x
->
buf
->
pos
);

414 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

417 *
˘x
->
œ°_out
 = 
˛
;

418 
˘x
->
œ°_out
 = &
˛
->
√xt
;

421 i‡(
rc
 =
NGX_AGAIN
) {

428 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

429 i‡(
˛
 =
NULL
) {

430  
NGX_ERROR
;

433 
b
 = 
˛
->
buf
;

435 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

437 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

439 i‡(
˘x
->
sub
 =
NULL
) {

440 
˘x
->
sub
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_°r_t
)

441 * 
˘x
->
m©ches
->
√…s
);

442 i‡(
˘x
->
sub
 =
NULL
) {

443  
NGX_ERROR
;

447 
sub
 = &
˘x
->sub[˘x->
ödex
];

449 i‡(
sub
->
d©a
 =
NULL
) {

450 
m©ch
 = 
˘x
->
m©ches
->
ñts
;

452 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
m©ch
[
˘x
->
ödex
].
vÆue
, 
sub
)

453 !
NGX_OK
)

455  
NGX_ERROR
;

459 i‡(
sub
->
Àn
) {

460 
b
->
mem‹y
 = 1;

461 
b
->
pos
 = 
sub
->
d©a
;

462 
b
->
œ°
 = 
sub
->
d©a
 + sub->
Àn
;

465 
b
->
sync
 = 1;

468 *
˘x
->
œ°_out
 = 
˛
;

469 
˘x
->
œ°_out
 = &
˛
->
√xt
;

471 
˘x
->
ödex
 = 0;

472 
˘x
->
⁄˚
 = 
¶cf
->⁄˚ && (++˘x->
≠∂õd
 =˘x->
m©ches
->
√…s
);

477 i‡(
˘x
->
looked
.
Àn


478 && (
˘x
->
buf
->
œ°_buf
 || ctx->buf->
œ°_ö_chaö
))

480 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

481 i‡(
˛
 =
NULL
) {

482  
NGX_ERROR
;

485 
b
 = 
˛
->
buf
;

487 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

489 
b
->
pos
 = 
˘x
->
looked
.
d©a
;

490 
b
->
œ°
 = b->
pos
 + 
˘x
->
looked
.
Àn
;

491 
b
->
mem‹y
 = 1;

493 *
˘x
->
œ°_out
 = 
˛
;

494 
˘x
->
œ°_out
 = &
˛
->
√xt
;

496 
˘x
->
looked
.
Àn
 = 0;

499 i‡(
˘x
->
buf
->
œ°_buf
 || ctx->buf->
Êush
 || ctx->buf->
sync


500 || 
	`ngx_buf_ö_mem‹y
(
˘x
->
buf
))

502 i‡(
b
 =
NULL
) {

503 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

504 i‡(
˛
 =
NULL
) {

505  
NGX_ERROR
;

508 
b
 = 
˛
->
buf
;

510 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

512 
b
->
sync
 = 1;

514 *
˘x
->
œ°_out
 = 
˛
;

515 
˘x
->
œ°_out
 = &
˛
->
√xt
;

518 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

519 
b
->
œ°_ö_chaö
 = 
˘x
->
buf
->last_in_chain;

520 
b
->
Êush
 = 
˘x
->
buf
->flush;

521 
b
->
shadow
 = 
˘x
->
buf
;

523 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

526 
˘x
->
buf
 = 
NULL
;

529 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

530  
NGX_OK
;

533  
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
);

534 
	}
}

537 
ngx_öt_t


538 
	$ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

540 
ngx_öt_t
 
rc
;

541 
ngx_buf_t
 *
b
;

542 
ngx_chaö_t
 *
˛
;

545 
b
 = 
NULL
;

546 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

547 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

548 "sub out: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

549 i‡(
˛
->
buf
 =
b
) {

550 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

552 
	`ngx_debug_poöt
();

553  
NGX_ERROR
;

555 
b
 = 
˛
->
buf
;

559 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

561 i‡(
˘x
->
busy
 =
NULL
) {

562 
˘x
->
busy
 = ctx->
out
;

565 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

566 
˛
->
√xt
 = 
˘x
->
out
;

569 
˘x
->
out
 = 
NULL
;

570 
˘x
->
œ°_out
 = &˘x->
out
;

572 
˘x
->
busy
) {

574 
˛
 = 
˘x
->
busy
;

575 
b
 = 
˛
->
buf
;

577 i‡(
	`ngx_buf_size
(
b
) != 0) {

581 i‡(
b
->
shadow
) {

582 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

585 
˘x
->
busy
 = 
˛
->
√xt
;

587 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

590 
˛
->
√xt
 = 
˘x
->
‰ì
;

591 
˘x
->
‰ì
 = 
˛
;

595 i‡(
˘x
->
ö
 || ctx->
buf
) {

596 
r
->
buf„ªd
 |
NGX_HTTP_SUB_BUFFERED
;

599 
r
->
buf„ªd
 &~
NGX_HTTP_SUB_BUFFERED
;

602  
rc
;

603 
	}
}

606 
ngx_öt_t


607 
	$ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
,

608 
ngx_uöt_t
 
Êush
)

610 
u_ch¨
 *
p
, 
c
;

611 
ngx_°r_t
 *
m
;

612 
ngx_öt_t
 
off£t
, 
°¨t
, 
√xt
, 
íd
, 
Àn
, 
rc
;

613 
ngx_uöt_t
 
shi·
, 
i
, 
j
;

614 
ngx_hâp_sub_m©ch_t
 *
m©ch
;

615 
ngx_hâp_sub_èbÀs_t
 *
èbÀs
;

616 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

618 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

619 
èbÀs
 = 
˘x
->tables;

620 
m©ch
 = 
˘x
->
m©ches
->
ñts
;

622 
off£t
 = 
˘x
->offset;

623 
íd
 = 
˘x
->
buf
->
œ°
 - ctx->
pos
;

625 i‡(
˘x
->
⁄˚
) {

627 
off£t
 = 
íd
 + (
ngx_öt_t
Ë
èbÀs
->
mö_m©ch_Àn
 - 1;

628 
agaö
;

631 
off£t
 < 
íd
) {

633 
c
 = 
off£t
 < 0 ? 
˘x
->
looked
.
d©a
[˘x->looked.
Àn
 + offset]

634 : 
˘x
->
pos
[
off£t
];

636 
c
 = 
	`ngx_tﬁowî
(c);

638 
shi·
 = 
èbÀs
->shi·[
c
];

639 i‡(
shi·
 > 0) {

640 
off£t
 +
shi·
;

646 
°¨t
 = 
off£t
 - (
ngx_öt_t
Ë
èbÀs
->
mö_m©ch_Àn
 + 1;

648 
i
 = 
	`ngx_max
((
ngx_uöt_t
Ë
èbÀs
->
ödex
[
c
], 
˘x
->index);

649 
j
 = 
èbÀs
->
ödex
[
c
 + 1];

651 
i
 !
j
) {

653 i‡(
¶cf
->
⁄˚
 && 
˘x
->
sub
 && ctx->sub[
i
].
d©a
) {

654 
√xt
;

657 
m
 = &
m©ch
[
i
].match;

659 
rc
 = 
	`ngx_hâp_sub_m©ch
(
˘x
, 
°¨t
, 
m
);

661 i‡(
rc
 =
NGX_DECLINED
) {

662 
√xt
;

665 
˘x
->
ödex
 = 
i
;

667 i‡(
rc
 =
NGX_AGAIN
) {

668 
agaö
;

671 
˘x
->
off£t
 = off£à+ (
ngx_öt_t
Ë
m
->
Àn
;

672 
√xt
 = 
°¨t
 + (
ngx_öt_t
Ë
m
->
Àn
;

673 
íd
 = 
	`ngx_max
(
√xt
, 0);

674 
rc
 = 
NGX_OK
;

676 
d⁄e
;

678 
√xt
:

680 
i
++;

683 
off£t
++;

684 
˘x
->
ödex
 = 0;

687 i‡(
Êush
) {

689 
°¨t
 = 
off£t
 - (
ngx_öt_t
Ë
èbÀs
->
mö_m©ch_Àn
 + 1;

691 i‡(
°¨t
 >
íd
) {

695 
i
 = 0; i < 
˘x
->
m©ches
->
√…s
; i++) {

696 
m
 = &
m©ch
[
i
].match;

698 i‡(
	`ngx_hâp_sub_m©ch
(
˘x
, 
°¨t
, 
m
Ë=
NGX_AGAIN
) {

699 
agaö
;

703 
off£t
++;

707 
agaö
:

709 
˘x
->
off£t
 = offset;

710 
°¨t
 = 
off£t
 - (
ngx_öt_t
Ë
èbÀs
->
mö_m©ch_Àn
 + 1;

711 
√xt
 = 
°¨t
;

712 
rc
 = 
NGX_AGAIN
;

714 
d⁄e
:

718 
˘x
->
ßved
.
Àn
 = ctx->
looked
.À¿+ 
	`ngx_mö
(
°¨t
, 0);

719 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->ßved.
Àn
);

721 
˘x
->
c›y_°¨t
 = ctx->
pos
;

722 
˘x
->
c›y_íd
 = ctx->
pos
 + 
	`ngx_max
(
°¨t
, 0);

726 
Àn
 = 
	`ngx_mö
(
√xt
, 0);

727 
p
 = 
˘x
->
looked
.
d©a
;

728 
p
 = 
	`ngx_movemem
’,Ö + 
˘x
->
looked
.
Àn
 +Üen, -Üen);

730 
Àn
 = 
	`ngx_max
(
√xt
, 0);

731 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
pos
 + 
Àn
, 
íd
 -Üen);

732 
˘x
->
looked
.
Àn
 = 
p
 - ctx->looked.
d©a
;

736 
˘x
->
pos
 +
íd
;

737 
˘x
->
off£t
 -
íd
;

739  
rc
;

740 
	}
}

743 
ngx_öt_t


744 
	$ngx_hâp_sub_m©ch
(
ngx_hâp_sub_˘x_t
 *
˘x
, 
ngx_öt_t
 
°¨t
, 
ngx_°r_t
 *
m
)

746 
u_ch¨
 *
p
, *
œ°
, *
∑t
, *
∑t_íd
;

748 
∑t
 = 
m
->
d©a
;

749 
∑t_íd
 = 
m
->
d©a
 + m->
Àn
;

751 i‡(
°¨t
 >= 0) {

752 
p
 = 
˘x
->
pos
 + 
°¨t
;

755 
œ°
 = 
˘x
->
looked
.
d©a
 + ctx->looked.
Àn
;

756 
p
 = 
œ°
 + 
°¨t
;

758 
p
 < 
œ°
 && 
∑t
 < 
∑t_íd
) {

759 i‡(
	`ngx_tﬁowî
(*
p
Ë!*
∑t
) {

760  
NGX_DECLINED
;

763 
p
++;

764 
∑t
++;

767 
p
 = 
˘x
->
pos
;

770 
p
 < 
˘x
->
buf
->
œ°
 && 
∑t
 < 
∑t_íd
) {

771 i‡(
	`ngx_tﬁowî
(*
p
Ë!*
∑t
) {

772  
NGX_DECLINED
;

775 
p
++;

776 
∑t
++;

779 i‡(
∑t
 !
∑t_íd
) {

781  
NGX_AGAIN
;

784  
NGX_OK
;

785 
	}
}

789 
	$ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

791 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
 = 
c⁄f
;

793 
ngx_°r_t
 *
vÆue
;

794 
ngx_hâp_sub_∑ú_t
 *
∑ú
;

795 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

797 
vÆue
 = 
cf
->
¨gs
->
ñts
;

799 i‡(
vÆue
[1].
Àn
 == 0) {

800 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "empty searchÖattern");

801  
NGX_CONF_ERROR
;

804 i‡(
¶cf
->
∑ús
 =
NULL
) {

805 
¶cf
->
∑ús
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

806 (
ngx_hâp_sub_∑ú_t
));

807 i‡(
¶cf
->
∑ús
 =
NULL
) {

808  
NGX_CONF_ERROR
;

812 i‡(
¶cf
->
∑ús
->
√…s
 == 255) {

813 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

815  
NGX_CONF_ERROR
;

818 
	`ngx_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

820 
∑ú
 = 
	`ngx_¨øy_push
(
¶cf
->
∑ús
);

821 i‡(
∑ú
 =
NULL
) {

822  
NGX_CONF_ERROR
;

825 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

827 
ccv
.
cf
 = cf;

828 
ccv
.
vÆue
 = &value[1];

829 
ccv
.
com∂ex_vÆue
 = &
∑ú
->
m©ch
;

831 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

832  
NGX_CONF_ERROR
;

835 i‡(
ccv
.
com∂ex_vÆue
->
Àngths
 !
NULL
) {

836 
¶cf
->
dy«mic
 = 1;

839 
	`ngx_°æow
(
∑ú
->
m©ch
.
vÆue
.
d©a
,Öair->match.value.data,

840 
∑ú
->
m©ch
.
vÆue
.
Àn
);

843 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

845 
ccv
.
cf
 = cf;

846 
ccv
.
vÆue
 = &value[2];

847 
ccv
.
com∂ex_vÆue
 = &
∑ú
->
vÆue
;

849 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

850  
NGX_CONF_ERROR
;

853  
NGX_CONF_OK
;

854 
	}
}

858 
	$ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

860 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

862 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_loc_c⁄f_t
));

863 i‡(
¶cf
 =
NULL
) {

864  
NULL
;

878 
¶cf
->
⁄˚
 = 
NGX_CONF_UNSET
;

879 
¶cf
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

881  
¶cf
;

882 
	}
}

886 
	$ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

888 
ngx_uöt_t
 
i
, 
n
;

889 
ngx_hâp_sub_∑ú_t
 *
∑ús
;

890 
ngx_hâp_sub_m©ch_t
 *
m©ches
;

891 
ngx_hâp_sub_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

892 
ngx_hâp_sub_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

894 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
⁄˚
, 
¥ev
->once, 1);

895 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

897 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

898 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

899 
ngx_hâp_html_deÁu…_ty≥s
)

900 !
NGX_OK
)

902  
NGX_CONF_ERROR
;

905 i‡(
c⁄f
->
∑ús
 =
NULL
) {

906 
c⁄f
->
dy«mic
 = 
¥ev
->dynamic;

907 
c⁄f
->
∑ús
 = 
¥ev
->pairs;

908 
c⁄f
->
m©ches
 = 
¥ev
->matches;

909 
c⁄f
->
èbÀs
 = 
¥ev
->tables;

912 i‡(
c⁄f
->
∑ús
 && c⁄f->
dy«mic
 =0 && c⁄f->
èbÀs
 =
NULL
) {

913 
∑ús
 = 
c⁄f
->∑ús->
ñts
;

914 
n
 = 
c⁄f
->
∑ús
->
√…s
;

916 
m©ches
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_m©ch_t
Ë* 
n
);

917 i‡(
m©ches
 =
NULL
) {

918  
NGX_CONF_ERROR
;

921 
i
 = 0; i < 
n
; i++) {

922 
m©ches
[
i
].
m©ch
 = 
∑ús
[i].m©ch.
vÆue
;

923 
m©ches
[
i
].
vÆue
 = &
∑ús
[i].value;

926 
c⁄f
->
m©ches
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_¨øy_t
));

927 i‡(
c⁄f
->
m©ches
 =
NULL
) {

928  
NGX_CONF_ERROR
;

931 
c⁄f
->
m©ches
->
ñts
 = matches;

932 
c⁄f
->
m©ches
->
√…s
 = 
n
;

934 
c⁄f
->
èbÀs
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_èbÀs_t
));

935 i‡(
c⁄f
->
èbÀs
 =
NULL
) {

936  
NGX_CONF_ERROR
;

939 
	`ngx_hâp_sub_öô_èbÀs
(
c⁄f
->
èbÀs
, c⁄f->
m©ches
->
ñts
,

940 
c⁄f
->
m©ches
->
√…s
);

943  
NGX_CONF_OK
;

944 
	}
}

948 
	$ngx_hâp_sub_öô_èbÀs
(
ngx_hâp_sub_èbÀs_t
 *
èbÀs
,

949 
ngx_hâp_sub_m©ch_t
 *
m©ch
, 
ngx_uöt_t
 
n
)

951 
u_ch¨
 
c
;

952 
ngx_uöt_t
 
i
, 
j
, 
mö
, 
max
, 
ch
;

954 
mö
 = 
m©ch
[0].m©ch.
Àn
;

955 
max
 = 
m©ch
[0].m©ch.
Àn
;

957 
i
 = 1; i < 
n
; i++) {

958 
mö
 = 
	`ngx_mö
(mö, 
m©ch
[
i
].m©ch.
Àn
);

959 
max
 = 
	`ngx_max
(max, 
m©ch
[
i
].m©ch.
Àn
);

962 
èbÀs
->
mö_m©ch_Àn
 = 
mö
;

963 
èbÀs
->
max_m©ch_Àn
 = 
max
;

965 
ngx_hâp_sub_cmp_ödex
 = 
èbÀs
->
mö_m©ch_Àn
 - 1;

966 
	`ngx_s‹t
(
m©ch
, 
n
, (
ngx_hâp_sub_m©ch_t
), 
ngx_hâp_sub_cmp_m©ches
);

968 
mö
 = 
	`ngx_mö
(min, 255);

969 
	`ngx_mem£t
(
èbÀs
->
shi·
, 
mö
, 256);

971 
ch
 = 0;

973 
i
 = 0; i < 
n
; i++) {

975 
j
 = 0; j < 
mö
; j++) {

976 
c
 = 
m©ch
[
i
].m©ch.
d©a
[
èbÀs
->
mö_m©ch_Àn
 - 1 - 
j
];

977 
èbÀs
->
shi·
[
c
] = 
	`ngx_mö
—abÀs->shi·[c], (
u_ch¨
Ë
j
);

980 
c
 = 
m©ch
[
i
].m©ch.
d©a
[
èbÀs
->
mö_m©ch_Àn
 - 1];

981 
ch
 <(
ngx_uöt_t
Ë
c
) {

982 
èbÀs
->
ödex
[
ch
++] = (
u_ch¨
Ë
i
;

986 
ch
 < 257) {

987 
èbÀs
->
ödex
[
ch
++] = (
u_ch¨
Ë
n
;

989 
	}
}

992 
ngx_öt_t


993 
	$ngx_hâp_sub_cmp_m©ches
(c⁄° *
⁄e
, c⁄° *
two
)

995 
ngx_öt_t
 
c1
, 
c2
;

996 
ngx_hâp_sub_m©ch_t
 *
fú°
, *
£c⁄d
;

998 
fú°
 = (
ngx_hâp_sub_m©ch_t
 *Ë
⁄e
;

999 
£c⁄d
 = (
ngx_hâp_sub_m©ch_t
 *Ë
two
;

1001 
c1
 = 
fú°
->
m©ch
.
d©a
[
ngx_hâp_sub_cmp_ödex
];

1002 
c2
 = 
£c⁄d
->
m©ch
.
d©a
[
ngx_hâp_sub_cmp_ödex
];

1004  
c1
 - 
c2
;

1005 
	}
}

1008 
ngx_öt_t


1009 
	$ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1011 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1012 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_sub_hódî_fûãr
;

1014 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1015 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_sub_body_fûãr
;

1017  
NGX_OK
;

1018 
	}
}

	@src/http/modules/ngx_http_try_files_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mÀngths
;

15 
ngx_¨øy_t
 *
	mvÆues
;

16 
ngx_°r_t
 
	m«me
;

18 
	mcode
:10;

19 
	mã°_dú
:1;

20 } 
	tngx_hâp_åy_fûe_t
;

24 
ngx_hâp_åy_fûe_t
 *
	måy_fûes
;

25 } 
	tngx_hâp_åy_fûes_loc_c⁄f_t
;

28 
ngx_öt_t
 
ngx_hâp_åy_fûes_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

29 *
ngx_hâp_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

30 *
ngx_hâp_åy_fûes_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 
ngx_öt_t
 
ngx_hâp_åy_fûes_öô
(
ngx_c⁄f_t
 *
cf
);

34 
ngx_comm™d_t
 
	gngx_hâp_åy_fûes_comm™ds
[] = {

36 { 
ngx_°rög
("try_files"),

37 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

38 
ngx_hâp_åy_fûes
,

39 
NGX_HTTP_LOC_CONF_OFFSET
,

41 
NULL
 },

43 
ngx_nuŒ_comm™d


47 
ngx_hâp_moduÀ_t
 
	gngx_hâp_åy_fûes_moduÀ_˘x
 = {

48 
NULL
,

49 
ngx_hâp_åy_fûes_öô
,

51 
NULL
,

52 
NULL
,

54 
NULL
,

55 
NULL
,

57 
ngx_hâp_åy_fûes_¸óã_loc_c⁄f
,

58 
NULL


62 
ngx_moduÀ_t
 
	gngx_hâp_åy_fûes_moduÀ
 = {

63 
NGX_MODULE_V1
,

64 &
ngx_hâp_åy_fûes_moduÀ_˘x
,

65 
ngx_hâp_åy_fûes_comm™ds
,

66 
NGX_HTTP_MODULE
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NGX_MODULE_V1_PADDING


78 
ngx_öt_t


79 
	$ngx_hâp_åy_fûes_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

81 
size_t
 
Àn
, 
roŸ
, 
Æüs
, 
ª£rve
, 
Æloˇãd
;

82 
u_ch¨
 *
p
, *
«me
;

83 
ngx_°r_t
 
∑th
, 
¨gs
;

84 
ngx_uöt_t
 
ã°_dú
;

85 
ngx_hâp_åy_fûe_t
 *
tf
;

86 
ngx_›í_fûe_öfo_t
 
of
;

87 
ngx_hâp_s¸ùt_code_±
 
code
;

88 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

89 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

90 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

91 
ngx_hâp_åy_fûes_loc_c⁄f_t
 *
écf
;

93 
écf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_åy_fûes_moduÀ
);

95 i‡(
écf
->
åy_fûes
 =
NULL
) {

96  
NGX_DECLINED
;

99 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

102 
Æloˇãd
 = 0;

103 
roŸ
 = 0;

104 
«me
 = 
NULL
;

106 
∑th
.
d©a
 = 
NULL
;

108 
tf
 = 
écf
->
åy_fûes
;

110 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

112 
Æüs
 = 
˛cf
->alias;

116 i‡(
tf
->
Àngths
) {

117 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

119 
e
.
ù
 = 
tf
->
Àngths
->
ñts
;

120 
e
.
ªque°
 = 
r
;

123 
Àn
 = 1;

125 *(
uöçå_t
 *Ë
e
.
ù
) {

126 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

127 
Àn
 +
	`lcode
(&
e
);

131 
Àn
 = 
tf
->
«me
.len;

134 i‡(!
Æüs
) {

135 
ª£rve
 = 
Àn
 > 
r
->
uri
.len ?Üen -Ñ->uri.len : 0;

137 } i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

138 
ª£rve
 = 
Àn
;

141 
ª£rve
 = 
Àn
 > 
r
->
uri
.À¿- 
Æüs
 ?Üen - (r->uri.len -álias) : 0;

144 i‡(
ª£rve
 > 
Æloˇãd
 || !allocated) {

147 
Æloˇãd
 = 
ª£rve
 + 16;

149 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Æloˇãd
Ë=
NULL
) {

150  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

153 
«me
 = 
∑th
.
d©a
 + 
roŸ
;

156 i‡(
tf
->
vÆues
 =
NULL
) {

160 
	`ngx_mem˝y
(
«me
, 
tf
->«me.
d©a
,Åf->«me.
Àn
);

162 
∑th
.
Àn
 = (
«me
 + 
tf
->«me.À¿- 1Ë-Ö©h.
d©a
;

165 
e
.
ù
 = 
tf
->
vÆues
->
ñts
;

166 
e
.
pos
 = 
«me
;

167 
e
.
Êushed
 = 1;

169 *(
uöçå_t
 *Ë
e
.
ù
) {

170 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

171 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

174 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

176 *
e
.
pos
 = '\0';

178 i‡(
Æüs
 &&álü†!
NGX_MAX_SIZE_T_VALUE


179 && 
	`ngx_°∫cmp
(
«me
, 
r
->
uri
.
d©a
, 
Æüs
) == 0)

181 
	`ngx_memmove
(
«me
,Çamê+ 
Æüs
, 
Àn
 -álias);

182 
∑th
.
Àn
 -
Æüs
;

186 
ã°_dú
 = 
tf
->test_dir;

188 
tf
++;

190 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

192 
ã°_dú
 ? "dú" : "fûe", 
«me
, 
∑th
.
d©a
);

194 i‡(
tf
->
Àngths
 =
NULL
 &&Åf->
«me
.
Àn
 == 0) {

196 i‡(
tf
->
code
) {

197  
tf
->
code
;

200 
∑th
.
Àn
 -
roŸ
;

201 
∑th
.
d©a
 +
roŸ
;

203 i‡(
∑th
.
d©a
[0] == '@') {

204 (Ë
	`ngx_hâp_«med_loˇti⁄
(
r
, &
∑th
);

207 
	`ngx_hâp_•lô_¨gs
(
r
, &
∑th
, &
¨gs
);

209 (Ë
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
∑th
, &
¨gs
);

212 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

213  
NGX_DONE
;

216 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

218 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

219 
of
.
dúe˘io
 = 
˛cf
->directio;

220 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

221 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

222 
of
.
ã°_⁄ly
 = 1;

223 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

224 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

226 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

227  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

230 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

231 !
NGX_OK
)

233 i‡(
of
.
îr
 == 0) {

234  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

237 i‡(
of
.
îr
 !
NGX_ENOENT


238 && 
of
.
îr
 !
NGX_ENOTDIR


239 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

241 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

242 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

248 i‡(
of
.
is_dú
 !
ã°_dú
) {

252 
∑th
.
Àn
 -
roŸ
;

253 
∑th
.
d©a
 +
roŸ
;

255 i‡(!
Æüs
) {

256 
r
->
uri
 = 
∑th
;

258 } i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

259 i‡(!
ã°_dú
) {

260 
r
->
uri
 = 
∑th
;

261 
r
->
add_uri_to_Æüs
 = 1;

265 
«me
 = 
r
->
uri
.
d©a
;

267 
r
->
uri
.
Àn
 = 
Æüs
 + 
∑th
.len;

268 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
);

269 i‡(
r
->
uri
.
d©a
 =
NULL
) {

270 
r
->
uri
.
Àn
 = 0;

271  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

274 
p
 = 
	`ngx_c›y
(
r
->
uri
.
d©a
, 
«me
, 
Æüs
);

275 
	`ngx_mem˝y
(
p
, 
∑th
.
d©a
,Ö©h.
Àn
);

278 
	`ngx_hâp_£t_exãn
(
r
);

280 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

281 "åy fûêuri: \"%V\"", &
r
->
uri
);

283  
NGX_DECLINED
;

287 
	}
}

291 
	$ngx_hâp_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

293 
ngx_hâp_åy_fûes_loc_c⁄f_t
 *
écf
 = 
c⁄f
;

295 
ngx_°r_t
 *
vÆue
;

296 
ngx_öt_t
 
code
;

297 
ngx_uöt_t
 
i
, 
n
;

298 
ngx_hâp_åy_fûe_t
 *
tf
;

299 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

301 i‡(
écf
->
åy_fûes
) {

305 
tf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, cf->
¨gs
->
√…s
 * (
ngx_hâp_åy_fûe_t
));

306 i‡(
tf
 =
NULL
) {

307  
NGX_CONF_ERROR
;

310 
écf
->
åy_fûes
 = 
tf
;

312 
vÆue
 = 
cf
->
¨gs
->
ñts
;

314 
i
 = 0; i < 
cf
->
¨gs
->
√…s
 - 1; i++) {

316 
tf
[
i
].
«me
 = 
vÆue
[i + 1];

318 i‡(
tf
[
i
].
«me
.
Àn
 > 0

319 && 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
 - 1] == '/'

320 && 
i
 + 2 < 
cf
->
¨gs
->
√…s
)

322 
tf
[
i
].
ã°_dú
 = 1;

323 
tf
[
i
].
«me
.
Àn
--;

324 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
] = '\0';

327 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
tf
[
i
].
«me
);

329 i‡(
n
) {

330 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

332 
sc
.
cf
 = cf;

333 
sc
.
sour˚
 = &
tf
[
i
].
«me
;

334 
sc
.
Àngths
 = &
tf
[
i
].lengths;

335 
sc
.
vÆues
 = &
tf
[
i
].values;

336 
sc
.
v¨übÀs
 = 
n
;

337 
sc
.
com∂ëe_Àngths
 = 1;

338 
sc
.
com∂ëe_vÆues
 = 1;

340 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

341  
NGX_CONF_ERROR
;

346 
tf
[
i
].
«me
.
Àn
++;

350 i‡(
tf
[
i
 - 1].
«me
.
d©a
[0] == '=') {

352 
code
 = 
	`ngx_©oi
(
tf
[
i
 - 1].
«me
.
d©a
 + 1,Åf[ò- 1].«me.
Àn
 - 2);

354 i‡(
code
 =
NGX_ERROR
 || code > 999) {

355 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

357 
tf
[
i
 - 1].
«me
.
Àn
 - 1,Åf[ò- 1].«me.
d©a
);

358  
NGX_CONF_ERROR
;

361 
tf
[
i
].
code
 = code;

364  
NGX_CONF_OK
;

365 
	}
}

369 
	$ngx_hâp_åy_fûes_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

371 
ngx_hâp_åy_fûes_loc_c⁄f_t
 *
écf
;

373 
écf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_åy_fûes_loc_c⁄f_t
));

374 i‡(
écf
 =
NULL
) {

375  
NULL
;

384  
écf
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_hâp_åy_fûes_öô
(
ngx_c⁄f_t
 *
cf
)

391 
ngx_hâp_h™dÀr_±
 *
h
;

392 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

394 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

396 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PRECONTENT_PHASE
].
h™dÀrs
);

397 i‡(
h
 =
NULL
) {

398  
NGX_ERROR
;

401 *
h
 = 
ngx_hâp_åy_fûes_h™dÀr
;

403  
NGX_OK
;

404 
	}
}

	@src/http/modules/ngx_http_upstream_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	mhash
;

15 
ngx_°r_t
 *
	m£rvî
;

16 } 
	tngx_hâp_up°ªam_chash_poöt_t
;

20 
ngx_uöt_t
 
	mnumbî
;

21 
ngx_hâp_up°ªam_chash_poöt_t
 
	mpoöt
[1];

22 } 
	tngx_hâp_up°ªam_chash_poöts_t
;

26 
ngx_hâp_com∂ex_vÆue_t
 
	mkey
;

27 
ngx_hâp_up°ªam_chash_poöts_t
 *
	mpoöts
;

28 } 
	tngx_hâp_up°ªam_hash_§v_c⁄f_t
;

33 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

34 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
	mc⁄f
;

35 
ngx_°r_t
 
	mkey
;

36 
ngx_uöt_t
 
	måõs
;

37 
ngx_uöt_t
 
	mªhash
;

38 
uöt32_t
 
	mhash
;

39 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

40 } 
	tngx_hâp_up°ªam_hash_≥î_d©a_t
;

43 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_hash
(
ngx_c⁄f_t
 *
cf
,

44 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

45 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

47 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

48 *
d©a
);

50 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_chash
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

52 
ngx_libc_cde˛


53 
ngx_hâp_up°ªam_chash_cmp_poöts
(c⁄° *
⁄e
, c⁄° *
two
);

54 
ngx_uöt_t
 
ngx_hâp_up°ªam_föd_chash_poöt
(

55 
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
, 
uöt32_t
 
hash
);

56 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_chash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

58 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_chash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

59 *
d©a
);

61 *
ngx_hâp_up°ªam_hash_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

62 *
ngx_hâp_up°ªam_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

66 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_hash_comm™ds
[] = {

68 { 
ngx_°rög
("hash"),

69 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE12
,

70 
ngx_hâp_up°ªam_hash
,

71 
NGX_HTTP_SRV_CONF_OFFSET
,

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_hash_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_up°ªam_hash_¸óã_c⁄f
,

87 
NULL
,

89 
NULL
,

90 
NULL


94 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_hash_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_up°ªam_hash_moduÀ_˘x
,

97 
ngx_hâp_up°ªam_hash_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_up°ªam_öô_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_hash_≥î
;

119  
NGX_OK
;

120 
	}
}

123 
ngx_öt_t


124 
	$ngx_hâp_up°ªam_öô_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

127 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

128 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
;

130 
hp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_hash_≥î_d©a_t
));

131 i‡(
hp
 =
NULL
) {

132  
NGX_ERROR
;

135 
r
->
up°ªam
->
≥î
.
d©a
 = &
hp
->
ºp
;

137 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_hash_≥î
;

143 
hcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_hash_moduÀ
);

145 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
hcf
->
key
, &
hp
->keyË!
NGX_OK
) {

146  
NGX_ERROR
;

149 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

150 "up°ªam hash key:\"%V\"", &
hp
->
key
);

152 
hp
->
c⁄f
 = 
hcf
;

153 
hp
->
åõs
 = 0;

154 
hp
->
ªhash
 = 0;

155 
hp
->
hash
 = 0;

156 
hp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

158  
NGX_OK
;

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_hâp_up°ªam_gë_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

165 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
 = 
d©a
;

167 
time_t
 
now
;

168 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

169 
size_t
 
size
;

170 
uöt32_t
 
hash
;

171 
ngx_öt_t
 
w
;

172 
uöçå_t
 
m
;

173 
ngx_uöt_t
 
n
, 
p
;

174 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

176 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

177 "gë hashÖìr,Åry: %ui", 
pc
->
åõs
);

179 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
hp
->
ºp
.
≥îs
);

181 i‡(
hp
->
åõs
 > 20 || hp->
ºp
.
≥îs
->
sögÀ
) {

182 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

183  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

186 
now
 = 
	`ngx_time
();

188 
pc
->
ˇched
 = 0;

189 
pc
->
c⁄√˘i⁄
 = 
NULL
;

199 
	`ngx_¸c32_öô
(
hash
);

201 i‡(
hp
->
ªhash
 > 0) {

202 
size
 = 
	`ngx_•rötf
(
buf
, "%ui", 
hp
->
ªhash
) - buf;

203 
	`ngx_¸c32_upd©e
(&
hash
, 
buf
, 
size
);

206 
	`ngx_¸c32_upd©e
(&
hash
, 
hp
->
key
.
d©a
, hp->key.
Àn
);

207 
	`ngx_¸c32_föÆ
(
hash
);

209 
hash
 = (hash >> 16) & 0x7fff;

211 
hp
->
hash
 += hash;

212 
hp
->
ªhash
++;

214 
w
 = 
hp
->
hash
 % hp->
ºp
.
≥îs
->
tŸÆ_weight
;

215 
≥î
 = 
hp
->
ºp
.
≥îs
->peer;

216 
p
 = 0;

218 
w
 >
≥î
->
weight
) {

219 
w
 -
≥î
->
weight
;

220 
≥î
 =Öìr->
√xt
;

221 
p
++;

224 
n
 = 
p
 / (8 * (
uöçå_t
));

225 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

227 i‡(
hp
->
ºp
.
åõd
[
n
] & 
m
) {

228 
√xt
;

231 
	`ngx_hâp_up°ªam_º_≥î_lock
(
hp
->
ºp
.
≥îs
, 
≥î
);

233 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

234 "gë hashÖìr, vÆue:%uD,Öìr:%ui", 
hp
->
hash
, 
p
);

236 i‡(
≥î
->
down
) {

237 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

238 
√xt
;

241 i‡(
≥î
->
max_Áûs


242 && 
≥î
->
Áûs
 >≥î->
max_Áûs


243 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

245 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

246 
√xt
;

249 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

250 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

251 
√xt
;

256 
√xt
:

258 i‡(++
hp
->
åõs
 > 20) {

259 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

260  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

264 
hp
->
ºp
.
cuºít
 = 
≥î
;

266 
pc
->
sockaddr
 = 
≥î
->sockaddr;

267 
pc
->
sockÀn
 = 
≥î
->socklen;

268 
pc
->
«me
 = &
≥î
->name;

270 
≥î
->
c⁄ns
++;

272 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

273 
≥î
->
checked
 = 
now
;

276 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

277 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

279 
hp
->
ºp
.
åõd
[
n
] |
m
;

281  
NGX_OK
;

282 
	}
}

285 
ngx_öt_t


286 
	$ngx_hâp_up°ªam_öô_chash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

288 
u_ch¨
 *
ho°
, *
p‹t
, 
c
;

289 
size_t
 
ho°_Àn
, 
p‹t_Àn
, 
size
;

290 
uöt32_t
 
hash
, 
ba£_hash
;

291 
ngx_°r_t
 *
£rvî
;

292 
ngx_uöt_t
 
≈oöts
, 
i
, 
j
;

293 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

294 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

295 
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
;

296 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

298 
uöt32_t
 
vÆue
;

299 
u_ch¨
 
byã
[4];

300 } 
¥ev_hash
;

302 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

303  
NGX_ERROR
;

306 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_chash_≥î
;

308 
≥îs
 = 
us
->
≥î
.
d©a
;

309 
≈oöts
 = 
≥îs
->
tŸÆ_weight
 * 160;

311 
size
 = (
ngx_hâp_up°ªam_chash_poöts_t
)

312 + (
ngx_hâp_up°ªam_chash_poöt_t
Ë* (
≈oöts
 - 1);

314 
poöts
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
size
);

315 i‡(
poöts
 =
NULL
) {

316  
NGX_ERROR
;

319 
poöts
->
numbî
 = 0;

321 
≥î
 = 
≥îs
->≥î;Öìr;Öì∏≥î->
√xt
) {

322 
£rvî
 = &
≥î
->server;

329 i‡(
£rvî
->
Àn
 >= 5

330 && 
	`ngx_°∫ˇ£cmp
(
£rvî
->
d©a
, (
u_ch¨
 *) "unix:", 5) == 0)

332 
ho°
 = 
£rvî
->
d©a
 + 5;

333 
ho°_Àn
 = 
£rvî
->
Àn
 - 5;

334 
p‹t
 = 
NULL
;

335 
p‹t_Àn
 = 0;

336 
d⁄e
;

339 
j
 = 0; j < 
£rvî
->
Àn
; j++) {

340 
c
 = 
£rvî
->
d©a
[£rvî->
Àn
 - 
j
 - 1];

342 i‡(
c
 == ':') {

343 
ho°
 = 
£rvî
->
d©a
;

344 
ho°_Àn
 = 
£rvî
->
Àn
 - 
j
 - 1;

345 
p‹t
 = 
£rvî
->
d©a
 + sîvî->
Àn
 - 
j
;

346 
p‹t_Àn
 = 
j
;

347 
d⁄e
;

350 i‡(
c
 < '0' || c > '9') {

355 
ho°
 = 
£rvî
->
d©a
;

356 
ho°_Àn
 = 
£rvî
->
Àn
;

357 
p‹t
 = 
NULL
;

358 
p‹t_Àn
 = 0;

360 
d⁄e
:

362 
	`ngx_¸c32_öô
(
ba£_hash
);

363 
	`ngx_¸c32_upd©e
(&
ba£_hash
, 
ho°
, 
ho°_Àn
);

364 
	`ngx_¸c32_upd©e
(&
ba£_hash
, (
u_ch¨
 *) "", 1);

365 
	`ngx_¸c32_upd©e
(&
ba£_hash
, 
p‹t
, 
p‹t_Àn
);

367 
¥ev_hash
.
vÆue
 = 0;

368 
≈oöts
 = 
≥î
->
weight
 * 160;

370 
j
 = 0; j < 
≈oöts
; j++) {

371 
hash
 = 
ba£_hash
;

373 
	`ngx_¸c32_upd©e
(&
hash
, 
¥ev_hash
.
byã
, 4);

374 
	`ngx_¸c32_föÆ
(
hash
);

376 
poöts
->
poöt
[poöts->
numbî
].
hash
 = hash;

377 
poöts
->
poöt
[poöts->
numbî
].
£rvî
 = server;

378 
poöts
->
numbî
++;

380 #i‡(
NGX_HAVE_LITTLE_ENDIAN
)

381 
¥ev_hash
.
vÆue
 = 
hash
;

383 
¥ev_hash
.
byã
[0] = (
u_ch¨
Ë(
hash
 & 0xff);

384 
¥ev_hash
.
byã
[1] = (
u_ch¨
Ë((
hash
 >> 8) & 0xff);

385 
¥ev_hash
.
byã
[2] = (
u_ch¨
Ë((
hash
 >> 16) & 0xff);

386 
¥ev_hash
.
byã
[3] = (
u_ch¨
Ë((
hash
 >> 24) & 0xff);

391 
	`ngx_qs‹t
(
poöts
->
poöt
,

392 
poöts
->
numbî
,

393 (
ngx_hâp_up°ªam_chash_poöt_t
),

394 
ngx_hâp_up°ªam_chash_cmp_poöts
);

396 
i
 = 0, 
j
 = 1; j < 
poöts
->
numbî
; j++) {

397 i‡(
poöts
->
poöt
[
i
].
hash
 !poöts->poöt[
j
].hash) {

398 
poöts
->
poöt
[++
i
] =Öoöts->poöt[
j
];

402 
poöts
->
numbî
 = 
i
 + 1;

404 
hcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_hash_moduÀ
);

405 
hcf
->
poöts
 =Öoints;

407  
NGX_OK
;

408 
	}
}

411 
ngx_libc_cde˛


412 
	$ngx_hâp_up°ªam_chash_cmp_poöts
(c⁄° *
⁄e
, c⁄° *
two
)

414 
ngx_hâp_up°ªam_chash_poöt_t
 *
fú°
 =

415 (
ngx_hâp_up°ªam_chash_poöt_t
 *Ë
⁄e
;

416 
ngx_hâp_up°ªam_chash_poöt_t
 *
£c⁄d
 =

417 (
ngx_hâp_up°ªam_chash_poöt_t
 *Ë
two
;

419 i‡(
fú°
->
hash
 < 
£c⁄d
->hash) {

422 } i‡(
fú°
->
hash
 > 
£c⁄d
->hash) {

428 
	}
}

431 
ngx_uöt_t


432 
	$ngx_hâp_up°ªam_föd_chash_poöt
(
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
,

433 
uöt32_t
 
hash
)

435 
ngx_uöt_t
 
i
, 
j
, 
k
;

436 
ngx_hâp_up°ªam_chash_poöt_t
 *
poöt
;

440 
poöt
 = &
poöts
->point[0];

442 
i
 = 0;

443 
j
 = 
poöts
->
numbî
;

445 
i
 < 
j
) {

446 
k
 = (
i
 + 
j
) / 2;

448 i‡(
hash
 > 
poöt
[
k
].hash) {

449 
i
 = 
k
 + 1;

451 } i‡(
hash
 < 
poöt
[
k
].hash) {

452 
j
 = 
k
;

455  
k
;

459  
i
;

460 
	}
}

463 
ngx_öt_t


464 
	$ngx_hâp_up°ªam_öô_chash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

465 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

467 
uöt32_t
 
hash
;

468 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

469 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
;

471 i‡(
	`ngx_hâp_up°ªam_öô_hash_≥î
(
r
, 
us
Ë!
NGX_OK
) {

472  
NGX_ERROR
;

475 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_chash_≥î
;

477 
hp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

478 
hcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_hash_moduÀ
);

480 
hash
 = 
	`ngx_¸c32_l⁄g
(
hp
->
key
.
d©a
, hp->key.
Àn
);

482 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
hp
->
ºp
.
≥îs
);

484 
hp
->
hash
 = 
	`ngx_hâp_up°ªam_föd_chash_poöt
(
hcf
->
poöts
, hash);

486 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

488  
NGX_OK
;

489 
	}
}

492 
ngx_öt_t


493 
	$ngx_hâp_up°ªam_gë_chash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

495 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
 = 
d©a
;

497 
time_t
 
now
;

498 
öçå_t
 
m
;

499 
ngx_°r_t
 *
£rvî
;

500 
ngx_öt_t
 
tŸÆ
;

501 
ngx_uöt_t
 
i
, 
n
, 
be°_i
;

502 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

503 
ngx_hâp_up°ªam_chash_poöt_t
 *
poöt
;

504 
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
;

505 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

507 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

508 "gë c⁄si°íàhashÖìr,Åry: %ui", 
pc
->
åõs
);

510 
	`ngx_hâp_up°ªam_º_≥îs_wlock
(
hp
->
ºp
.
≥îs
);

512 i‡(
hp
->
åõs
 > 20 || hp->
ºp
.
≥îs
->
sögÀ
) {

513 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

514  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

517 
pc
->
ˇched
 = 0;

518 
pc
->
c⁄√˘i⁄
 = 
NULL
;

520 
now
 = 
	`ngx_time
();

521 
hcf
 = 
hp
->
c⁄f
;

523 
poöts
 = 
hcf
->points;

524 
poöt
 = &
poöts
->point[0];

527 
£rvî
 = 
poöt
[
hp
->
hash
 % 
poöts
->
numbî
].server;

529 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

531 
hp
->
hash
, 
£rvî
);

533 
be°
 = 
NULL
;

534 
be°_i
 = 0;

535 
tŸÆ
 = 0;

537 
≥î
 = 
hp
->
ºp
.
≥îs
->≥î, 
i
 = 0;

538 
≥î
;

539 
≥î
 =Öìr->
√xt
, 
i
++)

541 
n
 = 
i
 / (8 * (
uöçå_t
));

542 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

544 i‡(
hp
->
ºp
.
åõd
[
n
] & 
m
) {

548 i‡(
≥î
->
down
) {

552 i‡(
≥î
->
max_Áûs


553 && 
≥î
->
Áûs
 >≥î->
max_Áûs


554 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

559 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

563 i‡(
≥î
->
£rvî
.
Àn
 != server->len

564 || 
	`ngx_°∫cmp
(
≥î
->
£rvî
.
d©a
, sîvî->d©a, sîvî->
Àn
)

570 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

571 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

573 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

574 
≥î
->
ef„˘ive_weight
++;

577 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

578 
be°
 = 
≥î
;

579 
be°_i
 = 
i
;

583 i‡(
be°
) {

584 
be°
->
cuºít_weight
 -
tŸÆ
;

585 
found
;

588 
hp
->
hash
++;

589 
hp
->
åõs
++;

591 i‡(
hp
->
åõs
 > 20) {

592 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

593  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

597 
found
:

599 
hp
->
ºp
.
cuºít
 = 
be°
;

601 
pc
->
sockaddr
 = 
be°
->sockaddr;

602 
pc
->
sockÀn
 = 
be°
->socklen;

603 
pc
->
«me
 = &
be°
->name;

605 
be°
->
c⁄ns
++;

607 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

608 
be°
->
checked
 = 
now
;

611 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

613 
n
 = 
be°_i
 / (8 * (
uöçå_t
));

614 
m
 = (
uöçå_t
Ë1 << 
be°_i
 % (8 * (uintptr_t));

616 
hp
->
ºp
.
åõd
[
n
] |
m
;

618  
NGX_OK
;

619 
	}
}

623 
	$ngx_hâp_up°ªam_hash_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

625 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
c⁄f
;

627 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_hash_§v_c⁄f_t
));

628 i‡(
c⁄f
 =
NULL
) {

629  
NULL
;

632 
c⁄f
->
poöts
 = 
NULL
;

634  
c⁄f
;

635 
	}
}

639 
	$ngx_hâp_up°ªam_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

641 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
 = 
c⁄f
;

643 
ngx_°r_t
 *
vÆue
;

644 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

645 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

647 
vÆue
 = 
cf
->
¨gs
->
ñts
;

649 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

651 
ccv
.
cf
 = cf;

652 
ccv
.
vÆue
 = &value[1];

653 
ccv
.
com∂ex_vÆue
 = &
hcf
->
key
;

655 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

656  
NGX_CONF_ERROR
;

659 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

661 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

662 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

666 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


667 |
NGX_HTTP_UPSTREAM_WEIGHT


668 |
NGX_HTTP_UPSTREAM_MAX_CONNS


669 |
NGX_HTTP_UPSTREAM_MAX_FAILS


670 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


671 |
NGX_HTTP_UPSTREAM_DOWN
;

673 i‡(
cf
->
¨gs
->
√…s
 == 2) {

674 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_hash
;

676 } i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "consistent") == 0) {

677 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_chash
;

680 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

681 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

682  
NGX_CONF_ERROR
;

685  
NGX_CONF_OK
;

686 
	}
}

	@src/http/modules/ngx_http_upstream_ip_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

17 
ngx_uöt_t
 
	mhash
;

19 
u_ch¨
 
	maddæí
;

20 
u_ch¨
 *
	maddr
;

22 
u_ch¨
 
	måõs
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 } 
	tngx_hâp_up°ªam_ù_hash_≥î_d©a_t
;

28 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

31 *
d©a
);

32 *
ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

36 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_ù_hash_comm™ds
[] = {

38 { 
ngx_°rög
("ip_hash"),

39 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

40 
ngx_hâp_up°ªam_ù_hash
,

43 
NULL
 },

45 
ngx_nuŒ_comm™d


49 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ_˘x
 = {

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL


64 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ
 = {

65 
NGX_MODULE_V1
,

66 &
ngx_hâp_up°ªam_ù_hash_moduÀ_˘x
,

67 
ngx_hâp_up°ªam_ù_hash_comm™ds
,

68 
NGX_HTTP_MODULE
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NGX_MODULE_V1_PADDING


80 
u_ch¨
 
	gngx_hâp_up°ªam_ù_hash_p£udo_addr
[3];

83 
ngx_öt_t


84 
	$ngx_hâp_up°ªam_öô_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

86 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

87  
NGX_ERROR
;

90 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_ù_hash_≥î
;

92  
NGX_OK
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

100 
sockaddr_ö
 *
sö
;

101 #i‡(
NGX_HAVE_INET6
)

102 
sockaddr_ö6
 *
sö6
;

104 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
;

106 
ùhp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
));

107 i‡(
ùhp
 =
NULL
) {

108  
NGX_ERROR
;

111 
r
->
up°ªam
->
≥î
.
d©a
 = &
ùhp
->
ºp
;

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_ù_hash_≥î
;

119 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

121 
AF_INET
:

122 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

123 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
.
s_addr
;

124 
ùhp
->
addæí
 = 3;

127 #i‡(
NGX_HAVE_INET6
)

128 
AF_INET6
:

129 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

130 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö6
->
sö6_addr
.
s6_addr
;

131 
ùhp
->
addæí
 = 16;

136 
ùhp
->
addr
 = 
ngx_hâp_up°ªam_ù_hash_p£udo_addr
;

137 
ùhp
->
addæí
 = 3;

140 
ùhp
->
hash
 = 89;

141 
ùhp
->
åõs
 = 0;

142 
ùhp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

144  
NGX_OK
;

145 
	}
}

148 
ngx_öt_t


149 
	$ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

151 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
 = 
d©a
;

153 
time_t
 
now
;

154 
ngx_öt_t
 
w
;

155 
uöçå_t
 
m
;

156 
ngx_uöt_t
 
i
, 
n
, 
p
, 
hash
;

157 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

160 "gë i∞hashÖìr,Åry: %ui", 
pc
->
åõs
);

164 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
ùhp
->
ºp
.
≥îs
);

166 i‡(
ùhp
->
åõs
 > 20 || iphp->
ºp
.
≥îs
->
sögÀ
) {

167 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
ùhp
->
ºp
.
≥îs
);

168  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

171 
now
 = 
	`ngx_time
();

173 
pc
->
ˇched
 = 0;

174 
pc
->
c⁄√˘i⁄
 = 
NULL
;

176 
hash
 = 
ùhp
->hash;

180 
i
 = 0; i < (
ngx_uöt_t
Ë
ùhp
->
addæí
; i++) {

181 
hash
 = (hash * 113 + 
ùhp
->
addr
[
i
]) % 6271;

184 
w
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
tŸÆ_weight
;

185 
≥î
 = 
ùhp
->
ºp
.
≥îs
->peer;

186 
p
 = 0;

188 
w
 >
≥î
->
weight
) {

189 
w
 -
≥î
->
weight
;

190 
≥î
 =Öìr->
√xt
;

191 
p
++;

194 
n
 = 
p
 / (8 * (
uöçå_t
));

195 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

197 i‡(
ùhp
->
ºp
.
åõd
[
n
] & 
m
) {

198 
√xt
;

201 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

202 "gë i∞hashÖìr, hash: %uò%04XL", 
p
, (
uöt64_t
Ë
m
);

204 
	`ngx_hâp_up°ªam_º_≥î_lock
(
ùhp
->
ºp
.
≥îs
, 
≥î
);

206 i‡(
≥î
->
down
) {

207 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
ùhp
->
ºp
.
≥îs
, 
≥î
);

208 
√xt
;

211 i‡(
≥î
->
max_Áûs


212 && 
≥î
->
Áûs
 >≥î->
max_Áûs


213 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

215 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
ùhp
->
ºp
.
≥îs
, 
≥î
);

216 
√xt
;

219 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

220 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
ùhp
->
ºp
.
≥îs
, 
≥î
);

221 
√xt
;

226 
√xt
:

228 i‡(++
ùhp
->
åõs
 > 20) {

229 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
ùhp
->
ºp
.
≥îs
);

230  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

234 
ùhp
->
ºp
.
cuºít
 = 
≥î
;

236 
pc
->
sockaddr
 = 
≥î
->sockaddr;

237 
pc
->
sockÀn
 = 
≥î
->socklen;

238 
pc
->
«me
 = &
≥î
->name;

240 
≥î
->
c⁄ns
++;

242 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

243 
≥î
->
checked
 = 
now
;

246 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
ùhp
->
ºp
.
≥îs
, 
≥î
);

247 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
ùhp
->
ºp
.
≥îs
);

249 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

250 
ùhp
->
hash
 = hash;

252  
NGX_OK
;

253 
	}
}

257 
	$ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

259 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

261 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

263 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

264 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

268 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_ù_hash
;

270 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


271 |
NGX_HTTP_UPSTREAM_WEIGHT


272 |
NGX_HTTP_UPSTREAM_MAX_CONNS


273 |
NGX_HTTP_UPSTREAM_MAX_FAILS


274 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


275 |
NGX_HTTP_UPSTREAM_DOWN
;

277  
NGX_CONF_OK
;

278 
	}
}

	@src/http/modules/ngx_http_upstream_keepalive_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mmax_ˇched
;

16 
ngx_queue_t
 
	mˇche
;

17 
ngx_queue_t
 
	m‰ì
;

19 
ngx_hâp_up°ªam_öô_±
 
	m‹igöÆ_öô_up°ªam
;

20 
ngx_hâp_up°ªam_öô_≥î_±
 
	m‹igöÆ_öô_≥î
;

22 } 
	tngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
;

26 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

28 
ngx_queue_t
 
	mqueue
;

29 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

31 
sockÀn_t
 
	msockÀn
;

32 
ngx_sockaddr_t
 
	msockaddr
;

34 } 
	tngx_hâp_up°ªam_kì∑live_ˇche_t
;

38 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

40 
ngx_hâp_up°ªam_t
 *
	mup°ªam
;

42 *
	md©a
;

44 
ngx_evít_gë_≥î_±
 
	m‹igöÆ_gë_≥î
;

45 
ngx_evít_‰ì_≥î_±
 
	m‹igöÆ_‰ì_≥î
;

47 #i‡(
NGX_HTTP_SSL
)

48 
ngx_evít_£t_≥î_£ssi⁄_±
 
	m‹igöÆ_£t_£ssi⁄
;

49 
ngx_evít_ßve_≥î_£ssi⁄_±
 
	m‹igöÆ_ßve_£ssi⁄
;

52 } 
	tngx_hâp_up°ªam_kì∑live_≥î_d©a_t
;

55 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

58 *
d©a
);

59 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

60 *
d©a
, 
ngx_uöt_t
 
°©e
);

62 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

63 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

64 
ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
);

66 #i‡(
NGX_HTTP_SSL
)

67 
ngx_öt_t
 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(

68 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

69 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

70 *
d©a
);

73 *
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

74 *
ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

78 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_kì∑live_comm™ds
[] = {

80 { 
ngx_°rög
("keepalive"),

81 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_hâp_up°ªam_kì∑live
,

83 
NGX_HTTP_SRV_CONF_OFFSET
,

85 
NULL
 },

87 
ngx_nuŒ_comm™d


91 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ_˘x
 = {

92 
NULL
,

93 
NULL
,

95 
NULL
,

96 
NULL
,

98 
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
,

99 
NULL
,

101 
NULL
,

102 
NULL


106 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ
 = {

107 
NGX_MODULE_V1
,

108 &
ngx_hâp_up°ªam_kì∑live_moduÀ_˘x
,

109 
ngx_hâp_up°ªam_kì∑live_comm™ds
,

110 
NGX_HTTP_MODULE
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NGX_MODULE_V1_PADDING


122 
ngx_öt_t


123 
	$ngx_hâp_up°ªam_öô_kì∑live
(
ngx_c⁄f_t
 *
cf
,

124 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

126 
ngx_uöt_t
 
i
;

127 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

128 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ˇched
;

130 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

133 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

134 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

136 i‡(
kcf
->
	`‹igöÆ_öô_up°ªam
(
cf
, 
us
Ë!
NGX_OK
) {

137  
NGX_ERROR
;

140 
kcf
->
‹igöÆ_öô_≥î
 = 
us
->
≥î
.
öô
;

142 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_kì∑live_≥î
;

146 
ˇched
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

147 (
ngx_hâp_up°ªam_kì∑live_ˇche_t
Ë* 
kcf
->
max_ˇched
);

148 i‡(
ˇched
 =
NULL
) {

149  
NGX_ERROR
;

152 
	`ngx_queue_öô
(&
kcf
->
ˇche
);

153 
	`ngx_queue_öô
(&
kcf
->
‰ì
);

155 
i
 = 0; i < 
kcf
->
max_ˇched
; i++) {

156 
	`ngx_queue_ö£π_hód
(&
kcf
->
‰ì
, &
ˇched
[
i
].
queue
);

157 
ˇched
[
i
].
c⁄f
 = 
kcf
;

160  
NGX_OK
;

161 
	}
}

164 
ngx_öt_t


165 
	$ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

166 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

168 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
;

169 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

171 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

174 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

175 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

177 
kp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
));

178 i‡(
kp
 =
NULL
) {

179  
NGX_ERROR
;

182 i‡(
kcf
->
	`‹igöÆ_öô_≥î
(
r
, 
us
Ë!
NGX_OK
) {

183  
NGX_ERROR
;

186 
kp
->
c⁄f
 = 
kcf
;

187 
kp
->
up°ªam
 = 
r
->upstream;

188 
kp
->
d©a
 = 
r
->
up°ªam
->
≥î
.data;

189 
kp
->
‹igöÆ_gë_≥î
 = 
r
->
up°ªam
->
≥î
.
gë
;

190 
kp
->
‹igöÆ_‰ì_≥î
 = 
r
->
up°ªam
->
≥î
.
‰ì
;

192 
r
->
up°ªam
->
≥î
.
d©a
 = 
kp
;

193 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_kì∑live_≥î
;

194 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
;

196 #i‡(
NGX_HTTP_SSL
)

197 
kp
->
‹igöÆ_£t_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
;

198 
kp
->
‹igöÆ_ßve_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
;

199 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
;

200 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
;

203  
NGX_OK
;

204 
	}
}

207 
ngx_öt_t


208 
	$ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

210 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

211 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

213 
ngx_öt_t
 
rc
;

214 
ngx_queue_t
 *
q
, *
ˇche
;

215 
ngx_c⁄√˘i⁄_t
 *
c
;

217 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

222 
rc
 = 
kp
->
	`‹igöÆ_gë_≥î
(
pc
, kp->
d©a
);

224 i‡(
rc
 !
NGX_OK
) {

225  
rc
;

230 
ˇche
 = &
kp
->
c⁄f
->cache;

232 
q
 = 
	`ngx_queue_hód
(
ˇche
);

233 
q
 !
	`ngx_queue_£¡öñ
(
ˇche
);

234 
q
 = 
	`ngx_queue_√xt
(q))

236 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

237 
c
 = 
ôem
->
c⁄√˘i⁄
;

239 i‡(
	`ngx_memn2cmp
((
u_ch¨
 *Ë&
ôem
->
sockaddr
, (u_ch¨ *Ë
pc
->sockaddr,

240 
ôem
->
sockÀn
, 
pc
->socklen)

243 
	`ngx_queue_ªmove
(
q
);

244 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
‰ì
, 
q
);

246 
found
;

250  
NGX_OK
;

252 
found
:

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

255 "gë kì∑livê≥î: usög c⁄√˘i⁄ %p", 
c
);

257 
c
->
idÀ
 = 0;

258 
c
->
£¡
 = 0;

259 
c
->
log
 = 
pc
->log;

260 
c
->
ªad
->
log
 = 
pc
->log;

261 
c
->
wrôe
->
log
 = 
pc
->log;

262 
c
->
poﬁ
->
log
 = 
pc
->log;

264 
pc
->
c⁄√˘i⁄
 = 
c
;

265 
pc
->
ˇched
 = 1;

267  
NGX_DONE
;

268 
	}
}

272 
	$ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

273 
ngx_uöt_t
 
°©e
)

275 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

276 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

278 
ngx_queue_t
 *
q
;

279 
ngx_c⁄√˘i⁄_t
 *
c
;

280 
ngx_hâp_up°ªam_t
 *
u
;

282 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

287 
u
 = 
kp
->
up°ªam
;

288 
c
 = 
pc
->
c⁄√˘i⁄
;

290 i‡(
°©e
 & 
NGX_PEER_FAILED


291 || 
c
 =
NULL


292 || 
c
->
ªad
->
eof


293 || 
c
->
ªad
->
îr‹


294 || 
c
->
ªad
->
timedout


295 || 
c
->
wrôe
->
îr‹


296 || 
c
->
wrôe
->
timedout
)

298 
övÆid
;

301 i‡(!
u
->
kì∑live
) {

302 
övÆid
;

305 i‡(!
u
->
ªque°_body_£¡
) {

306 
övÆid
;

309 i‡(
ngx_ãrmö©e
 || 
ngx_exôög
) {

310 
övÆid
;

313 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

314 
övÆid
;

317 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

318 "‰ì kì∑livê≥î: savög c⁄√˘i⁄ %p", 
c
);

320 i‡(
	`ngx_queue_em±y
(&
kp
->
c⁄f
->
‰ì
)) {

322 
q
 = 
	`ngx_queue_œ°
(&
kp
->
c⁄f
->
ˇche
);

323 
	`ngx_queue_ªmove
(
q
);

325 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

327 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
ôem
->
c⁄√˘i⁄
);

330 
q
 = 
	`ngx_queue_hód
(&
kp
->
c⁄f
->
‰ì
);

331 
	`ngx_queue_ªmove
(
q
);

333 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

336 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
ˇche
, 
q
);

338 
ôem
->
c⁄√˘i⁄
 = 
c
;

340 
pc
->
c⁄√˘i⁄
 = 
NULL
;

342 i‡(
c
->
ªad
->
timî_£t
) {

343 
c
->
ªad
->
dñayed
 = 0;

344 
	`ngx_dñ_timî
(
c
->
ªad
);

346 i‡(
c
->
wrôe
->
timî_£t
) {

347 
	`ngx_dñ_timî
(
c
->
wrôe
);

350 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
;

351 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
;

353 
c
->
d©a
 = 
ôem
;

354 
c
->
idÀ
 = 1;

355 
c
->
log
 = 
ngx_cy˛e
->log;

356 
c
->
ªad
->
log
 = 
ngx_cy˛e
->log;

357 
c
->
wrôe
->
log
 = 
ngx_cy˛e
->log;

358 
c
->
poﬁ
->
log
 = 
ngx_cy˛e
->log;

360 
ôem
->
sockÀn
 = 
pc
->socklen;

361 
	`ngx_mem˝y
(&
ôem
->
sockaddr
, 
pc
->sockaddr,Öc->
sockÀn
);

363 i‡(
c
->
ªad
->
ªady
) {

364 
	`ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
c
->
ªad
);

367 
övÆid
:

369 
kp
->
	`‹igöÆ_‰ì_≥î
(
pc
, kp->
d©a
, 
°©e
);

370 
	}
}

374 
	$ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

376 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

378 
	}
}

382 
	$ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
)

384 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

385 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

387 
n
;

388 
buf
[1];

389 
ngx_c⁄√˘i⁄_t
 *
c
;

391 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

394 
c
 = 
ev
->
d©a
;

396 i‡(
c
->
˛o£
) {

397 
˛o£
;

400 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

402 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

403 
ev
->
ªady
 = 0;

405 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

406 
˛o£
;

412 
˛o£
:

414 
ôem
 = 
c
->
d©a
;

415 
c⁄f
 = 
ôem
->conf;

417 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
c
);

419 
	`ngx_queue_ªmove
(&
ôem
->
queue
);

420 
	`ngx_queue_ö£π_hód
(&
c⁄f
->
‰ì
, &
ôem
->
queue
);

421 
	}
}

425 
	$ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
)

428 #i‡(
NGX_HTTP_SSL
)

430 i‡(
c
->
s¶
) {

431 
c
->
s¶
->
no_waô_shutdown
 = 1;

432 
c
->
s¶
->
no_£nd_shutdown
 = 1;

434 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

435 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£
;

442 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

443 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

444 
	}
}

447 #i‡(
NGX_HTTP_SSL
)

449 
ngx_öt_t


450 
	$ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

452 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

454  
kp
->
	`‹igöÆ_£t_£ssi⁄
(
pc
, kp->
d©a
);

455 
	}
}

459 
	$ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

461 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

463 
kp
->
	`‹igöÆ_ßve_£ssi⁄
(
pc
, kp->
d©a
);

465 
	}
}

471 
	$ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

473 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

475 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

476 (
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
));

477 i‡(
c⁄f
 =
NULL
) {

478  
NULL
;

489  
c⁄f
;

490 
	}
}

494 
	$ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

496 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

497 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
 = 
c⁄f
;

499 
ngx_öt_t
 
n
;

500 
ngx_°r_t
 *
vÆue
;

502 i‡(
kcf
->
max_ˇched
) {

508 
vÆue
 = 
cf
->
¨gs
->
ñts
;

510 
n
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

512 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

513 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

515 &
vÆue
[1], &
cmd
->
«me
);

516  
NGX_CONF_ERROR
;

519 
kcf
->
max_ˇched
 = 
n
;

521 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

523 
kcf
->
‹igöÆ_öô_up°ªam
 = 
uscf
->
≥î
.
öô_up°ªam


524 ? 
uscf
->
≥î
.
öô_up°ªam


525 : 
ngx_hâp_up°ªam_öô_round_robö
;

527 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_kì∑live
;

529  
NGX_CONF_OK
;

530 
	}
}

	@src/http/modules/ngx_http_upstream_least_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

15 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(

16 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

17 *
ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

18 *
c⁄f
);

21 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
[] = {

23 { 
ngx_°rög
("least_conn"),

24 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

25 
ngx_hâp_up°ªam_Àa°_c⁄n
,

28 
NULL
 },

30 
ngx_nuŒ_comm™d


34 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
 = {

35 
NULL
,

36 
NULL
,

38 
NULL
,

39 
NULL
,

41 
NULL
,

42 
NULL
,

44 
NULL
,

45 
NULL


49 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
 = {

50 
NGX_MODULE_V1
,

51 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
,

52 
ngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
,

53 
NGX_HTTP_MODULE
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NGX_MODULE_V1_PADDING


65 
ngx_öt_t


66 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
,

67 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

69 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

72 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

73  
NGX_ERROR
;

76 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
;

78  
NGX_OK
;

79 
	}
}

82 
ngx_öt_t


83 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

86 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

89 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

90  
NGX_ERROR
;

93 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
;

95  
NGX_OK
;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

102 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

104 
time_t
 
now
;

105 
uöçå_t
 
m
;

106 
ngx_öt_t
 
rc
, 
tŸÆ
;

107 
ngx_uöt_t
 
i
, 
n
, 
p
, 
m™y
;

108 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

109 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

112 "gëÜó° c⁄¿≥î,Åry: %ui", 
pc
->
åõs
);

114 i‡(
ºp
->
≥îs
->
sögÀ
) {

115  
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

118 
pc
->
ˇched
 = 0;

119 
pc
->
c⁄√˘i⁄
 = 
NULL
;

121 
now
 = 
	`ngx_time
();

123 
≥îs
 = 
ºp
->peers;

125 
	`ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
);

127 
be°
 = 
NULL
;

128 
tŸÆ
 = 0;

130 #i‡(
NGX_SUPPRESS_WARN
)

131 
m™y
 = 0;

132 
p
 = 0;

135 
≥î
 = 
≥îs
->≥î, 
i
 = 0;

136 
≥î
;

137 
≥î
 =Öìr->
√xt
, 
i
++)

139 
n
 = 
i
 / (8 * (
uöçå_t
));

140 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

142 i‡(
ºp
->
åõd
[
n
] & 
m
) {

146 i‡(
≥î
->
down
) {

150 i‡(
≥î
->
max_Áûs


151 && 
≥î
->
Áûs
 >≥î->
max_Áûs


152 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

157 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

167 i‡(
be°
 =
NULL


168 || 
≥î
->
c⁄ns
 * 
be°
->
weight
 < best->conns *Öeer->weight)

170 
be°
 = 
≥î
;

171 
m™y
 = 0;

172 
p
 = 
i
;

174 } i‡(
≥î
->
c⁄ns
 * 
be°
->
weight
 == best->conns *Öeer->weight) {

175 
m™y
 = 1;

179 i‡(
be°
 =
NULL
) {

180 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

183 
Áûed
;

186 i‡(
m™y
) {

187 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

190 
≥î
 = 
be°
, 
i
 = 
p
;

191 
≥î
;

192 
≥î
 =Öìr->
√xt
, 
i
++)

194 
n
 = 
i
 / (8 * (
uöçå_t
));

195 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

197 i‡(
ºp
->
åõd
[
n
] & 
m
) {

201 i‡(
≥î
->
down
) {

205 i‡(
≥î
->
c⁄ns
 * 
be°
->
weight
 != best->conns *Öeer->weight) {

209 i‡(
≥î
->
max_Áûs


210 && 
≥î
->
Áûs
 >≥î->
max_Áûs


211 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

216 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

220 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

221 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

223 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

224 
≥î
->
ef„˘ive_weight
++;

227 i‡(
≥î
->
cuºít_weight
 > 
be°
->current_weight) {

228 
be°
 = 
≥î
;

229 
p
 = 
i
;

234 
be°
->
cuºít_weight
 -
tŸÆ
;

236 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

237 
be°
->
checked
 = 
now
;

240 
pc
->
sockaddr
 = 
be°
->sockaddr;

241 
pc
->
sockÀn
 = 
be°
->socklen;

242 
pc
->
«me
 = &
be°
->name;

244 
be°
->
c⁄ns
++;

246 
ºp
->
cuºít
 = 
be°
;

248 
n
 = 
p
 / (8 * (
uöçå_t
));

249 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

251 
ºp
->
åõd
[
n
] |
m
;

253 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

255  
NGX_OK
;

257 
Áûed
:

259 i‡(
≥îs
->
√xt
) {

260 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

263 
ºp
->
≥îs
 =Öìrs->
√xt
;

265 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

266 / (8 * (
uöçå_t
));

268 
i
 = 0; i < 
n
; i++) {

269 
ºp
->
åõd
[
i
] = 0;

272 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

274 
rc
 = 
	`ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
pc
, 
ºp
);

276 i‡(
rc
 !
NGX_BUSY
) {

277  
rc
;

280 
	`ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
);

283 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

285 
pc
->
«me
 = 
≥îs
->name;

287  
NGX_BUSY
;

288 
	}
}

292 
	$ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

294 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

296 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

298 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

299 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

303 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n
;

305 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


306 |
NGX_HTTP_UPSTREAM_WEIGHT


307 |
NGX_HTTP_UPSTREAM_MAX_CONNS


308 |
NGX_HTTP_UPSTREAM_MAX_FAILS


309 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


310 |
NGX_HTTP_UPSTREAM_DOWN


311 |
NGX_HTTP_UPSTREAM_BACKUP
;

313  
NGX_CONF_OK
;

314 
	}
}

	@src/http/modules/ngx_http_upstream_random_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

13 
ngx_hâp_up°ªam_º_≥î_t
 *
	m≥î
;

14 
ngx_uöt_t
 
	mønge
;

15 } 
	tngx_hâp_up°ªam_øndom_ønge_t
;

19 
ngx_uöt_t
 
	mtwo
;

20 
ngx_hâp_up°ªam_øndom_ønge_t
 *
	mønges
;

21 } 
	tngx_hâp_up°ªam_øndom_§v_c⁄f_t
;

26 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

28 
ngx_hâp_up°ªam_øndom_§v_c⁄f_t
 *
	mc⁄f
;

29 
u_ch¨
 
	måõs
;

30 } 
	tngx_hâp_up°ªam_øndom_≥î_d©a_t
;

33 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_øndom
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

35 
ngx_öt_t
 
ngx_hâp_up°ªam_upd©e_øndom
(
ngx_poﬁ_t
 *
poﬁ
,

36 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

38 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_øndom_≥î
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_øndom_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

41 *
d©a
);

42 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_øndom2_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

43 *
d©a
);

44 
ngx_uöt_t
 
ngx_hâp_up°ªam_≥ek_øndom_≥î
(

45 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
,

46 
ngx_hâp_up°ªam_øndom_≥î_d©a_t
 *
Ω
);

47 *
ngx_hâp_up°ªam_øndom_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

48 *
ngx_hâp_up°ªam_øndom
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

49 *
c⁄f
);

52 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_øndom_comm™ds
[] = {

54 { 
ngx_°rög
("random"),

55 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
|
NGX_CONF_TAKE12
,

56 
ngx_hâp_up°ªam_øndom
,

57 
NGX_HTTP_SRV_CONF_OFFSET
,

59 
NULL
 },

61 
ngx_nuŒ_comm™d


65 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_øndom_moduÀ_˘x
 = {

66 
NULL
,

67 
NULL
,

69 
NULL
,

70 
NULL
,

72 
ngx_hâp_up°ªam_øndom_¸óã_c⁄f
,

73 
NULL
,

75 
NULL
,

76 
NULL


80 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_øndom_moduÀ
 = {

81 
NGX_MODULE_V1
,

82 &
ngx_hâp_up°ªam_øndom_moduÀ_˘x
,

83 
ngx_hâp_up°ªam_øndom_comm™ds
,

84 
NGX_HTTP_MODULE
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_up°ªam_öô_øndom
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

99 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "initÑandom");

101 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

102  
NGX_ERROR
;

105 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_øndom_≥î
;

107 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

108 i‡(
us
->
shm_z⁄e
) {

109  
NGX_OK
;

113  
	`ngx_hâp_up°ªam_upd©e_øndom
(
cf
->
poﬁ
, 
us
);

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_hâp_up°ªam_upd©e_øndom
(
ngx_poﬁ_t
 *
poﬁ
,

119 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

121 
size_t
 
size
;

122 
ngx_uöt_t
 
i
, 
tŸÆ_weight
;

123 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

124 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

125 
ngx_hâp_up°ªam_øndom_ønge_t
 *
ønges
;

126 
ngx_hâp_up°ªam_øndom_§v_c⁄f_t
 *
rcf
;

128 
rcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_øndom_moduÀ
);

130 
≥îs
 = 
us
->
≥î
.
d©a
;

132 
size
 = 
≥îs
->
numbî
 * (
ngx_hâp_up°ªam_øndom_ønge_t
);

134 
ønges
 = 
poﬁ
 ? 
	`ngx_∑Œoc
’oﬁ, 
size
Ë: 
	`ngx_Æloc
(size, 
ngx_cy˛e
->
log
);

135 i‡(
ønges
 =
NULL
) {

136  
NGX_ERROR
;

139 
tŸÆ_weight
 = 0;

141 
≥î
 = 
≥îs
->≥î, 
i
 = 0;Öìr;Öì∏≥î->
√xt
, i++) {

142 
ønges
[
i
].
≥î
 =Öeer;

143 
ønges
[
i
].
ønge
 = 
tŸÆ_weight
;

144 
tŸÆ_weight
 +
≥î
->
weight
;

147 
rcf
->
ønges
 =Ñanges;

149  
NGX_OK
;

150 
	}
}

153 
ngx_öt_t


154 
	$ngx_hâp_up°ªam_öô_øndom_≥î
(
ngx_hâp_ªque°_t
 *
r
,

155 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

157 
ngx_hâp_up°ªam_øndom_§v_c⁄f_t
 *
rcf
;

158 
ngx_hâp_up°ªam_øndom_≥î_d©a_t
 *
Ω
;

160 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

163 
rcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_øndom_moduÀ
);

165 
Ω
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_øndom_≥î_d©a_t
));

166 i‡(
Ω
 =
NULL
) {

167  
NGX_ERROR
;

170 
r
->
up°ªam
->
≥î
.
d©a
 = &
Ω
->
ºp
;

172 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

173  
NGX_ERROR
;

176 i‡(
rcf
->
two
) {

177 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_øndom2_≥î
;

180 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_øndom_≥î
;

183 
Ω
->
c⁄f
 = 
rcf
;

184 
Ω
->
åõs
 = 0;

186 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
Ω
->
ºp
.
≥îs
);

188 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

189 i‡(
Ω
->
ºp
.
≥îs
->
shpoﬁ
 && 
rcf
->
ønges
 =
NULL
) {

190 i‡(
	`ngx_hâp_up°ªam_upd©e_øndom
(
NULL
, 
us
Ë!
NGX_OK
) {

191 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
Ω
->
ºp
.
≥îs
);

192  
NGX_ERROR
;

197 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
Ω
->
ºp
.
≥îs
);

199  
NGX_OK
;

200 
	}
}

203 
ngx_öt_t


204 
	$ngx_hâp_up°ªam_gë_øndom_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

206 
ngx_hâp_up°ªam_øndom_≥î_d©a_t
 *
Ω
 = 
d©a
;

208 
time_t
 
now
;

209 
uöçå_t
 
m
;

210 
ngx_uöt_t
 
i
, 
n
;

211 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

212 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

213 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

216 "gëÑ™domÖìr,Åry: %ui", 
pc
->
åõs
);

218 
ºp
 = &
Ω
->rrp;

219 
≥îs
 = 
ºp
->peers;

221 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
≥îs
);

223 i‡(
Ω
->
åõs
 > 20 || 
≥îs
->
sögÀ
) {

224 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

225  
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

228 
pc
->
ˇched
 = 0;

229 
pc
->
c⁄√˘i⁄
 = 
NULL
;

231 
now
 = 
	`ngx_time
();

235 
i
 = 
	`ngx_hâp_up°ªam_≥ek_øndom_≥î
(
≥îs
, 
Ω
);

237 
≥î
 = 
Ω
->
c⁄f
->
ønges
[
i
].peer;

239 
n
 = 
i
 / (8 * (
uöçå_t
));

240 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

242 i‡(
ºp
->
åõd
[
n
] & 
m
) {

243 
√xt
;

246 
	`ngx_hâp_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
);

248 i‡(
≥î
->
down
) {

249 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

250 
√xt
;

253 i‡(
≥î
->
max_Áûs


254 && 
≥î
->
Áûs
 >≥î->
max_Áûs


255 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

257 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

258 
√xt
;

261 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

262 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

263 
√xt
;

268 
√xt
:

270 i‡(++
Ω
->
åõs
 > 20) {

271 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

272  
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

276 
ºp
->
cuºít
 = 
≥î
;

278 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

279 
≥î
->
checked
 = 
now
;

282 
pc
->
sockaddr
 = 
≥î
->sockaddr;

283 
pc
->
sockÀn
 = 
≥î
->socklen;

284 
pc
->
«me
 = &
≥î
->name;

286 
≥î
->
c⁄ns
++;

288 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

289 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

291 
ºp
->
åõd
[
n
] |
m
;

293  
NGX_OK
;

294 
	}
}

297 
ngx_öt_t


298 
	$ngx_hâp_up°ªam_gë_øndom2_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

300 
ngx_hâp_up°ªam_øndom_≥î_d©a_t
 *
Ω
 = 
d©a
;

302 
time_t
 
now
;

303 
uöçå_t
 
m
;

304 
ngx_uöt_t
 
i
, 
n
, 
p
;

305 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
¥ev
;

306 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

307 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

309 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

310 "gëÑ™dom2Öìr,Åry: %ui", 
pc
->
åõs
);

312 
ºp
 = &
Ω
->rrp;

313 
≥îs
 = 
ºp
->peers;

315 
	`ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
);

317 i‡(
Ω
->
åõs
 > 20 || 
≥îs
->
sögÀ
) {

318 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

319  
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

322 
pc
->
ˇched
 = 0;

323 
pc
->
c⁄√˘i⁄
 = 
NULL
;

325 
now
 = 
	`ngx_time
();

327 
¥ev
 = 
NULL
;

329 #i‡(
NGX_SUPPRESS_WARN
)

330 
p
 = 0;

335 
i
 = 
	`ngx_hâp_up°ªam_≥ek_øndom_≥î
(
≥îs
, 
Ω
);

337 
≥î
 = 
Ω
->
c⁄f
->
ønges
[
i
].peer;

339 i‡(
≥î
 =
¥ev
) {

340 
√xt
;

343 
n
 = 
i
 / (8 * (
uöçå_t
));

344 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

346 i‡(
ºp
->
åõd
[
n
] & 
m
) {

347 
√xt
;

350 i‡(
≥î
->
down
) {

351 
√xt
;

354 i‡(
≥î
->
max_Áûs


355 && 
≥î
->
Áûs
 >≥î->
max_Áûs


356 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

358 
√xt
;

361 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

362 
√xt
;

365 i‡(
¥ev
) {

366 i‡(
≥î
->
c⁄ns
 * 
¥ev
->
weight
 >Örev->conns *Öeer->weight) {

367 
≥î
 = 
¥ev
;

368 
n
 = 
p
 / (8 * (
uöçå_t
));

369 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

375 
¥ev
 = 
≥î
;

376 
p
 = 
i
;

378 
√xt
:

380 i‡(++
Ω
->
åõs
 > 20) {

381 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

382  
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

386 
ºp
->
cuºít
 = 
≥î
;

388 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

389 
≥î
->
checked
 = 
now
;

392 
pc
->
sockaddr
 = 
≥î
->sockaddr;

393 
pc
->
sockÀn
 = 
≥î
->socklen;

394 
pc
->
«me
 = &
≥î
->name;

396 
≥î
->
c⁄ns
++;

398 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

400 
ºp
->
åõd
[
n
] |
m
;

402  
NGX_OK
;

403 
	}
}

406 
ngx_uöt_t


407 
	$ngx_hâp_up°ªam_≥ek_øndom_≥î
(
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
,

408 
ngx_hâp_up°ªam_øndom_≥î_d©a_t
 *
Ω
)

410 
ngx_uöt_t
 
i
, 
j
, 
k
, 
x
;

412 
x
 = 
	`ngx_øndom
(Ë% 
≥îs
->
tŸÆ_weight
;

414 
i
 = 0;

415 
j
 = 
≥îs
->
numbî
;

417 
j
 - 
i
 > 1) {

418 
k
 = (
i
 + 
j
) / 2;

420 i‡(
x
 < 
Ω
->
c⁄f
->
ønges
[
k
].
ønge
) {

421 
j
 = 
k
;

424 
i
 = 
k
;

428  
i
;

429 
	}
}

433 
	$ngx_hâp_up°ªam_øndom_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

435 
ngx_hâp_up°ªam_øndom_§v_c⁄f_t
 *
c⁄f
;

437 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_øndom_§v_c⁄f_t
));

438 i‡(
c⁄f
 =
NULL
) {

439  
NULL
;

448  
c⁄f
;

449 
	}
}

453 
	$ngx_hâp_up°ªam_øndom
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

455 
ngx_hâp_up°ªam_øndom_§v_c⁄f_t
 *
rcf
 = 
c⁄f
;

457 
ngx_°r_t
 *
vÆue
;

458 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

460 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

462 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

463 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

467 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_øndom
;

469 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


470 |
NGX_HTTP_UPSTREAM_WEIGHT


471 |
NGX_HTTP_UPSTREAM_MAX_CONNS


472 |
NGX_HTTP_UPSTREAM_MAX_FAILS


473 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


474 |
NGX_HTTP_UPSTREAM_DOWN
;

476 i‡(
cf
->
¨gs
->
√…s
 == 1) {

477  
NGX_CONF_OK
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "two") == 0) {

483 
rcf
->
two
 = 1;

486 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

487 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

488  
NGX_CONF_ERROR
;

491 i‡(
cf
->
¨gs
->
√…s
 == 2) {

492  
NGX_CONF_OK
;

495 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "least_conn") != 0) {

496 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

497 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

498  
NGX_CONF_ERROR
;

501  
NGX_CONF_OK
;

502 
	}
}

	@src/http/modules/ngx_http_upstream_zone_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_up°ªam_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

14 *
c⁄f
);

15 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
,

16 *
d©a
);

17 
ngx_hâp_up°ªam_º_≥îs_t
 *
ngx_hâp_up°ªam_z⁄e_c›y_≥îs
(

18 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
);

19 
ngx_hâp_up°ªam_º_≥î_t
 *
ngx_hâp_up°ªam_z⁄e_c›y_≥î
(

20 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, 
ngx_hâp_up°ªam_º_≥î_t
 *
§c
);

23 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_z⁄e_comm™ds
[] = {

25 { 
ngx_°rög
("zone"),

26 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE12
,

27 
ngx_hâp_up°ªam_z⁄e
,

30 
NULL
 },

32 
ngx_nuŒ_comm™d


36 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_z⁄e_moduÀ_˘x
 = {

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL
,

43 
NULL
,

44 
NULL
,

46 
NULL
,

47 
NULL


51 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_z⁄e_moduÀ
 = {

52 
NGX_MODULE_V1
,

53 &
ngx_hâp_up°ªam_z⁄e_moduÀ_˘x
,

54 
ngx_hâp_up°ªam_z⁄e_comm™ds
,

55 
NGX_HTTP_MODULE
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NGX_MODULE_V1_PADDING


68 
	$ngx_hâp_up°ªam_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

70 
ssize_t
 
size
;

71 
ngx_°r_t
 *
vÆue
;

72 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

73 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

75 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

76 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

78 
vÆue
 = 
cf
->
¨gs
->
ñts
;

80 i‡(!
vÆue
[1].
Àn
) {

81 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

82 "övÆid z⁄ê«mê\"%V\"", &
vÆue
[1]);

83  
NGX_CONF_ERROR
;

86 i‡(
cf
->
¨gs
->
√…s
 == 3) {

87 
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

89 i‡(
size
 =
NGX_ERROR
) {

90 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

91 "övÆid z⁄êsizê\"%V\"", &
vÆue
[2]);

92  
NGX_CONF_ERROR
;

95 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

96 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

97 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[1]);

98  
NGX_CONF_ERROR
;

102 
size
 = 0;

105 
uscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 
size
,

106 &
ngx_hâp_up°ªam_moduÀ
);

107 i‡(
uscf
->
shm_z⁄e
 =
NULL
) {

108  
NGX_CONF_ERROR
;

111 
uscf
->
shm_z⁄e
->
öô
 = 
ngx_hâp_up°ªam_öô_z⁄e
;

112 
uscf
->
shm_z⁄e
->
d©a
 = 
umcf
;

114 
uscf
->
shm_z⁄e
->
n‹eu£
 = 1;

116  
NGX_CONF_OK
;

117 
	}
}

120 
ngx_öt_t


121 
	$ngx_hâp_up°ªam_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

123 
size_t
 
Àn
;

124 
ngx_uöt_t
 
i
;

125 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

126 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, **
≥î•
;

127 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

128 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

130 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

131 
umcf
 = 
shm_z⁄e
->
d©a
;

132 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

134 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

135 
≥îs
 = 
shpoﬁ
->
d©a
;

137 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

138 
uscf
 = 
uscÂ
[
i
];

140 i‡(
uscf
->
shm_z⁄e
 != shm_zone) {

144 
uscf
->
≥î
.
d©a
 = 
≥îs
;

145 
≥îs
 =Öìrs->
z⁄e_√xt
;

148  
NGX_OK
;

151 
Àn
 = (" i¿up°ªam z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

153 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

154 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

155  
NGX_ERROR
;

158 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in upstream zone \"%V\"%Z",

159 &
shm_z⁄e
->
shm
.
«me
);

164 
≥î•
 = (
ngx_hâp_up°ªam_º_≥îs_t
 **Ë(*Ë&
shpoﬁ
->
d©a
;

166 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

167 
uscf
 = 
uscÂ
[
i
];

169 i‡(
uscf
->
shm_z⁄e
 != shm_zone) {

173 
≥îs
 = 
	`ngx_hâp_up°ªam_z⁄e_c›y_≥îs
(
shpoﬁ
, 
uscf
);

174 i‡(
≥îs
 =
NULL
) {

175  
NGX_ERROR
;

178 *
≥î•
 = 
≥îs
;

179 
≥î•
 = &
≥îs
->
z⁄e_√xt
;

182  
NGX_OK
;

183 
	}
}

186 
ngx_hâp_up°ªam_º_≥îs_t
 *

187 
	$ngx_hâp_up°ªam_z⁄e_c›y_≥îs
(
ngx_¶ab_poﬁ_t
 *
shpoﬁ
,

188 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
)

190 
ngx_°r_t
 *
«me
;

191 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, **
≥îp
;

192 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

194 
≥îs
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
));

195 i‡(
≥îs
 =
NULL
) {

196  
NULL
;

199 
	`ngx_mem˝y
(
≥îs
, 
uscf
->
≥î
.
d©a
, (
ngx_hâp_up°ªam_º_≥îs_t
));

201 
«me
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_°r_t
));

202 i‡(
«me
 =
NULL
) {

203  
NULL
;

206 
«me
->
d©a
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, 
≥îs
->«me->
Àn
);

207 i‡(
«me
->
d©a
 =
NULL
) {

208  
NULL
;

211 
	`ngx_mem˝y
(
«me
->
d©a
, 
≥îs
->«me->d©a,Öìrs->«me->
Àn
);

212 
«me
->
Àn
 = 
≥îs
->name->len;

214 
≥îs
->
«me
 =Çame;

216 
≥îs
->
shpoﬁ
 = shpool;

218 
≥îp
 = &
≥îs
->
≥î
; *≥îp;ÖìΩ = &≥î->
√xt
) {

220 
≥î
 = 
	`ngx_hâp_up°ªam_z⁄e_c›y_≥î
(
≥îs
, *
≥îp
);

221 i‡(
≥î
 =
NULL
) {

222  
NULL
;

225 *
≥îp
 = 
≥î
;

228 i‡(
≥îs
->
√xt
 =
NULL
) {

229 
d⁄e
;

232 
backup
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
));

233 i‡(
backup
 =
NULL
) {

234  
NULL
;

237 
	`ngx_mem˝y
(
backup
, 
≥îs
->
√xt
, (
ngx_hâp_up°ªam_º_≥îs_t
));

239 
backup
->
«me
 =Çame;

241 
backup
->
shpoﬁ
 = shpool;

243 
≥îp
 = &
backup
->
≥î
; *≥îp;ÖìΩ = &≥î->
√xt
) {

245 
≥î
 = 
	`ngx_hâp_up°ªam_z⁄e_c›y_≥î
(
backup
, *
≥îp
);

246 i‡(
≥î
 =
NULL
) {

247  
NULL
;

250 *
≥îp
 = 
≥î
;

253 
≥îs
->
√xt
 = 
backup
;

255 
d⁄e
:

257 
uscf
->
≥î
.
d©a
 = 
≥îs
;

259  
≥îs
;

260 
	}
}

263 
ngx_hâp_up°ªam_º_≥î_t
 *

264 
	$ngx_hâp_up°ªam_z⁄e_c›y_≥î
(
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
,

265 
ngx_hâp_up°ªam_º_≥î_t
 *
§c
)

267 
ngx_¶ab_poﬁ_t
 *
poﬁ
;

268 
ngx_hâp_up°ªam_º_≥î_t
 *
d°
;

270 
poﬁ
 = 
≥îs
->
shpoﬁ
;

272 
d°
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_t
));

273 i‡(
d°
 =
NULL
) {

274  
NULL
;

277 i‡(
§c
) {

278 
	`ngx_mem˝y
(
d°
, 
§c
, (
ngx_hâp_up°ªam_º_≥î_t
));

279 
d°
->
sockaddr
 = 
NULL
;

280 
d°
->
«me
.
d©a
 = 
NULL
;

281 
d°
->
£rvî
.
d©a
 = 
NULL
;

284 
d°
->
sockaddr
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, (
ngx_sockaddr_t
));

285 i‡(
d°
->
sockaddr
 =
NULL
) {

286 
Áûed
;

289 
d°
->
«me
.
d©a
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

290 i‡(
d°
->
«me
.
d©a
 =
NULL
) {

291 
Áûed
;

294 i‡(
§c
) {

295 
	`ngx_mem˝y
(
d°
->
sockaddr
, 
§c
->sockaddr, src->
sockÀn
);

296 
	`ngx_mem˝y
(
d°
->
«me
.
d©a
, 
§c
->«me.d©a, src->«me.
Àn
);

298 
d°
->
£rvî
.
d©a
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
§c
->£rvî.
Àn
);

299 i‡(
d°
->
£rvî
.
d©a
 =
NULL
) {

300 
Áûed
;

303 
	`ngx_mem˝y
(
d°
->
£rvî
.
d©a
, 
§c
->£rvî.d©a, src->£rvî.
Àn
);

306  
d°
;

308 
Áûed
:

310 i‡(
d°
->
£rvî
.
d©a
) {

311 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
->
£rvî
.
d©a
);

314 i‡(
d°
->
«me
.
d©a
) {

315 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
->
«me
.
d©a
);

318 i‡(
d°
->
sockaddr
) {

319 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
->
sockaddr
);

322 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
);

324  
NULL
;

325 
	}
}

	@src/http/modules/ngx_http_userid_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_USERID_OFF
 0

	)

14 
	#NGX_HTTP_USERID_LOG
 1

	)

15 
	#NGX_HTTP_USERID_V1
 2

	)

16 
	#NGX_HTTP_USERID_ON
 3

	)

19 
	#NGX_HTTP_USERID_MAX_EXPIRES
 2145916555

	)

23 
ngx_uöt_t
 
	míabÀ
;

25 
ngx_öt_t
 
	m£rvi˚
;

27 
ngx_°r_t
 
	m«me
;

28 
ngx_°r_t
 
	mdomaö
;

29 
ngx_°r_t
 
	m∑th
;

30 
ngx_°r_t
 
	mp3p
;

32 
time_t
 
	mexpúes
;

34 
u_ch¨
 
	mm¨k
;

35 } 
	tngx_hâp_u£rid_c⁄f_t
;

39 
uöt32_t
 
	muid_gŸ
[4];

40 
uöt32_t
 
	muid_£t
[4];

41 
ngx_°r_t
 
	mcookõ
;

42 
ngx_uöt_t
 
	mª£t
;

43 } 
	tngx_hâp_u£rid_˘x_t
;

46 
ngx_hâp_u£rid_˘x_t
 *
ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

48 
ngx_öt_t
 
ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
);

50 
ngx_öt_t
 
ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

55 
ngx_öt_t
 
ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_öt_t
 
ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

59 *
chûd
);

60 *
ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

61 *
ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

62 *
ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

65 *
ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 
ngx_öt_t
 
ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

71 
uöt32_t
 
	g°¨t_vÆue
;

72 
uöt32_t
 
	g£quí˚r_v1
 = 1;

73 
uöt32_t
 
	g£quí˚r_v2
 = 0x03030302;

76 
u_ch¨
 
	gexpúes
[] = ";Éxpires=Thu, 31-Dec-37 23:55:55 GMT";

79 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

82 
ngx_c⁄f_íum_t
 
	gngx_hâp_u£rid_°©e
[] = {

83 { 
ngx_°rög
("off"), 
NGX_HTTP_USERID_OFF
 },

84 { 
ngx_°rög
("log"), 
NGX_HTTP_USERID_LOG
 },

85 { 
ngx_°rög
("v1"), 
NGX_HTTP_USERID_V1
 },

86 { 
ngx_°rög
("⁄"), 
NGX_HTTP_USERID_ON
 },

87 { 
ngx_nuŒ_°rög
, 0 }

91 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_domaö_p
 =

92 
ngx_hâp_u£rid_domaö
;

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_∑th_p
 = 
ngx_hâp_u£rid_∑th
;

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_p3p_p
 = 
ngx_hâp_u£rid_p3p
;

97 
ngx_comm™d_t
 
	gngx_hâp_u£rid_comm™ds
[] = {

99 { 
ngx_°rög
("userid"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_íum_¶Ÿ
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
íabÀ
),

104 
ngx_hâp_u£rid_°©e
 },

106 { 
ngx_°rög
("userid_service"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
£rvi˚
),

111 
NULL
 },

113 { 
ngx_°rög
("userid_name"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
«me
),

118 
NULL
 },

120 { 
ngx_°rög
("userid_domain"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
domaö
),

125 &
ngx_hâp_u£rid_domaö_p
 },

127 { 
ngx_°rög
("userid_path"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
∑th
),

132 &
ngx_hâp_u£rid_∑th_p
 },

134 { 
ngx_°rög
("userid_expires"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_hâp_u£rid_expúes
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("userid_p3p"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
p3p
),

146 &
ngx_hâp_u£rid_p3p_p
 },

148 { 
ngx_°rög
("userid_mark"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_u£rid_m¨k
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ_˘x
 = {

160 
ngx_hâp_u£rid_add_v¨übÀs
,

161 
ngx_hâp_u£rid_öô
,

163 
NULL
,

164 
NULL
,

166 
NULL
,

167 
NULL
,

169 
ngx_hâp_u£rid_¸óã_c⁄f
,

170 
ngx_hâp_u£rid_mîge_c⁄f


174 
ngx_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_u£rid_fûãr_moduÀ_˘x
,

177 
ngx_hâp_u£rid_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
ngx_hâp_u£rid_öô_w‹kî
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_°r_t
 
	gngx_hâp_u£rid_gŸ
 = 
ngx_°rög
("uid_got");

191 
ngx_°r_t
 
	gngx_hâp_u£rid_£t
 = 
ngx_°rög
("uid_set");

192 
ngx_°r_t
 
	gngx_hâp_u£rid_ª£t
 = 
ngx_°rög
("uid_reset");

193 
ngx_uöt_t
 
	gngx_hâp_u£rid_ª£t_ödex
;

196 
ngx_öt_t


197 
	$ngx_hâp_u£rid_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

199 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

200 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

202 i‡(
r
 !r->
maö
) {

203  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

206 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

208 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

209  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

212 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
, 
c⁄f
);

214 i‡(
˘x
 =
NULL
) {

215  
NGX_ERROR
;

218 i‡(
	`ngx_hâp_u£rid_£t_uid
(
r
, 
˘x
, 
c⁄f
Ë=
NGX_OK
) {

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222  
NGX_ERROR
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_u£rid_gŸ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

230 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

231 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

233 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

235 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_OFF
) {

236 
v
->
nŸ_found
 = 1;

237  
NGX_OK
;

240 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

242 i‡(
˘x
 =
NULL
) {

243  
NGX_ERROR
;

246 i‡(
˘x
->
uid_gŸ
[3] != 0) {

247  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
);

250 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_hâp_u£rid_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

258 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

260 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

261 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

263 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

265 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

266 
v
->
nŸ_found
 = 1;

267  
NGX_OK
;

270 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

272 i‡(
˘x
 =
NULL
) {

273  
NGX_ERROR
;

276 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
->
maö
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

277  
NGX_ERROR
;

280 i‡(
˘x
->
uid_£t
[3] == 0) {

281 
v
->
nŸ_found
 = 1;

282  
NGX_OK
;

285  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_£t
);

286 
	}
}

289 
ngx_hâp_u£rid_˘x_t
 *

290 
	$ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

292 
ngx_öt_t
 
n
;

293 
ngx_°r_t
 
§c
, 
d°
;

294 
ngx_èbÀ_ñt_t
 **
cookõs
;

295 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

297 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

299 i‡(
˘x
) {

300  
˘x
;

303 i‡(
˘x
 =
NULL
) {

304 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_u£rid_˘x_t
));

305 i‡(
˘x
 =
NULL
) {

306  
NULL
;

309 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

312 
n
 = 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
c⁄f
->
«me
,

313 &
˘x
->
cookõ
);

314 i‡(
n
 =
NGX_DECLINED
) {

315  
˘x
;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "uid cookõ: \"%V\"", &
˘x
->
cookõ
);

321 i‡(
˘x
->
cookõ
.
Àn
 < 22) {

322 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

323 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

325 &
cookõs
[
n
]->
vÆue
);

326  
˘x
;

329 
§c
 = 
˘x
->
cookõ
;

338 
§c
.
Àn
 = 22;

340 
d°
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_gŸ
;

342 i‡(
	`ngx_decode_ba£64
(&
d°
, &
§c
Ë=
NGX_ERROR
) {

343 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 &
cookõs
[
n
]->
vÆue
);

347  
˘x
;

350 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

353 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

355  
˘x
;

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

361 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

363 
u_ch¨
 *
cookõ
, *
p
;

364 
size_t
 
Àn
;

365 
ngx_°r_t
 
§c
, 
d°
;

366 
ngx_èbÀ_ñt_t
 *
£t_cookõ
, *
p3p
;

368 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

369  
NGX_ERROR
;

372 i‡(
˘x
->
uid_£t
[3] == 0) {

373  
NGX_OK
;

376 
Àn
 = 
c⁄f
->
«me
.À¿+ 1 + 
	`ngx_ba£64_ícoded_Àngth
(16Ë+ c⁄f->
∑th
.len;

378 i‡(
c⁄f
->
expúes
) {

379 
Àn
 +(
expúes
) - 1 + 2;

382 i‡(
c⁄f
->
domaö
.
Àn
) {

383 
Àn
 +
c⁄f
->
domaö
.len;

386 
cookõ
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

387 i‡(
cookõ
 =
NULL
) {

388  
NGX_ERROR
;

391 
p
 = 
	`ngx_c›y
(
cookõ
, 
c⁄f
->
«me
.
d©a
, c⁄f->«me.
Àn
);

392 *
p
++ = '=';

394 i‡(
˘x
->
uid_gŸ
[3] =0 || ctx->
ª£t
) {

395 
§c
.
Àn
 = 16;

396 
§c
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_£t
;

397 
d°
.
d©a
 = 
p
;

399 
	`ngx_ícode_ba£64
(&
d°
, &
§c
);

401 
p
 +
d°
.
Àn
;

403 i‡(
c⁄f
->
m¨k
) {

404 *(
p
 - 2Ë
c⁄f
->
m¨k
;

408 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
cookõ
.
d©a
, 22);

409 *
p
++ = 
c⁄f
->
m¨k
;

410 *
p
++ = '=';

413 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_USERID_MAX_EXPIRES
) {

414 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (expires) - 1);

416 } i‡(
c⁄f
->
expúes
) {

417 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (";Éxpires=") - 1);

418 
p
 = 
	`ngx_hâp_cookõ_time
’, 
	`ngx_time
(Ë+ 
c⁄f
->
expúes
);

421 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
domaö
.
d©a
, c⁄f->domaö.
Àn
);

423 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
∑th
.
d©a
, c⁄f->∑th.
Àn
);

425 
£t_cookõ
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

426 i‡(
£t_cookõ
 =
NULL
) {

427  
NGX_ERROR
;

430 
£t_cookõ
->
hash
 = 1;

431 
	`ngx_°r_£t
(&
£t_cookõ
->
key
, "Set-Cookie");

432 
£t_cookõ
->
vÆue
.
Àn
 = 
p
 - 
cookõ
;

433 
£t_cookõ
->
vÆue
.
d©a
 = 
cookõ
;

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

436 "uid cookõ: \"%V\"", &
£t_cookõ
->
vÆue
);

438 i‡(
c⁄f
->
p3p
.
Àn
 == 0) {

439  
NGX_OK
;

442 
p3p
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

443 i‡(
p3p
 =
NULL
) {

444  
NGX_ERROR
;

447 
p3p
->
hash
 = 1;

448 
	`ngx_°r_£t
(&
p3p
->
key
, "P3P");

449 
p3p
->
vÆue
 = 
c⁄f
->p3p;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

457 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
sockaddr_ö
 *
sö
;

461 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

462 #i‡(
NGX_HAVE_INET6
)

463 
u_ch¨
 *
p
;

464 
sockaddr_ö6
 *
sö6
;

467 i‡(
˘x
->
uid_£t
[3] != 0) {

468  
NGX_OK
;

471 i‡(
˘x
->
uid_gŸ
[3] != 0) {

473 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ngx_hâp_u£rid_ª£t_ödex
);

475 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

476  
NGX_ERROR
;

479 i‡(
vv
->
Àn
 =0 || (vv->À¿=1 && vv->
d©a
[0] == '0')) {

481 i‡(
c⁄f
->
m¨k
 == '\0'

482 || (
˘x
->
cookõ
.
Àn
 > 23

483 && 
˘x
->
cookõ
.
d©a
[22] =
c⁄f
->
m¨k


484 && 
˘x
->
cookõ
.
d©a
[23] == '='))

486  
NGX_OK
;

489 
˘x
->
uid_£t
[0] = ctx->
uid_gŸ
[0];

490 
˘x
->
uid_£t
[1] = ctx->
uid_gŸ
[1];

491 
˘x
->
uid_£t
[2] = ctx->
uid_gŸ
[2];

492 
˘x
->
uid_£t
[3] = ctx->
uid_gŸ
[3];

494  
NGX_OK
;

497 
˘x
->
ª£t
 = 1;

499 i‡(
vv
->
Àn
 =3 && 
	`ngx_°∫cmp
(vv->
d©a
, "log", 3) == 0) {

500 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

502 &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

503 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

513 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_V1
) {

514 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

515 
˘x
->
uid_£t
[0] = 0;

517 
˘x
->
uid_£t
[0] = 
c⁄f
->
£rvi˚
;

519 
˘x
->
uid_£t
[1] = (
uöt32_t
Ë
	`ngx_time
();

520 
˘x
->
uid_£t
[2] = 
°¨t_vÆue
;

521 
˘x
->
uid_£t
[3] = 
£quí˚r_v1
;

522 
£quí˚r_v1
 += 0x100;

525 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

527 
c
 = 
r
->
c⁄√˘i⁄
;

529 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

530  
NGX_ERROR
;

533 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

535 #i‡(
NGX_HAVE_INET6
)

536 
AF_INET6
:

537 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

539 
p
 = (
u_ch¨
 *Ë&
˘x
->
uid_£t
[0];

541 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[12];

542 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[13];

543 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[14];

544 *
p
 = 
sö6
->
sö6_addr
.
s6_addr
[15];

549 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

550 
˘x
->
uid_£t
[0] = 
sö
->
sö_addr
.
s_addr
;

555 
˘x
->
uid_£t
[0] = 
	`ht⁄l
(
c⁄f
->
£rvi˚
);

558 
˘x
->
uid_£t
[1] = 
	`ht⁄l
((
uöt32_t
Ë
	`ngx_time
());

559 
˘x
->
uid_£t
[2] = 
	`ht⁄l
(
°¨t_vÆue
);

560 
˘x
->
uid_£t
[3] = 
	`ht⁄l
(
£quí˚r_v2
);

561 
£quí˚r_v2
 += 0x100;

562 i‡(
£quí˚r_v2
 < 0x03030302) {

563 
£quí˚r_v2
 = 0x03030302;

567  
NGX_OK
;

568 
	}
}

571 
ngx_öt_t


572 
	$ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

573 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
)

575 
v
->
Àn
 = 
«me
->len + ("=00001111222233334444555566667777") - 1;

576 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

577 i‡(
v
->
d©a
 =
NULL
) {

578  
NGX_ERROR
;

581 
v
->
vÆid
 = 1;

582 
v
->
no_ˇchóbÀ
 = 0;

583 
v
->
nŸ_found
 = 0;

585 
	`ngx_•rötf
(
v
->
d©a
, "%V=%08XD%08XD%08XD%08XD",

586 
«me
, 
uid
[0], uid[1], uid[2], uid[3]);

588  
NGX_OK
;

589 
	}
}

592 
ngx_öt_t


593 
	$ngx_hâp_u£rid_ª£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

594 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

596 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

598  
NGX_OK
;

599 
	}
}

602 
ngx_öt_t


603 
	$ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

605 
ngx_öt_t
 
n
;

606 
ngx_hâp_v¨übÀ_t
 *
v¨
;

608 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_gŸ
, 0);

609 i‡(
v¨
 =
NULL
) {

610  
NGX_ERROR
;

613 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_gŸ_v¨übÀ
;

615 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_£t
, 0);

616 i‡(
v¨
 =
NULL
) {

617  
NGX_ERROR
;

620 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_£t_v¨übÀ
;

622 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_ª£t
,

623 
NGX_HTTP_VAR_CHANGEABLE
);

624 i‡(
v¨
 =
NULL
) {

625  
NGX_ERROR
;

628 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_ª£t_v¨übÀ
;

630 
n
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_u£rid_ª£t
);

631 i‡(
n
 =
NGX_ERROR
) {

632  
NGX_ERROR
;

635 
ngx_hâp_u£rid_ª£t_ödex
 = 
n
;

637  
NGX_OK
;

638 
	}
}

642 
	$ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

644 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

646 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_u£rid_c⁄f_t
));

647 i‡(
c⁄f
 =
NULL
) {

648  
NULL
;

660 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

661 
c⁄f
->
£rvi˚
 = 
NGX_CONF_UNSET
;

662 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET
;

663 
c⁄f
->
m¨k
 = (
u_ch¨
) '\xFF';

665  
c⁄f
;

666 
	}
}

670 
	$ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

672 
ngx_hâp_u£rid_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

673 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
 = 
chûd
;

675 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

676 
NGX_HTTP_USERID_OFF
);

678 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
«me
, 
¥ev
->name, "uid");

679 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
domaö
, 
¥ev
->domain, "");

680 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, ";Öath=/");

681 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
p3p
, 
¥ev
->p3p, "");

683 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvi˚
, 
¥ev
->£rvi˚, 
NGX_CONF_UNSET
);

684 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
expúes
, 
¥ev
->expires, 0);

686 i‡(
c⁄f
->
m¨k
 =(
u_ch¨
) '\xFF') {

687 i‡(
¥ev
->
m¨k
 =(
u_ch¨
) '\xFF') {

688 
c⁄f
->
m¨k
 = '\0';

690 
c⁄f
->
m¨k
 = 
¥ev
->mark;

694  
NGX_CONF_OK
;

695 
	}
}

698 
ngx_öt_t


699 
	$ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
)

701 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

702 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_u£rid_fûãr
;

704  
NGX_OK
;

705 
	}
}

709 
	$ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

711 
ngx_°r_t
 *
domaö
 = 
d©a
;

713 
u_ch¨
 *
p
, *
√w
;

715 i‡(
	`ngx_°rcmp
(
domaö
->
d©a
, "none") == 0) {

716 
	`ngx_°r_£t
(
domaö
, "");

717  
NGX_CONF_OK
;

720 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, ("; domaö="Ë- 1 + 
domaö
->
Àn
);

721 i‡(
√w
 =
NULL
) {

722  
NGX_CONF_ERROR
;

725 
p
 = 
	`ngx_˝ymem
(
√w
, "; domain=", ("; domain=") - 1);

726 
	`ngx_mem˝y
(
p
, 
domaö
->
d©a
, domaö->
Àn
);

728 
domaö
->
Àn
 += ("; domain=") - 1;

729 
domaö
->
d©a
 = 
√w
;

731  
NGX_CONF_OK
;

732 
	}
}

736 
	$ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

738 
ngx_°r_t
 *
∑th
 = 
d©a
;

740 
u_ch¨
 *
p
, *
√w
;

742 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, (";Ö©h="Ë- 1 + 
∑th
->
Àn
);

743 i‡(
√w
 =
NULL
) {

744  
NGX_CONF_ERROR
;

747 
p
 = 
	`ngx_˝ymem
(
√w
, ";Öath=", (";Öath=") - 1);

748 
	`ngx_mem˝y
(
p
, 
∑th
->
d©a
,Ö©h->
Àn
);

750 
∑th
->
Àn
 += (";Öath=") - 1;

751 
∑th
->
d©a
 = 
√w
;

753  
NGX_CONF_OK
;

754 
	}
}

758 
	$ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

760 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

762 
ngx_°r_t
 *
vÆue
;

764 i‡(
ucf
->
expúes
 !
NGX_CONF_UNSET
) {

768 
vÆue
 = 
cf
->
¨gs
->
ñts
;

770 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

771 
ucf
->
expúes
 = 
NGX_HTTP_USERID_MAX_EXPIRES
;

772  
NGX_CONF_OK
;

775 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

776 
ucf
->
expúes
 = 0;

777  
NGX_CONF_OK
;

780 
ucf
->
expúes
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

781 i‡(
ucf
->
expúes
 =(
time_t
Ë
NGX_ERROR
) {

785  
NGX_CONF_OK
;

786 
	}
}

790 
	$ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

792 
ngx_°r_t
 *
p3p
 = 
d©a
;

794 i‡(
	`ngx_°rcmp
(
p3p
->
d©a
, "none") == 0) {

795 
	`ngx_°r_£t
(
p3p
, "");

798  
NGX_CONF_OK
;

799 
	}
}

803 
	$ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

805 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

807 
ngx_°r_t
 *
vÆue
;

809 i‡(
ucf
->
m¨k
 !(
u_ch¨
) '\xFF') {

813 
vÆue
 = 
cf
->
¨gs
->
ñts
;

815 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

816 
ucf
->
m¨k
 = '\0';

817  
NGX_CONF_OK
;

820 i‡(
vÆue
[1].
Àn
 != 1

821 || !((
vÆue
[1].
d©a
[0] >= '0' && value[1].data[0] <= '9')

822 || (
vÆue
[1].
d©a
[0] >= 'A' && value[1].data[0] <= 'Z')

823 || (
vÆue
[1].
d©a
[0] >= 'a' && value[1].data[0] <= 'z')

824 || 
vÆue
[1].
d©a
[0] == '='))

829 
ucf
->
m¨k
 = 
vÆue
[1].
d©a
[0];

831  
NGX_CONF_OK
;

832 
	}
}

835 
ngx_öt_t


836 
	$ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

838 
timevÆ
 
ç
;

840 
	`ngx_gëtimeofday
(&
ç
);

843 
°¨t_vÆue
 = (((
uöt32_t
Ë
ç
.
tv_u£c
 / 20Ë<< 16Ë| 
ngx_pid
;

845  
NGX_OK
;

846 
	}
}

	@src/http/modules/ngx_http_uwsgi_module.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_hâp.h
>

16 
ngx_¨øy_t
 
	mˇches
;

17 } 
	tngx_hâp_uwsgi_maö_c⁄f_t
;

21 
ngx_¨øy_t
 *
	mÊushes
;

22 
ngx_¨øy_t
 *
	mÀngths
;

23 
ngx_¨øy_t
 *
	mvÆues
;

24 
ngx_uöt_t
 
	mnumbî
;

25 
ngx_hash_t
 
	mhash
;

26 } 
	tngx_hâp_uwsgi_∑øms_t
;

30 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

32 
ngx_hâp_uwsgi_∑øms_t
 
	m∑øms
;

33 #i‡(
NGX_HTTP_CACHE
)

34 
ngx_hâp_uwsgi_∑øms_t
 
	m∑øms_ˇche
;

36 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

38 
ngx_¨øy_t
 *
	muwsgi_Àngths
;

39 
ngx_¨øy_t
 *
	muwsgi_vÆues
;

41 #i‡(
NGX_HTTP_CACHE
)

42 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

45 
ngx_°r_t
 
	muwsgi_°rög
;

47 
ngx_uöt_t
 
	mmodifõr1
;

48 
ngx_uöt_t
 
	mmodifõr2
;

50 #i‡(
NGX_HTTP_SSL
)

51 
ngx_uöt_t
 
	ms¶
;

52 
ngx_uöt_t
 
	ms¶_¥Ÿocﬁs
;

53 
ngx_°r_t
 
	ms¶_cùhîs
;

54 
ngx_uöt_t
 
	ms¶_vîify_dïth
;

55 
ngx_°r_t
 
	ms¶_åu°ed_˚πifiˇã
;

56 
ngx_°r_t
 
	ms¶_¸l
;

57 
ngx_°r_t
 
	ms¶_˚πifiˇã
;

58 
ngx_°r_t
 
	ms¶_˚πifiˇã_key
;

59 
ngx_¨øy_t
 *
	ms¶_∑ssw‹ds
;

61 } 
	tngx_hâp_uwsgi_loc_c⁄f_t
;

64 
ngx_öt_t
 
ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

66 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

67 
ngx_öt_t
 
ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

68 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

70 
ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

71 
ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_öt_t
 
rc
);

74 *
ngx_hâp_uwsgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

75 *
ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

76 *
ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

77 *
chûd
);

78 
ngx_öt_t
 
ngx_hâp_uwsgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
,

79 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_uwsgi_∑øms_t
 *
∑øms
,

80 
ngx_keyvÆ_t
 *
deÁu…_∑øms
);

82 *
ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

83 *
c⁄f
);

84 *
ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

87 #i‡(
NGX_HTTP_CACHE
)

88 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

89 *
ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

90 *
c⁄f
);

91 *
ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

92 *
c⁄f
);

95 #i‡(
NGX_HTTP_SSL
)

96 *
ngx_hâp_uwsgi_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
,

97 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

98 
ngx_öt_t
 
ngx_hâp_uwsgi_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

103 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_uwsgi_modifõr_bounds
 = {

104 
ngx_c⁄f_check_num_bounds
, 0, 255

108 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_√xt_up°ªam_masks
[] = {

109 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

110 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

111 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

112 { 
ngx_°rög
("n⁄_idempŸít"), 
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
 },

113 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

114 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

115 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

116 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

117 { 
ngx_°rög
("hâp_429"), 
NGX_HTTP_UPSTREAM_FT_HTTP_429
 },

118 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

119 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

120 { 
ngx_nuŒ_°rög
, 0 }

124 #i‡(
NGX_HTTP_SSL
)

126 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_s¶_¥Ÿocﬁs
[] = {

127 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

128 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

129 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

130 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

131 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

132 { 
ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

133 { 
ngx_nuŒ_°rög
, 0 }

139 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
;

142 
ngx_comm™d_t
 
	gngx_hâp_uwsgi_comm™ds
[] = {

144 { 
ngx_°rög
("uwsgi_pass"),

145 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_hâp_uwsgi_∑ss
,

147 
NGX_HTTP_LOC_CONF_OFFSET
,

149 
NULL
 },

151 { 
ngx_°rög
("uwsgi_modifier1"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_num_¶Ÿ
,

154 
NGX_HTTP_LOC_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr1
),

156 &
ngx_hâp_uwsgi_modifõr_bounds
 },

158 { 
ngx_°rög
("uwsgi_modifier2"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

160 
ngx_c⁄f_£t_num_¶Ÿ
,

161 
NGX_HTTP_LOC_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr2
),

163 &
ngx_hâp_uwsgi_modifõr_bounds
 },

165 { 
ngx_°rög
("uwsgi_store"),

166 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

167 
ngx_hâp_uwsgi_°‹e
,

168 
NGX_HTTP_LOC_CONF_OFFSET
,

170 
NULL
 },

172 { 
ngx_°rög
("uwsgi_store_access"),

173 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

174 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

175 
NGX_HTTP_LOC_CONF_OFFSET
,

176 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

177 
NULL
 },

179 { 
ngx_°rög
("uwsgi_buffering"),

180 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

181 
ngx_c⁄f_£t_Êag_¶Ÿ
,

182 
NGX_HTTP_LOC_CONF_OFFSET
,

183 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

184 
NULL
 },

186 { 
ngx_°rög
("uwsgi_request_buffering"),

187 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

188 
ngx_c⁄f_£t_Êag_¶Ÿ
,

189 
NGX_HTTP_LOC_CONF_OFFSET
,

190 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

191 
NULL
 },

193 { 
ngx_°rög
("uwsgi_ignore_client_abort"),

194 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

195 
ngx_c⁄f_£t_Êag_¶Ÿ
,

196 
NGX_HTTP_LOC_CONF_OFFSET
,

197 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

198 
NULL
 },

200 { 
ngx_°rög
("uwsgi_bind"),

201 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

202 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

203 
NGX_HTTP_LOC_CONF_OFFSET
,

204 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

205 
NULL
 },

207 { 
ngx_°rög
("uwsgi_connect_timeout"),

208 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

209 
ngx_c⁄f_£t_m£c_¶Ÿ
,

210 
NGX_HTTP_LOC_CONF_OFFSET
,

211 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

212 
NULL
 },

214 { 
ngx_°rög
("uwsgi_send_timeout"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

216 
ngx_c⁄f_£t_m£c_¶Ÿ
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

218 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

219 
NULL
 },

221 { 
ngx_°rög
("uwsgi_buffer_size"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_c⁄f_£t_size_¶Ÿ
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

225 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

226 
NULL
 },

228 { 
ngx_°rög
("uwsgi_pass_request_headers"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

230 
ngx_c⁄f_£t_Êag_¶Ÿ
,

231 
NGX_HTTP_LOC_CONF_OFFSET
,

232 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

233 
NULL
 },

235 { 
ngx_°rög
("uwsgi_pass_request_body"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

237 
ngx_c⁄f_£t_Êag_¶Ÿ
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

240 
NULL
 },

242 { 
ngx_°rög
("uwsgi_intercept_errors"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

244 
ngx_c⁄f_£t_Êag_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

247 
NULL
 },

249 { 
ngx_°rög
("uwsgi_read_timeout"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

251 
ngx_c⁄f_£t_m£c_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

254 
NULL
 },

256 { 
ngx_°rög
("uwsgi_buffers"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

258 
ngx_c⁄f_£t_bufs_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

261 
NULL
 },

263 { 
ngx_°rög
("uwsgi_busy_buffers_size"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

265 
ngx_c⁄f_£t_size_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

268 
NULL
 },

270 { 
ngx_°rög
("uwsgi_force_ranges"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

272 
ngx_c⁄f_£t_Êag_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

275 
NULL
 },

277 { 
ngx_°rög
("uwsgi_limit_rate"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

279 
ngx_c⁄f_£t_size_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

282 
NULL
 },

284 #i‡(
NGX_HTTP_CACHE
)

286 { 
ngx_°rög
("uwsgi_cache"),

287 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

288 
ngx_hâp_uwsgi_ˇche
,

289 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
NULL
 },

293 { 
ngx_°rög
("uwsgi_cache_key"),

294 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

295 
ngx_hâp_uwsgi_ˇche_key
,

296 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
NULL
 },

300 { 
ngx_°rög
("uwsgi_cache_path"),

301 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

302 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

303 
NGX_HTTP_MAIN_CONF_OFFSET
,

304 
off£tof
(
ngx_hâp_uwsgi_maö_c⁄f_t
, 
ˇches
),

305 &
ngx_hâp_uwsgi_moduÀ
 },

307 { 
ngx_°rög
("uwsgi_cache_bypass"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

309 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

310 
NGX_HTTP_LOC_CONF_OFFSET
,

311 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

312 
NULL
 },

314 { 
ngx_°rög
("uwsgi_no_cache"),

315 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

316 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

317 
NGX_HTTP_LOC_CONF_OFFSET
,

318 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

319 
NULL
 },

321 { 
ngx_°rög
("uwsgi_cache_valid"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

323 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

325 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

326 
NULL
 },

328 { 
ngx_°rög
("uwsgi_cache_min_uses"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_c⁄f_£t_num_¶Ÿ
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

332 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

333 
NULL
 },

335 { 
ngx_°rög
("uwsgi_cache_max_range_offset"),

336 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

337 
ngx_c⁄f_£t_off_¶Ÿ
,

338 
NGX_HTTP_LOC_CONF_OFFSET
,

339 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_max_ønge_off£t
),

340 
NULL
 },

342 { 
ngx_°rög
("uwsgi_cache_use_stale"),

343 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

344 
ngx_c⁄f_£t_bômask_¶Ÿ
,

345 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

347 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

349 { 
ngx_°rög
("uwsgi_cache_methods"),

350 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

351 
ngx_c⁄f_£t_bômask_¶Ÿ
,

352 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

354 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

356 { 
ngx_°rög
("uwsgi_cache_lock"),

357 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

358 
ngx_c⁄f_£t_Êag_¶Ÿ
,

359 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

361 
NULL
 },

363 { 
ngx_°rög
("uwsgi_cache_lock_timeout"),

364 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

365 
ngx_c⁄f_£t_m£c_¶Ÿ
,

366 
NGX_HTTP_LOC_CONF_OFFSET
,

367 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

368 
NULL
 },

370 { 
ngx_°rög
("uwsgi_cache_lock_age"),

371 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

372 
ngx_c⁄f_£t_m£c_¶Ÿ
,

373 
NGX_HTTP_LOC_CONF_OFFSET
,

374 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

375 
NULL
 },

377 { 
ngx_°rög
("uwsgi_cache_revalidate"),

378 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

379 
ngx_c⁄f_£t_Êag_¶Ÿ
,

380 
NGX_HTTP_LOC_CONF_OFFSET
,

381 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

382 
NULL
 },

384 { 
ngx_°rög
("uwsgi_cache_background_update"),

385 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

386 
ngx_c⁄f_£t_Êag_¶Ÿ
,

387 
NGX_HTTP_LOC_CONF_OFFSET
,

388 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_background_upd©e
),

389 
NULL
 },

393 { 
ngx_°rög
("uwsgi_temp_path"),

394 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

395 
ngx_c⁄f_£t_∑th_¶Ÿ
,

396 
NGX_HTTP_LOC_CONF_OFFSET
,

397 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

398 
NULL
 },

400 { 
ngx_°rög
("uwsgi_max_temp_file_size"),

401 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

402 
ngx_c⁄f_£t_size_¶Ÿ
,

403 
NGX_HTTP_LOC_CONF_OFFSET
,

404 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

405 
NULL
 },

407 { 
ngx_°rög
("uwsgi_temp_file_write_size"),

408 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

409 
ngx_c⁄f_£t_size_¶Ÿ
,

410 
NGX_HTTP_LOC_CONF_OFFSET
,

411 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

412 
NULL
 },

414 { 
ngx_°rög
("uwsgi_next_upstream"),

415 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

416 
ngx_c⁄f_£t_bômask_¶Ÿ
,

417 
NGX_HTTP_LOC_CONF_OFFSET
,

418 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

419 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

421 { 
ngx_°rög
("uwsgi_next_upstream_tries"),

422 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

423 
ngx_c⁄f_£t_num_¶Ÿ
,

424 
NGX_HTTP_LOC_CONF_OFFSET
,

425 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

426 
NULL
 },

428 { 
ngx_°rög
("uwsgi_next_upstream_timeout"),

429 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

430 
ngx_c⁄f_£t_m£c_¶Ÿ
,

431 
NGX_HTTP_LOC_CONF_OFFSET
,

432 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

433 
NULL
 },

435 { 
ngx_°rög
("uwsgi_param"),

436 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

437 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

438 
NGX_HTTP_LOC_CONF_OFFSET
,

439 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
∑øms_sour˚
),

440 
NULL
 },

442 { 
ngx_°rög
("uwsgi_string"),

443 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

444 
ngx_c⁄f_£t_°r_¶Ÿ
,

445 
NGX_HTTP_LOC_CONF_OFFSET
,

446 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
uwsgi_°rög
),

447 
NULL
 },

449 { 
ngx_°rög
("uwsgi_pass_header"),

450 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

451 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

452 
NGX_HTTP_LOC_CONF_OFFSET
,

453 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

454 
NULL
 },

456 { 
ngx_°rög
("uwsgi_hide_header"),

457 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

458 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

459 
NGX_HTTP_LOC_CONF_OFFSET
,

460 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

461 
NULL
 },

463 { 
ngx_°rög
("uwsgi_ignore_headers"),

464 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

465 
ngx_c⁄f_£t_bômask_¶Ÿ
,

466 
NGX_HTTP_LOC_CONF_OFFSET
,

467 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

468 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

470 #i‡(
NGX_HTTP_SSL
)

472 { 
ngx_°rög
("uwsgi_ssl_session_reuse"),

473 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

474 
ngx_c⁄f_£t_Êag_¶Ÿ
,

475 
NGX_HTTP_LOC_CONF_OFFSET
,

476 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

477 
NULL
 },

479 { 
ngx_°rög
("uwsgi_ssl_protocols"),

480 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

481 
ngx_c⁄f_£t_bômask_¶Ÿ
,

482 
NGX_HTTP_LOC_CONF_OFFSET
,

483 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

484 &
ngx_hâp_uwsgi_s¶_¥Ÿocﬁs
 },

486 { 
ngx_°rög
("uwsgi_ssl_ciphers"),

487 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

488 
ngx_c⁄f_£t_°r_¶Ÿ
,

489 
NGX_HTTP_LOC_CONF_OFFSET
,

490 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_cùhîs
),

491 
NULL
 },

493 { 
ngx_°rög
("uwsgi_ssl_name"),

494 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

495 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

496 
NGX_HTTP_LOC_CONF_OFFSET
,

497 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_«me
),

498 
NULL
 },

500 { 
ngx_°rög
("uwsgi_ssl_server_name"),

501 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

502 
ngx_c⁄f_£t_Êag_¶Ÿ
,

503 
NGX_HTTP_LOC_CONF_OFFSET
,

504 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_£rvî_«me
),

505 
NULL
 },

507 { 
ngx_°rög
("uwsgi_ssl_verify"),

508 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

509 
ngx_c⁄f_£t_Êag_¶Ÿ
,

510 
NGX_HTTP_LOC_CONF_OFFSET
,

511 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_vîify
),

512 
NULL
 },

514 { 
ngx_°rög
("uwsgi_ssl_verify_depth"),

515 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

516 
ngx_c⁄f_£t_num_¶Ÿ
,

517 
NGX_HTTP_LOC_CONF_OFFSET
,

518 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_vîify_dïth
),

519 
NULL
 },

521 { 
ngx_°rög
("uwsgi_ssl_trusted_certificate"),

522 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

523 
ngx_c⁄f_£t_°r_¶Ÿ
,

524 
NGX_HTTP_LOC_CONF_OFFSET
,

525 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_åu°ed_˚πifiˇã
),

526 
NULL
 },

528 { 
ngx_°rög
("uwsgi_ssl_crl"),

529 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

530 
ngx_c⁄f_£t_°r_¶Ÿ
,

531 
NGX_HTTP_LOC_CONF_OFFSET
,

532 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_¸l
),

533 
NULL
 },

535 { 
ngx_°rög
("uwsgi_ssl_certificate"),

536 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

537 
ngx_c⁄f_£t_°r_¶Ÿ
,

538 
NGX_HTTP_LOC_CONF_OFFSET
,

539 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_˚πifiˇã
),

540 
NULL
 },

542 { 
ngx_°rög
("uwsgi_ssl_certificate_key"),

543 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

544 
ngx_c⁄f_£t_°r_¶Ÿ
,

545 
NGX_HTTP_LOC_CONF_OFFSET
,

546 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_˚πifiˇã_key
),

547 
NULL
 },

549 { 
ngx_°rög
("uwsgi_ssl_password_file"),

550 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

551 
ngx_hâp_uwsgi_s¶_∑ssw‹d_fûe
,

552 
NGX_HTTP_LOC_CONF_OFFSET
,

554 
NULL
 },

558 
ngx_nuŒ_comm™d


562 
ngx_hâp_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ_˘x
 = {

563 
NULL
,

564 
NULL
,

566 
ngx_hâp_uwsgi_¸óã_maö_c⁄f
,

567 
NULL
,

569 
NULL
,

570 
NULL
,

572 
ngx_hâp_uwsgi_¸óã_loc_c⁄f
,

573 
ngx_hâp_uwsgi_mîge_loc_c⁄f


577 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
 = {

578 
NGX_MODULE_V1
,

579 &
ngx_hâp_uwsgi_moduÀ_˘x
,

580 
ngx_hâp_uwsgi_comm™ds
,

581 
NGX_HTTP_MODULE
,

582 
NULL
,

583 
NULL
,

584 
NULL
,

585 
NULL
,

586 
NULL
,

587 
NULL
,

588 
NULL
,

589 
NGX_MODULE_V1_PADDING


593 
ngx_°r_t
 
	gngx_hâp_uwsgi_hide_hódîs
[] = {

594 
ngx_°rög
("X-Accel-Expires"),

595 
ngx_°rög
("X-Accel-Redirect"),

596 
ngx_°rög
("X-Accel-Limit-Rate"),

597 
ngx_°rög
("X-Accel-Buffering"),

598 
ngx_°rög
("X-Accel-Charset"),

599 
ngx_nuŒ_°rög


603 #i‡(
NGX_HTTP_CACHE
)

605 
ngx_keyvÆ_t
 
	gngx_hâp_uwsgi_ˇche_hódîs
[] = {

606 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

607 
ngx_°rög
("$upstream_cache_last_modified") },

608 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

609 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("$upstream_cache_etag") },

610 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

611 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

612 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

613 { 
ngx_nuŒ_°rög
,Çgx_null_string }

619 
ngx_∑th_öô_t
 
	gngx_hâp_uwsgi_ãmp_∑th
 = {

620 
ngx_°rög
(
NGX_HTTP_UWSGI_TEMP_PATH
), { 1, 2, 0 }

624 
ngx_öt_t


625 
	$ngx_hâp_uwsgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

627 
ngx_öt_t
 
rc
;

628 
ngx_hâp_°©us_t
 *
°©us
;

629 
ngx_hâp_up°ªam_t
 *
u
;

630 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

631 #i‡(
NGX_HTTP_CACHE
)

632 
ngx_hâp_uwsgi_maö_c⁄f_t
 *
uwmcf
;

635 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

636  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

639 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

640 i‡(
°©us
 =
NULL
) {

641  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

644 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_uwsgi_moduÀ
);

646 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

648 
u
 = 
r
->
up°ªam
;

650 i‡(
uwcf
->
uwsgi_Àngths
 =
NULL
) {

652 #i‡(
NGX_HTTP_SSL
)

653 
u
->
s¶
 = (
uwcf
->
up°ªam
.s¶ !
NULL
);

655 i‡(
u
->
s¶
) {

656 
	`ngx_°r_£t
(&
u
->
schema
, "suwsgi://");

659 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

662 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

666 i‡(
	`ngx_hâp_uwsgi_evÆ
(
r
, 
uwcf
Ë!
NGX_OK
) {

667  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

671 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_uwsgi_moduÀ
;

673 
u
->
c⁄f
 = &
uwcf
->
up°ªam
;

675 #i‡(
NGX_HTTP_CACHE
)

676 
uwmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

678 
u
->
ˇches
 = &
uwmcf
->caches;

679 
u
->
¸óã_key
 = 
ngx_hâp_uwsgi_¸óã_key
;

682 
u
->
¸óã_ªque°
 = 
ngx_hâp_uwsgi_¸óã_ªque°
;

683 
u
->
ªöô_ªque°
 = 
ngx_hâp_uwsgi_ªöô_ªque°
;

684 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

685 
u
->
ab‹t_ªque°
 = 
ngx_hâp_uwsgi_ab‹t_ªque°
;

686 
u
->
föÆize_ªque°
 = 
ngx_hâp_uwsgi_föÆize_ªque°
;

687 
r
->
°©e
 = 0;

689 
u
->
buf„rög
 = 
uwcf
->
up°ªam
.buffering;

691 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

692 i‡(
u
->
pùe
 =
NULL
) {

693  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

696 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

697 
u
->
pùe
->
öput_˘x
 = 
r
;

699 i‡(!
uwcf
->
up°ªam
.
ªque°_buf„rög


700 && 
uwcf
->
up°ªam
.
∑ss_ªque°_body


701 && !
r
->
hódîs_ö
.
chunked
)

703 
r
->
ªque°_body_no_buf„rög
 = 1;

706 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

708 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

709  
rc
;

712  
NGX_DONE
;

713 
	}
}

716 
ngx_öt_t


717 
	$ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 * 
uwcf
)

719 
size_t
 
add
;

720 
ngx_uæ_t
 
uæ
;

721 
ngx_hâp_up°ªam_t
 *
u
;

723 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

725 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
uwcf
->
uwsgi_Àngths
->
ñts
, 0,

726 
uwcf
->
uwsgi_vÆues
->
ñts
)

727 =
NULL
)

729  
NGX_ERROR
;

732 i‡(
uæ
.uæ.
Àn
 > 8

733 && 
	`ngx_°∫ˇ£cmp
(
uæ
.uæ.
d©a
, (
u_ch¨
 *) "uwsgi://", 8) == 0)

735 
add
 = 8;

737 } i‡(
uæ
.uæ.
Àn
 > 9

738 && 
	`ngx_°∫ˇ£cmp
(
uæ
.uæ.
d©a
, (
u_ch¨
 *) "suwsgi://", 9) == 0)

741 #i‡(
NGX_HTTP_SSL
)

742 
add
 = 9;

743 
r
->
up°ªam
->
s¶
 = 1;

745 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

747  
NGX_ERROR
;

751 
add
 = 0;

754 
u
 = 
r
->
up°ªam
;

756 i‡(
add
) {

757 
u
->
schema
.
Àn
 = 
add
;

758 
u
->
schema
.
d©a
 = 
uæ
.url.data;

760 
uæ
.uæ.
d©a
 +
add
;

761 
uæ
.uæ.
Àn
 -
add
;

764 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

767 
uæ
.
no_ªsﬁve
 = 1;

769 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

770 i‡(
uæ
.
îr
) {

771 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

772 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

775  
NGX_ERROR
;

778 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

779 i‡(
u
->
ªsﬁved
 =
NULL
) {

780  
NGX_ERROR
;

783 i‡(
uæ
.
addrs
) {

784 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

785 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

786 
u
->
ªsﬁved
->
«me
 = 
uæ
.
addrs
[0].name;

787 
u
->
ªsﬁved
->
«ddrs
 = 1;

790 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

791 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

792 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

794  
NGX_OK
;

795 
	}
}

798 #i‡(
NGX_HTTP_CACHE
)

800 
ngx_öt_t


801 
	$ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

803 
ngx_°r_t
 *
key
;

804 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

806 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

807 i‡(
key
 =
NULL
) {

808  
NGX_ERROR
;

811 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

813 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
uwcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

814  
NGX_ERROR
;

817  
NGX_OK
;

818 
	}
}

823 
ngx_öt_t


824 
	$ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

826 
u_ch¨
 
ch
, *
lowˇ£_key
;

827 
size_t
 
key_Àn
, 
vÆ_Àn
, 
Àn
, 
Æloˇãd
;

828 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

829 
ngx_buf_t
 *
b
;

830 
ngx_chaö_t
 *
˛
, *
body
;

831 
ngx_li°_∑π_t
 *
∑π
;

832 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

833 
ngx_hâp_uwsgi_∑øms_t
 *
∑øms
;

834 
ngx_hâp_s¸ùt_code_±
 
code
;

835 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

836 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

837 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

839 
Àn
 = 0;

840 
hódî_∑øms
 = 0;

841 
ign‹ed
 = 
NULL
;

843 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

845 #i‡(
NGX_HTTP_CACHE
)

846 
∑øms
 = 
r
->
up°ªam
->
ˇchóbÀ
 ? &
uwcf
->
∑øms_ˇche
 : &uwcf->params;

848 
∑øms
 = &
uwcf
->params;

851 i‡(
∑øms
->
Àngths
) {

852 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

854 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∑øms
->
Êushes
);

855 
À
.
Êushed
 = 1;

857 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

858 
À
.
ªque°
 = 
r
;

860 *(
uöçå_t
 *Ë
À
.
ù
) {

862 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

863 
key_Àn
 = 
	`lcode
(&
À
);

865 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

866 
skù_em±y
 = 
	`lcode
(&
À
);

868 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

869 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

871 
À
.
ù
 +(
uöçå_t
);

873 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

877 
Àn
 +2 + 
key_Àn
 + 2 + 
vÆ_Àn
;

881 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

883 
Æloˇãd
 = 0;

884 
lowˇ£_key
 = 
NULL
;

886 i‡(
∑øms
->
numbî
) {

887 
n
 = 0;

888 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

890 
∑π
) {

891 
n
 +
∑π
->
√…s
;

892 
∑π
 =Ö¨t->
√xt
;

895 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

896 i‡(
ign‹ed
 =
NULL
) {

897  
NGX_ERROR
;

901 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

902 
hódî
 = 
∑π
->
ñts
;

904 
i
 = 0; ; i++) {

906 i‡(
i
 >
∑π
->
√…s
) {

907 i‡(
∑π
->
√xt
 =
NULL
) {

911 
∑π
 =Ö¨t->
√xt
;

912 
hódî
 = 
∑π
->
ñts
;

913 
i
 = 0;

916 i‡(
∑øms
->
numbî
) {

917 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

918 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

919 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

920 i‡(
lowˇ£_key
 =
NULL
) {

921  
NGX_ERROR
;

925 
hash
 = 0;

927 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

928 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

930 i‡(
ch
 >= 'A' && ch <= 'Z') {

931 
ch
 |= 0x20;

933 } i‡(
ch
 == '-') {

934 
ch
 = '_';

937 
hash
 = 
	`ngx_hash
(hash, 
ch
);

938 
lowˇ£_key
[
n
] = 
ch
;

941 i‡(
	`ngx_hash_föd
(&
∑øms
->
hash
, hash, 
lowˇ£_key
, 
n
)) {

942 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

947 
Àn
 +2 + ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len

948 + 2 + 
hódî
[
i
].
vÆue
.
Àn
;

952 
Àn
 +
uwcf
->
uwsgi_°rög
.len;

956 i‡(
Àn
 > 0 &&Üen < 2) {

957 
	`ngx_log_îr‹
 (
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

958 "uwsgòªque° i†toÿlôée: %uz", 
Àn
);

959  
NGX_ERROR
;

963 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
 + 4);

964 i‡(
b
 =
NULL
) {

965  
NGX_ERROR
;

968 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

969 i‡(
˛
 =
NULL
) {

970  
NGX_ERROR
;

973 
˛
->
buf
 = 
b
;

975 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr1
;

976 *
b
->
œ°
++ = (
u_ch¨
Ë(
Àn
 & 0xff);

977 *
b
->
œ°
++ = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

978 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr2
;

980 i‡(
∑øms
->
Àngths
) {

981 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

983 
e
.
ù
 = 
∑øms
->
vÆues
->
ñts
;

984 
e
.
pos
 = 
b
->
œ°
;

985 
e
.
ªque°
 = 
r
;

986 
e
.
Êushed
 = 1;

988 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

990 *(
uöçå_t
 *Ë
À
.
ù
) {

992 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

993 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

995 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

996 
skù_em±y
 = 
	`lcode
(&
À
);

998 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

999 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1001 
À
.
ù
 +(
uöçå_t
);

1003 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

1004 
e
.
skù
 = 1;

1006 *(
uöçå_t
 *Ë
e
.
ù
) {

1007 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1008 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1010 
e
.
ù
 +(
uöçå_t
);

1012 
e
.
skù
 = 0;

1017 *
e
.
pos
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1018 *
e
.
pos
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1020 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1021 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1023 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1024 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1026 *(
uöçå_t
 *Ë
e
.
ù
) {

1027 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1028 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1031 
e
.
ù
 +(
uöçå_t
);

1033 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1035 
key_Àn
, 
e
.
pos
 - (key_À¿+ 2 + 
vÆ_Àn
),

1036 
vÆ_Àn
, 
e
.
pos
 - val_len);

1039 
b
->
œ°
 = 
e
.
pos
;

1042 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1044 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1045 
hódî
 = 
∑π
->
ñts
;

1047 
i
 = 0; ; i++) {

1049 i‡(
i
 >
∑π
->
√…s
) {

1050 i‡(
∑π
->
√xt
 =
NULL
) {

1054 
∑π
 =Ö¨t->
√xt
;

1055 
hódî
 = 
∑π
->
ñts
;

1056 
i
 = 0;

1059 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

1060 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

1061 
√xt
;

1065 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

1066 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1067 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1069 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1070 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1071 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1073 i‡(
ch
 >= 'a' && ch <= 'z') {

1074 
ch
 &= ~0x20;

1076 } i‡(
ch
 == '-') {

1077 
ch
 = '_';

1080 *
b
->
œ°
++ = 
ch
;

1083 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1084 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1085 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1086 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1088 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1090 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 2 + 
vÆ_Àn
),

1091 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1092 
√xt
:

1098 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
uwcf
->
uwsgi_°rög
.
d©a
,

1099 
uwcf
->
uwsgi_°rög
.
Àn
);

1101 i‡(
r
->
ªque°_body_no_buf„rög
) {

1102 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1104 } i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_body
) {

1105 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

1106 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1108 
body
) {

1109 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1110 i‡(
b
 =
NULL
) {

1111  
NGX_ERROR
;

1114 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1116 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1117 i‡(
˛
->
√xt
 =
NULL
) {

1118  
NGX_ERROR
;

1121 
˛
 = cl->
√xt
;

1122 
˛
->
buf
 = 
b
;

1124 
body
 = body->
√xt
;

1128 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1131 
˛
->
√xt
 = 
NULL
;

1133  
NGX_OK
;

1134 
	}
}

1137 
ngx_öt_t


1138 
	$ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1140 
ngx_hâp_°©us_t
 *
°©us
;

1142 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

1144 i‡(
°©us
 =
NULL
) {

1145  
NGX_OK
;

1148 
°©us
->
code
 = 0;

1149 
°©us
->
cou¡
 = 0;

1150 
°©us
->
°¨t
 = 
NULL
;

1151 
°©us
->
íd
 = 
NULL
;

1153 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

1154 
r
->
°©e
 = 0;

1156  
NGX_OK
;

1157 
	}
}

1160 
ngx_öt_t


1161 
	$ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1163 
size_t
 
Àn
;

1164 
ngx_öt_t
 
rc
;

1165 
ngx_hâp_°©us_t
 *
°©us
;

1166 
ngx_hâp_up°ªam_t
 *
u
;

1168 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

1170 i‡(
°©us
 =
NULL
) {

1171  
NGX_ERROR
;

1174 
u
 = 
r
->
up°ªam
;

1176 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

1178 i‡(
rc
 =
NGX_AGAIN
) {

1179  
rc
;

1182 i‡(
rc
 =
NGX_ERROR
) {

1183 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

1184  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

1187 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1188 
u
->
°©e
->
°©us
 = sètus->
code
;

1191 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

1193 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

1194 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1196 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1197 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1198  
NGX_ERROR
;

1201 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

1203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1205 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1207 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

1209  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

1210 
	}
}

1213 
ngx_öt_t


1214 
	$ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1216 
ngx_°r_t
 *
°©us_löe
;

1217 
ngx_öt_t
 
rc
, 
°©us
;

1218 
ngx_èbÀ_ñt_t
 *
h
;

1219 
ngx_hâp_up°ªam_t
 *
u
;

1220 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1221 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1223 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1227 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1229 i‡(
rc
 =
NGX_OK
) {

1233 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1234 i‡(
h
 =
NULL
) {

1235  
NGX_ERROR
;

1238 
h
->
hash
 = 
r
->
hódî_hash
;

1240 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1241 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1243 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1244 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1245 + 
h
->
key
.
Àn
);

1246 i‡(
h
->
key
.
d©a
 =
NULL
) {

1247 
h
->
hash
 = 0;

1248  
NGX_ERROR
;

1251 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1252 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1254 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1255 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1256 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1257 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1259 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1260 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1263 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1266 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1267 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1269 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1270  
NGX_ERROR
;

1273 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1274 "hâ∞uwsgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1279 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1283 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1286 
u
 = 
r
->
up°ªam
;

1288 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1289 
d⁄e
;

1292 i‡(
u
->
hódîs_ö
.
°©us
) {

1293 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1295 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1296 i‡(
°©us
 =
NGX_ERROR
) {

1297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1299 
°©us_löe
);

1300  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1303 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1304 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1306 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1307 
u
->
hódîs_ö
.
°©us_n
 = 302;

1308 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1312 
u
->
hódîs_ö
.
°©us_n
 = 200;

1313 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1316 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1317 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1320 
d⁄e
:

1322 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1323 && 
r
->
hódîs_ö
.
upgøde
)

1325 
u
->
upgøde
 = 1;

1328  
NGX_OK
;

1331 i‡(
rc
 =
NGX_AGAIN
) {

1332  
NGX_AGAIN
;

1337 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1340  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1342 
	}
}

1346 
	$ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1348 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1352 
	}
}

1356 
	$ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1358 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1362 
	}
}

1366 
	$ngx_hâp_uwsgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1368 
ngx_hâp_uwsgi_maö_c⁄f_t
 *
c⁄f
;

1370 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_maö_c⁄f_t
));

1371 i‡(
c⁄f
 =
NULL
) {

1372  
NULL
;

1375 #i‡(
NGX_HTTP_CACHE
)

1376 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

1377 (
ngx_hâp_fûe_ˇche_t
 *))

1378 !
NGX_OK
)

1380  
NULL
;

1384  
c⁄f
;

1385 
	}
}

1389 
	$ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1391 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
;

1393 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_loc_c⁄f_t
));

1394 i‡(
c⁄f
 =
NULL
) {

1395  
NULL
;

1398 
c⁄f
->
modifõr1
 = 
NGX_CONF_UNSET_UINT
;

1399 
c⁄f
->
modifõr2
 = 
NGX_CONF_UNSET_UINT
;

1401 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1402 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1403 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

1404 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1405 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

1406 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1407 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

1409 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1411 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1412 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1413 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1414 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1416 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1417 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1418 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

1420 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1421 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1422 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1424 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1425 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1427 #i‡(
NGX_HTTP_CACHE
)

1428 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

1429 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1430 
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
 = 
NGX_CONF_UNSET
;

1431 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1432 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1433 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1434 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1435 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1436 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

1437 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

1438 
c⁄f
->
up°ªam
.
ˇche_background_upd©e
 = 
NGX_CONF_UNSET
;

1441 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1442 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1444 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1446 #i‡(
NGX_HTTP_SSL
)

1447 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

1448 
c⁄f
->
up°ªam
.
s¶_£rvî_«me
 = 
NGX_CONF_UNSET
;

1449 
c⁄f
->
up°ªam
.
s¶_vîify
 = 
NGX_CONF_UNSET
;

1450 
c⁄f
->
s¶_vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

1451 
c⁄f
->
s¶_∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

1455 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1457 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1459 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "uwsgi");

1461  
c⁄f
;

1462 
	}
}

1466 
	$ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1468 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1469 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1471 
size_t
 
size
;

1472 
ngx_öt_t
 
rc
;

1473 
ngx_hash_öô_t
 
hash
;

1474 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1476 #i‡(
NGX_HTTP_CACHE
)

1478 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

1479 
c⁄f
->
up°ªam
.
ˇche
 = 0;

1482 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

1483 
c⁄f
->
up°ªam
.
°‹e
 = 0;

1488 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

1489 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1491 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1492 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1495 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1496 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1498 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

1499 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

1501 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1502 
¥ev
->
up°ªam
.
buf„rög
, 1);

1504 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

1505 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

1507 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1508 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1510 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

1511 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

1513 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1514 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1516 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1517 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1519 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1520 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1522 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1523 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1525 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

1526 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

1528 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1529 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1531 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1532 
¥ev
->
up°ªam
.
buf„r_size
,

1533 (
size_t
Ë
ngx_∑gesize
);

1535 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

1536 
¥ev
->
up°ªam
.
limô_øã
, 0);

1539 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1540 8, 
ngx_∑gesize
);

1542 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1543 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1545  
NGX_CONF_ERROR
;

1549 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1550 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1551 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1555 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1556 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1557 
NGX_CONF_UNSET_SIZE
);

1559 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1560 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1562 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1563 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1566 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1567 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1572  
NGX_CONF_ERROR
;

1575 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1576 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1578 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1582  
NGX_CONF_ERROR
;

1586 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1587 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1588 
NGX_CONF_UNSET_SIZE
);

1590 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1591 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1593 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1594 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1597 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1598 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1603  
NGX_CONF_ERROR
;

1607 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1608 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1609 
NGX_CONF_UNSET_SIZE
);

1611 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1612 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1614 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1615 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1618 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1619 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

1621 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1627  
NGX_CONF_ERROR
;

1631 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1632 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1633 
NGX_CONF_BITMASK_SET
);

1636 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1637 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1638 (
NGX_CONF_BITMASK_SET


1639 |
NGX_HTTP_UPSTREAM_FT_ERROR


1640 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1642 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1643 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1644 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1647 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1648 
¥ev
->
up°ªam
.
ãmp_∑th
,

1649 &
ngx_hâp_uwsgi_ãmp_∑th
)

1650 !
NGX_OK
)

1652  
NGX_CONF_ERROR
;

1655 #i‡(
NGX_HTTP_CACHE
)

1657 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

1658 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1659 
¥ev
->
up°ªam
.
ˇche
, 0);

1661 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

1662 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

1665 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

1666 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1668 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

1670 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1672 &
shm_z⁄e
->
shm
.
«me
);

1674  
NGX_CONF_ERROR
;

1677 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1678 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1680 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
up°ªam
.
ˇche_max_ønge_off£t
,

1681 
¥ev
->
up°ªam
.
ˇche_max_ønge_off£t
,

1682 
NGX_MAX_OFF_T_VALUE
);

1684 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1685 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1686 (
NGX_CONF_BITMASK_SET


1687 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1689 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1690 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1691 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1694 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1695 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1698 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1699 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1702 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1704 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1705 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1707 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1708 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1710 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1711 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1713 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1714 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1717 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1718 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1722 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1723 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1725 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1726 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1728 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

1729 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

1731 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

1732 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

1734 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_background_upd©e
,

1735 
¥ev
->
up°ªam
.
ˇche_background_upd©e
, 0);

1739 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1740 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1741 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1742 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1744 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1745 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1747 #i‡(
NGX_HTTP_SSL
)

1749 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

1750 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

1752 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

1753 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


1754 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

1756 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

1759 i‡(
c⁄f
->
up°ªam
.
s¶_«me
 =
NULL
) {

1760 
c⁄f
->
up°ªam
.
s¶_«me
 = 
¥ev
->upstream.ssl_name;

1763 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£rvî_«me
,

1764 
¥ev
->
up°ªam
.
s¶_£rvî_«me
, 0);

1765 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_vîify
,

1766 
¥ev
->
up°ªam
.
s¶_vîify
, 0);

1767 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
s¶_vîify_dïth
,

1768 
¥ev
->
s¶_vîify_dïth
, 1);

1769 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_åu°ed_˚πifiˇã
,

1770 
¥ev
->
s¶_åu°ed_˚πifiˇã
, "");

1771 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_¸l
, 
¥ev
->ssl_crl, "");

1773 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã
,

1774 
¥ev
->
s¶_˚πifiˇã
, "");

1775 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã_key
,

1776 
¥ev
->
s¶_˚πifiˇã_key
, "");

1777 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
s¶_∑ssw‹ds
, 
¥ev
->s¶_∑ssw‹ds, 
NULL
);

1779 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_uwsgi_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

1780  
NGX_CONF_ERROR
;

1785 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uwsgi_°rög
, 
¥ev
->uwsgi_string, "");

1787 
hash
.
max_size
 = 512;

1788 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1789 
hash
.
«me
 = "uwsgi_hide_headers_hash";

1791 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1792 &
¥ev
->
up°ªam
, 
ngx_hâp_uwsgi_hide_hódîs
, &
hash
)

1793 !
NGX_OK
)

1795  
NGX_CONF_ERROR
;

1798 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1800 i‡(
˛cf
->
n⁄ame


1801 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
uwsgi_Àngths
 == NULL)

1803 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1805 
c⁄f
->
uwsgi_Àngths
 = 
¥ev
->uwsgi_lengths;

1806 
c⁄f
->
uwsgi_vÆues
 = 
¥ev
->uwsgi_values;

1808 #i‡(
NGX_HTTP_SSL
)

1809 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

1813 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


1814 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
uwsgi_Àngths
))

1816 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1819 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr1
, 
¥ev
->modifier1, 0);

1820 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr2
, 
¥ev
->modifier2, 0);

1822 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1823 
c⁄f
->
∑øms
 = 
¥ev
->params;

1824 #i‡(
NGX_HTTP_CACHE
)

1825 
c⁄f
->
∑øms_ˇche
 = 
¥ev
->params_cache;

1827 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1830 
rc
 = 
	`ngx_hâp_uwsgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms
, 
NULL
);

1831 i‡(
rc
 !
NGX_OK
) {

1832  
NGX_CONF_ERROR
;

1835 #i‡(
NGX_HTTP_CACHE
)

1837 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1838 
rc
 = 
	`ngx_hâp_uwsgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms_ˇche
,

1839 
ngx_hâp_uwsgi_ˇche_hódîs
);

1840 i‡(
rc
 !
NGX_OK
) {

1841  
NGX_CONF_ERROR
;

1852 i‡(
¥ev
->
∑øms
.
hash
.
buckës
 =
NULL


1853 && 
c⁄f
->
∑øms_sour˚
 =
¥ev
->params_source)

1855 
¥ev
->
∑øms
 = 
c⁄f
->params;

1856 #i‡(
NGX_HTTP_CACHE
)

1857 
¥ev
->
∑øms_ˇche
 = 
c⁄f
->params_cache;

1861  
NGX_CONF_OK
;

1862 
	}
}

1865 
ngx_öt_t


1866 
	$ngx_hâp_uwsgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,

1867 
ngx_hâp_uwsgi_∑øms_t
 *
∑øms
, 
ngx_keyvÆ_t
 *
deÁu…_∑øms
)

1869 
u_ch¨
 *
p
;

1870 
size_t
 
size
;

1871 
uöçå_t
 *
code
;

1872 
ngx_uöt_t
 
i
, 
n§c
;

1873 
ngx_¨øy_t
 
hódîs_«mes
, 
∑øms_mîged
;

1874 
ngx_keyvÆ_t
 *
h
;

1875 
ngx_hash_key_t
 *
hk
;

1876 
ngx_hash_öô_t
 
hash
;

1877 
ngx_hâp_up°ªam_∑øm_t
 *
§c
, *
s
;

1878 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1879 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1881 i‡(
∑øms
->
hash
.
buckës
) {

1882  
NGX_OK
;

1885 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
 && 
deÁu…_∑øms
 == NULL) {

1886 
∑øms
->
hash
.
buckës
 = (*) 1;

1887  
NGX_OK
;

1890 
∑øms
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1891 i‡(
∑øms
->
Àngths
 =
NULL
) {

1892  
NGX_ERROR
;

1895 
∑øms
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1896 i‡(
∑øms
->
vÆues
 =
NULL
) {

1897  
NGX_ERROR
;

1900 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1901 !
NGX_OK
)

1903  
NGX_ERROR
;

1906 i‡(
c⁄f
->
∑øms_sour˚
) {

1907 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1908 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1911 
§c
 = 
NULL
;

1912 
n§c
 = 0;

1915 i‡(
deÁu…_∑øms
) {

1916 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1917 (
ngx_hâp_up°ªam_∑øm_t
))

1918 !
NGX_OK
)

1920  
NGX_ERROR
;

1923 
i
 = 0; i < 
n§c
; i++) {

1925 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1926 i‡(
s
 =
NULL
) {

1927  
NGX_ERROR
;

1930 *
s
 = 
§c
[
i
];

1933 
h
 = 
deÁu…_∑øms
;

1935 
h
->
key
.
Àn
) {

1937 
§c
 = 
∑øms_mîged
.
ñts
;

1938 
n§c
 = 
∑øms_mîged
.
√…s
;

1940 
i
 = 0; i < 
n§c
; i++) {

1941 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1942 
√xt
;

1946 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1947 i‡(
s
 =
NULL
) {

1948  
NGX_ERROR
;

1951 
s
->
key
 = 
h
->key;

1952 
s
->
vÆue
 = 
h
->value;

1953 
s
->
skù_em±y
 = 1;

1955 
√xt
:

1957 
h
++;

1960 
§c
 = 
∑øms_mîged
.
ñts
;

1961 
n§c
 = 
∑øms_mîged
.
√…s
;

1964 
i
 = 0; i < 
n§c
; i++) {

1966 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1967 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1969 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1970 i‡(
hk
 =
NULL
) {

1971  
NGX_ERROR
;

1974 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1975 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1976 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1977 
hk
->
vÆue
 = (*) 1;

1979 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1984 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1985 (
ngx_hâp_s¸ùt_c›y_code_t
));

1986 i‡(
c›y
 =
NULL
) {

1987  
NGX_ERROR
;

1990 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

1991 
ngx_hâp_s¸ùt_c›y_Àn_code
;

1992 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1994 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1995 (
ngx_hâp_s¸ùt_c›y_code_t
));

1996 i‡(
c›y
 =
NULL
) {

1997  
NGX_ERROR
;

2000 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
) (*)

2001 
ngx_hâp_s¸ùt_c›y_Àn_code
;

2002 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

2005 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2006 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

2007 & ~((
uöçå_t
) - 1);

2009 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, 
size
);

2010 i‡(
c›y
 =
NULL
) {

2011  
NGX_ERROR
;

2014 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2015 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2017 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2018 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2021 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2023 
sc
.
cf
 = cf;

2024 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

2025 
sc
.
Êushes
 = &
∑øms
->flushes;

2026 
sc
.
Àngths
 = &
∑øms
->lengths;

2027 
sc
.
vÆues
 = &
∑øms
->values;

2029 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2030  
NGX_ERROR
;

2033 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

2034 i‡(
code
 =
NULL
) {

2035  
NGX_ERROR
;

2038 *
code
 = (
uöçå_t
Ë
NULL
;

2041 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, (
uöçå_t
));

2042 i‡(
code
 =
NULL
) {

2043  
NGX_ERROR
;

2046 *
code
 = (
uöçå_t
Ë
NULL
;

2049 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

2050 i‡(
code
 =
NULL
) {

2051  
NGX_ERROR
;

2054 *
code
 = (
uöçå_t
Ë
NULL
;

2056 
∑øms
->
numbî
 = 
hódîs_«mes
.
√…s
;

2058 
hash
.hash = &
∑øms
->hash;

2059 
hash
.
key
 = 
ngx_hash_key_lc
;

2060 
hash
.
max_size
 = 512;

2061 
hash
.
buckë_size
 = 64;

2062 
hash
.
«me
 = "uwsgi_params_hash";

2063 
hash
.
poﬁ
 = 
cf
->pool;

2064 
hash
.
ãmp_poﬁ
 = 
NULL
;

2066  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2067 
	}
}

2071 
	$ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2073 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2075 
size_t
 
add
;

2076 
ngx_uæ_t
 
u
;

2077 
ngx_°r_t
 *
vÆue
, *
uæ
;

2078 
ngx_uöt_t
 
n
;

2079 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2080 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2082 i‡(
uwcf
->
up°ªam
.up°ªam || uwcf->
uwsgi_Àngths
) {

2086 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2087 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

2089 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2091 
uæ
 = &
vÆue
[1];

2093 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

2095 i‡(
n
) {

2097 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2099 
sc
.
cf
 = cf;

2100 
sc
.
sour˚
 = 
uæ
;

2101 
sc
.
Àngths
 = &
uwcf
->
uwsgi_Àngths
;

2102 
sc
.
vÆues
 = &
uwcf
->
uwsgi_vÆues
;

2103 
sc
.
v¨übÀs
 = 
n
;

2104 
sc
.
com∂ëe_Àngths
 = 1;

2105 
sc
.
com∂ëe_vÆues
 = 1;

2107 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2108  
NGX_CONF_ERROR
;

2111 #i‡(
NGX_HTTP_SSL
)

2112 
uwcf
->
s¶
 = 1;

2115  
NGX_CONF_OK
;

2118 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "uwsgi://", 8) == 0) {

2119 
add
 = 8;

2121 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "suwsgi://", 9) == 0) {

2123 #i‡(
NGX_HTTP_SSL
)

2124 
add
 = 9;

2125 
uwcf
->
s¶
 = 1;

2127 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2129  
NGX_CONF_ERROR
;

2133 
add
 = 0;

2136 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2138 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

2139 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

2140 
u
.
no_ªsﬁve
 = 1;

2142 
uwcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

2143 i‡(
uwcf
->
up°ªam
.up°ªam =
NULL
) {

2144  
NGX_CONF_ERROR
;

2147 i‡(
˛cf
->
«me
.
Àn
 && clcf->«me.
d©a
[clcf->name.len - 1] == '/') {

2148 
˛cf
->
auto_ªdúe˘
 = 1;

2151  
NGX_CONF_OK
;

2152 
	}
}

2156 
	$ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2158 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2160 
ngx_°r_t
 *
vÆue
;

2161 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2163 i‡(
uwcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

2167 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2169 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2170 
uwcf
->
up°ªam
.
°‹e
 = 0;

2171  
NGX_CONF_OK
;

2174 #i‡(
NGX_HTTP_CACHE
)

2176 i‡(
uwcf
->
up°ªam
.
ˇche
 > 0) {

2182 
uwcf
->
up°ªam
.
°‹e
 = 1;

2184 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

2185  
NGX_CONF_OK
;

2189 
vÆue
[1].
Àn
++;

2191 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2193 
sc
.
cf
 = cf;

2194 
sc
.
sour˚
 = &
vÆue
[1];

2195 
sc
.
Àngths
 = &
uwcf
->
up°ªam
.
°‹e_Àngths
;

2196 
sc
.
vÆues
 = &
uwcf
->
up°ªam
.
°‹e_vÆues
;

2197 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

2198 
sc
.
com∂ëe_Àngths
 = 1;

2199 
sc
.
com∂ëe_vÆues
 = 1;

2201 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2202  
NGX_CONF_ERROR
;

2205  
NGX_CONF_OK
;

2206 
	}
}

2209 #i‡(
NGX_HTTP_CACHE
)

2212 
	$ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2214 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2216 
ngx_°r_t
 *
vÆue
;

2217 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

2218 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

2220 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2222 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

2226 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2227 
uwcf
->
up°ªam
.
ˇche
 = 0;

2228  
NGX_CONF_OK
;

2231 i‡(
uwcf
->
up°ªam
.
°‹e
 > 0) {

2235 
uwcf
->
up°ªam
.
ˇche
 = 1;

2237 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

2239 
ccv
.
cf
 = cf;

2240 
ccv
.
vÆue
 = &value[1];

2241 
ccv
.
com∂ex_vÆue
 = &
cv
;

2243 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2244  
NGX_CONF_ERROR
;

2247 i‡(
cv
.
Àngths
 !
NULL
) {

2249 
uwcf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

2250 (
ngx_hâp_com∂ex_vÆue_t
));

2251 i‡(
uwcf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

2252  
NGX_CONF_ERROR
;

2255 *
uwcf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

2257  
NGX_CONF_OK
;

2260 
uwcf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

2261 &
ngx_hâp_uwsgi_moduÀ
);

2262 i‡(
uwcf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

2263  
NGX_CONF_ERROR
;

2266  
NGX_CONF_OK
;

2267 
	}
}

2271 
	$ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2273 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2275 
ngx_°r_t
 *
vÆue
;

2276 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

2278 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2280 i‡(
uwcf
->
ˇche_key
.
vÆue
.
d©a
) {

2284 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

2286 
ccv
.
cf
 = cf;

2287 
ccv
.
vÆue
 = &value[1];

2288 
ccv
.
com∂ex_vÆue
 = &
uwcf
->
ˇche_key
;

2290 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2291  
NGX_CONF_ERROR
;

2294  
NGX_CONF_OK
;

2295 
	}
}

2300 #i‡(
NGX_HTTP_SSL
)

2303 
	$ngx_hâp_uwsgi_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2305 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2307 
ngx_°r_t
 *
vÆue
;

2309 i‡(
uwcf
->
s¶_∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

2313 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2315 
uwcf
->
s¶_∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

2317 i‡(
uwcf
->
s¶_∑ssw‹ds
 =
NULL
) {

2318  
NGX_CONF_ERROR
;

2321  
NGX_CONF_OK
;

2322 
	}
}

2325 
ngx_öt_t


2326 
	$ngx_hâp_uwsgi_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
)

2328 
ngx_poﬁ_˛ónup_t
 *
˛n
;

2330 
uwcf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

2331 i‡(
uwcf
->
up°ªam
.
s¶
 =
NULL
) {

2332  
NGX_ERROR
;

2335 
uwcf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

2337 i‡(
	`ngx_s¶_¸óã
(
uwcf
->
up°ªam
.
s¶
, uwcf->
s¶_¥Ÿocﬁs
, 
NULL
)

2338 !
NGX_OK
)

2340  
NGX_ERROR
;

2343 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

2344 i‡(
˛n
 =
NULL
) {

2345  
NGX_ERROR
;

2348 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

2349 
˛n
->
d©a
 = 
uwcf
->
up°ªam
.
s¶
;

2351 i‡(
uwcf
->
s¶_˚πifiˇã
.
Àn
) {

2353 i‡(
uwcf
->
s¶_˚πifiˇã_key
.
Àn
 == 0) {

2354 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2356 "f‹ cîtifiˇã \"%V\"", &
uwcf
->
s¶_˚πifiˇã
);

2357  
NGX_ERROR
;

2360 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
uwcf
->
up°ªam
.
s¶
, &uwcf->
s¶_˚πifiˇã
,

2361 &
uwcf
->
s¶_˚πifiˇã_key
, uwcf->
s¶_∑ssw‹ds
)

2362 !
NGX_OK
)

2364  
NGX_ERROR
;

2368 i‡(
	`ngx_s¶_cùhîs
(
cf
, 
uwcf
->
up°ªam
.
s¶
, &uwcf->
s¶_cùhîs
, 0)

2369 !
NGX_OK
)

2371  
NGX_ERROR
;

2374 i‡(
uwcf
->
up°ªam
.
s¶_vîify
) {

2375 i‡(
uwcf
->
s¶_åu°ed_˚πifiˇã
.
Àn
 == 0) {

2376 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2378  
NGX_ERROR
;

2381 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, 
uwcf
->
up°ªam
.
s¶
,

2382 &
uwcf
->
s¶_åu°ed_˚πifiˇã
,

2383 
uwcf
->
s¶_vîify_dïth
)

2384 !
NGX_OK
)

2386  
NGX_ERROR
;

2389 i‡(
	`ngx_s¶_¸l
(
cf
, 
uwcf
->
up°ªam
.
s¶
, &uwcf->
s¶_¸l
Ë!
NGX_OK
) {

2390  
NGX_ERROR
;

2394 i‡(
	`ngx_s¶_˛õ¡_£ssi⁄_ˇche
(
cf
, 
uwcf
->
up°ªam
.
s¶
,

2395 
uwcf
->
up°ªam
.
s¶_£ssi⁄_ªu£
)

2396 !
NGX_OK
)

2398  
NGX_ERROR
;

2401  
NGX_OK
;

2402 
	}
}

	@src/http/modules/ngx_http_xslt_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<libxml/∑r£r.h
>

13 
	~<libxml/åì.h
>

14 
	~<libx¶t/x¶t.h
>

15 
	~<libx¶t/x¶tI¡î«ls.h
>

16 
	~<libx¶t/å™sf‹m.h
>

17 
	~<libx¶t/v¨übÀs.h
>

18 
	~<libx¶t/x¶tutûs.h
>

20 #i‡(
NGX_HAVE_EXSLT
)

21 
	~<libex¶t/ex¶t.h
>

25 #i‚de‡
NGX_HTTP_XSLT_REUSE_DTD


26 
	#NGX_HTTP_XSLT_REUSE_DTD
 1

	)

31 
u_ch¨
 *
	m«me
;

32 *
	md©a
;

33 } 
	tngx_hâp_x¶t_fûe_t
;

37 
ngx_¨øy_t
 
	mdtd_fûes
;

38 
ngx_¨øy_t
 
	mshìt_fûes
;

39 } 
	tngx_hâp_x¶t_fûãr_maö_c⁄f_t
;

43 
u_ch¨
 *
	m«me
;

44 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

45 
ngx_uöt_t
 
	mquŸe
;

46 } 
	tngx_hâp_x¶t_∑øm_t
;

50 
x¶tStyÀshìtPå
 
	m°yÀshìt
;

51 
ngx_¨øy_t
 
	m∑øms
;

52 } 
	tngx_hâp_x¶t_shìt_t
;

56 
xmlDtdPå
 
	mdtd
;

57 
ngx_¨øy_t
 
	mshìts
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 
ngx_¨øy_t
 *
	m∑øms
;

61 
ngx_Êag_t
 
	mœ°_modifõd
;

62 } 
	tngx_hâp_x¶t_fûãr_loc_c⁄f_t
;

66 
xmlDocPå
 
	mdoc
;

67 
xmlP¨£rCtxtPå
 
	m˘xt
;

68 
x¶tTønsf‹mC⁄ãxtPå
 
	må™sf‹m
;

69 
ngx_hâp_ªque°_t
 *
	mªque°
;

70 
ngx_¨øy_t
 
	m∑øms
;

72 
ngx_uöt_t
 
	md⁄e
;

73 } 
	tngx_hâp_x¶t_fûãr_˘x_t
;

76 
ngx_öt_t
 
ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

78 
ngx_öt_t
 
ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

82 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

83 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
);

84 
ngx_cde˛
 
ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...);

87 
ngx_buf_t
 *
ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
);

91 
u_ch¨
 *
ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
);

92 
u_ch¨
 *
ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
);

93 
ngx_hâp_x¶t_˛ónup
(*
d©a
);

95 *
ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

96 *
c⁄f
);

97 *
ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

98 *
c⁄f
);

99 *
ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

100 *
c⁄f
);

101 
ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
);

102 
ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
);

103 *
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

104 *
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

105 *
ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

106 *
chûd
);

107 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

109 
ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
);

112 
ngx_°r_t
 
	gngx_hâp_x¶t_deÁu…_ty≥s
[] = {

113 
ngx_°rög
("text/xml"),

114 
ngx_nuŒ_°rög


118 
ngx_comm™d_t
 
	gngx_hâp_x¶t_fûãr_comm™ds
[] = {

120 { 
ngx_°rög
("xml_entities"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_x¶t_ítôõs
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("xslt_stylesheet"),

128 
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

129 
ngx_hâp_x¶t_°yÀshìt
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

132 
NULL
 },

134 { 
ngx_°rög
("xslt_param"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

136 
ngx_hâp_x¶t_∑øm
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("xslt_string_param"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

143 
ngx_hâp_x¶t_∑øm
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

148 { 
ngx_°rög
("xslt_types"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

150 
ngx_hâp_ty≥s_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
ty≥s_keys
),

153 &
ngx_hâp_x¶t_deÁu…_ty≥s
[0] },

155 { 
ngx_°rög
("xslt_last_modified"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

157 
ngx_c⁄f_£t_Êag_¶Ÿ
,

158 
NGX_HTTP_LOC_CONF_OFFSET
,

159 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
œ°_modifõd
),

160 
NULL
 },

162 
ngx_nuŒ_comm™d


166 
ngx_hâp_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ_˘x
 = {

167 
ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
,

168 
ngx_hâp_x¶t_fûãr_öô
,

170 
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
,

171 
NULL
,

173 
NULL
,

174 
NULL
,

176 
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
,

177 
ngx_hâp_x¶t_fûãr_mîge_c⁄f


181 
ngx_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ
 = {

182 
NGX_MODULE_V1
,

183 &
ngx_hâp_x¶t_fûãr_moduÀ_˘x
,

184 
ngx_hâp_x¶t_fûãr_comm™ds
,

185 
NGX_HTTP_MODULE
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
ngx_hâp_x¶t_fûãr_exô
,

192 
ngx_hâp_x¶t_fûãr_exô
,

193 
NGX_MODULE_V1_PADDING


197 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

198 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

201 
ngx_öt_t


202 
	$ngx_hâp_x¶t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

204 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

205 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

207 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

210 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

211  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

214 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

216 i‡(
c⁄f
->
shìts
.
√…s
 == 0

217 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
)

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

224 i‡(
˘x
) {

225  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

228 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_˘x_t
));

229 i‡(
˘x
 =
NULL
) {

230  
NGX_ERROR
;

233 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

235 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

237  
NGX_OK
;

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_hâp_x¶t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

244 
wñlF‹med
;

245 
ngx_chaö_t
 *
˛
;

246 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

248 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

251 i‡(
ö
 =
NULL
) {

252  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

255 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

257 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

258  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

261 
˛
 = 
ö
; cl; c»˛->
√xt
) {

263 i‡(
	`ngx_hâp_x¶t_add_chunk
(
r
, 
˘x
, 
˛
->
buf
Ë!
NGX_OK
) {

265 i‡(
˘x
->
˘xt
->
myDoc
) {

267 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

268 
˘x
->
˘xt
->
myDoc
->
extSub£t
 = 
NULL
;

270 
	`xmlFªeDoc
(
˘x
->
˘xt
->
myDoc
);

273 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

275  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

278 i‡(
˛
->
buf
->
œ°_buf
 || cl->buf->
œ°_ö_chaö
) {

280 
˘x
->
doc
 = ctx->
˘xt
->
myDoc
;

282 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

283 
˘x
->
doc
->
extSub£t
 = 
NULL
;

286 
wñlF‹med
 = 
˘x
->
˘xt
->wellFormed;

288 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

290 i‡(
wñlF‹med
) {

291  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
,

292 
	`ngx_hâp_x¶t_≠∂y_°yÀshìt
(
r
, 
˘x
));

295 
	`xmlFªeDoc
(
˘x
->
doc
);

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

304  
NGX_OK
;

305 
	}
}

308 
ngx_öt_t


309 
	$ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

310 
ngx_buf_t
 *
b
)

312 
ngx_öt_t
 
rc
;

313 
ngx_chaö_t
 
out
;

314 
ngx_poﬁ_˛ónup_t
 *
˛n
;

315 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

317 
˘x
->
d⁄e
 = 1;

319 i‡(
b
 =
NULL
) {

320  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

321 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

324 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

326 i‡(
˛n
 =
NULL
) {

327 
	`ngx_‰ì
(
b
->
pos
);

328  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

329 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

332 i‡(
r
 =r->
maö
) {

333 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

335 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

336 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

337 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

340 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

342 i‡(!
c⁄f
->
œ°_modifõd
) {

343 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

344 
	`ngx_hâp_˛ór_ëag
(
r
);

347 
	`ngx_hâp_wók_ëag
(
r
);

351 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

353 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

354 
	`ngx_‰ì
(
b
->
pos
);

355  
rc
;

358 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup
;

359 
˛n
->
d©a
 = 
b
->
pos
;

361 
out
.
buf
 = 
b
;

362 
out
.
√xt
 = 
NULL
;

364  
	`ngx_hâp_√xt_body_fûãr
(
r
, &
out
);

365 
	}
}

368 
ngx_öt_t


369 
	$ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

370 
ngx_buf_t
 *
b
)

372 
îr
;

373 
xmlP¨£rCtxtPå
 
˘xt
;

375 i‡(
˘x
->
˘xt
 =
NULL
) {

377 
˘xt
 = 
	`xmlCª©ePushP¨£rCtxt
(
NULL
, NULL, NULL, 0, NULL);

378 i‡(
˘xt
 =
NULL
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

381  
NGX_ERROR
;

383 
	`xmlCtxtU£O±i⁄s
(
˘xt
, 
XML_PARSE_NOENT
|
XML_PARSE_DTDLOAD


384 |
XML_PARSE_NOWARNING
);

386 
˘xt
->
ßx
->
exã∫ÆSub£t
 = 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
;

387 
˘xt
->
ßx
->
£tDocumítLoˇt‹
 = 
NULL
;

388 
˘xt
->
ßx
->
îr‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

389 
˘xt
->
ßx
->
ÁèlEº‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

390 
˘xt
->
ßx
->
_¥iv©e
 = 
˘x
;

392 
˘x
->
˘xt
 = ctxt;

393 
˘x
->
ªque°
 = 
r
;

396 
îr
 = 
	`xmlP¨£Chunk
(
˘x
->
˘xt
, (*Ë
b
->
pos
, (Ë(b->
œ°
 - b->pos),

397 (
b
->
œ°_buf
Ë|| (b->
œ°_ö_chaö
));

399 i‡(
îr
 == 0) {

400 
b
->
pos
 = b->
œ°
;

401  
NGX_OK
;

404 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

405 "xmlP¨£Chunk(ËÁûed,Éº‹:%d", 
îr
);

407  
NGX_ERROR
;

408 
	}
}

412 
	$ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

413 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
)

415 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

417 
xmlDocPå
 
doc
;

418 
xmlDtdPå
 
dtd
;

419 
ngx_hâp_ªque°_t
 *
r
;

420 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

421 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

423 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

424 
r
 = 
˘x
->
ªque°
;

426 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

428 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

430 
«me
 ?Çamê: (
xmlCh¨
 *) "",

431 
exã∫ÆId
 ?Éxã∫ÆId : (
xmlCh¨
 *) "",

432 
sy°emId
 ? sy°emId : (
xmlCh¨
 *) "");

434 
doc
 = 
˘xt
->
myDoc
;

436 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

438 
dtd
 = 
c⁄f
->dtd;

442 
dtd
 = 
	`xmlC›yDtd
(
c⁄f
->dtd);

443 i‡(
dtd
 =
NULL
) {

444 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

449 i‡(
doc
->
chûdªn
 =
NULL
) {

450 
	`xmlAddChûd
((
xmlNodePå
Ë
doc
, (xmlNodePåË
dtd
);

453 
	`xmlAddPªvSiblög
(
doc
->
chûdªn
, (
xmlNodePå
Ë
dtd
);

458 
doc
->
extSub£t
 = 
dtd
;

459 
	}
}

462 
ngx_cde˛


463 
	$ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...)

465 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

467 
size_t
 
n
;

468 
va_li°
 
¨gs
;

469 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

470 
u_ch¨
 
buf
[
NGX_MAX_ERROR_STR
];

472 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

474 
buf
[0] = '\0';

476 
	`va_°¨t
(
¨gs
, 
msg
);

477 
n
 = (
size_t
Ë
	`v¢¥ötf
((*Ë
buf
, 
NGX_MAX_ERROR_STR
, 
msg
, 
¨gs
);

478 
	`va_íd
(
¨gs
);

480 --
n
 && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

483 "libxml2Éº‹: \"%*s\"", 
n
 + 1, 
buf
);

484 
	}
}

487 
ngx_buf_t
 *

488 
	$ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

489 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
)

491 
Àn
, 
rc
, 
doc_ty≥
;

492 
u_ch¨
 *
ty≥
, *
ícodög
;

493 
ngx_buf_t
 *
b
;

494 
ngx_uöt_t
 
i
;

495 
xmlCh¨
 *
buf
;

496 
xmlDocPå
 
doc
, 
ªs
;

497 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

498 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

500 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

501 
shìt
 = 
c⁄f
->
shìts
.
ñts
;

502 
doc
 = 
˘x
->doc;

506 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑øms
, 
r
->
poﬁ
, 4 * 2 + 1, (*))

507 !
NGX_OK
)

509 
	`xmlFªeDoc
(
doc
);

510  
NULL
;

513 
i
 = 0; i < 
c⁄f
->
shìts
.
√…s
; i++) {

515 
˘x
->
å™sf‹m
 = 
	`x¶tNewTønsf‹mC⁄ãxt
(
shìt
[
i
].
°yÀshìt
, 
doc
);

516 i‡(
˘x
->
å™sf‹m
 =
NULL
) {

517 
	`xmlFªeDoc
(
doc
);

518  
NULL
;

521 i‡(
c⁄f
->
∑øms


522 && 
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, 
c⁄f
->
∑øms
, 0Ë!
NGX_OK
)

524 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

525 
	`xmlFªeDoc
(
doc
);

526  
NULL
;

529 i‡(
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, &
shìt
[
i
].
∑øms
, 1Ë!
NGX_OK
) {

530 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

531 
	`xmlFªeDoc
(
doc
);

532  
NULL
;

535 
ªs
 = 
	`x¶tAµlyStyÀshìtU£r
(
shìt
[
i
].
°yÀshìt
, 
doc
,

536 
˘x
->
∑øms
.
ñts
, 
NULL
, NULL,

537 
˘x
->
å™sf‹m
);

539 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

540 
	`xmlFªeDoc
(
doc
);

542 i‡(
ªs
 =
NULL
) {

543 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

545  
NULL
;

548 
doc
 = 
ªs
;

551 
˘x
->
∑øms
.
√…s
 = 0;

556 i‡(
r
 =r->
maö
) {

557 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
shìt
[
i
 - 1].
°yÀshìt
);

560 
ty≥
 = 
NULL
;

563 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
shìt
[
i
 - 1].
°yÀshìt
);

564 
doc_ty≥
 = 
doc
->
ty≥
;

566 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

568 
doc_ty≥
, 
ty≥
 ?Åy≥ : (
u_ch¨
 *) "(null)",

569 
ícodög
 ?Éncodög : (
u_ch¨
 *) "(null)");

571 
rc
 = 
	`x¶tSaveResu…ToSåög
(&
buf
, &
Àn
, 
doc
, 
shìt
[
i
 - 1].
°yÀshìt
);

573 
	`xmlFªeDoc
(
doc
);

575 i‡(
rc
 != 0) {

576 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

578  
NULL
;

581 i‡(
Àn
 == 0) {

582 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

584  
NULL
;

587 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

588 i‡(
b
 =
NULL
) {

589 
	`ngx_‰ì
(
buf
);

590  
NULL
;

593 
b
->
pos
 = 
buf
;

594 
b
->
œ°
 = 
buf
 + 
Àn
;

595 
b
->
mem‹y
 = 1;

597 i‡(
ícodög
) {

598 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
	`ngx_°æí
(
ícodög
);

599 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
ícodög
;

602 i‡(
r
 !r->
maö
) {

603  
b
;

606 
b
->
œ°_buf
 = 1;

608 i‡(
ty≥
) {

609 
Àn
 = 
	`ngx_°æí
(
ty≥
);

611 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
Àn
;

612 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

613 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
ty≥
;

615 } i‡(
doc_ty≥
 =
XML_HTML_DOCUMENT_NODE
) {

617 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

618 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

621 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

623  
b
;

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

629 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
)

631 
u_ch¨
 *
p
, *
œ°
, *
vÆue
, *
d°
, *
§c
, **
s
;

632 
size_t
 
Àn
;

633 
ngx_uöt_t
 
i
;

634 
ngx_°r_t
 
°rög
;

635 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

637 
∑øm
 = 
∑øms
->
ñts
;

639 
i
 = 0; i < 
∑øms
->
√…s
; i++) {

641 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑øm
[
i
].
vÆue
, &
°rög
Ë!
NGX_OK
) {

642  
NGX_ERROR
;

645 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

646 "x¶àfûã∏∑øm: \"%s\"", 
°rög
.
d©a
);

648 i‡(
∑øm
[
i
].
«me
) {

650 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

651 "x¶àfûã∏∑ømÇame: \"%s\"", 
∑øm
[
i
].
«me
);

653 i‡(
∑øm
[
i
].
quŸe
) {

654 i‡(
	`x¶tQuŸeO√U£rP¨am
(
˘x
->
å™sf‹m
, 
∑øm
[
i
].
«me
,

655 
°rög
.
d©a
)

658 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

660 
∑øm
[
i
].
«me
, 
°rög
.
d©a
);

661  
NGX_ERROR
;

667 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

668 i‡(
s
 =
NULL
) {

669  
NGX_ERROR
;

672 *
s
 = 
∑øm
[
i
].
«me
;

674 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

675 i‡(
s
 =
NULL
) {

676  
NGX_ERROR
;

679 *
s
 = 
°rög
.
d©a
;

689 i‡(
∑øm
[
i
].
vÆue
.
Àngths
) {

690 
p
 = 
°rög
.
d©a
;

693 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
°rög
.
Àn
 + 1);

694 i‡(
p
 =
NULL
) {

695  
NGX_ERROR
;

698 
	`ngx_mem˝y
(
p
, 
°rög
.
d©a
, såög.
Àn
 + 1);

701 
œ°
 = 
p
 + 
°rög
.
Àn
;

703 
p
 && *p) {

705 
vÆue
 = 
p
;

706 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, '=');

707 i‡(
p
 =
NULL
) {

708 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

709 "övÆidÜibx¶à∑ømëî \"%s\"", 
vÆue
);

710  
NGX_ERROR
;

712 *
p
++ = '\0';

714 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

715 "x¶àfûã∏∑ømÇame: \"%s\"", 
vÆue
);

717 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

718 i‡(
s
 =
NULL
) {

719  
NGX_ERROR
;

722 *
s
 = 
vÆue
;

724 
vÆue
 = 
p
;

725 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, ':');

727 i‡(
p
) {

728 
Àn
 = 
p
 - 
vÆue
;

729 *
p
++ = '\0';

732 
Àn
 = 
œ°
 - 
vÆue
;

735 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

736 "x¶àfûã∏∑øm vÆue: \"%s\"", 
vÆue
);

738 
d°
 = 
vÆue
;

739 
§c
 = 
vÆue
;

741 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
Àn
, 0);

743 *
d°
 = '\0';

745 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

746 "x¶àfûã∏∑øm u√sˇ≥d: \"%s\"", 
vÆue
);

748 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

749 i‡(
s
 =
NULL
) {

750  
NGX_ERROR
;

753 *
s
 = 
vÆue
;

757 i‡(
föÆ
) {

758 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

759 i‡(
s
 =
NULL
) {

760  
NGX_ERROR
;

763 *
s
 = 
NULL
;

766  
NGX_OK
;

767 
	}
}

770 
u_ch¨
 *

771 
	$ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
)

773 
u_ch¨
 *
ty≥
;

775 i‡(
s
->
medüTy≥
) {

776  
s
->
medüTy≥
;

779 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

781 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
s
);

783 i‡(
ty≥
) {

784  
ty≥
;

788  
NULL
;

789 
	}
}

792 
u_ch¨
 *

793 
	$ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
)

795 
u_ch¨
 *
ícodög
;

797 i‡(
s
->
ícodög
) {

798  
s
->
ícodög
;

801 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

803 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
s
);

805 i‡(
ícodög
) {

806  
ícodög
;

810  
NULL
;

811 
	}
}

815 
	$ngx_hâp_x¶t_˛ónup
(*
d©a
)

817 
	`ngx_‰ì
(
d©a
);

818 
	}
}

822 
	$ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

824 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

826 
ngx_°r_t
 *
vÆue
;

827 
ngx_uöt_t
 
i
;

828 
ngx_poﬁ_˛ónup_t
 *
˛n
;

829 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

830 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

832 i‡(
xlcf
->
dtd
) {

836 
vÆue
 = 
cf
->
¨gs
->
ñts
;

838 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

840 
fûe
 = 
xmcf
->
dtd_fûes
.
ñts
;

841 
i
 = 0; i < 
xmcf
->
dtd_fûes
.
√…s
; i++) {

842 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

843 
xlcf
->
dtd
 = 
fûe
[
i
].
d©a
;

844  
NGX_CONF_OK
;

848 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

849 i‡(
˛n
 =
NULL
) {

850  
NGX_CONF_ERROR
;

853 
xlcf
->
dtd
 = 
	`xmlP¨£DTD
(
NULL
, (
xmlCh¨
 *Ë
vÆue
[1].
d©a
);

855 i‡(
xlcf
->
dtd
 =
NULL
) {

856 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0, "xmlParseDTD() failed");

857  
NGX_CONF_ERROR
;

860 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_dtd
;

861 
˛n
->
d©a
 = 
xlcf
->
dtd
;

863 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
dtd_fûes
);

864 i‡(
fûe
 =
NULL
) {

865  
NGX_CONF_ERROR
;

868 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

869 
fûe
->
d©a
 = 
xlcf
->
dtd
;

871  
NGX_CONF_OK
;

872 
	}
}

877 
	$ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

879 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

881 
ngx_°r_t
 *
vÆue
;

882 
ngx_uöt_t
 
i
, 
n
;

883 
ngx_poﬁ_˛ónup_t
 *
˛n
;

884 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

885 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

886 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

887 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

888 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

890 
vÆue
 = 
cf
->
¨gs
->
ñts
;

892 i‡(
xlcf
->
shìts
.
ñts
 =
NULL
) {

893 i‡(
	`ngx_¨øy_öô
(&
xlcf
->
shìts
, 
cf
->
poﬁ
, 1,

894 (
ngx_hâp_x¶t_shìt_t
))

895 !
NGX_OK
)

897  
NGX_CONF_ERROR
;

901 
shìt
 = 
	`ngx_¨øy_push
(&
xlcf
->
shìts
);

902 i‡(
shìt
 =
NULL
) {

903  
NGX_CONF_ERROR
;

906 
	`ngx_memzîo
(
shìt
, (
ngx_hâp_x¶t_shìt_t
));

908 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

909  
NGX_CONF_ERROR
;

912 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

914 
fûe
 = 
xmcf
->
shìt_fûes
.
ñts
;

915 
i
 = 0; i < 
xmcf
->
shìt_fûes
.
√…s
; i++) {

916 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

917 
shìt
->
°yÀshìt
 = 
fûe
[
i
].
d©a
;

918 
found
;

922 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

923 i‡(
˛n
 =
NULL
) {

924  
NGX_CONF_ERROR
;

927 
shìt
->
°yÀshìt
 = 
	`x¶tP¨£StyÀshìtFûe
(
vÆue
[1].
d©a
);

928 i‡(
shìt
->
°yÀshìt
 =
NULL
) {

929 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

931 
vÆue
[1].
d©a
);

932  
NGX_CONF_ERROR
;

935 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_°yÀshìt
;

936 
˛n
->
d©a
 = 
shìt
->
°yÀshìt
;

938 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
shìt_fûes
);

939 i‡(
fûe
 =
NULL
) {

940  
NGX_CONF_ERROR
;

943 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

944 
fûe
->
d©a
 = 
shìt
->
°yÀshìt
;

946 
found
:

948 
n
 = 
cf
->
¨gs
->
√…s
;

950 i‡(
n
 == 2) {

951  
NGX_CONF_OK
;

954 i‡(
	`ngx_¨øy_öô
(&
shìt
->
∑øms
, 
cf
->
poﬁ
, 
n
 - 2,

955 (
ngx_hâp_x¶t_∑øm_t
))

956 !
NGX_OK
)

958  
NGX_CONF_ERROR
;

961 
i
 = 2; i < 
n
; i++) {

963 
∑øm
 = 
	`ngx_¨øy_push
(&
shìt
->
∑øms
);

964 i‡(
∑øm
 =
NULL
) {

965  
NGX_CONF_ERROR
;

968 
	`ngx_memzîo
(
∑øm
, (
ngx_hâp_x¶t_∑øm_t
));

969 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

971 
ccv
.
cf
 = cf;

972 
ccv
.
vÆue
 = &vÆue[
i
];

973 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

974 
ccv
.
zîo
 = 1;

976 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

977  
NGX_CONF_ERROR
;

981  
NGX_CONF_OK
;

982 
	}
}

986 
	$ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

988 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

990 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

991 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

992 
ngx_°r_t
 *
vÆue
;

994 
vÆue
 = 
cf
->
¨gs
->
ñts
;

996 i‡(
xlcf
->
∑øms
 =
NULL
) {

997 
xlcf
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

998 (
ngx_hâp_x¶t_∑øm_t
));

999 i‡(
xlcf
->
∑øms
 =
NULL
) {

1000  
NGX_CONF_ERROR
;

1004 
∑øm
 = 
	`ngx_¨øy_push
(
xlcf
->
∑øms
);

1005 i‡(
∑øm
 =
NULL
) {

1006  
NGX_CONF_ERROR
;

1009 
∑øm
->
«me
 = 
vÆue
[1].
d©a
;

1010 
∑øm
->
quŸe
 = (
cmd
->
po°
 =
NULL
) ? 0 : 1;

1012 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1014 
ccv
.
cf
 = cf;

1015 
ccv
.
vÆue
 = &value[2];

1016 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

1017 
ccv
.
zîo
 = 1;

1019 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1020  
NGX_CONF_ERROR
;

1023  
NGX_CONF_OK
;

1024 
	}
}

1028 
	$ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
)

1030 
	`xmlFªeDtd
(
d©a
);

1031 
	}
}

1035 
	$ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
)

1037 
	`x¶tFªeStyÀshìt
(
d©a
);

1038 
	}
}

1042 
	$ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1044 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
c⁄f
;

1046 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
));

1047 i‡(
c⁄f
 =
NULL
) {

1048  
NULL
;

1051 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
dtd_fûes
, 
cf
->
poﬁ
, 1,

1052 (
ngx_hâp_x¶t_fûe_t
))

1053 !
NGX_OK
)

1055  
NULL
;

1058 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
shìt_fûes
, 
cf
->
poﬁ
, 1,

1059 (
ngx_hâp_x¶t_fûe_t
))

1060 !
NGX_OK
)

1062  
NULL
;

1065  
c⁄f
;

1066 
	}
}

1070 
	$ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1072 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

1074 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
));

1075 i‡(
c⁄f
 =
NULL
) {

1076  
NULL
;

1089 
c⁄f
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

1091  
c⁄f
;

1092 
	}
}

1096 
	$ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1098 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1099 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1101 i‡(
c⁄f
->
dtd
 =
NULL
) {

1102 
c⁄f
->
dtd
 = 
¥ev
->dtd;

1105 i‡(
c⁄f
->
shìts
.
√…s
 == 0) {

1106 
c⁄f
->
shìts
 = 
¥ev
->sheets;

1109 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1110 
c⁄f
->
∑øms
 = 
¥ev
->params;

1113 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1114 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1115 
ngx_hâp_x¶t_deÁu…_ty≥s
)

1116 !
NGX_OK
)

1118  
NGX_CONF_ERROR
;

1121 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

1123  
NGX_CONF_OK
;

1124 
	}
}

1127 
ngx_öt_t


1128 
	$ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1130 
	`xmlInôP¨£r
();

1132 #i‡(
NGX_HAVE_EXSLT
)

1133 
	`ex¶tRegi°îAŒ
();

1136  
NGX_OK
;

1137 
	}
}

1140 
ngx_öt_t


1141 
	$ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1143 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1144 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_x¶t_hódî_fûãr
;

1146 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1147 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_x¶t_body_fûãr
;

1149  
NGX_OK
;

1150 
	}
}

1154 
	$ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1156 
	`x¶tCÀ™upGlobÆs
();

1157 
	`xmlCÀ™upP¨£r
();

1158 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_≥æ_moduÀ.h
>

15 
PîlI¡î¥ëî
 *
	m≥æ
;

16 
HV
 *
	mngöx
;

17 
ngx_¨øy_t
 *
	mmoduÀs
;

18 
ngx_¨øy_t
 *
	mªquúes
;

19 } 
	tngx_hâp_≥æ_maö_c⁄f_t
;

23 
SV
 *
	msub
;

24 
ngx_°r_t
 
	mh™dÀr
;

25 } 
	tngx_hâp_≥æ_loc_c⁄f_t
;

29 
SV
 *
	msub
;

30 
ngx_°r_t
 
	mh™dÀr
;

31 } 
	tngx_hâp_≥æ_v¨übÀ_t
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_öt_t
 
ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
, 
ngx_°r_t
 **
∑øms
);

39 *
ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

40 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

41 
PîlI¡î¥ëî
 *
ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

43 
ngx_öt_t
 
ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
,

44 
ngx_log_t
 *
log
);

45 
ngx_öt_t
 
ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
,

46 
HV
 *
ngöx
, 
SV
 *
sub
, SV **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
);

47 
ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
);

49 
ngx_öt_t
 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

50 *
ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

52 *
ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

58 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

59 
ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
);

62 
ngx_öt_t
 
ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
);

66 
ngx_comm™d_t
 
	gngx_hâp_≥æ_comm™ds
[] = {

68 { 
ngx_°rög
("perl_modules"),

69 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

71 
NGX_HTTP_MAIN_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
moduÀs
),

73 
NULL
 },

75 { 
ngx_°rög
("perl_require"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

78 
NGX_HTTP_MAIN_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
ªquúes
),

80 
NULL
 },

82 { 
ngx_°rög
("perl"),

83 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_hâp_≥æ
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
 },

89 { 
ngx_°rög
("perl_set"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

91 
ngx_hâp_≥æ_£t
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
NULL
 },

96 
ngx_nuŒ_comm™d


100 
ngx_hâp_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ_˘x
 = {

101 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
,

102 
NULL
,

104 
ngx_hâp_≥æ_¸óã_maö_c⁄f
,

105 
ngx_hâp_≥æ_öô_maö_c⁄f
,

107 
NULL
,

108 
NULL
,

110 
ngx_hâp_≥æ_¸óã_loc_c⁄f
,

111 
ngx_hâp_≥æ_mîge_loc_c⁄f


115 
ngx_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ
 = {

116 
NGX_MODULE_V1
,

117 &
ngx_hâp_≥æ_moduÀ_˘x
,

118 
ngx_hâp_≥æ_comm™ds
,

119 
NGX_HTTP_MODULE
,

120 
NULL
,

121 
NULL
,

122 
ngx_hâp_≥æ_öô_w‹kî
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
ngx_hâp_≥æ_exô
,

127 
NGX_MODULE_V1_PADDING


131 #i‡(
NGX_HTTP_SSI
)

133 
	#NGX_HTTP_PERL_SSI_SUB
 0

	)

134 
	#NGX_HTTP_PERL_SSI_ARG
 1

	)

137 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_≥æ_ssi_∑øms
[] = {

138 { 
ngx_°rög
("sub"), 
NGX_HTTP_PERL_SSI_SUB
, 1, 0 },

139 { 
ngx_°rög
("¨g"), 
NGX_HTTP_PERL_SSI_ARG
, 0, 1 },

140 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

143 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_≥æ_ssi_comm™d
 = {

144 
ngx_°rög
("≥æ"), 
ngx_hâp_≥æ_ssi
, 
ngx_hâp_≥æ_ssi_∑øms
, 0, 0, 1

150 
ngx_°r_t
 
	gngx_nuŒ_«me
 = 
ngx_nuŒ_°rög
;

151 
HV
 *
	gngöx_°ash
;

153 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

154 
ngx_uöt_t
 
	gngx_≥æ_ãrm
;

156 
PîlI¡î¥ëî
 *
	g≥æ
;

161 
	$ngx_hâp_≥æ_xs_öô
(
pTHX
)

163 
	`√wXS
("Dy«Lﬂdî::boŸ_Dy«Lﬂdî", 
boŸ_Dy«Lﬂdî
, 
__FILE__
);

165 
ngöx_°ash
 = 
	`gv_°ashpv
("ngöx", 
TRUE
);

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_≥æ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

172 
r
->
maö
->
cou¡
++;

174 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

176  
NGX_DONE
;

177 
	}
}

181 
	$ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

183 
SV
 *
sub
;

184 
ngx_öt_t
 
rc
;

185 
ngx_°r_t
 
uri
, 
¨gs
, *
h™dÀr
;

186 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

187 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

188 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl handler");

192 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

201 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

204 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

208 
	`dTHXa
(
pmcf
->
≥æ
);

209 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

210 
	`PERL_SET_INTERP
(
pmcf
->
≥æ
);

212 i‡(
˘x
->
√xt
 =
NULL
) {

213 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

214 
sub
 = 
∂cf
->sub;

215 
h™dÀr
 = &
∂cf
->handler;

218 
sub
 = 
˘x
->
√xt
;

219 
h™dÀr
 = &
ngx_nuŒ_«me
;

220 
˘x
->
√xt
 = 
NULL
;

223 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sub
, 
NULL
, 
h™dÀr
,

224 
NULL
);

228 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

229 "≥æ h™dÀ∏d⁄e: %i", 
rc
);

231 i‡(
rc
 =
NGX_DONE
) {

232 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

236 i‡(
rc
 > 600) {

237 
rc
 = 
NGX_OK
;

240 i‡(
˘x
->
ªdúe˘_uri
.
Àn
) {

241 
uri
 = 
˘x
->
ªdúe˘_uri
;

242 
¨gs
 = 
˘x
->
ªdúe˘_¨gs
;

245 
uri
.
Àn
 = 0;

248 
˘x
->
fûíame
.
d©a
 = 
NULL
;

249 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

251 i‡(
˘x
->
d⁄e
 || ctx->
√xt
) {

252 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

256 i‡(
uri
.
Àn
) {

257 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

258 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

262 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_HTTP_OK
) {

263 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

264 
˘x
->
d⁄e
 = 1;

267 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

268 
	}
}

272 
	$ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

274 
ngx_evít_t
 *
wev
;

276 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

279 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

281 i‡(
wev
->
dñayed
) {

283 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

284 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

290 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

291 
	}
}

294 
ngx_öt_t


295 
	$ngx_hâp_≥æ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

296 
uöçå_t
 
d©a
)

298 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
 = (ngx_hâp_≥æ_v¨übÀ_à*Ë
d©a
;

300 
ngx_öt_t
 
rc
;

301 
ngx_°r_t
 
vÆue
;

302 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

303 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

305 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

308 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

310 i‡(
˘x
 =
NULL
) {

311 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

312 i‡(
˘x
 =
NULL
) {

313  
NGX_ERROR
;

316 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

319 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

321 
vÆue
.
d©a
 = 
NULL
;

325 
	`dTHXa
(
pmcf
->
≥æ
);

326 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

327 
	`PERL_SET_INTERP
(
pmcf
->
≥æ
);

329 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
pv
->
sub
, 
NULL
,

330 &
pv
->
h™dÀr
, &
vÆue
);

334 i‡(
vÆue
.
d©a
) {

335 
v
->
Àn
 = 
vÆue
.len;

336 
v
->
vÆid
 = 1;

337 
v
->
no_ˇchóbÀ
 = 0;

338 
v
->
nŸ_found
 = 0;

339 
v
->
d©a
 = 
vÆue
.data;

342 
v
->
nŸ_found
 = 1;

345 
˘x
->
fûíame
.
d©a
 = 
NULL
;

346 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

348 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

351  
rc
;

352 
	}
}

355 #i‡(
NGX_HTTP_SSI
)

357 
ngx_öt_t


358 
	$ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
,

359 
ngx_°r_t
 **
∑øms
)

361 
SV
 *
sv
, **
asv
;

362 
ngx_öt_t
 
rc
;

363 
ngx_°r_t
 *
h™dÀr
, **
¨gs
;

364 
ngx_uöt_t
 
i
;

365 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

366 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

368 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

371 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

373 i‡(
˘x
 =
NULL
) {

374 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

375 i‡(
˘x
 =
NULL
) {

376  
NGX_ERROR
;

379 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

382 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

384 
˘x
->
ssi
 = 
ssi_˘x
;

386 
h™dÀr
 = 
∑øms
[
NGX_HTTP_PERL_SSI_SUB
];

387 
h™dÀr
->
d©a
[h™dÀr->
Àn
] = '\0';

391 
	`dTHXa
(
pmcf
->
≥æ
);

392 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

393 
	`PERL_SET_INTERP
(
pmcf
->
≥æ
);

399 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 
h™dÀr
, &
sv
);

401 i‡(
sv
 =&
PL_sv_undef
) {

402 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

403 "evÆ_pv(\"%V\"ËÁûed", 
h™dÀr
);

404  
NGX_ERROR
;

407 i‡(
sv
 =
NULL
) {

408 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

413 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

415 
¨gs
 = &
∑øms
[
NGX_HTTP_PERL_SSI_ARG
];

417 i‡(
¨gs
[0]) {

419 
i
 = 0; 
¨gs
[i]; i++) { }

421 
asv
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
i
 + 1Ë* (
SV
 *));

423 i‡(
asv
 =
NULL
) {

424 
	`SvREFCNT_dec
(
sv
);

425  
NGX_ERROR
;

428 
asv
[0] = (
SV
 *Ë(
uöçå_t
Ë
i
;

430 
i
 = 0; 
¨gs
[i]; i++) {

431 
asv
[
i
 + 1] = 
	`√wSVpvn
((*Ë
¨gs
[i]->
d©a
,árgs[i]->
Àn
);

435 
asv
 = 
NULL
;

438 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sv
, 
asv
, 
h™dÀr
,

439 
NULL
);

441 
	`SvREFCNT_dec
(
sv
);

445 
˘x
->
fûíame
.
d©a
 = 
NULL
;

446 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

447 
˘x
->
ssi
 = 
NULL
;

449 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl ssi done");

451  
rc
;

452 
	}
}

458 
	$ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

460 
ngx_°r_t
 *
m
;

461 
ngx_uöt_t
 
i
;

462 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

463 
ngx_poﬁ_˛ónup_t
 *
˛n
;

465 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

466 i‡(
˛n
 =
NULL
) {

467  
NGX_CONF_ERROR
;

472 #ifde‡
NGX_PERL_MODULES


473 i‡(
pmcf
->
moduÀs
 =
NGX_CONF_UNSET_PTR
) {

475 
pmcf
->
moduÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_°r_t
));

476 i‡(
pmcf
->
moduÀs
 =
NULL
) {

477  
NGX_CONF_ERROR
;

480 
m
 = 
	`ngx_¨øy_push
(
pmcf
->
moduÀs
);

481 i‡(
m
 =
NULL
) {

482  
NGX_CONF_ERROR
;

485 
	`ngx_°r_£t
(
m
, 
NGX_PERL_MODULES
);

489 i‡(
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
) {

490 
m
 = 
pmcf
->
moduÀs
->
ñts
;

491 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

492 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
m
[
i
], 0Ë!
NGX_OK
) {

493  
NGX_CONF_ERROR
;

498 #i‡!(
NGX_HAVE_PERL_MULTIPLICITY
)

500 i‡(
≥æ
) {

502 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

503  
NGX_CONF_ERROR
;

506 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
)

507 !
NGX_OK
)

509  
NGX_CONF_ERROR
;

512 
pmcf
->
≥æ
 =Öerl;

513 
pmcf
->
ngöx
 = 
ngöx_°ash
;

515  
NGX_CONF_OK
;

520 i‡(
ngöx_°ash
 =
NULL
) {

521 
	`PERL_SYS_INIT
(&
ngx_¨gc
, &
ngx_¨gv
);

524 
pmcf
->
≥æ
 = 
	`ngx_hâp_≥æ_¸óã_öãΩªãr
(
cf
,Ömcf);

526 i‡(
pmcf
->
≥æ
 =
NULL
) {

527  
NGX_CONF_ERROR
;

530 
pmcf
->
ngöx
 = 
ngöx_°ash
;

532 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

534 
˛n
->
h™dÀr
 = 
ngx_hâp_≥æ_˛ónup_≥æ
;

535 
˛n
->
d©a
 = 
pmcf
->
≥æ
;

539 
≥æ
 = 
pmcf
->perl;

543  
NGX_CONF_OK
;

544 
	}
}

547 
PîlI¡î¥ëî
 *

548 
	$ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

549 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

551 
n
;

552 
STRLEN
 
Àn
;

553 
SV
 *
sv
;

554 *
vî
, **
embeddög
;

555 
ngx_°r_t
 *
m
;

556 
ngx_uöt_t
 
i
;

557 
PîlI¡î¥ëî
 *
≥æ
;

559 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "createÖerl interpreter");

561 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

562  
NULL
;

565 
≥æ
 = 
	`≥æ_Æloc
();

566 i‡(
≥æ
 =
NULL
) {

567 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "perl_alloc() failed");

568  
NULL
;

573 
	`dTHXa
(
≥æ
);

574 
	`PERL_SET_CONTEXT
(
≥æ
);

575 
	`PERL_SET_INTERP
(
≥æ
);

577 
	`≥æ_c⁄°ru˘
(
≥æ
);

579 #ifde‡
PERL_EXIT_DESTRUCT_END


580 
PL_exô_Êags
 |
PERL_EXIT_DESTRUCT_END
;

583 
n
 = (
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
Ë?Ömcf->moduÀs->
√…s
 * 2 : 0;

585 
embeddög
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (5 + 
n
) * (*));

586 i‡(
embeddög
 =
NULL
) {

587 
Áû
;

590 
embeddög
[0] = "";

592 i‡(
n
++) {

593 
m
 = 
pmcf
->
moduÀs
->
ñts
;

594 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

595 
embeddög
[2 * 
i
 + 1] = "-I";

596 
embeddög
[2 * 
i
 + 2] = (*Ë
m
[i].
d©a
;

600 
embeddög
[
n
++] = "-Mnginx";

601 
embeddög
[
n
++] = "-e";

602 
embeddög
[
n
++] = "0";

603 
embeddög
[
n
] = 
NULL
;

605 
n
 = 
	`≥æ_∑r£
(
≥æ
, 
ngx_hâp_≥æ_xs_öô
,Ç, 
embeddög
, 
NULL
);

607 i‡(
n
 != 0) {

608 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "≥æ_∑r£(ËÁûed: %d", 
n
);

609 
Áû
;

612 
sv
 = 
	`gë_sv
("ngöx::VERSION", 
FALSE
);

613 
vî
 = 
	`SvPV
(
sv
, 
Àn
);

615 i‡(
	`ngx_°rcmp
(
vî
, 
NGINX_VERSION
) != 0) {

616 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

617 "vîsi⁄ " 
NGINX_VERSION
 " ofÇginx.pm isÑequired, "

618 "buà%†wa†found", 
vî
);

619 
Áû
;

622 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
Ë!
NGX_OK
) {

623 
Áû
;

628  
≥æ
;

630 
Áû
:

632 (Ë
	`≥æ_de°ru˘
(
≥æ
);

634 
	`≥æ_‰ì
(
≥æ
);

636  
NULL
;

637 
	}
}

640 
ngx_öt_t


641 
	$ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
, 
ngx_log_t
 *
log
)

643 
u_ch¨
 *
îr
;

644 
STRLEN
 
Àn
;

645 
ngx_°r_t
 *
s¸ùt
;

646 
ngx_uöt_t
 
i
;

648 i‡(
ªquúes
 =
NGX_CONF_UNSET_PTR
) {

649  
NGX_OK
;

652 
s¸ùt
 = 
ªquúes
->
ñts
;

653 
i
 = 0; i < 
ªquúes
->
√…s
; i++) {

655 
	`ªquúe_pv
((*Ë
s¸ùt
[
i
].
d©a
);

657 i‡(
	`SvTRUE
(
ERRSV
)) {

659 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

660 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

662 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

664 
s¸ùt
[
i
].
d©a
, 
Àn
 + 1, 
îr
);

666  
NGX_ERROR
;

670  
NGX_OK
;

671 
	}
}

674 
ngx_öt_t


675 
	$ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
, 
HV
 *
ngöx
, 
SV
 *
sub
,

676 
SV
 **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
)

678 
SV
 *
sv
;

679 
n
, 
°©us
;

680 *
löe
;

681 
u_ch¨
 *
îr
;

682 
STRLEN
 
Àn
, 
n_a
;

683 
ngx_uöt_t
 
i
;

684 
ngx_c⁄√˘i⁄_t
 *
c
;

686 
dSP
;

688 
°©us
 = 0;

690 
ENTER
;

691 
SAVETMPS
;

693 
	`PUSHMARK
(
•
);

695 
sv
 = 
	`sv_2m‹èl
(
	`sv_bÀss
(
	`√wRV_noöc
(
	`√wSViv
(
	`PTR2IV
(
r
))), 
ngöx
));

696 
	`XPUSHs
(
sv
);

698 i‡(
¨gs
) {

699 
	`EXTEND
(
•
, (
öçå_t
Ë
¨gs
[0]);

701 
i
 = 1; i <(
uöçå_t
Ë
¨gs
[0]; i++) {

702 
	`PUSHs
(
	`sv_2m‹èl
(
¨gs
[
i
]));

706 
PUTBACK
;

708 
c
 = 
r
->
c⁄√˘i⁄
;

710 
n
 = 
	`ˇŒ_sv
(
sub
, 
G_EVAL
);

712 
SPAGAIN
;

714 i‡(
n
) {

715 i‡(
rv
 =
NULL
) {

716 
°©us
 = 
POPi
;

718 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

719 "ˇŒ_sv: %d", 
°©us
);

722 
löe
 = 
	`SvPVx
(
POPs
, 
n_a
);

723 
rv
->
Àn
 = 
n_a
;

725 
rv
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
n_a
);

726 i‡(
rv
->
d©a
 =
NULL
) {

727  
NGX_ERROR
;

730 
	`ngx_mem˝y
(
rv
->
d©a
, 
löe
, 
n_a
);

734 
PUTBACK
;

736 
FREETMPS
;

737 
LEAVE
;

741 i‡(
	`SvTRUE
(
ERRSV
)) {

743 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

744 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

746 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

747 "ˇŒ_sv(\"%V\"ËÁûed: \"%*s\"", 
h™dÀr
, 
Àn
 + 1, 
îr
);

749 i‡(
rv
) {

750  
NGX_ERROR
;

753  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

756 i‡(
n
 != 1) {

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

758 "ˇŒ_sv(\"%V\"Ëªtu∫ed %dÑesu…s", 
h™dÀr
, 
n
);

759 
°©us
 = 
NGX_OK
;

762 i‡(
rv
) {

763  
NGX_OK
;

766  (
ngx_öt_t
Ë
°©us
;

767 
	}
}

771 
	$ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
)

773 
u_ch¨
 *
p
;

775 
p
 = 
h™dÀr
->
d©a
; *p;Ö++) {

776 i‡(*
p
 !' ' && *∞!'\t' && *∞!
CR
 && *∞!
LF
) {

781 i‡(
	`ngx_°∫cmp
(
p
, "sub ", 4) == 0

782 || 
	`ngx_°∫cmp
(
p
, "sub{", 4) == 0

783 || 
	`ngx_°∫cmp
(
p
, "use ", 4) == 0)

785 *
sv
 = 
	`evÆ_pv
((*Ë
p
, 
FALSE
);

792 *
sv
 = 
NULL
;

793 
	}
}

797 
	$ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

799 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

801 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_maö_c⁄f_t
));

802 i‡(
pmcf
 =
NULL
) {

803  
NULL
;

806 
pmcf
->
moduÀs
 = 
NGX_CONF_UNSET_PTR
;

807 
pmcf
->
ªquúes
 = 
NGX_CONF_UNSET_PTR
;

809  
pmcf
;

810 
	}
}

814 
	$ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

816 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
 = 
c⁄f
;

818 i‡(
pmcf
->
≥æ
 =
NULL
) {

819 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

820  
NGX_CONF_ERROR
;

824  
NGX_CONF_OK
;

825 
	}
}

828 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

831 
	$ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
)

833 
PîlI¡î¥ëî
 *
≥æ
 = 
d©a
;

835 
	`PERL_SET_CONTEXT
(
≥æ
);

836 
	`PERL_SET_INTERP
(
≥æ
);

838 (Ë
	`≥æ_de°ru˘
(
≥æ
);

840 
	`≥æ_‰ì
(
≥æ
);

842 i‡(
ngx_≥æ_ãrm
) {

843 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0, "perlÅerm");

845 
	`PERL_SYS_TERM
();

847 
	}
}

852 
ngx_öt_t


853 
	$ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

855 #i‡(
NGX_HTTP_SSI
)

856 
ngx_öt_t
 
rc
;

857 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

859 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

861 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
ngx_hâp_≥æ_ssi_comm™d
.
«me
,

862 &
ngx_hâp_≥æ_ssi_comm™d
, 
NGX_HASH_READONLY_KEY
);

864 i‡(
rc
 !
NGX_OK
) {

865 i‡(
rc
 =
NGX_BUSY
) {

866 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

868 &
ngx_hâp_≥æ_ssi_comm™d
.
«me
);

871  
NGX_ERROR
;

875  
NGX_OK
;

876 
	}
}

880 
	$ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

882 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

884 
∂cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_loc_c⁄f_t
));

885 i‡(
∂cf
 =
NULL
) {

886  
NULL
;

895  
∂cf
;

896 
	}
}

900 
	$ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

902 
ngx_hâp_≥æ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

903 
ngx_hâp_≥æ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

905 i‡(
c⁄f
->
sub
 =
NULL
) {

906 
c⁄f
->
sub
 = 
¥ev
->sub;

907 
c⁄f
->
h™dÀr
 = 
¥ev
->handler;

910  
NGX_CONF_OK
;

911 
	}
}

915 
	$ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

917 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

919 
ngx_°r_t
 *
vÆue
;

920 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

921 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

923 
vÆue
 = 
cf
->
¨gs
->
ñts
;

925 i‡(
∂cf
->
h™dÀr
.
d©a
) {

926 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

927 "du∂iˇãÖî»h™dÀ∏\"%V\"", &
vÆue
[1]);

928  
NGX_CONF_ERROR
;

931 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

933 i‡(
pmcf
->
≥æ
 =
NULL
) {

934 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

935  
NGX_CONF_ERROR
;

939 
∂cf
->
h™dÀr
 = 
vÆue
[1];

943 
	`dTHXa
(
pmcf
->
≥æ
);

944 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

945 
	`PERL_SET_INTERP
(
pmcf
->
≥æ
);

947 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[1], &
∂cf
->
sub
);

949 i‡(
∂cf
->
sub
 =&
PL_sv_undef
) {

950 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

951 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[1]);

952  
NGX_CONF_ERROR
;

955 i‡(
∂cf
->
sub
 =
NULL
) {

956 
∂cf
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[1].
d©a
, vÆue[1].
Àn
);

961 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

962 
˛cf
->
h™dÀr
 = 
ngx_hâp_≥æ_h™dÀr
;

964  
NGX_CONF_OK
;

965 
	}
}

969 
	$ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

971 
ngx_öt_t
 
ödex
;

972 
ngx_°r_t
 *
vÆue
;

973 
ngx_hâp_v¨übÀ_t
 *
v
;

974 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
;

975 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

977 
vÆue
 = 
cf
->
¨gs
->
ñts
;

979 i‡(
vÆue
[1].
d©a
[0] != '$') {

980 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

981 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

982  
NGX_CONF_ERROR
;

985 
vÆue
[1].
Àn
--;

986 
vÆue
[1].
d©a
++;

988 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

989 i‡(
v
 =
NULL
) {

990  
NGX_CONF_ERROR
;

993 
pv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_v¨übÀ_t
));

994 i‡(
pv
 =
NULL
) {

995  
NGX_CONF_ERROR
;

998 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

999 i‡(
ödex
 =
NGX_ERROR
) {

1000  
NGX_CONF_ERROR
;

1003 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

1005 i‡(
pmcf
->
≥æ
 =
NULL
) {

1006 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

1007  
NGX_CONF_ERROR
;

1011 
pv
->
h™dÀr
 = 
vÆue
[2];

1015 
	`dTHXa
(
pmcf
->
≥æ
);

1016 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1017 
	`PERL_SET_INTERP
(
pmcf
->
≥æ
);

1019 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[2], &
pv
->
sub
);

1021 i‡(
pv
->
sub
 =&
PL_sv_undef
) {

1022 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

1023 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[2]);

1024  
NGX_CONF_ERROR
;

1027 i‡(
pv
->
sub
 =
NULL
) {

1028 
pv
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[2].
d©a
, vÆue[2].
Àn
);

1033 
v
->
gë_h™dÀr
 = 
ngx_hâp_≥æ_v¨übÀ
;

1034 
v
->
d©a
 = (
uöçå_t
Ë
pv
;

1036  
NGX_CONF_OK
;

1037 
	}
}

1040 
ngx_öt_t


1041 
	$ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

1043 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

1045 
pmcf
 = 
	`ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
ngx_hâp_≥æ_moduÀ
);

1047 i‡(
pmcf
) {

1048 
	`dTHXa
(
pmcf
->
≥æ
);

1049 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1050 
	`PERL_SET_INTERP
(
pmcf
->
≥æ
);

1054 
	`sv_£tiv
(
	`GvSV
(
	`gv_„tchpv
("$", 
TRUE
, 
SVt_PV
)), (
I32
Ë
ngx_pid
);

1057  
NGX_OK
;

1058 
	}
}

1062 
	$ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1064 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

1071 
ngx_≥æ_ãrm
 = 1;

1075 i‡(
ngöx_°ash
) {

1076 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cy˛e
->
log
, 0, "perlÅerm");

1078 (Ë
	`≥æ_de°ru˘
(
≥æ
);

1080 
	`≥æ_‰ì
(
≥æ
);

1082 
	`PERL_SYS_TERM
();

1086 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@src/http/ngx_http.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_öt_t
 
ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

15 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

16 
ngx_öt_t
 
ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
,

17 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

18 
ngx_öt_t
 
ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

19 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

21 
ngx_öt_t
 
ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
,

22 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

23 
ngx_hâp_li°í_›t_t
 *
ls›t
);

24 
ngx_öt_t
 
ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
,

25 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

26 
ngx_hâp_li°í_›t_t
 *
ls›t
);

27 
ngx_öt_t
 
ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

30 *
ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
,

31 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

32 
ngx_uöt_t
 
˘x_ödex
);

33 *
ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_queue_t
 *
loˇti⁄s
, **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

35 
ngx_uöt_t
 
˘x_ödex
);

36 
ngx_öt_t
 
ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

38 
ngx_öt_t
 
ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

40 
ngx_öt_t
 
ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
,

41 c⁄° 
ngx_queue_t
 *
two
);

42 
ngx_öt_t
 
ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_queue_t
 *
loˇti⁄s
);

44 
ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,

45 
ngx_queue_t
 *
q
);

46 
ngx_hâp_loˇti⁄_åì_node_t
 *

47 
ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

48 
size_t
 
¥efix
);

50 
ngx_öt_t
 
ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_¨øy_t
 *
p‹ts
);

52 
ngx_öt_t
 
ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
,

53 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

54 
ngx_öt_t
 
ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

55 
ngx_libc_cde˛
 
ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

56 c⁄° *
two
);

58 
ngx_öt_t
 
ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
,

59 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
);

60 
ngx_li°íög_t
 *
ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
,

61 
ngx_hâp_c⁄f_addr_t
 *
addr
);

62 
ngx_öt_t
 
ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

63 
ngx_hâp_c⁄f_addr_t
 *
addr
);

64 #i‡(
NGX_HAVE_INET6
)

65 
ngx_öt_t
 
ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

66 
ngx_hâp_c⁄f_addr_t
 *
addr
);

69 
ngx_uöt_t
 
	gngx_hâp_max_moduÀ
;

72 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_t›_hódî_fûãr
;

73 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_t›_body_fûãr
;

74 
ngx_hâp_ªque°_body_fûãr_±
 
	gngx_hâp_t›_ªque°_body_fûãr
;

77 
ngx_°r_t
 
	gngx_hâp_html_deÁu…_ty≥s
[] = {

78 
ngx_°rög
("text/html"),

79 
ngx_nuŒ_°rög


83 
ngx_comm™d_t
 
	gngx_hâp_comm™ds
[] = {

85 { 
ngx_°rög
("http"),

86 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

87 
ngx_hâp_block
,

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_c‹e_moduÀ_t
 
	gngx_hâp_moduÀ_˘x
 = {

97 
ngx_°rög
("http"),

98 
NULL
,

99 
NULL


103 
ngx_moduÀ_t
 
	gngx_hâp_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_hâp_moduÀ_˘x
,

106 
ngx_hâp_comm™ds
,

107 
NGX_CORE_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


120 
	$ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

122 *
rv
;

123 
ngx_uöt_t
 
mi
, 
m
, 
s
;

124 
ngx_c⁄f_t
 
pcf
;

125 
ngx_hâp_moduÀ_t
 *
moduÀ
;

126 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

127 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

128 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

129 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

131 i‡(*(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
) {

137 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

138 i‡(
˘x
 =
NULL
) {

139  
NGX_CONF_ERROR
;

142 *(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

147 
ngx_hâp_max_moduÀ
 = 
	`ngx_cou¡_moduÀs
(
cf
->
cy˛e
, 
NGX_HTTP_MODULE
);

152 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

153 (*Ë* 
ngx_hâp_max_moduÀ
);

154 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

155  
NGX_CONF_ERROR
;

164 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

165 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

166  
NGX_CONF_ERROR
;

175 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

176 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

177  
NGX_CONF_ERROR
;

186 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

187 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

191 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

192 
mi
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

194 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

195 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

196 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

197  
NGX_CONF_ERROR
;

201 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

202 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

203 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

204  
NGX_CONF_ERROR
;

208 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

209 
˘x
->
loc_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

210 i‡(
˘x
->
loc_c⁄f
[
mi
] =
NULL
) {

211  
NGX_CONF_ERROR
;

216 
pcf
 = *
cf
;

217 
cf
->
˘x
 = ctx;

219 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

220 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

224 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

226 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

227 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

228  
NGX_CONF_ERROR
;

235 
cf
->
moduÀ_ty≥
 = 
NGX_HTTP_MODULE
;

236 
cf
->
cmd_ty≥
 = 
NGX_HTTP_MAIN_CONF
;

237 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

239 i‡(
rv
 !
NGX_CONF_OK
) {

240 
Áûed
;

248 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

249 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

251 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

252 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

256 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

257 
mi
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

261 i‡(
moduÀ
->
öô_maö_c⁄f
) {

262 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

263 i‡(
rv
 !
NGX_CONF_OK
) {

264 
Áûed
;

268 
rv
 = 
	`ngx_hâp_mîge_£rvîs
(
cf
, 
cmcf
, 
moduÀ
, 
mi
);

269 i‡(
rv
 !
NGX_CONF_OK
) {

270 
Áûed
;

277 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

279 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

281 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
cscÂ
[
s
], 
˛cf
Ë!
NGX_OK
) {

282  
NGX_CONF_ERROR
;

285 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

286  
NGX_CONF_ERROR
;

291 i‡(
	`ngx_hâp_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

292  
NGX_CONF_ERROR
;

295 i‡(
	`ngx_hâp_öô_hódîs_ö_hash
(
cf
, 
cmcf
Ë!
NGX_OK
) {

296  
NGX_CONF_ERROR
;

300 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

301 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

305 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

307 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

308 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

309  
NGX_CONF_ERROR
;

314 i‡(
	`ngx_hâp_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

315  
NGX_CONF_ERROR
;

323 *
cf
 = 
pcf
;

326 i‡(
	`ngx_hâp_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

327  
NGX_CONF_ERROR
;

333 i‡(
	`ngx_hâp_›timize_£rvîs
(
cf
, 
cmcf
, cmcf->
p‹ts
Ë!
NGX_OK
) {

334  
NGX_CONF_ERROR
;

337  
NGX_CONF_OK
;

339 
Áûed
:

341 *
cf
 = 
pcf
;

343  
rv
;

344 
	}
}

347 
ngx_öt_t


348 
	$ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

350 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
,

351 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

352 !
NGX_OK
)

354  
NGX_ERROR
;

357 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
,

358 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

359 !
NGX_OK
)

361  
NGX_ERROR
;

364 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
,

365 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

366 !
NGX_OK
)

368  
NGX_ERROR
;

371 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
,

372 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

373 !
NGX_OK
)

375  
NGX_ERROR
;

378 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
,

379 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

380 !
NGX_OK
)

382  
NGX_ERROR
;

385 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PRECONTENT_PHASE
].
h™dÀrs
,

386 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

387 !
NGX_OK
)

389  
NGX_ERROR
;

392 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
,

393 
cf
->
poﬁ
, 4, (
ngx_hâp_h™dÀr_±
))

394 !
NGX_OK
)

396  
NGX_ERROR
;

399 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
,

400 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

401 !
NGX_OK
)

403  
NGX_ERROR
;

406  
NGX_OK
;

407 
	}
}

410 
ngx_öt_t


411 
	$ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

413 
ngx_¨øy_t
 
hódîs_ö
;

414 
ngx_hash_key_t
 *
hk
;

415 
ngx_hash_öô_t
 
hash
;

416 
ngx_hâp_hódî_t
 *
hódî
;

418 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

419 !
NGX_OK
)

421  
NGX_ERROR
;

424 
hódî
 = 
ngx_hâp_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

425 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

426 i‡(
hk
 =
NULL
) {

427  
NGX_ERROR
;

430 
hk
->
key
 = 
hódî
->
«me
;

431 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

432 
hk
->
vÆue
 = 
hódî
;

435 
hash
.hash = &
cmcf
->
hódîs_ö_hash
;

436 
hash
.
key
 = 
ngx_hash_key_lc
;

437 
hash
.
max_size
 = 512;

438 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

439 
hash
.
«me
 = "headers_in_hash";

440 
hash
.
poﬁ
 = 
cf
->pool;

441 
hash
.
ãmp_poﬁ
 = 
NULL
;

443 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

444  
NGX_ERROR
;

447  
NGX_OK
;

448 
	}
}

451 
ngx_öt_t


452 
	$ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

454 
ngx_öt_t
 
j
;

455 
ngx_uöt_t
 
i
, 
n
;

456 
ngx_uöt_t
 
föd_c⁄fig_ödex
, 
u£_ªwrôe
, 
u£_ac˚ss
;

457 
ngx_hâp_h™dÀr_±
 *
h
;

458 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

459 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

461 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

462 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

463 
föd_c⁄fig_ödex
 = 0;

464 
u£_ªwrôe
 = 
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

465 
u£_ac˚ss
 = 
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

467 
n
 = 1

468 + 
u£_ªwrôe


469 + 
u£_ac˚ss
;

471 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

472 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

475 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

476 
n
 * (
ngx_hâp_pha£_h™dÀr_t
) + (*));

477 i‡(
ph
 =
NULL
) {

478  
NGX_ERROR
;

481 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

482 
n
 = 0;

484 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

485 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

487 
i
) {

489 
NGX_HTTP_SERVER_REWRITE_PHASE
:

490 i‡(
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

491 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = 
n
;

493 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

497 
NGX_HTTP_FIND_CONFIG_PHASE
:

498 
föd_c⁄fig_ödex
 = 
n
;

500 
ph
->
checkî
 = 
ngx_hâp_c‹e_föd_c⁄fig_pha£
;

501 
n
++;

502 
ph
++;

506 
NGX_HTTP_REWRITE_PHASE
:

507 i‡(
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

508 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = 
n
;

510 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

514 
NGX_HTTP_POST_REWRITE_PHASE
:

515 i‡(
u£_ªwrôe
) {

516 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ªwrôe_pha£
;

517 
ph
->
√xt
 = 
föd_c⁄fig_ödex
;

518 
n
++;

519 
ph
++;

524 
NGX_HTTP_ACCESS_PHASE
:

525 
checkî
 = 
ngx_hâp_c‹e_ac˚ss_pha£
;

526 
n
++;

529 
NGX_HTTP_POST_ACCESS_PHASE
:

530 i‡(
u£_ac˚ss
) {

531 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ac˚ss_pha£
;

532 
ph
->
√xt
 = 
n
;

533 
ph
++;

538 
NGX_HTTP_CONTENT_PHASE
:

539 
checkî
 = 
ngx_hâp_c‹e_c⁄ã¡_pha£
;

543 
checkî
 = 
ngx_hâp_c‹e_gíîic_pha£
;

546 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

548 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >= 0; j--) {

549 
ph
->
checkî
 = checker;

550 
ph
->
h™dÀr
 = 
h
[
j
];

551 
ph
->
√xt
 = 
n
;

552 
ph
++;

556  
NGX_OK
;

557 
	}
}

561 
	$ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

562 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

564 *
rv
;

565 
ngx_uöt_t
 
s
;

566 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

567 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

568 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

570 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

571 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

572 
ßved
 = *
˘x
;

573 
rv
 = 
NGX_CONF_OK
;

575 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

579 
˘x
->
§v_c⁄f
 = 
cscÂ
[
s
]->ctx->srv_conf;

581 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

582 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
, 
ßved
.
§v_c⁄f
[
˘x_ödex
],

583 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
˘x_ödex
]);

584 i‡(
rv
 !
NGX_CONF_OK
) {

585 
Áûed
;

589 i‡(
moduÀ
->
mîge_loc_c⁄f
) {

593 
˘x
->
loc_c⁄f
 = 
cscÂ
[
s
]->ctx->loc_conf;

595 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
ßved
.
loc_c⁄f
[
˘x_ödex
],

596 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
˘x_ödex
]);

597 i‡(
rv
 !
NGX_CONF_OK
) {

598 
Áûed
;

603 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

605 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
,

606 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
,

607 
moduÀ
, 
˘x_ödex
);

608 i‡(
rv
 !
NGX_CONF_OK
) {

609 
Áûed
;

614 
Áûed
:

616 *
˘x
 = 
ßved
;

618  
rv
;

619 
	}
}

623 
	$ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

624 **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

626 *
rv
;

627 
ngx_queue_t
 *
q
;

628 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

629 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

630 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

632 i‡(
loˇti⁄s
 =
NULL
) {

633  
NGX_CONF_OK
;

636 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

637 
ßved
 = *
˘x
;

639 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

640 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

641 
q
 = 
	`ngx_queue_√xt
(q))

643 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

645 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

646 
˘x
->
loc_c⁄f
 = 
˛cf
->loc_conf;

648 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
loc_c⁄f
[
˘x_ödex
],

649 
˛cf
->
loc_c⁄f
[
˘x_ödex
]);

650 i‡(
rv
 !
NGX_CONF_OK
) {

651  
rv
;

654 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
, clcf->
loc_c⁄f
,

655 
moduÀ
, 
˘x_ödex
);

656 i‡(
rv
 !
NGX_CONF_OK
) {

657  
rv
;

661 *
˘x
 = 
ßved
;

663  
NGX_CONF_OK
;

664 
	}
}

667 
ngx_öt_t


668 
	$ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

669 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

671 
ngx_uöt_t
 
n
;

672 
ngx_queue_t
 *
q
, *
loˇti⁄s
, *
«med
, 
èû
;

673 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

674 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

675 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

676 #i‡(
NGX_PCRE
)

677 
ngx_uöt_t
 
r
;

678 
ngx_queue_t
 *
ªgex
;

681 
loˇti⁄s
 = 
p˛cf
->locations;

683 i‡(
loˇti⁄s
 =
NULL
) {

684  
NGX_OK
;

687 
	`ngx_queue_s‹t
(
loˇti⁄s
, 
ngx_hâp_cmp_loˇti⁄s
);

689 
«med
 = 
NULL
;

690 
n
 = 0;

691 #i‡(
NGX_PCRE
)

692 
ªgex
 = 
NULL
;

693 
r
 = 0;

696 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

697 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

698 
q
 = 
	`ngx_queue_√xt
(q))

700 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

702 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

704 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
NULL
, 
˛cf
Ë!
NGX_OK
) {

705  
NGX_ERROR
;

708 #i‡(
NGX_PCRE
)

710 i‡(
˛cf
->
ªgex
) {

711 
r
++;

713 i‡(
ªgex
 =
NULL
) {

714 
ªgex
 = 
q
;

722 i‡(
˛cf
->
«med
) {

723 
n
++;

725 i‡(
«med
 =
NULL
) {

726 
«med
 = 
q
;

732 i‡(
˛cf
->
n⁄ame
) {

737 i‡(
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

738 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

741 i‡(
«med
) {

742 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

743 (
n
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 *));

744 i‡(
˛cÂ
 =
NULL
) {

745  
NGX_ERROR
;

748 
cscf
->
«med_loˇti⁄s
 = 
˛cÂ
;

750 
q
 = 
«med
;

751 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

752 
q
 = 
	`ngx_queue_√xt
(q))

754 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

756 *(
˛cÂ
++Ë
lq
->
exa˘
;

759 *
˛cÂ
 = 
NULL
;

761 
	`ngx_queue_•lô
(
loˇti⁄s
, 
«med
, &
èû
);

764 #i‡(
NGX_PCRE
)

766 i‡(
ªgex
) {

768 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

769 (
r
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 *));

770 i‡(
˛cÂ
 =
NULL
) {

771  
NGX_ERROR
;

774 
p˛cf
->
ªgex_loˇti⁄s
 = 
˛cÂ
;

776 
q
 = 
ªgex
;

777 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

778 
q
 = 
	`ngx_queue_√xt
(q))

780 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

782 *(
˛cÂ
++Ë
lq
->
exa˘
;

785 *
˛cÂ
 = 
NULL
;

787 
	`ngx_queue_•lô
(
loˇti⁄s
, 
ªgex
, &
èû
);

792  
NGX_OK
;

793 
	}
}

796 
ngx_öt_t


797 
	$ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

798 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

800 
ngx_queue_t
 *
q
, *
loˇti⁄s
;

801 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

802 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

804 
loˇti⁄s
 = 
p˛cf
->locations;

806 i‡(
loˇti⁄s
 =
NULL
) {

807  
NGX_OK
;

810 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

811  
NGX_OK
;

814 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

815 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

816 
q
 = 
	`ngx_queue_√xt
(q))

818 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

820 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

822 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

823  
NGX_ERROR
;

827 i‡(
	`ngx_hâp_joö_exa˘_loˇti⁄s
(
cf
, 
loˇti⁄s
Ë!
NGX_OK
) {

828  
NGX_ERROR
;

831 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_hód
(locations));

833 
p˛cf
->
°©ic_loˇti⁄s
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 0);

834 i‡(
p˛cf
->
°©ic_loˇti⁄s
 =
NULL
) {

835  
NGX_ERROR
;

838  
NGX_OK
;

839 
	}
}

842 
ngx_öt_t


843 
	$ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

844 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
)

846 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

848 i‡(*
loˇti⁄s
 =
NULL
) {

849 *
loˇti⁄s
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
,

850 (
ngx_hâp_loˇti⁄_queue_t
));

851 i‡(*
loˇti⁄s
 =
NULL
) {

852  
NGX_ERROR
;

855 
	`ngx_queue_öô
(*
loˇti⁄s
);

858 
lq
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_hâp_loˇti⁄_queue_t
));

859 i‡(
lq
 =
NULL
) {

860  
NGX_ERROR
;

863 i‡(
˛cf
->
exa˘_m©ch


864 #i‡(
NGX_PCRE
)

865 || 
˛cf
->
ªgex


867 || 
˛cf
->
«med
 || clcf->
n⁄ame
)

869 
lq
->
exa˘
 = 
˛cf
;

870 
lq
->
ö˛usive
 = 
NULL
;

873 
lq
->
exa˘
 = 
NULL
;

874 
lq
->
ö˛usive
 = 
˛cf
;

877 
lq
->
«me
 = &
˛cf
->name;

878 
lq
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

879 
lq
->
löe
 = 
cf
->
c⁄f_fûe
->line;

881 
	`ngx_queue_öô
(&
lq
->
li°
);

883 
	`ngx_queue_ö£π_èû
(*
loˇti⁄s
, &
lq
->
queue
);

885  
NGX_OK
;

886 
	}
}

889 
ngx_öt_t


890 
	$ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
, c⁄°Çgx_queue_à*
two
)

892 
ngx_öt_t
 
rc
;

893 
ngx_hâp_c‹e_loc_c⁄f_t
 *
fú°
, *
£c⁄d
;

894 
ngx_hâp_loˇti⁄_queue_t
 *
lq1
, *
lq2
;

896 
lq1
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
⁄e
;

897 
lq2
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
two
;

899 
fú°
 = 
lq1
->
exa˘
 ?Üq1->exa˘ :Üq1->
ö˛usive
;

900 
£c⁄d
 = 
lq2
->
exa˘
 ?Üq2->exa˘ :Üq2->
ö˛usive
;

902 i‡(
fú°
->
n⁄ame
 && !
£c⁄d
->noname) {

907 i‡(!
fú°
->
n⁄ame
 && 
£c⁄d
->noname) {

912 i‡(
fú°
->
n⁄ame
 || 
£c⁄d
->noname) {

917 i‡(
fú°
->
«med
 && !
£c⁄d
->named) {

922 i‡(!
fú°
->
«med
 && 
£c⁄d
->named) {

927 i‡(
fú°
->
«med
 && 
£c⁄d
->named) {

928  
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

931 #i‡(
NGX_PCRE
)

933 i‡(
fú°
->
ªgex
 && !
£c⁄d
->regex) {

938 i‡(!
fú°
->
ªgex
 && 
£c⁄d
->regex) {

943 i‡(
fú°
->
ªgex
 || 
£c⁄d
->regex) {

950 
rc
 = 
	`ngx_fûíame_cmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data,

951 
	`ngx_mö
(
fú°
->
«me
.
Àn
, 
£c⁄d
->name.len) + 1);

953 i‡(
rc
 =0 && !
fú°
->
exa˘_m©ch
 && 
£c⁄d
->exact_match) {

958  
rc
;

959 
	}
}

962 
ngx_öt_t


963 
	$ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
)

965 
ngx_queue_t
 *
q
, *
x
;

966 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

968 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

970 
q
 !
	`ngx_queue_œ°
(
loˇti⁄s
)) {

972 
x
 = 
	`ngx_queue_√xt
(
q
);

974 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

975 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

977 i‡(
lq
->
«me
->
Àn
 =
lx
->name->len

978 && 
	`ngx_fûíame_cmp
(
lq
->
«me
->
d©a
, 
lx
->«me->d©a,Üx->«me->
Àn
)

981 i‡((
lq
->
exa˘
 && 
lx
->exa˘Ë|| (lq->
ö˛usive
 &&Üx->inclusive)) {

982 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

984 
lx
->
«me
,Üx->
fûe_«me
,Üx->
löe
);

986  
NGX_ERROR
;

989 
lq
->
ö˛usive
 = 
lx
->inclusive;

991 
	`ngx_queue_ªmove
(
x
);

996 
q
 = 
	`ngx_queue_√xt
(q);

999  
NGX_OK
;

1000 
	}
}

1004 
	$ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,Çgx_queue_à*
q
)

1006 
u_ch¨
 *
«me
;

1007 
size_t
 
Àn
;

1008 
ngx_queue_t
 *
x
, 
èû
;

1009 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

1011 i‡(
q
 =
	`ngx_queue_œ°
(
loˇti⁄s
)) {

1015 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1017 i‡(
lq
->
ö˛usive
 =
NULL
) {

1018 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_√xt
(
q
));

1022 
Àn
 = 
lq
->
«me
->len;

1023 
«me
 = 
lq
->«me->
d©a
;

1025 
x
 = 
	`ngx_queue_√xt
(
q
);

1026 
x
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

1027 
x
 = 
	`ngx_queue_√xt
(x))

1029 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

1031 i‡(
Àn
 > 
lx
->
«me
->len

1032 || 
	`ngx_fûíame_cmp
(
«me
, 
lx
->«me->
d©a
, 
Àn
) != 0)

1038 
q
 = 
	`ngx_queue_√xt
(q);

1040 i‡(
q
 =
x
) {

1041 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1045 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1046 
	`ngx_queue_add
(&
lq
->
li°
, &
èû
);

1048 i‡(
x
 =
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

1049 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1053 
	`ngx_queue_•lô
(&
lq
->
li°
, 
x
, &
èû
);

1054 
	`ngx_queue_add
(
loˇti⁄s
, &
èû
);

1056 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1058 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1059 
	}
}

1067 
ngx_hâp_loˇti⁄_åì_node_t
 *

1068 
	$ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

1069 
size_t
 
¥efix
)

1071 
size_t
 
Àn
;

1072 
ngx_queue_t
 *
q
, 
èû
;

1073 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

1074 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
;

1076 
q
 = 
	`ngx_queue_middÀ
(
loˇti⁄s
);

1078 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1079 
Àn
 = 
lq
->
«me
->À¿- 
¥efix
;

1081 
node
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1082 
	`off£tof
(
ngx_hâp_loˇti⁄_åì_node_t
, 
«me
Ë+ 
Àn
);

1083 i‡(
node
 =
NULL
) {

1084  
NULL
;

1087 
node
->
À·
 = 
NULL
;

1088 
node
->
right
 = 
NULL
;

1089 
node
->
åì
 = 
NULL
;

1090 
node
->
exa˘
 = 
lq
->exact;

1091 
node
->
ö˛usive
 = 
lq
->inclusive;

1093 
node
->
auto_ªdúe˘
 = (
u_ch¨
Ë((
lq
->
exa˘
 &&Üq->exact->auto_redirect)

1094 || (
lq
->
ö˛usive
 &&Üq->ö˛usive->
auto_ªdúe˘
));

1096 
node
->
Àn
 = (
u_ch¨
)Üen;

1097 
	`ngx_mem˝y
(
node
->
«me
, &
lq
->«me->
d©a
[
¥efix
], 
Àn
);

1099 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1101 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

1106 
ö˛usive
;

1109 
node
->
À·
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 
¥efix
);

1110 i‡(
node
->
À·
 =
NULL
) {

1111  
NULL
;

1114 
	`ngx_queue_ªmove
(
q
);

1116 i‡(
	`ngx_queue_em±y
(&
èû
)) {

1117 
ö˛usive
;

1120 
node
->
right
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
èû
, 
¥efix
);

1121 i‡(
node
->
right
 =
NULL
) {

1122  
NULL
;

1125 
ö˛usive
:

1127 i‡(
	`ngx_queue_em±y
(&
lq
->
li°
)) {

1128  
node
;

1131 
node
->
åì
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
lq
->
li°
, 
¥efix
 + 
Àn
);

1132 i‡(
node
->
åì
 =
NULL
) {

1133  
NULL
;

1136  
node
;

1137 
	}
}

1140 
ngx_öt_t


1141 
	$ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1142 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1144 
ö_p‹t_t
 
p
;

1145 
ngx_uöt_t
 
i
;

1146 
sockaddr
 *
ß
;

1147 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1148 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1150 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1152 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1153 
cmcf
->
p‹ts
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 2,

1154 (
ngx_hâp_c⁄f_p‹t_t
));

1155 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1156  
NGX_ERROR
;

1160 
ß
 = &
ls›t
->
sockaddr
.sockaddr;

1161 
p
 = 
	`ngx_öë_gë_p‹t
(
ß
);

1163 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1164 
i
 = 0; i < 
cmcf
->
p‹ts
->
√…s
; i++) {

1166 i‡(
p
 !
p‹t
[
i
].p‹à|| 
ß
->
ß_Ámûy
 !p‹t[i].
Ámûy
) {

1172  
	`ngx_hâp_add_addªs£s
(
cf
, 
cscf
, &
p‹t
[
i
], 
ls›t
);

1177 
p‹t
 = 
	`ngx_¨øy_push
(
cmcf
->
p‹ts
);

1178 i‡(
p‹t
 =
NULL
) {

1179  
NGX_ERROR
;

1182 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

1183 
p‹t
->p‹à
p
;

1184 
p‹t
->
addrs
.
ñts
 = 
NULL
;

1186  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1187 
	}
}

1190 
ngx_öt_t


1191 
	$ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1192 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1194 
ngx_uöt_t
 
i
, 
deÁu…_£rvî
, 
¥oxy_¥Ÿocﬁ
;

1195 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1196 #i‡(
NGX_HTTP_SSL
)

1197 
ngx_uöt_t
 
s¶
;

1199 #i‡(
NGX_HTTP_V2
)

1200 
ngx_uöt_t
 
hâp2
;

1208 
addr
 = 
p‹t
->
addrs
.
ñts
;

1210 
i
 = 0; i < 
p‹t
->
addrs
.
√…s
; i++) {

1212 i‡(
	`ngx_cmp_sockaddr
(&
ls›t
->
sockaddr
.sockaddr,Üs›t->
sockÀn
,

1213 &
addr
[
i
].
›t
.
sockaddr
.sockaddr,

1214 
addr
[
i
].
›t
.
sockÀn
, 0)

1215 !
NGX_OK
)

1222 i‡(
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, &
addr
[
i
]Ë!
NGX_OK
) {

1223  
NGX_ERROR
;

1227 
deÁu…_£rvî
 = 
addr
[
i
].
›t
.default_server;

1229 
¥oxy_¥Ÿocﬁ
 = 
ls›t
->¥oxy_¥Ÿocﬁ || 
addr
[
i
].
›t
.proxy_protocol;

1231 #i‡(
NGX_HTTP_SSL
)

1232 
s¶
 = 
ls›t
->s¶ || 
addr
[
i
].
›t
.ssl;

1234 #i‡(
NGX_HTTP_V2
)

1235 
hâp2
 = 
ls›t
->hâp2 || 
addr
[
i
].
›t
.http2;

1238 i‡(
ls›t
->
£t
) {

1240 i‡(
addr
[
i
].
›t
.
£t
) {

1241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1242 "du∂iˇãÜi°í o±i⁄†f‹ %s", 
addr
[
i
].
›t
.addr);

1243  
NGX_ERROR
;

1246 
addr
[
i
].
›t
 = *
ls›t
;

1251 i‡(
ls›t
->
deÁu…_£rvî
) {

1253 i‡(
deÁu…_£rvî
) {

1254 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1255 "®du∂iˇã deÁu… sîvî f‹ %s", 
addr
[
i
].
›t
.addr);

1256  
NGX_ERROR
;

1259 
deÁu…_£rvî
 = 1;

1260 
addr
[
i
].
deÁu…_£rvî
 = 
cscf
;

1263 
addr
[
i
].
›t
.
deÁu…_£rvî
 = default_server;

1264 
addr
[
i
].
›t
.
¥oxy_¥Ÿocﬁ
 =Öroxy_protocol;

1265 #i‡(
NGX_HTTP_SSL
)

1266 
addr
[
i
].
›t
.
s¶
 = ssl;

1268 #i‡(
NGX_HTTP_V2
)

1269 
addr
[
i
].
›t
.
hâp2
 = http2;

1272  
NGX_OK
;

1277  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1278 
	}
}

1286 
ngx_öt_t


1287 
	$ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1288 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1290 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1292 i‡(
p‹t
->
addrs
.
ñts
 =
NULL
) {

1293 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 4,

1294 (
ngx_hâp_c⁄f_addr_t
))

1295 !
NGX_OK
)

1297  
NGX_ERROR
;

1301 #i‡(
NGX_HTTP_V2
 && 
NGX_HTTP_SSL
 \

1302 && !
deföed
 
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 \

1303 && !
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
)

1305 i‡(
ls›t
->
hâp2
 &&Üs›t->
s¶
) {

1306 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1309 
ls›t
->
addr
);

1314 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

1315 i‡(
addr
 =
NULL
) {

1316  
NGX_ERROR
;

1319 
addr
->
›t
 = *
ls›t
;

1320 
addr
->
hash
.
buckës
 = 
NULL
;

1321 
addr
->
hash
.
size
 = 0;

1322 
addr
->
wc_hód
 = 
NULL
;

1323 
addr
->
wc_èû
 = 
NULL
;

1324 #i‡(
NGX_PCRE
)

1325 
addr
->
ƒegex
 = 0;

1326 
addr
->
ªgex
 = 
NULL
;

1328 
addr
->
deÁu…_£rvî
 = 
cscf
;

1329 
addr
->
£rvîs
.
ñts
 = 
NULL
;

1331  
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, 
addr
);

1332 
	}
}

1337 
ngx_öt_t


1338 
	$ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1339 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1341 
ngx_uöt_t
 
i
;

1342 
ngx_hâp_c‹e_§v_c⁄f_t
 **
£rvî
;

1344 i‡(
addr
->
£rvîs
.
ñts
 =
NULL
) {

1345 i‡(
	`ngx_¨øy_öô
(&
addr
->
£rvîs
, 
cf
->
ãmp_poﬁ
, 4,

1346 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

1347 !
NGX_OK
)

1349  
NGX_ERROR
;

1353 
£rvî
 = 
addr
->
£rvîs
.
ñts
;

1354 
i
 = 0; i < 
addr
->
£rvîs
.
√…s
; i++) {

1355 i‡(
£rvî
[
i
] =
cscf
) {

1356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1357 "®du∂iˇãÜi°í %s", 
addr
->
›t
.addr);

1358  
NGX_ERROR
;

1363 
£rvî
 = 
	`ngx_¨øy_push
(&
addr
->
£rvîs
);

1364 i‡(
£rvî
 =
NULL
) {

1365  
NGX_ERROR
;

1368 *
£rvî
 = 
cscf
;

1370  
NGX_OK
;

1371 
	}
}

1374 
ngx_öt_t


1375 
	$ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1376 
ngx_¨øy_t
 *
p‹ts
)

1378 
ngx_uöt_t
 
p
, 
a
;

1379 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1380 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1382 i‡(
p‹ts
 =
NULL
) {

1383  
NGX_OK
;

1386 
p‹t
 = 
p‹ts
->
ñts
;

1387 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

1389 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

1390 (
ngx_hâp_c⁄f_addr_t
), 
ngx_hâp_cmp_c⁄f_addrs
);

1397 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1398 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1400 i‡(
addr
[
a
].
£rvîs
.
√…s
 > 1

1401 #i‡(
NGX_PCRE
)

1402 || 
addr
[
a
].
deÁu…_£rvî
->
ˇ±uªs


1406 i‡(
	`ngx_hâp_£rvî_«mes
(
cf
, 
cmcf
, &
addr
[
a
]Ë!
NGX_OK
) {

1407  
NGX_ERROR
;

1412 i‡(
	`ngx_hâp_öô_li°íög
(
cf
, &
p‹t
[
p
]Ë!
NGX_OK
) {

1413  
NGX_ERROR
;

1417  
NGX_OK
;

1418 
	}
}

1421 
ngx_öt_t


1422 
	$ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1423 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1425 
ngx_öt_t
 
rc
;

1426 
ngx_uöt_t
 
n
, 
s
;

1427 
ngx_hash_öô_t
 
hash
;

1428 
ngx_hash_keys_¨øys_t
 
ha
;

1429 
ngx_hâp_£rvî_«me_t
 *
«me
;

1430 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

1431 #i‡(
NGX_PCRE
)

1432 
ngx_uöt_t
 
ªgex
, 
i
;

1434 
ªgex
 = 0;

1437 
	`ngx_memzîo
(&
ha
, (
ngx_hash_keys_¨øys_t
));

1439 
ha
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

1440 i‡(
ha
.
ãmp_poﬁ
 =
NULL
) {

1441  
NGX_ERROR
;

1444 
ha
.
poﬁ
 = 
cf
->pool;

1446 i‡(
	`ngx_hash_keys_¨øy_öô
(&
ha
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

1447 
Áûed
;

1450 
cscÂ
 = 
addr
->
£rvîs
.
ñts
;

1452 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1454 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1456 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1458 #i‡(
NGX_PCRE
)

1459 i‡(
«me
[
n
].
ªgex
) {

1460 
ªgex
++;

1465 
rc
 = 
	`ngx_hash_add_key
(&
ha
, &
«me
[
n
].«me,Çame[n].
£rvî
,

1466 
NGX_HASH_WILDCARD_KEY
);

1468 i‡(
rc
 =
NGX_ERROR
) {

1469  
NGX_ERROR
;

1472 i‡(
rc
 =
NGX_DECLINED
) {

1473 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1475 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1476  
NGX_ERROR
;

1479 i‡(
rc
 =
NGX_BUSY
) {

1480 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1482 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1487 
hash
.
key
 = 
ngx_hash_key_lc
;

1488 
hash
.
max_size
 = 
cmcf
->
£rvî_«mes_hash_max_size
;

1489 
hash
.
buckë_size
 = 
cmcf
->
£rvî_«mes_hash_buckë_size
;

1490 
hash
.
«me
 = "server_names_hash";

1491 
hash
.
poﬁ
 = 
cf
->pool;

1493 i‡(
ha
.
keys
.
√…s
) {

1494 
hash
.hash = &
addr
->hash;

1495 
hash
.
ãmp_poﬁ
 = 
NULL
;

1497 i‡(
	`ngx_hash_öô
(&
hash
, 
ha
.
keys
.
ñts
, ha.keys.
√…s
Ë!
NGX_OK
) {

1498 
Áûed
;

1502 i‡(
ha
.
dns_wc_hód
.
√…s
) {

1504 
	`ngx_qs‹t
(
ha
.
dns_wc_hód
.
ñts
, (
size_t
Ëha.dns_wc_hód.
√…s
,

1505 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1507 
hash
.hash = 
NULL
;

1508 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1510 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_hód
.
ñts
,

1511 
ha
.
dns_wc_hód
.
√…s
)

1512 !
NGX_OK
)

1514 
Áûed
;

1517 
addr
->
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1520 i‡(
ha
.
dns_wc_èû
.
√…s
) {

1522 
	`ngx_qs‹t
(
ha
.
dns_wc_èû
.
ñts
, (
size_t
Ëha.dns_wc_èû.
√…s
,

1523 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1525 
hash
.hash = 
NULL
;

1526 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1528 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_èû
.
ñts
,

1529 
ha
.
dns_wc_èû
.
√…s
)

1530 !
NGX_OK
)

1532 
Áûed
;

1535 
addr
->
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1538 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1540 #i‡(
NGX_PCRE
)

1542 i‡(
ªgex
 == 0) {

1543  
NGX_OK
;

1546 
addr
->
ƒegex
 = 
ªgex
;

1547 
addr
->
ªgex
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñegex * (
ngx_hâp_£rvî_«me_t
));

1548 i‡(
addr
->
ªgex
 =
NULL
) {

1549  
NGX_ERROR
;

1552 
i
 = 0;

1554 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1556 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1558 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1559 i‡(
«me
[
n
].
ªgex
) {

1560 
addr
->
ªgex
[
i
++] = 
«me
[
n
];

1567  
NGX_OK
;

1569 
Áûed
:

1571 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1573  
NGX_ERROR
;

1574 
	}
}

1577 
ngx_öt_t


1578 
	$ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

1580 
ngx_hâp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

1582 
fú°
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
⁄e
;

1583 
£c⁄d
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
two
;

1585 i‡(
fú°
->
›t
.
wûdˇrd
) {

1590 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

1595 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

1600 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

1608 
	}
}

1611 
ngx_libc_cde˛


1612 
	$ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

1614 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

1616 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

1617 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

1619  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

1620 
	}
}

1623 
ngx_öt_t


1624 
	$ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
)

1626 
ngx_uöt_t
 
i
, 
œ°
, 
böd_wûdˇrd
;

1627 
ngx_li°íög_t
 *
ls
;

1628 
ngx_hâp_p‹t_t
 *
hp‹t
;

1629 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1631 
addr
 = 
p‹t
->
addrs
.
ñts
;

1632 
œ°
 = 
p‹t
->
addrs
.
√…s
;

1641 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

1642 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

1643 
böd_wûdˇrd
 = 1;

1646 
böd_wûdˇrd
 = 0;

1649 
i
 = 0;

1651 
i
 < 
œ°
) {

1653 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

1654 
i
++;

1658 
ls
 = 
	`ngx_hâp_add_li°íög
(
cf
, &
addr
[
i
]);

1659 i‡(
ls
 =
NULL
) {

1660  
NGX_ERROR
;

1663 
hp‹t
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_p‹t_t
));

1664 i‡(
hp‹t
 =
NULL
) {

1665  
NGX_ERROR
;

1668 
ls
->
£rvîs
 = 
hp‹t
;

1670 
hp‹t
->
«ddrs
 = 
i
 + 1;

1672 
ls
->
sockaddr
->
ß_Ámûy
) {

1674 #i‡(
NGX_HAVE_INET6
)

1675 
AF_INET6
:

1676 i‡(
	`ngx_hâp_add_addrs6
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1677  
NGX_ERROR
;

1682 i‡(
	`ngx_hâp_add_addrs
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1683  
NGX_ERROR
;

1688 
addr
++;

1689 
œ°
--;

1692  
NGX_OK
;

1693 
	}
}

1696 
ngx_li°íög_t
 *

1697 
	$ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1699 
ngx_li°íög_t
 *
ls
;

1700 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1701 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1703 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
->
›t
.
sockaddr
.sockaddr,

1704 
addr
->
›t
.
sockÀn
);

1705 i‡(
ls
 =
NULL
) {

1706  
NULL
;

1709 
ls
->
addr_¡›
 = 1;

1711 
ls
->
h™dÀr
 = 
ngx_hâp_öô_c⁄√˘i⁄
;

1713 
cscf
 = 
addr
->
deÁu…_£rvî
;

1714 
ls
->
poﬁ_size
 = 
cscf
->
c⁄√˘i⁄_poﬁ_size
;

1715 
ls
->
po°_ac˚±_timeout
 = 
cscf
->
˛õ¡_hódî_timeout
;

1717 
˛cf
 = 
cscf
->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

1719 
ls
->
logp
 = 
˛cf
->
îr‹_log
;

1720 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

1721 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

1723 #i‡(
NGX_WIN32
)

1725 
ngx_io˝_c⁄f_t
 *
io˝cf
 = 
NULL
;

1727 i‡(
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
)) {

1728 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

1730 i‡(
io˝cf
 && io˝cf->
ac˚±ex_ªad
) {

1731 
ls
->
po°_ac˚±_buf„r_size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

1736 
ls
->
backlog
 = 
addr
->
›t
.backlog;

1737 
ls
->
rcvbuf
 = 
addr
->
›t
.rcvbuf;

1738 
ls
->
¢dbuf
 = 
addr
->
›t
.sndbuf;

1740 
ls
->
kì∑live
 = 
addr
->
›t
.
so_kì∑live
;

1741 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

1742 
ls
->
kìpidÀ
 = 
addr
->
›t
.
t˝_kìpidÀ
;

1743 
ls
->
kìpötvl
 = 
addr
->
›t
.
t˝_kìpötvl
;

1744 
ls
->
kìp˙t
 = 
addr
->
›t
.
t˝_kìp˙t
;

1747 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

1748 
ls
->
ac˚±_fûãr
 = 
addr
->
›t
.accept_filter;

1751 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

1752 
ls
->
de„ºed_ac˚±
 = 
addr
->
›t
.deferred_accept;

1755 #i‡(
NGX_HAVE_INET6
)

1756 
ls
->
ùv6⁄ly
 = 
addr
->
›t
.ipv6only;

1759 #i‡(
NGX_HAVE_SETFIB
)

1760 
ls
->
£tfib
 = 
addr
->
›t
.setfib;

1763 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

1764 
ls
->
Á°›í
 = 
addr
->
›t
.fastopen;

1767 #i‡(
NGX_HAVE_REUSEPORT
)

1768 
ls
->
ªu£p‹t
 = 
addr
->
›t
.reuseport;

1771  
ls
;

1772 
	}
}

1775 
ngx_öt_t


1776 
	$ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1777 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1779 
ngx_uöt_t
 
i
;

1780 
ngx_hâp_ö_addr_t
 *
addrs
;

1781 
sockaddr_ö
 *
sö
;

1782 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1784 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1785 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö_addr_t
));

1786 i‡(
hp‹t
->
addrs
 =
NULL
) {

1787  
NGX_ERROR
;

1790 
addrs
 = 
hp‹t
->addrs;

1792 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1794 
sö
 = &
addr
[
i
].
›t
.
sockaddr
.
sockaddr_ö
;

1795 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

1796 
addrs
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1797 #i‡(
NGX_HTTP_SSL
)

1798 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1800 #i‡(
NGX_HTTP_V2
)

1801 
addrs
[
i
].
c⁄f
.
hâp2
 = 
addr
[i].
›t
.http2;

1803 
addrs
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
[i].
›t
.proxy_protocol;

1805 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1806 && (
addr
[
i
].
wc_hód
 =
NULL


1807 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1808 && (
addr
[
i
].
wc_èû
 =
NULL


1809 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1810 #i‡(
NGX_PCRE
)

1811 && 
addr
[
i
].
ƒegex
 == 0

1818 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1819 i‡(
vn
 =
NULL
) {

1820  
NGX_ERROR
;

1823 
addrs
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1825 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1826 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1827 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1828 #i‡(
NGX_PCRE
)

1829 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1830 
vn
->
ªgex
 = 
addr
[
i
].regex;

1834  
NGX_OK
;

1835 
	}
}

1838 #i‡(
NGX_HAVE_INET6
)

1840 
ngx_öt_t


1841 
	$ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1842 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1844 
ngx_uöt_t
 
i
;

1845 
ngx_hâp_ö6_addr_t
 *
addrs6
;

1846 
sockaddr_ö6
 *
sö6
;

1847 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1849 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1850 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö6_addr_t
));

1851 i‡(
hp‹t
->
addrs
 =
NULL
) {

1852  
NGX_ERROR
;

1855 
addrs6
 = 
hp‹t
->
addrs
;

1857 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1859 
sö6
 = &
addr
[
i
].
›t
.
sockaddr
.
sockaddr_ö6
;

1860 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

1861 
addrs6
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1862 #i‡(
NGX_HTTP_SSL
)

1863 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1865 #i‡(
NGX_HTTP_V2
)

1866 
addrs6
[
i
].
c⁄f
.
hâp2
 = 
addr
[i].
›t
.http2;

1868 
addrs6
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
[i].
›t
.proxy_protocol;

1870 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1871 && (
addr
[
i
].
wc_hód
 =
NULL


1872 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1873 && (
addr
[
i
].
wc_èû
 =
NULL


1874 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1875 #i‡(
NGX_PCRE
)

1876 && 
addr
[
i
].
ƒegex
 == 0

1883 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1884 i‡(
vn
 =
NULL
) {

1885  
NGX_ERROR
;

1888 
addrs6
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1890 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1891 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1892 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1893 #i‡(
NGX_PCRE
)

1894 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1895 
vn
->
ªgex
 = 
addr
[
i
].regex;

1899  
NGX_OK
;

1900 
	}
}

1906 
	$ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1908 *
p
 = 
c⁄f
;

1910 
ngx_¨øy_t
 **
ty≥s
;

1911 
ngx_°r_t
 *
vÆue
, *
deÁu…_ty≥
;

1912 
ngx_uöt_t
 
i
, 
n
, 
hash
;

1913 
ngx_hash_key_t
 *
ty≥
;

1915 
ty≥s
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1917 i‡(*
ty≥s
 == (*) -1) {

1918  
NGX_CONF_OK
;

1921 
deÁu…_ty≥
 = 
cmd
->
po°
;

1923 i‡(*
ty≥s
 =
NULL
) {

1924 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

1925 i‡(*
ty≥s
 =
NULL
) {

1926  
NGX_CONF_ERROR
;

1929 i‡(
deÁu…_ty≥
) {

1930 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1931 i‡(
ty≥
 =
NULL
) {

1932  
NGX_CONF_ERROR
;

1935 
ty≥
->
key
 = *
deÁu…_ty≥
;

1936 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

1937 
deÁu…_ty≥
->
Àn
);

1938 
ty≥
->
vÆue
 = (*) 4;

1942 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1944 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1946 i‡(
vÆue
[
i
].
Àn
 =1 && vÆue[i].
d©a
[0] == '*') {

1947 *
ty≥s
 = (*) -1;

1948  
NGX_CONF_OK
;

1951 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

1952 
vÆue
[
i
].
d©a
[vÆue[i].
Àn
] = '\0';

1954 
ty≥
 = (*
ty≥s
)->
ñts
;

1955 
n
 = 0;Ç < (*
ty≥s
)->
√…s
;Ç++) {

1957 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

1958 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1959 "du∂iˇã MIMEÅy≥ \"%V\"", &
vÆue
[
i
]);

1960 
√xt
;

1964 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1965 i‡(
ty≥
 =
NULL
) {

1966  
NGX_CONF_ERROR
;

1969 
ty≥
->
key
 = 
vÆue
[
i
];

1970 
ty≥
->
key_hash
 = 
hash
;

1971 
ty≥
->
vÆue
 = (*) 4;

1973 
√xt
:

1978  
NGX_CONF_OK
;

1979 
	}
}

1983 
	$ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
, 
ngx_hash_t
 *
ty≥s_hash
,

1984 
ngx_¨øy_t
 **
¥ev_keys
, 
ngx_hash_t
 *
¥ev_ty≥s_hash
,

1985 
ngx_°r_t
 *
deÁu…_ty≥s
)

1987 
ngx_hash_öô_t
 
hash
;

1989 i‡(*
keys
) {

1991 i‡(*
keys
 == (*) -1) {

1992  
NGX_CONF_OK
;

1995 
hash
.hash = 
ty≥s_hash
;

1996 
hash
.
key
 = 
NULL
;

1997 
hash
.
max_size
 = 2048;

1998 
hash
.
buckë_size
 = 64;

1999 
hash
.
«me
 = "test_types_hash";

2000 
hash
.
poﬁ
 = 
cf
->pool;

2001 
hash
.
ãmp_poﬁ
 = 
NULL
;

2003 i‡(
	`ngx_hash_öô
(&
hash
, (*
keys
)->
ñts
, (*keys)->
√…s
Ë!
NGX_OK
) {

2004  
NGX_CONF_ERROR
;

2007  
NGX_CONF_OK
;

2010 i‡(
¥ev_ty≥s_hash
->
buckës
 =
NULL
) {

2012 i‡(*
¥ev_keys
 =
NULL
) {

2014 i‡(
	`ngx_hâp_£t_deÁu…_ty≥s
(
cf
, 
¥ev_keys
, 
deÁu…_ty≥s
)

2015 !
NGX_OK
)

2017  
NGX_CONF_ERROR
;

2020 } i‡(*
¥ev_keys
 == (*) -1) {

2021 *
keys
 = *
¥ev_keys
;

2022  
NGX_CONF_OK
;

2025 
hash
.hash = 
¥ev_ty≥s_hash
;

2026 
hash
.
key
 = 
NULL
;

2027 
hash
.
max_size
 = 2048;

2028 
hash
.
buckë_size
 = 64;

2029 
hash
.
«me
 = "test_types_hash";

2030 
hash
.
poﬁ
 = 
cf
->pool;

2031 
hash
.
ãmp_poﬁ
 = 
NULL
;

2033 i‡(
	`ngx_hash_öô
(&
hash
, (*
¥ev_keys
)->
ñts
, (*¥ev_keys)->
√…s
)

2034 !
NGX_OK
)

2036  
NGX_CONF_ERROR
;

2040 *
ty≥s_hash
 = *
¥ev_ty≥s_hash
;

2042  
NGX_CONF_OK
;

2044 
	}
}

2047 
ngx_öt_t


2048 
	$ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

2049 
ngx_°r_t
 *
deÁu…_ty≥
)

2051 
ngx_hash_key_t
 *
ty≥
;

2053 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2054 i‡(*
ty≥s
 =
NULL
) {

2055  
NGX_ERROR
;

2058 
deÁu…_ty≥
->
Àn
) {

2060 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2061 i‡(
ty≥
 =
NULL
) {

2062  
NGX_ERROR
;

2065 
ty≥
->
key
 = *
deÁu…_ty≥
;

2066 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2067 
deÁu…_ty≥
->
Àn
);

2068 
ty≥
->
vÆue
 = (*) 4;

2070 
deÁu…_ty≥
++;

2073  
NGX_OK
;

2074 
	}
}

	@src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

21 
ngx_hâp_chunked_s
 
	tngx_hâp_chunked_t
;

22 
ngx_hâp_v2_°ªam_s
 
	tngx_hâp_v2_°ªam_t
;

24 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

25 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

26 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

27 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

30 
	~<ngx_hâp_v¨übÀs.h
>

31 
	~<ngx_hâp_c⁄fig.h
>

32 
	~<ngx_hâp_ªque°.h
>

33 
	~<ngx_hâp_s¸ùt.h
>

34 
	~<ngx_hâp_up°ªam.h
>

35 
	~<ngx_hâp_up°ªam_round_robö.h
>

36 
	~<ngx_hâp_c‹e_moduÀ.h
>

38 #i‡(
NGX_HTTP_V2
)

39 
	~<ngx_hâp_v2.h
>

41 #i‡(
NGX_HTTP_CACHE
)

42 
	~<ngx_hâp_ˇche.h
>

44 #i‡(
NGX_HTTP_SSI
)

45 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

47 #i‡(
NGX_HTTP_SSL
)

48 
	~<ngx_hâp_s¶_moduÀ.h
>

52 
	sngx_hâp_log_˘x_s
 {

53 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

54 
ngx_hâp_ªque°_t
 *
ªque°
;

55 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

59 
	sngx_hâp_chunked_s
 {

60 
ngx_uöt_t
 
°©e
;

61 
off_t
 
size
;

62 
off_t
 
Àngth
;

67 
ngx_uöt_t
 
hâp_vîsi⁄
;

68 
ngx_uöt_t
 
code
;

69 
ngx_uöt_t
 
cou¡
;

70 
u_ch¨
 *
°¨t
;

71 
u_ch¨
 *
íd
;

72 } 
	tngx_hâp_°©us_t
;

75 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

76 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

79 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

80 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

81 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

82 
ngx_hâp_li°í_›t_t
 *
ls›t
);

85 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

86 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

88 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

89 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

92 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

93 
ngx_öt_t
 
	`ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
);

94 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_uöt_t
 
mîge_¶ashes
);

96 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

97 
ngx_hâp_°©us_t
 *
°©us
);

98 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

99 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

100 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

101 
ngx_uöt_t
 
Ælow_undîsc‹es
);

102 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

103 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

104 
ngx_öt_t
 
	`ngx_hâp_∑r£_£t_cookõ_löes
(
ngx_¨øy_t
 *
hódîs
,

105 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

106 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

107 
ngx_°r_t
 *
vÆue
);

108 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

109 
ngx_°r_t
 *
¨gs
);

110 
ngx_öt_t
 
	`ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

111 
ngx_hâp_chunked_t
 *
˘x
);

114 
ngx_hâp_ªque°_t
 *
	`ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
);

115 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
);

116 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

117 
	`ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

118 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

119 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

120 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

121 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

123 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

124 
	`ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

126 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

127 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

130 
	#NGX_HTTP_LAST
 1

	)

131 
	#NGX_HTTP_FLUSH
 2

	)

133 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

136 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

137 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

138 
ngx_öt_t
 
	`ngx_hâp_ªad_unbuf„ªd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

140 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

141 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

142 
ngx_öt_t
 
îr‹
);

143 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

144 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

145 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

148 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

149 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

150 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

151 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

154 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

155 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

156 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

157 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

158 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

159 
ngx_°r_t
 *
deÁu…_ty≥
);

161 #i‡(
NGX_HTTP_DEGRADATION
)

162 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

166 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

168 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

171 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

172 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

173 
ngx_hâp_ªque°_body_fûãr_±
 
ngx_hâp_t›_ªque°_body_fûãr
;

	@src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_REVALIDATED
 6

	)

23 
	#NGX_HTTP_CACHE_HIT
 7

	)

24 
	#NGX_HTTP_CACHE_SCARCE
 8

	)

26 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

27 
	#NGX_HTTP_CACHE_ETAG_LEN
 128

	)

28 
	#NGX_HTTP_CACHE_VARY_LEN
 128

	)

30 
	#NGX_HTTP_CACHE_VERSION
 5

	)

34 
ngx_uöt_t
 
	m°©us
;

35 
time_t
 
	mvÆid
;

36 } 
	tngx_hâp_ˇche_vÆid_t
;

40 
ngx_rbåì_node_t
 
	mnode
;

41 
ngx_queue_t
 
	mqueue
;

43 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


44 - (
ngx_rbåì_key_t
)];

46 
	mcou¡
:20;

47 
	mu£s
:10;

48 
	mvÆid_m£c
:10;

49 
	mîr‹
:10;

50 
	mexi°s
:1;

51 
	mupd©ög
:1;

52 
	mdñëög
:1;

53 
	mpurged
:1;

56 
ngx_fûe_uniq_t
 
	muniq
;

57 
time_t
 
	mexpúe
;

58 
time_t
 
	mvÆid_£c
;

59 
size_t
 
	mbody_°¨t
;

60 
off_t
 
	mfs_size
;

61 
ngx_m£c_t
 
	mlock_time
;

62 } 
	tngx_hâp_fûe_ˇche_node_t
;

65 
	sngx_hâp_ˇche_s
 {

66 
ngx_fûe_t
 
	mfûe
;

67 
ngx_¨øy_t
 
	mkeys
;

68 
uöt32_t
 
	m¸c32
;

69 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

70 
u_ch¨
 
	mmaö
[
NGX_HTTP_CACHE_KEY_LEN
];

72 
ngx_fûe_uniq_t
 
	muniq
;

73 
time_t
 
	mvÆid_£c
;

74 
time_t
 
	mupd©ög_£c
;

75 
time_t
 
	mîr‹_£c
;

76 
time_t
 
	mœ°_modifõd
;

77 
time_t
 
	md©e
;

79 
ngx_°r_t
 
	mëag
;

80 
ngx_°r_t
 
	mv¨y
;

81 
u_ch¨
 
	mv¨ü¡
[
NGX_HTTP_CACHE_KEY_LEN
];

83 
size_t
 
	mhódî_°¨t
;

84 
size_t
 
	mbody_°¨t
;

85 
off_t
 
	mÀngth
;

86 
off_t
 
	mfs_size
;

88 
ngx_uöt_t
 
	mmö_u£s
;

89 
ngx_uöt_t
 
	mîr‹
;

90 
ngx_uöt_t
 
	mvÆid_m£c
;

91 
ngx_uöt_t
 
	mv¨y_èg
;

93 
ngx_buf_t
 *
	mbuf
;

95 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

96 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

98 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

99 
ngx_thªad_èsk_t
 *
	mthªad_èsk
;

102 
ngx_m£c_t
 
	mlock_timeout
;

103 
ngx_m£c_t
 
	mlock_age
;

104 
ngx_m£c_t
 
	mlock_time
;

105 
ngx_m£c_t
 
	mwaô_time
;

107 
ngx_evít_t
 
	mwaô_evít
;

109 
	mlock
:1;

110 
	mwaôög
:1;

112 
	mupd©ed
:1;

113 
	mupd©ög
:1;

114 
	mexi°s
:1;

115 
	mãmp_fûe
:1;

116 
	mpurged
:1;

117 
	mªadög
:1;

118 
	m£c⁄d¨y
:1;

119 
	mbackground
:1;

121 
	m°Æe_upd©ög
:1;

122 
	m°Æe_îr‹
:1;

127 
ngx_uöt_t
 
	mvîsi⁄
;

128 
time_t
 
	mvÆid_£c
;

129 
time_t
 
	mupd©ög_£c
;

130 
time_t
 
	mîr‹_£c
;

131 
time_t
 
	mœ°_modifõd
;

132 
time_t
 
	md©e
;

133 
uöt32_t
 
	m¸c32
;

134 
u_sh‹t
 
	mvÆid_m£c
;

135 
u_sh‹t
 
	mhódî_°¨t
;

136 
u_sh‹t
 
	mbody_°¨t
;

137 
u_ch¨
 
	mëag_Àn
;

138 
u_ch¨
 
	mëag
[
NGX_HTTP_CACHE_ETAG_LEN
];

139 
u_ch¨
 
	mv¨y_Àn
;

140 
u_ch¨
 
	mv¨y
[
NGX_HTTP_CACHE_VARY_LEN
];

141 
u_ch¨
 
	mv¨ü¡
[
NGX_HTTP_CACHE_KEY_LEN
];

142 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

146 
ngx_rbåì_t
 
	mrbåì
;

147 
ngx_rbåì_node_t
 
	m£¡öñ
;

148 
ngx_queue_t
 
	mqueue
;

149 
ngx_©omic_t
 
	mcﬁd
;

150 
ngx_©omic_t
 
	mlﬂdög
;

151 
off_t
 
	msize
;

152 
ngx_uöt_t
 
	mcou¡
;

153 
ngx_uöt_t
 
	mw©îm¨k
;

154 } 
	tngx_hâp_fûe_ˇche_sh_t
;

157 
	sngx_hâp_fûe_ˇche_s
 {

158 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

159 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

161 
ngx_∑th_t
 *
	m∑th
;

163 
off_t
 
	mmax_size
;

164 
size_t
 
	mbsize
;

166 
time_t
 
	möa˘ive
;

168 
time_t
 
	mÁû_time
;

170 
ngx_uöt_t
 
	mfûes
;

171 
ngx_uöt_t
 
	mlﬂdî_fûes
;

172 
ngx_m£c_t
 
	mœ°
;

173 
ngx_m£c_t
 
	mlﬂdî_¶ìp
;

174 
ngx_m£c_t
 
	mlﬂdî_thªshﬁd
;

176 
ngx_uöt_t
 
	mm™agî_fûes
;

177 
ngx_m£c_t
 
	mm™agî_¶ìp
;

178 
ngx_m£c_t
 
	mm™agî_thªshﬁd
;

180 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

182 
ngx_uöt_t
 
	mu£_ãmp_∑th
;

187 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

188 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

189 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

190 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

191 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

192 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

193 
ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
);

194 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

195 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

196 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

198 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

199 *
c⁄f
);

200 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

201 *
c⁄f
);

204 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@src/http/ngx_http_copy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_bufs_t
 
	mbufs
;

15 } 
	tngx_hâp_c›y_fûãr_c⁄f_t
;

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

20 
ngx_fûe_t
 *
fûe
);

21 
ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

22 #i‡(
NGX_HAVE_AIO_SENDFILE
)

23 
ssize_t
 
ngx_hâp_c›y_aio_£ndfûe_¥ñﬂd
(
ngx_buf_t
 *
fûe
);

24 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

27 #i‡(
NGX_THREADS
)

28 
ngx_öt_t
 
ngx_hâp_c›y_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
,

29 
ngx_fûe_t
 *
fûe
);

30 
ngx_hâp_c›y_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

33 *
ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

34 *
ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

35 *
∑ª¡
, *
chûd
);

36 
ngx_öt_t
 
ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_c›y_fûãr_comm™ds
[] = {

41 { 
ngx_°rög
("output_buffers"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

43 
ngx_c⁄f_£t_bufs_¶Ÿ
,

44 
NGX_HTTP_LOC_CONF_OFFSET
,

45 
off£tof
(
ngx_hâp_c›y_fûãr_c⁄f_t
, 
bufs
),

46 
NULL
 },

48 
ngx_nuŒ_comm™d


52 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ_˘x
 = {

53 
NULL
,

54 
ngx_hâp_c›y_fûãr_öô
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL
,

62 
ngx_hâp_c›y_fûãr_¸óã_c⁄f
,

63 
ngx_hâp_c›y_fûãr_mîge_c⁄f


67 
ngx_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ
 = {

68 
NGX_MODULE_V1
,

69 &
ngx_hâp_c›y_fûãr_moduÀ_˘x
,

70 
ngx_hâp_c›y_fûãr_comm™ds
,

71 
NGX_HTTP_MODULE
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NGX_MODULE_V1_PADDING


83 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

86 
ngx_öt_t


87 
	$ngx_hâp_c›y_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

89 
ngx_öt_t
 
rc
;

90 
ngx_c⁄√˘i⁄_t
 *
c
;

91 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

92 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

93 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

95 
c
 = 
r
->
c⁄√˘i⁄
;

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

98 "hâ∞c›y fûãr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

100 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

102 i‡(
˘x
 =
NULL
) {

103 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ouçut_chaö_˘x_t
));

104 i‡(
˘x
 =
NULL
) {

105  
NGX_ERROR
;

108 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_c›y_fûãr_moduÀ
);

110 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

111 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

113 
˘x
->
£ndfûe
 = 
c
->sendfile;

114 
˘x
->
√ed_ö_mem‹y
 = 
r
->
maö_fûãr_√ed_ö_mem‹y


115 || 
r
->
fûãr_√ed_ö_mem‹y
;

116 
˘x
->
√ed_ö_ãmp
 = 
r
->
fûãr_√ed_ãmp‹¨y
;

118 
˘x
->
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

120 
˘x
->
poﬁ
 = 
r
->pool;

121 
˘x
->
bufs
 = 
c⁄f
->bufs;

122 
˘x
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_c›y_fûãr_moduÀ
;

124 
˘x
->
ouçut_fûãr
 = (
ngx_ouçut_chaö_fûãr_±
)

125 
ngx_hâp_√xt_body_fûãr
;

126 
˘x
->
fûãr_˘x
 = 
r
;

128 #i‡(
NGX_HAVE_FILE_AIO
)

129 i‡(
ngx_fûe_aio
 && 
˛cf
->
aio
 =
NGX_HTTP_AIO_ON
) {

130 
˘x
->
aio_h™dÀr
 = 
ngx_hâp_c›y_aio_h™dÀr
;

131 #i‡(
NGX_HAVE_AIO_SENDFILE
)

132 
˘x
->
aio_¥ñﬂd
 = 
ngx_hâp_c›y_aio_£ndfûe_¥ñﬂd
;

137 #i‡(
NGX_THREADS
)

138 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_THREADS
) {

139 
˘x
->
thªad_h™dÀr
 = 
ngx_hâp_c›y_thªad_h™dÀr
;

143 i‡(
ö
 && in->
buf
 && 
	`ngx_buf_size
(in->buf)) {

144 
r
->
ªque°_ouçut
 = 1;

148 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

149 
˘x
->
aio
 = 
r
->aio;

152 
rc
 = 
	`ngx_ouçut_chaö
(
˘x
, 
ö
);

154 i‡(
˘x
->
ö
 =
NULL
) {

155 
r
->
buf„ªd
 &~
NGX_HTTP_COPY_BUFFERED
;

158 
r
->
buf„ªd
 |
NGX_HTTP_COPY_BUFFERED
;

161 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

162 "hâ∞c›y fûãr: %ò\"%V?%V\"", 
rc
, &
r
->
uri
, &r->
¨gs
);

164  
rc
;

165 
	}
}

168 #i‡(
NGX_HAVE_FILE_AIO
)

171 
	$ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

173 
ngx_hâp_ªque°_t
 *
r
;

175 
r
 = 
˘x
->
fûãr_˘x
;

177 
fûe
->
aio
->
d©a
 = 
r
;

178 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_evít_h™dÀr
;

180 
r
->
maö
->
blocked
++;

181 
r
->
aio
 = 1;

182 
˘x
->
aio
 = 1;

183 
	}
}

187 
	$ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

189 
ngx_evít_aio_t
 *
aio
;

190 
ngx_c⁄√˘i⁄_t
 *
c
;

191 
ngx_hâp_ªque°_t
 *
r
;

193 
aio
 = 
ev
->
d©a
;

194 
r
 = 
aio
->
d©a
;

195 
c
 = 
r
->
c⁄√˘i⁄
;

197 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

199 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

200 "hâ∞aio: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

202 
r
->
maö
->
blocked
--;

203 
r
->
aio
 = 0;

205 
r
->
	`wrôe_evít_h™dÀr
(r);

207 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

208 
	}
}

211 #i‡(
NGX_HAVE_AIO_SENDFILE
)

213 
ssize_t


214 
	$ngx_hâp_c›y_aio_£ndfûe_¥ñﬂd
(
ngx_buf_t
 *
fûe
)

216 
ssize_t
 
n
;

217 
u_ch¨
 
buf
[1];

218 
ngx_evít_aio_t
 *
aio
;

219 
ngx_hâp_ªque°_t
 *
r
;

220 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

222 
n
 = 
	`ngx_fûe_aio_ªad
(
fûe
->fûe, 
buf
, 1, fûe->
fûe_pos
, 
NULL
);

224 i‡(
n
 =
NGX_AGAIN
) {

225 
aio
 = 
fûe
->file->aio;

226 
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
;

228 
r
 = 
aio
->
d©a
;

229 
r
->
maö
->
blocked
++;

230 
r
->
aio
 = 1;

232 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

233 
˘x
->
aio
 = 1;

236  
n
;

237 
	}
}

241 
	$ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

243 
ngx_evít_aio_t
 *
aio
;

244 
ngx_hâp_ªque°_t
 *
r
;

246 
aio
 = 
ev
->
d©a
;

247 
r
 = 
aio
->
d©a
;

249 
r
->
maö
->
blocked
--;

250 
r
->
aio
 = 0;

251 
ev
->
com∂ëe
 = 0;

253 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

254 
	}
}

260 #i‡(
NGX_THREADS
)

262 
ngx_öt_t


263 
	$ngx_hâp_c›y_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
, 
ngx_fûe_t
 *
fûe
)

265 
ngx_°r_t
 
«me
;

266 
ngx_thªad_poﬁ_t
 *
ç
;

267 
ngx_hâp_ªque°_t
 *
r
;

268 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

269 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

271 
r
 = 
fûe
->
thªad_˘x
;

273 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

274 
ç
 = 
˛cf
->
thªad_poﬁ
;

276 i‡(
ç
 =
NULL
) {

277 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
thªad_poﬁ_vÆue
, &
«me
)

278 !
NGX_OK
)

280  
NGX_ERROR
;

283 
ç
 = 
	`ngx_thªad_poﬁ_gë
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
«me
);

285 i‡(
ç
 =
NULL
) {

286 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

287 "thªadÖoﬁ \"%V\"ÇŸ found", &
«me
);

288  
NGX_ERROR
;

292 
èsk
->
evít
.
d©a
 = 
r
;

293 
èsk
->
evít
.
h™dÀr
 = 
ngx_hâp_c›y_thªad_evít_h™dÀr
;

295 i‡(
	`ngx_thªad_èsk_po°
(
ç
, 
èsk
Ë!
NGX_OK
) {

296  
NGX_ERROR
;

299 
r
->
maö
->
blocked
++;

300 
r
->
aio
 = 1;

302 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

303 
˘x
->
aio
 = 1;

305  
NGX_OK
;

306 
	}
}

310 
	$ngx_hâp_c›y_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

312 
ngx_c⁄√˘i⁄_t
 *
c
;

313 
ngx_hâp_ªque°_t
 *
r
;

315 
r
 = 
ev
->
d©a
;

316 
c
 = 
r
->
c⁄√˘i⁄
;

318 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

320 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

321 "hâ∞thªad: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

323 
r
->
maö
->
blocked
--;

324 
r
->
aio
 = 0;

326 i‡(
r
->
d⁄e
) {

333 
c
->
wrôe
->
	`h™dÀr
(c->write);

336 
r
->
	`wrôe_evít_h™dÀr
(r);

337 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

339 
	}
}

345 
	$ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

347 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

349 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_c›y_fûãr_c⁄f_t
));

350 i‡(
c⁄f
 =
NULL
) {

351  
NULL
;

354 
c⁄f
->
bufs
.
num
 = 0;

356  
c⁄f
;

357 
	}
}

361 
	$ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

363 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

364 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

366 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs, 2, 32768);

368  
NULL
;

369 
	}
}

372 
ngx_öt_t


373 
	$ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

375 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

376 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_c›y_fûãr
;

378  
NGX_OK
;

379 
	}
}

	@src/http/ngx_http_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 *
	m«me
;

15 
uöt32_t
 
	mmëhod
;

16 } 
	tngx_hâp_mëhod_«me_t
;

19 
	#NGX_HTTP_REQUEST_BODY_FILE_OFF
 0

	)

20 
	#NGX_HTTP_REQUEST_BODY_FILE_ON
 1

	)

21 
	#NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 2

	)

24 
ngx_öt_t
 
ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_öt_t
 
ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
);

28 
ngx_öt_t
 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 
ngx_öt_t
 
ngx_hâp_c‹e_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

32 *
ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

33 *
ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

34 *
∑ª¡
, *
chûd
);

35 *
ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

39 *
ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
dummy
);

41 *
ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

42 *
dummy
);

43 
ngx_öt_t
 
ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
,

44 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

46 *
ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

48 *
ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

49 *
c⁄f
);

51 *
ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

52 *
c⁄f
);

53 *
ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

54 *
c⁄f
);

55 *
ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 *
ngx_hâp_c‹e_£t_aio
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

59 *
c⁄f
);

60 *
ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

61 *
c⁄f
);

62 *
ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

66 *
ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

67 *
c⁄f
);

68 *
ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

69 *
c⁄f
);

70 *
ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

71 *
c⁄f
);

72 *
ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 #i‡(
NGX_HTTP_GZIP
)

75 
ngx_öt_t
 
ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
);

76 
ngx_uöt_t
 
ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
);

77 *
ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

78 *
c⁄f
);

80 
ngx_öt_t
 
ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
,

82 
ªcursive
);

83 #i‡(
NGX_HAVE_OPENAT
)

84 *
ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

88 *
ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

89 *
ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

91 
ngx_c⁄f_po°_t
 
	gngx_hâp_c‹e_low©_po°
 =

92 { 
ngx_hâp_c‹e_low©_check
 };

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_c‹e_poﬁ_size_p
 =

95 
ngx_hâp_c‹e_poﬁ_size
;

98 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ªque°_body_ö_fûe
[] = {

99 { 
ngx_°rög
("off"), 
NGX_HTTP_REQUEST_BODY_FILE_OFF
 },

100 { 
ngx_°rög
("⁄"), 
NGX_HTTP_REQUEST_BODY_FILE_ON
 },

101 { 
ngx_°rög
("˛ón"), 
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 },

102 { 
ngx_nuŒ_°rög
, 0 }

106 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ßtisfy
[] = {

107 { 
ngx_°rög
("Æl"), 
NGX_HTTP_SATISFY_ALL
 },

108 { 
ngx_°rög
("™y"), 
NGX_HTTP_SATISFY_ANY
 },

109 { 
ngx_nuŒ_°rög
, 0 }

113 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_lögîög_˛o£
[] = {

114 { 
ngx_°rög
("off"), 
NGX_HTTP_LINGERING_OFF
 },

115 { 
ngx_°rög
("⁄"), 
NGX_HTTP_LINGERING_ON
 },

116 { 
ngx_°rög
("Æways"), 
NGX_HTTP_LINGERING_ALWAYS
 },

117 { 
ngx_nuŒ_°rög
, 0 }

121 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_£rvî_tokís
[] = {

122 { 
ngx_°rög
("off"), 
NGX_HTTP_SERVER_TOKENS_OFF
 },

123 { 
ngx_°rög
("⁄"), 
NGX_HTTP_SERVER_TOKENS_ON
 },

124 { 
ngx_°rög
("buûd"), 
NGX_HTTP_SERVER_TOKENS_BUILD
 },

125 { 
ngx_nuŒ_°rög
, 0 }

129 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_if_modifõd_sö˚
[] = {

130 { 
ngx_°rög
("off"), 
NGX_HTTP_IMS_OFF
 },

131 { 
ngx_°rög
("exa˘"), 
NGX_HTTP_IMS_EXACT
 },

132 { 
ngx_°rög
("bef‹e"), 
NGX_HTTP_IMS_BEFORE
 },

133 { 
ngx_nuŒ_°rög
, 0 }

137 
ngx_c⁄f_bômask_t
 
	gngx_hâp_c‹e_kì∑live_dißbÀ
[] = {

138 { 
ngx_°rög
("n⁄e"), 
NGX_HTTP_KEEPALIVE_DISABLE_NONE
 },

139 { 
ngx_°rög
("msõ6"), 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 },

140 { 
ngx_°rög
("ßÁri"), 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 },

141 { 
ngx_nuŒ_°rög
, 0 }

145 
ngx_∑th_öô_t
 
	gngx_hâp_˛õ¡_ãmp_∑th
 = {

146 
ngx_°rög
(
NGX_HTTP_CLIENT_TEMP_PATH
), { 0, 0, 0 }

150 #i‡(
NGX_HTTP_GZIP
)

152 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_hâp_vîsi⁄
[] = {

153 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

154 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

155 { 
ngx_nuŒ_°rög
, 0 }

159 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gzù_¥oxõd_mask
[] = {

160 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_PROXIED_OFF
 },

161 { 
ngx_°rög
("expúed"), 
NGX_HTTP_GZIP_PROXIED_EXPIRED
 },

162 { 
ngx_°rög
("no-ˇche"), 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
 },

163 { 
ngx_°rög
("no-°‹e"), 
NGX_HTTP_GZIP_PROXIED_NO_STORE
 },

164 { 
ngx_°rög
("¥iv©e"), 
NGX_HTTP_GZIP_PROXIED_PRIVATE
 },

165 { 
ngx_°rög
("no_œ°_modifõd"), 
NGX_HTTP_GZIP_PROXIED_NO_LM
 },

166 { 
ngx_°rög
("no_ëag"), 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
 },

167 { 
ngx_°rög
("auth"), 
NGX_HTTP_GZIP_PROXIED_AUTH
 },

168 { 
ngx_°rög
("™y"), 
NGX_HTTP_GZIP_PROXIED_ANY
 },

169 { 
ngx_nuŒ_°rög
, 0 }

173 
ngx_°r_t
 
	gngx_hâp_gzù_no_ˇche
 = 
ngx_°rög
("no-cache");

174 
ngx_°r_t
 
	gngx_hâp_gzù_no_°‹e
 = 
ngx_°rög
("no-store");

175 
ngx_°r_t
 
	gngx_hâp_gzù_¥iv©e
 = 
ngx_°rög
("private");

180 
ngx_comm™d_t
 
	gngx_hâp_c‹e_comm™ds
[] = {

182 { 
ngx_°rög
("variables_hash_max_size"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

184 
ngx_c⁄f_£t_num_¶Ÿ
,

185 
NGX_HTTP_MAIN_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

187 
NULL
 },

189 { 
ngx_°rög
("variables_hash_bucket_size"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_num_¶Ÿ
,

192 
NGX_HTTP_MAIN_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

194 
NULL
 },

196 { 
ngx_°rög
("server_names_hash_max_size"),

197 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

198 
ngx_c⁄f_£t_num_¶Ÿ
,

199 
NGX_HTTP_MAIN_CONF_OFFSET
,

200 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_max_size
),

201 
NULL
 },

203 { 
ngx_°rög
("server_names_hash_bucket_size"),

204 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

205 
ngx_c⁄f_£t_num_¶Ÿ
,

206 
NGX_HTTP_MAIN_CONF_OFFSET
,

207 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_buckë_size
),

208 
NULL
 },

210 { 
ngx_°rög
("server"),

211 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

212 
ngx_hâp_c‹e_£rvî
,

215 
NULL
 },

217 { 
ngx_°rög
("connection_pool_size"),

218 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

219 
ngx_c⁄f_£t_size_¶Ÿ
,

220 
NGX_HTTP_SRV_CONF_OFFSET
,

221 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
c⁄√˘i⁄_poﬁ_size
),

222 &
ngx_hâp_c‹e_poﬁ_size_p
 },

224 { 
ngx_°rög
("request_pool_size"),

225 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

226 
ngx_c⁄f_£t_size_¶Ÿ
,

227 
NGX_HTTP_SRV_CONF_OFFSET
,

228 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ªque°_poﬁ_size
),

229 &
ngx_hâp_c‹e_poﬁ_size_p
 },

231 { 
ngx_°rög
("client_header_timeout"),

232 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

233 
ngx_c⁄f_£t_m£c_¶Ÿ
,

234 
NGX_HTTP_SRV_CONF_OFFSET
,

235 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_timeout
),

236 
NULL
 },

238 { 
ngx_°rög
("client_header_buffer_size"),

239 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

240 
ngx_c⁄f_£t_size_¶Ÿ
,

241 
NGX_HTTP_SRV_CONF_OFFSET
,

242 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_buf„r_size
),

243 
NULL
 },

245 { 
ngx_°rög
("large_client_header_buffers"),

246 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE2
,

247 
ngx_c⁄f_£t_bufs_¶Ÿ
,

248 
NGX_HTTP_SRV_CONF_OFFSET
,

249 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
œrge_˛õ¡_hódî_buf„rs
),

250 
NULL
 },

252 { 
ngx_°rög
("ignore_invalid_headers"),

253 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

254 
ngx_c⁄f_£t_Êag_¶Ÿ
,

255 
NGX_HTTP_SRV_CONF_OFFSET
,

256 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ign‹e_övÆid_hódîs
),

257 
NULL
 },

259 { 
ngx_°rög
("merge_slashes"),

260 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

261 
ngx_c⁄f_£t_Êag_¶Ÿ
,

262 
NGX_HTTP_SRV_CONF_OFFSET
,

263 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
mîge_¶ashes
),

264 
NULL
 },

266 { 
ngx_°rög
("underscores_in_headers"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

268 
ngx_c⁄f_£t_Êag_¶Ÿ
,

269 
NGX_HTTP_SRV_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
undîsc‹es_ö_hódîs
),

271 
NULL
 },

273 { 
ngx_°rög
("location"),

274 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

275 
ngx_hâp_c‹e_loˇti⁄
,

276 
NGX_HTTP_SRV_CONF_OFFSET
,

278 
NULL
 },

280 { 
ngx_°rög
("listen"),

281 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

282 
ngx_hâp_c‹e_li°í
,

283 
NGX_HTTP_SRV_CONF_OFFSET
,

285 
NULL
 },

287 { 
ngx_°rög
("server_name"),

288 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

289 
ngx_hâp_c‹e_£rvî_«me
,

290 
NGX_HTTP_SRV_CONF_OFFSET
,

292 
NULL
 },

294 { 
ngx_°rög
("types_hash_max_size"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

296 
ngx_c⁄f_£t_num_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_max_size
),

299 
NULL
 },

301 { 
ngx_°rög
("types_hash_bucket_size"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

303 
ngx_c⁄f_£t_num_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_buckë_size
),

306 
NULL
 },

308 { 
ngx_°rög
("types"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


310 |
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

311 
ngx_hâp_c‹e_ty≥s
,

312 
NGX_HTTP_LOC_CONF_OFFSET
,

314 
NULL
 },

316 { 
ngx_°rög
("default_type"),

317 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

318 
ngx_c⁄f_£t_°r_¶Ÿ
,

319 
NGX_HTTP_LOC_CONF_OFFSET
,

320 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
deÁu…_ty≥
),

321 
NULL
 },

323 { 
ngx_°rög
("root"),

324 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


325 |
NGX_CONF_TAKE1
,

326 
ngx_hâp_c‹e_roŸ
,

327 
NGX_HTTP_LOC_CONF_OFFSET
,

329 
NULL
 },

331 { 
ngx_°rög
("alias"),

332 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

333 
ngx_hâp_c‹e_roŸ
,

334 
NGX_HTTP_LOC_CONF_OFFSET
,

336 
NULL
 },

338 { 
ngx_°rög
("limit_except"),

339 
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

340 
ngx_hâp_c‹e_limô_ex˚±
,

341 
NGX_HTTP_LOC_CONF_OFFSET
,

343 
NULL
 },

345 { 
ngx_°rög
("client_max_body_size"),

346 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

347 
ngx_c⁄f_£t_off_¶Ÿ
,

348 
NGX_HTTP_LOC_CONF_OFFSET
,

349 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_max_body_size
),

350 
NULL
 },

352 { 
ngx_°rög
("client_body_buffer_size"),

353 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

354 
ngx_c⁄f_£t_size_¶Ÿ
,

355 
NGX_HTTP_LOC_CONF_OFFSET
,

356 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_buf„r_size
),

357 
NULL
 },

359 { 
ngx_°rög
("client_body_timeout"),

360 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

361 
ngx_c⁄f_£t_m£c_¶Ÿ
,

362 
NGX_HTTP_LOC_CONF_OFFSET
,

363 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_timeout
),

364 
NULL
 },

366 { 
ngx_°rög
("client_body_temp_path"),

367 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

368 
ngx_c⁄f_£t_∑th_¶Ÿ
,

369 
NGX_HTTP_LOC_CONF_OFFSET
,

370 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ãmp_∑th
),

371 
NULL
 },

373 { 
ngx_°rög
("client_body_in_file_only"),

374 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

375 
ngx_c⁄f_£t_íum_¶Ÿ
,

376 
NGX_HTTP_LOC_CONF_OFFSET
,

377 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_fûe_⁄ly
),

378 &
ngx_hâp_c‹e_ªque°_body_ö_fûe
 },

380 { 
ngx_°rög
("client_body_in_single_buffer"),

381 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

382 
ngx_c⁄f_£t_Êag_¶Ÿ
,

383 
NGX_HTTP_LOC_CONF_OFFSET
,

384 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_sögÀ_buf„r
),

385 
NULL
 },

387 { 
ngx_°rög
("sendfile"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


389 |
NGX_CONF_FLAG
,

390 
ngx_c⁄f_£t_Êag_¶Ÿ
,

391 
NGX_HTTP_LOC_CONF_OFFSET
,

392 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe
),

393 
NULL
 },

395 { 
ngx_°rög
("sendfile_max_chunk"),

396 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

397 
ngx_c⁄f_£t_size_¶Ÿ
,

398 
NGX_HTTP_LOC_CONF_OFFSET
,

399 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe_max_chunk
),

400 
NULL
 },

402 { 
ngx_°rög
("subrequest_output_buffer_size"),

403 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

404 
ngx_c⁄f_£t_size_¶Ÿ
,

405 
NGX_HTTP_LOC_CONF_OFFSET
,

406 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
subªque°_ouçut_buf„r_size
),

407 
NULL
 },

409 { 
ngx_°rög
("aio"),

410 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

411 
ngx_hâp_c‹e_£t_aio
,

412 
NGX_HTTP_LOC_CONF_OFFSET
,

414 
NULL
 },

416 { 
ngx_°rög
("aio_write"),

417 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

418 
ngx_c⁄f_£t_Êag_¶Ÿ
,

419 
NGX_HTTP_LOC_CONF_OFFSET
,

420 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
aio_wrôe
),

421 
NULL
 },

423 { 
ngx_°rög
("read_ahead"),

424 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

425 
ngx_c⁄f_£t_size_¶Ÿ
,

426 
NGX_HTTP_LOC_CONF_OFFSET
,

427 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªad_ahód
),

428 
NULL
 },

430 { 
ngx_°rög
("directio"),

431 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

432 
ngx_hâp_c‹e_dúe˘io
,

433 
NGX_HTTP_LOC_CONF_OFFSET
,

435 
NULL
 },

437 { 
ngx_°rög
("directio_alignment"),

438 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

439 
ngx_c⁄f_£t_off_¶Ÿ
,

440 
NGX_HTTP_LOC_CONF_OFFSET
,

441 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
dúe˘io_Æignmít
),

442 
NULL
 },

444 { 
ngx_°rög
("tcp_nopush"),

445 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

446 
ngx_c⁄f_£t_Êag_¶Ÿ
,

447 
NGX_HTTP_LOC_CONF_OFFSET
,

448 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_n›ush
),

449 
NULL
 },

451 { 
ngx_°rög
("tcp_nodelay"),

452 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

453 
ngx_c⁄f_£t_Êag_¶Ÿ
,

454 
NGX_HTTP_LOC_CONF_OFFSET
,

455 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_nodñay
),

456 
NULL
 },

458 { 
ngx_°rög
("send_timeout"),

459 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

460 
ngx_c⁄f_£t_m£c_¶Ÿ
,

461 
NGX_HTTP_LOC_CONF_OFFSET
,

462 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_timeout
),

463 
NULL
 },

465 { 
ngx_°rög
("send_lowat"),

466 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

467 
ngx_c⁄f_£t_size_¶Ÿ
,

468 
NGX_HTTP_LOC_CONF_OFFSET
,

469 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_low©
),

470 &
ngx_hâp_c‹e_low©_po°
 },

472 { 
ngx_°rög
("postpone_output"),

473 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

474 
ngx_c⁄f_£t_size_¶Ÿ
,

475 
NGX_HTTP_LOC_CONF_OFFSET
,

476 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°p⁄e_ouçut
),

477 
NULL
 },

479 { 
ngx_°rög
("limit_rate"),

480 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


481 |
NGX_CONF_TAKE1
,

482 
ngx_c⁄f_£t_size_¶Ÿ
,

483 
NGX_HTTP_LOC_CONF_OFFSET
,

484 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã
),

485 
NULL
 },

487 { 
ngx_°rög
("limit_rate_after"),

488 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


489 |
NGX_CONF_TAKE1
,

490 
ngx_c⁄f_£t_size_¶Ÿ
,

491 
NGX_HTTP_LOC_CONF_OFFSET
,

492 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã_a·î
),

493 
NULL
 },

495 { 
ngx_°rög
("keepalive_timeout"),

496 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

497 
ngx_hâp_c‹e_kì∑live
,

498 
NGX_HTTP_LOC_CONF_OFFSET
,

500 
NULL
 },

502 { 
ngx_°rög
("keepalive_requests"),

503 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

504 
ngx_c⁄f_£t_num_¶Ÿ
,

505 
NGX_HTTP_LOC_CONF_OFFSET
,

506 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_ªque°s
),

507 
NULL
 },

509 { 
ngx_°rög
("keepalive_disable"),

510 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

511 
ngx_c⁄f_£t_bômask_¶Ÿ
,

512 
NGX_HTTP_LOC_CONF_OFFSET
,

513 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_dißbÀ
),

514 &
ngx_hâp_c‹e_kì∑live_dißbÀ
 },

516 { 
ngx_°rög
("satisfy"),

517 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

518 
ngx_c⁄f_£t_íum_¶Ÿ
,

519 
NGX_HTTP_LOC_CONF_OFFSET
,

520 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

521 &
ngx_hâp_c‹e_ßtisfy
 },

523 { 
ngx_°rög
("internal"),

524 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

525 
ngx_hâp_c‹e_öã∫Æ
,

526 
NGX_HTTP_LOC_CONF_OFFSET
,

528 
NULL
 },

530 { 
ngx_°rög
("lingering_close"),

531 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

532 
ngx_c⁄f_£t_íum_¶Ÿ
,

533 
NGX_HTTP_LOC_CONF_OFFSET
,

534 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_˛o£
),

535 &
ngx_hâp_c‹e_lögîög_˛o£
 },

537 { 
ngx_°rög
("lingering_time"),

538 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

539 
ngx_c⁄f_£t_m£c_¶Ÿ
,

540 
NGX_HTTP_LOC_CONF_OFFSET
,

541 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_time
),

542 
NULL
 },

544 { 
ngx_°rög
("lingering_timeout"),

545 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

546 
ngx_c⁄f_£t_m£c_¶Ÿ
,

547 
NGX_HTTP_LOC_CONF_OFFSET
,

548 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_timeout
),

549 
NULL
 },

551 { 
ngx_°rög
("reset_timedout_connection"),

552 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

553 
ngx_c⁄f_£t_Êag_¶Ÿ
,

554 
NGX_HTTP_LOC_CONF_OFFSET
,

555 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ª£t_timedout_c⁄√˘i⁄
),

556 
NULL
 },

558 { 
ngx_°rög
("absolute_redirect"),

559 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

560 
ngx_c⁄f_£t_Êag_¶Ÿ
,

561 
NGX_HTTP_LOC_CONF_OFFSET
,

562 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
absﬁuã_ªdúe˘
),

563 
NULL
 },

565 { 
ngx_°rög
("server_name_in_redirect"),

566 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

567 
ngx_c⁄f_£t_Êag_¶Ÿ
,

568 
NGX_HTTP_LOC_CONF_OFFSET
,

569 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

570 
NULL
 },

572 { 
ngx_°rög
("port_in_redirect"),

573 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

574 
ngx_c⁄f_£t_Êag_¶Ÿ
,

575 
NGX_HTTP_LOC_CONF_OFFSET
,

576 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
p‹t_ö_ªdúe˘
),

577 
NULL
 },

579 { 
ngx_°rög
("msie_padding"),

580 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

581 
ngx_c⁄f_£t_Êag_¶Ÿ
,

582 
NGX_HTTP_LOC_CONF_OFFSET
,

583 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_∑ddög
),

584 
NULL
 },

586 { 
ngx_°rög
("msie_refresh"),

587 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

588 
ngx_c⁄f_£t_Êag_¶Ÿ
,

589 
NGX_HTTP_LOC_CONF_OFFSET
,

590 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_ª‰esh
),

591 
NULL
 },

593 { 
ngx_°rög
("log_not_found"),

594 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

595 
ngx_c⁄f_£t_Êag_¶Ÿ
,

596 
NGX_HTTP_LOC_CONF_OFFSET
,

597 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_nŸ_found
),

598 
NULL
 },

600 { 
ngx_°rög
("log_subrequest"),

601 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

602 
ngx_c⁄f_£t_Êag_¶Ÿ
,

603 
NGX_HTTP_LOC_CONF_OFFSET
,

604 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_subªque°
),

605 
NULL
 },

607 { 
ngx_°rög
("recursive_error_pages"),

608 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

609 
ngx_c⁄f_£t_Êag_¶Ÿ
,

610 
NGX_HTTP_LOC_CONF_OFFSET
,

611 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªcursive_îr‹_∑ges
),

612 
NULL
 },

614 { 
ngx_°rög
("server_tokens"),

615 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

616 
ngx_c⁄f_£t_íum_¶Ÿ
,

617 
NGX_HTTP_LOC_CONF_OFFSET
,

618 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_tokís
),

619 &
ngx_hâp_c‹e_£rvî_tokís
 },

621 { 
ngx_°rög
("if_modified_since"),

622 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

623 
ngx_c⁄f_£t_íum_¶Ÿ
,

624 
NGX_HTTP_LOC_CONF_OFFSET
,

625 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
if_modifõd_sö˚
),

626 &
ngx_hâp_c‹e_if_modifõd_sö˚
 },

628 { 
ngx_°rög
("max_ranges"),

629 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

630 
ngx_c⁄f_£t_num_¶Ÿ
,

631 
NGX_HTTP_LOC_CONF_OFFSET
,

632 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
max_ønges
),

633 
NULL
 },

635 { 
ngx_°rög
("chunked_transfer_encoding"),

636 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

637 
ngx_c⁄f_£t_Êag_¶Ÿ
,

638 
NGX_HTTP_LOC_CONF_OFFSET
,

639 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
chunked_å™s„r_ícodög
),

640 
NULL
 },

642 { 
ngx_°rög
("etag"),

643 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

644 
ngx_c⁄f_£t_Êag_¶Ÿ
,

645 
NGX_HTTP_LOC_CONF_OFFSET
,

646 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ëag
),

647 
NULL
 },

649 { 
ngx_°rög
("error_page"),

650 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


651 |
NGX_CONF_2MORE
,

652 
ngx_hâp_c‹e_îr‹_∑ge
,

653 
NGX_HTTP_LOC_CONF_OFFSET
,

655 
NULL
 },

657 { 
ngx_°rög
("post_action"),

658 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


659 |
NGX_CONF_TAKE1
,

660 
ngx_c⁄f_£t_°r_¶Ÿ
,

661 
NGX_HTTP_LOC_CONF_OFFSET
,

662 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°_a˘i⁄
),

663 
NULL
 },

665 { 
ngx_°rög
("error_log"),

666 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

667 
ngx_hâp_c‹e_îr‹_log
,

668 
NGX_HTTP_LOC_CONF_OFFSET
,

670 
NULL
 },

672 { 
ngx_°rög
("open_file_cache"),

673 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

674 
ngx_hâp_c‹e_›í_fûe_ˇche
,

675 
NGX_HTTP_LOC_CONF_OFFSET
,

676 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche
),

677 
NULL
 },

679 { 
ngx_°rög
("open_file_cache_valid"),

680 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

681 
ngx_c⁄f_£t_£c_¶Ÿ
,

682 
NGX_HTTP_LOC_CONF_OFFSET
,

683 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

684 
NULL
 },

686 { 
ngx_°rög
("open_file_cache_min_uses"),

687 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

688 
ngx_c⁄f_£t_num_¶Ÿ
,

689 
NGX_HTTP_LOC_CONF_OFFSET
,

690 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_mö_u£s
),

691 
NULL
 },

693 { 
ngx_°rög
("open_file_cache_errors"),

694 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

695 
ngx_c⁄f_£t_Êag_¶Ÿ
,

696 
NGX_HTTP_LOC_CONF_OFFSET
,

697 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_îr‹s
),

698 
NULL
 },

700 { 
ngx_°rög
("open_file_cache_events"),

701 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

702 
ngx_c⁄f_£t_Êag_¶Ÿ
,

703 
NGX_HTTP_LOC_CONF_OFFSET
,

704 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_evíts
),

705 
NULL
 },

707 { 
ngx_°rög
("resolver"),

708 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

709 
ngx_hâp_c‹e_ªsﬁvî
,

710 
NGX_HTTP_LOC_CONF_OFFSET
,

712 
NULL
 },

714 { 
ngx_°rög
("resolver_timeout"),

715 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

716 
ngx_c⁄f_£t_m£c_¶Ÿ
,

717 
NGX_HTTP_LOC_CONF_OFFSET
,

718 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªsﬁvî_timeout
),

719 
NULL
 },

721 #i‡(
NGX_HTTP_GZIP
)

723 { 
ngx_°rög
("gzip_vary"),

724 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

725 
ngx_c⁄f_£t_Êag_¶Ÿ
,

726 
NGX_HTTP_LOC_CONF_OFFSET
,

727 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_v¨y
),

728 
NULL
 },

730 { 
ngx_°rög
("gzip_http_version"),

731 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

732 
ngx_c⁄f_£t_íum_¶Ÿ
,

733 
NGX_HTTP_LOC_CONF_OFFSET
,

734 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_hâp_vîsi⁄
),

735 &
ngx_hâp_gzù_hâp_vîsi⁄
 },

737 { 
ngx_°rög
("gzip_proxied"),

738 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

739 
ngx_c⁄f_£t_bômask_¶Ÿ
,

740 
NGX_HTTP_LOC_CONF_OFFSET
,

741 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_¥oxõd
),

742 &
ngx_hâp_gzù_¥oxõd_mask
 },

744 { 
ngx_°rög
("gzip_disable"),

745 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

746 
ngx_hâp_gzù_dißbÀ
,

747 
NGX_HTTP_LOC_CONF_OFFSET
,

749 
NULL
 },

753 #i‡(
NGX_HAVE_OPENAT
)

755 { 
ngx_°rög
("disable_symlinks"),

756 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

757 
ngx_hâp_dißbÀ_symlöks
,

758 
NGX_HTTP_LOC_CONF_OFFSET
,

760 
NULL
 },

764 
ngx_nuŒ_comm™d


768 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ_˘x
 = {

769 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
,

770 
ngx_hâp_c‹e_po°c⁄figuøti⁄
,

772 
ngx_hâp_c‹e_¸óã_maö_c⁄f
,

773 
ngx_hâp_c‹e_öô_maö_c⁄f
,

775 
ngx_hâp_c‹e_¸óã_§v_c⁄f
,

776 
ngx_hâp_c‹e_mîge_§v_c⁄f
,

778 
ngx_hâp_c‹e_¸óã_loc_c⁄f
,

779 
ngx_hâp_c‹e_mîge_loc_c⁄f


783 
ngx_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ
 = {

784 
NGX_MODULE_V1
,

785 &
ngx_hâp_c‹e_moduÀ_˘x
,

786 
ngx_hâp_c‹e_comm™ds
,

787 
NGX_HTTP_MODULE
,

788 
NULL
,

789 
NULL
,

790 
NULL
,

791 
NULL
,

792 
NULL
,

793 
NULL
,

794 
NULL
,

795 
NGX_MODULE_V1_PADDING


799 
ngx_°r_t
 
	gngx_hâp_c‹e_gë_mëhod
 = { 3, (
u_ch¨
 *) "GET" };

803 
	$ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

805 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

807 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = 
NULL
;

809 i‡(!
r
->
öã∫Æ
) {

810 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
) {

812 
r
->
kì∑live
 = (r->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
);

815 
NGX_HTTP_CONNECTION_CLOSE
:

816 
r
->
kì∑live
 = 0;

819 
NGX_HTTP_CONNECTION_KEEP_ALIVE
:

820 
r
->
kì∑live
 = 1;

824 
r
->
lögîög_˛o£
 = (r->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0

825 || 
r
->
hódîs_ö
.
chunked
);

826 
r
->
pha£_h™dÀr
 = 0;

829 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

830 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
;

833 
r
->
vÆid_loˇti⁄
 = 1;

834 #i‡(
NGX_HTTP_GZIP
)

835 
r
->
gzù_ã°ed
 = 0;

836 
r
->
gzù_ok
 = 0;

837 
r
->
gzù_v¨y
 = 0;

840 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

841 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

842 
	}
}

846 
	$ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
)

848 
ngx_öt_t
 
rc
;

849 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

850 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

852 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

854 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

856 
ph
[
r
->
pha£_h™dÀr
].
checkî
) {

858 
rc
 = 
ph
[
r
->
pha£_h™dÀr
].
	`checkî
(r, &ph[r->phase_handler]);

860 i‡(
rc
 =
NGX_OK
) {

864 
	}
}

867 
ngx_öt_t


868 
	$ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

870 
ngx_öt_t
 
rc
;

877 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

878 "gíîi¯pha£: %ui", 
r
->
pha£_h™dÀr
);

880 
rc
 = 
ph
->
	`h™dÀr
(
r
);

882 i‡(
rc
 =
NGX_OK
) {

883 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

884  
NGX_AGAIN
;

887 i‡(
rc
 =
NGX_DECLINED
) {

888 
r
->
pha£_h™dÀr
++;

889  
NGX_AGAIN
;

892 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

893  
NGX_OK
;

898 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

900  
NGX_OK
;

901 
	}
}

904 
ngx_öt_t


905 
	$ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

907 
ngx_öt_t
 
rc
;

909 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

910 "ªwrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

912 
rc
 = 
ph
->
	`h™dÀr
(
r
);

914 i‡(
rc
 =
NGX_DECLINED
) {

915 
r
->
pha£_h™dÀr
++;

916  
NGX_AGAIN
;

919 i‡(
rc
 =
NGX_DONE
) {

920  
NGX_OK
;

925 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

927  
NGX_OK
;

928 
	}
}

931 
ngx_öt_t


932 
	$ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

933 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

935 
u_ch¨
 *
p
;

936 
size_t
 
Àn
;

937 
ngx_öt_t
 
rc
;

938 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

940 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

941 
r
->
uri_ch™ged
 = 0;

943 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

945 i‡(
rc
 =
NGX_ERROR
) {

946 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

947  
NGX_OK
;

950 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

952 i‡(!
r
->
öã∫Æ
 && 
˛cf
->internal) {

953 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

954  
NGX_OK
;

957 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

959 (
˛cf
->
n⁄ame
 ? "*" : (˛cf->
exa˘_m©ch
 ? "=" : "")),

960 &
˛cf
->
«me
);

962 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

964 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

966 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
, 
˛cf
->
˛õ¡_max_body_size
);

968 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

969 && !
r
->
disˇrd_body


970 && 
˛cf
->
˛õ¡_max_body_size


971 && 
˛cf
->
˛õ¡_max_body_size
 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
)

973 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

975 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

977 
r
->
ex≥˘_ã°ed
 = 1;

978 (Ë
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

979 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
);

980  
NGX_OK
;

983 i‡(
rc
 =
NGX_DONE
) {

984 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

986 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

987 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

988 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

989  
NGX_OK
;

992 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

993 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

995 i‡(
r
->
¨gs
.
Àn
 == 0) {

996 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
˛cf
->
«me
;

999 
Àn
 = 
˛cf
->
«me
.À¿+ 1 + 
r
->
¨gs
.len;

1000 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1002 i‡(
p
 =
NULL
) {

1003 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1004 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1005  
NGX_OK
;

1008 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

1009 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

1011 
p
 = 
	`ngx_˝ymem
’, 
˛cf
->
«me
.
d©a
, clcf->«me.
Àn
);

1012 *
p
++ = '?';

1013 
	`ngx_mem˝y
(
p
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1016 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MOVED_PERMANENTLY
);

1017  
NGX_OK
;

1020 
r
->
pha£_h™dÀr
++;

1021  
NGX_AGAIN
;

1022 
	}
}

1025 
ngx_öt_t


1026 
	$ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1027 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1029 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1031 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1032 "po°Ñewrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

1034 i‡(!
r
->
uri_ch™ged
) {

1035 
r
->
pha£_h™dÀr
++;

1036  
NGX_AGAIN
;

1039 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1040 "uròch™ges: %d", 
r
->
uri_ch™ges
);

1049 
r
->
uri_ch™ges
--;

1051 i‡(
r
->
uri_ch™ges
 == 0) {

1052 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1054 "whûê¥o˚ssög \"%V\"", &
r
->
uri
);

1056 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1057  
NGX_OK
;

1060 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1062 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1063 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1065  
NGX_AGAIN
;

1066 
	}
}

1069 
ngx_öt_t


1070 
	$ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1072 
ngx_öt_t
 
rc
;

1073 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1075 i‡(
r
 !r->
maö
) {

1076 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1077  
NGX_AGAIN
;

1080 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1081 "ac˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1083 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1085 i‡(
rc
 =
NGX_DECLINED
) {

1086 
r
->
pha£_h™dÀr
++;

1087  
NGX_AGAIN
;

1090 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

1091  
NGX_OK
;

1094 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1096 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

1098 i‡(
rc
 =
NGX_OK
) {

1099 
r
->
pha£_h™dÀr
++;

1100  
NGX_AGAIN
;

1104 i‡(
rc
 =
NGX_OK
) {

1105 
r
->
ac˚ss_code
 = 0;

1107 i‡(
r
->
hódîs_out
.
www_authítiˇã
) {

1108 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

1111 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1112  
NGX_AGAIN
;

1115 i‡(
rc
 =
NGX_HTTP_FORBIDDEN
 ||Ñ¯=
NGX_HTTP_UNAUTHORIZED
) {

1116 i‡(
r
->
ac˚ss_code
 !
NGX_HTTP_UNAUTHORIZED
) {

1117 
r
->
ac˚ss_code
 = 
rc
;

1120 
r
->
pha£_h™dÀr
++;

1121  
NGX_AGAIN
;

1127 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1128  
NGX_OK
;

1129 
	}
}

1132 
ngx_öt_t


1133 
	$ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1134 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1136 
ngx_öt_t
 
ac˚ss_code
;

1138 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1139 "po°ác˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1141 
ac˚ss_code
 = 
r
->access_code;

1143 i‡(
ac˚ss_code
) {

1144 i‡(
ac˚ss_code
 =
NGX_HTTP_FORBIDDEN
) {

1145 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1149 
r
->
ac˚ss_code
 = 0;

1150 
	`ngx_hâp_föÆize_ªque°
(
r
, 
ac˚ss_code
);

1151  
NGX_OK
;

1154 
r
->
pha£_h™dÀr
++;

1155  
NGX_AGAIN
;

1156 
	}
}

1159 
ngx_öt_t


1160 
	$ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1161 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1163 
size_t
 
roŸ
;

1164 
ngx_öt_t
 
rc
;

1165 
ngx_°r_t
 
∑th
;

1167 i‡(
r
->
c⁄ã¡_h™dÀr
) {

1168 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

1169 
	`ngx_hâp_föÆize_ªque°
(
r
,Ñ->
	`c⁄ã¡_h™dÀr
(r));

1170  
NGX_OK
;

1173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1174 "c⁄ã¡Öha£: %ui", 
r
->
pha£_h™dÀr
);

1176 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1178 i‡(
rc
 !
NGX_DECLINED
) {

1179 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1180  
NGX_OK
;

1185 
ph
++;

1187 i‡(
ph
->
checkî
) {

1188 
r
->
pha£_h™dÀr
++;

1189  
NGX_AGAIN
;

1194 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

1196 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë!
NULL
) {

1197 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1198 "dúe˘‹y index o‡\"%s\" i†f‹biddí", 
∑th
.
d©a
);

1201 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_FORBIDDEN
);

1202  
NGX_OK
;

1205 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "no handler found");

1207 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1208  
NGX_OK
;

1209 
	}
}

1213 
	$ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
)

1215 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1217 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1219 i‡(
r
->
mëhod
 & 
˛cf
->
limô_ex˚±
) {

1220 
r
->
loc_c⁄f
 = 
˛cf
->
limô_ex˚±_loc_c⁄f
;

1221 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1224 i‡(
r
 =r->
maö
) {

1225 
	`ngx_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

1228 i‡((
ngx_io
.
Êags
 & 
NGX_IO_SENDFILE
Ë&& 
˛cf
->
£ndfûe
) {

1229 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 1;

1232 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 0;

1235 i‡(
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
) {

1236 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

1237 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

1238 
r
->
ªque°_body_ö_˛ón_fûe
 =

1239 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 =
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
;

1240 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_NOTICE
;

1243 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_WARN
;

1246 
r
->
ªque°_body_ö_sögÀ_buf
 = 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
;

1248 i‡(
r
->
kì∑live
) {

1249 i‡(
˛cf
->
kì∑live_timeout
 == 0) {

1250 
r
->
kì∑live
 = 0;

1252 } i‡(
r
->
c⁄√˘i⁄
->
ªque°s
 >
˛cf
->
kì∑live_ªque°s
) {

1253 
r
->
kì∑live
 = 0;

1255 } i‡(
r
->
hódîs_ö
.
msõ6


1256 && 
r
->
mëhod
 =
NGX_HTTP_POST


1257 && (
˛cf
->
kì∑live_dißbÀ


1258 & 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
))

1264 
r
->
kì∑live
 = 0;

1266 } i‡(
r
->
hódîs_ö
.
ßÁri


1267 && (
˛cf
->
kì∑live_dißbÀ


1268 & 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
))

1275 
r
->
kì∑live
 = 0;

1279 i‡(!
˛cf
->
t˝_n›ush
) {

1281 
r
->
c⁄√˘i⁄
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1284 i‡(
r
->
limô_øã
 == 0) {

1285 
r
->
limô_øã
 = 
˛cf
->limit_rate;

1288 i‡(
˛cf
->
h™dÀr
) {

1289 
r
->
c⁄ã¡_h™dÀr
 = 
˛cf
->
h™dÀr
;

1291 
	}
}

1302 
ngx_öt_t


1303 
	$ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
)

1305 
ngx_öt_t
 
rc
;

1306 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
;

1307 #i‡(
NGX_PCRE
)

1308 
ngx_öt_t
 
n
;

1309 
ngx_uöt_t
 
n‹egex
;

1310 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, **
˛cÂ
;

1312 
n‹egex
 = 0;

1315 
p˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1317 
rc
 = 
	`ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
r
, 
p˛cf
->
°©ic_loˇti⁄s
);

1319 i‡(
rc
 =
NGX_AGAIN
) {

1321 #i‡(
NGX_PCRE
)

1322 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1324 
n‹egex
 = 
˛cf
->noregex;

1329 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1332 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_DONE
) {

1333  
rc
;

1338 #i‡(
NGX_PCRE
)

1340 i‡(
n‹egex
 =0 && 
p˛cf
->
ªgex_loˇti⁄s
) {

1342 
˛cÂ
 = 
p˛cf
->
ªgex_loˇti⁄s
; *clcfp; clcfp++) {

1344 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1345 "ã°Üoˇti⁄: ~ \"%V\"", &(*
˛cÂ
)->
«me
);

1347 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, (*
˛cÂ
)->
ªgex
, &r->
uri
);

1349 i‡(
n
 =
NGX_OK
) {

1350 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

1354 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1356  (
rc
 =
NGX_ERROR
Ë?Ñ¯: 
NGX_OK
;

1359 i‡(
n
 =
NGX_DECLINED
) {

1363  
NGX_ERROR
;

1368  
rc
;

1369 
	}
}

1379 
ngx_öt_t


1380 
	$ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1381 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
)

1383 
u_ch¨
 *
uri
;

1384 
size_t
 
Àn
, 
n
;

1385 
ngx_öt_t
 
rc
, 
rv
;

1387 
Àn
 = 
r
->
uri
.len;

1388 
uri
 = 
r
->uri.
d©a
;

1390 
rv
 = 
NGX_DECLINED
;

1394 i‡(
node
 =
NULL
) {

1395  
rv
;

1398 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1400 (
size_t
Ë
node
->
Àn
,Çode->
«me
);

1402 
n
 = (
Àn
 <(
size_t
Ë
node
->len) ?Üen :Çode->len;

1404 
rc
 = 
	`ngx_fûíame_cmp
(
uri
, 
node
->
«me
, 
n
);

1406 i‡(
rc
 != 0) {

1407 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1412 i‡(
Àn
 > (
size_t
Ë
node
->len) {

1414 i‡(
node
->
ö˛usive
) {

1416 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1417 
rv
 = 
NGX_AGAIN
;

1419 
node
 =Çode->
åì
;

1420 
uri
 +
n
;

1421 
Àn
 -
n
;

1428 
node
 =Çode->
right
;

1433 i‡(
Àn
 =(
size_t
Ë
node
->len) {

1435 i‡(
node
->
exa˘
) {

1436 
r
->
loc_c⁄f
 = 
node
->
exa˘
->loc_conf;

1437  
NGX_OK
;

1440 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1441  
NGX_AGAIN
;

1447 i‡(
Àn
 + 1 =(
size_t
Ë
node
->À¿&&Çode->
auto_ªdúe˘
) {

1449 
r
->
loc_c⁄f
 = (
node
->
exa˘
) ?Çode->exact->loc_conf:

1450 
node
->
ö˛usive
->
loc_c⁄f
;

1451 
rv
 = 
NGX_DONE
;

1454 
node
 =Çode->
À·
;

1456 
	}
}

1460 
	$ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
)

1462 
u_ch¨
 
c
, *
lowˇ£
;

1463 
size_t
 
Àn
;

1464 
ngx_uöt_t
 
i
, 
hash
;

1466 i‡(
ty≥s_hash
->
size
 == 0) {

1470 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

1471  
NULL
;

1474 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

1476 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 =
NULL
) {

1478 
lowˇ£
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1479 i‡(
lowˇ£
 =
NULL
) {

1480  
NULL
;

1483 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
lowˇ£
;

1485 
hash
 = 0;

1487 
i
 = 0; i < 
Àn
; i++) {

1488 
c
 = 
	`ngx_tﬁowî
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
[
i
]);

1489 
hash
 = 
	`ngx_hash
(hash, 
c
);

1490 
lowˇ£
[
i
] = 
c
;

1493 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
 = 
hash
;

1496  
	`ngx_hash_föd
(
ty≥s_hash
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
,

1497 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
, 
Àn
);

1498 
	}
}

1501 
ngx_öt_t


1502 
	$ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
)

1504 
u_ch¨
 
c
, *
exãn
;

1505 
ngx_°r_t
 *
ty≥
;

1506 
ngx_uöt_t
 
i
, 
hash
;

1507 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1509 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1510  
NGX_OK
;

1513 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1515 i‡(
r
->
exãn
.
Àn
) {

1517 
hash
 = 0;

1519 
i
 = 0; i < 
r
->
exãn
.
Àn
; i++) {

1520 
c
 = 
r
->
exãn
.
d©a
[
i
];

1522 i‡(
c
 >= 'A' && c <= 'Z') {

1524 
exãn
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->exãn.
Àn
);

1525 i‡(
exãn
 =
NULL
) {

1526  
NGX_ERROR
;

1529 
hash
 = 
	`ngx_hash_°æow
(
exãn
, 
r
->exãn.
d©a
,Ñ->exãn.
Àn
);

1531 
r
->
exãn
.
d©a
 =Éxten;

1536 
hash
 = 
	`ngx_hash
(hash, 
c
);

1539 
ty≥
 = 
	`ngx_hash_föd
(&
˛cf
->
ty≥s_hash
, 
hash
,

1540 
r
->
exãn
.
d©a
,Ñ->exãn.
Àn
);

1542 i‡(
ty≥
) {

1543 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
ty≥
->
Àn
;

1544 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
ty≥
;

1546  
NGX_OK
;

1550 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˛cf
->
deÁu…_ty≥
.
Àn
;

1551 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
˛cf
->
deÁu…_ty≥
;

1553  
NGX_OK
;

1554 
	}
}

1558 
	$ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
)

1560 
ngx_öt_t
 
i
;

1562 
	`ngx_°r_nuŒ
(&
r
->
exãn
);

1564 
i
 = 
r
->
uri
.
Àn
 - 1; i > 1; i--) {

1565 i‡(
r
->
uri
.
d©a
[
i
] == '.' &&Ñ->uri.data[i - 1] != '/') {

1567 
r
->
exãn
.
Àn
 =Ñ->
uri
.À¿- 
i
 - 1;

1568 
r
->
exãn
.
d©a
 = &r->
uri
.d©a[
i
 + 1];

1572 } i‡(
r
->
uri
.
d©a
[
i
] == '/') {

1578 
	}
}

1581 
ngx_öt_t


1582 
	$ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
)

1584 
ngx_èbÀ_ñt_t
 *
ëag
;

1585 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1587 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1589 i‡(!
˛cf
->
ëag
) {

1590  
NGX_OK
;

1593 
ëag
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1594 i‡(
ëag
 =
NULL
) {

1595  
NGX_ERROR
;

1598 
ëag
->
hash
 = 1;

1599 
	`ngx_°r_£t
(&
ëag
->
key
, "ETag");

1601 
ëag
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
 + 
NGX_TIME_T_LEN
 + 3);

1602 i‡(
ëag
->
vÆue
.
d©a
 =
NULL
) {

1603 
ëag
->
hash
 = 0;

1604  
NGX_ERROR
;

1607 
ëag
->
vÆue
.
Àn
 = 
	`ngx_•rötf
”èg->vÆue.
d©a
, "\"%xT-%xO\"",

1608 
r
->
hódîs_out
.
œ°_modifõd_time
,

1609 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

1610 - 
ëag
->
vÆue
.
d©a
;

1612 
r
->
hódîs_out
.
ëag
 =Étag;

1614  
NGX_OK
;

1615 
	}
}

1619 
	$ngx_hâp_wók_ëag
(
ngx_hâp_ªque°_t
 *
r
)

1621 
size_t
 
Àn
;

1622 
u_ch¨
 *
p
;

1623 
ngx_èbÀ_ñt_t
 *
ëag
;

1625 
ëag
 = 
r
->
hódîs_out
.etag;

1627 i‡(
ëag
 =
NULL
) {

1631 i‡(
ëag
->
vÆue
.
Àn
 > 2

1632 && 
ëag
->
vÆue
.
d©a
[0] == 'W'

1633 && 
ëag
->
vÆue
.
d©a
[1] == '/')

1638 i‡(
ëag
->
vÆue
.
Àn
 < 1 ||Éèg->vÆue.
d©a
[0] != '"') {

1639 
r
->
hódîs_out
.
ëag
->
hash
 = 0;

1640 
r
->
hódîs_out
.
ëag
 = 
NULL
;

1644 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ëag
->
vÆue
.
Àn
 + 2);

1645 i‡(
p
 =
NULL
) {

1646 
r
->
hódîs_out
.
ëag
->
hash
 = 0;

1647 
r
->
hódîs_out
.
ëag
 = 
NULL
;

1651 
Àn
 = 
	`ngx_•rötf
(
p
, "W/%V", &
ëag
->
vÆue
) -Ö;

1653 
ëag
->
vÆue
.
d©a
 = 
p
;

1654 
ëag
->
vÆue
.
Àn
 =Üen;

1655 
	}
}

1658 
ngx_öt_t


1659 
	$ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

1660 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
)

1662 
ngx_öt_t
 
rc
;

1663 
ngx_°r_t
 
vÆ
;

1664 
ngx_buf_t
 *
b
;

1665 
ngx_chaö_t
 
out
;

1667 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

1668  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1671 
r
->
hódîs_out
.
°©us
 = status;

1673 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1674  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1677 i‡(
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


1678 || 
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY


1679 || 
°©us
 =
NGX_HTTP_SEE_OTHER


1680 || 
°©us
 =
NGX_HTTP_TEMPORARY_REDIRECT


1681 || 
°©us
 =
NGX_HTTP_PERMANENT_REDIRECT
)

1683 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1685 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1686 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1687  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1690 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1691 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1692 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
vÆ
;

1694  
°©us
;

1697 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
vÆ
.
Àn
;

1699 i‡(
˘
) {

1700 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

1701 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

1704 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

1705  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1709 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 || (∏!r->
maö
 && 
vÆ
.
Àn
 == 0)) {

1710  
	`ngx_hâp_£nd_hódî
(
r
);

1713 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1714 i‡(
b
 =
NULL
) {

1715  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1718 
b
->
pos
 = 
vÆ
.
d©a
;

1719 
b
->
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

1720 
b
->
mem‹y
 = 
vÆ
.
Àn
 ? 1 : 0;

1721 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

1722 
b
->
œ°_ö_chaö
 = 1;

1724 
out
.
buf
 = 
b
;

1725 
out
.
√xt
 = 
NULL
;

1727 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1729 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1730  
rc
;

1733  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1734 
	}
}

1737 
ngx_öt_t


1738 
	$ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1740 i‡(
r
->
po°_a˘i⁄
) {

1741  
NGX_OK
;

1744 i‡(
r
->
hódî_£¡
) {

1745 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1747  
NGX_ERROR
;

1750 i‡(
r
->
îr_°©us
) {

1751 
r
->
hódîs_out
.
°©us
 =Ñ->
îr_°©us
;

1752 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

1755  
	`ngx_hâp_t›_hódî_fûãr
(
r
);

1756 
	}
}

1759 
ngx_öt_t


1760 
	$ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1762 
ngx_öt_t
 
rc
;

1763 
ngx_c⁄√˘i⁄_t
 *
c
;

1765 
c
 = 
r
->
c⁄√˘i⁄
;

1767 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1768 "hâ∞ouçuàfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1770 
rc
 = 
	`ngx_hâp_t›_body_fûãr
(
r
, 
ö
);

1772 i‡(
rc
 =
NGX_ERROR
) {

1774 
c
->
îr‹
 = 1;

1777  
rc
;

1778 
	}
}

1781 
u_ch¨
 *

1782 
	$ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

1783 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
)

1785 
u_ch¨
 *
œ°
;

1786 
size_t
 
Æüs
;

1787 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1789 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1791 
Æüs
 = 
˛cf
->alias;

1793 i‡(
Æüs
 && !
r
->
vÆid_loˇti⁄
) {

1794 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1796 "whîêURI wa†ªwrôãn", &
˛cf
->
«me
);

1797  
NULL
;

1800 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1802 *
roŸ_Àngth
 = 
˛cf
->
roŸ
.
Àn
;

1804 
∑th
->
Àn
 = 
˛cf
->
roŸ
.À¿+ 
ª£rved
 + 
r
->
uri
.À¿- 
Æüs
 + 1;

1806 
∑th
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ö©h->
Àn
);

1807 i‡(
∑th
->
d©a
 =
NULL
) {

1808  
NULL
;

1811 
œ°
 = 
	`ngx_c›y
(
∑th
->
d©a
, 
˛cf
->
roŸ
.d©a, clcf->roŸ.
Àn
);

1815 i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

1816 
ª£rved
 +
r
->
add_uri_to_Æüs
 ?Ñ->
uri
.
Àn
 + 1 : 1;

1819 
ª£rved
 +
r
->
uri
.
Àn
 - 
Æüs
 + 1;

1822 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, 
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 
ª£rved
,

1823 
˛cf
->
roŸ_vÆues
->
ñts
)

1824 =
NULL
)

1826  
NULL
;

1829 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, 
∑th
)

1830 !
NGX_OK
)

1832  
NULL
;

1835 *
roŸ_Àngth
 = 
∑th
->
Àn
 - 
ª£rved
;

1836 
œ°
 = 
∑th
->
d©a
 + *
roŸ_Àngth
;

1838 i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

1839 i‡(!
r
->
add_uri_to_Æüs
) {

1840 *
œ°
 = '\0';

1841  
œ°
;

1844 
Æüs
 = 0;

1848 
œ°
 = 
	`ngx_˝y°∫
÷a°, 
r
->
uri
.
d©a
 + 
Æüs
,Ñ->uri.
Àn
 -álias + 1);

1850  
œ°
;

1851 
	}
}

1854 
ngx_öt_t


1855 
	$ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
)

1857 
ngx_°r_t
 
auth
, 
ícoded
;

1858 
ngx_uöt_t
 
Àn
;

1860 i‡(
r
->
hódîs_ö
.
u£r
.
Àn
 =0 &&Ñ->hódîs_ö.u£r.
d©a
 !
NULL
) {

1861  
NGX_DECLINED
;

1864 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 =
NULL
) {

1865 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1866  
NGX_DECLINED
;

1869 
ícoded
 = 
r
->
hódîs_ö
.
auth‹iz©i⁄
->
vÆue
;

1871 i‡(
ícoded
.
Àn
 < ("Basic ") - 1

1872 || 
	`ngx_°∫ˇ£cmp
(
ícoded
.
d©a
, (
u_ch¨
 *) "Basic ",

1876 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1877  
NGX_DECLINED
;

1880 
ícoded
.
Àn
 -= ("Basic ") - 1;

1881 
ícoded
.
d©a
 += ("Basic ") - 1;

1883 
ícoded
.
Àn
 &&Éncoded.
d©a
[0] == ' ') {

1884 
ícoded
.
Àn
--;

1885 
ícoded
.
d©a
++;

1888 i‡(
ícoded
.
Àn
 == 0) {

1889 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1890  
NGX_DECLINED
;

1893 
auth
.
Àn
 = 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len);

1894 
auth
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,áuth.
Àn
 + 1);

1895 i‡(
auth
.
d©a
 =
NULL
) {

1896  
NGX_ERROR
;

1899 i‡(
	`ngx_decode_ba£64
(&
auth
, &
ícoded
Ë!
NGX_OK
) {

1900 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1901  
NGX_DECLINED
;

1904 
auth
.
d©a
[auth.
Àn
] = '\0';

1906 
Àn
 = 0;Üí < 
auth
.len;Üen++) {

1907 i‡(
auth
.
d©a
[
Àn
] == ':') {

1912 i‡(
Àn
 =0 ||Üí =
auth
.len) {

1913 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

1914  
NGX_DECLINED
;

1917 
r
->
hódîs_ö
.
u£r
.
Àn
 =Üen;

1918 
r
->
hódîs_ö
.
u£r
.
d©a
 = 
auth
.data;

1919 
r
->
hódîs_ö
.
∑sswd
.
Àn
 = 
auth
.len -Üen - 1;

1920 
r
->
hódîs_ö
.
∑sswd
.
d©a
 = &
auth
.d©a[
Àn
 + 1];

1922  
NGX_OK
;

1923 
	}
}

1926 #i‡(
NGX_HTTP_GZIP
)

1928 
ngx_öt_t


1929 
	$ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
)

1931 
time_t
 
d©e
, 
expúes
;

1932 
ngx_uöt_t
 
p
;

1933 
ngx_¨øy_t
 *
cc
;

1934 
ngx_èbÀ_ñt_t
 *
e
, *
d
, *
´
;

1935 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1937 
r
->
gzù_ã°ed
 = 1;

1939 i‡(
r
 !r->
maö
) {

1940  
NGX_DECLINED
;

1943 
´
 = 
r
->
hódîs_ö
.
ac˚±_ícodög
;

1944 i‡(
´
 =
NULL
) {

1945  
NGX_DECLINED
;

1948 i‡(
´
->
vÆue
.
Àn
 < ("gzip") - 1) {

1949  
NGX_DECLINED
;

1961 i‡(
	`ngx_memcmp
(
´
->
vÆue
.
d©a
, "gzip,", 5) != 0

1962 && 
	`ngx_hâp_gzù_ac˚±_ícodög
(&
´
->
vÆue
Ë!
NGX_OK
)

1964  
NGX_DECLINED
;

1967 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1969 i‡(
r
->
hódîs_ö
.
msõ6
 && 
˛cf
->
gzù_dißbÀ_msõ6
) {

1970  
NGX_DECLINED
;

1973 i‡(
r
->
hâp_vîsi⁄
 < 
˛cf
->
gzù_hâp_vîsi⁄
) {

1974  
NGX_DECLINED
;

1977 i‡(
r
->
hódîs_ö
.
vü
 =
NULL
) {

1978 
ok
;

1981 
p
 = 
˛cf
->
gzù_¥oxõd
;

1983 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_OFF
) {

1984  
NGX_DECLINED
;

1987 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_ANY
) {

1988 
ok
;

1991 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 && (
p
 & 
NGX_HTTP_GZIP_PROXIED_AUTH
)) {

1992 
ok
;

1995 
e
 = 
r
->
hódîs_out
.
expúes
;

1997 i‡(
e
) {

1999 i‡(!(
p
 & 
NGX_HTTP_GZIP_PROXIED_EXPIRED
)) {

2000  
NGX_DECLINED
;

2003 
expúes
 = 
	`ngx_∑r£_hâp_time
(
e
->
vÆue
.
d©a
,É->vÆue.
Àn
);

2004 i‡(
expúes
 =
NGX_ERROR
) {

2005  
NGX_DECLINED
;

2008 
d
 = 
r
->
hódîs_out
.
d©e
;

2010 i‡(
d
) {

2011 
d©e
 = 
	`ngx_∑r£_hâp_time
(
d
->
vÆue
.
d©a
, d->vÆue.
Àn
);

2012 i‡(
d©e
 =
NGX_ERROR
) {

2013  
NGX_DECLINED
;

2017 
d©e
 = 
	`ngx_time
();

2020 i‡(
expúes
 < 
d©e
) {

2021 
ok
;

2024  
NGX_DECLINED
;

2027 
cc
 = &
r
->
hódîs_out
.
ˇche_c⁄åﬁ
;

2029 i‡(
cc
->
ñts
) {

2031 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
)

2032 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_ˇche
,

2033 
NULL
)

2036 
ok
;

2039 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_STORE
)

2040 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_°‹e
,

2041 
NULL
)

2044 
ok
;

2047 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_PRIVATE
)

2048 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_¥iv©e
,

2049 
NULL
)

2052 
ok
;

2055  
NGX_DECLINED
;

2058 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_LM
Ë&& 
r
->
hódîs_out
.
œ°_modifõd
) {

2059  
NGX_DECLINED
;

2062 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
Ë&& 
r
->
hódîs_out
.
ëag
) {

2063  
NGX_DECLINED
;

2066 
ok
:

2068 #i‡(
NGX_PCRE
)

2070 i‡(
˛cf
->
gzù_dißbÀ
 && 
r
->
hódîs_ö
.
u£r_agít
) {

2072 i‡(
	`ngx_ªgex_exec_¨øy
(
˛cf
->
gzù_dißbÀ
,

2073 &
r
->
hódîs_ö
.
u£r_agít
->
vÆue
,

2074 
r
->
c⁄√˘i⁄
->
log
)

2075 !
NGX_DECLINED
)

2077  
NGX_DECLINED
;

2083 
r
->
gzù_ok
 = 1;

2085  
NGX_OK
;

2086 
	}
}

2096 
ngx_öt_t


2097 
	$ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
)

2099 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

2101 
°¨t
 = 
´
->
d©a
;

2102 
œ°
 = 
°¨t
 + 
´
->
Àn
;

2105 
p
 = 
	`ngx_°rˇ£°∫
(
°¨t
, "gzip", 4 - 1);

2106 i‡(
p
 =
NULL
) {

2107  
NGX_DECLINED
;

2110 i‡(
p
 =
°¨t
 || (*(p - 1) == ',' || *(p - 1) == ' ')) {

2114 
°¨t
 = 
p
 + 4;

2117 
p
 += 4;

2119 
p
 < 
œ°
) {

2120 *
p
++) {

2122  
NGX_OK
;

2124 
qu™tôy
;

2128  
NGX_DECLINED
;

2132  
NGX_OK
;

2134 
qu™tôy
:

2136 
p
 < 
œ°
) {

2137 *
p
++) {

2140 
equÆ
;

2144  
NGX_DECLINED
;

2148  
NGX_OK
;

2150 
equÆ
:

2152 i‡(
p
 + 2 > 
œ°
 || *p++ != '=') {

2153  
NGX_DECLINED
;

2156 i‡(
	`ngx_hâp_gzù_qu™tôy
(
p
, 
œ°
) == 0) {

2157  
NGX_DECLINED
;

2160  
NGX_OK
;

2161 
	}
}

2164 
ngx_uöt_t


2165 
	$ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
)

2167 
u_ch¨
 
c
;

2168 
ngx_uöt_t
 
n
, 
q
;

2170 
c
 = *
p
++;

2172 i‡(
c
 != '0' && c != '1') {

2176 
q
 = (
c
 - '0') * 100;

2178 i‡(
p
 =
œ°
) {

2179  
q
;

2182 
c
 = *
p
++;

2184 i‡(
c
 == ',' || c == ' ') {

2185  
q
;

2188 i‡(
c
 != '.') {

2192 
n
 = 0;

2194 
p
 < 
œ°
) {

2195 
c
 = *
p
++;

2197 i‡(
c
 == ',' || c == ' ') {

2201 i‡(
c
 >= '0' && c <= '9') {

2202 
q
 +
c
 - '0';

2203 
n
++;

2210 i‡(
q
 > 100 || 
n
 > 3) {

2214  
q
;

2215 
	}
}

2220 
ngx_öt_t


2221 
	$ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

2222 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
p§
,

2223 
ngx_hâp_po°_subªque°_t
 *
ps
, 
ngx_uöt_t
 
Êags
)

2225 
ngx_time_t
 *
ç
;

2226 
ngx_c⁄√˘i⁄_t
 *
c
;

2227 
ngx_hâp_ªque°_t
 *
§
;

2228 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2229 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, *
p
;

2231 i‡(
r
->
subªque°s
 == 0) {

2232 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2233 "subªque°†cy˛êwhûê¥o˚ssög \"%V\"", 
uri
);

2234  
NGX_ERROR
;

2240 i‡(
r
->
maö
->
cou¡
 >= 65535 - 1000) {

2241 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2243 "whûê¥o˚ssög \"%V\"", 
uri
);

2244  
NGX_ERROR
;

2247 i‡(
r
->
subªque°_ö_mem‹y
) {

2248 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2249 "√°ed in-mem‹y subªque° \"%V\"", 
uri
);

2250  
NGX_ERROR
;

2253 
§
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_t
));

2254 i‡(
§
 =
NULL
) {

2255  
NGX_ERROR
;

2258 
§
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

2260 
c
 = 
r
->
c⁄√˘i⁄
;

2261 
§
->
c⁄√˘i⁄
 = 
c
;

2263 
§
->
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2264 i‡(
§
->
˘x
 =
NULL
) {

2265  
NGX_ERROR
;

2268 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
hódîs
, 
r
->
poﬁ
, 20,

2269 (
ngx_èbÀ_ñt_t
))

2270 !
NGX_OK
)

2272  
NGX_ERROR
;

2275 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
åaûîs
, 
r
->
poﬁ
, 4,

2276 (
ngx_èbÀ_ñt_t
))

2277 !
NGX_OK
)

2279  
NGX_ERROR
;

2282 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2283 
§
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

2284 
§
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2285 
§
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2287 
§
->
poﬁ
 = 
r
->pool;

2289 
§
->
hódîs_ö
 = 
r
->headers_in;

2291 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
§
);

2292 
	`ngx_hâp_˛ór_ac˚±_ønges
(
§
);

2293 
	`ngx_hâp_˛ór_œ°_modifõd
(
§
);

2295 
§
->
ªque°_body
 = 
r
->request_body;

2297 #i‡(
NGX_HTTP_V2
)

2298 
§
->
°ªam
 = 
r
->stream;

2301 
§
->
mëhod
 = 
NGX_HTTP_GET
;

2302 
§
->
hâp_vîsi⁄
 = 
r
->http_version;

2304 
§
->
ªque°_löe
 = 
r
->request_line;

2305 
§
->
uri
 = *uri;

2307 i‡(
¨gs
) {

2308 
§
->
¨gs
 = *args;

2311 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2312 "hâ∞subªque° \"%V?%V\"", 
uri
, &
§
->
¨gs
);

2314 
§
->
subªque°_ö_mem‹y
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_IN_MEMORY
) != 0;

2315 
§
->
waôed
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_WAITED
) != 0;

2316 
§
->
background
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_BACKGROUND
) != 0;

2318 
§
->
u≈¨£d_uri
 = 
r
->unparsed_uri;

2319 
§
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2320 
§
->
hâp_¥Ÿocﬁ
 = 
r
->http_protocol;

2321 
§
->
schema
 = 
r
->schema;

2323 
	`ngx_hâp_£t_exãn
(
§
);

2325 
§
->
maö
 = 
r
->main;

2326 
§
->
∑ª¡
 = 
r
;

2327 
§
->
po°_subªque°
 = 
ps
;

2328 
§
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2329 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_h™dÀr
;

2331 
§
->
v¨übÀs
 = 
r
->variables;

2333 
§
->
log_h™dÀr
 = 
r
->log_handler;

2335 i‡(
§
->
subªque°_ö_mem‹y
) {

2336 
§
->
fûãr_√ed_ö_mem‹y
 = 1;

2339 i‡(!
§
->
background
) {

2340 i‡(
c
->
d©a
 =
r
 &&Ñ->
po°p⁄ed
 =
NULL
) {

2341 
c
->
d©a
 = 
§
;

2344 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

2345 i‡(
¥
 =
NULL
) {

2346  
NGX_ERROR
;

2349 
¥
->
ªque°
 = 
§
;

2350 
¥
->
out
 = 
NULL
;

2351 
¥
->
√xt
 = 
NULL
;

2353 i‡(
r
->
po°p⁄ed
) {

2354 
p
 = 
r
->
po°p⁄ed
;Ö->
√xt
;Ö =Ö->next) { }

2355 
p
->
√xt
 = 
¥
;

2358 
r
->
po°p⁄ed
 = 
¥
;

2362 
§
->
öã∫Æ
 = 1;

2364 
§
->
disˇrd_body
 = 
r
->discard_body;

2365 
§
->
ex≥˘_ã°ed
 = 1;

2366 
§
->
maö_fûãr_√ed_ö_mem‹y
 = 
r
->main_filter_need_in_memory;

2368 
§
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

2369 
§
->
subªque°s
 = 
r
->subrequests - 1;

2371 
ç
 = 
	`ngx_timeofday
();

2372 
§
->
°¨t_£c
 = 
ç
->
£c
;

2373 
§
->
°¨t_m£c
 = 
ç
->
m£c
;

2375 
r
->
maö
->
cou¡
++;

2377 *
p§
 = 
§
;

2379 i‡(
Êags
 & 
NGX_HTTP_SUBREQUEST_CLONE
) {

2380 
§
->
mëhod
 = 
r
->method;

2381 
§
->
mëhod_«me
 = 
r
->method_name;

2382 
§
->
loc_c⁄f
 = 
r
->loc_conf;

2383 
§
->
vÆid_loˇti⁄
 = 
r
->valid_location;

2384 
§
->
vÆid_u≈¨£d_uri
 = 
r
->valid_unparsed_uri;

2385 
§
->
c⁄ã¡_h™dÀr
 = 
r
->content_handler;

2386 
§
->
pha£_h™dÀr
 = 
r
->phase_handler;

2387 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2389 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
§
);

2392  
	`ngx_hâp_po°_ªque°
(
§
, 
NULL
);

2393 
	}
}

2396 
ngx_öt_t


2397 
	$ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

2398 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2400 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2402 
r
->
uri_ch™ges
--;

2404 i‡(
r
->
uri_ch™ges
 == 0) {

2405 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2407 "whûêöã∫ÆlyÑedúe˘ögÅÿ\"%V\"", 
uri
);

2409 
r
->
maö
->
cou¡
++;

2410 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2411  
NGX_DONE
;

2414 
r
->
uri
 = *uri;

2416 i‡(
¨gs
) {

2417 
r
->
¨gs
 = *args;

2420 
	`ngx_°r_nuŒ
(&
r
->
¨gs
);

2423 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2424 "öã∫ÆÑedúe˘: \"%V?%V\"", 
uri
, &
r
->
¨gs
);

2426 
	`ngx_hâp_£t_exãn
(
r
);

2429 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2431 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2432 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2434 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2436 #i‡(
NGX_HTTP_CACHE
)

2437 
r
->
ˇche
 = 
NULL
;

2440 
r
->
öã∫Æ
 = 1;

2441 
r
->
vÆid_u≈¨£d_uri
 = 0;

2442 
r
->
add_uri_to_Æüs
 = 0;

2443 
r
->
maö
->
cou¡
++;

2445 
	`ngx_hâp_h™dÀr
(
r
);

2447  
NGX_DONE
;

2448 
	}
}

2451 
ngx_öt_t


2452 
	$ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

2454 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2455 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

2456 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2458 
r
->
maö
->
cou¡
++;

2459 
r
->
uri_ch™ges
--;

2461 i‡(
r
->
uri_ch™ges
 == 0) {

2462 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2464 "whûêªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2466 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2467  
NGX_DONE
;

2470 i‡(
r
->
uri
.
Àn
 == 0) {

2471 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2472 "em±y URI i¿ªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2474 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2475  
NGX_DONE
;

2478 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2480 i‡(
cscf
->
«med_loˇti⁄s
) {

2482 
˛cÂ
 = 
cscf
->
«med_loˇti⁄s
; *clcfp; clcfp++) {

2484 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2485 "ã°Üoˇti⁄: \"%V\"", &(*
˛cÂ
)->
«me
);

2487 i‡(
«me
->
Àn
 !(*
˛cÂ
)->name.len

2488 || 
	`ngx_°∫cmp
(
«me
->
d©a
, (*
˛cÂ
)->«me.d©a,Çame->
Àn
) != 0)

2493 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2495 
«me
, &
r
->
uri
, &r->
¨gs
);

2497 
r
->
öã∫Æ
 = 1;

2498 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2499 
r
->
uri_ch™ged
 = 0;

2500 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

2503 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2505 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2507 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2509 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

2511 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2512 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2514  
NGX_DONE
;

2518 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2519 "couldÇŸ födÇamedÜoˇti⁄ \"%V\"", 
«me
);

2521 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2523  
NGX_DONE
;

2524 
	}
}

2527 
ngx_hâp_˛ónup_t
 *

2528 
	$ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
)

2530 
ngx_hâp_˛ónup_t
 *
˛n
;

2532 
r
 =Ñ->
maö
;

2534 
˛n
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_˛ónup_t
));

2535 i‡(
˛n
 =
NULL
) {

2536  
NULL
;

2539 i‡(
size
) {

2540 
˛n
->
d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
size
);

2541 i‡(
˛n
->
d©a
 =
NULL
) {

2542  
NULL
;

2546 
˛n
->
d©a
 = 
NULL
;

2549 
˛n
->
h™dÀr
 = 
NULL
;

2550 
˛n
->
√xt
 = 
r
->
˛ónup
;

2552 
r
->
˛ónup
 = 
˛n
;

2554 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2555 "hâ∞˛ónu∞add: %p", 
˛n
);

2557  
˛n
;

2558 
	}
}

2561 
ngx_öt_t


2562 
	$ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

2563 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
)

2565 #i‡(
NGX_HAVE_OPENAT
)

2566 
u_ch¨
 *
p
;

2567 
ngx_°r_t
 
‰om
;

2569 
of
->
dißbÀ_symlöks
 = 
˛cf
->disable_symlinks;

2571 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NULL
) {

2572  
NGX_OK
;

2575 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
dißbÀ_symlöks_‰om
, &
‰om
)

2576 !
NGX_OK
)

2578  
NGX_ERROR
;

2581 i‡(
‰om
.
Àn
 == 0

2582 || 
‰om
.
Àn
 > 
∑th
->len

2583 || 
	`ngx_memcmp
(
∑th
->
d©a
, 
‰om
.d©a, from.
Àn
) != 0)

2585  
NGX_OK
;

2588 i‡(
‰om
.
Àn
 =
∑th
->len) {

2589 
of
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

2590  
NGX_OK
;

2593 
p
 = 
∑th
->
d©a
 + 
‰om
.
Àn
;

2595 i‡(*
p
 == '/') {

2596 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
;

2597  
NGX_OK
;

2600 
p
--;

2602 i‡(*
p
 == '/') {

2603 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
 - 1;

2607  
NGX_OK
;

2608 
	}
}

2611 
ngx_öt_t


2612 
	$ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2613 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

2614 
ªcursive
)

2616 
ngx_öt_t
 
rc
;

2617 
ngx_uöt_t
 
i
, 
found
;

2618 
ngx_èbÀ_ñt_t
 **
h
;

2620 i‡(
hódîs
 =
NULL
) {

2621  
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
vÆue
->
d©a
,

2622 
vÆue
->
Àn
, 
¥oxõs
,

2623 
ªcursive
);

2626 
i
 = 
hódîs
->
√…s
;

2627 
h
 = 
hódîs
->
ñts
;

2629 
rc
 = 
NGX_DECLINED
;

2631 
found
 = 0;

2633 
i
-- > 0) {

2634 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
h
[
i
]->
vÆue
.
d©a
,

2635 
h
[
i
]->
vÆue
.
Àn
, 
¥oxõs
,

2636 
ªcursive
);

2638 i‡(!
ªcursive
) {

2642 i‡(
rc
 =
NGX_DECLINED
 && 
found
) {

2643 
rc
 = 
NGX_DONE
;

2647 i‡(
rc
 !
NGX_OK
) {

2651 
found
 = 1;

2654  
rc
;

2655 
	}
}

2658 
ngx_öt_t


2659 
	$ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2660 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
, 
ªcursive
)

2662 
u_ch¨
 *
p
;

2663 
ngx_öt_t
 
rc
;

2664 
ngx_addr_t
 
∑ddr
;

2666 i‡(
	`ngx_cidr_m©ch
(
addr
->
sockaddr
, 
¥oxõs
Ë!
NGX_OK
) {

2667  
NGX_DECLINED
;

2670 
p
 = 
xff
 + 
xfÊí
 - 1;Ö > xff;Ö--, xfflen--) {

2671 i‡(*
p
 != ' ' && *p != ',') {

2676  ; 
p
 > 
xff
;Ö--) {

2677 i‡(*
p
 == ' ' || *p == ',') {

2678 
p
++;

2683 i‡(
	`ngx_∑r£_addr_p‹t
(
r
->
poﬁ
, &
∑ddr
, 
p
, 
xfÊí
 - (∞- 
xff
)Ë!
NGX_OK
) {

2684  
NGX_DECLINED
;

2687 *
addr
 = 
∑ddr
;

2689 i‡(
ªcursive
 && 
p
 > 
xff
) {

2690 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
xff
, 
p
 - 1 - xff,

2691 
¥oxõs
, 1);

2693 i‡(
rc
 =
NGX_DECLINED
) {

2694  
NGX_DONE
;

2698  
rc
;

2701  
NGX_OK
;

2702 
	}
}

2706 
	$ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2708 *
rv
;

2709 *
mc⁄f
;

2710 
ngx_uöt_t
 
i
;

2711 
ngx_c⁄f_t
 
pcf
;

2712 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2713 
sockaddr_ö
 *
sö
;

2714 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

2715 
ngx_hâp_li°í_›t_t
 
ls›t
;

2716 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

2717 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2719 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2720 i‡(
˘x
 =
NULL
) {

2721  
NGX_CONF_ERROR
;

2724 
hâp_˘x
 = 
cf
->
˘x
;

2725 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

2729 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2730 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

2731  
NGX_CONF_ERROR
;

2736 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2737 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2738  
NGX_CONF_ERROR
;

2741 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

2742 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2746 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x
;

2748 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

2749 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

2750 i‡(
mc⁄f
 =
NULL
) {

2751  
NGX_CONF_ERROR
;

2754 
˘x
->
§v_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2757 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2758 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2759 i‡(
mc⁄f
 =
NULL
) {

2760  
NGX_CONF_ERROR
;

2763 
˘x
->
loc_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2770 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2771 
cscf
->
˘x
 = ctx;

2774 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2776 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

2777 i‡(
cscÂ
 =
NULL
) {

2778  
NGX_CONF_ERROR
;

2781 *
cscÂ
 = 
cscf
;

2786 
pcf
 = *
cf
;

2787 
cf
->
˘x
 = ctx;

2788 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SRV_CONF
;

2790 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

2792 *
cf
 = 
pcf
;

2794 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

2795 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

2797 
sö
 = &
ls›t
.
sockaddr
.
sockaddr_ö
;

2799 
sö
->
sö_Ámûy
 = 
AF_INET
;

2800 #i‡(
NGX_WIN32
)

2801 
sö
->
sö_p‹t
 = 
	`ht⁄s
(80);

2803 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
	`gëuid
() == 0) ? 80 : 8000);

2805 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

2807 
ls›t
.
sockÀn
 = (
sockaddr_ö
);

2809 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

2810 
ls›t
.
rcvbuf
 = -1;

2811 
ls›t
.
¢dbuf
 = -1;

2812 #i‡(
NGX_HAVE_SETFIB
)

2813 
ls›t
.
£tfib
 = -1;

2815 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

2816 
ls›t
.
Á°›í
 = -1;

2818 
ls›t
.
wûdˇrd
 = 1;

2820 (Ë
	`ngx_sock_¡›
(&
ls›t
.
sockaddr
.sockaddr,Üs›t.
sockÀn
,

2821 
ls›t
.
addr
, 
NGX_SOCKADDR_STRLEN
, 1);

2823 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë!
NGX_OK
) {

2824  
NGX_CONF_ERROR
;

2828  
rv
;

2829 
	}
}

2833 
	$ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2835 *
rv
;

2836 
u_ch¨
 *
mod
;

2837 
size_t
 
Àn
;

2838 
ngx_°r_t
 *
vÆue
, *
«me
;

2839 
ngx_uöt_t
 
i
;

2840 
ngx_c⁄f_t
 
ßve
;

2841 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2842 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

2843 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

2845 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2846 i‡(
˘x
 =
NULL
) {

2847  
NGX_CONF_ERROR
;

2850 
p˘x
 = 
cf
->
˘x
;

2851 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

2852 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

2854 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2855 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2856  
NGX_CONF_ERROR
;

2859 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

2860 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2864 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x
;

2866 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2867 
˘x
->
loc_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] =

2868 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2869 i‡(
˘x
->
loc_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

2870  
NGX_CONF_ERROR
;

2875 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2876 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

2878 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2880 i‡(
cf
->
¨gs
->
√…s
 == 3) {

2882 
Àn
 = 
vÆue
[1].len;

2883 
mod
 = 
vÆue
[1].
d©a
;

2884 
«me
 = &
vÆue
[2];

2886 i‡(
Àn
 =1 && 
mod
[0] == '=') {

2888 
˛cf
->
«me
 = *name;

2889 
˛cf
->
exa˘_m©ch
 = 1;

2891 } i‡(
Àn
 =2 && 
mod
[0] == '^' && mod[1] == '~') {

2893 
˛cf
->
«me
 = *name;

2894 
˛cf
->
n‹egex
 = 1;

2896 } i‡(
Àn
 =1 && 
mod
[0] == '~') {

2898 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

2899  
NGX_CONF_ERROR
;

2902 } i‡(
Àn
 =2 && 
mod
[0] == '~' && mod[1] == '*') {

2904 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

2905  
NGX_CONF_ERROR
;

2909 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2910 "övÆidÜoˇti⁄ modifõ∏\"%V\"", &
vÆue
[1]);

2911  
NGX_CONF_ERROR
;

2916 
«me
 = &
vÆue
[1];

2918 i‡(
«me
->
d©a
[0] == '=') {

2920 
˛cf
->
«me
.
Àn
 =Çame->len - 1;

2921 
˛cf
->
«me
.
d©a
 =Çame->data + 1;

2922 
˛cf
->
exa˘_m©ch
 = 1;

2924 } i‡(
«me
->
d©a
[0] == '^' &&Çame->data[1] == '~') {

2926 
˛cf
->
«me
.
Àn
 =Çame->len - 2;

2927 
˛cf
->
«me
.
d©a
 =Çame->data + 2;

2928 
˛cf
->
n‹egex
 = 1;

2930 } i‡(
«me
->
d©a
[0] == '~') {

2932 
«me
->
Àn
--;

2933 
«me
->
d©a
++;

2935 i‡(
«me
->
d©a
[0] == '*') {

2937 
«me
->
Àn
--;

2938 
«me
->
d©a
++;

2940 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

2941  
NGX_CONF_ERROR
;

2945 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

2946  
NGX_CONF_ERROR
;

2952 
˛cf
->
«me
 = *name;

2954 i‡(
«me
->
d©a
[0] == '@') {

2955 
˛cf
->
«med
 = 1;

2960 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2962 i‡(
cf
->
cmd_ty≥
 =
NGX_HTTP_LOC_CONF
) {

2967 
˛cf
->
¥ev_loˇti⁄
 = 
p˛cf
;

2970 i‡(
p˛cf
->
exa˘_m©ch
) {

2971 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2974 &
˛cf
->
«me
, &
p˛cf
->name);

2975  
NGX_CONF_ERROR
;

2978 i‡(
p˛cf
->
«med
) {

2979 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2982 &
˛cf
->
«me
, &
p˛cf
->name);

2983  
NGX_CONF_ERROR
;

2986 i‡(
˛cf
->
«med
) {

2987 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2990 &
˛cf
->
«me
);

2991  
NGX_CONF_ERROR
;

2994 
Àn
 = 
p˛cf
->
«me
.len;

2996 #i‡(
NGX_PCRE
)

2997 i‡(
˛cf
->
ªgex
 =
NULL


2998 && 
	`ngx_fûíame_cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3000 i‡(
	`ngx_fûíame_cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3003 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3005 &
˛cf
->
«me
, &
p˛cf
->name);

3006  
NGX_CONF_ERROR
;

3010 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

3011  
NGX_CONF_ERROR
;

3014 
ßve
 = *
cf
;

3015 
cf
->
˘x
 = ctx;

3016 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LOC_CONF
;

3018 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3020 *
cf
 = 
ßve
;

3022  
rv
;

3023 
	}
}

3026 
ngx_öt_t


3027 
	$ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

3028 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3030 #i‡(
NGX_PCRE
)

3031 
ngx_ªgex_compûe_t
 
rc
;

3032 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3034 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3036 
rc
.
∑âîn
 = *
ªgex
;

3037 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3038 
rc
.
îr
.
d©a
 = 
îr°r
;

3040 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

3041 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3043 
rc
.
›ti⁄s
 = 
ˇ£Àss
 ? 
NGX_REGEX_CASELESS
 : 0;

3046 
˛cf
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3047 i‡(
˛cf
->
ªgex
 =
NULL
) {

3048  
NGX_ERROR
;

3051 
˛cf
->
«me
 = *
ªgex
;

3053  
NGX_OK
;

3057 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3059 
ªgex
);

3060  
NGX_ERROR
;

3063 
	}
}

3067 
	$ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3069 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3071 *
rv
;

3072 
ngx_c⁄f_t
 
ßve
;

3074 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3075 
˛cf
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, (
ngx_hash_key_t
));

3076 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3077  
NGX_CONF_ERROR
;

3081 
ßve
 = *
cf
;

3082 
cf
->
h™dÀr
 = 
ngx_hâp_c‹e_ty≥
;

3083 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

3085 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3087 *
cf
 = 
ßve
;

3089  
rv
;

3090 
	}
}

3094 
	$ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

3096 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3098 
ngx_°r_t
 *
vÆue
, *
c⁄ã¡_ty≥
, *
ﬁd
;

3099 
ngx_uöt_t
 
i
, 
n
, 
hash
;

3100 
ngx_hash_key_t
 *
ty≥
;

3102 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3104 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

3105 i‡(
cf
->
¨gs
->
√…s
 != 2) {

3106 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3109  
NGX_CONF_ERROR
;

3112  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

3115 
c⁄ã¡_ty≥
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

3116 i‡(
c⁄ã¡_ty≥
 =
NULL
) {

3117  
NGX_CONF_ERROR
;

3120 *
c⁄ã¡_ty≥
 = 
vÆue
[0];

3122 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3124 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

3126 
ty≥
 = 
˛cf
->
ty≥s
->
ñts
;

3127 
n
 = 0;Ç < 
˛cf
->
ty≥s
->
√…s
;Ç++) {

3128 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

3129 
ﬁd
 = 
ty≥
[
n
].
vÆue
;

3130 
ty≥
[
n
].
vÆue
 = 
c⁄ã¡_ty≥
;

3132 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3136 &
vÆue
[
i
], 
c⁄ã¡_ty≥
, 
ﬁd
);

3137 
√xt
;

3142 
ty≥
 = 
	`ngx_¨øy_push
(
˛cf
->
ty≥s
);

3143 i‡(
ty≥
 =
NULL
) {

3144  
NGX_CONF_ERROR
;

3147 
ty≥
->
key
 = 
vÆue
[
i
];

3148 
ty≥
->
key_hash
 = 
hash
;

3149 
ty≥
->
vÆue
 = 
c⁄ã¡_ty≥
;

3151 
√xt
:

3155  
NGX_CONF_OK
;

3156 
	}
}

3159 
ngx_öt_t


3160 
	$ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3162  
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
cf
);

3163 
	}
}

3166 
ngx_öt_t


3167 
	$ngx_hâp_c‹e_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3169 
ngx_hâp_t›_ªque°_body_fûãr
 = 
ngx_hâp_ªque°_body_ßve_fûãr
;

3171  
NGX_OK
;

3172 
	}
}

3176 
	$ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3178 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3180 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_maö_c⁄f_t
));

3181 i‡(
cmcf
 =
NULL
) {

3182  
NULL
;

3185 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

3186 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

3187 !
NGX_OK
)

3189  
NULL
;

3192 
cmcf
->
£rvî_«mes_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3193 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3195 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3196 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3198  
cmcf
;

3199 
	}
}

3203 
	$ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

3205 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

3207 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
£rvî_«mes_hash_max_size
, 512);

3208 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
£rvî_«mes_hash_buckë_size
,

3209 
ngx_ˇchñöe_size
);

3211 
cmcf
->
£rvî_«mes_hash_buckë_size
 =

3212 
	`ngx_Æign
(
cmcf
->
£rvî_«mes_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3215 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_max_size
, 1024);

3216 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_buckë_size
, 64);

3218 
cmcf
->
v¨übÀs_hash_buckë_size
 =

3219 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3221 i‡(
cmcf
->
nˇ±uªs
) {

3222 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

3225  
NGX_CONF_OK
;

3226 
	}
}

3230 
	$ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3232 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3234 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_§v_c⁄f_t
));

3235 i‡(
cscf
 =
NULL
) {

3236  
NULL
;

3245 i‡(
	`ngx_¨øy_öô
(&
cscf
->
£rvî_«mes
, 
cf
->
ãmp_poﬁ
, 4,

3246 (
ngx_hâp_£rvî_«me_t
))

3247 !
NGX_OK
)

3249  
NULL
;

3252 
cscf
->
c⁄√˘i⁄_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3253 
cscf
->
ªque°_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3254 
cscf
->
˛õ¡_hódî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3255 
cscf
->
˛õ¡_hódî_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3256 
cscf
->
ign‹e_övÆid_hódîs
 = 
NGX_CONF_UNSET
;

3257 
cscf
->
mîge_¶ashes
 = 
NGX_CONF_UNSET
;

3258 
cscf
->
undîsc‹es_ö_hódîs
 = 
NGX_CONF_UNSET
;

3260 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

3261 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

3263  
cscf
;

3264 
	}
}

3268 
	$ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3270 
ngx_hâp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3271 
ngx_hâp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

3273 
ngx_°r_t
 
«me
;

3274 
ngx_hâp_£rvî_«me_t
 *
¢
;

3278 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
c⁄√˘i⁄_poﬁ_size
,

3279 
¥ev
->
c⁄√˘i⁄_poﬁ_size
, 64 * (*));

3280 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªque°_poﬁ_size
,

3281 
¥ev
->
ªque°_poﬁ_size
, 4096);

3282 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_hódî_timeout
,

3283 
¥ev
->
˛õ¡_hódî_timeout
, 60000);

3284 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_hódî_buf„r_size
,

3285 
¥ev
->
˛õ¡_hódî_buf„r_size
, 1024);

3286 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
,

3287 
¥ev
->
œrge_˛õ¡_hódî_buf„rs
,

3290 i‡(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
.
size
 < c⁄f->
c⁄√˘i⁄_poﬁ_size
) {

3291 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3294  
NGX_CONF_ERROR
;

3297 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_övÆid_hódîs
,

3298 
¥ev
->
ign‹e_övÆid_hódîs
, 1);

3300 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mîge_¶ashes
, 
¥ev
->merge_slashes, 1);

3302 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
undîsc‹es_ö_hódîs
,

3303 
¥ev
->
undîsc‹es_ö_hódîs
, 0);

3305 i‡(
c⁄f
->
£rvî_«mes
.
√…s
 == 0) {

3307 
¢
 = 
	`ngx_¨øy_push
(&
c⁄f
->
£rvî_«mes
);

3308 #i‡(
NGX_PCRE
)

3309 
¢
->
ªgex
 = 
NULL
;

3311 
¢
->
£rvî
 = 
c⁄f
;

3312 
	`ngx_°r_£t
(&
¢
->
«me
, "");

3315 
¢
 = 
c⁄f
->
£rvî_«mes
.
ñts
;

3316 
«me
 = 
¢
[0].name;

3318 #i‡(
NGX_PCRE
)

3319 i‡(
¢
->
ªgex
) {

3320 
«me
.
Àn
++;

3321 
«me
.
d©a
--;

3325 i‡(
«me
.
d©a
[0] == '.') {

3326 
«me
.
Àn
--;

3327 
«me
.
d©a
++;

3330 
c⁄f
->
£rvî_«me
.
Àn
 = 
«me
.len;

3331 
c⁄f
->
£rvî_«me
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

3332 i‡(
c⁄f
->
£rvî_«me
.
d©a
 =
NULL
) {

3333  
NGX_CONF_ERROR
;

3336  
NGX_CONF_OK
;

3337 
	}
}

3341 
	$ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3343 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3345 
˛cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_loc_c⁄f_t
));

3346 i‡(
˛cf
 =
NULL
) {

3347  
NULL
;

3369 
˛cf
->
˛õ¡_max_body_size
 = 
NGX_CONF_UNSET
;

3370 
˛cf
->
˛õ¡_body_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3371 
˛cf
->
˛õ¡_body_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3372 
˛cf
->
ßtisfy
 = 
NGX_CONF_UNSET_UINT
;

3373 
˛cf
->
if_modifõd_sö˚
 = 
NGX_CONF_UNSET_UINT
;

3374 
˛cf
->
max_ønges
 = 
NGX_CONF_UNSET_UINT
;

3375 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 = 
NGX_CONF_UNSET_UINT
;

3376 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
 = 
NGX_CONF_UNSET
;

3377 
˛cf
->
öã∫Æ
 = 
NGX_CONF_UNSET
;

3378 
˛cf
->
£ndfûe
 = 
NGX_CONF_UNSET
;

3379 
˛cf
->
£ndfûe_max_chunk
 = 
NGX_CONF_UNSET_SIZE
;

3380 
˛cf
->
subªque°_ouçut_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3381 
˛cf
->
aio
 = 
NGX_CONF_UNSET
;

3382 
˛cf
->
aio_wrôe
 = 
NGX_CONF_UNSET
;

3383 #i‡(
NGX_THREADS
)

3384 
˛cf
->
thªad_poﬁ
 = 
NGX_CONF_UNSET_PTR
;

3385 
˛cf
->
thªad_poﬁ_vÆue
 = 
NGX_CONF_UNSET_PTR
;

3387 
˛cf
->
ªad_ahód
 = 
NGX_CONF_UNSET_SIZE
;

3388 
˛cf
->
dúe˘io
 = 
NGX_CONF_UNSET
;

3389 
˛cf
->
dúe˘io_Æignmít
 = 
NGX_CONF_UNSET
;

3390 
˛cf
->
t˝_n›ush
 = 
NGX_CONF_UNSET
;

3391 
˛cf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

3392 
˛cf
->
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3393 
˛cf
->
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

3394 
˛cf
->
po°p⁄e_ouçut
 = 
NGX_CONF_UNSET_SIZE
;

3395 
˛cf
->
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

3396 
˛cf
->
limô_øã_a·î
 = 
NGX_CONF_UNSET_SIZE
;

3397 
˛cf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3398 
˛cf
->
kì∑live_hódî
 = 
NGX_CONF_UNSET
;

3399 
˛cf
->
kì∑live_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

3400 
˛cf
->
lögîög_˛o£
 = 
NGX_CONF_UNSET_UINT
;

3401 
˛cf
->
lögîög_time
 = 
NGX_CONF_UNSET_MSEC
;

3402 
˛cf
->
lögîög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3403 
˛cf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3404 
˛cf
->
ª£t_timedout_c⁄√˘i⁄
 = 
NGX_CONF_UNSET
;

3405 
˛cf
->
absﬁuã_ªdúe˘
 = 
NGX_CONF_UNSET
;

3406 
˛cf
->
£rvî_«me_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3407 
˛cf
->
p‹t_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3408 
˛cf
->
msõ_∑ddög
 = 
NGX_CONF_UNSET
;

3409 
˛cf
->
msõ_ª‰esh
 = 
NGX_CONF_UNSET
;

3410 
˛cf
->
log_nŸ_found
 = 
NGX_CONF_UNSET
;

3411 
˛cf
->
log_subªque°
 = 
NGX_CONF_UNSET
;

3412 
˛cf
->
ªcursive_îr‹_∑ges
 = 
NGX_CONF_UNSET
;

3413 
˛cf
->
chunked_å™s„r_ícodög
 = 
NGX_CONF_UNSET
;

3414 
˛cf
->
ëag
 = 
NGX_CONF_UNSET
;

3415 
˛cf
->
£rvî_tokís
 = 
NGX_CONF_UNSET_UINT
;

3416 
˛cf
->
ty≥s_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3417 
˛cf
->
ty≥s_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3419 
˛cf
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

3420 
˛cf
->
›í_fûe_ˇche_vÆid
 = 
NGX_CONF_UNSET
;

3421 
˛cf
->
›í_fûe_ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

3422 
˛cf
->
›í_fûe_ˇche_îr‹s
 = 
NGX_CONF_UNSET
;

3423 
˛cf
->
›í_fûe_ˇche_evíts
 = 
NGX_CONF_UNSET
;

3425 #i‡(
NGX_HTTP_GZIP
)

3426 
˛cf
->
gzù_v¨y
 = 
NGX_CONF_UNSET
;

3427 
˛cf
->
gzù_hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

3428 #i‡(
NGX_PCRE
)

3429 
˛cf
->
gzù_dißbÀ
 = 
NGX_CONF_UNSET_PTR
;

3431 
˛cf
->
gzù_dißbÀ_msõ6
 = 3;

3432 #i‡(
NGX_HTTP_DEGRADATION
)

3433 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 3;

3437 #i‡(
NGX_HAVE_OPENAT
)

3438 
˛cf
->
dißbÀ_symlöks
 = 
NGX_CONF_UNSET_UINT
;

3439 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NGX_CONF_UNSET_PTR
;

3442  
˛cf
;

3443 
	}
}

3446 
ngx_°r_t
 
	gngx_hâp_c‹e_ãxt_html_ty≥
 = 
ngx_°rög
("text/html");

3447 
ngx_°r_t
 
	gngx_hâp_c‹e_image_gif_ty≥
 = 
ngx_°rög
("image/gif");

3448 
ngx_°r_t
 
	gngx_hâp_c‹e_image_j≥g_ty≥
 = 
ngx_°rög
("image/jpeg");

3450 
ngx_hash_key_t
 
	gngx_hâp_c‹e_deÁu…_ty≥s
[] = {

3451 { 
ngx_°rög
("html"), 0, &
ngx_hâp_c‹e_ãxt_html_ty≥
 },

3452 { 
ngx_°rög
("gif"), 0, &
ngx_hâp_c‹e_image_gif_ty≥
 },

3453 { 
ngx_°rög
("jpg"), 0, &
ngx_hâp_c‹e_image_j≥g_ty≥
 },

3454 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

3459 
	$ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3461 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3462 
ngx_hâp_c‹e_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

3464 
ngx_uöt_t
 
i
;

3465 
ngx_hash_key_t
 *
ty≥
;

3466 
ngx_hash_öô_t
 
ty≥s_hash
;

3468 i‡(
c⁄f
->
roŸ
.
d©a
 =
NULL
) {

3470 
c⁄f
->
Æüs
 = 
¥ev
->alias;

3471 
c⁄f
->
roŸ
 = 
¥ev
->root;

3472 
c⁄f
->
roŸ_Àngths
 = 
¥ev
->root_lengths;

3473 
c⁄f
->
roŸ_vÆues
 = 
¥ev
->root_values;

3475 i‡(
¥ev
->
roŸ
.
d©a
 =
NULL
) {

3476 
	`ngx_°r_£t
(&
c⁄f
->
roŸ
, "html");

3478 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
c⁄f
->
roŸ
, 0Ë!
NGX_OK
) {

3479  
NGX_CONF_ERROR
;

3484 i‡(
c⁄f
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3485 
c⁄f
->
po°_a˘i⁄
 = 
¥ev
->post_action;

3488 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_max_size
,

3489 
¥ev
->
ty≥s_hash_max_size
, 1024);

3491 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_buckë_size
,

3492 
¥ev
->
ty≥s_hash_buckë_size
, 64);

3494 
c⁄f
->
ty≥s_hash_buckë_size
 = 
	`ngx_Æign
(conf->types_hash_bucket_size,

3495 
ngx_ˇchñöe_size
);

3502 i‡(
¥ev
->
ty≥s
 &&Öªv->
ty≥s_hash
.
buckës
 =
NULL
) {

3504 
ty≥s_hash
.
hash
 = &
¥ev
->types_hash;

3505 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3506 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3507 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3508 
ty≥s_hash
.
«me
 = "types_hash";

3509 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3510 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3512 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
¥ev
->
ty≥s
->
ñts
,Öªv->ty≥s->
√…s
)

3513 !
NGX_OK
)

3515  
NGX_CONF_ERROR
;

3519 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3520 
c⁄f
->
ty≥s
 = 
¥ev
->types;

3521 
c⁄f
->
ty≥s_hash
 = 
¥ev
->types_hash;

3524 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3525 
c⁄f
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 3, (
ngx_hash_key_t
));

3526 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3527  
NGX_CONF_ERROR
;

3530 
i
 = 0; 
ngx_hâp_c‹e_deÁu…_ty≥s
[i].
key
.
Àn
; i++) {

3531 
ty≥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ty≥s
);

3532 i‡(
ty≥
 =
NULL
) {

3533  
NGX_CONF_ERROR
;

3536 
ty≥
->
key
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].key;

3537 
ty≥
->
key_hash
 =

3538 
	`ngx_hash_key_lc
(
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
d©a
,

3539 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
Àn
);

3540 
ty≥
->
vÆue
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].value;

3544 i‡(
c⁄f
->
ty≥s_hash
.
buckës
 =
NULL
) {

3546 
ty≥s_hash
.
hash
 = &
c⁄f
->types_hash;

3547 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3548 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3549 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3550 
ty≥s_hash
.
«me
 = "types_hash";

3551 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3552 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3554 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
c⁄f
->
ty≥s
->
ñts
, c⁄f->ty≥s->
√…s
)

3555 !
NGX_OK
)

3557  
NGX_CONF_ERROR
;

3561 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

3562 i‡(
¥ev
->
îr‹_log
) {

3563 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

3565 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

3569 i‡(
c⁄f
->
îr‹_∑ges
 =
NULL
 && 
¥ev
->error_pages) {

3570 
c⁄f
->
îr‹_∑ges
 = 
¥ev
->error_pages;

3573 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
deÁu…_ty≥
,

3574 
¥ev
->
deÁu…_ty≥
, "text/plain");

3576 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
˛õ¡_max_body_size
,

3577 
¥ev
->
˛õ¡_max_body_size
, 1 * 1024 * 1024);

3578 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_body_buf„r_size
,

3579 
¥ev
->
˛õ¡_body_buf„r_size
,

3580 (
size_t
Ë2 * 
ngx_∑gesize
);

3581 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_body_timeout
,

3582 
¥ev
->
˛õ¡_body_timeout
, 60000);

3584 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
kì∑live_dißbÀ
,

3585 
¥ev
->
kì∑live_dißbÀ
,

3586 (
NGX_CONF_BITMASK_SET


3587 |
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
));

3588 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ßtisfy
, 
¥ev
->satisfy,

3589 
NGX_HTTP_SATISFY_ALL
);

3590 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
if_modifõd_sö˚
, 
¥ev
->if_modified_since,

3591 
NGX_HTTP_IMS_EXACT
);

3592 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ønges
, 
¥ev
->max_ranges,

3593 
NGX_MAX_INT32_VALUE
);

3594 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
˛õ¡_body_ö_fûe_⁄ly
,

3595 
¥ev
->
˛õ¡_body_ö_fûe_⁄ly
,

3596 
NGX_HTTP_REQUEST_BODY_FILE_OFF
);

3597 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛õ¡_body_ö_sögÀ_buf„r
,

3598 
¥ev
->
˛õ¡_body_ö_sögÀ_buf„r
, 0);

3599 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öã∫Æ
, 
¥ev
->internal, 0);

3600 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ndfûe
, 
¥ev
->sendfile, 0);

3601 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£ndfûe_max_chunk
,

3602 
¥ev
->
£ndfûe_max_chunk
, 0);

3603 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
subªque°_ouçut_buf„r_size
,

3604 
¥ev
->
subªque°_ouçut_buf„r_size
,

3605 (
size_t
Ë
ngx_∑gesize
);

3606 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio
, 
¥ev
->aio, 
NGX_HTTP_AIO_OFF
);

3607 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio_wrôe
, 
¥ev
->aio_write, 0);

3608 #i‡(
NGX_THREADS
)

3609 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
thªad_poﬁ
, 
¥ev
->thªad_poﬁ, 
NULL
);

3610 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
thªad_poﬁ_vÆue
, 
¥ev
->thread_pool_value,

3611 
NULL
);

3613 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªad_ahód
, 
¥ev
->read_ahead, 0);

3614 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io
, 
¥ev
->directio,

3615 
NGX_OPEN_FILE_DIRECTIO_OFF
);

3616 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io_Æignmít
, 
¥ev
->directio_alignment,

3618 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_n›ush
, 
¥ev
->tcp_nopush, 0);

3619 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

3621 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
£nd_timeout
, 
¥ev
->send_timeout, 60000);

3622 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£nd_low©
, 
¥ev
->send_lowat, 0);

3623 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_ouçut
, 
¥ev
->postpone_output,

3625 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã
, 
¥ev
->limit_rate, 0);

3626 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã_a·î
, 
¥ev
->limit_rate_after,

3628 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

3629 
¥ev
->
kì∑live_timeout
, 75000);

3630 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
kì∑live_hódî
,

3631 
¥ev
->
kì∑live_hódî
, 0);

3632 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
kì∑live_ªque°s
,

3633 
¥ev
->
kì∑live_ªque°s
, 100);

3634 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
lögîög_˛o£
,

3635 
¥ev
->
lögîög_˛o£
, 
NGX_HTTP_LINGERING_ON
);

3636 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_time
,

3637 
¥ev
->
lögîög_time
, 30000);

3638 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_timeout
,

3639 
¥ev
->
lögîög_timeout
, 5000);

3640 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

3641 
¥ev
->
ªsﬁvî_timeout
, 30000);

3643 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

3645 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3652 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
, 0);

3653 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3654  
NGX_CONF_ERROR
;

3658 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

3661 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
˛õ¡_body_ãmp_∑th
,

3662 
¥ev
->
˛õ¡_body_ãmp_∑th
,

3663 &
ngx_hâp_˛õ¡_ãmp_∑th
)

3664 !
NGX_OK
)

3666  
NGX_CONF_ERROR
;

3669 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª£t_timedout_c⁄√˘i⁄
,

3670 
¥ev
->
ª£t_timedout_c⁄√˘i⁄
, 0);

3671 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
absﬁuã_ªdúe˘
,

3672 
¥ev
->
absﬁuã_ªdúe˘
, 1);

3673 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_«me_ö_ªdúe˘
,

3674 
¥ev
->
£rvî_«me_ö_ªdúe˘
, 0);

3675 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
p‹t_ö_ªdúe˘
, 
¥ev
->port_in_redirect, 1);

3676 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_∑ddög
, 
¥ev
->msie_padding, 1);

3677 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_ª‰esh
, 
¥ev
->msie_refresh, 0);

3678 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_nŸ_found
, 
¥ev
->log_not_found, 1);

3679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_subªque°
, 
¥ev
->log_subrequest, 0);

3680 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive_îr‹_∑ges
,

3681 
¥ev
->
ªcursive_îr‹_∑ges
, 0);

3682 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunked_å™s„r_ícodög
,

3683 
¥ev
->
chunked_å™s„r_ícodög
, 1);

3684 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ëag
, 
¥ev
->etag, 1);

3686 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
£rvî_tokís
, 
¥ev
->server_tokens,

3687 
NGX_HTTP_SERVER_TOKENS_ON
);

3689 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
›í_fûe_ˇche
,

3690 
¥ev
->
›í_fûe_ˇche
, 
NULL
);

3692 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_vÆid
,

3693 
¥ev
->
›í_fûe_ˇche_vÆid
, 60);

3695 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
›í_fûe_ˇche_mö_u£s
,

3696 
¥ev
->
›í_fûe_ˇche_mö_u£s
, 1);

3698 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_îr‹s
,

3699 
¥ev
->
›í_fûe_ˇche_îr‹s
, 0);

3701 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_evíts
,

3702 
¥ev
->
›í_fûe_ˇche_evíts
, 0);

3703 #i‡(
NGX_HTTP_GZIP
)

3705 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gzù_v¨y
, 
¥ev
->gzip_vary, 0);

3706 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_hâp_vîsi⁄
, 
¥ev
->gzip_http_version,

3707 
NGX_HTTP_VERSION_11
);

3708 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
gzù_¥oxõd
, 
¥ev
->gzip_proxied,

3709 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_GZIP_PROXIED_OFF
));

3711 #i‡(
NGX_PCRE
)

3712 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
gzù_dißbÀ
, 
¥ev
->gzù_dißbÀ, 
NULL
);

3715 i‡(
c⁄f
->
gzù_dißbÀ_msõ6
 == 3) {

3716 
c⁄f
->
gzù_dißbÀ_msõ6
 =

3717 (
¥ev
->
gzù_dißbÀ_msõ6
 == 3) ? 0 :Örev->gzip_disable_msie6;

3720 #i‡(
NGX_HTTP_DEGRADATION
)

3722 i‡(
c⁄f
->
gzù_dißbÀ_degød©i⁄
 == 3) {

3723 
c⁄f
->
gzù_dißbÀ_degød©i⁄
 =

3724 (
¥ev
->
gzù_dißbÀ_degød©i⁄
 == 3) ?

3725 0 : 
¥ev
->
gzù_dißbÀ_degød©i⁄
;

3731 #i‡(
NGX_HAVE_OPENAT
)

3732 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
dißbÀ_symlöks
, 
¥ev
->disable_symlinks,

3733 
NGX_DISABLE_SYMLINKS_OFF
);

3734 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
dißbÀ_symlöks_‰om
,

3735 
¥ev
->
dißbÀ_symlöks_‰om
, 
NULL
);

3738  
NGX_CONF_OK
;

3739 
	}
}

3743 
	$ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3745 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3747 
ngx_°r_t
 *
vÆue
, 
size
;

3748 
ngx_uæ_t
 
u
;

3749 
ngx_uöt_t
 
n
;

3750 
ngx_hâp_li°í_›t_t
 
ls›t
;

3752 
cscf
->
li°í
 = 1;

3754 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3756 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3758 
u
.
uæ
 = 
vÆue
[1];

3759 
u
.
li°í
 = 1;

3760 
u
.
deÁu…_p‹t
 = 80;

3762 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

3763 i‡(
u
.
îr
) {

3764 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3766 
u
.
îr
, &u.
uæ
);

3769  
NGX_CONF_ERROR
;

3772 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3774 
	`ngx_mem˝y
(&
ls›t
.
sockaddr
.sockaddr, &
u
.sockaddr, u.
sockÀn
);

3776 
ls›t
.
sockÀn
 = 
u
.socklen;

3777 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3778 
ls›t
.
rcvbuf
 = -1;

3779 
ls›t
.
¢dbuf
 = -1;

3780 #i‡(
NGX_HAVE_SETFIB
)

3781 
ls›t
.
£tfib
 = -1;

3783 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

3784 
ls›t
.
Á°›í
 = -1;

3786 
ls›t
.
wûdˇrd
 = 
u
.wildcard;

3787 #i‡(
NGX_HAVE_INET6
)

3788 
ls›t
.
ùv6⁄ly
 = 1;

3791 (Ë
	`ngx_sock_¡›
(&
ls›t
.
sockaddr
.sockaddr,Üs›t.
sockÀn
,Üs›t.
addr
,

3792 
NGX_SOCKADDR_STRLEN
, 1);

3794 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

3796 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default_server") == 0

3797 || 
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default") == 0)

3799 
ls›t
.
deÁu…_£rvî
 = 1;

3803 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "bind") == 0) {

3804 
ls›t
.
£t
 = 1;

3805 
ls›t
.
böd
 = 1;

3809 #i‡(
NGX_HAVE_SETFIB
)

3810 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "setfib=", 7) == 0) {

3811 
ls›t
.
£tfib
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 7, vÆue[n].
Àn
 - 7);

3812 
ls›t
.
£t
 = 1;

3813 
ls›t
.
böd
 = 1;

3815 i‡(
ls›t
.
£tfib
 =
NGX_ERROR
) {

3816 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3817 "övÆid sëfib \"%V\"", &
vÆue
[
n
]);

3818  
NGX_CONF_ERROR
;

3825 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

3826 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "fastopen=", 9) == 0) {

3827 
ls›t
.
Á°›í
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 9, vÆue[n].
Àn
 - 9);

3828 
ls›t
.
£t
 = 1;

3829 
ls›t
.
böd
 = 1;

3831 i‡(
ls›t
.
Á°›í
 =
NGX_ERROR
) {

3832 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3833 "övÆid fa°›í \"%V\"", &
vÆue
[
n
]);

3834  
NGX_CONF_ERROR
;

3841 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "backlog=", 8) == 0) {

3842 
ls›t
.
backlog
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 8, vÆue[n].
Àn
 - 8);

3843 
ls›t
.
£t
 = 1;

3844 
ls›t
.
böd
 = 1;

3846 i‡(
ls›t
.
backlog
 =
NGX_ERROR
 ||Üsopt.backlog == 0) {

3847 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3848 "övÆid backlog \"%V\"", &
vÆue
[
n
]);

3849  
NGX_CONF_ERROR
;

3855 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "rcvbuf=", 7) == 0) {

3856 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

3857 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

3859 
ls›t
.
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

3860 
ls›t
.
£t
 = 1;

3861 
ls›t
.
böd
 = 1;

3863 i‡(
ls›t
.
rcvbuf
 =
NGX_ERROR
) {

3864 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3865 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
n
]);

3866  
NGX_CONF_ERROR
;

3872 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "sndbuf=", 7) == 0) {

3873 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

3874 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

3876 
ls›t
.
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

3877 
ls›t
.
£t
 = 1;

3878 
ls›t
.
böd
 = 1;

3880 i‡(
ls›t
.
¢dbuf
 =
NGX_ERROR
) {

3881 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3882 "övÆid sndbu‡\"%V\"", &
vÆue
[
n
]);

3883  
NGX_CONF_ERROR
;

3889 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "accept_filter=", 14) == 0) {

3890 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

3891 
ls›t
.
ac˚±_fûãr
 = (*Ë&
vÆue
[
n
].
d©a
[14];

3892 
ls›t
.
£t
 = 1;

3893 
ls›t
.
böd
 = 1;

3895 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3898 &
vÆue
[
n
]);

3903 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "deferred") == 0) {

3904 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

3905 
ls›t
.
de„ºed_ac˚±
 = 1;

3906 
ls›t
.
£t
 = 1;

3907 
ls›t
.
böd
 = 1;

3909 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3916 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "ipv6only=o", 10) == 0) {

3917 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

3918 
sockaddr
 *
ß
;

3920 
ß
 = &
ls›t
.
sockaddr
.sockaddr;

3922 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

3924 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "n") == 0) {

3925 
ls›t
.
ùv6⁄ly
 = 1;

3927 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "ff") == 0) {

3928 
ls›t
.
ùv6⁄ly
 = 0;

3931 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3933 &
vÆue
[
n
].
d©a
[9]);

3934  
NGX_CONF_ERROR
;

3937 
ls›t
.
£t
 = 1;

3938 
ls›t
.
böd
 = 1;

3941 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3943 "⁄ádd∏\"%s\", ign‹ed", 
ls›t
.
addr
);

3948 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3951  
NGX_CONF_ERROR
;

3955 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "reuseport") == 0) {

3956 #i‡(
NGX_HAVE_REUSEPORT
)

3957 
ls›t
.
ªu£p‹t
 = 1;

3958 
ls›t
.
£t
 = 1;

3959 
ls›t
.
böd
 = 1;

3961 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3968 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "ssl") == 0) {

3969 #i‡(
NGX_HTTP_SSL
)

3970 
ls›t
.
s¶
 = 1;

3973 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3976  
NGX_CONF_ERROR
;

3980 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "http2") == 0) {

3981 #i‡(
NGX_HTTP_V2
)

3982 
ls›t
.
hâp2
 = 1;

3985 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3988  
NGX_CONF_ERROR
;

3992 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "spdy") == 0) {

3993 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4000 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "so_keepalive=", 13) == 0) {

4002 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "on") == 0) {

4003 
ls›t
.
so_kì∑live
 = 1;

4005 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "off") == 0) {

4006 
ls›t
.
so_kì∑live
 = 2;

4010 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4011 
u_ch¨
 *
p
, *
íd
;

4012 
ngx_°r_t
 
s
;

4014 
íd
 = 
vÆue
[
n
].
d©a
 + vÆue[n].
Àn
;

4015 
s
.
d©a
 = 
vÆue
[
n
].data + 13;

4017 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4018 i‡(
p
 =
NULL
) {

4019 
p
 = 
íd
;

4022 i‡(
p
 > 
s
.
d©a
) {

4023 
s
.
Àn
 = 
p
 - s.
d©a
;

4025 
ls›t
.
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

4026 i‡(
ls›t
.
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

4027 
övÆid_so_kì∑live
;

4031 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4033 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4034 i‡(
p
 =
NULL
) {

4035 
p
 = 
íd
;

4038 i‡(
p
 > 
s
.
d©a
) {

4039 
s
.
Àn
 = 
p
 - s.
d©a
;

4041 
ls›t
.
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

4042 i‡(
ls›t
.
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

4043 
övÆid_so_kì∑live
;

4047 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4049 i‡(
s
.
d©a
 < 
íd
) {

4050 
s
.
Àn
 = 
íd
 - s.
d©a
;

4052 
ls›t
.
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

4053 i‡(
ls›t
.
t˝_kìp˙t
 =
NGX_ERROR
) {

4054 
övÆid_so_kì∑live
;

4058 i‡(
ls›t
.
t˝_kìpidÀ
 =0 &&Üs›t.
t˝_kìpötvl
 == 0

4059 && 
ls›t
.
t˝_kìp˙t
 == 0)

4061 
övÆid_so_kì∑live
;

4064 
ls›t
.
so_kì∑live
 = 1;

4068 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4071  
NGX_CONF_ERROR
;

4076 
ls›t
.
£t
 = 1;

4077 
ls›t
.
böd
 = 1;

4081 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4082 
övÆid_so_kì∑live
:

4084 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4086 &
vÆue
[
n
].
d©a
[13]);

4087  
NGX_CONF_ERROR
;

4091 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "proxy_protocol") == 0) {

4092 
ls›t
.
¥oxy_¥Ÿocﬁ
 = 1;

4096 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4097 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
n
]);

4098  
NGX_CONF_ERROR
;

4101 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë=
NGX_OK
) {

4102  
NGX_CONF_OK
;

4105  
NGX_CONF_ERROR
;

4106 
	}
}

4110 
	$ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4112 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

4114 
u_ch¨
 
ch
;

4115 
ngx_°r_t
 *
vÆue
;

4116 
ngx_uöt_t
 
i
;

4117 
ngx_hâp_£rvî_«me_t
 *
¢
;

4119 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4121 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4123 
ch
 = 
vÆue
[
i
].
d©a
[0];

4125 i‡((
ch
 ='*' && (
vÆue
[
i
].
Àn
 < 3 || vÆue[i].
d©a
[1] != '.'))

4126 || (
ch
 ='.' && 
vÆue
[
i
].
Àn
 < 2))

4128 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4129 "£rvîÇamê\"%V\" i†övÆid", &
vÆue
[
i
]);

4130  
NGX_CONF_ERROR
;

4133 i‡(
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/')) {

4134 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4136 &
vÆue
[
i
]);

4139 
¢
 = 
	`ngx_¨øy_push
(&
cscf
->
£rvî_«mes
);

4140 i‡(
¢
 =
NULL
) {

4141  
NGX_CONF_ERROR
;

4144 #i‡(
NGX_PCRE
)

4145 
¢
->
ªgex
 = 
NULL
;

4147 
¢
->
£rvî
 = 
cscf
;

4149 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, (
u_ch¨
 *) "$hostname") == 0) {

4150 
¢
->
«me
 = 
cf
->
cy˛e
->
ho°«me
;

4153 
¢
->
«me
 = 
vÆue
[
i
];

4156 i‡(
vÆue
[
i
].
d©a
[0] != '~') {

4157 
	`ngx_°æow
(
¢
->
«me
.
d©a
, sn->«me.d©a, sn->«me.
Àn
);

4161 #i‡(
NGX_PCRE
)

4163 
u_ch¨
 *
p
;

4164 
ngx_ªgex_compûe_t
 
rc
;

4165 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4167 i‡(
vÆue
[
i
].
Àn
 == 1) {

4168 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4169 "em±yÑegex i¿£rvîÇamê\"%V\"", &
vÆue
[
i
]);

4170  
NGX_CONF_ERROR
;

4173 
vÆue
[
i
].
Àn
--;

4174 
vÆue
[
i
].
d©a
++;

4176 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4178 
rc
.
∑âîn
 = 
vÆue
[
i
];

4179 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4180 
rc
.
îr
.
d©a
 = 
îr°r
;

4182 
p
 = 
vÆue
[
i
].
d©a
;Ö < vÆue[i].d©®+ vÆue[i].
Àn
;Ö++) {

4183 i‡(*
p
 >= 'A' && *p <= 'Z') {

4184 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4189 
¢
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4190 i‡(
¢
->
ªgex
 =
NULL
) {

4191  
NGX_CONF_ERROR
;

4194 
¢
->
«me
 = 
vÆue
[
i
];

4195 
cscf
->
ˇ±uªs
 = (
rc
.captures > 0);

4198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4200 "ªquúe†PCREÜibøry", &
vÆue
[
i
]);

4202  
NGX_CONF_ERROR
;

4206  
NGX_CONF_OK
;

4207 
	}
}

4211 
	$ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4213 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4215 
ngx_°r_t
 *
vÆue
;

4216 
ngx_öt_t
 
Æüs
;

4217 
ngx_uöt_t
 
n
;

4218 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4220 
Æüs
 = (
cmd
->
«me
.
Àn
 == ("alias") - 1) ? 1 : 0;

4222 i‡(
˛cf
->
roŸ
.
d©a
) {

4224 i‡((
˛cf
->
Æüs
 != 0) ==álias) {

4228 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4231 &
cmd
->
«me
, 
˛cf
->
Æüs
 ? "alias" : "root");

4233  
NGX_CONF_ERROR
;

4236 i‡(
˛cf
->
«med
 && 
Æüs
) {

4237 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4241  
NGX_CONF_ERROR
;

4244 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4246 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$document_root")

4247 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${document_root}"))

4249 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4252 &
cmd
->
«me
);

4254  
NGX_CONF_ERROR
;

4257 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$realpath_root")

4258 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${realpath_root}"))

4260 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4263 &
cmd
->
«me
);

4265  
NGX_CONF_ERROR
;

4268 
˛cf
->
Æüs
 =álü†? clcf->
«me
.
Àn
 : 0;

4269 
˛cf
->
roŸ
 = 
vÆue
[1];

4271 i‡(!
Æüs
 && 
˛cf
->
roŸ
.
Àn
 > 0

4272 && 
˛cf
->
roŸ
.
d©a
[˛cf->roŸ.
Àn
 - 1] == '/')

4274 
˛cf
->
roŸ
.
Àn
--;

4277 i‡(
˛cf
->
roŸ
.
d©a
[0] != '$') {

4278 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
˛cf
->
roŸ
, 0Ë!
NGX_OK
) {

4279  
NGX_CONF_ERROR
;

4283 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
˛cf
->
roŸ
);

4285 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4286 
sc
.
v¨übÀs
 = 
n
;

4288 #i‡(
NGX_PCRE
)

4289 i‡(
Æüs
 && 
˛cf
->
ªgex
) {

4290 
˛cf
->
Æüs
 = 
NGX_MAX_SIZE_T_VALUE
;

4291 
n
 = 1;

4295 i‡(
n
) {

4296 
sc
.
cf
 = cf;

4297 
sc
.
sour˚
 = &
˛cf
->
roŸ
;

4298 
sc
.
Àngths
 = &
˛cf
->
roŸ_Àngths
;

4299 
sc
.
vÆues
 = &
˛cf
->
roŸ_vÆues
;

4300 
sc
.
com∂ëe_Àngths
 = 1;

4301 
sc
.
com∂ëe_vÆues
 = 1;

4303 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4304  
NGX_CONF_ERROR
;

4308  
NGX_CONF_OK
;

4309 
	}
}

4312 
ngx_hâp_mëhod_«me_t
 
	gngx_mëhods_«mes
[] = {

4313 { (
u_ch¨
 *Ë"GET", (
uöt32_t
Ë~
NGX_HTTP_GET
 },

4314 { (
u_ch¨
 *Ë"HEAD", (
uöt32_t
Ë~
NGX_HTTP_HEAD
 },

4315 { (
u_ch¨
 *Ë"POST", (
uöt32_t
Ë~
NGX_HTTP_POST
 },

4316 { (
u_ch¨
 *Ë"PUT", (
uöt32_t
Ë~
NGX_HTTP_PUT
 },

4317 { (
u_ch¨
 *Ë"DELETE", (
uöt32_t
Ë~
NGX_HTTP_DELETE
 },

4318 { (
u_ch¨
 *Ë"MKCOL", (
uöt32_t
Ë~
NGX_HTTP_MKCOL
 },

4319 { (
u_ch¨
 *Ë"COPY", (
uöt32_t
Ë~
NGX_HTTP_COPY
 },

4320 { (
u_ch¨
 *Ë"MOVE", (
uöt32_t
Ë~
NGX_HTTP_MOVE
 },

4321 { (
u_ch¨
 *Ë"OPTIONS", (
uöt32_t
Ë~
NGX_HTTP_OPTIONS
 },

4322 { (
u_ch¨
 *Ë"PROPFIND", (
uöt32_t
Ë~
NGX_HTTP_PROPFIND
 },

4323 { (
u_ch¨
 *Ë"PROPPATCH", (
uöt32_t
Ë~
NGX_HTTP_PROPPATCH
 },

4324 { (
u_ch¨
 *Ë"LOCK", (
uöt32_t
Ë~
NGX_HTTP_LOCK
 },

4325 { (
u_ch¨
 *Ë"UNLOCK", (
uöt32_t
Ë~
NGX_HTTP_UNLOCK
 },

4326 { (
u_ch¨
 *Ë"PATCH", (
uöt32_t
Ë~
NGX_HTTP_PATCH
 },

4327 { 
NULL
, 0 }

4332 
	$ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4334 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
 = 
c⁄f
;

4336 *
rv
;

4337 *
mc⁄f
;

4338 
ngx_°r_t
 *
vÆue
;

4339 
ngx_uöt_t
 
i
;

4340 
ngx_c⁄f_t
 
ßve
;

4341 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4342 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

4343 
ngx_hâp_mëhod_«me_t
 *
«me
;

4344 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4346 i‡(
p˛cf
->
limô_ex˚±
) {

4350 
p˛cf
->
limô_ex˚±
 = 0xffffffff;

4352 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4354 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4355 
«me
 = 
ngx_mëhods_«mes
;Çame->name;Çame++) {

4357 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, 
«me
->name) == 0) {

4358 
p˛cf
->
limô_ex˚±
 &
«me
->
mëhod
;

4359 
√xt
;

4363 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4364 "övÆid mëhod \"%V\"", &
vÆue
[
i
]);

4365  
NGX_CONF_ERROR
;

4367 
√xt
:

4371 i‡(!(
p˛cf
->
limô_ex˚±
 & 
NGX_HTTP_GET
)) {

4372 
p˛cf
->
limô_ex˚±
 &(
uöt32_t
Ë~
NGX_HTTP_HEAD
;

4375 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4376 i‡(
˘x
 =
NULL
) {

4377  
NGX_CONF_ERROR
;

4380 
p˘x
 = 
cf
->
˘x
;

4381 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

4382 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

4384 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4385 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4386  
NGX_CONF_ERROR
;

4389 
i
 = 0; 
cf
->
cy˛e
->
moduÀs
[i]; i++) {

4390 i‡(
cf
->
cy˛e
->
moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4394 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x
;

4396 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4398 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4399 i‡(
mc⁄f
 =
NULL
) {

4400  
NGX_CONF_ERROR
;

4403 
˘x
->
loc_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

4408 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

4409 
p˛cf
->
limô_ex˚±_loc_c⁄f
 = 
˘x
->
loc_c⁄f
;

4410 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

4411 
˛cf
->
«me
 = 
p˛cf
->name;

4412 
˛cf
->
n⁄ame
 = 1;

4413 
˛cf
->
lmt_ex˝t
 = 1;

4415 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

4416  
NGX_CONF_ERROR
;

4419 
ßve
 = *
cf
;

4420 
cf
->
˘x
 = ctx;

4421 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LMT_CONF
;

4423 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4425 *
cf
 = 
ßve
;

4427  
rv
;

4428 
	}
}

4432 
	$ngx_hâp_c‹e_£t_aio
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4434 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4436 
ngx_°r_t
 *
vÆue
;

4438 i‡(
˛cf
->
aio
 !
NGX_CONF_UNSET
) {

4442 #i‡(
NGX_THREADS
)

4443 
˛cf
->
thªad_poﬁ
 = 
NULL
;

4444 
˛cf
->
thªad_poﬁ_vÆue
 = 
NULL
;

4447 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4449 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4450 
˛cf
->
aio
 = 
NGX_HTTP_AIO_OFF
;

4451  
NGX_CONF_OK
;

4454 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

4455 #i‡(
NGX_HAVE_FILE_AIO
)

4456 
˛cf
->
aio
 = 
NGX_HTTP_AIO_ON
;

4457  
NGX_CONF_OK
;

4459 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4462  
NGX_CONF_ERROR
;

4466 #i‡(
NGX_HAVE_AIO_SENDFILE
)

4468 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "sendfile") == 0) {

4469 
˛cf
->
aio
 = 
NGX_HTTP_AIO_ON
;

4471 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4474  
NGX_CONF_OK
;

4479 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "threads", 7) == 0

4480 && (
vÆue
[1].
Àn
 =7 || vÆue[1].
d©a
[7] == '='))

4482 #i‡(
NGX_THREADS
)

4483 
ngx_°r_t
 
«me
;

4484 
ngx_thªad_poﬁ_t
 *
ç
;

4485 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4486 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4488 
˛cf
->
aio
 = 
NGX_HTTP_AIO_THREADS
;

4490 i‡(
vÆue
[1].
Àn
 >= 8) {

4491 
«me
.
Àn
 = 
vÆue
[1].len - 8;

4492 
«me
.
d©a
 = 
vÆue
[1].data + 8;

4494 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4496 
ccv
.
cf
 = cf;

4497 
ccv
.
vÆue
 = &
«me
;

4498 
ccv
.
com∂ex_vÆue
 = &
cv
;

4500 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4501  
NGX_CONF_ERROR
;

4504 i‡(
cv
.
Àngths
 !
NULL
) {

4505 
˛cf
->
thªad_poﬁ_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

4506 (
ngx_hâp_com∂ex_vÆue_t
));

4507 i‡(
˛cf
->
thªad_poﬁ_vÆue
 =
NULL
) {

4508  
NGX_CONF_ERROR
;

4511 *
˛cf
->
thªad_poﬁ_vÆue
 = 
cv
;

4513  
NGX_CONF_OK
;

4516 
ç
 = 
	`ngx_thªad_poﬁ_add
(
cf
, &
«me
);

4519 
ç
 = 
	`ngx_thªad_poﬁ_add
(
cf
, 
NULL
);

4522 i‡(
ç
 =
NULL
) {

4523  
NGX_CONF_ERROR
;

4526 
˛cf
->
thªad_poﬁ
 = 
ç
;

4528  
NGX_CONF_OK
;

4530 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4533  
NGX_CONF_ERROR
;

4538 
	}
}

4542 
	$ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4544 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4546 
ngx_°r_t
 *
vÆue
;

4548 i‡(
˛cf
->
dúe˘io
 !
NGX_CONF_UNSET
) {

4552 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4554 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4555 
˛cf
->
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

4556  
NGX_CONF_OK
;

4559 
˛cf
->
dúe˘io
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

4560 i‡(
˛cf
->
dúe˘io
 =(
off_t
Ë
NGX_ERROR
) {

4564  
NGX_CONF_OK
;

4565 
	}
}

4569 
	$ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4571 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4573 
u_ch¨
 *
p
;

4574 
ngx_öt_t
 
ovîwrôe
;

4575 
ngx_°r_t
 *
vÆue
, 
uri
, 
¨gs
;

4576 
ngx_uöt_t
 
i
, 
n
;

4577 
ngx_hâp_îr_∑ge_t
 *
îr
;

4578 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4579 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4581 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4582 
˛cf
->
îr‹_∑ges
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4583 (
ngx_hâp_îr_∑ge_t
));

4584 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4585  
NGX_CONF_ERROR
;

4589 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4591 
i
 = 
cf
->
¨gs
->
√…s
 - 2;

4593 i‡(
vÆue
[
i
].
d©a
[0] == '=') {

4594 i‡(
i
 == 1) {

4595 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4596 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4597  
NGX_CONF_ERROR
;

4600 i‡(
vÆue
[
i
].
Àn
 > 1) {

4601 
ovîwrôe
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[1], vÆue[i].
Àn
 - 1);

4603 i‡(
ovîwrôe
 =
NGX_ERROR
) {

4604 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4605 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4606  
NGX_CONF_ERROR
;

4610 
ovîwrôe
 = 0;

4613 
n
 = 2;

4616 
ovîwrôe
 = -1;

4617 
n
 = 1;

4620 
uri
 = 
vÆue
[
cf
->
¨gs
->
√…s
 - 1];

4622 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4624 
ccv
.
cf
 = cf;

4625 
ccv
.
vÆue
 = &
uri
;

4626 
ccv
.
com∂ex_vÆue
 = &
cv
;

4628 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4629  
NGX_CONF_ERROR
;

4632 
	`ngx_°r_nuŒ
(&
¨gs
);

4634 i‡(
cv
.
Àngths
 =
NULL
 && 
uri
.
Àn
 && uri.
d©a
[0] == '/') {

4635 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
uri
.
d©a
, '?');

4637 i‡(
p
) {

4638 
cv
.
vÆue
.
Àn
 = 
p
 - 
uri
.
d©a
;

4639 
cv
.
vÆue
.
d©a
 = 
uri
.data;

4640 
p
++;

4641 
¨gs
.
Àn
 = (
uri
.
d©a
 + uri.ÀnË- 
p
;

4642 
¨gs
.
d©a
 = 
p
;

4646 
i
 = 1; i < 
cf
->
¨gs
->
√…s
 - 
n
; i++) {

4647 
îr
 = 
	`ngx_¨øy_push
(
˛cf
->
îr‹_∑ges
);

4648 i‡(
îr
 =
NULL
) {

4649  
NGX_CONF_ERROR
;

4652 
îr
->
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

4654 i‡(
îr
->
°©us
 =
NGX_ERROR
 ||Érr->status == 499) {

4655 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4656 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4657  
NGX_CONF_ERROR
;

4660 i‡(
îr
->
°©us
 < 300 ||Érr->status > 599) {

4661 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4663 &
vÆue
[
i
]);

4664  
NGX_CONF_ERROR
;

4667 
îr
->
ovîwrôe
 = overwrite;

4669 i‡(
ovîwrôe
 == -1) {

4670 
îr
->
°©us
) {

4671 
NGX_HTTP_TO_HTTPS
:

4672 
NGX_HTTPS_CERT_ERROR
:

4673 
NGX_HTTPS_NO_CERT
:

4674 
îr
->
ovîwrôe
 = 
NGX_HTTP_BAD_REQUEST
;

4678 
îr
->
vÆue
 = 
cv
;

4679 
îr
->
¨gs
 =árgs;

4682  
NGX_CONF_OK
;

4683 
	}
}

4687 
	$ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4689 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4691 
time_t
 
öa˘ive
;

4692 
ngx_°r_t
 *
vÆue
, 
s
;

4693 
ngx_öt_t
 
max
;

4694 
ngx_uöt_t
 
i
;

4696 i‡(
˛cf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

4700 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4702 
max
 = 0;

4703 
öa˘ive
 = 60;

4705 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4707 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

4709 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

4710 i‡(
max
 <= 0) {

4711 
Áûed
;

4717 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

4719 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

4720 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

4722 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

4723 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

4724 
Áûed
;

4730 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4732 
˛cf
->
›í_fûe_ˇche
 = 
NULL
;

4737 
Áûed
:

4739 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4741 &
vÆue
[
i
]);

4742  
NGX_CONF_ERROR
;

4745 i‡(
˛cf
->
›í_fûe_ˇche
 =
NULL
) {

4746  
NGX_CONF_OK
;

4749 i‡(
max
 == 0) {

4750 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4752  
NGX_CONF_ERROR
;

4755 
˛cf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

4756 i‡(
˛cf
->
›í_fûe_ˇche
) {

4757  
NGX_CONF_OK
;

4760  
NGX_CONF_ERROR
;

4761 
	}
}

4765 
	$ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4767 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4769  
	`ngx_log_£t_log
(
cf
, &
˛cf
->
îr‹_log
);

4770 
	}
}

4774 
	$ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4776 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4778 
ngx_°r_t
 *
vÆue
;

4780 i‡(
˛cf
->
kì∑live_timeout
 !
NGX_CONF_UNSET_MSEC
) {

4784 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4786 
˛cf
->
kì∑live_timeout
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

4788 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

4792 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4793  
NGX_CONF_OK
;

4796 
˛cf
->
kì∑live_hódî
 = 
	`ngx_∑r£_time
(&
vÆue
[2], 1);

4798 i‡(
˛cf
->
kì∑live_hódî
 =(
time_t
Ë
NGX_ERROR
) {

4802  
NGX_CONF_OK
;

4803 
	}
}

4807 
	$ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4809 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4811 i‡(
˛cf
->
öã∫Æ
 !
NGX_CONF_UNSET
) {

4815 
˛cf
->
öã∫Æ
 = 1;

4817  
NGX_CONF_OK
;

4818 
	}
}

4822 
	$ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4824 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4826 
ngx_°r_t
 *
vÆue
;

4828 i‡(
˛cf
->
ªsﬁvî
) {

4832 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4834 
˛cf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

4835 i‡(
˛cf
->
ªsﬁvî
 =
NULL
) {

4836  
NGX_CONF_ERROR
;

4839  
NGX_CONF_OK
;

4840 
	}
}

4843 #i‡(
NGX_HTTP_GZIP
)

4846 
	$ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4848 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4850 #i‡(
NGX_PCRE
)

4852 
ngx_°r_t
 *
vÆue
;

4853 
ngx_uöt_t
 
i
;

4854 
ngx_ªgex_ñt_t
 *
ª
;

4855 
ngx_ªgex_compûe_t
 
rc
;

4856 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4858 i‡(
˛cf
->
gzù_dißbÀ
 =
NGX_CONF_UNSET_PTR
) {

4859 
˛cf
->
gzù_dißbÀ
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

4860 (
ngx_ªgex_ñt_t
));

4861 i‡(
˛cf
->
gzù_dißbÀ
 =
NULL
) {

4862  
NGX_CONF_ERROR
;

4866 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4868 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4870 
rc
.
poﬁ
 = 
cf
->pool;

4871 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4872 
rc
.
îr
.
d©a
 = 
îr°r
;

4874 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4876 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

4877 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

4881 #i‡(
NGX_HTTP_DEGRADATION
)

4883 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

4884 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

4890 
ª
 = 
	`ngx_¨øy_push
(
˛cf
->
gzù_dißbÀ
);

4891 i‡(
ª
 =
NULL
) {

4892  
NGX_CONF_ERROR
;

4895 
rc
.
∑âîn
 = 
vÆue
[
i
];

4896 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4898 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

4899 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

4900  
NGX_CONF_ERROR
;

4903 
ª
->
ªgex
 = 
rc
.regex;

4904 
ª
->
«me
 = 
vÆue
[
i
].
d©a
;

4907  
NGX_CONF_OK
;

4910 
ngx_°r_t
 *
vÆue
;

4911 
ngx_uöt_t
 
i
;

4913 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4915 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4916 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

4917 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

4921 #i‡(
NGX_HTTP_DEGRADATION
)

4923 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

4924 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

4930 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4934  
NGX_CONF_ERROR
;

4937  
NGX_CONF_OK
;

4940 
	}
}

4945 #i‡(
NGX_HAVE_OPENAT
)

4948 
	$ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4950 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4952 
ngx_°r_t
 *
vÆue
;

4953 
ngx_uöt_t
 
i
;

4954 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4956 i‡(
˛cf
->
dißbÀ_symlöks
 !
NGX_CONF_UNSET_UINT
) {

4960 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4962 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4964 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4965 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

4969 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "if_not_owner") == 0) {

4970 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_NOTOWNER
;

4974 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "on") == 0) {

4975 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_ON
;

4979 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "from=", 5) == 0) {

4980 
vÆue
[
i
].
Àn
 -= 5;

4981 
vÆue
[
i
].
d©a
 += 5;

4983 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4985 
ccv
.
cf
 = cf;

4986 
ccv
.
vÆue
 = &vÆue[
i
];

4987 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

4988 (
ngx_hâp_com∂ex_vÆue_t
));

4989 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

4990  
NGX_CONF_ERROR
;

4993 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4994  
NGX_CONF_ERROR
;

4997 
˛cf
->
dißbÀ_symlöks_‰om
 = 
ccv
.
com∂ex_vÆue
;

5002 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5003 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5004  
NGX_CONF_ERROR
;

5007 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_CONF_UNSET_UINT
) {

5008 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5011 &
cmd
->
«me
);

5012  
NGX_CONF_ERROR
;

5015 i‡(
cf
->
¨gs
->
√…s
 == 2) {

5016 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NULL
;

5017  
NGX_CONF_OK
;

5020 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NGX_CONF_UNSET_PTR
) {

5021 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5023 &
vÆue
[1], &value[2]);

5024  
NGX_CONF_ERROR
;

5027 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

5028 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5030  
NGX_CONF_ERROR
;

5033  
NGX_CONF_OK
;

5034 
	}
}

5040 
	$ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5042 #i‡(
NGX_FREEBSD
)

5043 
ssize_t
 *
≈
 = 
d©a
;

5045 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

5046 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5049 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

5051  
NGX_CONF_ERROR
;

5054 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

5055 
ssize_t
 *
≈
 = 
d©a
;

5057 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

5060 *
≈
 = 0;

5064  
NGX_CONF_OK
;

5065 
	}
}

5069 
	$ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5071 
size_t
 *
•
 = 
d©a
;

5073 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

5074 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5076 
NGX_MIN_POOL_SIZE
);

5077  
NGX_CONF_ERROR
;

5080 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

5081 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5083 
NGX_POOL_ALIGNMENT
);

5084  
NGX_CONF_ERROR
;

5087  
NGX_CONF_OK
;

5088 
	}
}

	@src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

16 #i‡(
NGX_THREADS
)

17 
	~<ngx_thªad_poﬁ.h
>

18 #ñi‡(
NGX_COMPAT
)

19 
ngx_thªad_poﬁ_s
 
	tngx_thªad_poﬁ_t
;

23 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

24 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

25 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

26 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

27 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

28 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

29 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

30 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

31 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

34 
	#NGX_HTTP_AIO_OFF
 0

	)

35 
	#NGX_HTTP_AIO_ON
 1

	)

36 
	#NGX_HTTP_AIO_THREADS
 2

	)

39 
	#NGX_HTTP_SATISFY_ALL
 0

	)

40 
	#NGX_HTTP_SATISFY_ANY
 1

	)

43 
	#NGX_HTTP_LINGERING_OFF
 0

	)

44 
	#NGX_HTTP_LINGERING_ON
 1

	)

45 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

48 
	#NGX_HTTP_IMS_OFF
 0

	)

49 
	#NGX_HTTP_IMS_EXACT
 1

	)

50 
	#NGX_HTTP_IMS_BEFORE
 2

	)

53 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

54 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

55 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

58 
	#NGX_HTTP_SERVER_TOKENS_OFF
 0

	)

59 
	#NGX_HTTP_SERVER_TOKENS_ON
 1

	)

60 
	#NGX_HTTP_SERVER_TOKENS_BUILD
 2

	)

63 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

64 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

68 
ngx_sockaddr_t
 
	msockaddr
;

69 
sockÀn_t
 
	msockÀn
;

71 
	m£t
:1;

72 
	mdeÁu…_£rvî
:1;

73 
	mböd
:1;

74 
	mwûdˇrd
:1;

75 
	ms¶
:1;

76 
	mhâp2
:1;

77 #i‡(
NGX_HAVE_INET6
)

78 
	mùv6⁄ly
:1;

80 
	mde„ºed_ac˚±
:1;

81 
	mªu£p‹t
:1;

82 
	mso_kì∑live
:2;

83 
	m¥oxy_¥Ÿocﬁ
:1;

85 
	mbacklog
;

86 
	mrcvbuf
;

87 
	m¢dbuf
;

88 #i‡(
NGX_HAVE_SETFIB
)

89 
	m£tfib
;

91 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

92 
	mÁ°›í
;

94 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

95 
	mt˝_kìpidÀ
;

96 
	mt˝_kìpötvl
;

97 
	mt˝_kìp˙t
;

100 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

101 *
	mac˚±_fûãr
;

104 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

105 } 
	tngx_hâp_li°í_›t_t
;

109 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

111 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

113 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

114 
	mNGX_HTTP_REWRITE_PHASE
,

115 
	mNGX_HTTP_POST_REWRITE_PHASE
,

117 
	mNGX_HTTP_PREACCESS_PHASE
,

119 
	mNGX_HTTP_ACCESS_PHASE
,

120 
	mNGX_HTTP_POST_ACCESS_PHASE
,

122 
	mNGX_HTTP_PRECONTENT_PHASE
,

124 
	mNGX_HTTP_CONTENT_PHASE
,

126 
	mNGX_HTTP_LOG_PHASE


127 } 
	tngx_hâp_pha£s
;

129 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

131 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

132 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

134 
	sngx_hâp_pha£_h™dÀr_s
 {

135 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

136 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

137 
ngx_uöt_t
 
√xt
;

142 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

143 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

144 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

145 } 
	tngx_hâp_pha£_ígöe_t
;

149 
ngx_¨øy_t
 
h™dÀrs
;

150 } 
	tngx_hâp_pha£_t
;

154 
ngx_¨øy_t
 
£rvîs
;

156 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

158 
ngx_hash_t
 
hódîs_ö_hash
;

160 
ngx_hash_t
 
v¨übÀs_hash
;

162 
ngx_¨øy_t
 
v¨übÀs
;

163 
ngx_¨øy_t
 
¥efix_v¨übÀs
;

164 
ngx_uöt_t
 
nˇ±uªs
;

166 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

167 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

169 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

170 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

172 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

174 
ngx_¨øy_t
 *
p‹ts
;

176 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

177 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

182 
ngx_¨øy_t
 
£rvî_«mes
;

185 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

187 
u_ch¨
 *
fûe_«me
;

188 
ngx_uöt_t
 
löe
;

190 
ngx_°r_t
 
£rvî_«me
;

192 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

193 
size_t
 
ªque°_poﬁ_size
;

194 
size_t
 
˛õ¡_hódî_buf„r_size
;

196 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

198 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

200 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

201 
ngx_Êag_t
 
mîge_¶ashes
;

202 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

204 
li°í
:1;

205 #i‡(
NGX_PCRE
)

206 
ˇ±uªs
:1;

209 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

210 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

217 #i‡(
NGX_PCRE
)

218 
ngx_hâp_ªgex_t
 *
ªgex
;

220 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

221 
ngx_°r_t
 
«me
;

222 } 
	tngx_hâp_£rvî_«me_t
;

226 
ngx_hash_comböed_t
 
«mes
;

228 
ngx_uöt_t
 
ƒegex
;

229 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

230 } 
	tngx_hâp_vútuÆ_«mes_t
;

233 
	sngx_hâp_addr_c⁄f_s
 {

235 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

237 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

239 
s¶
:1;

240 
hâp2
:1;

241 
¥oxy_¥Ÿocﬁ
:1;

246 
ö_addr_t
 
addr
;

247 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

248 } 
	tngx_hâp_ö_addr_t
;

251 #i‡(
NGX_HAVE_INET6
)

254 
ö6_addr
 
addr6
;

255 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

256 } 
	tngx_hâp_ö6_addr_t
;

263 *
addrs
;

264 
ngx_uöt_t
 
«ddrs
;

265 } 
	tngx_hâp_p‹t_t
;

269 
ngx_öt_t
 
Ámûy
;

270 
ö_p‹t_t
 
p‹t
;

271 
ngx_¨øy_t
 
addrs
;

272 } 
	tngx_hâp_c⁄f_p‹t_t
;

276 
ngx_hâp_li°í_›t_t
 
›t
;

278 
ngx_hash_t
 
hash
;

279 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

280 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

282 #i‡(
NGX_PCRE
)

283 
ngx_uöt_t
 
ƒegex
;

284 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

288 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

289 
ngx_¨øy_t
 
£rvîs
;

290 } 
	tngx_hâp_c⁄f_addr_t
;

294 
ngx_öt_t
 
°©us
;

295 
ngx_öt_t
 
ovîwrôe
;

296 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

297 
ngx_°r_t
 
¨gs
;

298 } 
	tngx_hâp_îr_∑ge_t
;

301 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

302 
ngx_°r_t
 
«me
;

304 #i‡(
NGX_PCRE
)

305 
ngx_hâp_ªgex_t
 *
ªgex
;

308 
n⁄ame
:1;

309 
lmt_ex˝t
:1;

310 
«med
:1;

312 
exa˘_m©ch
:1;

313 
n‹egex
:1;

315 
auto_ªdúe˘
:1;

316 #i‡(
NGX_HTTP_GZIP
)

317 
gzù_dißbÀ_msõ6
:2;

318 
gzù_dißbÀ_degød©i⁄
:2;

321 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

322 #i‡(
NGX_PCRE
)

323 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

327 **
loc_c⁄f
;

329 
uöt32_t
 
limô_ex˚±
;

330 **
limô_ex˚±_loc_c⁄f
;

332 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

335 
size_t
 
Æüs
;

336 
ngx_°r_t
 
roŸ
;

337 
ngx_°r_t
 
po°_a˘i⁄
;

339 
ngx_¨øy_t
 *
roŸ_Àngths
;

340 
ngx_¨øy_t
 *
roŸ_vÆues
;

342 
ngx_¨øy_t
 *
ty≥s
;

343 
ngx_hash_t
 
ty≥s_hash
;

344 
ngx_°r_t
 
deÁu…_ty≥
;

346 
off_t
 
˛õ¡_max_body_size
;

347 
off_t
 
dúe˘io
;

348 
off_t
 
dúe˘io_Æignmít
;

350 
size_t
 
˛õ¡_body_buf„r_size
;

351 
size_t
 
£nd_low©
;

352 
size_t
 
po°p⁄e_ouçut
;

353 
size_t
 
limô_øã
;

354 
size_t
 
limô_øã_a·î
;

355 
size_t
 
£ndfûe_max_chunk
;

356 
size_t
 
ªad_ahód
;

357 
size_t
 
subªque°_ouçut_buf„r_size
;

360 
ngx_m£c_t
 
˛õ¡_body_timeout
;

361 
ngx_m£c_t
 
£nd_timeout
;

362 
ngx_m£c_t
 
kì∑live_timeout
;

363 
ngx_m£c_t
 
lögîög_time
;

364 
ngx_m£c_t
 
lögîög_timeout
;

365 
ngx_m£c_t
 
ªsﬁvî_timeout
;

367 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

369 
time_t
 
kì∑live_hódî
;

371 
ngx_uöt_t
 
kì∑live_ªque°s
;

372 
ngx_uöt_t
 
kì∑live_dißbÀ
;

373 
ngx_uöt_t
 
ßtisfy
;

374 
ngx_uöt_t
 
lögîög_˛o£
;

375 
ngx_uöt_t
 
if_modifõd_sö˚
;

376 
ngx_uöt_t
 
max_ønges
;

377 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

379 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

381 
ngx_Êag_t
 
öã∫Æ
;

382 
ngx_Êag_t
 
£ndfûe
;

383 
ngx_Êag_t
 
aio
;

384 
ngx_Êag_t
 
aio_wrôe
;

385 
ngx_Êag_t
 
t˝_n›ush
;

386 
ngx_Êag_t
 
t˝_nodñay
;

387 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

388 
ngx_Êag_t
 
absﬁuã_ªdúe˘
;

389 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

390 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

391 
ngx_Êag_t
 
msõ_∑ddög
;

392 
ngx_Êag_t
 
msõ_ª‰esh
;

393 
ngx_Êag_t
 
log_nŸ_found
;

394 
ngx_Êag_t
 
log_subªque°
;

395 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

396 
ngx_uöt_t
 
£rvî_tokís
;

397 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

398 
ngx_Êag_t
 
ëag
;

400 #i‡(
NGX_HTTP_GZIP
)

401 
ngx_Êag_t
 
gzù_v¨y
;

403 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

404 
ngx_uöt_t
 
gzù_¥oxõd
;

406 #i‡(
NGX_PCRE
)

407 
ngx_¨øy_t
 *
gzù_dißbÀ
;

411 #i‡(
NGX_THREADS
 || 
NGX_COMPAT
)

412 
ngx_thªad_poﬁ_t
 *
thªad_poﬁ
;

413 
ngx_hâp_com∂ex_vÆue_t
 *
thªad_poﬁ_vÆue
;

416 #i‡(
NGX_HAVE_OPENAT
)

417 
ngx_uöt_t
 
dißbÀ_symlöks
;

418 
ngx_hâp_com∂ex_vÆue_t
 *
dißbÀ_symlöks_‰om
;

421 
ngx_¨øy_t
 *
îr‹_∑ges
;

423 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

425 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

426 
time_t
 
›í_fûe_ˇche_vÆid
;

427 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

428 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

429 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

431 
ngx_log_t
 *
îr‹_log
;

433 
ngx_uöt_t
 
ty≥s_hash_max_size
;

434 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

436 
ngx_queue_t
 *
loˇti⁄s
;

439 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

445 
ngx_queue_t
 
queue
;

446 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

447 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

448 
ngx_°r_t
 *
«me
;

449 
u_ch¨
 *
fûe_«me
;

450 
ngx_uöt_t
 
löe
;

451 
ngx_queue_t
 
li°
;

452 } 
	tngx_hâp_loˇti⁄_queue_t
;

455 
	sngx_hâp_loˇti⁄_åì_node_s
 {

456 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

457 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

458 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

460 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

461 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

463 
u_ch¨
 
auto_ªdúe˘
;

464 
u_ch¨
 
Àn
;

465 
u_ch¨
 
«me
[1];

469 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

470 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

471 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

472 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

473 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

474 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

475 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

476 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

477 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

478 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

479 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

480 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

481 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

482 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

483 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

486 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

487 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

488 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

489 
ngx_öt_t
 
	`ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
);

490 
	`ngx_hâp_wók_ëag
(
ngx_hâp_ªque°_t
 *
r
);

491 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

492 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

493 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

494 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

495 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

496 #i‡(
NGX_HTTP_GZIP
)

497 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

501 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

502 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

503 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

504 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

505 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

506 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

509 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

512 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

513 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

514 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

515 
	$ngx_öt_t
 (*
	tngx_hâp_ªque°_body_fûãr_±
)

516 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

519 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

520 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

521 
ngx_öt_t
 
	`ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

522 
ngx_chaö_t
 *
chaö
);

525 
ngx_öt_t
 
	`ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

526 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
);

528 
ngx_öt_t
 
	`ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

529 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

530 
ªcursive
);

533 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

535 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

537 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

540 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

542 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

543 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

544 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

545 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

546 
	}

	)
}

548 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

550 
r
->
Ælow_ønges
 = 0; \

551 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

552 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

553 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

554 }

	)

556 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

558 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

559 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

560 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

561 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

562 }

	)

564 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

566 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

567 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

568 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

569 }

	)

571 
	#ngx_hâp_˛ór_ëag
(
r
) \

573 i‡(
r
->
hódîs_out
.
ëag
) { \

574 
r
->
hódîs_out
.
ëag
->
hash
 = 0; \

575 
r
->
hódîs_out
.
ëag
 = 
NULL
; \

576 }

	)

	@src/http/ngx_http_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

14 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_ˇche_t
 *
c
);

16 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
);

17 
ngx_hâp_fûe_ˇche_lock_waô
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_ˇche_t
 *
c
);

19 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
,

20 
ngx_hâp_ˇche_t
 *
c
);

21 
ssize_t
 
ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_hâp_ˇche_t
 *
c
);

23 #i‡(
NGX_HAVE_FILE_AIO
)

24 
ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

26 #i‡(
NGX_THREADS
)

27 
ngx_öt_t
 
ngx_hâp_ˇche_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
,

28 
ngx_fûe_t
 *
fûe
);

29 
ngx_hâp_ˇche_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

31 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

32 
ngx_hâp_ˇche_t
 *
c
);

33 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_∑th_t
 *
∑th
);

35 
ngx_hâp_fûe_ˇche_node_t
 *

36 
ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
);

37 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

38 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

39 
ngx_hâp_fûe_ˇche_v¨y
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
v¨y
,

40 
size_t
 
Àn
, 
u_ch¨
 *
hash
);

41 
ngx_hâp_fûe_ˇche_v¨y_hódî
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_md5_t
 *
md5
, 
ngx_°r_t
 *
«me
);

43 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ª›í
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_ˇche_t
 *
c
);

45 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_upd©e_v¨ü¡
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_ˇche_t
 *
c
);

47 
ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
);

48 
time_t
 
ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

49 
time_t
 
ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

50 
ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

51 
ngx_queue_t
 *
q
, 
u_ch¨
 *
«me
);

52 
ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

53 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

55 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
,

56 
ngx_°r_t
 *
∑th
);

57 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_dúe˘‹y
(
ngx_åì_˘x_t
 *
˘x
,

58 
ngx_°r_t
 *
∑th
);

59 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
,

60 
ngx_°r_t
 *
∑th
);

61 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

62 
ngx_hâp_ˇche_t
 *
c
);

63 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
,

64 
ngx_°r_t
 *
∑th
);

65 
ngx_hâp_fûe_ˇche_£t_w©îm¨k
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

68 
ngx_°r_t
 
	gngx_hâp_ˇche_°©us
[] = {

69 
ngx_°rög
("MISS"),

70 
ngx_°rög
("BYPASS"),

71 
ngx_°rög
("EXPIRED"),

72 
ngx_°rög
("STALE"),

73 
ngx_°rög
("UPDATING"),

74 
ngx_°rög
("REVALIDATED"),

75 
ngx_°rög
("HIT")

79 
u_ch¨
 
	gngx_hâp_fûe_ˇche_key
[] = { 
LF
, 'K', 'E', 'Y', ':', ' ' };

82 
ngx_öt_t


83 
	$ngx_hâp_fûe_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

85 
ngx_hâp_fûe_ˇche_t
 *
oˇche
 = 
d©a
;

87 
size_t
 
Àn
;

88 
ngx_uöt_t
 
n
;

89 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

91 
ˇche
 = 
shm_z⁄e
->
d©a
;

93 i‡(
oˇche
) {

94 i‡(
	`ngx_°rcmp
(
ˇche
->
∑th
->
«me
.
d©a
, 
oˇche
->path->name.data) != 0) {

95 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

98 &
shm_z⁄e
->
shm
.
«me
, &
ˇche
->
∑th
->name,

99 &
oˇche
->
∑th
->
«me
);

101  
NGX_ERROR
;

104 
n
 = 0;Ç < 
NGX_MAX_PATH_LEVEL
;Ç++) {

105 i‡(
ˇche
->
∑th
->
Àvñ
[
n
] !
oˇche
->path->level[n]) {

106 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

108 &
shm_z⁄e
->
shm
.
«me
);

109  
NGX_ERROR
;

113 
ˇche
->
sh
 = 
oˇche
->sh;

115 
ˇche
->
shpoﬁ
 = 
oˇche
->shpool;

116 
ˇche
->
bsize
 = 
oˇche
->bsize;

118 
ˇche
->
max_size
 /ˇche->
bsize
;

120 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

121 
ˇche
->
∑th
->
lﬂdî
 = 
NULL
;

124  
NGX_OK
;

127 
ˇche
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

129 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

130 
ˇche
->
sh
 = cache->
shpoﬁ
->
d©a
;

131 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

132 
ˇche
->
max_size
 /ˇche->
bsize
;

134  
NGX_OK
;

137 
ˇche
->
sh
 = 
	`ngx_¶ab_Æloc
(ˇche->
shpoﬁ
, (
ngx_hâp_fûe_ˇche_sh_t
));

138 i‡(
ˇche
->
sh
 =
NULL
) {

139  
NGX_ERROR
;

142 
ˇche
->
shpoﬁ
->
d©a
 = cache->
sh
;

144 
	`ngx_rbåì_öô
(&
ˇche
->
sh
->
rbåì
, &ˇche->sh->
£¡öñ
,

145 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
);

147 
	`ngx_queue_öô
(&
ˇche
->
sh
->
queue
);

149 
ˇche
->
sh
->
cﬁd
 = 1;

150 
ˇche
->
sh
->
lﬂdög
 = 0;

151 
ˇche
->
sh
->
size
 = 0;

152 
ˇche
->
sh
->
cou¡
 = 0;

153 
ˇche
->
sh
->
w©îm¨k
 = (
ngx_uöt_t
) -1;

155 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

157 
ˇche
->
max_size
 /ˇche->
bsize
;

159 
Àn
 = (" i¿ˇchêkey†z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

161 
ˇche
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(ˇche->shpoﬁ, 
Àn
);

162 i‡(
ˇche
->
shpoﬁ
->
log_˘x
 =
NULL
) {

163  
NGX_ERROR
;

166 
	`ngx_•rötf
(
ˇche
->
shpoﬁ
->
log_˘x
, " in cache keys zone \"%V\"%Z",

167 &
shm_z⁄e
->
shm
.
«me
);

169 
ˇche
->
shpoﬁ
->
log_nomem
 = 0;

171  
NGX_OK
;

172 
	}
}

175 
ngx_öt_t


176 
	$ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
)

178 
ngx_hâp_ˇche_t
 *
c
;

180 
c
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ˇche_t
));

181 i‡(
c
 =
NULL
) {

182  
NGX_ERROR
;

185 i‡(
	`ngx_¨øy_öô
(&
c
->
keys
, 
r
->
poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
) {

186  
NGX_ERROR
;

189 
r
->
ˇche
 = 
c
;

190 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

191 
c
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

193  
NGX_OK
;

194 
	}
}

197 
ngx_öt_t


198 
	$ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

200 
ngx_hâp_ˇche_t
 *
c
;

201 
ngx_poﬁ_˛ónup_t
 *
˛n
;

202 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

204 
c
 = 
r
->
ˇche
;

205 
ˇche
 = 
c
->
fûe_ˇche
;

207 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

208 i‡(
˛n
 =
NULL
) {

209  
NGX_ERROR
;

212 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

213 
˛n
->
d©a
 = 
c
;

215 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

216  
NGX_ERROR
;

219 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

220  
NGX_ERROR
;

223  
NGX_OK
;

224 
	}
}

228 
	$ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

230 
size_t
 
Àn
;

231 
ngx_°r_t
 *
key
;

232 
ngx_uöt_t
 
i
;

233 
ngx_md5_t
 
md5
;

234 
ngx_hâp_ˇche_t
 *
c
;

236 
c
 = 
r
->
ˇche
;

238 
Àn
 = 0;

240 
	`ngx_¸c32_öô
(
c
->
¸c32
);

241 
	`ngx_md5_öô
(&
md5
);

243 
key
 = 
c
->
keys
.
ñts
;

244 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

245 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

246 "hâ∞ˇchêkey: \"%V\"", &
key
[
i
]);

248 
Àn
 +
key
[
i
].len;

250 
	`ngx_¸c32_upd©e
(&
c
->
¸c32
, 
key
[
i
].
d©a
, key[i].
Àn
);

251 
	`ngx_md5_upd©e
(&
md5
, 
key
[
i
].
d©a
, key[i].
Àn
);

254 
c
->
hódî_°¨t
 = (
ngx_hâp_fûe_ˇche_hódî_t
)

255 + (
ngx_hâp_fûe_ˇche_key
Ë+ 
Àn
 + 1;

257 
	`ngx_¸c32_föÆ
(
c
->
¸c32
);

258 
	`ngx_md5_föÆ
(
c
->
key
, &
md5
);

260 
	`ngx_mem˝y
(
c
->
maö
, c->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

261 
	}
}

264 
ngx_öt_t


265 
	$ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
)

267 
ngx_öt_t
 
rc
, 
rv
;

268 
ngx_uöt_t
 
ã°
;

269 
ngx_hâp_ˇche_t
 *
c
;

270 
ngx_poﬁ_˛ónup_t
 *
˛n
;

271 
ngx_›í_fûe_öfo_t
 
of
;

272 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

273 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

275 
c
 = 
r
->
ˇche
;

277 i‡(
c
->
waôög
) {

278  
NGX_AGAIN
;

281 i‡(
c
->
ªadög
) {

282  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

285 
ˇche
 = 
c
->
fûe_ˇche
;

287 i‡(
c
->
node
 =
NULL
) {

288 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

289 i‡(
˛n
 =
NULL
) {

290  
NGX_ERROR
;

293 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

294 
˛n
->
d©a
 = 
c
;

297 
rc
 = 
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
);

299 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300 "hâ∞fûêˇchêexi°s: %òe:%d", 
rc
, 
c
->
exi°s
);

302 i‡(
rc
 =
NGX_ERROR
) {

303  
rc
;

306 i‡(
rc
 =
NGX_AGAIN
) {

307  
NGX_HTTP_CACHE_SCARCE
;

310 i‡(
rc
 =
NGX_OK
) {

312 i‡(
c
->
îr‹
) {

313  
c
->
îr‹
;

316 
c
->
ãmp_fûe
 = 1;

317 
ã°
 = 
c
->
exi°s
 ? 1 : 0;

318 
rv
 = 
NGX_DECLINED
;

322 
ã°
 = 
ˇche
->
sh
->
cﬁd
 ? 1 : 0;

324 i‡(
c
->
mö_u£s
 > 1) {

326 i‡(!
ã°
) {

327  
NGX_HTTP_CACHE_SCARCE
;

330 
rv
 = 
NGX_HTTP_CACHE_SCARCE
;

333 
c
->
ãmp_fûe
 = 1;

334 
rv
 = 
NGX_DECLINED
;

338 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

339  
NGX_ERROR
;

342 i‡(!
ã°
) {

343 
d⁄e
;

346 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

348 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

350 
of
.
uniq
 = 
c
->uniq;

351 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

352 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

353 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

354 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

355 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

357 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
c
->
fûe
.
«me
, &
of
, 
r
->
poﬁ
)

358 !
NGX_OK
)

360 
of
.
îr
) {

363  
NGX_ERROR
;

365 
NGX_ENOENT
:

366 
NGX_ENOTDIR
:

367 
d⁄e
;

370 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

371 
ngx_›í_fûe_n
 " \"%s\" faûed", 
c
->
fûe
.
«me
.
d©a
);

372  
NGX_ERROR
;

376 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

377 "hâ∞fûêˇchêfd: %d", 
of
.
fd
);

379 
c
->
fûe
.
fd
 = 
of
.fd;

380 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

381 
c
->
uniq
 = 
of
.uniq;

382 
c
->
Àngth
 = 
of
.
size
;

383 
c
->
fs_size
 = (
of
.fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

385 
c
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, c->
body_°¨t
);

386 i‡(
c
->
buf
 =
NULL
) {

387  
NGX_ERROR
;

390  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

392 
d⁄e
:

394 i‡(
rv
 =
NGX_DECLINED
) {

395  
	`ngx_hâp_fûe_ˇche_lock
(
r
, 
c
);

398  
rv
;

399 
	}
}

402 
ngx_öt_t


403 
	$ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

405 
ngx_m£c_t
 
now
, 
timî
;

406 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

408 i‡(!
c
->
lock
) {

409  
NGX_DECLINED
;

412 
now
 = 
ngx_cuºít_m£c
;

414 
ˇche
 = 
c
->
fûe_ˇche
;

416 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

418 
timî
 = 
c
->
node
->
lock_time
 - 
now
;

420 i‡(!
c
->
node
->
upd©ög
 || (
ngx_m£c_öt_t
Ë
timî
 <= 0) {

421 
c
->
node
->
upd©ög
 = 1;

422 
c
->
node
->
lock_time
 = 
now
 + c->
lock_age
;

423 
c
->
upd©ög
 = 1;

424 
c
->
lock_time
 = c->
node
->lock_time;

427 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

429 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

431 
c
->
upd©ög
, c->
waô_time
);

433 i‡(
c
->
upd©ög
) {

434  
NGX_DECLINED
;

437 i‡(
c
->
lock_timeout
 == 0) {

438  
NGX_HTTP_CACHE_SCARCE
;

441 
c
->
waôög
 = 1;

443 i‡(
c
->
waô_time
 == 0) {

444 
c
->
waô_time
 = 
now
 + c->
lock_timeout
;

446 
c
->
waô_evít
.
h™dÀr
 = 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
;

447 
c
->
waô_evít
.
d©a
 = 
r
;

448 
c
->
waô_evít
.
log
 = 
r
->
c⁄√˘i⁄
->log;

451 
timî
 = 
c
->
waô_time
 - 
now
;

453 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

455 
r
->
maö
->
blocked
++;

457  
NGX_AGAIN
;

458 
	}
}

462 
	$ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
)

464 
ngx_c⁄√˘i⁄_t
 *
c
;

465 
ngx_hâp_ªque°_t
 *
r
;

467 
r
 = 
ev
->
d©a
;

468 
c
 = 
r
->
c⁄√˘i⁄
;

470 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

472 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

473 "hâ∞fûêˇchêwaô: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

475 
	`ngx_hâp_fûe_ˇche_lock_waô
(
r
,Ñ->
ˇche
);

477 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

478 
	}
}

482 
	$ngx_hâp_fûe_ˇche_lock_waô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

484 
ngx_uöt_t
 
waô
;

485 
ngx_m£c_t
 
now
, 
timî
;

486 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

488 
now
 = 
ngx_cuºít_m£c
;

490 
timî
 = 
c
->
waô_time
 - 
now
;

492 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

493 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

495 
c
->
lock_timeout
 = 0;

496 
wakeup
;

499 
ˇche
 = 
c
->
fûe_ˇche
;

500 
waô
 = 0;

502 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

504 
timî
 = 
c
->
node
->
lock_time
 - 
now
;

506 i‡(
c
->
node
->
upd©ög
 && (
ngx_m£c_öt_t
Ë
timî
 > 0) {

507 
waô
 = 1;

510 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

512 i‡(
waô
) {

513 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

517 
wakeup
:

519 
c
->
waôög
 = 0;

520 
r
->
maö
->
blocked
--;

521 
r
->
	`wrôe_evít_h™dÀr
(r);

522 
	}
}

525 
ngx_öt_t


526 
	$ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

528 
u_ch¨
 *
p
;

529 
time_t
 
now
;

530 
ssize_t
 
n
;

531 
ngx_°r_t
 *
key
;

532 
ngx_öt_t
 
rc
;

533 
ngx_uöt_t
 
i
;

534 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

535 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
;

537 
n
 = 
	`ngx_hâp_fûe_ˇche_aio_ªad
(
r
, 
c
);

539 i‡(
n
 < 0) {

540  
n
;

543 i‡((
size_t
Ë
n
 < 
c
->
hódî_°¨t
) {

544 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

545 "ˇchêfûê\"%s\" i†toÿsmÆl", 
c
->
fûe
.
«me
.
d©a
);

546  
NGX_DECLINED
;

549 
h
 = (
ngx_hâp_fûe_ˇche_hódî_t
 *Ë
c
->
buf
->
pos
;

551 i‡(
h
->
vîsi⁄
 !
NGX_HTTP_CACHE_VERSION
) {

552 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

553 "ˇchêfûê\"%s\" vîsi⁄ mism©ch", 
c
->
fûe
.
«me
.
d©a
);

554  
NGX_DECLINED
;

557 i‡(
h
->
¸c32
 !
c
->¸c32 || (
size_t
Ëh->
hódî_°¨t
 != c->header_start) {

558 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

559 "ˇchêfûê\"%s\" ha†md5 cﬁlisi⁄", 
c
->
fûe
.
«me
.
d©a
);

560  
NGX_DECLINED
;

563 
p
 = 
c
->
buf
->
pos
 + (
ngx_hâp_fûe_ˇche_hódî_t
)

564 + (
ngx_hâp_fûe_ˇche_key
);

566 
key
 = 
c
->
keys
.
ñts
;

567 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

568 i‡(
	`ngx_memcmp
(
p
, 
key
[
i
].
d©a
, key[i].
Àn
) != 0) {

569 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

571 
c
->
fûe
.
«me
.
d©a
);

572  
NGX_DECLINED
;

575 
p
 +
key
[
i
].
Àn
;

578 i‡((
size_t
Ë
h
->
body_°¨t
 > 
c
->body_start) {

579 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

581 
c
->
fûe
.
«me
.
d©a
);

582  
NGX_DECLINED
;

585 i‡(
h
->
v¨y_Àn
 > 
NGX_HTTP_CACHE_VARY_LEN
) {

586 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

588 
c
->
fûe
.
«me
.
d©a
);

589  
NGX_DECLINED
;

592 i‡(
h
->
v¨y_Àn
) {

593 
	`ngx_hâp_fûe_ˇche_v¨y
(
r
, 
h
->
v¨y
, h->
v¨y_Àn
, 
c
->
v¨ü¡
);

595 i‡(
	`ngx_memcmp
(
c
->
v¨ü¡
, 
h
->v¨ü¡, 
NGX_HTTP_CACHE_KEY_LEN
) != 0) {

596 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

598  
	`ngx_hâp_fûe_ˇche_ª›í
(
r
, 
c
);

602 
c
->
buf
->
œ°
 +
n
;

604 
c
->
vÆid_£c
 = 
h
->valid_sec;

605 
c
->
upd©ög_£c
 = 
h
->updating_sec;

606 
c
->
îr‹_£c
 = 
h
->error_sec;

607 
c
->
œ°_modifõd
 = 
h
->last_modified;

608 
c
->
d©e
 = 
h
->date;

609 
c
->
vÆid_m£c
 = 
h
->valid_msec;

610 
c
->
body_°¨t
 = 
h
->body_start;

611 
c
->
ëag
.
Àn
 = 
h
->
ëag_Àn
;

612 
c
->
ëag
.
d©a
 = 
h
->etag;

614 
r
->
ˇched
 = 1;

616 
ˇche
 = 
c
->
fûe_ˇche
;

618 i‡(
ˇche
->
sh
->
cﬁd
) {

620 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

622 i‡(!
c
->
node
->
exi°s
) {

623 
c
->
node
->
u£s
 = 1;

624 
c
->
node
->
body_°¨t
 = c->body_start;

625 
c
->
node
->
exi°s
 = 1;

626 
c
->
node
->
uniq
 = c->uniq;

627 
c
->
node
->
fs_size
 = c->fs_size;

629 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

632 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

635 
now
 = 
	`ngx_time
();

637 i‡(
c
->
vÆid_£c
 < 
now
) {

638 
c
->
°Æe_upd©ög
 = c->
vÆid_£c
 + c->
upd©ög_£c
 >
now
;

639 
c
->
°Æe_îr‹
 = c->
vÆid_£c
 + c->
îr‹_£c
 >
now
;

641 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

643 i‡(
c
->
node
->
upd©ög
) {

644 
rc
 = 
NGX_HTTP_CACHE_UPDATING
;

647 
c
->
node
->
upd©ög
 = 1;

648 
c
->
upd©ög
 = 1;

649 
c
->
lock_time
 = c->
node
->lock_time;

650 
rc
 = 
NGX_HTTP_CACHE_STALE
;

653 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

655 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

657 
rc
, 
c
->
vÆid_£c
, 
now
);

659  
rc
;

662  
NGX_OK
;

663 
	}
}

666 
ssize_t


667 
	$ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

669 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

670 
ssize_t
 
n
;

671 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

673 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

676 #i‡(
NGX_HAVE_FILE_AIO
)

678 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_ON
 && 
ngx_fûe_aio
) {

679 
n
 = 
	`ngx_fûe_aio_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

681 i‡(
n
 !
NGX_AGAIN
) {

682 
c
->
ªadög
 = 0;

683  
n
;

686 
c
->
ªadög
 = 1;

688 
c
->
fûe
.
aio
->
d©a
 = 
r
;

689 
c
->
fûe
.
aio
->
h™dÀr
 = 
ngx_hâp_ˇche_aio_evít_h™dÀr
;

691 
r
->
maö
->
blocked
++;

692 
r
->
aio
 = 1;

694  
NGX_AGAIN
;

699 #i‡(
NGX_THREADS
)

701 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_THREADS
) {

702 
c
->
fûe
.
thªad_èsk
 = c->thread_task;

703 
c
->
fûe
.
thªad_h™dÀr
 = 
ngx_hâp_ˇche_thªad_h™dÀr
;

704 
c
->
fûe
.
thªad_˘x
 = 
r
;

706 
n
 = 
	`ngx_thªad_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

708 
c
->
thªad_èsk
 = c->
fûe
.thread_task;

709 
c
->
ªadög
 = (
n
 =
NGX_AGAIN
);

711  
n
;

716  
	`ngx_ªad_fûe
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0);

717 
	}
}

720 #i‡(
NGX_HAVE_FILE_AIO
)

723 
	$ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

725 
ngx_evít_aio_t
 *
aio
;

726 
ngx_c⁄√˘i⁄_t
 *
c
;

727 
ngx_hâp_ªque°_t
 *
r
;

729 
aio
 = 
ev
->
d©a
;

730 
r
 = 
aio
->
d©a
;

731 
c
 = 
r
->
c⁄√˘i⁄
;

733 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

735 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

736 "hâ∞fûêˇchêaio: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

738 
r
->
maö
->
blocked
--;

739 
r
->
aio
 = 0;

741 
r
->
	`wrôe_evít_h™dÀr
(r);

743 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

744 
	}
}

749 #i‡(
NGX_THREADS
)

751 
ngx_öt_t


752 
	$ngx_hâp_ˇche_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
, 
ngx_fûe_t
 *
fûe
)

754 
ngx_°r_t
 
«me
;

755 
ngx_thªad_poﬁ_t
 *
ç
;

756 
ngx_hâp_ªque°_t
 *
r
;

757 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

759 
r
 = 
fûe
->
thªad_˘x
;

761 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

762 
ç
 = 
˛cf
->
thªad_poﬁ
;

764 i‡(
ç
 =
NULL
) {

765 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
thªad_poﬁ_vÆue
, &
«me
)

766 !
NGX_OK
)

768  
NGX_ERROR
;

771 
ç
 = 
	`ngx_thªad_poﬁ_gë
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
«me
);

773 i‡(
ç
 =
NULL
) {

774 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

775 "thªadÖoﬁ \"%V\"ÇŸ found", &
«me
);

776  
NGX_ERROR
;

780 
èsk
->
evít
.
d©a
 = 
r
;

781 
èsk
->
evít
.
h™dÀr
 = 
ngx_hâp_ˇche_thªad_evít_h™dÀr
;

783 i‡(
	`ngx_thªad_èsk_po°
(
ç
, 
èsk
Ë!
NGX_OK
) {

784  
NGX_ERROR
;

787 
r
->
maö
->
blocked
++;

788 
r
->
aio
 = 1;

790  
NGX_OK
;

791 
	}
}

795 
	$ngx_hâp_ˇche_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

797 
ngx_c⁄√˘i⁄_t
 *
c
;

798 
ngx_hâp_ªque°_t
 *
r
;

800 
r
 = 
ev
->
d©a
;

801 
c
 = 
r
->
c⁄√˘i⁄
;

803 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

805 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

806 "hâ∞fûêˇchêthªad: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

808 
r
->
maö
->
blocked
--;

809 
r
->
aio
 = 0;

811 
r
->
	`wrôe_evít_h™dÀr
(r);

813 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

814 
	}
}

819 
ngx_öt_t


820 
	$ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

822 
ngx_öt_t
 
rc
;

823 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

825 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

827 
f˙
 = 
c
->
node
;

829 i‡(
f˙
 =
NULL
) {

830 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

833 i‡(
f˙
) {

834 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

836 i‡(
c
->
node
 =
NULL
) {

837 
f˙
->
u£s
++;

838 
f˙
->
cou¡
++;

841 i‡(
f˙
->
îr‹
) {

843 i‡(
f˙
->
vÆid_£c
 < 
	`ngx_time
()) {

844 
ª√w
;

847 
rc
 = 
NGX_OK
;

849 
d⁄e
;

852 i‡(
f˙
->
exi°s
 || f˙->
u£s
 >
c
->
mö_u£s
) {

854 
c
->
exi°s
 = 
f˙
->exists;

855 i‡(
f˙
->
body_°¨t
) {

856 
c
->
body_°¨t
 = 
f˙
->body_start;

859 
rc
 = 
NGX_OK
;

861 
d⁄e
;

864 
rc
 = 
NGX_AGAIN
;

866 
d⁄e
;

869 
f˙
 = 
	`ngx_¶ab_ˇŒoc_locked
(
ˇche
->
shpoﬁ
,

870 (
ngx_hâp_fûe_ˇche_node_t
));

871 i‡(
f˙
 =
NULL
) {

872 
	`ngx_hâp_fûe_ˇche_£t_w©îm¨k
(
ˇche
);

874 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

876 (Ë
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

878 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

880 
f˙
 = 
	`ngx_¶ab_ˇŒoc_locked
(
ˇche
->
shpoﬁ
,

881 (
ngx_hâp_fûe_ˇche_node_t
));

882 i‡(
f˙
 =
NULL
) {

883 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

884 "couldÇŸáŒoˇãÇode%s", 
ˇche
->
shpoﬁ
->
log_˘x
);

885 
rc
 = 
NGX_ERROR
;

886 
Áûed
;

890 
ˇche
->
sh
->
cou¡
++;

892 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

894 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

895 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

897 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

899 
f˙
->
u£s
 = 1;

900 
f˙
->
cou¡
 = 1;

902 
ª√w
:

904 
rc
 = 
NGX_DECLINED
;

906 
f˙
->
vÆid_m£c
 = 0;

907 
f˙
->
îr‹
 = 0;

908 
f˙
->
exi°s
 = 0;

909 
f˙
->
vÆid_£c
 = 0;

910 
f˙
->
uniq
 = 0;

911 
f˙
->
body_°¨t
 = 0;

912 
f˙
->
fs_size
 = 0;

914 
d⁄e
:

916 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

918 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

920 
c
->
uniq
 = 
f˙
->uniq;

921 
c
->
îr‹
 = 
f˙
->error;

922 
c
->
node
 = 
f˙
;

924 
Áûed
:

926 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

928  
rc
;

929 
	}
}

932 
ngx_öt_t


933 
	$ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_∑th_t
 *
∑th
)

935 
u_ch¨
 *
p
;

936 
ngx_hâp_ˇche_t
 *
c
;

938 
c
 = 
r
->
ˇche
;

940 i‡(
c
->
fûe
.
«me
.
Àn
) {

941  
NGX_OK
;

944 
c
->
fûe
.
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len

945 + 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

947 
c
->
fûe
.
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, c->fûe.«me.
Àn
 + 1);

948 i‡(
c
->
fûe
.
«me
.
d©a
 =
NULL
) {

949  
NGX_ERROR
;

952 
	`ngx_mem˝y
(
c
->
fûe
.
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

954 
p
 = 
c
->
fûe
.
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

955 
p
 = 
	`ngx_hex_dump
’, 
c
->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

956 *
p
 = '\0';

958 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
c
->
fûe
.
«me
.
d©a
, c->fûe.«me.
Àn
);

960 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

961 "ˇchêfûe: \"%s\"", 
c
->
fûe
.
«me
.
d©a
);

963  
NGX_OK
;

964 
	}
}

967 
ngx_hâp_fûe_ˇche_node_t
 *

968 
	$ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
)

970 
ngx_öt_t
 
rc
;

971 
ngx_rbåì_key_t
 
node_key
;

972 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

973 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

975 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
node_key
, 
key
, (
ngx_rbåì_key_t
));

977 
node
 = 
ˇche
->
sh
->
rbåì
.
roŸ
;

978 
£¡öñ
 = 
ˇche
->
sh
->
rbåì
.sentinel;

980 
node
 !
£¡öñ
) {

982 i‡(
node_key
 < 
node
->
key
) {

983 
node
 =Çode->
À·
;

987 i‡(
node_key
 > 
node
->
key
) {

988 
node
 =Çode->
right
;

994 
f˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

996 
rc
 = 
	`ngx_memcmp
(&
key
[(
ngx_rbåì_key_t
)], 
f˙
->key,

997 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

999 i‡(
rc
 == 0) {

1000  
f˙
;

1003 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1008  
NULL
;

1009 
	}
}

1013 
	$ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1014 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1016 
ngx_rbåì_node_t
 **
p
;

1017 
ngx_hâp_fûe_ˇche_node_t
 *
˙
, *
˙t
;

1021 i‡(
node
->
key
 < 
ãmp
->key) {

1023 
p
 = &
ãmp
->
À·
;

1025 } i‡(
node
->
key
 > 
ãmp
->key) {

1027 
p
 = &
ãmp
->
right
;

1031 
˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

1032 
˙t
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
ãmp
;

1034 
p
 = (
	`ngx_memcmp
(
˙
->
key
, 
˙t
->key,

1035 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
))

1037 ? &
ãmp
->
À·
 : &ãmp->
right
;

1040 i‡(*
p
 =
£¡öñ
) {

1044 
ãmp
 = *
p
;

1047 *
p
 = 
node
;

1048 
node
->
∑ª¡
 = 
ãmp
;

1049 
node
->
À·
 = 
£¡öñ
;

1050 
node
->
right
 = 
£¡öñ
;

1051 
	`ngx_rbt_ªd
(
node
);

1052 
	}
}

1056 
	$ngx_hâp_fûe_ˇche_v¨y
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
v¨y
, 
size_t
 
Àn
,

1057 
u_ch¨
 *
hash
)

1059 
u_ch¨
 *
p
, *
œ°
;

1060 
ngx_°r_t
 
«me
;

1061 
ngx_md5_t
 
md5
;

1062 
u_ch¨
 
buf
[
NGX_HTTP_CACHE_VARY_LEN
];

1064 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1065 "hâ∞fûêˇchêv¨y: \"%*s\"", 
Àn
, 
v¨y
);

1067 
	`ngx_md5_öô
(&
md5
);

1068 
	`ngx_md5_upd©e
(&
md5
, 
r
->
ˇche
->
maö
, 
NGX_HTTP_CACHE_KEY_LEN
);

1070 
	`ngx_°æow
(
buf
, 
v¨y
, 
Àn
);

1072 
p
 = 
buf
;

1073 
œ°
 = 
buf
 + 
Àn
;

1075 
p
 < 
œ°
) {

1077 
p
 < 
œ°
 && (*p == ' ' || *p == ',')) {Ö++; }

1079 
«me
.
d©a
 = 
p
;

1081 
p
 < 
œ°
 && *p != ',' && *p != ' ') {Ö++; }

1083 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1085 i‡(
«me
.
Àn
 == 0) {

1089 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1090 "hâ∞fûêˇchêv¨y: %V", &
«me
);

1092 
	`ngx_md5_upd©e
(&
md5
, 
«me
.
d©a
,Çame.
Àn
);

1093 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) ":", (":") - 1);

1095 
	`ngx_hâp_fûe_ˇche_v¨y_hódî
(
r
, &
md5
, &
«me
);

1097 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *Ë
CRLF
, (CRLF) - 1);

1100 
	`ngx_md5_föÆ
(
hash
, &
md5
);

1101 
	}
}

1105 
	$ngx_hâp_fûe_ˇche_v¨y_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_md5_t
 *
md5
,

1106 
ngx_°r_t
 *
«me
)

1108 
size_t
 
Àn
;

1109 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

1110 
ngx_uöt_t
 
i
, 
mu…ùÀ
, 
n‹mÆize
;

1111 
ngx_li°_∑π_t
 *
∑π
;

1112 
ngx_èbÀ_ñt_t
 *
hódî
;

1114 
mu…ùÀ
 = 0;

1115 
n‹mÆize
 = 0;

1117 i‡(
«me
->
Àn
 == ("Accept-Charset") - 1

1118 && 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "Accept-Charset",

1121 
n‹mÆize
 = 1;

1123 } i‡(
«me
->
Àn
 == ("Accept-Encoding") - 1

1124 && 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "Accept-Encoding",

1127 
n‹mÆize
 = 1;

1129 } i‡(
«me
->
Àn
 == ("Accept-Language") - 1

1130 && 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "Accept-Language",

1133 
n‹mÆize
 = 1;

1136 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1137 
hódî
 = 
∑π
->
ñts
;

1139 
i
 = 0; ; i++) {

1141 i‡(
i
 >
∑π
->
√…s
) {

1142 i‡(
∑π
->
√xt
 =
NULL
) {

1146 
∑π
 =Ö¨t->
√xt
;

1147 
hódî
 = 
∑π
->
ñts
;

1148 
i
 = 0;

1151 i‡(
hódî
[
i
].
hash
 == 0) {

1155 i‡(
hódî
[
i
].
key
.
Àn
 !
«me
->len) {

1159 i‡(
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
, 
«me
->d©a,Çame->
Àn
) != 0) {

1163 i‡(!
n‹mÆize
) {

1165 i‡(
mu…ùÀ
) {

1166 
	`ngx_md5_upd©e
(
md5
, (
u_ch¨
 *) ",", (",") - 1);

1169 
	`ngx_md5_upd©e
(
md5
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1171 
mu…ùÀ
 = 1;

1178 
p
 = 
hódî
[
i
].
vÆue
.
d©a
;

1179 
œ°
 = 
p
 + 
hódî
[
i
].
vÆue
.
Àn
;

1181 
p
 < 
œ°
) {

1183 
p
 < 
œ°
 && (*p == ' ' || *p == ',')) {Ö++; }

1185 
°¨t
 = 
p
;

1187 
p
 < 
œ°
 && *p != ',' && *p != ' ') {Ö++; }

1189 
Àn
 = 
p
 - 
°¨t
;

1191 i‡(
Àn
 == 0) {

1195 i‡(
mu…ùÀ
) {

1196 
	`ngx_md5_upd©e
(
md5
, (
u_ch¨
 *) ",", (",") - 1);

1199 
	`ngx_md5_upd©e
(
md5
, 
°¨t
, 
Àn
);

1201 
mu…ùÀ
 = 1;

1204 
	}
}

1207 
ngx_öt_t


1208 
	$ngx_hâp_fûe_ˇche_ª›í
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

1210 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1212 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1215 i‡(
c
->
£c⁄d¨y
) {

1216 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1218 
c
->
fûe
.
«me
.
d©a
);

1219  
NGX_DECLINED
;

1222 
ˇche
 = 
c
->
fûe_ˇche
;

1224 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1226 
c
->
node
->
cou¡
--;

1227 
c
->
node
 = 
NULL
;

1229 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1231 
c
->
£c⁄d¨y
 = 1;

1232 
c
->
fûe
.
«me
.
Àn
 = 0;

1233 
c
->
body_°¨t
 = c->
buf
->
íd
 - c->buf->
°¨t
;

1235 
	`ngx_mem˝y
(
c
->
key
, c->
v¨ü¡
, 
NGX_HTTP_CACHE_KEY_LEN
);

1237  
	`ngx_hâp_fûe_ˇche_›í
(
r
);

1238 
	}
}

1241 
ngx_öt_t


1242 
	$ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
)

1244 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
 = (ngx_hâp_fûe_ˇche_hódî_à*Ë
buf
;

1246 
u_ch¨
 *
p
;

1247 
ngx_°r_t
 *
key
;

1248 
ngx_uöt_t
 
i
;

1249 
ngx_hâp_ˇche_t
 *
c
;

1251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1254 
c
 = 
r
->
ˇche
;

1256 
	`ngx_memzîo
(
h
, (
ngx_hâp_fûe_ˇche_hódî_t
));

1258 
h
->
vîsi⁄
 = 
NGX_HTTP_CACHE_VERSION
;

1259 
h
->
vÆid_£c
 = 
c
->valid_sec;

1260 
h
->
upd©ög_£c
 = 
c
->updating_sec;

1261 
h
->
îr‹_£c
 = 
c
->error_sec;

1262 
h
->
œ°_modifõd
 = 
c
->last_modified;

1263 
h
->
d©e
 = 
c
->date;

1264 
h
->
¸c32
 = 
c
->crc32;

1265 
h
->
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

1266 
h
->
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

1267 
h
->
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

1269 i‡(
c
->
ëag
.
Àn
 <
NGX_HTTP_CACHE_ETAG_LEN
) {

1270 
h
->
ëag_Àn
 = (
u_ch¨
Ë
c
->
ëag
.
Àn
;

1271 
	`ngx_mem˝y
(
h
->
ëag
, 
c
->ëag.
d©a
, c->ëag.
Àn
);

1274 i‡(
c
->
v¨y
.
Àn
) {

1275 i‡(
c
->
v¨y
.
Àn
 > 
NGX_HTTP_CACHE_VARY_LEN
) {

1277 
c
->
v¨y
.
Àn
 = 
NGX_HTTP_CACHE_VARY_LEN
;

1280 
h
->
v¨y_Àn
 = (
u_ch¨
Ë
c
->
v¨y
.
Àn
;

1281 
	`ngx_mem˝y
(
h
->
v¨y
, 
c
->v¨y.
d©a
, c->v¨y.
Àn
);

1283 
	`ngx_hâp_fûe_ˇche_v¨y
(
r
, 
c
->
v¨y
.
d©a
, c->v¨y.
Àn
, c->
v¨ü¡
);

1284 
	`ngx_mem˝y
(
h
->
v¨ü¡
, 
c
->v¨ü¡, 
NGX_HTTP_CACHE_KEY_LEN
);

1287 i‡(
	`ngx_hâp_fûe_ˇche_upd©e_v¨ü¡
(
r
, 
c
Ë!
NGX_OK
) {

1288  
NGX_ERROR
;

1291 
p
 = 
buf
 + (
ngx_hâp_fûe_ˇche_hódî_t
);

1293 
p
 = 
	`ngx_˝ymem
’, 
ngx_hâp_fûe_ˇche_key
, (ngx_http_file_cache_key));

1295 
key
 = 
c
->
keys
.
ñts
;

1296 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

1297 
p
 = 
	`ngx_c›y
’, 
key
[
i
].
d©a
, key[i].
Àn
);

1300 *
p
 = 
LF
;

1302  
NGX_OK
;

1303 
	}
}

1306 
ngx_öt_t


1307 
	$ngx_hâp_fûe_ˇche_upd©e_v¨ü¡
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

1309 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1311 i‡(!
c
->
£c⁄d¨y
) {

1312  
NGX_OK
;

1315 i‡(
c
->
v¨y
.
Àn


1316 && 
	`ngx_memcmp
(
c
->
v¨ü¡
, c->
key
, 
NGX_HTTP_CACHE_KEY_LEN
) == 0)

1318  
NGX_OK
;

1326 
ˇche
 = 
c
->
fûe_ˇche
;

1328 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1331 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1333 
c
->
node
->
cou¡
--;

1334 
c
->
node
->
upd©ög
 = 0;

1335 
c
->
node
 = 
NULL
;

1337 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1339 
c
->
fûe
.
«me
.
Àn
 = 0;

1341 
	`ngx_mem˝y
(
c
->
key
, c->
maö
, 
NGX_HTTP_CACHE_KEY_LEN
);

1343 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

1344  
NGX_ERROR
;

1347 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

1348  
NGX_ERROR
;

1351  
NGX_OK
;

1352 
	}
}

1356 
	$ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
)

1358 
off_t
 
fs_size
;

1359 
ngx_öt_t
 
rc
;

1360 
ngx_fûe_uniq_t
 
uniq
;

1361 
ngx_fûe_öfo_t
 
fi
;

1362 
ngx_hâp_ˇche_t
 *
c
;

1363 
ngx_ext_ª«me_fûe_t
 
ext
;

1364 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1366 
c
 = 
r
->
ˇche
;

1368 i‡(
c
->
upd©ed
) {

1372 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1375 
ˇche
 = 
c
->
fûe_ˇche
;

1377 
c
->
upd©ed
 = 1;

1378 
c
->
upd©ög
 = 0;

1380 
uniq
 = 0;

1381 
fs_size
 = 0;

1383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1385 
tf
->
fûe
.
«me
.
d©a
, 
c
->file.name.data);

1387 
ext
.
ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

1388 
ext
.
∑th_ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

1389 
ext
.
time
 = -1;

1390 
ext
.
¸óã_∑th
 = 1;

1391 
ext
.
dñëe_fûe
 = 1;

1392 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

1394 
rc
 = 
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
c
->fûe.«me, &
ext
);

1396 i‡(
rc
 =
NGX_OK
) {

1398 i‡(
	`ngx_fd_öfo
(
tf
->
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1399 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1400 
ngx_fd_öfo_n
 " \"%s\" faûed", 
tf
->
fûe
.
«me
.
d©a
);

1402 
rc
 = 
NGX_ERROR
;

1405 
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

1406 
fs_size
 = (
	`ngx_fûe_fs_size
(&
fi
Ë+ 
ˇche
->
bsize
 - 1) / cache->bsize;

1410 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1412 
c
->
node
->
cou¡
--;

1413 
c
->
node
->
îr‹
 = 0;

1414 
c
->
node
->
uniq
 = uniq;

1415 
c
->
node
->
body_°¨t
 = c->body_start;

1417 
ˇche
->
sh
->
size
 +
fs_size
 - 
c
->
node
->fs_size;

1418 
c
->
node
->
fs_size
 = fs_size;

1420 i‡(
rc
 =
NGX_OK
) {

1421 
c
->
node
->
exi°s
 = 1;

1424 
c
->
node
->
upd©ög
 = 0;

1426 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1427 
	}
}

1431 
	$ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1433 
ssize_t
 
n
;

1434 
ngx_îr_t
 
îr
;

1435 
ngx_fûe_t
 
fûe
;

1436 
ngx_fûe_öfo_t
 
fi
;

1437 
ngx_hâp_ˇche_t
 *
c
;

1438 
ngx_hâp_fûe_ˇche_hódî_t
 
h
;

1440 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1443 
c
 = 
r
->
ˇche
;

1445 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1447 
fûe
.
«me
 = 
c
->file.name;

1448 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

1449 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

1451 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1452 
îr
 = 
ngx_î∫o
;

1456 i‡(
îr
 =
NGX_ENOENT
) {

1457 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1459 
fûe
.
«me
.
d©a
);

1463 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

1464 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1473 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1474 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1475 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1476 
d⁄e
;

1479 i‡(
c
->
uniq
 !
	`ngx_fûe_uniq
(&
fi
)

1480 || 
c
->
Àngth
 !
	`ngx_fûe_size
(&
fi
))

1482 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1484 
fûe
.
«me
.
d©a
);

1485 
d⁄e
;

1488 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, (
u_ch¨
 *Ë&
h
,

1489 (
ngx_hâp_fûe_ˇche_hódî_t
), 0);

1491 i‡(
n
 =
NGX_ERROR
) {

1492 
d⁄e
;

1495 i‡((
size_t
Ë
n
 !(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1496 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1497 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

1498 
n
, (
ngx_hâp_fûe_ˇche_hódî_t
), 
fûe
.
«me
.
d©a
);

1499 
d⁄e
;

1502 i‡(
h
.
vîsi⁄
 !
NGX_HTTP_CACHE_VERSION


1503 || 
h
.
œ°_modifõd
 !
c
->last_modified

1504 || 
h
.
¸c32
 !
c
->crc32

1505 || (
size_t
Ë
h
.
hódî_°¨t
 !
c
->header_start

1506 || (
size_t
Ë
h
.
body_°¨t
 !
c
->body_start)

1508 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1510 
fûe
.
«me
.
d©a
);

1511 
d⁄e
;

1519 
	`ngx_memzîo
(&
h
, (
ngx_hâp_fûe_ˇche_hódî_t
));

1521 
h
.
vîsi⁄
 = 
NGX_HTTP_CACHE_VERSION
;

1522 
h
.
vÆid_£c
 = 
c
->valid_sec;

1523 
h
.
upd©ög_£c
 = 
c
->updating_sec;

1524 
h
.
îr‹_£c
 = 
c
->error_sec;

1525 
h
.
œ°_modifõd
 = 
c
->last_modified;

1526 
h
.
d©e
 = 
c
->date;

1527 
h
.
¸c32
 = 
c
->crc32;

1528 
h
.
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

1529 
h
.
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

1530 
h
.
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

1532 i‡(
c
->
ëag
.
Àn
 <
NGX_HTTP_CACHE_ETAG_LEN
) {

1533 
h
.
ëag_Àn
 = (
u_ch¨
Ë
c
->
ëag
.
Àn
;

1534 
	`ngx_mem˝y
(
h
.
ëag
, 
c
->ëag.
d©a
, c->ëag.
Àn
);

1537 i‡(
c
->
v¨y
.
Àn
) {

1538 i‡(
c
->
v¨y
.
Àn
 > 
NGX_HTTP_CACHE_VARY_LEN
) {

1540 
c
->
v¨y
.
Àn
 = 
NGX_HTTP_CACHE_VARY_LEN
;

1543 
h
.
v¨y_Àn
 = (
u_ch¨
Ë
c
->
v¨y
.
Àn
;

1544 
	`ngx_mem˝y
(
h
.
v¨y
, 
c
->v¨y.
d©a
, c->v¨y.
Àn
);

1546 
	`ngx_hâp_fûe_ˇche_v¨y
(
r
, 
c
->
v¨y
.
d©a
, c->v¨y.
Àn
, c->
v¨ü¡
);

1547 
	`ngx_mem˝y
(
h
.
v¨ü¡
, 
c
->v¨ü¡, 
NGX_HTTP_CACHE_KEY_LEN
);

1550 (Ë
	`ngx_wrôe_fûe
(&
fûe
, (
u_ch¨
 *Ë&
h
,

1551 (
ngx_hâp_fûe_ˇche_hódî_t
), 0);

1553 
d⁄e
:

1555 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1556 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1557 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1559 
	}
}

1562 
ngx_öt_t


1563 
	$ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
)

1565 
ngx_öt_t
 
rc
;

1566 
ngx_buf_t
 *
b
;

1567 
ngx_chaö_t
 
out
;

1568 
ngx_hâp_ˇche_t
 *
c
;

1570 
c
 = 
r
->
ˇche
;

1572 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1573 "hâ∞fûêˇchê£nd: %s", 
c
->
fûe
.
«me
.
d©a
);

1575 i‡(
r
 !r->
maö
 && 
c
->
Àngth
 - c->
body_°¨t
 == 0) {

1576  
	`ngx_hâp_£nd_hódî
(
r
);

1581 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1582 i‡(
b
 =
NULL
) {

1583  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1586 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

1587 i‡(
b
->
fûe
 =
NULL
) {

1588  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1591 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1593 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1594  
rc
;

1597 
b
->
fûe_pos
 = 
c
->
body_°¨t
;

1598 
b
->
fûe_œ°
 = 
c
->
Àngth
;

1600 
b
->
ö_fûe
 = (
c
->
Àngth
 - c->
body_°¨t
) ? 1: 0;

1601 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

1602 
b
->
œ°_ö_chaö
 = 1;

1604 
b
->
fûe
->
fd
 = 
c
->file.fd;

1605 
b
->
fûe
->
«me
 = 
c
->file.name;

1606 
b
->
fûe
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1608 
out
.
buf
 = 
b
;

1609 
out
.
√xt
 = 
NULL
;

1611  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1612 
	}
}

1616 
	$ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
)

1618 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1619 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1621 i‡(
c
->
upd©ed
 || c->
node
 =
NULL
) {

1625 
ˇche
 = 
c
->
fûe_ˇche
;

1627 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1628 "hâ∞fûêˇchê‰ì, fd: %d", 
c
->
fûe
.
fd
);

1630 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1632 
f˙
 = 
c
->
node
;

1633 
f˙
->
cou¡
--;

1635 i‡(
c
->
upd©ög
 && 
f˙
->
lock_time
 == c->lock_time) {

1636 
f˙
->
upd©ög
 = 0;

1639 i‡(
c
->
îr‹
) {

1640 
f˙
->
îr‹
 = 
c
->error;

1642 i‡(
c
->
vÆid_£c
) {

1643 
f˙
->
vÆid_£c
 = 
c
->valid_sec;

1644 
f˙
->
vÆid_m£c
 = 
c
->valid_msec;

1647 } i‡(!
f˙
->
exi°s
 && f˙->
cou¡
 =0 && 
c
->
mö_u£s
 == 1) {

1648 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1649 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1650 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1651 
ˇche
->
sh
->
cou¡
--;

1652 
c
->
node
 = 
NULL
;

1655 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1657 
c
->
upd©ed
 = 1;

1658 
c
->
upd©ög
 = 0;

1660 i‡(
c
->
ãmp_fûe
) {

1661 i‡(
tf
 &&Åf->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

1662 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1664 
tf
->
fûe
.
«me
.
d©a
);

1666 i‡(
	`ngx_dñëe_fûe
(
tf
->
fûe
.
«me
.
d©a
Ë=
NGX_FILE_ERROR
) {

1667 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
fûe
.
log
, 
ngx_î∫o
,

1668 
ngx_dñëe_fûe_n
 " \"%s\" failed",

1669 
tf
->
fûe
.
«me
.
d©a
);

1674 i‡(
c
->
waô_evít
.
timî_£t
) {

1675 
	`ngx_dñ_timî
(&
c
->
waô_evít
);

1677 
	}
}

1681 
	$ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
)

1683 
ngx_hâp_ˇche_t
 *
c
 = 
d©a
;

1685 i‡(
c
->
upd©ed
) {

1689 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1692 i‡(
c
->
upd©ög
 && !c->
background
) {

1693 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
fûe
.
log
, 0,

1694 "°ÆÀd cachêupd©ög,Éº‹:%ui", 
c
->
îr‹
);

1697 
	`ngx_hâp_fûe_ˇche_‰ì
(
c
, 
NULL
);

1698 
	}
}

1701 
time_t


1702 
	$ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1704 
u_ch¨
 *
«me
, *
p
;

1705 
size_t
 
Àn
;

1706 
time_t
 
waô
;

1707 
ngx_uöt_t
 
åõs
;

1708 
ngx_∑th_t
 *
∑th
;

1709 
ngx_queue_t
 *
q
, *
£¡öñ
;

1710 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1711 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1713 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1716 
∑th
 = 
ˇche
->path;

1717 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1719 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1720 i‡(
«me
 =
NULL
) {

1724 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1726 
waô
 = 10;

1727 
åõs
 = 20;

1728 
£¡öñ
 = 
NULL
;

1730 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1733 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1737 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1739 i‡(
q
 =
£¡öñ
) {

1743 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1745 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1747 
f˙
->
cou¡
, f˙->
exi°s
,

1748 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1750 i‡(
f˙
->
cou¡
 == 0) {

1751 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1752 
waô
 = 0;

1756 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1757 (
ngx_rbåì_key_t
));

1758 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1759 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1767 
	`ngx_queue_ªmove
(
q
);

1768 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1769 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1771 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1773 (
size_t
Ë2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1775 i‡(
£¡öñ
 =
NULL
) {

1776 
£¡öñ
 = 
q
;

1779 i‡(--
åõs
) {

1783 
waô
 = 1;

1787 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1789 
	`ngx_‰ì
(
«me
);

1791  
waô
;

1792 
	}
}

1795 
time_t


1796 
	$ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1798 
u_ch¨
 *
«me
, *
p
;

1799 
size_t
 
Àn
;

1800 
time_t
 
now
, 
waô
;

1801 
ngx_∑th_t
 *
∑th
;

1802 
ngx_m£c_t
 
ñ≠£d
;

1803 
ngx_queue_t
 *
q
;

1804 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1805 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1807 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1810 
∑th
 = 
ˇche
->path;

1811 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1813 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1814 i‡(
«me
 =
NULL
) {

1818 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1820 
now
 = 
	`ngx_time
();

1822 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1826 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1827 
waô
 = 1;

1831 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1832 
waô
 = 10;

1836 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1838 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1840 
waô
 = 
f˙
->
expúe
 - 
now
;

1842 i‡(
waô
 > 0) {

1843 
waô
 = wait > 10 ? 10 : wait;

1847 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1849 
f˙
->
cou¡
, f˙->
exi°s
,

1850 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1852 i‡(
f˙
->
cou¡
 == 0) {

1853 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1854 
√xt
;

1857 i‡(
f˙
->
dñëög
) {

1858 
waô
 = 1;

1862 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1863 (
ngx_rbåì_key_t
));

1864 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1865 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1873 
	`ngx_queue_ªmove
(
q
);

1874 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1875 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1877 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1879 (
size_t
Ë2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1881 
√xt
:

1883 i‡(++
ˇche
->
fûes
 >ˇche->
m™agî_fûes
) {

1884 
waô
 = 0;

1888 
	`ngx_time_upd©e
();

1890 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

1892 i‡(
ñ≠£d
 >
ˇche
->
m™agî_thªshﬁd
) {

1893 
waô
 = 0;

1898 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1900 
	`ngx_‰ì
(
«me
);

1902  
waô
;

1903 
	}
}

1907 
	$ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_queue_t
 *
q
,

1908 
u_ch¨
 *
«me
)

1910 
u_ch¨
 *
p
;

1911 
size_t
 
Àn
;

1912 
ngx_∑th_t
 *
∑th
;

1913 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1915 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1917 i‡(
f˙
->
exi°s
) {

1918 
ˇche
->
sh
->
size
 -
f˙
->
fs_size
;

1920 
∑th
 = 
ˇche
->path;

1921 
p
 = 
«me
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

1922 
p
 = 
	`ngx_hex_dump
’, (
u_ch¨
 *Ë&
f˙
->
node
.
key
,

1923 (
ngx_rbåì_key_t
));

1924 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1925 
p
 = 
	`ngx_hex_dump
’, 
f˙
->
key
, 
Àn
);

1926 *
p
 = '\0';

1928 
f˙
->
cou¡
++;

1929 
f˙
->
dñëög
 = 1;

1930 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1932 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1933 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
«me
, 
Àn
);

1935 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1936 "hâ∞fûêˇchêexpúe: \"%s\"", 
«me
);

1938 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1939 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1940 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1943 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1944 
f˙
->
cou¡
--;

1945 
f˙
->
dñëög
 = 0;

1948 i‡(
f˙
->
cou¡
 == 0) {

1949 
	`ngx_queue_ªmove
(
q
);

1950 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1951 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1952 
ˇche
->
sh
->
cou¡
--;

1954 
	}
}

1957 
ngx_m£c_t


1958 
	$ngx_hâp_fûe_ˇche_m™agî
(*
d©a
)

1960 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1962 
off_t
 
size
;

1963 
time_t
 
waô
;

1964 
ngx_m£c_t
 
ñ≠£d
, 
√xt
;

1965 
ngx_uöt_t
 
cou¡
, 
w©îm¨k
;

1967 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1968 
ˇche
->
fûes
 = 0;

1970 
√xt
 = (
ngx_m£c_t
Ë
	`ngx_hâp_fûe_ˇche_expúe
(
ˇche
) * 1000;

1972 i‡(
√xt
 == 0) {

1973 
√xt
 = 
ˇche
->
m™agî_¶ìp
;

1974 
d⁄e
;

1978 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1980 
size
 = 
ˇche
->
sh
->size;

1981 
cou¡
 = 
ˇche
->
sh
->count;

1982 
w©îm¨k
 = 
ˇche
->
sh
->watermark;

1984 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1986 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1988 
size
, 
cou¡
, (
ngx_öt_t
Ë
w©îm¨k
);

1990 i‡(
size
 < 
ˇche
->
max_size
 && 
cou¡
 < 
w©îm¨k
) {

1994 
waô
 = 
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

1996 i‡(
waô
 > 0) {

1997 
√xt
 = (
ngx_m£c_t
Ë
waô
 * 1000;

2001 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

2005 i‡(++
ˇche
->
fûes
 >ˇche->
m™agî_fûes
) {

2006 
√xt
 = 
ˇche
->
m™agî_¶ìp
;

2010 
	`ngx_time_upd©e
();

2012 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

2014 i‡(
ñ≠£d
 >
ˇche
->
m™agî_thªshﬁd
) {

2015 
√xt
 = 
ˇche
->
m™agî_¶ìp
;

2020 
d⁄e
:

2022 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

2024 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

2026 
ˇche
->
fûes
, 
ñ≠£d
, 
√xt
);

2028  
√xt
;

2029 
	}
}

2033 
	$ngx_hâp_fûe_ˇche_lﬂdî
(*
d©a
)

2035 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

2037 
ngx_åì_˘x_t
 
åì
;

2039 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

2043 i‡(!
	`ngx_©omic_cmp_£t
(&
ˇche
->
sh
->
lﬂdög
, 0, 
ngx_pid
)) {

2047 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

2050 
åì
.
öô_h™dÀr
 = 
NULL
;

2051 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_fûe
;

2052 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_dúe˘‹y
;

2053 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

2054 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_fûe_ˇche_dñëe_fûe
;

2055 
åì
.
d©a
 = 
ˇche
;

2056 
åì
.
Æloc
 = 0;

2057 
åì
.
log
 = 
ngx_cy˛e
->log;

2059 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

2060 
ˇche
->
fûes
 = 0;

2062 i‡(
	`ngx_wÆk_åì
(&
åì
, &
ˇche
->
∑th
->
«me
Ë=
NGX_ABORT
) {

2063 
ˇche
->
sh
->
lﬂdög
 = 0;

2067 
ˇche
->
sh
->
cﬁd
 = 0;

2068 
ˇche
->
sh
->
lﬂdög
 = 0;

2070 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

2072 &
ˇche
->
∑th
->
«me
,

2073 ((Ë
ˇche
->
sh
->
size
 * cache->
bsize
) / (1024 * 1024),

2074 
ˇche
->
bsize
);

2075 
	}
}

2078 
ngx_öt_t


2079 
	$ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

2081  
NGX_OK
;

2082 
	}
}

2085 
ngx_öt_t


2086 
	$ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

2088 
ngx_m£c_t
 
ñ≠£d
;

2089 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

2091 
ˇche
 = 
˘x
->
d©a
;

2093 i‡(
	`ngx_hâp_fûe_ˇche_add_fûe
(
˘x
, 
∑th
Ë!
NGX_OK
) {

2094 (Ë
	`ngx_hâp_fûe_ˇche_dñëe_fûe
(
˘x
, 
∑th
);

2097 i‡(++
ˇche
->
fûes
 >ˇche->
lﬂdî_fûes
) {

2098 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

2101 
	`ngx_time_upd©e
();

2103 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

2105 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

2106 "hâ∞fûêˇchêlﬂdîÅimêñ≠£d: %M", 
ñ≠£d
);

2108 i‡(
ñ≠£d
 >
ˇche
->
lﬂdî_thªshﬁd
) {

2109 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

2113  (
ngx_quô
 || 
ngx_ãrmö©e
Ë? 
NGX_ABORT
 : 
NGX_OK
;

2114 
	}
}

2117 
ngx_öt_t


2118 
	$ngx_hâp_fûe_ˇche_m™age_dúe˘‹y
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

2120 i‡(
∑th
->
Àn
 >= 5

2121 && 
	`ngx_°∫cmp
(
∑th
->
d©a
 +Ö©h->
Àn
 - 5, "/temp", 5) == 0)

2123  
NGX_DECLINED
;

2126  
NGX_OK
;

2127 
	}
}

2131 
	$ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

2133 
	`ngx_m¶ìp
(
ˇche
->
lﬂdî_¶ìp
);

2135 
	`ngx_time_upd©e
();

2137 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

2138 
ˇche
->
fûes
 = 0;

2139 
	}
}

2142 
ngx_öt_t


2143 
	$ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

2145 
u_ch¨
 *
p
;

2146 
ngx_öt_t
 
n
;

2147 
ngx_uöt_t
 
i
;

2148 
ngx_hâp_ˇche_t
 
c
;

2149 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

2151 i‡(
«me
->
Àn
 < 2 * 
NGX_HTTP_CACHE_KEY_LEN
) {

2152  
NGX_ERROR
;

2160 i‡(
«me
->
Àn
 >2 * 
NGX_HTTP_CACHE_KEY_LEN
 + 1 + 10

2161 && 
«me
->
d©a
[«me->
Àn
 - 10 - 1] == '.')

2163  
NGX_OK
;

2166 i‡(
˘x
->
size
 < (
off_t
Ë(
ngx_hâp_fûe_ˇche_hódî_t
)) {

2167 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

2168 "ˇchêfûê\"%s\" i†toÿsmÆl", 
«me
->
d©a
);

2169  
NGX_ERROR
;

2172 
	`ngx_memzîo
(&
c
, (
ngx_hâp_ˇche_t
));

2173 
ˇche
 = 
˘x
->
d©a
;

2175 
c
.
Àngth
 = 
˘x
->
size
;

2176 
c
.
fs_size
 = (
˘x
->fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

2178 
p
 = &
«me
->
d©a
[«me->
Àn
 - 2 * 
NGX_HTTP_CACHE_KEY_LEN
];

2180 
i
 = 0; i < 
NGX_HTTP_CACHE_KEY_LEN
; i++) {

2181 
n
 = 
	`ngx_hextoi
(
p
, 2);

2183 i‡(
n
 =
NGX_ERROR
) {

2184  
NGX_ERROR
;

2187 
p
 += 2;

2189 
c
.
key
[
i
] = (
u_ch¨
Ë
n
;

2192  
	`ngx_hâp_fûe_ˇche_add
(
ˇche
, &
c
);

2193 
	}
}

2196 
ngx_öt_t


2197 
	$ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

2199 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

2201 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

2203 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

2205 i‡(
f˙
 =
NULL
) {

2207 
f˙
 = 
	`ngx_¶ab_ˇŒoc_locked
(
ˇche
->
shpoﬁ
,

2208 (
ngx_hâp_fûe_ˇche_node_t
));

2209 i‡(
f˙
 =
NULL
) {

2210 
	`ngx_hâp_fûe_ˇche_£t_w©îm¨k
(
ˇche
);

2212 i‡(
ˇche
->
Áû_time
 !
	`ngx_time
()) {

2213 
ˇche
->
Áû_time
 = 
	`ngx_time
();

2214 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

2215 "couldÇŸáŒoˇãÇode%s", 
ˇche
->
shpoﬁ
->
log_˘x
);

2218 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

2219  
NGX_ERROR
;

2222 
ˇche
->
sh
->
cou¡
++;

2224 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

2226 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

2227 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

2229 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

2231 
f˙
->
u£s
 = 1;

2232 
f˙
->
exi°s
 = 1;

2233 
f˙
->
fs_size
 = 
c
->fs_size;

2235 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

2238 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

2241 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

2243 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

2245 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

2247  
NGX_OK
;

2248 
	}
}

2251 
ngx_öt_t


2252 
	$ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

2254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

2255 "hâ∞fûêˇchêdñëe: \"%s\"", 
∑th
->
d©a
);

2257 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

2258 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

2259 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
∑th
->
d©a
);

2262  
NGX_OK
;

2263 
	}
}

2267 
	$ngx_hâp_fûe_ˇche_£t_w©îm¨k
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

2269 
ˇche
->
sh
->
w©îm¨k
 = cache->sh->
cou¡
 - cache->sh->count / 8;

2271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

2272 "hâ∞fûêˇchêw©îm¨k: %ui", 
ˇche
->
sh
->
w©îm¨k
);

2273 
	}
}

2276 
time_t


2277 
	$ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
)

2279 
ngx_uöt_t
 
i
;

2280 
ngx_hâp_ˇche_vÆid_t
 *
vÆid
;

2282 i‡(
ˇche_vÆid
 =
NULL
) {

2286 
vÆid
 = 
ˇche_vÆid
->
ñts
;

2287 
i
 = 0; i < 
ˇche_vÆid
->
√…s
; i++) {

2289 i‡(
vÆid
[
i
].
°©us
 == 0) {

2290  
vÆid
[
i
].valid;

2293 i‡(
vÆid
[
i
].
°©us
 == status) {

2294  
vÆid
[
i
].valid;

2299 
	}
}

2303 
	$ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2305 *
c⁄Â
 = 
c⁄f
;

2307 
off_t
 
max_size
;

2308 
u_ch¨
 *
œ°
, *
p
;

2309 
time_t
 
öa˘ive
;

2310 
ssize_t
 
size
;

2311 
ngx_°r_t
 
s
, 
«me
, *
vÆue
;

2312 
ngx_öt_t
 
lﬂdî_fûes
, 
m™agî_fûes
;

2313 
ngx_m£c_t
 
lﬂdî_¶ìp
, 
m™agî_¶ìp
, 
lﬂdî_thªshﬁd
,

2314 
m™agî_thªshﬁd
;

2315 
ngx_uöt_t
 
i
, 
n
, 
u£_ãmp_∑th
;

2316 
ngx_¨øy_t
 *
ˇches
;

2317 
ngx_hâp_fûe_ˇche_t
 *
ˇche
, **
˚
;

2319 
ˇche
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_fûe_ˇche_t
));

2320 i‡(
ˇche
 =
NULL
) {

2321  
NGX_CONF_ERROR
;

2324 
ˇche
->
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

2325 i‡(
ˇche
->
∑th
 =
NULL
) {

2326  
NGX_CONF_ERROR
;

2329 
u£_ãmp_∑th
 = 1;

2331 
öa˘ive
 = 600;

2333 
lﬂdî_fûes
 = 100;

2334 
lﬂdî_¶ìp
 = 50;

2335 
lﬂdî_thªshﬁd
 = 200;

2337 
m™agî_fûes
 = 100;

2338 
m™agî_¶ìp
 = 50;

2339 
m™agî_thªshﬁd
 = 200;

2341 
«me
.
Àn
 = 0;

2342 
size
 = 0;

2343 
max_size
 = 
NGX_MAX_OFF_T_VALUE
;

2345 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2347 
ˇche
->
∑th
->
«me
 = 
vÆue
[1];

2349 i‡(
ˇche
->
∑th
->
«me
.
d©a
[ˇche->∑th->«me.
Àn
 - 1] == '/') {

2350 
ˇche
->
∑th
->
«me
.
Àn
--;

2353 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
ˇche
->
∑th
->
«me
, 0Ë!
NGX_OK
) {

2354  
NGX_CONF_ERROR
;

2357 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

2359 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "levels=", 7) == 0) {

2361 
p
 = 
vÆue
[
i
].
d©a
 + 7;

2362 
œ°
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

2364 
n
 = 0;Ç < 
NGX_MAX_PATH_LEVEL
 && 
p
 < 
œ°
;Ç++) {

2366 i‡(*
p
 > '0' && *p < '3') {

2368 
ˇche
->
∑th
->
Àvñ
[
n
] = *
p
++ - '0';

2369 
ˇche
->
∑th
->
Àn
 +ˇche->∑th->
Àvñ
[
n
] + 1;

2371 i‡(
p
 =
œ°
) {

2375 i‡(*
p
++ =':' && 
n
 < 
NGX_MAX_PATH_LEVEL
 - 1 &&Ö < 
œ°
) {

2379 
övÆid_Àvñs
;

2382 
övÆid_Àvñs
;

2385 i‡(
ˇche
->
∑th
->
Àn
 < 10 + 
NGX_MAX_PATH_LEVEL
) {

2389 
övÆid_Àvñs
:

2391 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2392 "övÆid \"Àvñs\" \"%V\"", &
vÆue
[
i
]);

2393  
NGX_CONF_ERROR
;

2396 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "use_temp_path=", 14) == 0) {

2398 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[14], "on") == 0) {

2399 
u£_ãmp_∑th
 = 1;

2401 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[14], "off") == 0) {

2402 
u£_ãmp_∑th
 = 0;

2405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2408 &
vÆue
[
i
]);

2409  
NGX_CONF_ERROR
;

2415 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "keys_zone=", 10) == 0) {

2417 
«me
.
d©a
 = 
vÆue
[
i
].data + 10;

2419 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

2421 i‡(
p
) {

2422 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

2424 
p
++;

2426 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

2427 
s
.
d©a
 = 
p
;

2429 
size
 = 
	`ngx_∑r£_size
(&
s
);

2430 i‡(
size
 > 8191) {

2435 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2436 "övÆid key†z⁄êsizê\"%V\"", &
vÆue
[
i
]);

2437  
NGX_CONF_ERROR
;

2440 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

2442 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

2443 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

2445 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

2446 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

2447 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2448 "övÆid i«˘ivêvÆuê\"%V\"", &
vÆue
[
i
]);

2449  
NGX_CONF_ERROR
;

2455 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_size=", 9) == 0) {

2457 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

2458 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

2460 
max_size
 = 
	`ngx_∑r£_off£t
(&
s
);

2461 i‡(
max_size
 < 0) {

2462 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2463 "övÆid max_sizêvÆuê\"%V\"", &
vÆue
[
i
]);

2464  
NGX_CONF_ERROR
;

2470 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_files=", 13) == 0) {

2472 
lﬂdî_fûes
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 13, vÆue[i].
Àn
 - 13);

2473 i‡(
lﬂdî_fûes
 =
NGX_ERROR
) {

2474 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2475 "övÆidÜﬂdî_fûe†vÆuê\"%V\"", &
vÆue
[
i
]);

2476  
NGX_CONF_ERROR
;

2482 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_sleep=", 13) == 0) {

2484 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

2485 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

2487 
lﬂdî_¶ìp
 = 
	`ngx_∑r£_time
(&
s
, 0);

2488 i‡(
lﬂdî_¶ìp
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

2489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2490 "övÆidÜﬂdî_¶ì∞vÆuê\"%V\"", &
vÆue
[
i
]);

2491  
NGX_CONF_ERROR
;

2497 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_threshold=", 17) == 0) {

2499 
s
.
Àn
 = 
vÆue
[
i
].len - 17;

2500 
s
.
d©a
 = 
vÆue
[
i
].data + 17;

2502 
lﬂdî_thªshﬁd
 = 
	`ngx_∑r£_time
(&
s
, 0);

2503 i‡(
lﬂdî_thªshﬁd
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

2504 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2505 "övÆidÜﬂdî_thªshﬁd vÆuê\"%V\"", &
vÆue
[
i
]);

2506  
NGX_CONF_ERROR
;

2512 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "manager_files=", 14) == 0) {

2514 
m™agî_fûes
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 14, vÆue[i].
Àn
 - 14);

2515 i‡(
m™agî_fûes
 =
NGX_ERROR
) {

2516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2517 "övÆid m™agî_fûe†vÆuê\"%V\"", &
vÆue
[
i
]);

2518  
NGX_CONF_ERROR
;

2524 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "manager_sleep=", 14) == 0) {

2526 
s
.
Àn
 = 
vÆue
[
i
].len - 14;

2527 
s
.
d©a
 = 
vÆue
[
i
].data + 14;

2529 
m™agî_¶ìp
 = 
	`ngx_∑r£_time
(&
s
, 0);

2530 i‡(
m™agî_¶ìp
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

2531 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2532 "övÆid m™agî_¶ì∞vÆuê\"%V\"", &
vÆue
[
i
]);

2533  
NGX_CONF_ERROR
;

2539 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "manager_threshold=", 18) == 0) {

2541 
s
.
Àn
 = 
vÆue
[
i
].len - 18;

2542 
s
.
d©a
 = 
vÆue
[
i
].data + 18;

2544 
m™agî_thªshﬁd
 = 
	`ngx_∑r£_time
(&
s
, 0);

2545 i‡(
m™agî_thªshﬁd
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

2546 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2547 "övÆid m™agî_thªshﬁd vÆuê\"%V\"", &
vÆue
[
i
]);

2548  
NGX_CONF_ERROR
;

2554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2555 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

2556  
NGX_CONF_ERROR
;

2559 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

2560 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2562 &
cmd
->
«me
);

2563  
NGX_CONF_ERROR
;

2566 
ˇche
->
∑th
->
m™agî
 = 
ngx_hâp_fûe_ˇche_m™agî
;

2567 
ˇche
->
∑th
->
lﬂdî
 = 
ngx_hâp_fûe_ˇche_lﬂdî
;

2568 
ˇche
->
∑th
->
d©a
 = cache;

2569 
ˇche
->
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

2570 
ˇche
->
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

2571 
ˇche
->
lﬂdî_fûes
 =Üoader_files;

2572 
ˇche
->
lﬂdî_¶ìp
 =Üoader_sleep;

2573 
ˇche
->
lﬂdî_thªshﬁd
 =Üoader_threshold;

2574 
ˇche
->
m™agî_fûes
 = manager_files;

2575 
ˇche
->
m™agî_¶ìp
 = manager_sleep;

2576 
ˇche
->
m™agî_thªshﬁd
 = manager_threshold;

2578 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
∑th
Ë!
NGX_OK
) {

2579  
NGX_CONF_ERROR
;

2582 
ˇche
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
, 
cmd
->
po°
);

2583 i‡(
ˇche
->
shm_z⁄e
 =
NULL
) {

2584  
NGX_CONF_ERROR
;

2587 i‡(
ˇche
->
shm_z⁄e
->
d©a
) {

2588 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2589 "du∂iˇã z⁄ê\"%V\"", &
«me
);

2590  
NGX_CONF_ERROR
;

2594 
ˇche
->
shm_z⁄e
->
öô
 = 
ngx_hâp_fûe_ˇche_öô
;

2595 
ˇche
->
shm_z⁄e
->
d©a
 = cache;

2597 
ˇche
->
u£_ãmp_∑th
 = use_temp_path;

2599 
ˇche
->
öa˘ive
 = inactive;

2600 
ˇche
->
max_size
 = max_size;

2602 
ˇches
 = (
ngx_¨øy_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

2604 
˚
 = 
	`ngx_¨øy_push
(
ˇches
);

2605 i‡(
˚
 =
NULL
) {

2606  
NGX_CONF_ERROR
;

2609 *
˚
 = 
ˇche
;

2611  
NGX_CONF_OK
;

2612 
	}
}

2616 
	$ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

2617 *
c⁄f
)

2619 *
p
 = 
c⁄f
;

2621 
time_t
 
vÆid
;

2622 
ngx_°r_t
 *
vÆue
;

2623 
ngx_öt_t
 
°©us
;

2624 
ngx_uöt_t
 
i
, 
n
;

2625 
ngx_¨øy_t
 **
a
;

2626 
ngx_hâp_ˇche_vÆid_t
 *
v
;

2627 
ngx_uöt_t
 
°©u£s
[] = { 200, 301, 302 };

2629 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

2631 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

2632 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ˇche_vÆid_t
));

2633 i‡(*
a
 =
NULL
) {

2634  
NGX_CONF_ERROR
;

2638 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2639 
n
 = 
cf
->
¨gs
->
√…s
 - 1;

2641 
vÆid
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

2642 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

2643 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2644 "övÆidÅimêvÆuê\"%V\"", &
vÆue
[
n
]);

2645  
NGX_CONF_ERROR
;

2648 i‡(
n
 == 1) {

2650 
i
 = 0; i < 3; i++) {

2651 
v
 = 
	`ngx_¨øy_push
(*
a
);

2652 i‡(
v
 =
NULL
) {

2653  
NGX_CONF_ERROR
;

2656 
v
->
°©us
 = 
°©u£s
[
i
];

2657 
v
->
vÆid
 = valid;

2660  
NGX_CONF_OK
;

2663 
i
 = 1; i < 
n
; i++) {

2665 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "any") == 0) {

2667 
°©us
 = 0;

2671 
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

2672 i‡(
°©us
 < 100) {

2673 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2674 "övÆid sètu†\"%V\"", &
vÆue
[
i
]);

2675  
NGX_CONF_ERROR
;

2679 
v
 = 
	`ngx_¨øy_push
(*
a
);

2680 i‡(
v
 =
NULL
) {

2681  
NGX_CONF_ERROR
;

2684 
v
->
°©us
 = status;

2685 
v
->
vÆid
 = valid;

2688  
NGX_CONF_OK
;

2689 
	}
}

	@src/http/ngx_http_header_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_hódî_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL
,

33 
ngx_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_hódî_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
u_ch¨
 
	gngx_hâp_£rvî_°rög
[] = "Sîvî:Çgöx" 
CRLF
;

50 
u_ch¨
 
	gngx_hâp_£rvî_fuŒ_°rög
[] = "Sîvî: " 
NGINX_VER
 
CRLF
;

51 
u_ch¨
 
	gngx_hâp_£rvî_buûd_°rög
[] = "Sîvî: " 
NGINX_VER_BUILD
 
CRLF
;

54 
ngx_°r_t
 
	gngx_hâp_°©us_löes
[] = {

56 
ngx_°rög
("200 OK"),

57 
ngx_°rög
("201 Created"),

58 
ngx_°rög
("202 Accepted"),

59 
ngx_nuŒ_°rög
,

60 
ngx_°rög
("204 No Content"),

61 
ngx_nuŒ_°rög
,

62 
ngx_°rög
("206 Partial Content"),

66 
	#NGX_HTTP_LAST_2XX
 207

	)

67 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 200)

	)

71 
ngx_°rög
("301 Moved Permanently"),

72 
ngx_°rög
("302 Moved Temporarily"),

73 
ngx_°rög
("303 See Other"),

74 
ngx_°rög
("304 Not Modified"),

75 
ngx_nuŒ_°rög
,

76 
ngx_nuŒ_°rög
,

77 
ngx_°rög
("307 Temporary Redirect"),

78 
ngx_°rög
("308 Permanent Redirect"),

80 
	#NGX_HTTP_LAST_3XX
 309

	)

81 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

83 
ngx_°rög
("400 Bad Request"),

84 
ngx_°rög
("401 Unauthorized"),

85 
ngx_°rög
("402 Payment Required"),

86 
ngx_°rög
("403 Forbidden"),

87 
ngx_°rög
("404 Not Found"),

88 
ngx_°rög
("405 Not Allowed"),

89 
ngx_°rög
("406 Not Acceptable"),

90 
ngx_nuŒ_°rög
,

91 
ngx_°rög
("408 Request Time-out"),

92 
ngx_°rög
("409 Conflict"),

93 
ngx_°rög
("410 Gone"),

94 
ngx_°rög
("411 Length Required"),

95 
ngx_°rög
("412 Precondition Failed"),

96 
ngx_°rög
("413 Request Entity Too Large"),

97 
ngx_°rög
("414 Request-URI Too Large"),

98 
ngx_°rög
("415 Unsupported Media Type"),

99 
ngx_°rög
("416 Requested Range Not Satisfiable"),

100 
ngx_nuŒ_°rög
,

101 
ngx_nuŒ_°rög
,

102 
ngx_nuŒ_°rög
,

103 
ngx_nuŒ_°rög
,

104 
ngx_°rög
("421 Misdirected Request"),

105 
ngx_nuŒ_°rög
,

106 
ngx_nuŒ_°rög
,

107 
ngx_nuŒ_°rög
,

108 
ngx_nuŒ_°rög
,

109 
ngx_nuŒ_°rög
,

110 
ngx_nuŒ_°rög
,

111 
ngx_nuŒ_°rög
,

112 
ngx_°rög
("429 Too Many Requests"),

114 
	#NGX_HTTP_LAST_4XX
 430

	)

115 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

117 
ngx_°rög
("500 Internal Server Error"),

118 
ngx_°rög
("501 Not Implemented"),

119 
ngx_°rög
("502 Bad Gateway"),

120 
ngx_°rög
("503 Service Temporarily Unavailable"),

121 
ngx_°rög
("504 Gateway Time-out"),

122 
ngx_°rög
("505 HTTP Version Not Supported"),

123 
ngx_nuŒ_°rög
,

124 
ngx_°rög
("507 Insufficient Storage"),

130 
	#NGX_HTTP_LAST_5XX
 508

	)

135 
ngx_hâp_hódî_out_t
 
	gngx_hâp_hódîs_out
[] = {

136 { 
ngx_°rög
("Sîvî"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
) },

137 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
) },

138 { 
ngx_°rög
("Content-Length"),

139 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_Àngth
) },

140 { 
ngx_°rög
("Content-Encoding"),

141 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ícodög
) },

142 { 
ngx_°rög
("Loˇti⁄"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
loˇti⁄
) },

143 { 
ngx_°rög
("Last-Modified"),

144 
off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
) },

145 { 
ngx_°rög
("Accept-Ranges"),

146 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
) },

147 { 
ngx_°rög
("Expúes"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
) },

148 { 
ngx_°rög
("Cache-Control"),

149 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
) },

150 { 
ngx_°rög
("ETag"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
) },

152 { 
ngx_nuŒ_°rög
, 0 }

156 
ngx_öt_t


157 
	$ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

159 
u_ch¨
 *
p
;

160 
size_t
 
Àn
;

161 
ngx_°r_t
 
ho°
, *
°©us_löe
;

162 
ngx_buf_t
 *
b
;

163 
ngx_uöt_t
 
°©us
, 
i
, 
p‹t
;

164 
ngx_chaö_t
 
out
;

165 
ngx_li°_∑π_t
 *
∑π
;

166 
ngx_èbÀ_ñt_t
 *
hódî
;

167 
ngx_c⁄√˘i⁄_t
 *
c
;

168 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

169 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

170 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

172 i‡(
r
->
hódî_£¡
) {

173  
NGX_OK
;

176 
r
->
hódî_£¡
 = 1;

178 i‡(
r
 !r->
maö
) {

179  
NGX_OK
;

182 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

183  
NGX_OK
;

186 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

187 
r
->
hódî_⁄ly
 = 1;

190 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 != -1) {

191 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


192 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


193 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED
)

195 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

196 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

200 
Àn
 = ("HTTP/1.x "Ë- 1 + (
CRLF
) - 1

202 + (
CRLF
) - 1;

206 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

207 
Àn
 +
r
->
hódîs_out
.
°©us_löe
.len;

208 
°©us_löe
 = &
r
->
hódîs_out
.status_line;

209 #i‡(
NGX_SUPPRESS_WARN
)

210 
°©us
 = 0;

215 
°©us
 = 
r
->
hódîs_out
.status;

217 i‡(
°©us
 >
NGX_HTTP_OK


218 && 
°©us
 < 
NGX_HTTP_LAST_2XX
)

222 i‡(
°©us
 =
NGX_HTTP_NO_CONTENT
) {

223 
r
->
hódî_⁄ly
 = 1;

224 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

225 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

226 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

227 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

231 
°©us
 -
NGX_HTTP_OK
;

232 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

233 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

235 } i‡(
°©us
 >
NGX_HTTP_MOVED_PERMANENTLY


236 && 
°©us
 < 
NGX_HTTP_LAST_3XX
)

240 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

241 
r
->
hódî_⁄ly
 = 1;

244 
°©us
 = sètu†- 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

245 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

246 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

248 } i‡(
°©us
 >
NGX_HTTP_BAD_REQUEST


249 && 
°©us
 < 
NGX_HTTP_LAST_4XX
)

252 
°©us
 = sètu†- 
NGX_HTTP_BAD_REQUEST


253 + 
NGX_HTTP_OFF_4XX
;

255 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

256 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

258 } i‡(
°©us
 >
NGX_HTTP_INTERNAL_SERVER_ERROR


259 && 
°©us
 < 
NGX_HTTP_LAST_5XX
)

262 
°©us
 = sètu†- 
NGX_HTTP_INTERNAL_SERVER_ERROR


263 + 
NGX_HTTP_OFF_5XX
;

265 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

266 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

269 
Àn
 +
NGX_INT_T_LEN
 + 1 ;

270 
°©us_löe
 = 
NULL
;

273 i‡(
°©us_löe
 && sètus_löe->
Àn
 == 0) {

274 
°©us
 = 
r
->
hódîs_out
.status;

275 
Àn
 +
NGX_INT_T_LEN
 + 1 ;

276 
°©us_löe
 = 
NULL
;

280 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

282 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

283 i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_ON
) {

284 
Àn
 +(
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

286 } i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_BUILD
) {

287 
Àn
 +(
ngx_hâp_£rvî_buûd_°rög
) - 1;

290 
Àn
 +(
ngx_hâp_£rvî_°rög
) - 1;

294 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

295 
Àn
 +("D©e: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

298 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

299 
Àn
 += ("Content-Type: ") - 1

300 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 + 2;

302 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


303 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

305 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

309 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


310 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

312 
Àn
 +("C⁄ã¡-Lígth: "Ë- 1 + 
NGX_OFF_T_LEN
 + 2;

315 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


316 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

318 
Àn
 +("La°-Modifõd: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

321 
c
 = 
r
->
c⁄√˘i⁄
;

323 i‡(
r
->
hódîs_out
.
loˇti⁄


324 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


325 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/'

326 && 
˛cf
->
absﬁuã_ªdúe˘
)

328 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

330 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

331 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

332 
ho°
 = 
cscf
->
£rvî_«me
;

334 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

335 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

338 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

339 
ho°
.
d©a
 = 
addr
;

341 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

342  
NGX_ERROR
;

346 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
c
->
loˇl_sockaddr
);

348 
Àn
 += ("Location: https://") - 1

349 + 
ho°
.
Àn


350 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 + 2;

352 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

354 #i‡(
NGX_HTTP_SSL
)

355 i‡(
c
->
s¶
)

356 
p‹t
 = (port == 443) ? 0 :Öort;

359 
p‹t
 = (port == 80) ? 0 :Öort;

362 
p‹t
 = 0;

365 i‡(
p‹t
) {

366 
Àn
 += (":65535") - 1;

370 
	`ngx_°r_nuŒ
(&
ho°
);

371 
p‹t
 = 0;

374 i‡(
r
->
chunked
) {

375 
Àn
 +("Tøns„r-Encodög: chunked" 
CRLF
) - 1;

378 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

379 
Àn
 +("C⁄√˘i⁄: upgøde" 
CRLF
) - 1;

381 } i‡(
r
->
kì∑live
) {

382 
Àn
 +("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1;

392 i‡(
˛cf
->
kì∑live_hódî
) {

393 
Àn
 +("Kìp-Alive:Åimeout="Ë- 1 + 
NGX_TIME_T_LEN
 + 2;

397 
Àn
 +("C⁄√˘i⁄: clo£" 
CRLF
) - 1;

400 #i‡(
NGX_HTTP_GZIP
)

401 i‡(
r
->
gzù_v¨y
) {

402 i‡(
˛cf
->
gzù_v¨y
) {

403 
Àn
 +("V¨y: Ac˚±-Encodög" 
CRLF
) - 1;

406 
r
->
gzù_v¨y
 = 0;

411 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

412 
hódî
 = 
∑π
->
ñts
;

414 
i
 = 0; ; i++) {

416 i‡(
i
 >
∑π
->
√…s
) {

417 i‡(
∑π
->
√xt
 =
NULL
) {

421 
∑π
 =Ö¨t->
√xt
;

422 
hódî
 = 
∑π
->
ñts
;

423 
i
 = 0;

426 i‡(
hódî
[
i
].
hash
 == 0) {

430 
Àn
 +
hódî
[
i
].
key
.À¿+ (": "Ë- 1 + hódî[i].
vÆue
.len

431 + (
CRLF
) - 1;

434 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

435 i‡(
b
 =
NULL
) {

436  
NGX_ERROR
;

440 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP/1.1 ", ("HTTP/1.x ") - 1);

443 i‡(
°©us_löe
) {

444 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
°©us_löe
->
d©a
, sètus_löe->
Àn
);

447 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%03uò", 
°©us
);

449 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

451 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

452 i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_ON
) {

453 
p
 = 
ngx_hâp_£rvî_fuŒ_°rög
;

454 
Àn
 = (
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

456 } i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_BUILD
) {

457 
p
 = 
ngx_hâp_£rvî_buûd_°rög
;

458 
Àn
 = (
ngx_hâp_£rvî_buûd_°rög
) - 1;

461 
p
 = 
ngx_hâp_£rvî_°rög
;

462 
Àn
 = (
ngx_hâp_£rvî_°rög
) - 1;

465 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
Àn
);

468 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

469 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Date: ", ("Date: ") - 1);

470 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_ˇched_hâp_time
.
d©a
,

471 
ngx_ˇched_hâp_time
.
Àn
);

473 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

476 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

477 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Content-Type: ",

479 
p
 = 
b
->
œ°
;

480 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

481 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

483 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


484 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

486 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "; charset=",

488 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

489 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

493 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
b
->
œ°
 - 
p
;

494 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

497 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

500 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


501 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

503 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "C⁄ã¡-Lígth: %O" 
CRLF
,

504 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

507 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


508 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

510 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Last-Modified: ",

512 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
r
->
hódîs_out
.
œ°_modifõd_time
);

514 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

517 i‡(
ho°
.
d©a
) {

519 
p
 = 
b
->
œ°
 + ("Location: ") - 1;

521 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Location: http",

524 #i‡(
NGX_HTTP_SSL
)

525 i‡(
c
->
s¶
) {

526 *
b
->
œ°
++ ='s';

530 *
b
->
œ°
++ = ':'; *b->last++ = '/'; *b->last++ = '/';

531 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ho°
.
d©a
, ho°.
Àn
);

533 i‡(
p‹t
) {

534 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, ":%ui", 
p‹t
);

537 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

538 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

542 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
b
->
œ°
 - 
p
;

543 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

544 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

546 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

549 i‡(
r
->
chunked
) {

550 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Tøns„r-Encodög: chunked" 
CRLF
,

551 ("Tøns„r-Encodög: chunked" 
CRLF
) - 1);

554 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

555 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: upgøde" 
CRLF
,

556 ("C⁄√˘i⁄: upgøde" 
CRLF
) - 1);

558 } i‡(
r
->
kì∑live
) {

559 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: kìp-Æive" 
CRLF
,

560 ("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1);

562 i‡(
˛cf
->
kì∑live_hódî
) {

563 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Kìp-Alive:Åimeout=%T" 
CRLF
,

564 
˛cf
->
kì∑live_hódî
);

568 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: clo£" 
CRLF
,

569 ("C⁄√˘i⁄: clo£" 
CRLF
) - 1);

572 #i‡(
NGX_HTTP_GZIP
)

573 i‡(
r
->
gzù_v¨y
) {

574 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "V¨y: Ac˚±-Encodög" 
CRLF
,

575 ("V¨y: Ac˚±-Encodög" 
CRLF
) - 1);

579 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

580 
hódî
 = 
∑π
->
ñts
;

582 
i
 = 0; ; i++) {

584 i‡(
i
 >
∑π
->
√…s
) {

585 i‡(
∑π
->
√xt
 =
NULL
) {

589 
∑π
 =Ö¨t->
√xt
;

590 
hódî
 = 
∑π
->
ñts
;

591 
i
 = 0;

594 i‡(
hódî
[
i
].
hash
 == 0) {

598 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

599 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

601 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

602 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

605 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

606 "%*s", (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

609 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

611 
r
->
hódî_size
 = 
b
->
œ°
 - b->
pos
;

613 i‡(
r
->
hódî_⁄ly
) {

614 
b
->
œ°_buf
 = 1;

617 
out
.
buf
 = 
b
;

618 
out
.
√xt
 = 
NULL
;

620  
	`ngx_hâp_wrôe_fûãr
(
r
, &
out
);

621 
	}
}

624 
ngx_öt_t


625 
	$ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

627 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódî_fûãr
;

629  
NGX_OK
;

630 
	}
}

	@src/http/ngx_http_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
uöt32_t
 
	gusuÆ
[] = {

20 #i‡(
NGX_WIN32
)

36 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

38 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

39 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

41 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

42 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

44 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

45 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

47 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

48 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

49 && 
m
[4] =
c4


	)

51 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

52 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

53 && (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
)

	)

55 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

56 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

57 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

59 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

60 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

61 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

63 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

64 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

65 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
) \

66 && 
m
[8] =
c8


	)

70 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

71 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2


	)

73 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

74 
m
[0] =
c0
 && m[2] =
c2
 && m[3] =
c3


	)

76 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

77 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3


	)

79 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

80 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

82 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

83 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

84 && 
m
[4] =
c4
 && m[5] =
c5


	)

86 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

87 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

88 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6


	)

90 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

91 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

92 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7


	)

94 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

95 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

96 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7
 && m[8] =
c8


	)

103 
ngx_öt_t


104 
	$ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

106 
u_ch¨
 
c
, 
ch
, *
p
, *
m
;

108 
sw_°¨t
 = 0,

109 
sw_mëhod
,

110 
sw_•a˚s_bef‹e_uri
,

111 
sw_schema
,

112 
sw_schema_¶ash
,

113 
sw_schema_¶ash_¶ash
,

114 
sw_ho°_°¨t
,

115 
sw_ho°
,

116 
sw_ho°_íd
,

117 
sw_ho°_ù_lôîÆ
,

118 
sw_p‹t
,

119 
sw_ho°_hâp_09
,

120 
sw_a·î_¶ash_ö_uri
,

121 
sw_check_uri
,

122 
sw_check_uri_hâp_09
,

123 
sw_uri
,

124 
sw_hâp_09
,

125 
sw_hâp_H
,

126 
sw_hâp_HT
,

127 
sw_hâp_HTT
,

128 
sw_hâp_HTTP
,

129 
sw_fú°_maj‹_digô
,

130 
sw_maj‹_digô
,

131 
sw_fú°_mö‹_digô
,

132 
sw_mö‹_digô
,

133 
sw_•a˚s_a·î_digô
,

134 
sw_Æmo°_d⁄e


135 } 
°©e
;

137 
°©e
 = 
r
->state;

139 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

140 
ch
 = *
p
;

142 
°©e
) {

145 
sw_°¨t
:

146 
r
->
ªque°_°¨t
 = 
p
;

148 i‡(
ch
 =
CR
 || ch =
LF
) {

152 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_' && ch != '-') {

153  
NGX_HTTP_PARSE_INVALID_METHOD
;

156 
°©e
 = 
sw_mëhod
;

159 
sw_mëhod
:

160 i‡(
ch
 == ' ') {

161 
r
->
mëhod_íd
 = 
p
 - 1;

162 
m
 = 
r
->
ªque°_°¨t
;

164 
p
 - 
m
) {

167 i‡(
	`ngx_°r3_cmp
(
m
, 'G', 'E', 'T', ' ')) {

168 
r
->
mëhod
 = 
NGX_HTTP_GET
;

172 i‡(
	`ngx_°r3_cmp
(
m
, 'P', 'U', 'T', ' ')) {

173 
r
->
mëhod
 = 
NGX_HTTP_PUT
;

180 i‡(
m
[1] == 'O') {

182 i‡(
	`ngx_°r3Ocmp
(
m
, 'P', 'O', 'S', 'T')) {

183 
r
->
mëhod
 = 
NGX_HTTP_POST
;

187 i‡(
	`ngx_°r3Ocmp
(
m
, 'C', 'O', 'P', 'Y')) {

188 
r
->
mëhod
 = 
NGX_HTTP_COPY
;

192 i‡(
	`ngx_°r3Ocmp
(
m
, 'M', 'O', 'V', 'E')) {

193 
r
->
mëhod
 = 
NGX_HTTP_MOVE
;

197 i‡(
	`ngx_°r3Ocmp
(
m
, 'L', 'O', 'C', 'K')) {

198 
r
->
mëhod
 = 
NGX_HTTP_LOCK
;

204 i‡(
	`ngx_°r4cmp
(
m
, 'H', 'E', 'A', 'D')) {

205 
r
->
mëhod
 = 
NGX_HTTP_HEAD
;

213 i‡(
	`ngx_°r5cmp
(
m
, 'M', 'K', 'C', 'O', 'L')) {

214 
r
->
mëhod
 = 
NGX_HTTP_MKCOL
;

218 i‡(
	`ngx_°r5cmp
(
m
, 'P', 'A', 'T', 'C', 'H')) {

219 
r
->
mëhod
 = 
NGX_HTTP_PATCH
;

223 i‡(
	`ngx_°r5cmp
(
m
, 'T', 'R', 'A', 'C', 'E')) {

224 
r
->
mëhod
 = 
NGX_HTTP_TRACE
;

231 i‡(
	`ngx_°r6cmp
(
m
, 'D', 'E', 'L', 'E', 'T', 'E')) {

232 
r
->
mëhod
 = 
NGX_HTTP_DELETE
;

236 i‡(
	`ngx_°r6cmp
(
m
, 'U', 'N', 'L', 'O', 'C', 'K')) {

237 
r
->
mëhod
 = 
NGX_HTTP_UNLOCK
;

244 i‡(
	`ngx_°r7_cmp
(
m
, 'O', 'P', 'T', 'I', 'O', 'N', 'S', ' '))

246 
r
->
mëhod
 = 
NGX_HTTP_OPTIONS
;

252 i‡(
	`ngx_°r8cmp
(
m
, 'P', 'R', 'O', 'P', 'F', 'I', 'N', 'D'))

254 
r
->
mëhod
 = 
NGX_HTTP_PROPFIND
;

260 i‡(
	`ngx_°r9cmp
(
m
,

263 
r
->
mëhod
 = 
NGX_HTTP_PROPPATCH
;

269 
°©e
 = 
sw_•a˚s_bef‹e_uri
;

273 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_' && ch != '-') {

274  
NGX_HTTP_PARSE_INVALID_METHOD
;

280 
sw_•a˚s_bef‹e_uri
:

282 i‡(
ch
 == '/') {

283 
r
->
uri_°¨t
 = 
p
;

284 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

288 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

289 i‡(
c
 >= 'a' && c <= 'z') {

290 
r
->
schema_°¨t
 = 
p
;

291 
°©e
 = 
sw_schema
;

295 
ch
) {

299  
NGX_HTTP_PARSE_INVALID_REQUEST
;

303 
sw_schema
:

305 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

306 i‡(
c
 >= 'a' && c <= 'z') {

310 i‡((
ch
 >= '0' && ch <= '9') || ch == '+' || ch == '-' || ch == '.')

315 
ch
) {

317 
r
->
schema_íd
 = 
p
;

318 
°©e
 = 
sw_schema_¶ash
;

321  
NGX_HTTP_PARSE_INVALID_REQUEST
;

325 
sw_schema_¶ash
:

326 
ch
) {

328 
°©e
 = 
sw_schema_¶ash_¶ash
;

331  
NGX_HTTP_PARSE_INVALID_REQUEST
;

335 
sw_schema_¶ash_¶ash
:

336 
ch
) {

338 
°©e
 = 
sw_ho°_°¨t
;

341  
NGX_HTTP_PARSE_INVALID_REQUEST
;

345 
sw_ho°_°¨t
:

347 
r
->
ho°_°¨t
 = 
p
;

349 i‡(
ch
 == '[') {

350 
°©e
 = 
sw_ho°_ù_lôîÆ
;

354 
°©e
 = 
sw_ho°
;

358 
sw_ho°
:

360 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

361 i‡(
c
 >= 'a' && c <= 'z') {

365 i‡((
ch
 >= '0' && ch <= '9') || ch == '.' || ch == '-') {

371 
sw_ho°_íd
:

373 
r
->
ho°_íd
 = 
p
;

375 
ch
) {

377 
°©e
 = 
sw_p‹t
;

380 
r
->
uri_°¨t
 = 
p
;

381 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

388 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

389 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

390 
°©e
 = 
sw_ho°_hâp_09
;

393  
NGX_HTTP_PARSE_INVALID_REQUEST
;

397 
sw_ho°_ù_lôîÆ
:

399 i‡(
ch
 >= '0' && ch <= '9') {

403 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

404 i‡(
c
 >= 'a' && c <= 'z') {

408 
ch
) {

412 
°©e
 = 
sw_ho°_íd
;

434  
NGX_HTTP_PARSE_INVALID_REQUEST
;

438 
sw_p‹t
:

439 i‡(
ch
 >= '0' && ch <= '9') {

443 
ch
) {

445 
r
->
p‹t_íd
 = 
p
;

446 
r
->
uri_°¨t
 = 
p
;

447 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

450 
r
->
p‹t_íd
 = 
p
;

455 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

456 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

457 
°©e
 = 
sw_ho°_hâp_09
;

460  
NGX_HTTP_PARSE_INVALID_REQUEST
;

465 
sw_ho°_hâp_09
:

466 
ch
) {

469 
CR
:

470 
r
->
hâp_mö‹
 = 9;

471 
°©e
 = 
sw_Æmo°_d⁄e
;

473 
LF
:

474 
r
->
hâp_mö‹
 = 9;

475 
d⁄e
;

477 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

478 
°©e
 = 
sw_hâp_H
;

481  
NGX_HTTP_PARSE_INVALID_REQUEST
;

487 
sw_a·î_¶ash_ö_uri
:

489 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

490 
°©e
 = 
sw_check_uri
;

494 
ch
) {

496 
r
->
uri_íd
 = 
p
;

497 
°©e
 = 
sw_check_uri_hâp_09
;

499 
CR
:

500 
r
->
uri_íd
 = 
p
;

501 
r
->
hâp_mö‹
 = 9;

502 
°©e
 = 
sw_Æmo°_d⁄e
;

504 
LF
:

505 
r
->
uri_íd
 = 
p
;

506 
r
->
hâp_mö‹
 = 9;

507 
d⁄e
;

509 
r
->
com∂ex_uri
 = 1;

510 
°©e
 = 
sw_uri
;

513 
r
->
quŸed_uri
 = 1;

514 
°©e
 = 
sw_uri
;

517 
r
->
com∂ex_uri
 = 1;

518 
°©e
 = 
sw_uri
;

520 #i‡(
NGX_WIN32
)

522 
r
->
com∂ex_uri
 = 1;

523 
°©e
 = 
sw_uri
;

527 
r
->
¨gs_°¨t
 = 
p
 + 1;

528 
°©e
 = 
sw_uri
;

531 
r
->
com∂ex_uri
 = 1;

532 
°©e
 = 
sw_uri
;

535 
r
->
∂us_ö_uri
 = 1;

538  
NGX_HTTP_PARSE_INVALID_REQUEST
;

540 
°©e
 = 
sw_check_uri
;

546 
sw_check_uri
:

548 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

552 
ch
) {

554 #i‡(
NGX_WIN32
)

555 i‡(
r
->
uri_ext
 =
p
) {

556 
r
->
com∂ex_uri
 = 1;

557 
°©e
 = 
sw_uri
;

561 
r
->
uri_ext
 = 
NULL
;

562 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

565 
r
->
uri_ext
 = 
p
 + 1;

568 
r
->
uri_íd
 = 
p
;

569 
°©e
 = 
sw_check_uri_hâp_09
;

571 
CR
:

572 
r
->
uri_íd
 = 
p
;

573 
r
->
hâp_mö‹
 = 9;

574 
°©e
 = 
sw_Æmo°_d⁄e
;

576 
LF
:

577 
r
->
uri_íd
 = 
p
;

578 
r
->
hâp_mö‹
 = 9;

579 
d⁄e
;

580 #i‡(
NGX_WIN32
)

582 
r
->
com∂ex_uri
 = 1;

583 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

587 
r
->
quŸed_uri
 = 1;

588 
°©e
 = 
sw_uri
;

591 
r
->
¨gs_°¨t
 = 
p
 + 1;

592 
°©e
 = 
sw_uri
;

595 
r
->
com∂ex_uri
 = 1;

596 
°©e
 = 
sw_uri
;

599 
r
->
∂us_ö_uri
 = 1;

602  
NGX_HTTP_PARSE_INVALID_REQUEST
;

607 
sw_check_uri_hâp_09
:

608 
ch
) {

611 
CR
:

612 
r
->
hâp_mö‹
 = 9;

613 
°©e
 = 
sw_Æmo°_d⁄e
;

615 
LF
:

616 
r
->
hâp_mö‹
 = 9;

617 
d⁄e
;

619 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

620 
°©e
 = 
sw_hâp_H
;

623 
r
->
•a˚_ö_uri
 = 1;

624 
°©e
 = 
sw_check_uri
;

625 
p
--;

632 
sw_uri
:

634 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

638 
ch
) {

640 
r
->
uri_íd
 = 
p
;

641 
°©e
 = 
sw_hâp_09
;

643 
CR
:

644 
r
->
uri_íd
 = 
p
;

645 
r
->
hâp_mö‹
 = 9;

646 
°©e
 = 
sw_Æmo°_d⁄e
;

648 
LF
:

649 
r
->
uri_íd
 = 
p
;

650 
r
->
hâp_mö‹
 = 9;

651 
d⁄e
;

653 
r
->
com∂ex_uri
 = 1;

656  
NGX_HTTP_PARSE_INVALID_REQUEST
;

661 
sw_hâp_09
:

662 
ch
) {

665 
CR
:

666 
r
->
hâp_mö‹
 = 9;

667 
°©e
 = 
sw_Æmo°_d⁄e
;

669 
LF
:

670 
r
->
hâp_mö‹
 = 9;

671 
d⁄e
;

673 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

674 
°©e
 = 
sw_hâp_H
;

677 
r
->
•a˚_ö_uri
 = 1;

678 
°©e
 = 
sw_uri
;

679 
p
--;

684 
sw_hâp_H
:

685 
ch
) {

687 
°©e
 = 
sw_hâp_HT
;

690  
NGX_HTTP_PARSE_INVALID_REQUEST
;

694 
sw_hâp_HT
:

695 
ch
) {

697 
°©e
 = 
sw_hâp_HTT
;

700  
NGX_HTTP_PARSE_INVALID_REQUEST
;

704 
sw_hâp_HTT
:

705 
ch
) {

707 
°©e
 = 
sw_hâp_HTTP
;

710  
NGX_HTTP_PARSE_INVALID_REQUEST
;

714 
sw_hâp_HTTP
:

715 
ch
) {

717 
°©e
 = 
sw_fú°_maj‹_digô
;

720  
NGX_HTTP_PARSE_INVALID_REQUEST
;

725 
sw_fú°_maj‹_digô
:

726 i‡(
ch
 < '1' || ch > '9') {

727  
NGX_HTTP_PARSE_INVALID_REQUEST
;

730 
r
->
hâp_maj‹
 = 
ch
 - '0';

732 i‡(
r
->
hâp_maj‹
 > 1) {

733  
NGX_HTTP_PARSE_INVALID_VERSION
;

736 
°©e
 = 
sw_maj‹_digô
;

740 
sw_maj‹_digô
:

741 i‡(
ch
 == '.') {

742 
°©e
 = 
sw_fú°_mö‹_digô
;

746 i‡(
ch
 < '0' || ch > '9') {

747  
NGX_HTTP_PARSE_INVALID_REQUEST
;

750 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + (
ch
 - '0');

752 i‡(
r
->
hâp_maj‹
 > 1) {

753  
NGX_HTTP_PARSE_INVALID_VERSION
;

759 
sw_fú°_mö‹_digô
:

760 i‡(
ch
 < '0' || ch > '9') {

761  
NGX_HTTP_PARSE_INVALID_REQUEST
;

764 
r
->
hâp_mö‹
 = 
ch
 - '0';

765 
°©e
 = 
sw_mö‹_digô
;

769 
sw_mö‹_digô
:

770 i‡(
ch
 =
CR
) {

771 
°©e
 = 
sw_Æmo°_d⁄e
;

775 i‡(
ch
 =
LF
) {

776 
d⁄e
;

779 i‡(
ch
 == ' ') {

780 
°©e
 = 
sw_•a˚s_a·î_digô
;

784 i‡(
ch
 < '0' || ch > '9') {

785  
NGX_HTTP_PARSE_INVALID_REQUEST
;

788 i‡(
r
->
hâp_mö‹
 > 99) {

789  
NGX_HTTP_PARSE_INVALID_REQUEST
;

792 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + (
ch
 - '0');

795 
sw_•a˚s_a·î_digô
:

796 
ch
) {

799 
CR
:

800 
°©e
 = 
sw_Æmo°_d⁄e
;

802 
LF
:

803 
d⁄e
;

805  
NGX_HTTP_PARSE_INVALID_REQUEST
;

810 
sw_Æmo°_d⁄e
:

811 
r
->
ªque°_íd
 = 
p
 - 1;

812 
ch
) {

813 
LF
:

814 
d⁄e
;

816  
NGX_HTTP_PARSE_INVALID_REQUEST
;

821 
b
->
pos
 = 
p
;

822 
r
->
°©e
 = state;

824  
NGX_AGAIN
;

826 
d⁄e
:

828 
b
->
pos
 = 
p
 + 1;

830 i‡(
r
->
ªque°_íd
 =
NULL
) {

831 
r
->
ªque°_íd
 = 
p
;

834 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

835 
r
->
°©e
 = 
sw_°¨t
;

837 i‡(
r
->
hâp_vîsi⁄
 =9 &&Ñ->
mëhod
 !
NGX_HTTP_GET
) {

838  
NGX_HTTP_PARSE_INVALID_09_METHOD
;

841  
NGX_OK
;

842 
	}
}

845 
ngx_öt_t


846 
	$ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

847 
ngx_uöt_t
 
Ælow_undîsc‹es
)

849 
u_ch¨
 
c
, 
ch
, *
p
;

850 
ngx_uöt_t
 
hash
, 
i
;

852 
sw_°¨t
 = 0,

853 
sw_«me
,

854 
sw_•a˚_bef‹e_vÆue
,

855 
sw_vÆue
,

856 
sw_•a˚_a·î_vÆue
,

857 
sw_ign‹e_löe
,

858 
sw_Æmo°_d⁄e
,

859 
sw_hódî_Æmo°_d⁄e


860 } 
°©e
;

864 
u_ch¨
 
lowˇ£
[] =

874 
°©e
 = 
r
->state;

875 
hash
 = 
r
->
hódî_hash
;

876 
i
 = 
r
->
lowˇ£_ödex
;

878 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

879 
ch
 = *
p
;

881 
°©e
) {

884 
sw_°¨t
:

885 
r
->
hódî_«me_°¨t
 = 
p
;

886 
r
->
övÆid_hódî
 = 0;

888 
ch
) {

889 
CR
:

890 
r
->
hódî_íd
 = 
p
;

891 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

893 
LF
:

894 
r
->
hódî_íd
 = 
p
;

895 
hódî_d⁄e
;

897 
°©e
 = 
sw_«me
;

899 
c
 = 
lowˇ£
[
ch
];

901 i‡(
c
) {

902 
hash
 = 
	`ngx_hash
(0, 
c
);

903 
r
->
lowˇ£_hódî
[0] = 
c
;

904 
i
 = 1;

908 i‡(
ch
 == '_') {

909 i‡(
Ælow_undîsc‹es
) {

910 
hash
 = 
	`ngx_hash
(0, 
ch
);

911 
r
->
lowˇ£_hódî
[0] = 
ch
;

912 
i
 = 1;

915 
r
->
övÆid_hódî
 = 1;

921 i‡(
ch
 == '\0') {

922  
NGX_HTTP_PARSE_INVALID_HEADER
;

925 
r
->
övÆid_hódî
 = 1;

933 
sw_«me
:

934 
c
 = 
lowˇ£
[
ch
];

936 i‡(
c
) {

937 
hash
 = 
	`ngx_hash
(hash, 
c
);

938 
r
->
lowˇ£_hódî
[
i
++] = 
c
;

939 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

943 i‡(
ch
 == '_') {

944 i‡(
Ælow_undîsc‹es
) {

945 
hash
 = 
	`ngx_hash
(hash, 
ch
);

946 
r
->
lowˇ£_hódî
[
i
++] = 
ch
;

947 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

950 
r
->
övÆid_hódî
 = 1;

956 i‡(
ch
 == ':') {

957 
r
->
hódî_«me_íd
 = 
p
;

958 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

962 i‡(
ch
 =
CR
) {

963 
r
->
hódî_«me_íd
 = 
p
;

964 
r
->
hódî_°¨t
 = 
p
;

965 
r
->
hódî_íd
 = 
p
;

966 
°©e
 = 
sw_Æmo°_d⁄e
;

970 i‡(
ch
 =
LF
) {

971 
r
->
hódî_«me_íd
 = 
p
;

972 
r
->
hódî_°¨t
 = 
p
;

973 
r
->
hódî_íd
 = 
p
;

974 
d⁄e
;

978 i‡(
ch
 == '/'

979 && 
r
->
up°ªam


980 && 
p
 - 
r
->
hódî_«me_°¨t
 == 4

981 && 
	`ngx_°∫cmp
(
r
->
hódî_«me_°¨t
, "HTTP", 4) == 0)

983 
°©e
 = 
sw_ign‹e_löe
;

987 i‡(
ch
 == '\0') {

988  
NGX_HTTP_PARSE_INVALID_HEADER
;

991 
r
->
övÆid_hódî
 = 1;

996 
sw_•a˚_bef‹e_vÆue
:

997 
ch
) {

1000 
CR
:

1001 
r
->
hódî_°¨t
 = 
p
;

1002 
r
->
hódî_íd
 = 
p
;

1003 
°©e
 = 
sw_Æmo°_d⁄e
;

1005 
LF
:

1006 
r
->
hódî_°¨t
 = 
p
;

1007 
r
->
hódî_íd
 = 
p
;

1008 
d⁄e
;

1010  
NGX_HTTP_PARSE_INVALID_HEADER
;

1012 
r
->
hódî_°¨t
 = 
p
;

1013 
°©e
 = 
sw_vÆue
;

1019 
sw_vÆue
:

1020 
ch
) {

1022 
r
->
hódî_íd
 = 
p
;

1023 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1025 
CR
:

1026 
r
->
hódî_íd
 = 
p
;

1027 
°©e
 = 
sw_Æmo°_d⁄e
;

1029 
LF
:

1030 
r
->
hódî_íd
 = 
p
;

1031 
d⁄e
;

1033  
NGX_HTTP_PARSE_INVALID_HEADER
;

1038 
sw_•a˚_a·î_vÆue
:

1039 
ch
) {

1042 
CR
:

1043 
°©e
 = 
sw_Æmo°_d⁄e
;

1045 
LF
:

1046 
d⁄e
;

1048  
NGX_HTTP_PARSE_INVALID_HEADER
;

1050 
°©e
 = 
sw_vÆue
;

1056 
sw_ign‹e_löe
:

1057 
ch
) {

1058 
LF
:

1059 
°©e
 = 
sw_°¨t
;

1067 
sw_Æmo°_d⁄e
:

1068 
ch
) {

1069 
LF
:

1070 
d⁄e
;

1071 
CR
:

1074  
NGX_HTTP_PARSE_INVALID_HEADER
;

1079 
sw_hódî_Æmo°_d⁄e
:

1080 
ch
) {

1081 
LF
:

1082 
hódî_d⁄e
;

1084  
NGX_HTTP_PARSE_INVALID_HEADER
;

1089 
b
->
pos
 = 
p
;

1090 
r
->
°©e
 = state;

1091 
r
->
hódî_hash
 = 
hash
;

1092 
r
->
lowˇ£_ödex
 = 
i
;

1094  
NGX_AGAIN
;

1096 
d⁄e
:

1098 
b
->
pos
 = 
p
 + 1;

1099 
r
->
°©e
 = 
sw_°¨t
;

1100 
r
->
hódî_hash
 = 
hash
;

1101 
r
->
lowˇ£_ödex
 = 
i
;

1103  
NGX_OK
;

1105 
hódî_d⁄e
:

1107 
b
->
pos
 = 
p
 + 1;

1108 
r
->
°©e
 = 
sw_°¨t
;

1110  
NGX_HTTP_PARSE_HEADER_DONE
;

1111 
	}
}

1114 
ngx_öt_t


1115 
	$ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
)

1117 
u_ch¨
 *
p
, 
ch
;

1119 
sw_°¨t
 = 0,

1120 
sw_a·î_¶ash_ö_uri
,

1121 
sw_check_uri
,

1122 
sw_uri


1123 } 
°©e
;

1125 
°©e
 = 
sw_°¨t
;

1127 
p
 = 
r
->
uri_°¨t
;Ö !r->
uri_íd
;Ö++) {

1129 
ch
 = *
p
;

1131 
°©e
) {

1133 
sw_°¨t
:

1135 i‡(
ch
 != '/') {

1136  
NGX_ERROR
;

1139 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1143 
sw_a·î_¶ash_ö_uri
:

1145 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1146 
°©e
 = 
sw_check_uri
;

1150 
ch
) {

1152 
r
->
•a˚_ö_uri
 = 1;

1153 
°©e
 = 
sw_check_uri
;

1156 
r
->
com∂ex_uri
 = 1;

1157 
°©e
 = 
sw_uri
;

1160 
r
->
quŸed_uri
 = 1;

1161 
°©e
 = 
sw_uri
;

1164 
r
->
com∂ex_uri
 = 1;

1165 
°©e
 = 
sw_uri
;

1167 #i‡(
NGX_WIN32
)

1169 
r
->
com∂ex_uri
 = 1;

1170 
°©e
 = 
sw_uri
;

1174 
r
->
¨gs_°¨t
 = 
p
 + 1;

1175 
°©e
 = 
sw_uri
;

1178 
r
->
com∂ex_uri
 = 1;

1179 
°©e
 = 
sw_uri
;

1182 
r
->
∂us_ö_uri
 = 1;

1185 
°©e
 = 
sw_check_uri
;

1191 
sw_check_uri
:

1193 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1197 
ch
) {

1199 #i‡(
NGX_WIN32
)

1200 i‡(
r
->
uri_ext
 =
p
) {

1201 
r
->
com∂ex_uri
 = 1;

1202 
°©e
 = 
sw_uri
;

1206 
r
->
uri_ext
 = 
NULL
;

1207 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1210 
r
->
uri_ext
 = 
p
 + 1;

1213 
r
->
•a˚_ö_uri
 = 1;

1215 #i‡(
NGX_WIN32
)

1217 
r
->
com∂ex_uri
 = 1;

1218 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1222 
r
->
quŸed_uri
 = 1;

1223 
°©e
 = 
sw_uri
;

1226 
r
->
¨gs_°¨t
 = 
p
 + 1;

1227 
°©e
 = 
sw_uri
;

1230 
r
->
com∂ex_uri
 = 1;

1231 
°©e
 = 
sw_uri
;

1234 
r
->
∂us_ö_uri
 = 1;

1240 
sw_uri
:

1242 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1246 
ch
) {

1248 
r
->
•a˚_ö_uri
 = 1;

1251 
r
->
com∂ex_uri
 = 1;

1258  
NGX_OK
;

1259 
	}
}

1262 
ngx_öt_t


1263 
	$ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
mîge_¶ashes
)

1265 
u_ch¨
 
c
, 
ch
, 
decoded
, *
p
, *
u
;

1267 
sw_usuÆ
 = 0,

1268 
sw_¶ash
,

1269 
sw_dŸ
,

1270 
sw_dŸ_dŸ
,

1271 
sw_quŸed
,

1272 
sw_quŸed_£c⁄d


1273 } 
°©e
, 
quŸed_°©e
;

1275 #i‡(
NGX_SUPPRESS_WARN
)

1276 
decoded
 = '\0';

1277 
quŸed_°©e
 = 
sw_usuÆ
;

1280 
°©e
 = 
sw_usuÆ
;

1281 
p
 = 
r
->
uri_°¨t
;

1282 
u
 = 
r
->
uri
.
d©a
;

1283 
r
->
uri_ext
 = 
NULL
;

1284 
r
->
¨gs_°¨t
 = 
NULL
;

1286 
ch
 = *
p
++;

1288 
p
 <
r
->
uri_íd
) {

1296 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1297 "s:%d in:'%Xd:%c'", 
°©e
, 
ch
, ch);

1299 
°©e
) {

1301 
sw_usuÆ
:

1303 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1304 *
u
++ = 
ch
;

1305 
ch
 = *
p
++;

1309 
ch
) {

1310 #i‡(
NGX_WIN32
)

1312 i‡(
u
 - 2 >
r
->
uri
.
d©a


1313 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1315 
u
--;

1318 
r
->
uri_ext
 = 
NULL
;

1320 i‡(
p
 =
r
->
uri_°¨t
 +Ñ->
uri
.
Àn
) {

1330 
°©e
 = 
sw_¶ash
;

1331 *
u
++ = '/';

1335 #i‡(
NGX_WIN32
)

1336 i‡(
u
 - 2 >
r
->
uri
.
d©a


1337 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1339 
u
--;

1342 
r
->
uri_ext
 = 
NULL
;

1343 
°©e
 = 
sw_¶ash
;

1344 *
u
++ = 
ch
;

1347 
quŸed_°©e
 = 
°©e
;

1348 
°©e
 = 
sw_quŸed
;

1351 
r
->
¨gs_°¨t
 = 
p
;

1352 
¨gs
;

1354 
d⁄e
;

1356 
r
->
uri_ext
 = 
u
 + 1;

1357 *
u
++ = 
ch
;

1360 
r
->
∂us_ö_uri
 = 1;

1363 *
u
++ = 
ch
;

1367 
ch
 = *
p
++;

1370 
sw_¶ash
:

1372 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1373 
°©e
 = 
sw_usuÆ
;

1374 *
u
++ = 
ch
;

1375 
ch
 = *
p
++;

1379 
ch
) {

1380 #i‡(
NGX_WIN32
)

1385 i‡(!
mîge_¶ashes
) {

1386 *
u
++ = 
ch
;

1390 
°©e
 = 
sw_dŸ
;

1391 *
u
++ = 
ch
;

1394 
quŸed_°©e
 = 
°©e
;

1395 
°©e
 = 
sw_quŸed
;

1398 
r
->
¨gs_°¨t
 = 
p
;

1399 
¨gs
;

1401 
d⁄e
;

1403 
r
->
∂us_ö_uri
 = 1;

1406 
°©e
 = 
sw_usuÆ
;

1407 *
u
++ = 
ch
;

1411 
ch
 = *
p
++;

1414 
sw_dŸ
:

1416 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1417 
°©e
 = 
sw_usuÆ
;

1418 *
u
++ = 
ch
;

1419 
ch
 = *
p
++;

1423 
ch
) {

1424 #i‡(
NGX_WIN32
)

1428 
°©e
 = 
sw_¶ash
;

1429 
u
--;

1432 
°©e
 = 
sw_dŸ_dŸ
;

1433 *
u
++ = 
ch
;

1436 
quŸed_°©e
 = 
°©e
;

1437 
°©e
 = 
sw_quŸed
;

1440 
r
->
¨gs_°¨t
 = 
p
;

1441 
¨gs
;

1443 
d⁄e
;

1445 
r
->
∂us_ö_uri
 = 1;

1448 
°©e
 = 
sw_usuÆ
;

1449 *
u
++ = 
ch
;

1453 
ch
 = *
p
++;

1456 
sw_dŸ_dŸ
:

1458 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1459 
°©e
 = 
sw_usuÆ
;

1460 *
u
++ = 
ch
;

1461 
ch
 = *
p
++;

1465 
ch
) {

1466 #i‡(
NGX_WIN32
)

1470 
°©e
 = 
sw_¶ash
;

1471 
u
 -= 5;

1473 i‡(
u
 < 
r
->
uri
.
d©a
) {

1474  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1476 i‡(*
u
 == '/') {

1477 
u
++;

1480 
u
--;

1484 
quŸed_°©e
 = 
°©e
;

1485 
°©e
 = 
sw_quŸed
;

1488 
r
->
¨gs_°¨t
 = 
p
;

1489 
¨gs
;

1491 
d⁄e
;

1493 
r
->
∂us_ö_uri
 = 1;

1496 
°©e
 = 
sw_usuÆ
;

1497 *
u
++ = 
ch
;

1501 
ch
 = *
p
++;

1504 
sw_quŸed
:

1505 
r
->
quŸed_uri
 = 1;

1507 i‡(
ch
 >= '0' && ch <= '9') {

1508 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1509 
°©e
 = 
sw_quŸed_£c⁄d
;

1510 
ch
 = *
p
++;

1514 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1515 i‡(
c
 >= 'a' && c <= 'f') {

1516 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1517 
°©e
 = 
sw_quŸed_£c⁄d
;

1518 
ch
 = *
p
++;

1522  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1524 
sw_quŸed_£c⁄d
:

1525 i‡(
ch
 >= '0' && ch <= '9') {

1526 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + (ch - '0'));

1528 i‡(
ch
 == '%' || ch == '#') {

1529 
°©e
 = 
sw_usuÆ
;

1530 *
u
++ = 
ch
;

1531 
ch
 = *
p
++;

1534 } i‡(
ch
 == '\0') {

1535  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1538 
°©e
 = 
quŸed_°©e
;

1542 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1543 i‡(
c
 >= 'a' && c <= 'f') {

1544 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ (
c
 - 'a') + 10);

1546 i‡(
ch
 == '?') {

1547 
°©e
 = 
sw_usuÆ
;

1548 *
u
++ = 
ch
;

1549 
ch
 = *
p
++;

1552 } i‡(
ch
 == '+') {

1553 
r
->
∂us_ö_uri
 = 1;

1556 
°©e
 = 
quŸed_°©e
;

1560  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1564 
d⁄e
:

1566 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1568 i‡(
r
->
uri_ext
) {

1569 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1570 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1573 
r
->
uri_ext
 = 
NULL
;

1575  
NGX_OK
;

1577 
¨gs
:

1579 
p
 < 
r
->
uri_íd
) {

1580 i‡(*
p
++ != '#') {

1584 
r
->
¨gs
.
Àn
 = 
p
 - 1 -Ñ->
¨gs_°¨t
;

1585 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1586 
r
->
¨gs_°¨t
 = 
NULL
;

1591 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1593 i‡(
r
->
uri_ext
) {

1594 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1595 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1598 
r
->
uri_ext
 = 
NULL
;

1600  
NGX_OK
;

1601 
	}
}

1604 
ngx_öt_t


1605 
	$ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1606 
ngx_hâp_°©us_t
 *
°©us
)

1608 
u_ch¨
 
ch
;

1609 
u_ch¨
 *
p
;

1611 
sw_°¨t
 = 0,

1612 
sw_H
,

1613 
sw_HT
,

1614 
sw_HTT
,

1615 
sw_HTTP
,

1616 
sw_fú°_maj‹_digô
,

1617 
sw_maj‹_digô
,

1618 
sw_fú°_mö‹_digô
,

1619 
sw_mö‹_digô
,

1620 
sw_°©us
,

1621 
sw_•a˚_a·î_°©us
,

1622 
sw_°©us_ãxt
,

1623 
sw_Æmo°_d⁄e


1624 } 
°©e
;

1626 
°©e
 = 
r
->state;

1628 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1629 
ch
 = *
p
;

1631 
°©e
) {

1634 
sw_°¨t
:

1635 
ch
) {

1637 
°©e
 = 
sw_H
;

1640  
NGX_ERROR
;

1644 
sw_H
:

1645 
ch
) {

1647 
°©e
 = 
sw_HT
;

1650  
NGX_ERROR
;

1654 
sw_HT
:

1655 
ch
) {

1657 
°©e
 = 
sw_HTT
;

1660  
NGX_ERROR
;

1664 
sw_HTT
:

1665 
ch
) {

1667 
°©e
 = 
sw_HTTP
;

1670  
NGX_ERROR
;

1674 
sw_HTTP
:

1675 
ch
) {

1677 
°©e
 = 
sw_fú°_maj‹_digô
;

1680  
NGX_ERROR
;

1685 
sw_fú°_maj‹_digô
:

1686 i‡(
ch
 < '1' || ch > '9') {

1687  
NGX_ERROR
;

1690 
r
->
hâp_maj‹
 = 
ch
 - '0';

1691 
°©e
 = 
sw_maj‹_digô
;

1695 
sw_maj‹_digô
:

1696 i‡(
ch
 == '.') {

1697 
°©e
 = 
sw_fú°_mö‹_digô
;

1701 i‡(
ch
 < '0' || ch > '9') {

1702  
NGX_ERROR
;

1705 i‡(
r
->
hâp_maj‹
 > 99) {

1706  
NGX_ERROR
;

1709 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + (
ch
 - '0');

1713 
sw_fú°_mö‹_digô
:

1714 i‡(
ch
 < '0' || ch > '9') {

1715  
NGX_ERROR
;

1718 
r
->
hâp_mö‹
 = 
ch
 - '0';

1719 
°©e
 = 
sw_mö‹_digô
;

1723 
sw_mö‹_digô
:

1724 i‡(
ch
 == ' ') {

1725 
°©e
 = 
sw_°©us
;

1729 i‡(
ch
 < '0' || ch > '9') {

1730  
NGX_ERROR
;

1733 i‡(
r
->
hâp_mö‹
 > 99) {

1734  
NGX_ERROR
;

1737 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + (
ch
 - '0');

1741 
sw_°©us
:

1742 i‡(
ch
 == ' ') {

1746 i‡(
ch
 < '0' || ch > '9') {

1747  
NGX_ERROR
;

1750 
°©us
->
code
 = sètus->codê* 10 + (
ch
 - '0');

1752 i‡(++
°©us
->
cou¡
 == 3) {

1753 
°©e
 = 
sw_•a˚_a·î_°©us
;

1754 
°©us
->
°¨t
 = 
p
 - 2;

1760 
sw_•a˚_a·î_°©us
:

1761 
ch
) {

1763 
°©e
 = 
sw_°©us_ãxt
;

1766 
°©e
 = 
sw_°©us_ãxt
;

1768 
CR
:

1769 
°©e
 = 
sw_Æmo°_d⁄e
;

1771 
LF
:

1772 
d⁄e
;

1774  
NGX_ERROR
;

1779 
sw_°©us_ãxt
:

1780 
ch
) {

1781 
CR
:

1782 
°©e
 = 
sw_Æmo°_d⁄e
;

1785 
LF
:

1786 
d⁄e
;

1791 
sw_Æmo°_d⁄e
:

1792 
°©us
->
íd
 = 
p
 - 1;

1793 
ch
) {

1794 
LF
:

1795 
d⁄e
;

1797  
NGX_ERROR
;

1802 
b
->
pos
 = 
p
;

1803 
r
->
°©e
 = state;

1805  
NGX_AGAIN
;

1807 
d⁄e
:

1809 
b
->
pos
 = 
p
 + 1;

1811 i‡(
°©us
->
íd
 =
NULL
) {

1812 
°©us
->
íd
 = 
p
;

1815 
°©us
->
hâp_vîsi⁄
 = 
r
->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

1816 
r
->
°©e
 = 
sw_°¨t
;

1818  
NGX_OK
;

1819 
	}
}

1822 
ngx_öt_t


1823 
	$ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

1824 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
)

1826 
u_ch¨
 
ch
, *
p
, *
§c
, *
d°
;

1827 
size_t
 
Àn
;

1828 
ngx_uöt_t
 
quŸed
;

1830 
Àn
 = 
uri
->len;

1831 
p
 = 
uri
->
d©a
;

1832 
quŸed
 = 0;

1834 i‡(
Àn
 =0 || 
p
[0] == '?') {

1835 
unß„
;

1838 i‡(
p
[0] ='.' && 
Àn
 > 1 &&Ö[1] == '.'

1839 && (
Àn
 =2 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1841 
unß„
;

1844  ; 
Àn
;Üen--) {

1846 
ch
 = *
p
++;

1848 i‡(
ch
 == '%') {

1849 
quŸed
 = 1;

1853 i‡(
usuÆ
[
ch
 >> 5] & (1U << (ch & 0x1f))) {

1857 i‡(
ch
 == '?') {

1858 
¨gs
->
Àn
 =Üen - 1;

1859 
¨gs
->
d©a
 = 
p
;

1860 
uri
->
Àn
 -=Üen;

1865 i‡(
ch
 == '\0') {

1866 
unß„
;

1869 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1873 i‡(
p
[0] == '.' &&Ö[1] == '.'

1874 && (
Àn
 =3 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1876 
unß„
;

1881 i‡(
quŸed
) {

1882 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1883 "esˇ≥d URI: \"%V\"", 
uri
);

1885 
§c
 = 
uri
->
d©a
;

1887 
d°
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uri
->
Àn
);

1888 i‡(
d°
 =
NULL
) {

1889  
NGX_ERROR
;

1892 
uri
->
d©a
 = 
d°
;

1894 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
uri
->
Àn
, 0);

1896 
uri
->
Àn
 = 
d°
 - uri->
d©a
;

1898 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1899 "u√sˇ≥d URI: \"%V\"", 
uri
);

1901 
Àn
 = 
uri
->len;

1902 
p
 = 
uri
->
d©a
;

1904 i‡(
p
[0] ='.' && 
Àn
 > 1 &&Ö[1] == '.'

1905 && (
Àn
 =2 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1907 
unß„
;

1910  ; 
Àn
;Üen--) {

1912 
ch
 = *
p
++;

1914 i‡(
ch
 == '\0') {

1915 
unß„
;

1918 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1922 i‡(
p
[0] == '.' &&Ö[1] == '.'

1923 && (
Àn
 =3 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1925 
unß„
;

1931  
NGX_OK
;

1933 
unß„
:

1935 i‡(*
Êags
 & 
NGX_HTTP_LOG_UNSAFE
) {

1936 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1937 "unß„ URI \"%V\" wa†dëe˘ed", 
uri
);

1940  
NGX_ERROR
;

1941 
	}
}

1944 
ngx_öt_t


1945 
	$ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1946 
ngx_°r_t
 *
vÆue
)

1948 
ngx_uöt_t
 
i
;

1949 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
, 
ch
;

1950 
ngx_èbÀ_ñt_t
 **
h
;

1952 
h
 = 
hódîs
->
ñts
;

1954 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1956 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

1957 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

1959 i‡(
«me
->
Àn
 > 
h
[
i
]->
vÆue
.len) {

1963 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

1964 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

1966 
°¨t
 < 
íd
) {

1968 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

1969 
skù
;

1972 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

1976 i‡(
vÆue
 =
NULL
) {

1977 i‡(
°¨t
 =
íd
 || *start == ',') {

1978  
i
;

1981 
skù
;

1984 i‡(
°¨t
 =
íd
 || *start++ != '=') {

1986 
skù
;

1989 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1991 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

1995 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

1996 
vÆue
->
d©a
 = 
°¨t
;

1998  
i
;

2000 
skù
:

2002 
°¨t
 < 
íd
) {

2003 
ch
 = *
°¨t
++;

2004 i‡(
ch
 == ';' || ch == ',') {

2009 
°¨t
 < 
íd
 && *start == ' ') { start++; }

2013  
NGX_DECLINED
;

2014 
	}
}

2017 
ngx_öt_t


2018 
	$ngx_hâp_∑r£_£t_cookõ_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

2019 
ngx_°r_t
 *
vÆue
)

2021 
ngx_uöt_t
 
i
;

2022 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
;

2023 
ngx_èbÀ_ñt_t
 **
h
;

2025 
h
 = 
hódîs
->
ñts
;

2027 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

2029 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

2030 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

2032 i‡(
«me
->
Àn
 >
h
[
i
]->
vÆue
.len) {

2036 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

2037 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

2039 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

2043 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

2047 i‡(
°¨t
 =
íd
 || *start++ != '=') {

2052 
°¨t
 < 
íd
 && *start == ' ') { start++; }

2054 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

2058 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

2059 
vÆue
->
d©a
 = 
°¨t
;

2061  
i
;

2064  
NGX_DECLINED
;

2065 
	}
}

2068 
ngx_öt_t


2069 
	$ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
, 
ngx_°r_t
 *
vÆue
)

2071 
u_ch¨
 *
p
, *
œ°
;

2073 i‡(
r
->
¨gs
.
Àn
 == 0) {

2074  
NGX_DECLINED
;

2077 
p
 = 
r
->
¨gs
.
d©a
;

2078 
œ°
 = 
p
 + 
r
->
¨gs
.
Àn
;

2080  ; 
p
 < 
œ°
;Ö++) {

2084 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

2086 i‡(
p
 =
NULL
) {

2087  
NGX_DECLINED
;

2090 i‡((
p
 =
r
->
¨gs
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

2092 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

2094 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

2096 i‡(
p
 =
NULL
) {

2097 
p
 = 
r
->
¨gs
.
d©a
 +Ñ->¨gs.
Àn
;

2100 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

2102  
NGX_OK
;

2106  
NGX_DECLINED
;

2107 
	}
}

2111 
	$ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2113 
u_ch¨
 *
p
, *
œ°
;

2115 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

2117 
p
 = 
	`ngx_°æchr
(
uri
->
d©a
, 
œ°
, '?');

2119 i‡(
p
) {

2120 
uri
->
Àn
 = 
p
 - uri->
d©a
;

2121 
p
++;

2122 
¨gs
->
Àn
 = 
œ°
 - 
p
;

2123 
¨gs
->
d©a
 = 
p
;

2126 
¨gs
->
Àn
 = 0;

2128 
	}
}

2131 
ngx_öt_t


2132 
	$ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

2133 
ngx_hâp_chunked_t
 *
˘x
)

2135 
u_ch¨
 *
pos
, 
ch
, 
c
;

2136 
ngx_öt_t
 
rc
;

2138 
sw_chunk_°¨t
 = 0,

2139 
sw_chunk_size
,

2140 
sw_chunk_exãnsi⁄
,

2141 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
,

2142 
sw_chunk_d©a
,

2143 
sw_a·î_d©a
,

2144 
sw_a·î_d©a_Æmo°_d⁄e
,

2145 
sw_œ°_chunk_exãnsi⁄
,

2146 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
,

2147 
sw_åaûî
,

2148 
sw_åaûî_Æmo°_d⁄e
,

2149 
sw_åaûî_hódî
,

2150 
sw_åaûî_hódî_Æmo°_d⁄e


2151 } 
°©e
;

2153 
°©e
 = 
˘x
->state;

2155 i‡(
°©e
 =
sw_chunk_d©a
 && 
˘x
->
size
 == 0) {

2156 
°©e
 = 
sw_a·î_d©a
;

2159 
rc
 = 
NGX_AGAIN
;

2161 
pos
 = 
b
->pos;Öo†< b->
œ°
;Öos++) {

2163 
ch
 = *
pos
;

2165 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2166 "hâ∞chunked byã: %02Xd s:%d", 
ch
, 
°©e
);

2168 
°©e
) {

2170 
sw_chunk_°¨t
:

2171 i‡(
ch
 >= '0' && ch <= '9') {

2172 
°©e
 = 
sw_chunk_size
;

2173 
˘x
->
size
 = 
ch
 - '0';

2177 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2179 i‡(
c
 >= 'a' && c <= 'f') {

2180 
°©e
 = 
sw_chunk_size
;

2181 
˘x
->
size
 = 
c
 - 'a' + 10;

2185 
övÆid
;

2187 
sw_chunk_size
:

2188 i‡(
˘x
->
size
 > 
NGX_MAX_OFF_T_VALUE
 / 16) {

2189 
övÆid
;

2192 i‡(
ch
 >= '0' && ch <= '9') {

2193 
˘x
->
size
 = ctx->sizê* 16 + (
ch
 - '0');

2197 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2199 i‡(
c
 >= 'a' && c <= 'f') {

2200 
˘x
->
size
 = ctx->sizê* 16 + (
c
 - 'a' + 10);

2204 i‡(
˘x
->
size
 == 0) {

2206 
ch
) {

2207 
CR
:

2208 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2210 
LF
:

2211 
°©e
 = 
sw_åaûî
;

2216 
°©e
 = 
sw_œ°_chunk_exãnsi⁄
;

2219 
övÆid
;

2225 
ch
) {

2226 
CR
:

2227 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2229 
LF
:

2230 
°©e
 = 
sw_chunk_d©a
;

2235 
°©e
 = 
sw_chunk_exãnsi⁄
;

2238 
övÆid
;

2243 
sw_chunk_exãnsi⁄
:

2244 
ch
) {

2245 
CR
:

2246 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2248 
LF
:

2249 
°©e
 = 
sw_chunk_d©a
;

2253 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2254 i‡(
ch
 =
LF
) {

2255 
°©e
 = 
sw_chunk_d©a
;

2258 
övÆid
;

2260 
sw_chunk_d©a
:

2261 
rc
 = 
NGX_OK
;

2262 
d©a
;

2264 
sw_a·î_d©a
:

2265 
ch
) {

2266 
CR
:

2267 
°©e
 = 
sw_a·î_d©a_Æmo°_d⁄e
;

2269 
LF
:

2270 
°©e
 = 
sw_chunk_°¨t
;

2274 
sw_a·î_d©a_Æmo°_d⁄e
:

2275 i‡(
ch
 =
LF
) {

2276 
°©e
 = 
sw_chunk_°¨t
;

2279 
övÆid
;

2281 
sw_œ°_chunk_exãnsi⁄
:

2282 
ch
) {

2283 
CR
:

2284 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2286 
LF
:

2287 
°©e
 = 
sw_åaûî
;

2291 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2292 i‡(
ch
 =
LF
) {

2293 
°©e
 = 
sw_åaûî
;

2296 
övÆid
;

2298 
sw_åaûî
:

2299 
ch
) {

2300 
CR
:

2301 
°©e
 = 
sw_åaûî_Æmo°_d⁄e
;

2303 
LF
:

2304 
d⁄e
;

2306 
°©e
 = 
sw_åaûî_hódî
;

2310 
sw_åaûî_Æmo°_d⁄e
:

2311 i‡(
ch
 =
LF
) {

2312 
d⁄e
;

2314 
övÆid
;

2316 
sw_åaûî_hódî
:

2317 
ch
) {

2318 
CR
:

2319 
°©e
 = 
sw_åaûî_hódî_Æmo°_d⁄e
;

2321 
LF
:

2322 
°©e
 = 
sw_åaûî
;

2326 
sw_åaûî_hódî_Æmo°_d⁄e
:

2327 i‡(
ch
 =
LF
) {

2328 
°©e
 = 
sw_åaûî
;

2331 
övÆid
;

2336 
d©a
:

2338 
˘x
->
°©e
 = state;

2339 
b
->
pos
 =Öos;

2341 i‡(
˘x
->
size
 > 
NGX_MAX_OFF_T_VALUE
 - 5) {

2342 
övÆid
;

2345 
°©e
) {

2347 
sw_chunk_°¨t
:

2348 
˘x
->
Àngth
 = 3 ;

2350 
sw_chunk_size
:

2351 
˘x
->
Àngth
 = 1

2352 + (
˘x
->
size
 ? ctx->size + 4

2355 
sw_chunk_exãnsi⁄
:

2356 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2357 
˘x
->
Àngth
 = 1 + ctx->
size
 + 4 ;

2359 
sw_chunk_d©a
:

2360 
˘x
->
Àngth
 = ctx->
size
 + 4 ;

2362 
sw_a·î_d©a
:

2363 
sw_a·î_d©a_Æmo°_d⁄e
:

2364 
˘x
->
Àngth
 = 4 ;

2366 
sw_œ°_chunk_exãnsi⁄
:

2367 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2368 
˘x
->
Àngth
 = 2 ;

2370 
sw_åaûî
:

2371 
sw_åaûî_Æmo°_d⁄e
:

2372 
˘x
->
Àngth
 = 1 ;

2374 
sw_åaûî_hódî
:

2375 
sw_åaûî_hódî_Æmo°_d⁄e
:

2376 
˘x
->
Àngth
 = 2 ;

2381  
rc
;

2383 
d⁄e
:

2385 
˘x
->
°©e
 = 0;

2386 
b
->
pos
 =Öos + 1;

2388  
NGX_DONE
;

2390 
övÆid
:

2392  
NGX_ERROR
;

2393 
	}
}

	@src/http/ngx_http_postpone_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_chaö_t
 *
ö
);

15 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_chaö_t
 *
ö
);

17 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

20 
ngx_hâp_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
 = {

21 
NULL
,

22 
ngx_hâp_po°p⁄e_fûãr_öô
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL
,

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
,

38 
NULL
,

39 
NGX_HTTP_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

54 
ngx_öt_t


55 
	$ngx_hâp_po°p⁄e_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

57 
ngx_c⁄√˘i⁄_t
 *
c
;

58 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
;

60 
c
 = 
r
->
c⁄√˘i⁄
;

62 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

63 "hâ∞po°p⁄êfûã∏\"%V?%V\" %p", &
r
->
uri
, &r->
¨gs
, 
ö
);

65 i‡(
r
->
subªque°_ö_mem‹y
) {

66  
	`ngx_hâp_po°p⁄e_fûãr_ö_mem‹y
(
r
, 
ö
);

69 i‡(
r
 !
c
->
d©a
) {

71 i‡(
ö
) {

72 i‡(
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
Ë!
NGX_OK
) {

73  
NGX_ERROR
;

76  
NGX_OK
;

81 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

85  
NGX_OK
;

88 i‡(
r
->
po°p⁄ed
 =
NULL
) {

90 i‡(
ö
 || 
c
->
buf„ªd
) {

91  
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
ö
);

94  
NGX_OK
;

97 i‡(
ö
) {

98 i‡(
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
Ë!
NGX_OK
) {

99  
NGX_ERROR
;

104 
¥
 = 
r
->
po°p⁄ed
;

106 i‡(
¥
->
ªque°
) {

108 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

110 &
¥
->
ªque°
->
uri
, &¥->ªque°->
¨gs
);

112 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

114 
c
->
d©a
 = 
¥
->
ªque°
;

116  
	`ngx_hâp_po°_ªque°
(
¥
->
ªque°
, 
NULL
);

119 i‡(
¥
->
out
 =
NULL
) {

120 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

126 &
r
->
uri
, &r->
¨gs
);

128 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
¥
->
out
Ë=
NGX_ERROR
) {

129  
NGX_ERROR
;

133 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

135 } 
r
->
po°p⁄ed
);

137  
NGX_OK
;

138 
	}
}

141 
ngx_öt_t


142 
	$ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

144 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, **
µr
;

146 i‡(
r
->
po°p⁄ed
) {

147 
¥
 = 
r
->
po°p⁄ed
;Ör->
√xt
;Ör =Ör->next) { }

149 i‡(
¥
->
ªque°
 =
NULL
) {

150 
found
;

153 
µr
 = &
¥
->
√xt
;

156 
µr
 = &
r
->
po°p⁄ed
;

159 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

160 i‡(
¥
 =
NULL
) {

161  
NGX_ERROR
;

164 *
µr
 = 
¥
;

166 
¥
->
ªque°
 = 
NULL
;

167 
¥
->
out
 = 
NULL
;

168 
¥
->
√xt
 = 
NULL
;

170 
found
:

172 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
¥
->
out
, 
ö
Ë=
NGX_OK
) {

173  
NGX_OK
;

176  
NGX_ERROR
;

177 
	}
}

180 
ngx_öt_t


181 
	$ngx_hâp_po°p⁄e_fûãr_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

183 
size_t
 
Àn
;

184 
ngx_buf_t
 *
b
;

185 
ngx_c⁄√˘i⁄_t
 *
c
;

186 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

188 
c
 = 
r
->
c⁄√˘i⁄
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

193 i‡(
r
->
out
 =
NULL
) {

194 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

196 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1) {

197 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

199 i‡(
Àn
 > 
˛cf
->
subªque°_ouçut_buf„r_size
) {

200 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

201 "toÿbig subªque°Ñe•⁄£: %uz", 
Àn
);

202  
NGX_ERROR
;

206 
Àn
 = 
˛cf
->
subªque°_ouçut_buf„r_size
;

209 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

210 i‡(
b
 =
NULL
) {

211  
NGX_ERROR
;

214 
b
->
œ°_buf
 = 1;

216 
r
->
out
 = 
	`ngx_Æloc_chaö_lök
‘->
poﬁ
);

217 i‡(
r
->
out
 =
NULL
) {

218  
NGX_ERROR
;

221 
r
->
out
->
buf
 = 
b
;

222 
r
->
out
->
√xt
 = 
NULL
;

225 
b
 = 
r
->
out
->
buf
;

227  ; 
ö
; i¿ö->
√xt
) {

229 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

233 
Àn
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

235 i‡(
Àn
 > (
size_t
Ë(
b
->
íd
 - b->
œ°
)) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

238  
NGX_ERROR
;

241 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

242 "hâ∞po°p⁄êfûã∏ö mem‹y %uz byãs", 
Àn
);

244 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ö
->
buf
->
pos
, 
Àn
);

245 
ö
->
buf
->
pos
 = in->buf->
œ°
;

248  
NGX_OK
;

249 
	}
}

252 
ngx_öt_t


253 
	$ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

255 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

256 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_po°p⁄e_fûãr
;

258  
NGX_OK
;

259 
	}
}

	@src/http/ngx_http_request.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

14 
ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
);

15 
ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
);

16 
ssize_t
 
ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_uöt_t
 
ªque°_löe
);

20 
ngx_öt_t
 
ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

22 
ngx_öt_t
 
ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

24 
ngx_öt_t
 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

26 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

28 
ngx_öt_t
 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

30 
ngx_öt_t
 
ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

33 
ngx_öt_t
 
ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
,

34 
ngx_uöt_t
 
Æloc
);

35 
ngx_öt_t
 
ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_°r_t
 *
ho°
);

37 
ngx_öt_t
 
ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

38 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

39 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
);

41 
ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

42 
ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 
ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ev
);

51 
ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

53 
ngx_öt_t
 
ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

54 
ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

55 
ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

57 
u_ch¨
 *
ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

58 
u_ch¨
 *
ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_ªque°_t
 *
§
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

61 #i‡(
NGX_HTTP_SSL
)

62 
ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
);

63 
ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 *
	gngx_hâp_˛õ¡_îr‹s
[] = {

83 
ngx_hâp_hódî_t
 
	gngx_hâp_hódîs_ö
[] = {

84 { 
ngx_°rög
("Ho°"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
),

85 
ngx_hâp_¥o˚ss_ho°
 },

87 { 
ngx_°rög
("C⁄√˘i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄√˘i⁄
),

88 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
 },

90 { 
ngx_°rög
("If-Modified-Since"),

91 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_modifõd_sö˚
),

92 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

94 { 
ngx_°rög
("If-Unmodified-Since"),

95 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_unmodifõd_sö˚
),

96 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

98 { 
ngx_°rög
("If-Match"),

99 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_m©ch
),

100 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

102 { 
ngx_°rög
("If-None-Match"),

103 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_n⁄e_m©ch
),

104 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

106 { 
ngx_°rög
("U£r-Agít"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
),

107 
ngx_hâp_¥o˚ss_u£r_agít
 },

109 { 
ngx_°rög
("Re„ªr"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ª„ªr
),

110 
ngx_hâp_¥o˚ss_hódî_löe
 },

112 { 
ngx_°rög
("Content-Length"),

113 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

114 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

116 { 
ngx_°rög
("Content-Range"),

117 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ønge
),

118 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

120 { 
ngx_°rög
("Content-Type"),

121 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

122 
ngx_hâp_¥o˚ss_hódî_löe
 },

124 { 
ngx_°rög
("R™ge"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ønge
),

125 
ngx_hâp_¥o˚ss_hódî_löe
 },

127 { 
ngx_°rög
("If-Range"),

128 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_ønge
),

129 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

131 { 
ngx_°rög
("Transfer-Encoding"),

132 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
å™s„r_ícodög
),

133 
ngx_hâp_¥o˚ss_hódî_löe
 },

135 { 
ngx_°rög
("TE"),

136 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ã
),

137 
ngx_hâp_¥o˚ss_hódî_löe
 },

139 { 
ngx_°rög
("Expect"),

140 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ex≥˘
),

141 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

143 { 
ngx_°rög
("Upgrade"),

144 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
upgøde
),

145 
ngx_hâp_¥o˚ss_hódî_löe
 },

147 #i‡(
NGX_HTTP_GZIP
 || 
NGX_HTTP_HEADERS
)

148 { 
ngx_°rög
("Accept-Encoding"),

149 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
),

150 
ngx_hâp_¥o˚ss_hódî_löe
 },

152 { 
ngx_°rög
("Vü"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
vü
),

153 
ngx_hâp_¥o˚ss_hódî_löe
 },

156 { 
ngx_°rög
("Authorization"),

157 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
auth‹iz©i⁄
),

158 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

160 { 
ngx_°rög
("Kìp-Alive"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
kìp_Æive
),

161 
ngx_hâp_¥o˚ss_hódî_löe
 },

163 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

164 { 
ngx_°rög
("X-Forwarded-For"),

165 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_f‹w¨ded_f‹
),

166 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

169 #i‡(
NGX_HTTP_REALIP
)

170 { 
ngx_°rög
("X-Real-IP"),

171 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_ªÆ_ù
),

172 
ngx_hâp_¥o˚ss_hódî_löe
 },

175 #i‡(
NGX_HTTP_HEADERS
)

176 { 
ngx_°rög
("Ac˚±"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±
),

177 
ngx_hâp_¥o˚ss_hódî_löe
 },

179 { 
ngx_°rög
("Accept-Language"),

180 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
),

181 
ngx_hâp_¥o˚ss_hódî_löe
 },

184 #i‡(
NGX_HTTP_DAV
)

185 { 
ngx_°rög
("Dïth"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
dïth
),

186 
ngx_hâp_¥o˚ss_hódî_löe
 },

188 { 
ngx_°rög
("De°ö©i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
de°ö©i⁄
),

189 
ngx_hâp_¥o˚ss_hódî_löe
 },

191 { 
ngx_°rög
("Ovîwrôe"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ovîwrôe
),

192 
ngx_hâp_¥o˚ss_hódî_löe
 },

194 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
d©e
),

195 
ngx_hâp_¥o˚ss_hódî_löe
 },

198 { 
ngx_°rög
("Cookõ"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
cookõs
),

199 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

201 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

206 
	$ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

208 
ngx_uöt_t
 
i
;

209 
ngx_evít_t
 *
ªv
;

210 
sockaddr_ö
 *
sö
;

211 
ngx_hâp_p‹t_t
 *
p‹t
;

212 
ngx_hâp_ö_addr_t
 *
addr
;

213 
ngx_hâp_log_˘x_t
 *
˘x
;

214 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

215 #i‡(
NGX_HAVE_INET6
)

216 
sockaddr_ö6
 *
sö6
;

217 
ngx_hâp_ö6_addr_t
 *
addr6
;

220 
hc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_c⁄√˘i⁄_t
));

221 i‡(
hc
 =
NULL
) {

222 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

226 
c
->
d©a
 = 
hc
;

230 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

232 i‡(
p‹t
->
«ddrs
 > 1) {

240 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

241 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

245 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

247 #i‡(
NGX_HAVE_INET6
)

248 
AF_INET6
:

249 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

251 
addr6
 = 
p‹t
->
addrs
;

255 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

256 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

261 
hc
->
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

267 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

269 
addr
 = 
p‹t
->
addrs
;

273 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

274 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

279 
hc
->
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

286 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

288 #i‡(
NGX_HAVE_INET6
)

289 
AF_INET6
:

290 
addr6
 = 
p‹t
->
addrs
;

291 
hc
->
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

296 
addr
 = 
p‹t
->
addrs
;

297 
hc
->
addr_c⁄f
 = &
addr
[0].
c⁄f
;

303 
hc
->
c⁄f_˘x
 = hc->
addr_c⁄f
->
deÁu…_£rvî
->
˘x
;

305 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

306 i‡(
˘x
 =
NULL
) {

307 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

311 
˘x
->
c⁄√˘i⁄
 = 
c
;

312 
˘x
->
ªque°
 = 
NULL
;

313 
˘x
->
cuºít_ªque°
 = 
NULL
;

315 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

316 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

317 
c
->
log
->
d©a
 = 
˘x
;

318 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

320 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

322 
ªv
 = 
c
->
ªad
;

323 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

324 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

326 #i‡(
NGX_HTTP_V2
)

327 i‡(
hc
->
addr_c⁄f
->
hâp2
) {

328 
ªv
->
h™dÀr
 = 
ngx_hâp_v2_öô
;

332 #i‡(
NGX_HTTP_SSL
)

334 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

336 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

338 i‡(
sscf
->
íabÀ
 || 
hc
->
addr_c⁄f
->
s¶
) {

339 
hc
->
s¶
 = 1;

340 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

341 
ªv
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake
;

346 i‡(
hc
->
addr_c⁄f
->
¥oxy_¥Ÿocﬁ
) {

347 
hc
->
¥oxy_¥Ÿocﬁ
 = 1;

348 
c
->
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

351 i‡(
ªv
->
ªady
) {

354 i‡(
ngx_u£_ac˚±_muãx
) {

355 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

359 
ªv
->
	`h™dÀr
(rev);

363 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

364 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

366 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

367 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

370 
	}
}

374 
	$ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ªv
)

376 
u_ch¨
 *
p
;

377 
size_t
 
size
;

378 
ssize_t
 
n
;

379 
ngx_buf_t
 *
b
;

380 
ngx_c⁄√˘i⁄_t
 *
c
;

381 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

382 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

384 
c
 = 
ªv
->
d©a
;

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http waitÑequest handler");

388 i‡(
ªv
->
timedout
) {

389 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

390 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

394 i‡(
c
->
˛o£
) {

395 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

399 
hc
 = 
c
->
d©a
;

400 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

402 
size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

404 
b
 = 
c
->
buf„r
;

406 i‡(
b
 =
NULL
) {

407 
b
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
size
);

408 i‡(
b
 =
NULL
) {

409 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

413 
c
->
buf„r
 = 
b
;

415 } i‡(
b
->
°¨t
 =
NULL
) {

417 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

418 i‡(
b
->
°¨t
 =
NULL
) {

419 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

423 
b
->
pos
 = b->
°¨t
;

424 
b
->
œ°
 = b->
°¨t
;

425 
b
->
íd
 = b->
œ°
 + 
size
;

428 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

430 i‡(
n
 =
NGX_AGAIN
) {

432 i‡(!
ªv
->
timî_£t
) {

433 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

434 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

437 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

438 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

446 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

447 
b
->
°¨t
 = 
NULL
;

453 i‡(
n
 =
NGX_ERROR
) {

454 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

458 i‡(
n
 == 0) {

459 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

461 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

465 
b
->
œ°
 +
n
;

467 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

468 
hc
->
¥oxy_¥Ÿocﬁ
 = 0;

470 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_ªad
(
c
, 
b
->
pos
, b->
œ°
);

472 i‡(
p
 =
NULL
) {

473 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

477 
b
->
pos
 = 
p
;

479 i‡(
b
->
pos
 =b->
œ°
) {

480 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

481 
b
->
pos
 = b->
°¨t
;

482 
b
->
œ°
 = b->
°¨t
;

483 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

488 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

490 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

492 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

493 i‡(
c
->
d©a
 =
NULL
) {

494 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

498 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

499 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

500 
	}
}

503 
ngx_hâp_ªque°_t
 *

504 
	$ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
)

506 
ngx_poﬁ_t
 *
poﬁ
;

507 
ngx_time_t
 *
ç
;

508 
ngx_hâp_ªque°_t
 *
r
;

509 
ngx_hâp_log_˘x_t
 *
˘x
;

510 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

511 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

512 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

513 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

515 
c
->
ªque°s
++;

517 
hc
 = 
c
->
d©a
;

519 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

521 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
cscf
->
ªque°_poﬁ_size
, 
c
->
log
);

522 i‡(
poﬁ
 =
NULL
) {

523  
NULL
;

526 
r
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_hâp_ªque°_t
));

527 i‡(
r
 =
NULL
) {

528 
	`ngx_de°roy_poﬁ
(
poﬁ
);

529  
NULL
;

532 
r
->
poﬁ
 =Öool;

534 
r
->
hâp_c⁄√˘i⁄
 = 
hc
;

535 
r
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

536 
r
->
c⁄√˘i⁄
 = 
c
;

538 
r
->
maö_c⁄f
 = 
hc
->
c⁄f_˘x
->main_conf;

539 
r
->
§v_c⁄f
 = 
hc
->
c⁄f_˘x
->srv_conf;

540 
r
->
loc_c⁄f
 = 
hc
->
c⁄f_˘x
->loc_conf;

542 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

544 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

546 
	`ngx_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

548 
r
->
hódî_ö
 = 
hc
->
busy
 ? hc->busy->
buf
 : 
c
->
buf„r
;

550 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
hódîs
,Ñ->
poﬁ
, 20,

551 (
ngx_èbÀ_ñt_t
))

552 !
NGX_OK
)

554 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

555  
NULL
;

558 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
åaûîs
,Ñ->
poﬁ
, 4,

559 (
ngx_èbÀ_ñt_t
))

560 !
NGX_OK
)

562 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

563  
NULL
;

566 
r
->
˘x
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

567 i‡(
r
->
˘x
 =
NULL
) {

568 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

569  
NULL
;

572 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

574 
r
->
v¨übÀs
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, 
cmcf
->v¨übÀs.
√…s


575 * (
ngx_hâp_v¨übÀ_vÆue_t
));

576 i‡(
r
->
v¨übÀs
 =
NULL
) {

577 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

578  
NULL
;

581 #i‡(
NGX_HTTP_SSL
)

582 i‡(
c
->
s¶
) {

583 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

587 
r
->
maö
 =Ñ;

588 
r
->
cou¡
 = 1;

590 
ç
 = 
	`ngx_timeofday
();

591 
r
->
°¨t_£c
 = 
ç
->
£c
;

592 
r
->
°¨t_m£c
 = 
ç
->
m£c
;

594 
r
->
mëhod
 = 
NGX_HTTP_UNKNOWN
;

595 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_10
;

597 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

598 
r
->
hódîs_ö
.
kìp_Æive_n
 = -1;

599 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

600 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

602 
r
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

603 
r
->
subªque°s
 = 
NGX_HTTP_MAX_SUBREQUESTS
 + 1;

605 
r
->
hâp_°©e
 = 
NGX_HTTP_READING_REQUEST_STATE
;

607 
˘x
 = 
c
->
log
->
d©a
;

608 
˘x
->
ªque°
 = 
r
;

609 
˘x
->
cuºít_ªque°
 = 
r
;

610 
r
->
log_h™dÀr
 = 
ngx_hâp_log_îr‹_h™dÀr
;

612 #i‡(
NGX_STAT_STUB
)

613 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

614 
r
->
°©_ªadög
 = 1;

615 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªque°s
, 1);

618  
r
;

619 
	}
}

622 #i‡(
NGX_HTTP_SSL
)

625 
	$ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
)

627 
u_ch¨
 *
p
, 
buf
[
NGX_PROXY_PROTOCOL_MAX_HEADER
 + 1];

628 
size_t
 
size
;

629 
ssize_t
 
n
;

630 
ngx_îr_t
 
îr
;

631 
ngx_öt_t
 
rc
;

632 
ngx_c⁄√˘i⁄_t
 *
c
;

633 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

634 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

635 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

637 
c
 = 
ªv
->
d©a
;

638 
hc
 = 
c
->
d©a
;

640 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

643 i‡(
ªv
->
timedout
) {

644 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

645 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

649 i‡(
c
->
˛o£
) {

650 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

654 
size
 = 
hc
->
¥oxy_¥Ÿocﬁ
 ? (
buf
) : 1;

656 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, 
size
, 
MSG_PEEK
);

658 
îr
 = 
ngx_sockë_î∫o
;

660 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "hâ∞ªcv(): %z", 
n
);

662 i‡(
n
 == -1) {

663 i‡(
îr
 =
NGX_EAGAIN
) {

664 
ªv
->
ªady
 = 0;

666 i‡(!
ªv
->
timî_£t
) {

667 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

668 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

671 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

672 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

678 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

679 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

684 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

685 
hc
->
¥oxy_¥Ÿocﬁ
 = 0;

687 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_ªad
(
c
, 
buf
, bu‡+ 
n
);

689 i‡(
p
 =
NULL
) {

690 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

694 
size
 = 
p
 - 
buf
;

696 i‡(
c
->
	`ªcv
(c, 
buf
, 
size
Ë!(
ssize_t
) size) {

697 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

701 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

703 i‡(
n
 =(
ssize_t
Ë
size
) {

704 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

708 
n
 = 1;

709 
buf
[0] = *
p
;

712 i‡(
n
 == 1) {

713 i‡(
buf
[0] & 0x80 || buf[0] == 0x16 ) {

714 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

715 "hâp†s¶ h™dshake: 0x%02Xd", 
buf
[0]);

717 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
hc
->
c⁄f_˘x
,

718 
ngx_hâp_c‹e_moduÀ
);

720 i‡(
˛cf
->
t˝_nodñay
 && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

721 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

725 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
,

726 
ngx_hâp_s¶_moduÀ
);

728 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(&
sscf
->
s¶
, 
c
, 
NGX_SSL_BUFFER
)

729 !
NGX_OK
)

731 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

735 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

737 i‡(
rc
 =
NGX_AGAIN
) {

739 i‡(!
ªv
->
timî_£t
) {

740 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

743 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

745 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake_h™dÀr
;

749 
	`ngx_hâp_s¶_h™dshake_h™dÀr
(
c
);

754 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "plain http");

756 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

758 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

759 
	`ngx_hâp_waô_ªque°_h™dÀr
(
ªv
);

764 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "client closed connection");

765 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

766 
	}
}

770 
	$ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

772 i‡(
c
->
s¶
->
h™dshaked
) {

782 
c
->
s¶
->
no_waô_shutdown
 = 1;

784 #i‡(
NGX_HTTP_V2
 \

785 && (
deföed
 
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 \

786 || 
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
))

788 
Àn
;

789 c⁄° *
d©a
;

790 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

792 
hc
 = 
c
->
d©a
;

794 i‡(
hc
->
addr_c⁄f
->
hâp2
) {

796 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


797 
	`SSL_gë0_Æ≤_£À˘ed
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

799 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


800 i‡(
Àn
 == 0) {

801 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

806 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

809 i‡(
Àn
 =2 && 
d©a
[0] == 'h' && data[1] == '2') {

810 
	`ngx_hâp_v2_öô
(
c
->
ªad
);

817 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

819 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

820  
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

822 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

824 
	`ngx_hâp_waô_ªque°_h™dÀr
(
c
->
ªad
);

829 i‡(
c
->
ªad
->
timedout
) {

830 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

833 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

834 
	}
}

836 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


839 
	$ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
)

841 
ngx_°r_t
 
ho°
;

842 c⁄° *
£rvî«me
;

843 
ngx_c⁄√˘i⁄_t
 *
c
;

844 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

845 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

846 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

847 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

849 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s¶_c⁄n
, 
TLSEXT_NAMETYPE_ho°_«me
);

851 i‡(
£rvî«me
 =
NULL
) {

852  
SSL_TLSEXT_ERR_NOACK
;

855 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

857 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

858  
SSL_TLSEXT_ERR_NOACK
;

861 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

862 "SSL sîvîÇame: \"%s\"", 
£rvî«me
);

864 
ho°
.
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

866 i‡(
ho°
.
Àn
 == 0) {

867  
SSL_TLSEXT_ERR_NOACK
;

870 
ho°
.
d©a
 = (
u_ch¨
 *Ë
£rvî«me
;

872 i‡(
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
c
->
poﬁ
, 1Ë!
NGX_OK
) {

873  
SSL_TLSEXT_ERR_NOACK
;

876 
hc
 = 
c
->
d©a
;

878 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
c
, 
hc
->
addr_c⁄f
->
vútuÆ_«mes
, &
ho°
,

879 
NULL
, &
cscf
)

880 !
NGX_OK
)

882  
SSL_TLSEXT_ERR_NOACK
;

885 
hc
->
s¶_£rvî«me
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_°r_t
));

886 i‡(
hc
->
s¶_£rvî«me
 =
NULL
) {

887  
SSL_TLSEXT_ERR_NOACK
;

890 *
hc
->
s¶_£rvî«me
 = 
ho°
;

892 
hc
->
c⁄f_˘x
 = 
cscf
->
˘x
;

894 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

896 
	`ngx_£t_c⁄√˘i⁄_log
(
c
, 
˛cf
->
îr‹_log
);

898 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

900 
c
->
s¶
->
buf„r_size
 = 
sscf
->buffer_size;

902 i‡(
sscf
->
s¶
.
˘x
) {

903 
	`SSL_£t_SSL_CTX
(
s¶_c⁄n
, 
sscf
->
s¶
.
˘x
);

910 
	`SSL_£t_vîify
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_mode
(
sscf
->
s¶
.
˘x
),

911 
	`SSL_CTX_gë_vîify_ˇŒback
(
sscf
->
s¶
.
˘x
));

913 
	`SSL_£t_vîify_dïth
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_dïth
(
sscf
->
s¶
.
˘x
));

915 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x009080dfL

917 
	`SSL_˛ór_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_gë_›ti⁄s
(ssl_conn) &

918 ~
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

921 
	`SSL_£t_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

924  
SSL_TLSEXT_ERR_OK
;

925 
	}
}

933 
	$ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
)

935 
ssize_t
 
n
;

936 
ngx_öt_t
 
rc
, 
rv
;

937 
ngx_°r_t
 
ho°
;

938 
ngx_c⁄√˘i⁄_t
 *
c
;

939 
ngx_hâp_ªque°_t
 *
r
;

941 
c
 = 
ªv
->
d©a
;

942 
r
 = 
c
->
d©a
;

944 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

947 i‡(
ªv
->
timedout
) {

948 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

949 
c
->
timedout
 = 1;

950 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

954 
rc
 = 
NGX_AGAIN
;

958 i‡(
rc
 =
NGX_AGAIN
) {

959 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

961 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

966 
rc
 = 
	`ngx_hâp_∑r£_ªque°_löe
(
r
,Ñ->
hódî_ö
);

968 i‡(
rc
 =
NGX_OK
) {

972 
r
->
ªque°_löe
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->
ªque°_°¨t
;

973 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

974 
r
->
ªque°_Àngth
 =Ñ->
hódî_ö
->
pos
 -Ñ->
ªque°_°¨t
;

976 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

977 "hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

979 
r
->
mëhod_«me
.
Àn
 =Ñ->
mëhod_íd
 -Ñ->
ªque°_°¨t
 + 1;

980 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

982 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

983 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->hâp_¥Ÿocﬁ.
d©a
;

986 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

990 i‡(
r
->
schema_íd
) {

991 
r
->
schema
.
Àn
 =Ñ->
schema_íd
 -Ñ->
schema_°¨t
;

992 
r
->
schema
.
d©a
 =Ñ->
schema_°¨t
;

995 i‡(
r
->
ho°_íd
) {

997 
ho°
.
Àn
 = 
r
->
ho°_íd
 -Ñ->
ho°_°¨t
;

998 
ho°
.
d©a
 = 
r
->
ho°_°¨t
;

1000 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

1002 i‡(
rc
 =
NGX_DECLINED
) {

1003 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1005 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1009 i‡(
rc
 =
NGX_ERROR
) {

1010 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1014 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

1018 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

1021 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

1023 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

1024 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

1025 =
NGX_ERROR
)

1030 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1035 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

1036 (
ngx_èbÀ_ñt_t
))

1037 !
NGX_OK
)

1039 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1043 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1045 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_hódîs
;

1046 
	`ngx_hâp_¥o˚ss_ªque°_hódîs
(
ªv
);

1051 i‡(
rc
 !
NGX_AGAIN
) {

1055 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1056 
ngx_hâp_˛õ¡_îr‹s
[
rc
 - 
NGX_HTTP_CLIENT_ERROR
]);

1058 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_VERSION
) {

1059 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_VERSION_NOT_SUPPORTED
);

1062 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1070 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1072 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 1);

1074 i‡(
rv
 =
NGX_ERROR
) {

1075 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1079 i‡(
rv
 =
NGX_DECLINED
) {

1080 
r
->
ªque°_löe
.
Àn
 =Ñ->
hódî_ö
->
íd
 -Ñ->
ªque°_°¨t
;

1081 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

1083 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1085 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_URI_TOO_LARGE
);

1090 
	}
}

1093 
ngx_öt_t


1094 
	$ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
)

1096 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1098 i‡(
r
->
¨gs_°¨t
) {

1099 
r
->
uri
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_°¨t
;

1101 
r
->
uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1104 i‡(
r
->
com∂ex_uri
 ||Ñ->
quŸed_uri
) {

1106 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
 + 1);

1107 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1108 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1109  
NGX_ERROR
;

1112 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1114 i‡(
	`ngx_hâp_∑r£_com∂ex_uri
(
r
, 
cscf
->
mîge_¶ashes
Ë!
NGX_OK
) {

1115 
r
->
uri
.
Àn
 = 0;

1117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1119 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1120  
NGX_ERROR
;

1124 
r
->
uri
.
d©a
 =Ñ->
uri_°¨t
;

1127 
r
->
u≈¨£d_uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1128 
r
->
u≈¨£d_uri
.
d©a
 =Ñ->
uri_°¨t
;

1130 
r
->
vÆid_u≈¨£d_uri
 =Ñ->
•a˚_ö_uri
 ? 0 : 1;

1132 i‡(
r
->
uri_ext
) {

1133 i‡(
r
->
¨gs_°¨t
) {

1134 
r
->
exãn
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_ext
;

1136 
r
->
exãn
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_ext
;

1139 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1142 i‡(
r
->
¨gs_°¨t
 &&Ñ->
uri_íd
 >Ñ->args_start) {

1143 
r
->
¨gs
.
Àn
 =Ñ->
uri_íd
 -Ñ->
¨gs_°¨t
;

1144 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1147 #i‡(
NGX_WIN32
)

1149 
u_ch¨
 *
p
, *
œ°
;

1151 
p
 = 
r
->
uri
.
d©a
;

1152 
œ°
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
;

1154 
p
 < 
œ°
) {

1156 i‡(*
p
++ == ':') {

1163 i‡(
p
 < 
œ°
 && *p == '$') {

1164 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1166 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1167  
NGX_ERROR
;

1172 
p
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1;

1174 
p
 > 
r
->
uri
.
d©a
) {

1176 i‡(*
p
 == ' ') {

1177 
p
--;

1181 i‡(*
p
 == '.') {

1182 
p
--;

1189 i‡(
p
 !
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1) {

1190 
r
->
uri
.
Àn
 = 
p
 + 1 -Ñ->uri.
d©a
;

1191 
	`ngx_hâp_£t_exãn
(
r
);

1197 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1198 "hâ∞uri: \"%V\"", &
r
->
uri
);

1200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1201 "hâ∞¨gs: \"%V\"", &
r
->
¨gs
);

1203 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1204 "hâ∞exãn: \"%V\"", &
r
->
exãn
);

1206  
NGX_OK
;

1207 
	}
}

1211 
	$ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
)

1213 
u_ch¨
 *
p
;

1214 
size_t
 
Àn
;

1215 
ssize_t
 
n
;

1216 
ngx_öt_t
 
rc
, 
rv
;

1217 
ngx_èbÀ_ñt_t
 *
h
;

1218 
ngx_c⁄√˘i⁄_t
 *
c
;

1219 
ngx_hâp_hódî_t
 *
hh
;

1220 
ngx_hâp_ªque°_t
 *
r
;

1221 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1222 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1224 
c
 = 
ªv
->
d©a
;

1225 
r
 = 
c
->
d©a
;

1227 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

1230 i‡(
ªv
->
timedout
) {

1231 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

1232 
c
->
timedout
 = 1;

1233 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

1237 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1239 
rc
 = 
NGX_AGAIN
;

1243 i‡(
rc
 =
NGX_AGAIN
) {

1245 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1247 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 0);

1249 i‡(
rv
 =
NGX_ERROR
) {

1250 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1254 i‡(
rv
 =
NGX_DECLINED
) {

1255 
p
 = 
r
->
hódî_«me_°¨t
;

1257 
r
->
lögîög_˛o£
 = 1;

1259 i‡(
p
 =
NULL
) {

1260 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1262 
	`ngx_hâp_föÆize_ªque°
(
r
,

1263 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1267 
Àn
 = 
r
->
hódî_ö
->
íd
 - 
p
;

1269 i‡(
Àn
 > 
NGX_MAX_ERROR_STR
 - 300) {

1270 
Àn
 = 
NGX_MAX_ERROR_STR
 - 300;

1273 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1275 
Àn
, 
r
->
hódî_«me_°¨t
);

1277 
	`ngx_hâp_föÆize_ªque°
(
r
,

1278 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1283 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

1285 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

1291 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1293 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
,Ñ->
hódî_ö
,

1294 
cscf
->
undîsc‹es_ö_hódîs
);

1296 i‡(
rc
 =
NGX_OK
) {

1298 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1300 i‡(
r
->
övÆid_hódî
 && 
cscf
->
ign‹e_övÆid_hódîs
) {

1304 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1306 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1307 
r
->
hódî_«me_°¨t
);

1313 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1314 i‡(
h
 =
NULL
) {

1315 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1319 
h
->
hash
 = 
r
->
hódî_hash
;

1321 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1322 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1323 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1325 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1326 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1327 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1329 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1330 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1331 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1335 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1336 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1339 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1342 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1343 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1345 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1349 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1351 &
h
->
key
, &h->
vÆue
);

1356 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1360 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1363 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1365 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

1367 
rc
 = 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
);

1369 i‡(
rc
 !
NGX_OK
) {

1373 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1378 i‡(
rc
 =
NGX_AGAIN
) {

1387 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1390 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1393 
	}
}

1396 
ssize_t


1397 
	$ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1399 
ssize_t
 
n
;

1400 
ngx_evít_t
 *
ªv
;

1401 
ngx_c⁄√˘i⁄_t
 *
c
;

1402 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1404 
c
 = 
r
->
c⁄√˘i⁄
;

1405 
ªv
 = 
c
->
ªad
;

1407 
n
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

1409 i‡(
n
 > 0) {

1410  
n
;

1413 i‡(
ªv
->
ªady
) {

1414 
n
 = 
c
->
	`ªcv
(c, 
r
->
hódî_ö
->
œ°
,

1415 
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
);

1417 
n
 = 
NGX_AGAIN
;

1420 i‡(
n
 =
NGX_AGAIN
) {

1421 i‡(!
ªv
->
timî_£t
) {

1422 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1423 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

1426 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1427 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1428  
NGX_ERROR
;

1431  
NGX_AGAIN
;

1434 i‡(
n
 == 0) {

1435 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1439 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1440 
c
->
îr‹
 = 1;

1441 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1443 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1444  
NGX_ERROR
;

1447 
r
->
hódî_ö
->
œ°
 +
n
;

1449  
n
;

1450 
	}
}

1453 
ngx_öt_t


1454 
	$ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

1455 
ngx_uöt_t
 
ªque°_löe
)

1457 
u_ch¨
 *
ﬁd
, *
√w
;

1458 
ngx_buf_t
 *
b
;

1459 
ngx_chaö_t
 *
˛
;

1460 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1461 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1463 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1466 i‡(
ªque°_löe
 && 
r
->
°©e
 == 0) {

1470 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
°¨t
;

1471 
r
->
hódî_ö
->
œ°
 =Ñ->hódî_ö->
°¨t
;

1473  
NGX_OK
;

1476 
ﬁd
 = 
ªque°_löe
 ? 
r
->
ªque°_°¨t
 :Ñ->
hódî_«me_°¨t
;

1478 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1480 i‡(
r
->
°©e
 != 0

1481 && (
size_t
Ë(
r
->
hódî_ö
->
pos
 - 
ﬁd
)

1482 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
)

1484  
NGX_DECLINED
;

1487 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1489 i‡(
hc
->
‰ì
) {

1490 
˛
 = 
hc
->
‰ì
;

1491 
hc
->
‰ì
 = 
˛
->
√xt
;

1493 
b
 = 
˛
->
buf
;

1495 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1497 
b
->
pos
, b->
íd
 - b->
œ°
);

1499 } i‡(
hc
->
nbusy
 < 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
) {

1501 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1502 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

1503 i‡(
b
 =
NULL
) {

1504  
NGX_ERROR
;

1507 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
c⁄√˘i⁄
->
poﬁ
);

1508 i‡(
˛
 =
NULL
) {

1509  
NGX_ERROR
;

1512 
˛
->
buf
 = 
b
;

1514 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1516 
b
->
pos
, b->
íd
 - b->
œ°
);

1519  
NGX_DECLINED
;

1522 
˛
->
√xt
 = 
hc
->
busy
;

1523 
hc
->
busy
 = 
˛
;

1524 
hc
->
nbusy
++;

1526 i‡(
r
->
°©e
 == 0) {

1533 
r
->
hódî_ö
 = 
b
;

1535  
NGX_OK
;

1538 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1539 "hâ∞œrgêhódî c›y: %uz", 
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1541 
√w
 = 
b
->
°¨t
;

1543 
	`ngx_mem˝y
(
√w
, 
ﬁd
, 
r
->
hódî_ö
->
pos
 - old);

1545 
b
->
pos
 = 
√w
 + (
r
->
hódî_ö
->po†- 
ﬁd
);

1546 
b
->
œ°
 = 
√w
 + (
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1548 i‡(
ªque°_löe
) {

1549 
r
->
ªque°_°¨t
 = 
√w
;

1551 i‡(
r
->
ªque°_íd
) {

1552 
r
->
ªque°_íd
 = 
√w
 + (r->ªque°_íd - 
ﬁd
);

1555 
r
->
mëhod_íd
 = 
√w
 + (r->mëhod_íd - 
ﬁd
);

1557 
r
->
uri_°¨t
 = 
√w
 + (r->uri_°¨à- 
ﬁd
);

1558 
r
->
uri_íd
 = 
√w
 + (r->uri_íd - 
ﬁd
);

1560 i‡(
r
->
schema_°¨t
) {

1561 
r
->
schema_°¨t
 = 
√w
 + (r->schema_°¨à- 
ﬁd
);

1562 
r
->
schema_íd
 = 
√w
 + (r->schema_íd - 
ﬁd
);

1565 i‡(
r
->
ho°_°¨t
) {

1566 
r
->
ho°_°¨t
 = 
√w
 + (r->ho°_°¨à- 
ﬁd
);

1567 i‡(
r
->
ho°_íd
) {

1568 
r
->
ho°_íd
 = 
√w
 + (r->ho°_íd - 
ﬁd
);

1572 i‡(
r
->
p‹t_°¨t
) {

1573 
r
->
p‹t_°¨t
 = 
√w
 + (r->p‹t_°¨à- 
ﬁd
);

1574 
r
->
p‹t_íd
 = 
√w
 + (r->p‹t_íd - 
ﬁd
);

1577 i‡(
r
->
uri_ext
) {

1578 
r
->
uri_ext
 = 
√w
 + (r->uri_exà- 
ﬁd
);

1581 i‡(
r
->
¨gs_°¨t
) {

1582 
r
->
¨gs_°¨t
 = 
√w
 + (r->¨gs_°¨à- 
ﬁd
);

1585 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

1586 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
√w
 + (r->hâp_¥Ÿocﬁ.d©®- 
ﬁd
);

1590 
r
->
hódî_«me_°¨t
 = 
√w
;

1591 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

1592 
r
->
hódî_°¨t
 = 
√w
 + (r->hódî_°¨à- 
ﬁd
);

1593 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

1596 
r
->
hódî_ö
 = 
b
;

1598  
NGX_OK
;

1599 
	}
}

1602 
ngx_öt_t


1603 
	$ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1604 
ngx_uöt_t
 
off£t
)

1606 
ngx_èbÀ_ñt_t
 **
ph
;

1608 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1610 i‡(*
ph
 =
NULL
) {

1611 *
ph
 = 
h
;

1614  
NGX_OK
;

1615 
	}
}

1618 
ngx_öt_t


1619 
	$ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1620 
ngx_uöt_t
 
off£t
)

1622 
ngx_èbÀ_ñt_t
 **
ph
;

1624 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1626 i‡(*
ph
 =
NULL
) {

1627 *
ph
 = 
h
;

1628  
NGX_OK
;

1631 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1634 &
h
->
key
, &h->
vÆue
, &(*
ph
)->key, &(*ph)->value);

1636 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1638  
NGX_ERROR
;

1639 
	}
}

1642 
ngx_öt_t


1643 
	$ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1644 
ngx_uöt_t
 
off£t
)

1646 
ngx_öt_t
 
rc
;

1647 
ngx_°r_t
 
ho°
;

1649 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

1650 
r
->
hódîs_ö
.
ho°
 = 
h
;

1653 
ho°
 = 
h
->
vÆue
;

1655 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

1657 i‡(
rc
 =
NGX_DECLINED
) {

1658 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1660 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1661  
NGX_ERROR
;

1664 i‡(
rc
 =
NGX_ERROR
) {

1665 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1666  
NGX_ERROR
;

1669 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1670  
NGX_OK
;

1673 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

1674  
NGX_ERROR
;

1677 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

1679  
NGX_OK
;

1680 
	}
}

1683 
ngx_öt_t


1684 
	$ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1685 
ngx_uöt_t
 
off£t
)

1687 i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "close", 5 - 1)) {

1688 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1690 } i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "keep-alive", 10 - 1)) {

1691 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_KEEP_ALIVE
;

1694  
NGX_OK
;

1695 
	}
}

1698 
ngx_öt_t


1699 
	$ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1700 
ngx_uöt_t
 
off£t
)

1702 
u_ch¨
 *
u£r_agít
, *
msõ
;

1704 i‡(
r
->
hódîs_ö
.
u£r_agít
) {

1705  
NGX_OK
;

1708 
r
->
hódîs_ö
.
u£r_agít
 = 
h
;

1712 
u£r_agít
 = 
h
->
vÆue
.
d©a
;

1714 
msõ
 = 
	`ngx_°r°∫
(
u£r_agít
, "MSIE ", 5 - 1);

1716 i‡(
msõ
 && msõ + 7 < 
u£r_agít
 + 
h
->
vÆue
.
Àn
) {

1718 
r
->
hódîs_ö
.
msõ
 = 1;

1720 i‡(
msõ
[6] == '.') {

1722 
msõ
[5]) {

1725 
r
->
hódîs_ö
.
msõ6
 = 1;

1728 i‡(
	`ngx_°r°∫
(
msõ
 + 8, "SV1", 3 - 1Ë=
NULL
) {

1729 
r
->
hódîs_ö
.
msõ6
 = 1;

1737 i‡(
c
->
s¶
) {

1738 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1743 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Opera", 5 - 1)) {

1744 
r
->
hódîs_ö
.
›îa
 = 1;

1745 
r
->
hódîs_ö
.
msõ
 = 0;

1746 
r
->
hódîs_ö
.
msõ6
 = 0;

1749 i‡(!
r
->
hódîs_ö
.
msõ
 && !r->hódîs_ö.
›îa
) {

1751 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Gecko/", 6 - 1)) {

1752 
r
->
hódîs_ö
.
gecko
 = 1;

1754 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Chrome/", 7 - 1)) {

1755 
r
->
hódîs_ö
.
chrome
 = 1;

1757 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Safari/", 7 - 1)

1758 && 
	`ngx_°r°∫
(
u£r_agít
, "Mac OS X", 8 - 1))

1760 
r
->
hódîs_ö
.
ßÁri
 = 1;

1762 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Konqueror", 9 - 1)) {

1763 
r
->
hódîs_ö
.
k⁄quî‹
 = 1;

1767  
NGX_OK
;

1768 
	}
}

1771 
ngx_öt_t


1772 
	$ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1773 
ngx_uöt_t
 
off£t
)

1775 
ngx_¨øy_t
 *
hódîs
;

1776 
ngx_èbÀ_ñt_t
 **
ph
;

1778 
hódîs
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1780 i‡(
hódîs
->
ñts
 =
NULL
) {

1781 i‡(
	`ngx_¨øy_öô
(
hódîs
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *))

1782 !
NGX_OK
)

1784 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1785  
NGX_ERROR
;

1789 
ph
 = 
	`ngx_¨øy_push
(
hódîs
);

1790 i‡(
ph
 =
NULL
) {

1791 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1792  
NGX_ERROR
;

1795 *
ph
 = 
h
;

1796  
NGX_OK
;

1797 
	}
}

1800 
ngx_öt_t


1801 
	$ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1803 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

1804 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

1805 =
NGX_ERROR
)

1807  
NGX_ERROR
;

1810 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
 &&Ñ->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
) {

1811 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1813 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1814  
NGX_ERROR
;

1817 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1818 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =

1819 
	`ngx_©oof
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
d©a
,

1820 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
Àn
);

1822 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

1823 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1825 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1826  
NGX_ERROR
;

1830 i‡(
r
->
mëhod
 =
NGX_HTTP_TRACE
) {

1831 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1833 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_ALLOWED
);

1834  
NGX_ERROR
;

1837 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
) {

1838 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 == 7

1839 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1840 (
u_ch¨
 *) "chunked", 7) == 0)

1842 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
NULL
;

1843 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1844 
r
->
hódîs_ö
.
chunked
 = 1;

1846 } i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 != 8

1847 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1848 (
u_ch¨
 *) "identity", 8) != 0)

1850 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1852 &
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
);

1853 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_IMPLEMENTED
);

1854  
NGX_ERROR
;

1858 i‡(
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 =
NGX_HTTP_CONNECTION_KEEP_ALIVE
) {

1859 i‡(
r
->
hódîs_ö
.
kìp_Æive
) {

1860 
r
->
hódîs_ö
.
kìp_Æive_n
 =

1861 
	`ngx_©Ÿm
(
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
d©a
,

1862 
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
Àn
);

1866  
NGX_OK
;

1867 
	}
}

1871 
	$ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1873 
ngx_c⁄√˘i⁄_t
 *
c
;

1875 
c
 = 
r
->
c⁄√˘i⁄
;

1877 #i‡(
NGX_HTTP_SSL
)

1879 i‡(
r
->
hâp_c⁄√˘i⁄
->
s¶
) {

1880 
rc
;

1881 
X509
 *
˚π
;

1882 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1884 i‡(
c
->
s¶
 =
NULL
) {

1885 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1887 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_TO_HTTPS
);

1891 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

1893 i‡(
sscf
->
vîify
) {

1894 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1896 i‡(
rc
 !
X509_V_OK


1897 && (
sscf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

1899 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1901 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1903 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
c
->
s¶
->
£ssi⁄_˘x
,

1904 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1906 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_CERT_ERROR
);

1910 i‡(
sscf
->
vîify
 == 1) {

1911 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

1913 i‡(
˚π
 =
NULL
) {

1914 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1917 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
c
->
s¶
->
£ssi⁄_˘x
,

1918 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1920 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_NO_CERT
);

1924 
	`X509_‰ì
(
˚π
);

1931 i‡(
c
->
ªad
->
timî_£t
) {

1932 
	`ngx_dñ_timî
(
c
->
ªad
);

1935 #i‡(
NGX_STAT_STUB
)

1936 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

1937 
r
->
°©_ªadög
 = 0;

1938 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, 1);

1939 
r
->
°©_wrôög
 = 1;

1942 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1943 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1944 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1946 
	`ngx_hâp_h™dÀr
(
r
);

1948 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1949 
	}
}

1952 
ngx_öt_t


1953 
	$ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Æloc
)

1955 
u_ch¨
 *
h
, 
ch
;

1956 
size_t
 
i
, 
dŸ_pos
, 
ho°_Àn
;

1959 
sw_usuÆ
 = 0,

1960 
sw_lôîÆ
,

1961 
sw_ª°


1962 } 
°©e
;

1964 
dŸ_pos
 = 
ho°
->
Àn
;

1965 
ho°_Àn
 = 
ho°
->
Àn
;

1967 
h
 = 
ho°
->
d©a
;

1969 
°©e
 = 
sw_usuÆ
;

1971 
i
 = 0; i < 
ho°
->
Àn
; i++) {

1972 
ch
 = 
h
[
i
];

1974 
ch
) {

1977 i‡(
dŸ_pos
 =
i
 - 1) {

1978  
NGX_DECLINED
;

1980 
dŸ_pos
 = 
i
;

1984 i‡(
°©e
 =
sw_usuÆ
) {

1985 
ho°_Àn
 = 
i
;

1986 
°©e
 = 
sw_ª°
;

1991 i‡(
i
 == 0) {

1992 
°©e
 = 
sw_lôîÆ
;

1997 i‡(
°©e
 =
sw_lôîÆ
) {

1998 
ho°_Àn
 = 
i
 + 1;

1999 
°©e
 = 
sw_ª°
;

2004  
NGX_DECLINED
;

2008 i‡(
	`ngx_∑th_£∑øt‹
(
ch
)) {

2009  
NGX_DECLINED
;

2012 i‡(
ch
 >= 'A' && ch <= 'Z') {

2013 
Æloc
 = 1;

2020 i‡(
dŸ_pos
 =
ho°_Àn
 - 1) {

2021 
ho°_Àn
--;

2024 i‡(
ho°_Àn
 == 0) {

2025  
NGX_DECLINED
;

2028 i‡(
Æloc
) {

2029 
ho°
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ho°_Àn
);

2030 i‡(
ho°
->
d©a
 =
NULL
) {

2031  
NGX_ERROR
;

2034 
	`ngx_°æow
(
ho°
->
d©a
, 
h
, 
ho°_Àn
);

2037 
ho°
->
Àn
 = 
ho°_Àn
;

2039  
NGX_OK
;

2040 
	}
}

2043 
ngx_öt_t


2044 
	$ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ho°
)

2046 
ngx_öt_t
 
rc
;

2047 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2048 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2049 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2051 #i‡(
NGX_SUPPRESS_WARN
)

2052 
cscf
 = 
NULL
;

2055 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2057 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2059 i‡(
hc
->
s¶_£rvî«me
) {

2060 i‡(
hc
->
s¶_£rvî«me
->
Àn
 =
ho°
->len

2061 && 
	`ngx_°∫cmp
(
hc
->
s¶_£rvî«me
->
d©a
,

2062 
ho°
->
d©a
, ho°->
Àn
) == 0)

2064 #i‡(
NGX_PCRE
)

2065 i‡(
hc
->
s¶_£rvî«me_ªgex


2066 && 
	`ngx_hâp_ªgex_exec
(
r
, 
hc
->
s¶_£rvî«me_ªgex
,

2067 
hc
->
s¶_£rvî«me
Ë!
NGX_OK
)

2069 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2070  
NGX_ERROR
;

2073  
NGX_OK
;

2079 
rc
 = 
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
->
c⁄√˘i⁄
,

2080 
hc
->
addr_c⁄f
->
vútuÆ_«mes
,

2081 
ho°
, 
r
, &
cscf
);

2083 i‡(
rc
 =
NGX_ERROR
) {

2084 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2085  
NGX_ERROR
;

2088 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2090 i‡(
hc
->
s¶_£rvî«me
) {

2091 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

2093 i‡(
rc
 =
NGX_DECLINED
) {

2094 
cscf
 = 
hc
->
addr_c⁄f
->
deÁu…_£rvî
;

2095 
rc
 = 
NGX_OK
;

2098 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
cscf
->
˘x
, 
ngx_hâp_s¶_moduÀ
);

2100 i‡(
sscf
->
vîify
) {

2101 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2104 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MISDIRECTED_REQUEST
);

2105  
NGX_ERROR
;

2111 i‡(
rc
 =
NGX_DECLINED
) {

2112  
NGX_OK
;

2115 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2116 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2118 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2120 
	`ngx_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

2122  
NGX_OK
;

2123 
	}
}

2126 
ngx_öt_t


2127 
	$ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

2128 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

2129 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
)

2131 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2133 i‡(
vútuÆ_«mes
 =
NULL
) {

2134  
NGX_DECLINED
;

2137 
cscf
 = 
	`ngx_hash_föd_comböed
(&
vútuÆ_«mes
->
«mes
,

2138 
	`ngx_hash_key
(
ho°
->
d©a
, ho°->
Àn
),

2139 
ho°
->
d©a
, ho°->
Àn
);

2141 i‡(
cscf
) {

2142 *
cscÂ
 = 
cscf
;

2143  
NGX_OK
;

2146 #i‡(
NGX_PCRE
)

2148 i‡(
ho°
->
Àn
 && 
vútuÆ_«mes
->
ƒegex
) {

2149 
ngx_öt_t
 
n
;

2150 
ngx_uöt_t
 
i
;

2151 
ngx_hâp_£rvî_«me_t
 *
¢
;

2153 
¢
 = 
vútuÆ_«mes
->
ªgex
;

2155 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2157 i‡(
r
 =
NULL
) {

2158 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2160 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2162 
n
 = 
	`ngx_ªgex_exec
(
¢
[
i
].
ªgex
->ªgex, 
ho°
, 
NULL
, 0);

2164 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2168 i‡(
n
 >= 0) {

2169 
hc
 = 
c
->
d©a
;

2170 
hc
->
s¶_£rvî«me_ªgex
 = 
¢
[
i
].
ªgex
;

2172 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2173  
NGX_OK
;

2176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2177 
ngx_ªgex_exec_n
 " failed: %i "

2179 
n
, 
ho°
, &
¢
[
i
].
ªgex
->
«me
);

2181  
NGX_ERROR
;

2184  
NGX_DECLINED
;

2189 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2191 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
¢
[
i
].
ªgex
, 
ho°
);

2193 i‡(
n
 =
NGX_DECLINED
) {

2197 i‡(
n
 =
NGX_OK
) {

2198 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2199  
NGX_OK
;

2202  
NGX_ERROR
;

2208  
NGX_DECLINED
;

2209 
	}
}

2213 
	$ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

2215 
ngx_c⁄√˘i⁄_t
 *
c
;

2216 
ngx_hâp_ªque°_t
 *
r
;

2218 
c
 = 
ev
->
d©a
;

2219 
r
 = 
c
->
d©a
;

2221 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

2223 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2224 "hâ∞ru¿ªque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2226 i‡(
c
->
˛o£
) {

2227 
r
->
maö
->
cou¡
++;

2228 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2229 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

2233 i‡(
ev
->
dñayed
 &&Év->
timedout
) {

2234 
ev
->
dñayed
 = 0;

2235 
ev
->
timedout
 = 0;

2238 i‡(
ev
->
wrôe
) {

2239 
r
->
	`wrôe_evít_h™dÀr
(r);

2242 
r
->
	`ªad_evít_h™dÀr
(r);

2245 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

2246 
	}
}

2250 
	$ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
)

2252 
ngx_hâp_ªque°_t
 *
r
;

2253 
ngx_hâp_po°ed_ªque°_t
 *
¥
;

2257 i‡(
c
->
de°royed
) {

2261 
r
 = 
c
->
d©a
;

2262 
¥
 = 
r
->
maö
->
po°ed_ªque°s
;

2264 i‡(
¥
 =
NULL
) {

2268 
r
->
maö
->
po°ed_ªque°s
 = 
¥
->
√xt
;

2270 
r
 = 
¥
->
ªque°
;

2272 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

2274 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2275 "hâ∞po°edÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2277 
r
->
	`wrôe_evít_h™dÀr
(r);

2279 
	}
}

2282 
ngx_öt_t


2283 
	$ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_po°ed_ªque°_t
 *
¥
)

2285 
ngx_hâp_po°ed_ªque°_t
 **
p
;

2287 i‡(
¥
 =
NULL
) {

2288 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°ed_ªque°_t
));

2289 i‡(
¥
 =
NULL
) {

2290  
NGX_ERROR
;

2294 
¥
->
ªque°
 = 
r
;

2295 
¥
->
√xt
 = 
NULL
;

2297 
p
 = &
r
->
maö
->
po°ed_ªque°s
; *p;Ö = &(*p)->
√xt
) { }

2299 *
p
 = 
¥
;

2301  
NGX_OK
;

2302 
	}
}

2306 
	$ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2308 
ngx_c⁄√˘i⁄_t
 *
c
;

2309 
ngx_hâp_ªque°_t
 *
¥
;

2310 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2312 
c
 = 
r
->
c⁄√˘i⁄
;

2314 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2316 
rc
, &
r
->
uri
, &r->
¨gs
,Ñ =
c
->
d©a
,Ñ->
maö
->
cou¡
);

2318 i‡(
rc
 =
NGX_DONE
) {

2319 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2323 i‡(
rc
 =
NGX_OK
 && 
r
->
fûãr_föÆize
) {

2324 
c
->
îr‹
 = 1;

2327 i‡(
rc
 =
NGX_DECLINED
) {

2328 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2329 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2330 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2334 i‡(
r
 !r->
maö
 &&Ñ->
po°_subªque°
) {

2335 
rc
 = 
r
->
po°_subªque°
->
	`h™dÀr
‘,Ñ->po°_subªque°->
d©a
,Ñc);

2338 i‡(
rc
 =
NGX_ERROR


2339 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


2340 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST


2341 || 
c
->
îr‹
)

2343 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2347 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2351 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE


2352 || 
rc
 =
NGX_HTTP_CREATED


2353 || 
rc
 =
NGX_HTTP_NO_CONTENT
)

2355 i‡(
rc
 =
NGX_HTTP_CLOSE
) {

2356 
c
->
timedout
 = 1;

2357 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2361 i‡(
r
 =r->
maö
) {

2362 i‡(
c
->
ªad
->
timî_£t
) {

2363 
	`ngx_dñ_timî
(
c
->
ªad
);

2366 i‡(
c
->
wrôe
->
timî_£t
) {

2367 
	`ngx_dñ_timî
(
c
->
wrôe
);

2371 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2372 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2374 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
‘, 
rc
));

2378 i‡(
r
 !r->
maö
) {

2379 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2381 i‡(
r
->
background
) {

2382 i‡(!
r
->
logged
) {

2383 i‡(
˛cf
->
log_subªque°
) {

2384 
	`ngx_hâp_log_ªque°
(
r
);

2387 
r
->
logged
 = 1;

2390 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2392 &
r
->
uri
, &r->
¨gs
);

2395 
r
->
d⁄e
 = 1;

2396 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2400 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
) {

2402 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2403 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2409 
¥
 = 
r
->
∑ª¡
;

2411 i‡(
r
 =
c
->
d©a
) {

2413 
r
->
maö
->
cou¡
--;

2415 i‡(!
r
->
logged
) {

2416 i‡(
˛cf
->
log_subªque°
) {

2417 
	`ngx_hâp_log_ªque°
(
r
);

2420 
r
->
logged
 = 1;

2423 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2425 &
r
->
uri
, &r->
¨gs
);

2428 
r
->
d⁄e
 = 1;

2430 i‡(
¥
->
po°p⁄ed
 &&Ör->po°p⁄ed->
ªque°
 =
r
) {

2431 
¥
->
po°p⁄ed
 =Ör->po°p⁄ed->
√xt
;

2434 
c
->
d©a
 = 
¥
;

2438 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2440 &
r
->
uri
, &r->
¨gs
);

2442 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2444 i‡(
r
->
waôed
) {

2445 
r
->
d⁄e
 = 1;

2449 i‡(
	`ngx_hâp_po°_ªque°
(
¥
, 
NULL
Ë!
NGX_OK
) {

2450 
r
->
maö
->
cou¡
++;

2451 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2455 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2457 &
¥
->
uri
, &¥->
¨gs
);

2462 i‡(
r
->
buf„ªd
 || 
c
->buf„ªd ||Ñ->
po°p⁄ed
) {

2464 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2465 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2471 i‡(
r
 !
c
->
d©a
) {

2472 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2474 &
r
->
uri
, &r->
¨gs
);

2478 
r
->
d⁄e
 = 1;

2480 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

2481 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2483 i‡(!
r
->
po°_a˘i⁄
) {

2484 
r
->
ªque°_com∂ëe
 = 1;

2487 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2491 i‡(
c
->
ªad
->
timî_£t
) {

2492 
	`ngx_dñ_timî
(
c
->
ªad
);

2495 i‡(
c
->
wrôe
->
timî_£t
) {

2496 
c
->
wrôe
->
dñayed
 = 0;

2497 
	`ngx_dñ_timî
(
c
->
wrôe
);

2500 i‡(
c
->
ªad
->
eof
) {

2501 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2505 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2506 
	}
}

2510 
	$ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2512 
ngx_hâp_˛ónup_t
 *
˛n
;

2513 
ngx_hâp_ªque°_t
 *
mr
;

2514 
ngx_hâp_ïhemîÆ_t
 *
e
;

2516 
mr
 = 
r
->
maö
;

2518 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2519 "hâ∞ãrmö©êªque° cou¡:%d", 
mr
->
cou¡
);

2521 i‡(
rc
 > 0 && (
mr
->
hódîs_out
.
°©us
 =0 || mr->
c⁄√˘i⁄
->
£¡
 == 0)) {

2522 
mr
->
hódîs_out
.
°©us
 = 
rc
;

2525 
˛n
 = 
mr
->
˛ónup
;

2526 
mr
->
˛ónup
 = 
NULL
;

2528 
˛n
) {

2529 i‡(
˛n
->
h™dÀr
) {

2530 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2533 
˛n
 = c ->
√xt
;

2536 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2538 
mr
->
cou¡
, mr->
blocked
);

2540 i‡(
mr
->
wrôe_evít_h™dÀr
) {

2542 i‡(
mr
->
blocked
) {

2543 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

2544 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2548 
e
 = 
	`ngx_hâp_ïhemîÆ
(
mr
);

2549 
mr
->
po°ed_ªque°s
 = 
NULL
;

2550 
mr
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ãrmö©e_h™dÀr
;

2551 (Ë
	`ngx_hâp_po°_ªque°
(
mr
, &
e
->
ãrmöÆ_po°ed_ªque°
);

2555 
	`ngx_hâp_˛o£_ªque°
(
mr
, 
rc
);

2556 
	}
}

2560 
	$ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2562 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2563 "hâ∞ãrmö©êh™dÀ∏cou¡:%d", 
r
->
cou¡
);

2565 
r
->
cou¡
 = 1;

2567 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2568 
	}
}

2572 
	$ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2574 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2576 #i‡(
NGX_HTTP_V2
)

2577 i‡(
r
->
°ªam
) {

2578 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2583 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2585 i‡(
r
->
maö
->
cou¡
 != 1) {

2587 i‡(
r
->
disˇrd_body
) {

2588 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

2589 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
lögîög_timeout
);

2591 i‡(
r
->
lögîög_time
 == 0) {

2592 
r
->
lögîög_time
 = 
	`ngx_time
()

2593 + (
time_t
Ë(
˛cf
->
lögîög_time
 / 1000);

2597 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2601 
r
 =Ñ->
maö
;

2603 i‡(
r
->
ªadög_body
) {

2604 
r
->
kì∑live
 = 0;

2605 
r
->
lögîög_˛o£
 = 1;

2608 i‡(!
ngx_ãrmö©e


2609 && !
ngx_exôög


2610 && 
r
->
kì∑live


2611 && 
˛cf
->
kì∑live_timeout
 > 0)

2613 
	`ngx_hâp_£t_kì∑live
(
r
);

2617 i‡(
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ALWAYS


2618 || (
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ON


2619 && (
r
->
lögîög_˛o£


2620 || 
r
->
hódî_ö
->
pos
 <Ñ->hódî_ö->
œ°


2621 || 
r
->
c⁄√˘i⁄
->
ªad
->
ªady
)))

2623 
	`ngx_hâp_£t_lögîög_˛o£
(
r
);

2627 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2628 
	}
}

2631 
ngx_öt_t


2632 
	$ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2634 
ngx_evít_t
 *
wev
;

2635 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2637 
r
->
hâp_°©e
 = 
NGX_HTTP_WRITING_REQUEST_STATE
;

2639 
r
->
ªad_evít_h™dÀr
 =Ñ->
disˇrd_body
 ?

2640 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
:

2641 
ngx_hâp_ã°_ªadög
;

2642 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_wrôî
;

2644 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

2646 i‡(
wev
->
ªady
 && wev->
dñayed
) {

2647  
NGX_OK
;

2650 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2651 i‡(!
wev
->
dñayed
) {

2652 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2655 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2656 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2657  
NGX_ERROR
;

2660  
NGX_OK
;

2661 
	}
}

2665 
	$ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
)

2667 
ngx_öt_t
 
rc
;

2668 
ngx_evít_t
 *
wev
;

2669 
ngx_c⁄√˘i⁄_t
 *
c
;

2670 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2672 
c
 = 
r
->
c⁄√˘i⁄
;

2673 
wev
 = 
c
->
wrôe
;

2675 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2676 "hâ∞wrôî h™dÀr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2678 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_c‹e_moduÀ
);

2680 i‡(
wev
->
timedout
) {

2681 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

2683 
c
->
timedout
 = 1;

2685 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2689 i‡(
wev
->
dñayed
 || 
r
->
aio
) {

2690 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2693 i‡(!
wev
->
dñayed
) {

2694 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2697 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2698 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2704 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
NULL
);

2706 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2708 
rc
, &
r
->
uri
, &r->
¨gs
);

2710 i‡(
rc
 =
NGX_ERROR
) {

2711 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2715 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
 || (∏=r->
maö
 && 
c
->buffered)) {

2717 i‡(!
wev
->
dñayed
) {

2718 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2721 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2722 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2728 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2729 "hâ∞wrôî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2731 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2733 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2734 
	}
}

2738 
	$ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
)

2740 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2741 "hâ∞föÆizî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2743 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2744 
	}
}

2748 
	$ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2750 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2755 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)

2756 && 
r
->
c⁄√˘i⁄
->
ªad
->
a˘ive
)

2758 i‡(
	`ngx_dñ_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2759 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2762 
	}
}

2766 
	$ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2768 
n
;

2769 
buf
[1];

2770 
ngx_îr_t
 
îr
;

2771 
ngx_evít_t
 *
ªv
;

2772 
ngx_c⁄√˘i⁄_t
 *
c
;

2774 
c
 = 
r
->
c⁄√˘i⁄
;

2775 
ªv
 = 
c
->
ªad
;

2777 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "httpÅestÑeading");

2779 #i‡(
NGX_HTTP_V2
)

2781 i‡(
r
->
°ªam
) {

2782 i‡(
c
->
îr‹
) {

2783 
îr
 = 0;

2784 
˛o£d
;

2792 #i‡(
NGX_HAVE_KQUEUE
)

2794 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2796 i‡(!
ªv
->
≥ndög_eof
) {

2800 
ªv
->
eof
 = 1;

2801 
c
->
îr‹
 = 1;

2802 
îr
 = 
ªv
->
kq_î∫o
;

2804 
˛o£d
;

2809 #i‡(
NGX_HAVE_EPOLLRDHUP
)

2811 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
Ë&& 
ngx_u£_ïﬁl_rdhup
) {

2812 
sockÀn_t
 
Àn
;

2814 i‡(!
ªv
->
≥ndög_eof
) {

2818 
ªv
->
eof
 = 1;

2819 
c
->
îr‹
 = 1;

2821 
îr
 = 0;

2822 
Àn
 = (
ngx_îr_t
);

2829 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

2832 
îr
 = 
ngx_sockë_î∫o
;

2835 
˛o£d
;

2840 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

2842 i‡(
n
 == 0) {

2843 
ªv
->
eof
 = 1;

2844 
c
->
îr‹
 = 1;

2845 
îr
 = 0;

2847 
˛o£d
;

2849 } i‡(
n
 == -1) {

2850 
îr
 = 
ngx_sockë_î∫o
;

2852 i‡(
îr
 !
NGX_EAGAIN
) {

2853 
ªv
->
eof
 = 1;

2854 
c
->
îr‹
 = 1;

2856 
˛o£d
;

2862 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ªv
->
a˘ive
) {

2864 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2865 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2871 
˛o£d
:

2873 i‡(
îr
) {

2874 
ªv
->
îr‹
 = 1;

2877 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

2880 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

2881 
	}
}

2885 
	$ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
)

2887 
t˝_nodñay
;

2888 
ngx_buf_t
 *
b
, *
f
;

2889 
ngx_chaö_t
 *
˛
, *
 
;

2890 
ngx_evít_t
 *
ªv
, *
wev
;

2891 
ngx_c⁄√˘i⁄_t
 *
c
;

2892 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2893 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2895 
c
 = 
r
->
c⁄√˘i⁄
;

2896 
ªv
 = 
c
->
ªad
;

2898 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2900 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "set http keepalive handler");

2902 i‡(
r
->
disˇrd_body
) {

2903 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2904 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2905 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2909 
c
->
log
->
a˘i⁄
 = "closingÑequest";

2911 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2912 
b
 = 
r
->
hódî_ö
;

2914 i‡(
b
->
pos
 < b->
œ°
) {

2918 i‡(
b
 !
c
->
buf„r
) {

2928 
˛
 = 
hc
->
busy
; cl; ) {

2929 
 
 = 
˛
;

2930 
˛
 = cl->
√xt
;

2932 i‡(
 
->
buf
 =
b
) {

2933 
	`ngx_‰ì_chaö
(
c
->
poﬁ
, 
 
);

2937 
f
 = 
 
->
buf
;

2938 
f
->
pos
 = f->
°¨t
;

2939 
f
->
œ°
 = f->
°¨t
;

2941 
 
->
√xt
 = 
hc
->
‰ì
;

2942 
hc
->
‰ì
 = 
 
;

2945 
˛
 = 
	`ngx_Æloc_chaö_lök
(
c
->
poﬁ
);

2946 i‡(
˛
 =
NULL
) {

2947 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2951 
˛
->
buf
 = 
b
;

2952 
˛
->
√xt
 = 
NULL
;

2954 
hc
->
busy
 = 
˛
;

2955 
hc
->
nbusy
 = 1;

2960 
r
->
kì∑live
 = 0;

2962 
	`ngx_hâp_‰ì_ªque°
(
r
, 0);

2964 
c
->
d©a
 = 
hc
;

2966 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2967 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2971 
wev
 = 
c
->
wrôe
;

2972 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2974 i‡(
b
->
pos
 < b->
œ°
) {

2976 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "pipelinedÑequest");

2978 
c
->
log
->
a˘i⁄
 = "reading clientÖipelinedÑequestÜine";

2980 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
c
);

2981 i‡(
r
 =
NULL
) {

2982 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2986 
r
->
pùñöe
 = 1;

2988 
c
->
d©a
 = 
r
;

2990 
c
->
£¡
 = 0;

2991 
c
->
de°royed
 = 0;

2993 i‡(
ªv
->
timî_£t
) {

2994 
	`ngx_dñ_timî
(
ªv
);

2997 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

2998 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

3009 
b
 = 
c
->
buf„r
;

3011 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

3018 
b
->
pos
 = 
NULL
;

3021 
b
->
pos
 = b->
°¨t
;

3022 
b
->
œ°
 = b->
°¨t
;

3025 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc free: %p",

3026 
hc
->
‰ì
);

3028 i‡(
hc
->
‰ì
) {

3029 
˛
 = 
hc
->
‰ì
; cl; ) {

3030 
 
 = 
˛
;

3031 
˛
 = cl->
√xt
;

3032 
	`ngx_p‰ì
(
c
->
poﬁ
, 
 
->
buf
->
°¨t
);

3033 
	`ngx_‰ì_chaö
(
c
->
poﬁ
, 
 
);

3036 
hc
->
‰ì
 = 
NULL
;

3039 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc busy: %p %i",

3040 
hc
->
busy
, hc->
nbusy
);

3042 i‡(
hc
->
busy
) {

3043 
˛
 = 
hc
->
busy
; cl; ) {

3044 
 
 = 
˛
;

3045 
˛
 = cl->
√xt
;

3046 
	`ngx_p‰ì
(
c
->
poﬁ
, 
 
->
buf
->
°¨t
);

3047 
	`ngx_‰ì_chaö
(
c
->
poﬁ
, 
 
);

3050 
hc
->
busy
 = 
NULL
;

3051 
hc
->
nbusy
 = 0;

3054 #i‡(
NGX_HTTP_SSL
)

3055 i‡(
c
->
s¶
) {

3056 
	`ngx_s¶_‰ì_buf„r
(
c
);

3060 
ªv
->
h™dÀr
 = 
ngx_hâp_kì∑live_h™dÀr
;

3062 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

3063 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

3064 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3069 
c
->
log
->
a˘i⁄
 = "keepalive";

3071 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

3072 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

3073 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

3074 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3078 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

3079 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

3082 
t˝_nodñay
 = 1;

3085 i‡(
t˝_nodñay
 && 
˛cf
->t˝_nodñay && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

3086 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3092 
r
->
hâp_°©e
 = 
NGX_HTTP_KEEPALIVE_STATE
;

3095 
c
->
idÀ
 = 1;

3096 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

3098 
	`ngx_add_timî
(
ªv
, 
˛cf
->
kì∑live_timeout
);

3100 i‡(
ªv
->
ªady
) {

3101 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

3103 
	}
}

3107 
	$ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

3109 
size_t
 
size
;

3110 
ssize_t
 
n
;

3111 
ngx_buf_t
 *
b
;

3112 
ngx_c⁄√˘i⁄_t
 *
c
;

3114 
c
 = 
ªv
->
d©a
;

3116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http keepalive handler");

3118 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

3119 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3123 #i‡(
NGX_HAVE_KQUEUE
)

3125 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

3126 i‡(
ªv
->
≥ndög_eof
) {

3127 
c
->
log
->
h™dÀr
 = 
NULL
;

3128 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

3130 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3131 #i‡(
NGX_HTTP_SSL
)

3132 i‡(
c
->
s¶
) {

3133 
c
->
s¶
->
no_£nd_shutdown
 = 1;

3136 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3143 
b
 = 
c
->
buf„r
;

3144 
size
 = 
b
->
íd
 - b->
°¨t
;

3146 i‡(
b
->
pos
 =
NULL
) {

3154 
b
->
pos
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

3155 i‡(
b
->
pos
 =
NULL
) {

3156 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3160 
b
->
°¨t
 = b->
pos
;

3161 
b
->
œ°
 = b->
pos
;

3162 
b
->
íd
 = b->
pos
 + 
size
;

3170 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_ECONNRESET
;

3171 
	`ngx_£t_sockë_î∫o
(0);

3173 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

3174 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

3176 i‡(
n
 =
NGX_AGAIN
) {

3177 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3178 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3187 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

3193 
b
->
pos
 = 
NULL
;

3199 i‡(
n
 =
NGX_ERROR
) {

3200 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3204 
c
->
log
->
h™dÀr
 = 
NULL
;

3206 i‡(
n
 == 0) {

3207 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ngx_sockë_î∫o
,

3208 "˛õ¡ %V clo£d kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3209 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3213 
b
->
œ°
 +
n
;

3215 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

3216 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

3218 
c
->
idÀ
 = 0;

3219 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

3221 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

3222 i‡(
c
->
d©a
 =
NULL
) {

3223 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3227 
c
->
£¡
 = 0;

3228 
c
->
de°royed
 = 0;

3230 
	`ngx_dñ_timî
(
ªv
);

3232 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

3233 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

3234 
	}
}

3238 
	$ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
)

3240 
ngx_evít_t
 *
ªv
, *
wev
;

3241 
ngx_c⁄√˘i⁄_t
 *
c
;

3242 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3244 
c
 = 
r
->
c⁄√˘i⁄
;

3246 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3248 
ªv
 = 
c
->
ªad
;

3249 
ªv
->
h™dÀr
 = 
ngx_hâp_lögîög_˛o£_h™dÀr
;

3251 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

3252 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

3254 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3255 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3259 
wev
 = 
c
->
wrôe
;

3260 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3262 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

3263 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

3264 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3269 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

3270 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

3271 
ngx_shutdown_sockë_n
 " failed");

3272 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3276 i‡(
ªv
->
ªady
) {

3277 
	`ngx_hâp_lögîög_˛o£_h™dÀr
(
ªv
);

3279 
	}
}

3283 
	$ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ªv
)

3285 
ssize_t
 
n
;

3286 
ngx_m£c_t
 
timî
;

3287 
ngx_c⁄√˘i⁄_t
 *
c
;

3288 
ngx_hâp_ªque°_t
 *
r
;

3289 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3290 
u_ch¨
 
buf„r
[
NGX_HTTP_LINGERING_BUFFER_SIZE
];

3292 
c
 = 
ªv
->
d©a
;

3293 
r
 = 
c
->
d©a
;

3295 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3298 i‡(
ªv
->
timedout
) {

3299 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3303 
timî
 = (
ngx_m£c_t
Ë
r
->
lögîög_time
 - (ngx_m£c_tË
	`ngx_time
();

3304 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

3305 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3310 
n
 = 
c
->
	`ªcv
(c, 
buf„r
, 
NGX_HTTP_LINGERING_BUFFER_SIZE
);

3312 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "lögîögÑód: %z", 
n
);

3314 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

3315 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3319 } 
ªv
->
ªady
);

3321 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3322 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3326 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3328 
timî
 *= 1000;

3330 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

3331 
timî
 = 
˛cf
->
lögîög_timeout
;

3334 
	`ngx_add_timî
(
ªv
, 
timî
);

3335 
	}
}

3339 
	$ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
)

3341 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0, "httpÉmpty handler");

3344 
	}
}

3348 
	$ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

3350 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3354 
	}
}

3357 
ngx_öt_t


3358 
	$ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
)

3360 
ngx_buf_t
 *
b
;

3361 
ngx_chaö_t
 
out
;

3363 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3364 i‡(
b
 =
NULL
) {

3365  
NGX_ERROR
;

3368 i‡(
Êags
 & 
NGX_HTTP_LAST
) {

3370 i‡(
r
 =r->
maö
 && !r->
po°_a˘i⁄
) {

3371 
b
->
œ°_buf
 = 1;

3374 
b
->
sync
 = 1;

3375 
b
->
œ°_ö_chaö
 = 1;

3379 i‡(
Êags
 & 
NGX_HTTP_FLUSH
) {

3380 
b
->
Êush
 = 1;

3383 
out
.
buf
 = 
b
;

3384 
out
.
√xt
 = 
NULL
;

3386  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

3387 
	}
}

3390 
ngx_öt_t


3391 
	$ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

3393 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3395 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3397 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3398  
NGX_DECLINED
;

3401 i‡(
r
->
po°_a˘i⁄
 &&Ñ->
uri_ch™ges
 == 0) {

3402  
NGX_DECLINED
;

3405 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3406 "po°á˘i⁄: \"%V\"", &
˛cf
->
po°_a˘i⁄
);

3408 
r
->
maö
->
cou¡
--;

3410 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

3411 
r
->
hódî_⁄ly
 = 1;

3412 
r
->
po°_a˘i⁄
 = 1;

3414 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

3416 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
[0] == '/') {

3417 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
˛cf
->
po°_a˘i⁄
, 
NULL
);

3420 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
˛cf
->
po°_a˘i⁄
);

3423  
NGX_OK
;

3424 
	}
}

3428 
	$ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3430 
ngx_c⁄√˘i⁄_t
 *
c
;

3432 
r
 =Ñ->
maö
;

3433 
c
 = 
r
->
c⁄√˘i⁄
;

3435 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3436 "hâ∞ªque° cou¡:%d blk:%d", 
r
->
cou¡
,Ñ->
blocked
);

3438 i‡(
r
->
cou¡
 == 0) {

3439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "httpÑequest count is zero");

3442 
r
->
cou¡
--;

3444 i‡(
r
->
cou¡
 ||Ñ->
blocked
) {

3448 #i‡(
NGX_HTTP_V2
)

3449 i‡(
r
->
°ªam
) {

3450 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 
rc
);

3455 
	`ngx_hâp_‰ì_ªque°
(
r
, 
rc
);

3456 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3457 
	}
}

3461 
	$ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3463 
ngx_log_t
 *
log
;

3464 
ngx_poﬁ_t
 *
poﬁ
;

3465 
lögî
Üinger;

3466 
ngx_hâp_˛ónup_t
 *
˛n
;

3467 
ngx_hâp_log_˘x_t
 *
˘x
;

3468 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3470 
log
 = 
r
->
c⁄√˘i⁄
->log;

3472 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http closeÑequest");

3474 i‡(
r
->
poﬁ
 =
NULL
) {

3475 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "httpÑequestálready closed");

3479 
˛n
 = 
r
->
˛ónup
;

3480 
r
->
˛ónup
 = 
NULL
;

3482 
˛n
) {

3483 i‡(
˛n
->
h™dÀr
) {

3484 
˛n
->
	`h™dÀr
(˛n->
d©a
);

3487 
˛n
 = c ->
√xt
;

3490 #i‡(
NGX_STAT_STUB
)

3492 i‡(
r
->
°©_ªadög
) {

3493 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

3496 i‡(
r
->
°©_wrôög
) {

3497 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, -1);

3502 i‡(
rc
 > 0 && (
r
->
hódîs_out
.
°©us
 =0 ||Ñ->
c⁄√˘i⁄
->
£¡
 == 0)) {

3503 
r
->
hódîs_out
.
°©us
 = 
rc
;

3506 
log
->
a˘i⁄
 = "loggingÑequest";

3508 
	`ngx_hâp_log_ªque°
(
r
);

3510 
log
->
a˘i⁄
 = "closingÑequest";

3512 i‡(
r
->
c⁄√˘i⁄
->
timedout
) {

3513 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3515 i‡(
˛cf
->
ª£t_timedout_c⁄√˘i⁄
) {

3516 
lögî
.
l_⁄off
 = 1;

3517 
lögî
.
l_lögî
 = 0;

3519 i‡(
	`£tsock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

3520 (c⁄° *Ë&
lögî
, (linger)) == -1)

3522 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_sockë_î∫o
,

3529 
˘x
 = 
log
->
d©a
;

3530 
˘x
->
ªque°
 = 
NULL
;

3532 
r
->
ªque°_löe
.
Àn
 = 0;

3534 
r
->
c⁄√˘i⁄
->
de°royed
 = 1;

3541 
poﬁ
 = 
r
->pool;

3542 
r
->
poﬁ
 = 
NULL
;

3544 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3545 
	}
}

3549 
	$ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3551 
ngx_uöt_t
 
i
, 
n
;

3552 
ngx_hâp_h™dÀr_±
 *
log_h™dÀr
;

3553 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3555 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3557 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
ñts
;

3558 
n
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
√…s
;

3560 
i
 = 0; i < 
n
; i++) {

3561 
log_h™dÀr
[
i
](
r
);

3563 
	}
}

3567 
	$ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

3569 
ngx_poﬁ_t
 *
poﬁ
;

3571 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3572 "˛o£ hâ∞c⁄√˘i⁄: %d", 
c
->
fd
);

3574 #i‡(
NGX_HTTP_SSL
)

3576 i‡(
c
->
s¶
) {

3577 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

3578 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_˛o£_c⁄√˘i⁄
;

3585 #i‡(
NGX_STAT_STUB
)

3586 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

3589 
c
->
de°royed
 = 1;

3591 
poﬁ
 = 
c
->pool;

3593 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3595 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3596 
	}
}

3599 
u_ch¨
 *

3600 
	$ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3602 
u_ch¨
 *
p
;

3603 
ngx_hâp_ªque°_t
 *
r
;

3604 
ngx_hâp_log_˘x_t
 *
˘x
;

3606 i‡(
log
->
a˘i⁄
) {

3607 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3608 
Àn
 -
p
 - 
buf
;

3609 
buf
 = 
p
;

3612 
˘x
 = 
log
->
d©a
;

3614 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", &
˘x
->
c⁄√˘i⁄
->
addr_ãxt
);

3615 
Àn
 -
p
 - 
buf
;

3617 
r
 = 
˘x
->
ªque°
;

3619 i‡(
r
) {

3620  
r
->
	`log_h™dÀr
‘, 
˘x
->
cuºít_ªque°
, 
p
, 
Àn
);

3623 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", server: %V",

3624 &
˘x
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

3627  
p
;

3628 
	}
}

3631 
u_ch¨
 *

3632 
	$ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,Çgx_hâp_ªque°_à*
§
,

3633 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3635 *
uri_£∑øt‹
;

3636 
u_ch¨
 *
p
;

3637 
ngx_hâp_up°ªam_t
 *
u
;

3638 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3640 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3642 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", &
cscf
->
£rvî_«me
);

3643 
Àn
 -
p
 - 
buf
;

3644 
buf
 = 
p
;

3646 i‡(
r
->
ªque°_löe
.
d©a
 =
NULL
 &&Ñ->
ªque°_°¨t
) {

3647 
p
 = 
r
->
ªque°_°¨t
;Ö <Ñ->
hódî_ö
->
œ°
;Ö++) {

3648 i‡(*
p
 =
CR
 || *∞=
LF
) {

3653 
r
->
ªque°_löe
.
Àn
 = 
p
 -Ñ->
ªque°_°¨t
;

3654 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

3657 i‡(
r
->
ªque°_löe
.
Àn
) {

3658 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeque°: \"%V\"", &
r
->
ªque°_löe
);

3659 
Àn
 -
p
 - 
buf
;

3660 
buf
 = 
p
;

3663 i‡(
r
 !
§
) {

3664 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", subªque°: \"%V\"", &
§
->
uri
);

3665 
Àn
 -
p
 - 
buf
;

3666 
buf
 = 
p
;

3669 
u
 = 
§
->
up°ªam
;

3671 i‡(
u
 && u->
≥î
.
«me
) {

3673 
uri_£∑øt‹
 = "";

3675 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

3676 i‡(
u
->
≥î
.
sockaddr
 && u->≥î.sockaddr->
ß_Ámûy
 =
AF_UNIX
) {

3677 
uri_£∑øt‹
 = ":";

3681 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", upstream: \"%V%V%s%V\"",

3682 &
u
->
schema
, u->
≥î
.
«me
,

3683 
uri_£∑øt‹
, &
u
->
uri
);

3684 
Àn
 -
p
 - 
buf
;

3685 
buf
 = 
p
;

3688 i‡(
r
->
hódîs_ö
.
ho°
) {

3689 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", host: \"%V\"",

3690 &
r
->
hódîs_ö
.
ho°
->
vÆue
);

3691 
Àn
 -
p
 - 
buf
;

3692 
buf
 = 
p
;

3695 i‡(
r
->
hódîs_ö
.
ª„ªr
) {

3696 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeferrer: \"%V\"",

3697 &
r
->
hódîs_ö
.
ª„ªr
->
vÆue
);

3698 
buf
 = 
p
;

3701  
buf
;

3702 
	}
}

	@src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 50

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

26 
	#NGX_HTTP_VERSION_20
 2000

	)

28 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

29 
	#NGX_HTTP_GET
 0x0002

	)

30 
	#NGX_HTTP_HEAD
 0x0004

	)

31 
	#NGX_HTTP_POST
 0x0008

	)

32 
	#NGX_HTTP_PUT
 0x0010

	)

33 
	#NGX_HTTP_DELETE
 0x0020

	)

34 
	#NGX_HTTP_MKCOL
 0x0040

	)

35 
	#NGX_HTTP_COPY
 0x0080

	)

36 
	#NGX_HTTP_MOVE
 0x0100

	)

37 
	#NGX_HTTP_OPTIONS
 0x0200

	)

38 
	#NGX_HTTP_PROPFIND
 0x0400

	)

39 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

40 
	#NGX_HTTP_LOCK
 0x1000

	)

41 
	#NGX_HTTP_UNLOCK
 0x2000

	)

42 
	#NGX_HTTP_PATCH
 0x4000

	)

43 
	#NGX_HTTP_TRACE
 0x8000

	)

45 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

46 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

49 
	#NGX_NONE
 1

	)

52 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

54 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

56 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

57 
	#NGX_HTTP_PARSE_INVALID_VERSION
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 13

	)

60 
	#NGX_HTTP_PARSE_INVALID_HEADER
 14

	)

64 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

65 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

66 
	#NGX_HTTP_SUBREQUEST_CLONE
 8

	)

67 
	#NGX_HTTP_SUBREQUEST_BACKGROUND
 16

	)

69 
	#NGX_HTTP_LOG_UNSAFE
 1

	)

72 
	#NGX_HTTP_CONTINUE
 100

	)

73 
	#NGX_HTTP_SWITCHING_PROTOCOLS
 101

	)

74 
	#NGX_HTTP_PROCESSING
 102

	)

76 
	#NGX_HTTP_OK
 200

	)

77 
	#NGX_HTTP_CREATED
 201

	)

78 
	#NGX_HTTP_ACCEPTED
 202

	)

79 
	#NGX_HTTP_NO_CONTENT
 204

	)

80 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

82 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

83 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

84 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

85 
	#NGX_HTTP_SEE_OTHER
 303

	)

86 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

87 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

88 
	#NGX_HTTP_PERMANENT_REDIRECT
 308

	)

90 
	#NGX_HTTP_BAD_REQUEST
 400

	)

91 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

92 
	#NGX_HTTP_FORBIDDEN
 403

	)

93 
	#NGX_HTTP_NOT_FOUND
 404

	)

94 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

95 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

96 
	#NGX_HTTP_CONFLICT
 409

	)

97 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

98 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

99 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

100 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

101 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

102 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

103 
	#NGX_HTTP_MISDIRECTED_REQUEST
 421

	)

104 
	#NGX_HTTP_TOO_MANY_REQUESTS
 429

	)

110 
	#NGX_HTTP_CLOSE
 444

	)

112 
	#NGX_HTTP_NGINX_CODES
 494

	)

114 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

116 
	#NGX_HTTPS_CERT_ERROR
 495

	)

117 
	#NGX_HTTPS_NO_CERT
 496

	)

123 
	#NGX_HTTP_TO_HTTPS
 497

	)

133 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

136 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

137 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

138 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

139 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

140 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

141 
	#NGX_HTTP_VERSION_NOT_SUPPORTED
 505

	)

142 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

145 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

146 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

147 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

148 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

149 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

150 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

154 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

155 
	mNGX_HTTP_READING_REQUEST_STATE
,

156 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

158 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

159 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

160 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

162 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

163 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

164 
	mNGX_HTTP_KEEPALIVE_STATE


165 } 
	tngx_hâp_°©e_e
;

169 
ngx_°r_t
 
	m«me
;

170 
ngx_uöt_t
 
	moff£t
;

171 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

172 } 
	tngx_hâp_hódî_t
;

176 
ngx_°r_t
 
	m«me
;

177 
ngx_uöt_t
 
	moff£t
;

178 } 
	tngx_hâp_hódî_out_t
;

182 
ngx_li°_t
 
	mhódîs
;

184 
ngx_èbÀ_ñt_t
 *
	mho°
;

185 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

186 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

187 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

188 
ngx_èbÀ_ñt_t
 *
	mif_m©ch
;

189 
ngx_èbÀ_ñt_t
 *
	mif_n⁄e_m©ch
;

190 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

191 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

192 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

193 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

194 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

196 
ngx_èbÀ_ñt_t
 *
	mønge
;

197 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

199 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

200 
ngx_èbÀ_ñt_t
 *
	mã
;

201 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

202 
ngx_èbÀ_ñt_t
 *
	mupgøde
;

204 #i‡(
NGX_HTTP_GZIP
 || 
NGX_HTTP_HEADERS
)

205 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

206 
ngx_èbÀ_ñt_t
 *
	mvü
;

209 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

211 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

213 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

214 
ngx_¨øy_t
 
	mx_f‹w¨ded_f‹
;

217 #i‡(
NGX_HTTP_REALIP
)

218 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

221 #i‡(
NGX_HTTP_HEADERS
)

222 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

223 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

226 #i‡(
NGX_HTTP_DAV
)

227 
ngx_èbÀ_ñt_t
 *
	mdïth
;

228 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

229 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

230 
ngx_èbÀ_ñt_t
 *
	md©e
;

233 
ngx_°r_t
 
	mu£r
;

234 
ngx_°r_t
 
	m∑sswd
;

236 
ngx_¨øy_t
 
	mcookõs
;

238 
ngx_°r_t
 
	m£rvî
;

239 
off_t
 
	mc⁄ã¡_Àngth_n
;

240 
time_t
 
	mkìp_Æive_n
;

242 
	mc⁄√˘i⁄_ty≥
:2;

243 
	mchunked
:1;

244 
	mmsõ
:1;

245 
	mmsõ6
:1;

246 
	m›îa
:1;

247 
	mgecko
:1;

248 
	mchrome
:1;

249 
	mßÁri
:1;

250 
	mk⁄quî‹
:1;

251 } 
	tngx_hâp_hódîs_ö_t
;

255 
ngx_li°_t
 
	mhódîs
;

256 
ngx_li°_t
 
	måaûîs
;

258 
ngx_uöt_t
 
	m°©us
;

259 
ngx_°r_t
 
	m°©us_löe
;

261 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

262 
ngx_èbÀ_ñt_t
 *
	md©e
;

263 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

264 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

265 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

266 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

267 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

268 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

269 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

270 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

271 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

272 
ngx_èbÀ_ñt_t
 *
	mëag
;

274 
ngx_°r_t
 *
	movîride_ch¨£t
;

276 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

277 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

278 
ngx_°r_t
 
	mch¨£t
;

279 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

280 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

282 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

283 
ngx_¨øy_t
 
	mlök
;

285 
off_t
 
	mc⁄ã¡_Àngth_n
;

286 
off_t
 
	mc⁄ã¡_off£t
;

287 
time_t
 
	md©e_time
;

288 
time_t
 
	mœ°_modifõd_time
;

289 } 
	tngx_hâp_hódîs_out_t
;

292 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

295 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

296 
ngx_chaö_t
 *
bufs
;

297 
ngx_buf_t
 *
buf
;

298 
off_t
 
ª°
;

299 
off_t
 
ª˚ived
;

300 
ngx_chaö_t
 *
‰ì
;

301 
ngx_chaö_t
 *
busy
;

302 
ngx_hâp_chunked_t
 *
chunked
;

303 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

304 } 
	tngx_hâp_ªque°_body_t
;

307 
ngx_hâp_addr_c⁄f_s
 
	tngx_hâp_addr_c⁄f_t
;

310 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

311 
ngx_hâp_c⁄f_˘x_t
 *
c⁄f_˘x
;

313 #i‡(
NGX_HTTP_SSL
 || 
NGX_COMPAT
)

314 
ngx_°r_t
 *
s¶_£rvî«me
;

315 #i‡(
NGX_PCRE
)

316 
ngx_hâp_ªgex_t
 *
s¶_£rvî«me_ªgex
;

320 
ngx_chaö_t
 *
busy
;

321 
ngx_öt_t
 
nbusy
;

323 
ngx_chaö_t
 *
‰ì
;

325 
s¶
:1;

326 
¥oxy_¥Ÿocﬁ
:1;

327 } 
	tngx_hâp_c⁄√˘i⁄_t
;

330 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

332 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

334 
	sngx_hâp_˛ónup_s
 {

335 
ngx_hâp_˛ónup_±
 
h™dÀr
;

336 *
d©a
;

337 
ngx_hâp_˛ónup_t
 *
√xt
;

341 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

342 *
	td©a
, 
	tngx_öt_t
 
	trc
);

345 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

346 *
d©a
;

347 } 
	tngx_hâp_po°_subªque°_t
;

350 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

352 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

353 
ngx_hâp_ªque°_t
 *
ªque°
;

354 
ngx_chaö_t
 *
out
;

355 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

359 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

361 
	sngx_hâp_po°ed_ªque°_s
 {

362 
ngx_hâp_ªque°_t
 *
ªque°
;

363 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

367 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

368 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

371 
	sngx_hâp_ªque°_s
 {

372 
uöt32_t
 
sig«tuª
;

374 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

376 **
˘x
;

377 **
maö_c⁄f
;

378 **
§v_c⁄f
;

379 **
loc_c⁄f
;

381 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

382 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

384 #i‡(
NGX_HTTP_CACHE
)

385 
ngx_hâp_ˇche_t
 *
ˇche
;

388 
ngx_hâp_up°ªam_t
 *
up°ªam
;

389 
ngx_¨øy_t
 *
up°ªam_°©es
;

392 
ngx_poﬁ_t
 *
poﬁ
;

393 
ngx_buf_t
 *
hódî_ö
;

395 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

396 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

398 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

400 
time_t
 
lögîög_time
;

401 
time_t
 
°¨t_£c
;

402 
ngx_m£c_t
 
°¨t_m£c
;

404 
ngx_uöt_t
 
mëhod
;

405 
ngx_uöt_t
 
hâp_vîsi⁄
;

407 
ngx_°r_t
 
ªque°_löe
;

408 
ngx_°r_t
 
uri
;

409 
ngx_°r_t
 
¨gs
;

410 
ngx_°r_t
 
exãn
;

411 
ngx_°r_t
 
u≈¨£d_uri
;

413 
ngx_°r_t
 
mëhod_«me
;

414 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

415 
ngx_°r_t
 
schema
;

417 
ngx_chaö_t
 *
out
;

418 
ngx_hâp_ªque°_t
 *
maö
;

419 
ngx_hâp_ªque°_t
 *
∑ª¡
;

420 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

421 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

422 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

424 
ngx_öt_t
 
pha£_h™dÀr
;

425 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

426 
ngx_uöt_t
 
ac˚ss_code
;

428 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

430 #i‡(
NGX_PCRE
)

431 
ngx_uöt_t
 
nˇ±uªs
;

432 *
ˇ±uªs
;

433 
u_ch¨
 *
ˇ±uªs_d©a
;

436 
size_t
 
limô_øã
;

437 
size_t
 
limô_øã_a·î
;

440 
size_t
 
hódî_size
;

442 
off_t
 
ªque°_Àngth
;

444 
ngx_uöt_t
 
îr_°©us
;

446 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

447 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

449 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

451 
ngx_hâp_˛ónup_t
 *
˛ónup
;

453 
cou¡
:16;

454 
subªque°s
:8;

455 
blocked
:8;

457 
aio
:1;

459 
hâp_°©e
:4;

462 
com∂ex_uri
:1;

465 
quŸed_uri
:1;

468 
∂us_ö_uri
:1;

471 
•a˚_ö_uri
:1;

473 
övÆid_hódî
:1;

475 
add_uri_to_Æüs
:1;

476 
vÆid_loˇti⁄
:1;

477 
vÆid_u≈¨£d_uri
:1;

478 
uri_ch™ged
:1;

479 
uri_ch™ges
:4;

481 
ªque°_body_ö_sögÀ_buf
:1;

482 
ªque°_body_ö_fûe_⁄ly
:1;

483 
ªque°_body_ö_≥rsi°ít_fûe
:1;

484 
ªque°_body_ö_˛ón_fûe
:1;

485 
ªque°_body_fûe_group_ac˚ss
:1;

486 
ªque°_body_fûe_log_Àvñ
:3;

487 
ªque°_body_no_buf„rög
:1;

489 
subªque°_ö_mem‹y
:1;

490 
waôed
:1;

492 #i‡(
NGX_HTTP_CACHE
)

493 
ˇched
:1;

496 #i‡(
NGX_HTTP_GZIP
)

497 
gzù_ã°ed
:1;

498 
gzù_ok
:1;

499 
gzù_v¨y
:1;

502 
¥oxy
:1;

503 
by∑ss_ˇche
:1;

504 
no_ˇche
:1;

511 
limô_c⁄n_£t
:1;

512 
limô_ªq_£t
:1;

515 
ˇchóbÀ
:1;

518 
pùñöe
:1;

519 
chunked
:1;

520 
hódî_⁄ly
:1;

521 
ex≥˘_åaûîs
:1;

522 
kì∑live
:1;

523 
lögîög_˛o£
:1;

524 
disˇrd_body
:1;

525 
ªadög_body
:1;

526 
öã∫Æ
:1;

527 
îr‹_∑ge
:1;

528 
fûãr_föÆize
:1;

529 
po°_a˘i⁄
:1;

530 
ªque°_com∂ëe
:1;

531 
ªque°_ouçut
:1;

532 
hódî_£¡
:1;

533 
ex≥˘_ã°ed
:1;

534 
roŸ_ã°ed
:1;

535 
d⁄e
:1;

536 
logged
:1;

538 
buf„ªd
:4;

540 
maö_fûãr_√ed_ö_mem‹y
:1;

541 
fûãr_√ed_ö_mem‹y
:1;

542 
fûãr_√ed_ãmp‹¨y
:1;

543 
¥e£rve_body
:1;

544 
Ælow_ønges
:1;

545 
subªque°_ønges
:1;

546 
sögÀ_ønge
:1;

547 
dißbÀ_nŸ_modifõd
:1;

548 
°©_ªadög
:1;

549 
°©_wrôög
:1;

550 
°©_¥o˚ssög
:1;

552 
background
:1;

553 
hó…h_check
:1;

557 
ngx_uöt_t
 
°©e
;

559 
ngx_uöt_t
 
hódî_hash
;

560 
ngx_uöt_t
 
lowˇ£_ödex
;

561 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

563 
u_ch¨
 *
hódî_«me_°¨t
;

564 
u_ch¨
 *
hódî_«me_íd
;

565 
u_ch¨
 *
hódî_°¨t
;

566 
u_ch¨
 *
hódî_íd
;

573 
u_ch¨
 *
uri_°¨t
;

574 
u_ch¨
 *
uri_íd
;

575 
u_ch¨
 *
uri_ext
;

576 
u_ch¨
 *
¨gs_°¨t
;

577 
u_ch¨
 *
ªque°_°¨t
;

578 
u_ch¨
 *
ªque°_íd
;

579 
u_ch¨
 *
mëhod_íd
;

580 
u_ch¨
 *
schema_°¨t
;

581 
u_ch¨
 *
schema_íd
;

582 
u_ch¨
 *
ho°_°¨t
;

583 
u_ch¨
 *
ho°_íd
;

584 
u_ch¨
 *
p‹t_°¨t
;

585 
u_ch¨
 *
p‹t_íd
;

587 
hâp_mö‹
:16;

588 
hâp_maj‹
:16;

593 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

594 } 
	tngx_hâp_ïhemîÆ_t
;

597 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

600 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

601 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

604 
	#ngx_hâp_£t_log_ªque°
(
log
, 
r
) \

605 ((
ngx_hâp_log_˘x_t
 *Ë
log
->
d©a
)->
cuºít_ªque°
 = 
r


	)

	@src/http/ngx_http_request_body.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

16 
ngx_öt_t
 
ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_buf_t
 *
b
);

19 
ngx_öt_t
 
ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
);

21 
ngx_öt_t
 
ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_chaö_t
 *
ö
);

23 
ngx_öt_t
 
ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_chaö_t
 *
ö
);

25 
ngx_öt_t
 
ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_chaö_t
 *
ö
);

29 
ngx_öt_t


30 
	$ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

33 
size_t
 
¥îód
;

34 
ssize_t
 
size
;

35 
ngx_öt_t
 
rc
;

36 
ngx_buf_t
 *
b
;

37 
ngx_chaö_t
 
out
;

38 
ngx_hâp_ªque°_body_t
 *
rb
;

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

41 
r
->
maö
->
cou¡
++;

43 i‡(
r
 !r->
maö
 ||Ñ->
ªque°_body
 ||Ñ->
disˇrd_body
) {

44 
r
->
ªque°_body_no_buf„rög
 = 0;

45 
	`po°_h™dÀr
(
r
);

46  
NGX_OK
;

49 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

50 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

51 
d⁄e
;

54 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

55 i‡(
rb
 =
NULL
) {

56 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

57 
d⁄e
;

70 
rb
->
ª°
 = -1;

71 
rb
->
po°_h™dÀr
 =Öost_handler;

73 
r
->
ªque°_body
 = 
rb
;

75 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0 && !r->hódîs_ö.
chunked
) {

76 
r
->
ªque°_body_no_buf„rög
 = 0;

77 
	`po°_h™dÀr
(
r
);

78  
NGX_OK
;

81 #i‡(
NGX_HTTP_V2
)

82 i‡(
r
->
°ªam
) {

83 
rc
 = 
	`ngx_hâp_v2_ªad_ªque°_body
(
r
);

84 
d⁄e
;

88 
¥îód
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

90 i‡(
¥îód
) {

94 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

95 "hâ∞˛õ¡Ñeque° bodyÖªªad %uz", 
¥îód
);

97 
out
.
buf
 = 
r
->
hódî_ö
;

98 
out
.
√xt
 = 
NULL
;

100 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

102 i‡(
rc
 !
NGX_OK
) {

103 
d⁄e
;

106 
r
->
ªque°_Àngth
 +
¥îód
 - (r->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
);

108 i‡(!
r
->
hódîs_ö
.
chunked


109 && 
rb
->
ª°
 > 0

110 && 
rb
->
ª°
 <(
off_t
Ë(
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
))

114 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

115 i‡(
b
 =
NULL
) {

116 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 
d⁄e
;

120 
b
->
ãmp‹¨y
 = 1;

121 
b
->
°¨t
 = 
r
->
hódî_ö
->
pos
;

122 
b
->
pos
 = 
r
->
hódî_ö
->pos;

123 
b
->
œ°
 = 
r
->
hódî_ö
->last;

124 
b
->
íd
 = 
r
->
hódî_ö
->end;

126 
rb
->
buf
 = 
b
;

128 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

129 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

131 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

132 
d⁄e
;

138 i‡(
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
Ë!
NGX_OK
) {

139 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

140 
d⁄e
;

144 i‡(
rb
->
ª°
 == 0) {

146 
r
->
ªque°_body_no_buf„rög
 = 0;

147 
	`po°_h™dÀr
(
r
);

148  
NGX_OK
;

151 i‡(
rb
->
ª°
 < 0) {

152 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

154 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

155 
d⁄e
;

158 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

160 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

161 
size
 += size >> 2;

165 i‡(!
r
->
hódîs_ö
.
chunked
 && 
rb
->
ª°
 < 
size
) {

166 
size
 = (
ssize_t
Ë
rb
->
ª°
;

168 i‡(
r
->
ªque°_body_ö_sögÀ_buf
) {

169 
size
 +
¥îód
;

173 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

176 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

177 i‡(
rb
->
buf
 =
NULL
) {

178 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

179 
d⁄e
;

182 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

183 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

185 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

187 
d⁄e
:

189 i‡(
r
->
ªque°_body_no_buf„rög


190 && (
rc
 =
NGX_OK
 ||Ñ¯=
NGX_AGAIN
))

192 i‡(
rc
 =
NGX_OK
) {

193 
r
->
ªque°_body_no_buf„rög
 = 0;

197 
r
->
ªadög_body
 = 1;

200 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

201 
	`po°_h™dÀr
(
r
);

204 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

205 
r
->
maö
->
cou¡
--;

208  
rc
;

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_hâp_ªad_unbuf„ªd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

215 
ngx_öt_t
 
rc
;

217 #i‡(
NGX_HTTP_V2
)

218 i‡(
r
->
°ªam
) {

219 
rc
 = 
	`ngx_hâp_v2_ªad_unbuf„ªd_ªque°_body
(
r
);

221 i‡(
rc
 =
NGX_OK
) {

222 
r
->
ªadög_body
 = 0;

225  
rc
;

229 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

230 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

231  
NGX_HTTP_REQUEST_TIME_OUT
;

234 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

236 i‡(
rc
 =
NGX_OK
) {

237 
r
->
ªadög_body
 = 0;

240  
rc
;

241 
	}
}

245 
	$ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

247 
ngx_öt_t
 
rc
;

249 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

250 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

251 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

255 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

257 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

258 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

266 
off_t
 
ª°
;

267 
size_t
 
size
;

268 
ssize_t
 
n
;

269 
ngx_öt_t
 
rc
;

270 
ngx_chaö_t
 
out
;

271 
ngx_c⁄√˘i⁄_t
 *
c
;

272 
ngx_hâp_ªque°_body_t
 *
rb
;

273 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

275 
c
 = 
r
->
c⁄√˘i⁄
;

276 
rb
 = 
r
->
ªque°_body
;

278 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

283 i‡(
rb
->
buf
->
œ°
 =rb->buf->
íd
) {

285 i‡(
rb
->
buf
->
pos
 !rb->buf->
œ°
) {

289 
out
.
buf
 = 
rb
->buf;

290 
out
.
√xt
 = 
NULL
;

292 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

294 i‡(
rc
 !
NGX_OK
) {

295  
rc
;

302 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
);

304 i‡(
rc
 !
NGX_OK
) {

305  
rc
;

309 i‡(
rb
->
busy
 !
NULL
) {

310 i‡(
r
->
ªque°_body_no_buf„rög
) {

311 i‡(
c
->
ªad
->
timî_£t
) {

312 
	`ngx_dñ_timî
(
c
->
ªad
);

315 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

316  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

319  
NGX_AGAIN
;

322  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

325 
rb
->
buf
->
pos
 =Ñb->buf->
°¨t
;

326 
rb
->
buf
->
œ°
 =Ñb->buf->
°¨t
;

329 
size
 = 
rb
->
buf
->
íd
 -Ñb->buf->
œ°
;

330 
ª°
 = 
rb
->ª° - (rb->
buf
->
œ°
 -Ñb->buf->
pos
);

332 i‡((
off_t
Ë
size
 > 
ª°
) {

333 
size
 = (
size_t
Ë
ª°
;

336 
n
 = 
c
->
	`ªcv
(c, 
rb
->
buf
->
œ°
, 
size
);

338 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

339 "hâ∞˛õ¡Ñeque° bodyÑecv %z", 
n
);

341 i‡(
n
 =
NGX_AGAIN
) {

345 i‡(
n
 == 0) {

346 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

350 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

351 
c
->
îr‹
 = 1;

352  
NGX_HTTP_BAD_REQUEST
;

355 
rb
->
buf
->
œ°
 +
n
;

356 
r
->
ªque°_Àngth
 +
n
;

358 i‡(
n
 =
ª°
) {

361 
out
.
buf
 = 
rb
->buf;

362 
out
.
√xt
 = 
NULL
;

364 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

366 i‡(
rc
 !
NGX_OK
) {

367  
rc
;

371 i‡(
rb
->
ª°
 == 0) {

375 i‡(
rb
->
buf
->
œ°
 <Ñb->buf->
íd
) {

380 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

381 "hâ∞˛õ¡Ñeque° bodyÑe° %O", 
rb
->
ª°
);

383 i‡(
rb
->
ª°
 == 0) {

387 i‡(!
c
->
ªad
->
ªady
) {

389 i‡(
r
->
ªque°_body_no_buf„rög


390 && 
rb
->
buf
->
pos
 !rb->buf->
œ°
)

394 
out
.
buf
 = 
rb
->buf;

395 
out
.
√xt
 = 
NULL
;

397 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

399 i‡(
rc
 !
NGX_OK
) {

400  
rc
;

404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

405 
	`ngx_add_timî
(
c
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

407 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

408  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

411  
NGX_AGAIN
;

415 i‡(
c
->
ªad
->
timî_£t
) {

416 
	`ngx_dñ_timî
(
c
->
ªad
);

419 i‡(!
r
->
ªque°_body_no_buf„rög
) {

420 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

421 
rb
->
	`po°_h™dÀr
(
r
);

424  
NGX_OK
;

425 
	}
}

428 
ngx_öt_t


429 
	$ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

431 
ssize_t
 
n
;

432 
ngx_chaö_t
 *
˛
, *
 
;

433 
ngx_ãmp_fûe_t
 *
tf
;

434 
ngx_hâp_ªque°_body_t
 *
rb
;

435 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

437 
rb
 = 
r
->
ªque°_body
;

439 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

440 "hâ∞wrôê˛õ¡Ñeque° body, buf†%p", 
rb
->
bufs
);

442 i‡(
rb
->
ãmp_fûe
 =
NULL
) {

443 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

444 i‡(
tf
 =
NULL
) {

445  
NGX_ERROR
;

448 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

450 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

451 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

452 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

453 
tf
->
poﬁ
 = 
r
->pool;

454 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

455 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

456 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

457 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

459 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

460 
tf
->
ac˚ss
 = 0660;

463 
rb
->
ãmp_fûe
 = 
tf
;

465 i‡(
rb
->
bufs
 =
NULL
) {

468 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

469 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

470 !
NGX_OK
)

472  
NGX_ERROR
;

475  
NGX_OK
;

479 i‡(
rb
->
bufs
 =
NULL
) {

480  
NGX_OK
;

483 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
rb
->
ãmp_fûe
,Ñb->
bufs
);

487 i‡(
n
 =
NGX_ERROR
) {

488  
NGX_ERROR
;

491 
rb
->
ãmp_fûe
->
off£t
 +
n
;

495 
˛
 = 
rb
->
bufs
; cl; ) {

497 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

499 
 
 = 
˛
;

500 
˛
 = cl->
√xt
;

501 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

504 
rb
->
bufs
 = 
NULL
;

506  
NGX_OK
;

507 
	}
}

510 
ngx_öt_t


511 
	$ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

513 
ssize_t
 
size
;

514 
ngx_öt_t
 
rc
;

515 
ngx_evít_t
 *
ªv
;

517 i‡(
r
 !r->
maö
 ||Ñ->
disˇrd_body
 ||Ñ->
ªque°_body
) {

518  
NGX_OK
;

521 #i‡(
NGX_HTTP_V2
)

522 i‡(
r
->
°ªam
) {

523 
r
->
°ªam
->
skù_d©a
 = 1;

524  
NGX_OK
;

528 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

529  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

532 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

534 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "http set discard body");

536 i‡(
ªv
->
timî_£t
) {

537 
	`ngx_dñ_timî
(
ªv
);

540 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 <0 && !r->hódîs_ö.
chunked
) {

541  
NGX_OK
;

544 
size
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

546 i‡(
size
 || 
r
->
hódîs_ö
.
chunked
) {

547 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
,Ñ->
hódî_ö
);

549 i‡(
rc
 !
NGX_OK
) {

550  
rc
;

553 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

554  
NGX_OK
;

558 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

560 i‡(
rc
 =
NGX_OK
) {

561 
r
->
lögîög_˛o£
 = 0;

562  
NGX_OK
;

565 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

566  
rc
;

571 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

573 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

574  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

577 
r
->
cou¡
++;

578 
r
->
disˇrd_body
 = 1;

580  
NGX_OK
;

581 
	}
}

585 
	$ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

587 
ngx_öt_t
 
rc
;

588 
ngx_m£c_t
 
timî
;

589 
ngx_evít_t
 *
ªv
;

590 
ngx_c⁄√˘i⁄_t
 *
c
;

591 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

593 
c
 = 
r
->
c⁄√˘i⁄
;

594 
ªv
 = 
c
->
ªad
;

596 i‡(
ªv
->
timedout
) {

597 
c
->
timedout
 = 1;

598 
c
->
îr‹
 = 1;

599 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

603 i‡(
r
->
lögîög_time
) {

604 
timî
 = (
ngx_m£c_t
Ë
r
->
lögîög_time
 - (ngx_m£c_tË
	`ngx_time
();

606 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

607 
r
->
disˇrd_body
 = 0;

608 
r
->
lögîög_˛o£
 = 0;

609 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

614 
timî
 = 0;

617 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

619 i‡(
rc
 =
NGX_OK
) {

620 
r
->
disˇrd_body
 = 0;

621 
r
->
lögîög_˛o£
 = 0;

622 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

626 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

627 
c
->
îr‹
 = 1;

628 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

634 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

635 
c
->
îr‹
 = 1;

636 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

640 i‡(
timî
) {

642 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

644 
timî
 *= 1000;

646 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

647 
timî
 = 
˛cf
->
lögîög_timeout
;

650 
	`ngx_add_timî
(
ªv
, 
timî
);

652 
	}
}

655 
ngx_öt_t


656 
	$ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

658 
size_t
 
size
;

659 
ssize_t
 
n
;

660 
ngx_öt_t
 
rc
;

661 
ngx_buf_t
 
b
;

662 
u_ch¨
 
buf„r
[
NGX_HTTP_DISCARD_BUFFER_SIZE
];

664 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

667 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

669 
b
.
ãmp‹¨y
 = 1;

672 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

673 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

674  
NGX_OK
;

677 i‡(!
r
->
c⁄√˘i⁄
->
ªad
->
ªady
) {

678  
NGX_AGAIN
;

681 
size
 = (
size_t
Ë
	`ngx_mö
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

682 
NGX_HTTP_DISCARD_BUFFER_SIZE
);

684 
n
 = 
r
->
c⁄√˘i⁄
->
	`ªcv
‘->c⁄√˘i⁄, 
buf„r
, 
size
);

686 i‡(
n
 =
NGX_ERROR
) {

687 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

688  
NGX_OK
;

691 i‡(
n
 =
NGX_AGAIN
) {

692  
NGX_AGAIN
;

695 i‡(
n
 == 0) {

696  
NGX_OK
;

699 
b
.
pos
 = 
buf„r
;

700 
b
.
œ°
 = 
buf„r
 + 
n
;

702 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
, &
b
);

704 i‡(
rc
 !
NGX_OK
) {

705  
rc
;

708 
	}
}

711 
ngx_öt_t


712 
	$ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

714 
size_t
 
size
;

715 
ngx_öt_t
 
rc
;

716 
ngx_hâp_ªque°_body_t
 *
rb
;

718 i‡(
r
->
hódîs_ö
.
chunked
) {

720 
rb
 = 
r
->
ªque°_body
;

722 i‡(
rb
 =
NULL
) {

724 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

725 i‡(
rb
 =
NULL
) {

726  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

729 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

730 i‡(
rb
->
chunked
 =
NULL
) {

731  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

734 
r
->
ªque°_body
 = 
rb
;

739 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
b
, 
rb
->
chunked
);

741 i‡(
rc
 =
NGX_OK
) {

745 
size
 = 
b
->
œ°
 - b->
pos
;

747 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

748 
b
->
pos
 +(
size_t
Ë
rb
->
chunked
->
size
;

749 
rb
->
chunked
->
size
 = 0;

752 
rb
->
chunked
->
size
 -= size;

753 
b
->
pos
 = b->
œ°
;

759 i‡(
rc
 =
NGX_DONE
) {

763 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

767 i‡(
rc
 =
NGX_AGAIN
) {

771 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
chunked
->
Àngth
;

777 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

780  
NGX_HTTP_BAD_REQUEST
;

784 
size
 = 
b
->
œ°
 - b->
pos
;

786 i‡((
off_t
Ë
size
 > 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

787 
b
->
pos
 +(
size_t
Ë
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

788 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

791 
b
->
pos
 = b->
œ°
;

792 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
size
;

796  
NGX_OK
;

797 
	}
}

800 
ngx_öt_t


801 
	$ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
)

803 
ngx_öt_t
 
n
;

804 
ngx_°r_t
 *
ex≥˘
;

806 i‡(
r
->
ex≥˘_ã°ed


807 || 
r
->
hódîs_ö
.
ex≥˘
 =
NULL


808 || 
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11


809 #i‡(
NGX_HTTP_V2
)

810 || 
r
->
°ªam
 !
NULL


814  
NGX_OK
;

817 
r
->
ex≥˘_ã°ed
 = 1;

819 
ex≥˘
 = &
r
->
hódîs_ö
.ex≥˘->
vÆue
;

821 i‡(
ex≥˘
->
Àn
 != ("100-continue") - 1

822 || 
	`ngx_°∫ˇ£cmp
(
ex≥˘
->
d©a
, (
u_ch¨
 *) "100-continue",

826  
NGX_OK
;

829 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

832 
n
 = 
r
->
c⁄√˘i⁄
->
	`£nd
(r->connection,

833 (
u_ch¨
 *Ë"HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF,

834 ("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1);

836 i‡(
n
 =("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1) {

837  
NGX_OK
;

842 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

844  
NGX_ERROR
;

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

851 i‡(
r
->
hódîs_ö
.
chunked
) {

852  
	`ngx_hâp_ªque°_body_chunked_fûãr
(
r
, 
ö
);

855  
	`ngx_hâp_ªque°_body_Àngth_fûãr
(
r
, 
ö
);

857 
	}
}

860 
ngx_öt_t


861 
	$ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

863 
size_t
 
size
;

864 
ngx_öt_t
 
rc
;

865 
ngx_buf_t
 *
b
;

866 
ngx_chaö_t
 *
˛
, *
é
, *
out
, **
Œ
;

867 
ngx_hâp_ªque°_body_t
 *
rb
;

869 
rb
 = 
r
->
ªque°_body
;

871 i‡(
rb
->
ª°
 == -1) {

872 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

875 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

878 
out
 = 
NULL
;

879 
Œ
 = &
out
;

881 
˛
 = 
ö
; cl; c»˛->
√xt
) {

883 i‡(
rb
->
ª°
 == 0) {

887 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

888 i‡(
é
 =
NULL
) {

889  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

892 
b
 = 
é
->
buf
;

894 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

896 
b
->
ãmp‹¨y
 = 1;

897 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

898 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

899 
b
->
pos
 = 
˛
->
buf
->pos;

900 
b
->
œ°
 = 
˛
->
buf
->last;

901 
b
->
íd
 = 
˛
->
buf
->end;

902 
b
->
Êush
 = 
r
->
ªque°_body_no_buf„rög
;

904 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

906 i‡((
off_t
Ë
size
 < 
rb
->
ª°
) {

907 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

908 
rb
->
ª°
 -
size
;

911 
˛
->
buf
->
pos
 +(
size_t
Ë
rb
->
ª°
;

912 
rb
->
ª°
 = 0;

913 
b
->
œ°
 = 
˛
->
buf
->
pos
;

914 
b
->
œ°_buf
 = 1;

917 *
Œ
 = 
é
;

918 
Œ
 = &
é
->
√xt
;

921 
rc
 = 
	`ngx_hâp_t›_ªque°_body_fûãr
(
r
, 
out
);

923 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

924 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

926  
rc
;

927 
	}
}

930 
ngx_öt_t


931 
	$ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

933 
size_t
 
size
;

934 
ngx_öt_t
 
rc
;

935 
ngx_buf_t
 *
b
;

936 
ngx_chaö_t
 *
˛
, *
out
, *
é
, **
Œ
;

937 
ngx_hâp_ªque°_body_t
 *
rb
;

938 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

940 
rb
 = 
r
->
ªque°_body
;

942 i‡(
rb
->
ª°
 == -1) {

944 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

947 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

948 i‡(
rb
->
chunked
 =
NULL
) {

949  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

952 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

953 
rb
->
ª°
 = 3;

956 
out
 = 
NULL
;

957 
Œ
 = &
out
;

959 
˛
 = 
ö
; cl; c»˛->
√xt
) {

963 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

966 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

967 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

968 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

969 
˛
->
buf
->
fûe_pos
,

970 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

972 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
˛
->
buf
, 
rb
->
chunked
);

974 i‡(
rc
 =
NGX_OK
) {

978 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

980 i‡(
˛cf
->
˛õ¡_max_body_size


981 && 
˛cf
->
˛õ¡_max_body_size


982 - 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 
rb
->
chunked
->
size
)

984 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

987 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

988 
rb
->
chunked
->
size
);

990 
r
->
lögîög_˛o£
 = 1;

992  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

995 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

996 i‡(
é
 =
NULL
) {

997  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1000 
b
 = 
é
->
buf
;

1002 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1004 
b
->
ãmp‹¨y
 = 1;

1005 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

1006 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

1007 
b
->
pos
 = 
˛
->
buf
->pos;

1008 
b
->
œ°
 = 
˛
->
buf
->last;

1009 
b
->
íd
 = 
˛
->
buf
->end;

1010 
b
->
Êush
 = 
r
->
ªque°_body_no_buf„rög
;

1012 *
Œ
 = 
é
;

1013 
Œ
 = &
é
->
√xt
;

1015 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

1017 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

1018 
˛
->
buf
->
pos
 +(
size_t
Ë
rb
->
chunked
->
size
;

1019 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
rb
->
chunked
->
size
;

1020 
rb
->
chunked
->
size
 = 0;

1023 
rb
->
chunked
->
size
 -= size;

1024 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
size
;

1025 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

1028 
b
->
œ°
 = 
˛
->
buf
->
pos
;

1033 i‡(
rc
 =
NGX_DONE
) {

1037 
rb
->
ª°
 = 0;

1039 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

1040 i‡(
é
 =
NULL
) {

1041  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1044 
b
 = 
é
->
buf
;

1046 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1048 
b
->
œ°_buf
 = 1;

1050 *
Œ
 = 
é
;

1051 
Œ
 = &
é
->
√xt
;

1056 i‡(
rc
 =
NGX_AGAIN
) {

1060 
rb
->
ª°
 =Ñb->
chunked
->
Àngth
;

1067 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1070  
NGX_HTTP_BAD_REQUEST
;

1074 
rc
 = 
	`ngx_hâp_t›_ªque°_body_fûãr
(
r
, 
out
);

1076 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

1077 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

1079  
rc
;

1080 
	}
}

1083 
ngx_öt_t


1084 
	$ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1086 
ngx_buf_t
 *
b
;

1087 
ngx_chaö_t
 *
˛
;

1088 
ngx_hâp_ªque°_body_t
 *
rb
;

1090 
rb
 = 
r
->
ªque°_body
;

1092 #i‡(
NGX_DEBUG
)

1095 
˛
 = 
rb
->
bufs
; cl; c»˛->
√xt
) {

1096 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1099 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1100 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1101 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1102 
˛
->
buf
->
fûe_pos
,

1103 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1107 
˛
 = 
ö
; cl; c»˛->
√xt
) {

1108 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1111 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1112 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1113 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1114 
˛
->
buf
->
fûe_pos
,

1115 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1122 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
rb
->
bufs
, 
ö
Ë!
NGX_OK
) {

1123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1126 i‡(
r
->
ªque°_body_no_buf„rög
) {

1127  
NGX_OK
;

1130 i‡(
rb
->
ª°
 > 0) {

1132 i‡(
rb
->
buf
 &&Ñb->buf->
œ°
 =rb->buf->
íd


1133 && 
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
)

1135  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1138  
NGX_OK
;

1143 i‡(
rb
->
ãmp_fûe
 || 
r
->
ªque°_body_ö_fûe_⁄ly
) {

1145 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

1146  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1149 i‡(
rb
->
ãmp_fûe
->
fûe
.
off£t
 != 0) {

1151 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

1152 i‡(
˛
 =
NULL
) {

1153  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1156 
b
 = 
˛
->
buf
;

1158 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1160 
b
->
ö_fûe
 = 1;

1161 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

1162 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

1164 
rb
->
bufs
 = 
˛
;

1168  
NGX_OK
;

1169 
	}
}

	@src/http/ngx_http_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

14 
ngx_öt_t
 
ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

16 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

17 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

18 
ngx_°r_t
 *
«me
);

19 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

22 
ngx_uöt_t
 
n
);

24 
ngx_öt_t


25 
ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

27 
ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

30 
	#ngx_hâp_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_hâp_s¸ùt_exô_code


	)

32 
uöçå_t
 
	gngx_hâp_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

36 
	$ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
)

39 
ngx_uöt_t
 *
ödex
;

41 
ödex
 = 
vÆ
->
Êushes
;

43 i‡(
ödex
) {

44 *
ödex
 !(
ngx_uöt_t
) -1) {

46 i‡(
r
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

47 
r
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

48 
r
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

51 
ödex
++;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
,

59 
ngx_°r_t
 *
vÆue
)

61 
size_t
 
Àn
;

62 
ngx_hâp_s¸ùt_code_±
 
code
;

63 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

64 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

66 i‡(
vÆ
->
Àngths
 =
NULL
) {

67 *
vÆue
 = 
vÆ
->value;

68  
NGX_OK
;

71 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
r
, 
vÆ
);

73 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

75 
e
.
ù
 = 
vÆ
->
Àngths
;

76 
e
.
ªque°
 = 
r
;

77 
e
.
Êushed
 = 1;

79 
Àn
 = 0;

81 *(
uöçå_t
 *Ë
e
.
ù
) {

82 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

83 
Àn
 +
	`lcode
(&
e
);

86 
vÆue
->
Àn
 =Üen;

87 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

88 i‡(
vÆue
->
d©a
 =
NULL
) {

89  
NGX_ERROR
;

92 
e
.
ù
 = 
vÆ
->
vÆues
;

93 
e
.
pos
 = 
vÆue
->
d©a
;

94 
e
.
buf
 = *
vÆue
;

96 *(
uöçå_t
 *Ë
e
.
ù
) {

97 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

98 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

101 *
vÆue
 = 
e
.
buf
;

103  
NGX_OK
;

104 
	}
}

107 
ngx_öt_t


108 
	$ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
)

110 
ngx_°r_t
 *
v
;

111 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

112 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

113 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

115 
v
 = 
ccv
->
vÆue
;

117 
nv
 = 0;

118 
nc
 = 0;

120 
i
 = 0; i < 
v
->
Àn
; i++) {

121 i‡(
v
->
d©a
[
i
] == '$') {

122 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

123 
nc
++;

126 
nv
++;

131 i‡((
v
->
Àn
 =0 || v->
d©a
[0] != '$')

132 && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
))

134 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

135  
NGX_ERROR
;

138 
ccv
->
c⁄f_¥efix
 = 0;

139 
ccv
->
roŸ_¥efix
 = 0;

142 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

143 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

144 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

145 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

147 i‡(
nv
 =0 && 
nc
 == 0) {

148  
NGX_OK
;

151 
n
 = 
nv
 + 1;

153 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

154 !
NGX_OK
)

156  
NGX_ERROR
;

159 
n
 = 
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

160 + (
ngx_hâp_s¸ùt_v¨_code_t
))

161 + (
uöçå_t
);

163 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

164  
NGX_ERROR
;

167 
n
 = (
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

168 + (
ngx_hâp_s¸ùt_v¨_code_t
))

169 + (
uöçå_t
)

170 + 
v
->
Àn


171 + (
uöçå_t
) - 1)

172 & ~((
uöçå_t
) - 1);

174 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

175  
NGX_ERROR
;

178 
pf
 = &
Êushes
;

179 
∂
 = &
Àngths
;

180 
pv
 = &
vÆues
;

182 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

184 
sc
.
cf
 = 
ccv
->cf;

185 
sc
.
sour˚
 = 
v
;

186 
sc
.
Êushes
 = &
pf
;

187 
sc
.
Àngths
 = &
∂
;

188 
sc
.
vÆues
 = &
pv
;

189 
sc
.
com∂ëe_Àngths
 = 1;

190 
sc
.
com∂ëe_vÆues
 = 1;

191 
sc
.
zîo
 = 
ccv
->zero;

192 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

193 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

195 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199 i‡(
Êushes
.
√…s
) {

200 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

201 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

204 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

205 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

207  
NGX_OK
;

208 
	}
}

212 
	$ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
p
 = 
c⁄f
;

216 
ngx_°r_t
 *
vÆue
;

217 
ngx_hâp_com∂ex_vÆue_t
 **
cv
;

218 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

220 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

222 i‡(*
cv
 !
NULL
) {

226 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

227 i‡(*
cv
 =
NULL
) {

228  
NGX_CONF_ERROR
;

231 
vÆue
 = 
cf
->
¨gs
->
ñts
;

233 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

235 
ccv
.
cf
 = cf;

236 
ccv
.
vÆue
 = &value[1];

237 
ccv
.
com∂ex_vÆue
 = *
cv
;

239 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

240  
NGX_CONF_ERROR
;

243  
NGX_CONF_OK
;

244 
	}
}

247 
ngx_öt_t


248 
	$ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
¥ediˇãs
)

250 
ngx_°r_t
 
vÆ
;

251 
ngx_uöt_t
 
i
;

252 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

254 i‡(
¥ediˇãs
 =
NULL
) {

255  
NGX_OK
;

258 
cv
 = 
¥ediˇãs
->
ñts
;

260 
i
 = 0; i < 
¥ediˇãs
->
√…s
; i++) {

261 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
cv
[
i
], &
vÆ
Ë!
NGX_OK
) {

262  
NGX_ERROR
;

265 i‡(
vÆ
.
Àn
 && (vÆ.À¿!1 || vÆ.
d©a
[0] != '0')) {

266  
NGX_DECLINED
;

270  
NGX_OK
;

271 
	}
}

275 
	$ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

277 *
p
 = 
c⁄f
;

279 
ngx_°r_t
 *
vÆue
;

280 
ngx_uöt_t
 
i
;

281 
ngx_¨øy_t
 **
a
;

282 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

283 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

285 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

287 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

288 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_com∂ex_vÆue_t
));

289 i‡(*
a
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
vÆue
 = 
cf
->
¨gs
->
ñts
;

296 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

297 
cv
 = 
	`ngx_¨øy_push
(*
a
);

298 i‡(
cv
 =
NULL
) {

299  
NGX_CONF_ERROR
;

302 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

304 
ccv
.
cf
 = cf;

305 
ccv
.
vÆue
 = &vÆue[
i
];

306 
ccv
.
com∂ex_vÆue
 = 
cv
;

308 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

309  
NGX_CONF_ERROR
;

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_uöt_t


318 
	$ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

320 
ngx_uöt_t
 
i
, 
n
;

322 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

323 i‡(
vÆue
->
d©a
[
i
] == '$') {

324 
n
++;

328  
n
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

335 
u_ch¨
 
ch
;

336 
ngx_°r_t
 
«me
;

337 
ngx_uöt_t
 
i
, 
bøckë
;

339 i‡(
	`ngx_hâp_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

340  
NGX_ERROR
;

343 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

345 
«me
.
Àn
 = 0;

347 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

349 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

350 
övÆid_v¨übÀ
;

353 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

354 #i‡(
NGX_PCRE
)

355 
ngx_uöt_t
 
n
;

357 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

359 i‡(
sc
->
ˇ±uªs_mask
 & ((
ngx_uöt_t
Ë1 << 
n
)) {

360 
sc
->
dup_ˇ±uª
 = 1;

363 
sc
->
ˇ±uªs_mask
 |(
ngx_uöt_t
Ë1 << 
n
;

365 i‡(
	`ngx_hâp_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

366  
NGX_ERROR
;

369 
i
++;

373 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

375 "PCREÜibøry", 
sc
->
sour˚
->
d©a
[
i
]);

376  
NGX_ERROR
;

380 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

381 
bøckë
 = 1;

383 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

384 
övÆid_v¨übÀ
;

387 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

390 
bøckë
 = 0;

391 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

394  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

395 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

397 i‡(
ch
 ='}' && 
bøckë
) {

398 
i
++;

399 
bøckë
 = 0;

403 i‡((
ch
 >= 'A' && ch <= 'Z')

404 || (
ch
 >= 'a' && ch <= 'z')

405 || (
ch
 >= '0' && ch <= '9')

406 || 
ch
 == '_')

414 i‡(
bøckë
) {

415 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

417 "v¨übÀ i†missög", &
«me
);

418  
NGX_ERROR
;

421 i‡(
«me
.
Àn
 == 0) {

422 
övÆid_v¨übÀ
;

425 
sc
->
v¨übÀs
++;

427 i‡(
	`ngx_hâp_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

428  
NGX_ERROR
;

434 i‡(
sc
->
sour˚
->
d©a
[
i
] ='?' && sc->
compûe_¨gs
) {

435 
sc
->
¨gs
 = 1;

436 
sc
->
compûe_¨gs
 = 0;

438 i‡(
	`ngx_hâp_s¸ùt_add_¨gs_code
(
sc
Ë!
NGX_OK
) {

439  
NGX_ERROR
;

442 
i
++;

447 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

449 
i
 < 
sc
->
sour˚
->
Àn
) {

451 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

455 i‡(
sc
->
sour˚
->
d©a
[
i
] == '?') {

457 
sc
->
¨gs
 = 1;

459 i‡(
sc
->
compûe_¨gs
) {

464 
i
++;

465 
«me
.
Àn
++;

468 
sc
->
size
 +
«me
.
Àn
;

470 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

471 !
NGX_OK
)

473  
NGX_ERROR
;

477  
	`ngx_hâp_s¸ùt_d⁄e
(
sc
);

479 
övÆid_v¨übÀ
:

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

483  
NGX_ERROR
;

484 
	}
}

487 
u_ch¨
 *

488 
	$ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

489 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

491 
ngx_uöt_t
 
i
;

492 
ngx_hâp_s¸ùt_code_±
 
code
;

493 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

494 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

495 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

497 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

499 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

500 i‡(
r
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

501 
r
->
v¨übÀs
[
i
].
vÆid
 = 0;

502 
r
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

506 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

508 
e
.
ù
 = 
code_Àngths
;

509 
e
.
ªque°
 = 
r
;

510 
e
.
Êushed
 = 1;

512 *(
uöçå_t
 *Ë
e
.
ù
) {

513 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

514 
Àn
 +
	`lcode
(&
e
);

518 
vÆue
->
Àn
 =Üen;

519 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

520 i‡(
vÆue
->
d©a
 =
NULL
) {

521  
NULL
;

524 
e
.
ù
 = 
code_vÆues
;

525 
e
.
pos
 = 
vÆue
->
d©a
;

527 *(
uöçå_t
 *Ë
e
.
ù
) {

528 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

529 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

532  
e
.
pos
;

533 
	}
}

537 
	$ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

538 
ngx_¨øy_t
 *
ödi˚s
)

540 
ngx_uöt_t
 
n
, *
ödex
;

542 i‡(
ödi˚s
) {

543 
ödex
 = 
ödi˚s
->
ñts
;

544 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

545 i‡(
r
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

546 
r
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

547 
r
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

551 
	}
}

554 
ngx_öt_t


555 
	$ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

557 
ngx_uöt_t
 
n
;

559 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

560 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

561 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

562 i‡(*
sc
->
Êushes
 =
NULL
) {

563  
NGX_ERROR
;

567 i‡(*
sc
->
Àngths
 =
NULL
) {

568 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

569 + (
ngx_hâp_s¸ùt_v¨_code_t
))

570 + (
uöçå_t
);

572 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

573 i‡(*
sc
->
Àngths
 =
NULL
) {

574  
NGX_ERROR
;

578 i‡(*
sc
->
vÆues
 =
NULL
) {

579 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

580 + (
ngx_hâp_s¸ùt_v¨_code_t
))

581 + (
uöçå_t
)

582 + 
sc
->
sour˚
->
Àn


583 + (
uöçå_t
) - 1)

584 & ~((
uöçå_t
) - 1);

586 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

587 i‡(*
sc
->
vÆues
 =
NULL
) {

588  
NGX_ERROR
;

592 
sc
->
v¨übÀs
 = 0;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

601 
ngx_°r_t
 
zîo
;

602 
uöçå_t
 *
code
;

604 i‡(
sc
->
zîo
) {

606 
zîo
.
Àn
 = 1;

607 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

609 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

610  
NGX_ERROR
;

614 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

615 i‡(
	`ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

616  
NGX_ERROR
;

620 i‡(
sc
->
com∂ëe_Àngths
) {

621 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

622 i‡(
code
 =
NULL
) {

623  
NGX_ERROR
;

626 *
code
 = (
uöçå_t
Ë
NULL
;

629 i‡(
sc
->
com∂ëe_vÆues
) {

630 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

631 &
sc
->
maö
);

632 i‡(
code
 =
NULL
) {

633  
NGX_ERROR
;

636 *
code
 = (
uöçå_t
Ë
NULL
;

639  
NGX_OK
;

640 
	}
}

644 
	$ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
, 
size_t
 
size
)

646 i‡(*
codes
 =
NULL
) {

647 *
codes
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 256, 1);

648 i‡(*
codes
 =
NULL
) {

649  
NULL
;

653  
	`ngx_¨øy_push_n
(*
codes
, 
size
);

654 
	}
}

658 
	$ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

660 
u_ch¨
 *
ñts
, **
p
;

661 *
√w
;

663 
ñts
 = 
codes
->elts;

665 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

666 i‡(
√w
 =
NULL
) {

667  
NULL
;

670 i‡(
code
) {

671 i‡(
ñts
 !
codes
->elts) {

672 
p
 = 
code
;

673 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

677  
√w
;

678 
	}
}

681 
ngx_öt_t


682 
	$ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
,

683 
ngx_uöt_t
 
œ°
)

685 
u_ch¨
 *
p
;

686 
size_t
 
size
, 
Àn
, 
zîo
;

687 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

689 
zîo
 = (
sc
->zîÿ&& 
œ°
);

690 
Àn
 = 
vÆue
->À¿+ 
zîo
;

692 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

693 (
ngx_hâp_s¸ùt_c›y_code_t
), 
NULL
);

694 i‡(
code
 =
NULL
) {

695  
NGX_ERROR
;

698 
code
->codê(
ngx_hâp_s¸ùt_code_±
) (*)

699 
ngx_hâp_s¸ùt_c›y_Àn_code
;

700 
code
->
Àn
 =Üen;

702 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

703 & ~((
uöçå_t
) - 1);

705 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

706 i‡(
code
 =
NULL
) {

707  
NGX_ERROR
;

710 
code
->codê
ngx_hâp_s¸ùt_c›y_code
;

711 
code
->
Àn
 =Üen;

713 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

714 
vÆue
->
d©a
, vÆue->
Àn
);

716 i‡(
zîo
) {

717 *
p
 = '\0';

718 
sc
->
zîo
 = 0;

721  
NGX_OK
;

722 
	}
}

725 
size_t


726 
	$ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

728 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

730 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

732 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
);

734  
code
->
Àn
;

735 
	}
}

739 
	$ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

741 
u_ch¨
 *
p
;

742 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

744 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

746 
p
 = 
e
->
pos
;

748 i‡(!
e
->
skù
) {

749 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

750 
code
->
Àn
);

753 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
)

754 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

756 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

757 "hâ∞s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

758 
	}
}

761 
ngx_öt_t


762 
	$ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

764 
ngx_öt_t
 
ödex
, *
p
;

765 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

767 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

769 i‡(
ödex
 =
NGX_ERROR
) {

770  
NGX_ERROR
;

773 i‡(
sc
->
Êushes
) {

774 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

775 i‡(
p
 =
NULL
) {

776  
NGX_ERROR
;

779 *
p
 = 
ödex
;

782 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

783 (
ngx_hâp_s¸ùt_v¨_code_t
), 
NULL
);

784 i‡(
code
 =
NULL
) {

785  
NGX_ERROR
;

788 
code
->codê(
ngx_hâp_s¸ùt_code_±
) (*)

789 
ngx_hâp_s¸ùt_c›y_v¨_Àn_code
;

790 
code
->
ödex
 = (
uöçå_t
) index;

792 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

793 (
ngx_hâp_s¸ùt_v¨_code_t
),

794 &
sc
->
maö
);

795 i‡(
code
 =
NULL
) {

796  
NGX_ERROR
;

799 
code
->codê
ngx_hâp_s¸ùt_c›y_v¨_code
;

800 
code
->
ödex
 = (
uöçå_t
) index;

802  
NGX_OK
;

803 
	}
}

806 
size_t


807 
	$ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

809 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

810 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

812 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

814 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

816 i‡(
e
->
Êushed
) {

817 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

820 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

823 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

824  
vÆue
->
Àn
;

828 
	}
}

832 
	$ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

834 
u_ch¨
 *
p
;

835 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

836 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

838 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

840 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

842 i‡(!
e
->
skù
) {

844 i‡(
e
->
Êushed
) {

845 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

848 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

851 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

852 
p
 = 
e
->
pos
;

853 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

855 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
,

856 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

857 "hâ∞s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

860 
	}
}

863 
ngx_öt_t


864 
	$ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

866 
uöçå_t
 *
code
;

868 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

869 i‡(
code
 =
NULL
) {

870  
NGX_ERROR
;

873 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_m¨k_¨gs_code
;

875 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
), &sc->
maö
);

876 i‡(
code
 =
NULL
) {

877  
NGX_ERROR
;

880 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_°¨t_¨gs_code
;

882  
NGX_OK
;

883 
	}
}

886 
size_t


887 
	$ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

889 
e
->
is_¨gs
 = 1;

890 
e
->
ù
 +(
uöçå_t
);

893 
	}
}

897 
	$ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

899 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

902 
e
->
is_¨gs
 = 1;

903 
e
->
¨gs
 =É->
pos
;

904 
e
->
ù
 +(
uöçå_t
);

905 
	}
}

908 #i‡(
NGX_PCRE
)

911 
	$ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

913 
size_t
 
Àn
;

914 
ngx_öt_t
 
rc
;

915 
ngx_uöt_t
 
n
;

916 
ngx_hâp_ªque°_t
 *
r
;

917 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

918 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

919 
ngx_hâp_s¸ùt_ªgex_code_t
 *
code
;

921 
code
 = (
ngx_hâp_s¸ùt_ªgex_code_t
 *Ë
e
->
ù
;

923 
r
 = 
e
->
ªque°
;

925 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

926 "hâ∞s¸ùàªgex: \"%V\"", &
code
->
«me
);

928 i‡(
code
->
uri
) {

929 
e
->
löe
 = 
r
->
uri
;

931 
e
->
•
--;

932 
e
->
löe
.
Àn
 =É->
•
->len;

933 
e
->
löe
.
d©a
 =É->
•
->data;

936 
rc
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
code
->
ªgex
, &
e
->
löe
);

938 i‡(
rc
 =
NGX_DECLINED
) {

939 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

940 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

942 &
code
->
«me
, &
e
->
löe
);

945 
r
->
nˇ±uªs
 = 0;

947 i‡(
code
->
ã°
) {

948 i‡(
code
->
√g©ive_ã°
) {

949 
e
->
•
->
Àn
 = 1;

950 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

953 
e
->
•
->
Àn
 = 0;

954 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

957 
e
->
•
++;

959 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

963 
e
->
ù
 +
code
->
√xt
;

967 i‡(
rc
 =
NGX_ERROR
) {

968 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

969 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

973 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

974 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

975 "\"%V\" m©che†\"%V\"", &
code
->
«me
, &
e
->
löe
);

978 i‡(
code
->
ã°
) {

979 i‡(
code
->
√g©ive_ã°
) {

980 
e
->
•
->
Àn
 = 0;

981 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

984 
e
->
•
->
Àn
 = 1;

985 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

988 
e
->
•
++;

990 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

994 i‡(
code
->
°©us
) {

995 
e
->
°©us
 = 
code
->status;

997 i‡(!
code
->
ªdúe˘
) {

998 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1003 i‡(
code
->
uri
) {

1004 
r
->
öã∫Æ
 = 1;

1005 
r
->
vÆid_u≈¨£d_uri
 = 0;

1007 i‡(
code
->
bªak_cy˛e
) {

1008 
r
->
vÆid_loˇti⁄
 = 0;

1009 
r
->
uri_ch™ged
 = 0;

1012 
r
->
uri_ch™ged
 = 1;

1016 i‡(
code
->
Àngths
 =
NULL
) {

1017 
e
->
buf
.
Àn
 = 
code
->
size
;

1019 i‡(
code
->
uri
) {

1020 i‡(
r
->
nˇ±uªs
 && (r->
quŸed_uri
 ||Ñ->
∂us_ö_uri
)) {

1021 
e
->
buf
.
Àn
 +2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.len,

1022 
NGX_ESCAPE_ARGS
);

1026 
n
 = 2;Ç < 
r
->
nˇ±uªs
;Ç += 2) {

1027 
e
->
buf
.
Àn
 +
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1031 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1033 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1034 
À
.
löe
 = 
e
->line;

1035 
À
.
ªque°
 = 
r
;

1036 
À
.
quŸe
 = 
code
->
ªdúe˘
;

1038 
Àn
 = 0;

1040 *(
uöçå_t
 *Ë
À
.
ù
) {

1041 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1042 
Àn
 +
	`lcode
(&
À
);

1045 
e
->
buf
.
Àn
 =Üen;

1048 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1049 
e
->
buf
.
Àn
 +
r
->
¨gs
.len + 1;

1052 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,É->buf.
Àn
);

1053 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1054 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1055 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1059 
e
->
quŸe
 = 
code
->
ªdúe˘
;

1061 
e
->
pos
 =É->
buf
.
d©a
;

1063 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

1064 
	}
}

1068 
	$ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1070 
u_ch¨
 *
d°
, *
§c
;

1071 
ngx_hâp_ªque°_t
 *
r
;

1072 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
code
;

1074 
code
 = (
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *Ë
e
->
ù
;

1076 
r
 = 
e
->
ªque°
;

1078 
e
->
quŸe
 = 0;

1080 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1083 i‡(
code
->
ªdúe˘
) {

1085 
d°
 = 
e
->
buf
.
d©a
;

1086 
§c
 = 
e
->
buf
.
d©a
;

1088 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
e
->
pos
 -É->
buf
.
d©a
,

1089 
NGX_UNESCAPE_REDIRECT
);

1091 i‡(
§c
 < 
e
->
pos
) {

1092 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
e
->
pos
 - src);

1095 
e
->
pos
 = 
d°
;

1097 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1098 *
e
->
pos
++ = (
u_ch¨
Ë(
code
->
¨gs
 ? '&' : '?');

1099 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1102 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1104 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1105 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1106 "ªwrôã¿ªdúe˘: \"%V\"", &
e
->
buf
);

1109 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1111 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1112 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1113 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1114 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1118 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1119 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1120 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
e
->
buf
;

1122 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1126 i‡(
e
->
¨gs
) {

1127 
e
->
buf
.
Àn
 =É->
¨gs
 -É->buf.
d©a
;

1129 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1130 *
e
->
pos
++ = '&';

1131 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1134 
r
->
¨gs
.
Àn
 = 
e
->
pos
 -É->args;

1135 
r
->
¨gs
.
d©a
 = 
e
->args;

1137 
e
->
¨gs
 = 
NULL
;

1140 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1142 i‡(!
code
->
add_¨gs
) {

1143 
r
->
¨gs
.
Àn
 = 0;

1147 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1148 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1150 &
e
->
buf
, &
r
->
¨gs
);

1153 i‡(
code
->
uri
) {

1154 
r
->
uri
 = 
e
->
buf
;

1156 i‡(
r
->
uri
.
Àn
 == 0) {

1157 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1159 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1160 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1164 
	`ngx_hâp_£t_exãn
(
r
);

1167 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1168 
	}
}

1171 
ngx_öt_t


1172 
	$ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
)

1174 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1176 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1177 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1178 
NULL
);

1179 i‡(
code
 =
NULL
) {

1180  
NGX_ERROR
;

1183 
code
->codê(
ngx_hâp_s¸ùt_code_±
) (*)

1184 
ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
;

1185 
code
->
n
 = 2 *Ç;

1188 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1189 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1190 &
sc
->
maö
);

1191 i‡(
code
 =
NULL
) {

1192  
NGX_ERROR
;

1195 
code
->codê
ngx_hâp_s¸ùt_c›y_ˇ±uª_code
;

1196 
code
->
n
 = 2 *Ç;

1198 i‡(
sc
->
nˇ±uªs
 < 
n
) {

1199 
sc
->
nˇ±uªs
 = 
n
;

1202  
NGX_OK
;

1203 
	}
}

1206 
size_t


1207 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1209 *
ˇp
;

1210 
u_ch¨
 *
p
;

1211 
ngx_uöt_t
 
n
;

1212 
ngx_hâp_ªque°_t
 *
r
;

1213 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1215 
r
 = 
e
->
ªque°
;

1217 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1219 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1221 
n
 = 
code
->n;

1223 i‡(
n
 < 
r
->
nˇ±uªs
) {

1225 
ˇp
 = 
r
->
ˇ±uªs
;

1227 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1228 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1230 
p
 = 
r
->
ˇ±uªs_d©a
;

1232  
ˇp
[
n
 + 1] - cap[n]

1233 + 2 * 
	`ngx_esˇ≥_uri
(
NULL
, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n],

1234 
NGX_ESCAPE_ARGS
);

1236  
ˇp
[
n
 + 1] - cap[n];

1241 
	}
}

1245 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1247 *
ˇp
;

1248 
u_ch¨
 *
p
, *
pos
;

1249 
ngx_uöt_t
 
n
;

1250 
ngx_hâp_ªque°_t
 *
r
;

1251 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1253 
r
 = 
e
->
ªque°
;

1255 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1257 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1259 
n
 = 
code
->n;

1261 
pos
 = 
e
->pos;

1263 i‡(
n
 < 
r
->
nˇ±uªs
) {

1265 
ˇp
 = 
r
->
ˇ±uªs
;

1266 
p
 = 
r
->
ˇ±uªs_d©a
;

1268 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1269 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1271 
e
->
pos
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’os, &
p
[
ˇp
[
n
]],

1272 
ˇp
[
n
 + 1] - cap[n],

1273 
NGX_ESCAPE_ARGS
);

1275 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

1279 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1280 "hâ∞s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

1281 
	}
}

1286 
ngx_öt_t


1287 
	$ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

1289 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1291 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1292 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1293 
NULL
);

1294 i‡(
code
 =
NULL
) {

1295  
NGX_ERROR
;

1298 
code
->codê(
ngx_hâp_s¸ùt_code_±
) (*)

1299 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
;

1300 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1302 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1303 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1304 &
sc
->
maö
);

1305 i‡(
code
 =
NULL
) {

1306  
NGX_ERROR
;

1309 
code
->codê
ngx_hâp_s¸ùt_fuŒ_«me_code
;

1310 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1312  
NGX_OK
;

1313 
	}
}

1316 
size_t


1317 
	$ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1319 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1321 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1323 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1325  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

1326 
ngx_cy˛e
->
¥efix
.
Àn
;

1327 
	}
}

1331 
	$ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1333 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1335 
ngx_°r_t
 
vÆue
, *
¥efix
;

1337 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1339 
vÆue
.
d©a
 = 
e
->
buf
.data;

1340 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

1342 
¥efix
 = 
code
->
c⁄f_¥efix
 ? (
ngx_°r_t
 *Ë&
ngx_cy˛e
->conf_prefix:

1343 (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
;

1345 i‡(
	`ngx_gë_fuŒ_«me
(
e
->
ªque°
->
poﬁ
, 
¥efix
, &
vÆue
Ë!
NGX_OK
) {

1346 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1347 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1351 
e
->
buf
 = 
vÆue
;

1353 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1354 "hâ∞s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

1356 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1357 
	}
}

1361 
	$ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1363 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
code
;

1365 
code
 = (
ngx_hâp_s¸ùt_ªtu∫_code_t
 *Ë
e
->
ù
;

1367 i‡(
code
->
°©us
 < 
NGX_HTTP_BAD_REQUEST


1368 || 
code
->
ãxt
.
vÆue
.
Àn


1369 || 
code
->
ãxt
.
Àngths
)

1371 
e
->
°©us
 = 
	`ngx_hâp_£nd_ª•⁄£
”->
ªque°
, 
code
->°©us, 
NULL
,

1372 &
code
->
ãxt
);

1374 
e
->
°©us
 = 
code
->status;

1377 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1378 
	}
}

1382 
	$ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1384 
e
->
ªque°
->
uri_ch™ged
 = 0;

1386 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1387 
	}
}

1391 
	$ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1393 
ngx_hâp_s¸ùt_if_code_t
 *
code
;

1395 
code
 = (
ngx_hâp_s¸ùt_if_code_t
 *Ë
e
->
ù
;

1397 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1400 
e
->
•
--;

1402 i‡(
e
->
•
->
Àn
 && (e->•->À¿!1 ||É->•->
d©a
[0] != '0')) {

1403 i‡(
code
->
loc_c⁄f
) {

1404 
e
->
ªque°
->
loc_c⁄f
 = 
code
->loc_conf;

1405 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
e
->
ªque°
);

1408 
e
->
ù
 +(
ngx_hâp_s¸ùt_if_code_t
);

1412 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1415 
e
->
ù
 +
code
->
√xt
;

1416 
	}
}

1420 
	$ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1422 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1424 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1427 
e
->
•
--;

1428 
vÆ
 = 
e
->
•
;

1429 
ªs
 = 
e
->
•
 - 1;

1431 
e
->
ù
 +(
uöçå_t
);

1433 i‡(
vÆ
->
Àn
 =
ªs
->len

1434 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1436 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1440 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1443 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1444 
	}
}

1448 
	$ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1450 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1452 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1455 
e
->
•
--;

1456 
vÆ
 = 
e
->
•
;

1457 
ªs
 = 
e
->
•
 - 1;

1459 
e
->
ù
 +(
uöçå_t
);

1461 i‡(
vÆ
->
Àn
 =
ªs
->len

1462 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1464 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1467 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1471 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1472 
	}
}

1476 
	$ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1478 
ngx_°r_t
 
∑th
;

1479 
ngx_hâp_ªque°_t
 *
r
;

1480 
ngx_›í_fûe_öfo_t
 
of
;

1481 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1482 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1483 
ngx_hâp_s¸ùt_fûe_code_t
 *
code
;

1485 
vÆue
 = 
e
->
•
 - 1;

1487 
code
 = (
ngx_hâp_s¸ùt_fûe_code_t
 *Ë
e
->
ù
;

1488 
e
->
ù
 +(
ngx_hâp_s¸ùt_fûe_code_t
);

1490 
∑th
.
Àn
 = 
vÆue
->len - 1;

1491 
∑th
.
d©a
 = 
vÆue
->data;

1493 
r
 = 
e
->
ªque°
;

1495 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1496 "hâ∞s¸ùàfûê› %∞\"%V\"", (*Ë
code
->
›
, &
∑th
);

1498 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1500 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1502 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1503 
of
.
dúe˘io
 = 
˛cf
->directio;

1504 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1505 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1506 
of
.
ã°_⁄ly
 = 1;

1507 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1508 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1510 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1511 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1512 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1516 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1517 !
NGX_OK
)

1519 i‡(
of
.
îr
 == 0) {

1520 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1521 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1525 i‡(
of
.
îr
 !
NGX_ENOENT


1526 && 
of
.
îr
 !
NGX_ENOTDIR


1527 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1529 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1530 "%†\"%s\" faûed", 
of
.
Áûed
, 
vÆue
->
d©a
);

1533 
code
->
›
) {

1535 
ngx_hâp_s¸ùt_fûe_∂aö
:

1536 
ngx_hâp_s¸ùt_fûe_dú
:

1537 
ngx_hâp_s¸ùt_fûe_exi°s
:

1538 
ngx_hâp_s¸ùt_fûe_exec
:

1539 
Ál£_vÆue
;

1541 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1542 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1543 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1544 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1545 
åue_vÆue
;

1548 
Ál£_vÆue
;

1551 
code
->
›
) {

1552 
ngx_hâp_s¸ùt_fûe_∂aö
:

1553 i‡(
of
.
is_fûe
) {

1554 
åue_vÆue
;

1556 
Ál£_vÆue
;

1558 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1559 i‡(
of
.
is_fûe
) {

1560 
Ál£_vÆue
;

1562 
åue_vÆue
;

1564 
ngx_hâp_s¸ùt_fûe_dú
:

1565 i‡(
of
.
is_dú
) {

1566 
åue_vÆue
;

1568 
Ál£_vÆue
;

1570 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1571 i‡(
of
.
is_dú
) {

1572 
Ál£_vÆue
;

1574 
åue_vÆue
;

1576 
ngx_hâp_s¸ùt_fûe_exi°s
:

1577 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1578 
åue_vÆue
;

1580 
Ál£_vÆue
;

1582 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1583 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1584 
Ál£_vÆue
;

1586 
åue_vÆue
;

1588 
ngx_hâp_s¸ùt_fûe_exec
:

1589 i‡(
of
.
is_exec
) {

1590 
åue_vÆue
;

1592 
Ál£_vÆue
;

1594 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1595 i‡(
of
.
is_exec
) {

1596 
Ál£_vÆue
;

1598 
åue_vÆue
;

1601 
Ál£_vÆue
:

1603 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1606 *
vÆue
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1609 
åue_vÆue
:

1611 *
vÆue
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1613 
	}
}

1617 
	$ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1619 
size_t
 
Àn
;

1620 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

1621 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1622 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
code
;

1624 
code
 = (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *Ë
e
->
ù
;

1626 
e
->
ù
 +(
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
);

1628 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1631 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1633 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1634 
À
.
löe
 = 
e
->line;

1635 
À
.
ªque°
 = 
e
->request;

1636 
À
.
quŸe
 = 
e
->quote;

1638 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1639 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1642 
e
->
buf
.
Àn
 =Üen;

1643 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
”->
ªque°
->
poﬁ
, 
Àn
);

1644 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1645 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1646 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1650 
e
->
pos
 =É->
buf
.
d©a
;

1652 
e
->
•
->
Àn
 =É->
buf
.len;

1653 
e
->
•
->
d©a
 =É->
buf
.data;

1654 
e
->
•
++;

1655 
	}
}

1659 
	$ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1661 
ngx_hâp_s¸ùt_vÆue_code_t
 *
code
;

1663 
code
 = (
ngx_hâp_s¸ùt_vÆue_code_t
 *Ë
e
->
ù
;

1665 
e
->
ù
 +(
ngx_hâp_s¸ùt_vÆue_code_t
);

1667 
e
->
•
->
Àn
 = 
code
->
ãxt_Àn
;

1668 
e
->
•
->
d©a
 = (
u_ch¨
 *Ë
code
->
ãxt_d©a
;

1670 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1671 "hâ∞s¸ùàvÆue: \"%v\"", 
e
->
•
);

1673 
e
->
•
++;

1674 
	}
}

1678 
	$ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1680 
ngx_hâp_ªque°_t
 *
r
;

1681 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1683 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1685 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1687 
r
 = 
e
->
ªque°
;

1689 
e
->
•
--;

1691 
r
->
v¨übÀs
[
code
->
ödex
].
Àn
 = 
e
->
•
->len;

1692 
r
->
v¨übÀs
[
code
->
ödex
].
vÆid
 = 1;

1693 
r
->
v¨übÀs
[
code
->
ödex
].
no_ˇchóbÀ
 = 0;

1694 
r
->
v¨übÀs
[
code
->
ödex
].
nŸ_found
 = 0;

1695 
r
->
v¨übÀs
[
code
->
ödex
].
d©a
 = 
e
->
•
->data;

1697 #i‡(
NGX_DEBUG
)

1699 
ngx_hâp_v¨übÀ_t
 *
v
;

1700 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1702 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1704 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1707 "hâ∞s¸ùà£à$%V", &
v
[
code
->
ödex
].
«me
);

1710 
	}
}

1714 
	$ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1716 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
code
;

1718 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1721 
code
 = (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *Ë
e
->
ù
;

1723 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
);

1725 
e
->
•
--;

1727 
code
->
	`h™dÀr
(
e
->
ªque°
,É->
•
, code->
d©a
);

1728 
	}
}

1732 
	$ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1734 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1735 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1737 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1740 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1742 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1744 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

1746 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

1747 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1748 "hâ∞s¸ùàv¨: \"%v\"", 
vÆue
);

1750 *
e
->
•
 = *
vÆue
;

1751 
e
->
•
++;

1756 *
e
->
•
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1757 
e
->
•
++;

1758 
	}
}

1762 
	$ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1764 
e
->
ù
 +(
uöçå_t
);

1765 
	}
}

	@src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
ã°
:1;

125 
√g©ive_ã°
:1;

126 
uri
:1;

127 
¨gs
:1;

130 
add_¨gs
:1;

132 
ªdúe˘
:1;

133 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uri
:1;

143 
¨gs
:1;

146 
add_¨gs
:1;

148 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@src/http/ngx_http_special_response.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
);

16 
ngx_öt_t
 
ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
);

18 
ngx_öt_t
 
ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
);

21 
u_ch¨
 
	gngx_hâp_îr‹_fuŒ_èû
[] =

22 "<hr><˚¡î>" 
NGINX_VER
 "</˚¡î>" 
CRLF


23 "</body>" 
CRLF


24 "</html>" 
CRLF


28 
u_ch¨
 
	gngx_hâp_îr‹_buûd_èû
[] =

29 "<hr><˚¡î>" 
NGINX_VER_BUILD
 "</˚¡î>" 
CRLF


30 "</body>" 
CRLF


31 "</html>" 
CRLF


35 
u_ch¨
 
	gngx_hâp_îr‹_èû
[] =

36 "<hr><˚¡î>ngöx</˚¡î>" 
CRLF


37 "</body>" 
CRLF


38 "</html>" 
CRLF


42 
u_ch¨
 
	gngx_hâp_msõ_∑ddög
[] =

43 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


44 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


45 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


46 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


47 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


48 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


52 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_hód
[] =

56 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_èû
[] =

57 "\"></hód><body></body></html>" 
CRLF
;

60 
	gngx_hâp_îr‹_301_∑ge
[] =

61 "<html>" 
CRLF


62 "<hód><tôÀ>301 Moved Pîm™íéy</tôÀ></hód>" 
CRLF


63 "<body bgcﬁ‹=\"whôe\">" 
CRLF


64 "<˚¡î><h1>301 Moved Pîm™íéy</h1></˚¡î>" 
CRLF


68 
	gngx_hâp_îr‹_302_∑ge
[] =

69 "<html>" 
CRLF


70 "<hód><tôÀ>302 Found</tôÀ></hód>" 
CRLF


71 "<body bgcﬁ‹=\"whôe\">" 
CRLF


72 "<˚¡î><h1>302 Found</h1></˚¡î>" 
CRLF


76 
	gngx_hâp_îr‹_303_∑ge
[] =

77 "<html>" 
CRLF


78 "<hód><tôÀ>303 Sì Othî</tôÀ></hód>" 
CRLF


79 "<body bgcﬁ‹=\"whôe\">" 
CRLF


80 "<˚¡î><h1>303 Sì Othî</h1></˚¡î>" 
CRLF


84 
	gngx_hâp_îr‹_307_∑ge
[] =

85 "<html>" 
CRLF


86 "<hód><tôÀ>307 Temp‹¨y Redúe˘</tôÀ></hód>" 
CRLF


87 "<body bgcﬁ‹=\"whôe\">" 
CRLF


88 "<˚¡î><h1>307 Temp‹¨y Redúe˘</h1></˚¡î>" 
CRLF


92 
	gngx_hâp_îr‹_308_∑ge
[] =

93 "<html>" 
CRLF


94 "<hód><tôÀ>308 Pîm™íàRedúe˘</tôÀ></hód>" 
CRLF


95 "<body bgcﬁ‹=\"whôe\">" 
CRLF


96 "<˚¡î><h1>308 Pîm™íàRedúe˘</h1></˚¡î>" 
CRLF


100 
	gngx_hâp_îr‹_400_∑ge
[] =

101 "<html>" 
CRLF


102 "<hód><tôÀ>400 Bad Reque°</tôÀ></hód>" 
CRLF


103 "<body bgcﬁ‹=\"whôe\">" 
CRLF


104 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


108 
	gngx_hâp_îr‹_401_∑ge
[] =

109 "<html>" 
CRLF


110 "<hód><tôÀ>401 Auth‹iz©i⁄ Requúed</tôÀ></hód>" 
CRLF


111 "<body bgcﬁ‹=\"whôe\">" 
CRLF


112 "<˚¡î><h1>401 Auth‹iz©i⁄ Requúed</h1></˚¡î>" 
CRLF


116 
	gngx_hâp_îr‹_402_∑ge
[] =

117 "<html>" 
CRLF


118 "<hód><tôÀ>402 PaymíàRequúed</tôÀ></hód>" 
CRLF


119 "<body bgcﬁ‹=\"whôe\">" 
CRLF


120 "<˚¡î><h1>402 PaymíàRequúed</h1></˚¡î>" 
CRLF


124 
	gngx_hâp_îr‹_403_∑ge
[] =

125 "<html>" 
CRLF


126 "<hód><tôÀ>403 F‹biddí</tôÀ></hód>" 
CRLF


127 "<body bgcﬁ‹=\"whôe\">" 
CRLF


128 "<˚¡î><h1>403 F‹biddí</h1></˚¡î>" 
CRLF


132 
	gngx_hâp_îr‹_404_∑ge
[] =

133 "<html>" 
CRLF


134 "<hód><tôÀ>404 NŸ Found</tôÀ></hód>" 
CRLF


135 "<body bgcﬁ‹=\"whôe\">" 
CRLF


136 "<˚¡î><h1>404 NŸ Found</h1></˚¡î>" 
CRLF


140 
	gngx_hâp_îr‹_405_∑ge
[] =

141 "<html>" 
CRLF


142 "<hód><tôÀ>405 NŸ AŒowed</tôÀ></hód>" 
CRLF


143 "<body bgcﬁ‹=\"whôe\">" 
CRLF


144 "<˚¡î><h1>405 NŸ AŒowed</h1></˚¡î>" 
CRLF


148 
	gngx_hâp_îr‹_406_∑ge
[] =

149 "<html>" 
CRLF


150 "<hód><tôÀ>406 NŸ Ac˚±abÀ</tôÀ></hód>" 
CRLF


151 "<body bgcﬁ‹=\"whôe\">" 
CRLF


152 "<˚¡î><h1>406 NŸ Ac˚±abÀ</h1></˚¡î>" 
CRLF


156 
	gngx_hâp_îr‹_408_∑ge
[] =

157 "<html>" 
CRLF


158 "<hód><tôÀ>408 Reque° Time-out</tôÀ></hód>" 
CRLF


159 "<body bgcﬁ‹=\"whôe\">" 
CRLF


160 "<˚¡î><h1>408 Reque° Time-out</h1></˚¡î>" 
CRLF


164 
	gngx_hâp_îr‹_409_∑ge
[] =

165 "<html>" 
CRLF


166 "<hód><tôÀ>409 C⁄Êi˘</tôÀ></hód>" 
CRLF


167 "<body bgcﬁ‹=\"whôe\">" 
CRLF


168 "<˚¡î><h1>409 C⁄Êi˘</h1></˚¡î>" 
CRLF


172 
	gngx_hâp_îr‹_410_∑ge
[] =

173 "<html>" 
CRLF


174 "<hód><tôÀ>410 G⁄e</tôÀ></hód>" 
CRLF


175 "<body bgcﬁ‹=\"whôe\">" 
CRLF


176 "<˚¡î><h1>410 G⁄e</h1></˚¡î>" 
CRLF


180 
	gngx_hâp_îr‹_411_∑ge
[] =

181 "<html>" 
CRLF


182 "<hód><tôÀ>411 Lígth Requúed</tôÀ></hód>" 
CRLF


183 "<body bgcﬁ‹=\"whôe\">" 
CRLF


184 "<˚¡î><h1>411 Lígth Requúed</h1></˚¡î>" 
CRLF


188 
	gngx_hâp_îr‹_412_∑ge
[] =

189 "<html>" 
CRLF


190 "<hód><tôÀ>412 Pªc⁄dôi⁄ Faûed</tôÀ></hód>" 
CRLF


191 "<body bgcﬁ‹=\"whôe\">" 
CRLF


192 "<˚¡î><h1>412 Pªc⁄dôi⁄ Faûed</h1></˚¡î>" 
CRLF


196 
	gngx_hâp_îr‹_413_∑ge
[] =

197 "<html>" 
CRLF


198 "<hód><tôÀ>413 Reque° E¡ôy ToÿL¨ge</tôÀ></hód>" 
CRLF


199 "<body bgcﬁ‹=\"whôe\">" 
CRLF


200 "<˚¡î><h1>413 Reque° E¡ôy ToÿL¨ge</h1></˚¡î>" 
CRLF


204 
	gngx_hâp_îr‹_414_∑ge
[] =

205 "<html>" 
CRLF


206 "<hód><tôÀ>414 Reque°-URI ToÿL¨ge</tôÀ></hód>" 
CRLF


207 "<body bgcﬁ‹=\"whôe\">" 
CRLF


208 "<˚¡î><h1>414 Reque°-URI ToÿL¨ge</h1></˚¡î>" 
CRLF


212 
	gngx_hâp_îr‹_415_∑ge
[] =

213 "<html>" 
CRLF


214 "<hód><tôÀ>415 Unsuµ‹ãd Medü Ty≥</tôÀ></hód>" 
CRLF


215 "<body bgcﬁ‹=\"whôe\">" 
CRLF


216 "<˚¡î><h1>415 Unsuµ‹ãd Medü Ty≥</h1></˚¡î>" 
CRLF


220 
	gngx_hâp_îr‹_416_∑ge
[] =

221 "<html>" 
CRLF


222 "<hód><tôÀ>416 Reque°ed R™gêNŸ S©isfübÀ</tôÀ></hód>" 
CRLF


223 "<body bgcﬁ‹=\"whôe\">" 
CRLF


224 "<˚¡î><h1>416 Reque°ed R™gêNŸ S©isfübÀ</h1></˚¡î>" 
CRLF


228 
	gngx_hâp_îr‹_421_∑ge
[] =

229 "<html>" 
CRLF


230 "<hód><tôÀ>421 Misdúe˘ed Reque°</tôÀ></hód>" 
CRLF


231 "<body bgcﬁ‹=\"whôe\">" 
CRLF


232 "<˚¡î><h1>421 Misdúe˘ed Reque°</h1></˚¡î>" 
CRLF


236 
	gngx_hâp_îr‹_429_∑ge
[] =

237 "<html>" 
CRLF


238 "<hód><tôÀ>429 ToÿM™y Reque°s</tôÀ></hód>" 
CRLF


239 "<body bgcﬁ‹=\"whôe\">" 
CRLF


240 "<˚¡î><h1>429 ToÿM™y Reque°s</h1></˚¡î>" 
CRLF


244 
	gngx_hâp_îr‹_494_∑ge
[] =

245 "<html>" 
CRLF


247 
CRLF


248 "<body bgcﬁ‹=\"whôe\">" 
CRLF


249 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


250 "<˚¡î>Reque° Hódî O∏Cookõ ToÿL¨ge</˚¡î>" 
CRLF


254 
	gngx_hâp_îr‹_495_∑ge
[] =

255 "<html>" 
CRLF


257 
CRLF


258 "<body bgcﬁ‹=\"whôe\">" 
CRLF


259 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


260 "<˚¡î>ThêSSL cîtifiˇãÉº‹</˚¡î>" 
CRLF


264 
	gngx_hâp_îr‹_496_∑ge
[] =

265 "<html>" 
CRLF


267 
CRLF


268 "<body bgcﬁ‹=\"whôe\">" 
CRLF


269 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


270 "<˚¡î>Nÿªquúed SSL cîtifiˇã wa†£¡</˚¡î>" 
CRLF


274 
	gngx_hâp_îr‹_497_∑ge
[] =

275 "<html>" 
CRLF


277 
CRLF


278 "<body bgcﬁ‹=\"whôe\">" 
CRLF


279 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


280 "<˚¡î>Thê∂aö HTTPÑeque° wa†£¡ÅÿHTTPSÖ‹t</˚¡î>" 
CRLF


284 
	gngx_hâp_îr‹_500_∑ge
[] =

285 "<html>" 
CRLF


286 "<hód><tôÀ>500 I¡î«»Sîvî Eº‹</tôÀ></hód>" 
CRLF


287 "<body bgcﬁ‹=\"whôe\">" 
CRLF


288 "<˚¡î><h1>500 I¡î«»Sîvî Eº‹</h1></˚¡î>" 
CRLF


292 
	gngx_hâp_îr‹_501_∑ge
[] =

293 "<html>" 
CRLF


294 "<hód><tôÀ>501 NŸ Im∂emíãd</tôÀ></hód>" 
CRLF


295 "<body bgcﬁ‹=\"whôe\">" 
CRLF


296 "<˚¡î><h1>501 NŸ Im∂emíãd</h1></˚¡î>" 
CRLF


300 
	gngx_hâp_îr‹_502_∑ge
[] =

301 "<html>" 
CRLF


302 "<hód><tôÀ>502 Bad G©eway</tôÀ></hód>" 
CRLF


303 "<body bgcﬁ‹=\"whôe\">" 
CRLF


304 "<˚¡î><h1>502 Bad G©eway</h1></˚¡î>" 
CRLF


308 
	gngx_hâp_îr‹_503_∑ge
[] =

309 "<html>" 
CRLF


310 "<hód><tôÀ>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</tôÀ></hód>" 
CRLF


311 "<body bgcﬁ‹=\"whôe\">" 
CRLF


312 "<˚¡î><h1>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</h1></˚¡î>" 
CRLF


316 
	gngx_hâp_îr‹_504_∑ge
[] =

317 "<html>" 
CRLF


318 "<hód><tôÀ>504 G©eway Time-out</tôÀ></hód>" 
CRLF


319 "<body bgcﬁ‹=\"whôe\">" 
CRLF


320 "<˚¡î><h1>504 G©eway Time-out</h1></˚¡î>" 
CRLF


324 
	gngx_hâp_îr‹_505_∑ge
[] =

325 "<html>" 
CRLF


326 "<hód><tôÀ>505 HTTP Vîsi⁄ NŸ Suµ‹ãd</tôÀ></hód>" 
CRLF


327 "<body bgcﬁ‹=\"whôe\">" 
CRLF


328 "<˚¡î><h1>505 HTTP Vîsi⁄ NŸ Suµ‹ãd</h1></˚¡î>" 
CRLF


332 
	gngx_hâp_îr‹_507_∑ge
[] =

333 "<html>" 
CRLF


334 "<hód><tôÀ>507 Insufficõ¡ St‹age</tôÀ></hód>" 
CRLF


335 "<body bgcﬁ‹=\"whôe\">" 
CRLF


336 "<˚¡î><h1>507 Insufficõ¡ St‹age</h1></˚¡î>" 
CRLF


340 
ngx_°r_t
 
	gngx_hâp_îr‹_∑ges
[] = {

342 
ngx_nuŒ_°rög
,

344 
	#NGX_HTTP_LAST_2XX
 202

	)

345 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 201)

	)

348 
ngx_°rög
(
ngx_hâp_îr‹_301_∑ge
),

349 
ngx_°rög
(
ngx_hâp_îr‹_302_∑ge
),

350 
ngx_°rög
(
ngx_hâp_îr‹_303_∑ge
),

351 
ngx_nuŒ_°rög
,

352 
ngx_nuŒ_°rög
,

353 
ngx_nuŒ_°rög
,

354 
ngx_°rög
(
ngx_hâp_îr‹_307_∑ge
),

355 
ngx_°rög
(
ngx_hâp_îr‹_308_∑ge
),

357 
	#NGX_HTTP_LAST_3XX
 309

	)

358 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

360 
ngx_°rög
(
ngx_hâp_îr‹_400_∑ge
),

361 
ngx_°rög
(
ngx_hâp_îr‹_401_∑ge
),

362 
ngx_°rög
(
ngx_hâp_îr‹_402_∑ge
),

363 
ngx_°rög
(
ngx_hâp_îr‹_403_∑ge
),

364 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

365 
ngx_°rög
(
ngx_hâp_îr‹_405_∑ge
),

366 
ngx_°rög
(
ngx_hâp_îr‹_406_∑ge
),

367 
ngx_nuŒ_°rög
,

368 
ngx_°rög
(
ngx_hâp_îr‹_408_∑ge
),

369 
ngx_°rög
(
ngx_hâp_îr‹_409_∑ge
),

370 
ngx_°rög
(
ngx_hâp_îr‹_410_∑ge
),

371 
ngx_°rög
(
ngx_hâp_îr‹_411_∑ge
),

372 
ngx_°rög
(
ngx_hâp_îr‹_412_∑ge
),

373 
ngx_°rög
(
ngx_hâp_îr‹_413_∑ge
),

374 
ngx_°rög
(
ngx_hâp_îr‹_414_∑ge
),

375 
ngx_°rög
(
ngx_hâp_îr‹_415_∑ge
),

376 
ngx_°rög
(
ngx_hâp_îr‹_416_∑ge
),

377 
ngx_nuŒ_°rög
,

378 
ngx_nuŒ_°rög
,

379 
ngx_nuŒ_°rög
,

380 
ngx_nuŒ_°rög
,

381 
ngx_°rög
(
ngx_hâp_îr‹_421_∑ge
),

382 
ngx_nuŒ_°rög
,

383 
ngx_nuŒ_°rög
,

384 
ngx_nuŒ_°rög
,

385 
ngx_nuŒ_°rög
,

386 
ngx_nuŒ_°rög
,

387 
ngx_nuŒ_°rög
,

388 
ngx_nuŒ_°rög
,

389 
ngx_°rög
(
ngx_hâp_îr‹_429_∑ge
),

391 
	#NGX_HTTP_LAST_4XX
 430

	)

392 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

394 
ngx_°rög
(
ngx_hâp_îr‹_494_∑ge
),

395 
ngx_°rög
(
ngx_hâp_îr‹_495_∑ge
),

396 
ngx_°rög
(
ngx_hâp_îr‹_496_∑ge
),

397 
ngx_°rög
(
ngx_hâp_îr‹_497_∑ge
),

398 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

399 
ngx_nuŒ_°rög
,

401 
ngx_°rög
(
ngx_hâp_îr‹_500_∑ge
),

402 
ngx_°rög
(
ngx_hâp_îr‹_501_∑ge
),

403 
ngx_°rög
(
ngx_hâp_îr‹_502_∑ge
),

404 
ngx_°rög
(
ngx_hâp_îr‹_503_∑ge
),

405 
ngx_°rög
(
ngx_hâp_îr‹_504_∑ge
),

406 
ngx_°rög
(
ngx_hâp_îr‹_505_∑ge
),

407 
ngx_nuŒ_°rög
,

408 
ngx_°rög
(
ngx_hâp_îr‹_507_∑ge
)

410 
	#NGX_HTTP_LAST_5XX
 508

	)

415 
ngx_öt_t


416 
	$ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
)

418 
ngx_uöt_t
 
i
, 
îr
;

419 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

420 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

422 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

424 
îr‹
, &
r
->
uri
, &r->
¨gs
);

426 
r
->
îr_°©us
 = 
îr‹
;

428 i‡(
r
->
kì∑live
) {

429 
îr‹
) {

430 
NGX_HTTP_BAD_REQUEST
:

431 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
:

432 
NGX_HTTP_REQUEST_URI_TOO_LARGE
:

433 
NGX_HTTP_TO_HTTPS
:

434 
NGX_HTTPS_CERT_ERROR
:

435 
NGX_HTTPS_NO_CERT
:

436 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

437 
NGX_HTTP_NOT_IMPLEMENTED
:

438 
r
->
kì∑live
 = 0;

442 i‡(
r
->
lögîög_˛o£
) {

443 
îr‹
) {

444 
NGX_HTTP_BAD_REQUEST
:

445 
NGX_HTTP_TO_HTTPS
:

446 
NGX_HTTPS_CERT_ERROR
:

447 
NGX_HTTPS_NO_CERT
:

448 
r
->
lögîög_˛o£
 = 0;

452 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

454 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

456 i‡(!
r
->
îr‹_∑ge
 && 
˛cf
->
îr‹_∑ges
 &&Ñ->
uri_ch™ges
 != 0) {

458 i‡(
˛cf
->
ªcursive_îr‹_∑ges
 == 0) {

459 
r
->
îr‹_∑ge
 = 1;

462 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

464 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

465 i‡(
îr_∑ge
[
i
].
°©us
 =
îr‹
) {

466  
	`ngx_hâp_£nd_îr‹_∑ge
(
r
, &
îr_∑ge
[
i
]);

471 
r
->
ex≥˘_ã°ed
 = 1;

473 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

474 
r
->
kì∑live
 = 0;

477 i‡(
˛cf
->
msõ_ª‰esh


478 && 
r
->
hódîs_ö
.
msõ


479 && (
îr‹
 =
NGX_HTTP_MOVED_PERMANENTLY


480 || 
îr‹
 =
NGX_HTTP_MOVED_TEMPORARILY
))

482  
	`ngx_hâp_£nd_ª‰esh
(
r
);

485 i‡(
îr‹
 =
NGX_HTTP_CREATED
) {

487 
îr
 = 0;

489 } i‡(
îr‹
 =
NGX_HTTP_NO_CONTENT
) {

491 
îr
 = 0;

493 } i‡(
îr‹
 >
NGX_HTTP_MOVED_PERMANENTLY


494 && 
îr‹
 < 
NGX_HTTP_LAST_3XX
)

497 
îr
 = 
îr‹
 - 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

499 } i‡(
îr‹
 >
NGX_HTTP_BAD_REQUEST


500 && 
îr‹
 < 
NGX_HTTP_LAST_4XX
)

503 
îr
 = 
îr‹
 - 
NGX_HTTP_BAD_REQUEST
 + 
NGX_HTTP_OFF_4XX
;

505 } i‡(
îr‹
 >
NGX_HTTP_NGINX_CODES


506 && 
îr‹
 < 
NGX_HTTP_LAST_5XX
)

509 
îr
 = 
îr‹
 - 
NGX_HTTP_NGINX_CODES
 + 
NGX_HTTP_OFF_5XX
;

510 
îr‹
) {

511 
NGX_HTTP_TO_HTTPS
:

512 
NGX_HTTPS_CERT_ERROR
:

513 
NGX_HTTPS_NO_CERT
:

514 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
:

515 
r
->
îr_°©us
 = 
NGX_HTTP_BAD_REQUEST
;

520 
îr
 = 0;

523  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
, 
îr
);

524 
	}
}

527 
ngx_öt_t


528 
	$ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_moduÀ_t
 *
m
,

529 
ngx_öt_t
 
îr‹
)

531 *
˘x
;

532 
ngx_öt_t
 
rc
;

534 
	`ngx_hâp_˛ón_hódî
(
r
);

536 
˘x
 = 
NULL
;

538 i‡(
m
) {

539 
˘x
 = 
r
->˘x[
m
->
˘x_ödex
];

543 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

545 i‡(
m
) {

546 
r
->
˘x
[
m
->
˘x_ödex
] = ctx;

549 
r
->
fûãr_föÆize
 = 1;

551 
rc
 = 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
r
, 
îr‹
);

555 
rc
) {

557 
NGX_OK
:

558 
NGX_DONE
:

559  
NGX_ERROR
;

562  
rc
;

564 
	}
}

568 
	$ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
)

570 
	`ngx_memzîo
(&
r
->
hódîs_out
.
°©us
,

571 (
ngx_hâp_hódîs_out_t
)

572 - 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
°©us
));

574 
r
->
hódîs_out
.
hódîs
.
∑π
.
√…s
 = 0;

575 
r
->
hódîs_out
.
hódîs
.
∑π
.
√xt
 = 
NULL
;

576 
r
->
hódîs_out
.
hódîs
.
œ°
 = &r->hódîs_out.hódîs.
∑π
;

578 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

579 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

580 
	}
}

583 
ngx_öt_t


584 
	$ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
)

586 
ngx_öt_t
 
ovîwrôe
;

587 
ngx_°r_t
 
uri
, 
¨gs
;

588 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

589 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

591 
ovîwrôe
 = 
îr_∑ge
->overwrite;

593 i‡(
ovîwrôe
 && ovîwrôê!
NGX_HTTP_OK
) {

594 
r
->
ex≥˘_ã°ed
 = 1;

597 i‡(
ovîwrôe
 >= 0) {

598 
r
->
îr_°©us
 = 
ovîwrôe
;

601 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
îr_∑ge
->
vÆue
, &
uri
Ë!
NGX_OK
) {

602  
NGX_ERROR
;

605 i‡(
uri
.
Àn
 && uri.
d©a
[0] == '/') {

607 i‡(
îr_∑ge
->
vÆue
.
Àngths
) {

608 
	`ngx_hâp_•lô_¨gs
(
r
, &
uri
, &
¨gs
);

611 
¨gs
 = 
îr_∑ge
->args;

614 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

615 
r
->
mëhod
 = 
NGX_HTTP_GET
;

616 
r
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

619  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

622 i‡(
uri
.
Àn
 && uri.
d©a
[0] == '@') {

623  
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

626 
loˇti⁄
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

628 i‡(
loˇti⁄
 =
NULL
) {

629  
NGX_ERROR
;

632 i‡(
ovîwrôe
 !
NGX_HTTP_MOVED_PERMANENTLY


633 && 
ovîwrôe
 !
NGX_HTTP_MOVED_TEMPORARILY


634 && 
ovîwrôe
 !
NGX_HTTP_SEE_OTHER


635 && 
ovîwrôe
 !
NGX_HTTP_TEMPORARY_REDIRECT


636 && 
ovîwrôe
 !
NGX_HTTP_PERMANENT_REDIRECT
)

638 
r
->
îr_°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

641 
loˇti⁄
->
hash
 = 1;

642 
	`ngx_°r_£t
(&
loˇti⁄
->
key
, "Location");

643 
loˇti⁄
->
vÆue
 = 
uri
;

645 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

647 
r
->
hódîs_out
.
loˇti⁄
 =Üocation;

649 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

651 i‡(
˛cf
->
msõ_ª‰esh
 && 
r
->
hódîs_ö
.
msõ
) {

652  
	`ngx_hâp_£nd_ª‰esh
(
r
);

655  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
,Ñ->
îr_°©us


656 - 
NGX_HTTP_MOVED_PERMANENTLY


657 + 
NGX_HTTP_OFF_3XX
);

658 
	}
}

661 
ngx_öt_t


662 
	$ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

663 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
)

665 
u_ch¨
 *
èû
;

666 
size_t
 
Àn
;

667 
ngx_öt_t
 
rc
;

668 
ngx_buf_t
 *
b
;

669 
ngx_uöt_t
 
msõ_∑ddög
;

670 
ngx_chaö_t
 
out
[3];

672 i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_ON
) {

673 
Àn
 = (
ngx_hâp_îr‹_fuŒ_èû
) - 1;

674 
èû
 = 
ngx_hâp_îr‹_fuŒ_èû
;

676 } i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_BUILD
) {

677 
Àn
 = (
ngx_hâp_îr‹_buûd_èû
) - 1;

678 
èû
 = 
ngx_hâp_îr‹_buûd_èû
;

681 
Àn
 = (
ngx_hâp_îr‹_èû
) - 1;

682 
èû
 = 
ngx_hâp_îr‹_èû
;

685 
msõ_∑ddög
 = 0;

687 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
) {

688 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 +Üen;

689 i‡(
˛cf
->
msõ_∑ddög


690 && (
r
->
hódîs_ö
.
msõ
 ||Ñ->hódîs_ö.
chrome
)

691 && 
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_10


692 && 
îr
 >
NGX_HTTP_OFF_4XX
)

694 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 +=

695 (
ngx_hâp_msõ_∑ddög
) - 1;

696 
msõ_∑ddög
 = 1;

699 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

700 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

701 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

704 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

707 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

708 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

709 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

712 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

713 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

714 
	`ngx_hâp_˛ór_ëag
(
r
);

716 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

718 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

719  
rc
;

722 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 == 0) {

723  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

726 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

727 i‡(
b
 =
NULL
) {

728  
NGX_ERROR
;

731 
b
->
mem‹y
 = 1;

732 
b
->
pos
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
;

733 
b
->
œ°
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
 +Çgx_hâp_îr‹_∑ges[îr].
Àn
;

735 
out
[0].
buf
 = 
b
;

736 
out
[0].
√xt
 = &out[1];

738 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

739 i‡(
b
 =
NULL
) {

740  
NGX_ERROR
;

743 
b
->
mem‹y
 = 1;

745 
b
->
pos
 = 
èû
;

746 
b
->
œ°
 = 
èû
 + 
Àn
;

748 
out
[1].
buf
 = 
b
;

749 
out
[1].
√xt
 = 
NULL
;

751 i‡(
msõ_∑ddög
) {

752 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

753 i‡(
b
 =
NULL
) {

754  
NGX_ERROR
;

757 
b
->
mem‹y
 = 1;

758 
b
->
pos
 = 
ngx_hâp_msõ_∑ddög
;

759 
b
->
œ°
 = 
ngx_hâp_msõ_∑ddög
 + (ngx_http_msie_padding) - 1;

761 
out
[1].
√xt
 = &out[2];

762 
out
[2].
buf
 = 
b
;

763 
out
[2].
√xt
 = 
NULL
;

766 i‡(
r
 =r->
maö
) {

767 
b
->
œ°_buf
 = 1;

770 
b
->
œ°_ö_chaö
 = 1;

772  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[0]);

773 
	}
}

776 
ngx_öt_t


777 
	$ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
)

779 
u_ch¨
 *
p
, *
loˇti⁄
;

780 
size_t
 
Àn
, 
size
;

781 
uöçå_t
 
esˇ≥
;

782 
ngx_öt_t
 
rc
;

783 
ngx_buf_t
 *
b
;

784 
ngx_chaö_t
 
out
;

786 
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

787 
loˇti⁄
 = 
r
->
hódîs_out
.loˇti⁄->
vÆue
.
d©a
;

789 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

791 
size
 = (
ngx_hâp_msõ_ª‰esh_hód
) - 1

792 + 
esˇ≥
 + 
Àn


793 + (
ngx_hâp_msõ_ª‰esh_èû
) - 1;

795 
r
->
îr_°©us
 = 
NGX_HTTP_OK
;

797 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

798 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

799 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

801 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

802 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
;

804 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
size
;

806 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

807 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

808 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

811 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

812 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

813 
	`ngx_hâp_˛ór_ëag
(
r
);

815 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

817 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

818  
rc
;

821 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

822 i‡(
b
 =
NULL
) {

823  
NGX_ERROR
;

826 
p
 = 
	`ngx_˝ymem
(
b
->
pos
, 
ngx_hâp_msõ_ª‰esh_hód
,

827 (
ngx_hâp_msõ_ª‰esh_hód
) - 1);

829 i‡(
esˇ≥
 == 0) {

830 
p
 = 
	`ngx_˝ymem
’, 
loˇti⁄
, 
Àn
);

833 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

836 
b
->
œ°
 = 
	`ngx_˝ymem
(
p
, 
ngx_hâp_msõ_ª‰esh_èû
,

837 (
ngx_hâp_msõ_ª‰esh_èû
) - 1);

839 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

840 
b
->
œ°_ö_chaö
 = 1;

842 
out
.
buf
 = 
b
;

843 
out
.
√xt
 = 
NULL
;

845  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

846 
	}
}

	@src/http/ngx_http_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 #i‡(
NGX_HTTP_CACHE
)

14 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_up°ªam_t
 *
u
);

16 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_gë
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_hâp_fûe_ˇche_t
 **
ˇche
);

18 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_up°ªam_t
 *
u
);

20 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_background_upd©e
(

21 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
);

22 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_check_ønge
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_up°ªam_t
 *
u
);

24 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

26 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

28 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_ëag
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

32 
ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

33 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

34 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

35 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

36 
ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_evít_t
 *
ev
);

38 
ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_t
 *
u
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_up°ªam_t
 *
u
);

42 
ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
do_wrôe
);

44 
ngx_öt_t
 
ngx_hâp_up°ªam_£nd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
do_wrôe
);

46 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_up°ªam_t
 *
u
);

48 
ngx_hâp_up°ªam_ªad_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_up°ªam_t
 *
u
);

51 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
,

52 
ngx_hâp_up°ªam_t
 *
u
);

53 
ngx_öt_t
 
ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_hâp_up°ªam_t
 *
u
);

55 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

56 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_up°ªam_t
 *
u
);

58 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_åaûîs
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_up°ªam_t
 *
u
);

60 
ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_up°ªam_t
 *
u
);

62 
ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_up°ªam_t
 *
u
);

64 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

65 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

66 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_up°ªam_t
 *
u
);

68 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

69 
ngx_hâp_up°ªam_t
 *
u
);

70 
ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

71 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
);

73 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

75 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_up°ªam_t
 *
u
);

78 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_uöt_t
 
do_wrôe
);

80 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
);

81 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
,

82 
ssize_t
 
byãs
);

83 #i‡(
NGX_THREADS
)

84 
ngx_öt_t
 
ngx_hâp_up°ªam_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
,

85 
ngx_fûe_t
 *
fûe
);

86 
ngx_hâp_up°ªam_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

88 
ngx_öt_t
 
ngx_hâp_up°ªam_ouçut_fûãr
(*
d©a
,

89 
ngx_chaö_t
 *
chaö
);

90 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

91 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_up°ªam_t
 *
u
);

93 
ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_up°ªam_t
 *
u
);

95 
ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_up°ªam_t
 *
u
);

97 
ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_up°ªam_t
 *
u
);

99 
ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
·_ty≥
);

101 
ngx_hâp_up°ªam_˛ónup
(*
d©a
);

102 
ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
);

105 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

107 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

109 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

110 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

111 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

113 
ngx_öt_t


114 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

115 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

116 
ngx_öt_t
 
ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

117 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

118 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
,

119 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

120 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

121 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

122 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

124 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

126 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

128 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

130 
ngx_öt_t


131 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

132 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

133 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_v¨y
(
ngx_hâp_ªque°_t
 *
r
,

134 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

135 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

136 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

137 
ngx_öt_t


138 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

139 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

140 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

141 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

142 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

143 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

144 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

145 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

146 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
,

147 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

148 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

149 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

150 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

151 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

153 #i‡(
NGX_HTTP_GZIP
)

154 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

155 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

158 
ngx_öt_t
 
ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

159 
ngx_öt_t
 
ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

160 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

161 
ngx_öt_t
 
ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

162 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

163 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

164 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

165 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(

166 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

167 
ngx_öt_t
 
ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

168 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

169 
ngx_öt_t
 
ngx_hâp_up°ªam_åaûî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

170 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

171 
ngx_öt_t
 
ngx_hâp_up°ªam_cookõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

172 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

174 *
ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
);

175 *
ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

176 *
c⁄f
);

178 
ngx_öt_t
 
ngx_hâp_up°ªam_£t_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

179 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
);

181 *
ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

182 *
ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

184 #i‡(
NGX_HTTP_SSL
)

185 
ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *,

186 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

187 
ngx_hâp_up°ªam_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

188 
ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_hâp_ªque°_t
 *,

189 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

190 
ngx_hâp_up°ªam_s¶_ßve_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

191 
ngx_öt_t
 
ngx_hâp_up°ªam_s¶_«me
(
ngx_hâp_ªque°_t
 *
r
,

192 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

196 
ngx_hâp_up°ªam_hódî_t
 
	gngx_hâp_up°ªam_hódîs_ö
[] = {

198 { 
ngx_°rög
("Status"),

199 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

200 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
°©us
),

201 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

203 { 
ngx_°rög
("Content-Type"),

204 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

205 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

206 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
, 0, 1 },

208 { 
ngx_°rög
("Content-Length"),

209 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
, 0,

210 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

212 { 
ngx_°rög
("Date"),

213 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

214 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
d©e
),

215 
ngx_hâp_up°ªam_c›y_hódî_löe
,

216 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
), 0 },

218 { 
ngx_°rög
("Last-Modified"),

219 
ngx_hâp_up°ªam_¥o˚ss_œ°_modifõd
, 0,

220 
ngx_hâp_up°ªam_c›y_œ°_modifõd
, 0, 0 },

222 { 
ngx_°rög
("ETag"),

223 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

224 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ëag
),

225 
ngx_hâp_up°ªam_c›y_hódî_löe
,

226 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
), 0 },

228 { 
ngx_°rög
("Server"),

229 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

230 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
£rvî
),

231 
ngx_hâp_up°ªam_c›y_hódî_löe
,

232 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
), 0 },

234 { 
ngx_°rög
("WWW-Authenticate"),

235 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

236 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
www_authítiˇã
),

237 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

239 { 
ngx_°rög
("Location"),

240 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

241 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
loˇti⁄
),

242 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
, 0, 0 },

244 { 
ngx_°rög
("Refresh"),

245 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

246 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
, 0, 0 },

248 { 
ngx_°rög
("Set-Cookie"),

249 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
,

250 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
cookõs
),

251 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
, 0, 1 },

253 { 
ngx_°rög
("Content-Disposition"),

254 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

255 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

257 { 
ngx_°rög
("Cache-Control"),

258 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
, 0,

259 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

260 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
), 1 },

262 { 
ngx_°rög
("Expires"),

263 
ngx_hâp_up°ªam_¥o˚ss_expúes
, 0,

264 
ngx_hâp_up°ªam_c›y_hódî_löe
,

265 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
), 1 },

267 { 
ngx_°rög
("Accept-Ranges"),

268 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

269 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ac˚±_ønges
),

270 
ngx_hâp_up°ªam_c›y_Ælow_ønges
,

271 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
), 1 },

273 { 
ngx_°rög
("Content-Range"),

274 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

275 
ngx_hâp_up°ªam_c›y_hódî_löe
,

276 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ønge
), 0 },

278 { 
ngx_°rög
("Connection"),

279 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
, 0,

280 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

282 { 
ngx_°rög
("Keep-Alive"),

283 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

284 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

286 { 
ngx_°rög
("Vary"),

287 
ngx_hâp_up°ªam_¥o˚ss_v¨y
, 0,

288 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

290 { 
ngx_°rög
("Link"),

291 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

292 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

293 
off£tof
(
ngx_hâp_hódîs_out_t
, 
lök
), 0 },

295 { 
ngx_°rög
("X-Accel-Expires"),

296 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
, 0,

297 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

299 { 
ngx_°rög
("X-Accel-Redirect"),

300 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

301 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
x_ac˚l_ªdúe˘
),

302 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

304 { 
ngx_°rög
("X-Accel-Limit-Rate"),

305 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
, 0,

306 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

308 { 
ngx_°rög
("X-Accel-Buffering"),

309 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
, 0,

310 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

312 { 
ngx_°rög
("X-Accel-Charset"),

313 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
, 0,

314 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

316 { 
ngx_°rög
("Transfer-Encoding"),

317 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
, 0,

318 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

320 #i‡(
NGX_HTTP_GZIP
)

321 { 
ngx_°rög
("Content-Encoding"),

322 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

323 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ícodög
),

324 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
, 0, 0 },

327 { 
ngx_nuŒ_°rög
, 
NULL
, 0, NULL, 0, 0 }

331 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_comm™ds
[] = {

333 { 
ngx_°rög
("upstream"),

334 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

335 
ngx_hâp_up°ªam
,

338 
NULL
 },

340 { 
ngx_°rög
("server"),

341 
NGX_HTTP_UPS_CONF
|
NGX_CONF_1MORE
,

342 
ngx_hâp_up°ªam_£rvî
,

343 
NGX_HTTP_SRV_CONF_OFFSET
,

345 
NULL
 },

347 
ngx_nuŒ_comm™d


351 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ_˘x
 = {

352 
ngx_hâp_up°ªam_add_v¨übÀs
,

353 
NULL
,

355 
ngx_hâp_up°ªam_¸óã_maö_c⁄f
,

356 
ngx_hâp_up°ªam_öô_maö_c⁄f
,

358 
NULL
,

359 
NULL
,

361 
NULL
,

362 
NULL


366 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ
 = {

367 
NGX_MODULE_V1
,

368 &
ngx_hâp_up°ªam_moduÀ_˘x
,

369 
ngx_hâp_up°ªam_comm™ds
,

370 
NGX_HTTP_MODULE
,

371 
NULL
,

372 
NULL
,

373 
NULL
,

374 
NULL
,

375 
NULL
,

376 
NULL
,

377 
NULL
,

378 
NGX_MODULE_V1_PADDING


382 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_up°ªam_v¨s
[] = {

384 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

385 
ngx_hâp_up°ªam_addr_v¨übÀ
, 0,

386 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

388 { 
ngx_°rög
("up°ªam_°©us"), 
NULL
,

389 
ngx_hâp_up°ªam_°©us_v¨übÀ
, 0,

390 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

392 { 
ngx_°rög
("up°ªam_c⁄√˘_time"), 
NULL
,

393 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 2,

394 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

396 { 
ngx_°rög
("up°ªam_hódî_time"), 
NULL
,

397 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 1,

398 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

400 { 
ngx_°rög
("up°ªam_ª•⁄£_time"), 
NULL
,

401 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

402 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

404 { 
ngx_°rög
("up°ªam_ª•⁄£_Àngth"), 
NULL
,

405 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 0,

406 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

408 { 
ngx_°rög
("up°ªam_byãs_ª˚ived"), 
NULL
,

409 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 1,

410 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

412 #i‡(
NGX_HTTP_CACHE
)

414 { 
ngx_°rög
("up°ªam_ˇche_°©us"), 
NULL
,

415 
ngx_hâp_up°ªam_ˇche_°©us
, 0,

416 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

418 { 
ngx_°rög
("up°ªam_ˇche_œ°_modifõd"), 
NULL
,

419 
ngx_hâp_up°ªam_ˇche_œ°_modifõd
, 0,

420 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

422 { 
ngx_°rög
("up°ªam_ˇche_ëag"), 
NULL
,

423 
ngx_hâp_up°ªam_ˇche_ëag
, 0,

424 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

428 { 
ngx_°rög
("up°ªam_hâp_"), 
NULL
, 
ngx_hâp_up°ªam_hódî_v¨übÀ
,

429 0, 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_PREFIX
, 0 },

431 { 
ngx_°rög
("up°ªam_åaûî_"), 
NULL
, 
ngx_hâp_up°ªam_åaûî_v¨übÀ
,

432 0, 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_PREFIX
, 0 },

434 { 
ngx_°rög
("up°ªam_cookõ_"), 
NULL
, 
ngx_hâp_up°ªam_cookõ_v¨übÀ
,

435 0, 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_PREFIX
, 0 },

437 
ngx_hâp_nuŒ_v¨übÀ


441 
ngx_hâp_up°ªam_√xt_t
 
	gngx_hâp_up°ªam_√xt_îr‹s
[] = {

442 { 500, 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

443 { 502, 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

444 { 503, 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

445 { 504, 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

446 { 403, 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

447 { 404, 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

448 { 429, 
NGX_HTTP_UPSTREAM_FT_HTTP_429
 },

453 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ˇche_mëhod_mask
[] = {

454 { 
ngx_°rög
("GET"), 
NGX_HTTP_GET
 },

455 { 
ngx_°rög
("HEAD"), 
NGX_HTTP_HEAD
 },

456 { 
ngx_°rög
("POST"), 
NGX_HTTP_POST
 },

457 { 
ngx_nuŒ_°rög
, 0 }

461 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ign‹e_hódîs_masks
[] = {

462 { 
ngx_°rög
("X-Ac˚l-Redúe˘"), 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 },

463 { 
ngx_°rög
("X-Ac˚l-Expúes"), 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 },

464 { 
ngx_°rög
("X-Ac˚l-Limô-R©e"), 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 },

465 { 
ngx_°rög
("X-Ac˚l-Buf„rög"), 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 },

466 { 
ngx_°rög
("X-Ac˚l-Ch¨£t"), 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 },

467 { 
ngx_°rög
("Expúes"), 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
 },

468 { 
ngx_°rög
("Cache-C⁄åﬁ"), 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 },

469 { 
ngx_°rög
("Së-Cookõ"), 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 },

470 { 
ngx_°rög
("V¨y"), 
NGX_HTTP_UPSTREAM_IGN_VARY
 },

471 { 
ngx_nuŒ_°rög
, 0 }

475 
ngx_öt_t


476 
	$ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

478 
ngx_hâp_up°ªam_t
 *
u
;

480 
u
 = 
r
->
up°ªam
;

482 i‡(
u
 && u->
˛ónup
) {

483 
r
->
maö
->
cou¡
++;

484 
	`ngx_hâp_up°ªam_˛ónup
(
r
);

487 
u
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_t
));

488 i‡(
u
 =
NULL
) {

489  
NGX_ERROR
;

492 
r
->
up°ªam
 = 
u
;

494 
u
->
≥î
.
log
 = 
r
->
c⁄√˘i⁄
->log;

495 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

497 #i‡(
NGX_HTTP_CACHE
)

498 
r
->
ˇche
 = 
NULL
;

501 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

502 
u
->
hódîs_ö
.
œ°_modifõd_time
 = -1;

504  
NGX_OK
;

505 
	}
}

509 
	$ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
)

511 
ngx_c⁄√˘i⁄_t
 *
c
;

513 
c
 = 
r
->
c⁄√˘i⁄
;

515 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

516 "hâ∞öô up°ªam, clõ¡Åimî: %d", 
c
->
ªad
->
timî_£t
);

518 #i‡(
NGX_HTTP_V2
)

519 i‡(
r
->
°ªam
) {

520 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

525 i‡(
c
->
ªad
->
timî_£t
) {

526 
	`ngx_dñ_timî
(
c
->
ªad
);

529 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

531 i‡(!
c
->
wrôe
->
a˘ive
) {

532 i‡(
	`ngx_add_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLEAR_EVENT
)

533 =
NGX_ERROR
)

535 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

541 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

542 
	}
}

546 
	$ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

548 
ngx_°r_t
 *
ho°
;

549 
ngx_uöt_t
 
i
;

550 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

551 
ngx_hâp_˛ónup_t
 *
˛n
;

552 
ngx_hâp_up°ªam_t
 *
u
;

553 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

554 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

555 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

557 i‡(
r
->
aio
) {

561 
u
 = 
r
->
up°ªam
;

563 #i‡(
NGX_HTTP_CACHE
)

565 i‡(
u
->
c⁄f
->
ˇche
) {

566 
ngx_öt_t
 
rc
;

568 
rc
 = 
	`ngx_hâp_up°ªam_ˇche
(
r
, 
u
);

570 i‡(
rc
 =
NGX_BUSY
) {

571 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_öô_ªque°
;

575 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

577 i‡(
rc
 =
NGX_ERROR
) {

578 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

582 i‡(
rc
 =
NGX_OK
) {

583 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

585 i‡(
rc
 =
NGX_DONE
) {

589 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

590 
rc
 = 
NGX_DECLINED
;

591 
r
->
ˇched
 = 0;

592 
u
->
buf„r
.
°¨t
 = 
NULL
;

593 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

594 
u
->
ªque°_£¡
 = 1;

597 i‡(
	`ngx_hâp_up°ªam_ˇche_background_upd©e
(
r
, 
u
Ë!
NGX_OK
) {

598 
rc
 = 
NGX_ERROR
;

602 i‡(
rc
 !
NGX_DECLINED
) {

603 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

610 
u
->
°‹e
 = u->
c⁄f
->store;

612 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

613 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

614 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
;

617 i‡(
r
->
ªque°_body
) {

618 
u
->
ªque°_bufs
 = 
r
->
ªque°_body
->
bufs
;

621 i‡(
u
->
	`¸óã_ªque°
(
r
Ë!
NGX_OK
) {

622 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

626 i‡(
	`ngx_hâp_up°ªam_£t_loˇl
(
r
, 
u
, u->
c⁄f
->
loˇl
Ë!
NGX_OK
) {

627 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

631 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

633 
u
->
ouçut
.
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

634 
u
->
ouçut
.
poﬁ
 = 
r
->pool;

635 
u
->
ouçut
.
bufs
.
num
 = 1;

636 
u
->
ouçut
.
bufs
.
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

638 i‡(
u
->
ouçut
.
ouçut_fûãr
 =
NULL
) {

639 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_chaö_wrôî
;

640 
u
->
ouçut
.
fûãr_˘x
 = &u->
wrôî
;

643 
u
->
wrôî
.
poﬁ
 = 
r
->pool;

645 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

647 
r
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
‘->
poﬁ
, 1,

648 (
ngx_hâp_up°ªam_°©e_t
));

649 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

650 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

656 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

657 i‡(
u
->
°©e
 =
NULL
) {

658 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

659 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

663 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

666 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

667 i‡(
˛n
 =
NULL
) {

668 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

672 
˛n
->
h™dÀr
 = 
ngx_hâp_up°ªam_˛ónup
;

673 
˛n
->
d©a
 = 
r
;

674 
u
->
˛ónup
 = &
˛n
->
h™dÀr
;

676 i‡(
u
->
ªsﬁved
 =
NULL
) {

678 
uscf
 = 
u
->
c⁄f
->
up°ªam
;

682 #i‡(
NGX_HTTP_SSL
)

683 
u
->
s¶_«me
 = u->
ªsﬁved
->
ho°
;

686 
ho°
 = &
u
->
ªsﬁved
->host;

688 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

690 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

692 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

694 
uscf
 = 
uscÂ
[
i
];

696 i‡(
uscf
->
ho°
.
Àn
 == host->len

697 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

698 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

699 && 
	`ngx_°∫ˇ£cmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

701 
found
;

705 i‡(
u
->
ªsﬁved
->
sockaddr
) {

707 i‡(
u
->
ªsﬁved
->
p‹t
 == 0

708 && 
u
->
ªsﬁved
->
sockaddr
->
ß_Ámûy
 !
AF_UNIX
)

710 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

711 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

712 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

713 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

717 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
u
->
ªsﬁved
)

718 !
NGX_OK
)

720 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

721 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

725 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

730 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

731 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

732 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

733 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

734 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

738 
ãmp
.
«me
 = *
ho°
;

740 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
˛cf
->
ªsﬁvî
, &
ãmp
);

741 i‡(
˘x
 =
NULL
) {

742 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

743 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

747 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

748 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

749 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

751 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

755 
˘x
->
«me
 = *
ho°
;

756 
˘x
->
h™dÀr
 = 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
;

757 
˘x
->
d©a
 = 
r
;

758 
˘x
->
timeout
 = 
˛cf
->
ªsﬁvî_timeout
;

760 
u
->
ªsﬁved
->
˘x
 = ctx;

762 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

763 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

764 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

765 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

772 
found
:

774 i‡(
uscf
 =
NULL
) {

775 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

777 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

778 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

782 
u
->
up°ªam
 = 
uscf
;

784 #i‡(
NGX_HTTP_SSL
)

785 
u
->
s¶_«me
 = 
uscf
->
ho°
;

788 i‡(
uscf
->
≥î
.
	`öô
(
r
, uscfË!
NGX_OK
) {

789 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

790 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

794 
u
->
≥î
.
°¨t_time
 = 
ngx_cuºít_m£c
;

796 i‡(
u
->
c⁄f
->
√xt_up°ªam_åõs


797 && 
u
->
≥î
.
åõs
 > u->
c⁄f
->
√xt_up°ªam_åõs
)

799 
u
->
≥î
.
åõs
 = u->
c⁄f
->
√xt_up°ªam_åõs
;

802 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

803 
	}
}

806 #i‡(
NGX_HTTP_CACHE
)

808 
ngx_öt_t


809 
	$ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

811 
ngx_öt_t
 
rc
;

812 
ngx_hâp_ˇche_t
 *
c
;

813 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

815 
c
 = 
r
->
ˇche
;

817 i‡(
c
 =
NULL
) {

819 i‡(!(
r
->
mëhod
 & 
u
->
c⁄f
->
ˇche_mëhods
)) {

820  
NGX_DECLINED
;

823 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_gë
(
r
, 
u
, &
ˇche
);

825 i‡(
rc
 !
NGX_OK
) {

826  
rc
;

829 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 && 
u
->
c⁄f
->
ˇche_c⁄vît_hód
) {

830 
u
->
mëhod
 = 
ngx_hâp_c‹e_gë_mëhod
;

833 i‡(
	`ngx_hâp_fûe_ˇche_√w
(
r
Ë!
NGX_OK
) {

834  
NGX_ERROR
;

837 i‡(
u
->
	`¸óã_key
(
r
Ë!
NGX_OK
) {

838  
NGX_ERROR
;

843 
	`ngx_hâp_fûe_ˇche_¸óã_key
(
r
);

845 i‡(
r
->
ˇche
->
hódî_°¨t
 + 256 >
u
->
c⁄f
->
buf„r_size
) {

846 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

849 &
u
->
c⁄f
->
moduÀ
, u->c⁄f->
buf„r_size
,

850 
	`ngx_Æign
(
r
->
ˇche
->
hódî_°¨t
 + 256, 1024));

852 
r
->
ˇche
 = 
NULL
;

853  
NGX_DECLINED
;

856 
u
->
ˇchóbÀ
 = 1;

858 
c
 = 
r
->
ˇche
;

860 
c
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

861 
c
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

862 
c
->
fûe_ˇche
 = 
ˇche
;

864 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
ˇche_by∑ss
)) {

866 
NGX_ERROR
:

867  
NGX_ERROR
;

869 
NGX_DECLINED
:

870 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_BYPASS
;

871  
NGX_DECLINED
;

877 
c
->
lock
 = 
u
->
c⁄f
->
ˇche_lock
;

878 
c
->
lock_timeout
 = 
u
->
c⁄f
->
ˇche_lock_timeout
;

879 
c
->
lock_age
 = 
u
->
c⁄f
->
ˇche_lock_age
;

881 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

884 
rc
 = 
	`ngx_hâp_fûe_ˇche_›í
(
r
);

886 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

887 "hâ∞up°ªam cache: %i", 
rc
);

889 
rc
) {

891 
NGX_HTTP_CACHE_STALE
:

893 i‡(((
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
)

894 || 
c
->
°Æe_upd©ög
Ë&& !
r
->
background


895 && 
u
->
c⁄f
->
ˇche_background_upd©e
)

897 
r
->
ˇche
->
background
 = 1;

898 
u
->
ˇche_°©us
 = 
rc
;

899 
rc
 = 
NGX_OK
;

904 
NGX_HTTP_CACHE_UPDATING
:

906 i‡(((
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
)

907 || 
c
->
°Æe_upd©ög
Ë&& !
r
->
background
)

909 
u
->
ˇche_°©us
 = 
rc
;

910 
rc
 = 
NGX_OK
;

913 
rc
 = 
NGX_HTTP_CACHE_STALE
;

918 
NGX_OK
:

919 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

922 
rc
) {

924 
NGX_OK
:

926  
NGX_OK
;

928 
NGX_HTTP_CACHE_STALE
:

930 
c
->
vÆid_£c
 = 0;

931 
c
->
upd©ög_£c
 = 0;

932 
c
->
îr‹_£c
 = 0;

934 
u
->
buf„r
.
°¨t
 = 
NULL
;

935 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_EXPIRED
;

939 
NGX_DECLINED
:

941 i‡((
size_t
Ë(
u
->
buf„r
.
íd
 - u->buf„r.
°¨t
Ë< u->
c⁄f
->
buf„r_size
) {

942 
u
->
buf„r
.
°¨t
 = 
NULL
;

945 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
 + 
c
->
hódî_°¨t
;

946 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

951 
NGX_HTTP_CACHE_SCARCE
:

953 
u
->
ˇchóbÀ
 = 0;

957 
NGX_AGAIN
:

959  
NGX_BUSY
;

961 
NGX_ERROR
:

963  
NGX_ERROR
;

969 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

971  
rc
;

974 i‡(
	`ngx_hâp_up°ªam_ˇche_check_ønge
(
r
, 
u
Ë=
NGX_DECLINED
) {

975 
u
->
ˇchóbÀ
 = 0;

978 
r
->
ˇched
 = 0;

980  
NGX_DECLINED
;

981 
	}
}

984 
ngx_öt_t


985 
	$ngx_hâp_up°ªam_ˇche_gë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

986 
ngx_hâp_fûe_ˇche_t
 **
ˇche
)

988 
ngx_°r_t
 *
«me
, 
vÆ
;

989 
ngx_uöt_t
 
i
;

990 
ngx_hâp_fûe_ˇche_t
 **
ˇches
;

992 i‡(
u
->
c⁄f
->
ˇche_z⁄e
) {

993 *
ˇche
 = 
u
->
c⁄f
->
ˇche_z⁄e
->
d©a
;

994  
NGX_OK
;

997 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
u
->
c⁄f
->
ˇche_vÆue
, &
vÆ
Ë!
NGX_OK
) {

998  
NGX_ERROR
;

1001 i‡(
vÆ
.
Àn
 == 0

1002 || (
vÆ
.
Àn
 =3 && 
	`ngx_°∫cmp
(vÆ.
d©a
, "off", 3) == 0))

1004  
NGX_DECLINED
;

1007 
ˇches
 = 
u
->ˇches->
ñts
;

1009 
i
 = 0; i < 
u
->
ˇches
->
√…s
; i++) {

1010 
«me
 = &
ˇches
[
i
]->
shm_z⁄e
->
shm
.name;

1012 i‡(
«me
->
Àn
 =
vÆ
.len

1013 && 
	`ngx_°∫cmp
(
«me
->
d©a
, 
vÆ
.d©a, vÆ.
Àn
) == 0)

1015 *
ˇche
 = 
ˇches
[
i
];

1016  
NGX_OK
;

1020 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1021 "ˇchê\"%V\"ÇŸ found", &
vÆ
);

1023  
NGX_ERROR
;

1024 
	}
}

1027 
ngx_öt_t


1028 
	$ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1030 
ngx_öt_t
 
rc
;

1031 
ngx_hâp_ˇche_t
 *
c
;

1033 
r
->
ˇched
 = 1;

1034 
c
 = 
r
->
ˇche
;

1036 i‡(
c
->
hódî_°¨t
 =c->
body_°¨t
) {

1037 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1038  
	`ngx_hâp_ˇche_£nd
(
r
);

1043 
u
->
buf„r
 = *
c
->
buf
;

1044 
u
->
buf„r
.
pos
 +
c
->
hódî_°¨t
;

1046 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1047 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1048 
u
->
hódîs_ö
.
œ°_modifõd_time
 = -1;

1050 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1051 (
ngx_èbÀ_ñt_t
))

1052 !
NGX_OK
)

1054  
NGX_ERROR
;

1057 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
åaûîs
, 
r
->
poﬁ
, 2,

1058 (
ngx_èbÀ_ñt_t
))

1059 !
NGX_OK
)

1061  
NGX_ERROR
;

1064 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

1066 i‡(
rc
 =
NGX_OK
) {

1068 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

1069  
NGX_DONE
;

1072  
	`ngx_hâp_ˇche_£nd
(
r
);

1075 i‡(
rc
 =
NGX_ERROR
) {

1076  
NGX_ERROR
;

1079 i‡(
rc
 =
NGX_AGAIN
) {

1080 
rc
 = 
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1085 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1087 
c
->
fûe
.
«me
.
d©a
);

1091  
rc
;

1092 
	}
}

1095 
ngx_öt_t


1096 
	$ngx_hâp_up°ªam_ˇche_background_upd©e
(
ngx_hâp_ªque°_t
 *
r
,

1097 
ngx_hâp_up°ªam_t
 *
u
)

1099 
ngx_hâp_ªque°_t
 *
§
;

1101 i‡(!
r
->
ˇched
 || !r->
ˇche
->
background
) {

1102  
NGX_OK
;

1105 i‡(
r
 =r->
maö
) {

1106 
r
->
¥e£rve_body
 = 1;

1109 i‡(
	`ngx_hâp_subªque°
(
r
, &r->
uri
, &r->
¨gs
, &
§
, 
NULL
,

1110 
NGX_HTTP_SUBREQUEST_CLONE


1111 |
NGX_HTTP_SUBREQUEST_BACKGROUND
)

1112 !
NGX_OK
)

1114  
NGX_ERROR
;

1117 
§
->
hódî_⁄ly
 = 1;

1119  
NGX_OK
;

1120 
	}
}

1123 
ngx_öt_t


1124 
	$ngx_hâp_up°ªam_ˇche_check_ønge
(
ngx_hâp_ªque°_t
 *
r
,

1125 
ngx_hâp_up°ªam_t
 *
u
)

1127 
off_t
 
off£t
;

1128 
u_ch¨
 *
p
, *
°¨t
;

1129 
ngx_èbÀ_ñt_t
 *
h
;

1131 
h
 = 
r
->
hódîs_ö
.
ønge
;

1133 i‡(
h
 =
NULL


1134 || !
u
->
ˇchóbÀ


1135 || 
u
->
c⁄f
->
ˇche_max_ønge_off£t
 =
NGX_MAX_OFF_T_VALUE
)

1137  
NGX_OK
;

1140 i‡(
u
->
c⁄f
->
ˇche_max_ønge_off£t
 == 0) {

1141  
NGX_DECLINED
;

1144 i‡(
h
->
vÆue
.
Àn
 < 7

1145 || 
	`ngx_°∫ˇ£cmp
(
h
->
vÆue
.
d©a
, (
u_ch¨
 *) "bytes=", 6) != 0)

1147  
NGX_OK
;

1150 
p
 = 
h
->
vÆue
.
d©a
 + 6;

1152 *
p
 == ' ') {Ö++; }

1154 i‡(*
p
 == '-') {

1155  
NGX_DECLINED
;

1158 
°¨t
 = 
p
;

1160 *
p
 >= '0' && *p <= '9') {Ö++; }

1162 
off£t
 = 
	`ngx_©oof
(
°¨t
, 
p
 - start);

1164 i‡(
off£t
 >
u
->
c⁄f
->
ˇche_max_ønge_off£t
) {

1165  
NGX_DECLINED
;

1168  
NGX_OK
;

1169 
	}
}

1175 
	$ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1177 
ngx_uöt_t
 
run_po°ed
;

1178 
ngx_c⁄√˘i⁄_t
 *
c
;

1179 
ngx_hâp_ªque°_t
 *
r
;

1180 
ngx_hâp_up°ªam_t
 *
u
;

1181 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
;

1183 
run_po°ed
 = 
˘x
->
async
;

1185 
r
 = 
˘x
->
d©a
;

1186 
c
 = 
r
->
c⁄√˘i⁄
;

1188 
u
 = 
r
->
up°ªam
;

1189 
ur
 = 
u
->
ªsﬁved
;

1191 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1194 "hâ∞up°ªamÑesﬁve: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1196 i‡(
˘x
->
°©e
) {

1197 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1199 &
˘x
->
«me
, ctx->
°©e
,

1200 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

1202 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

1203 
Áûed
;

1206 
ur
->
«ddrs
 = 
˘x
->naddrs;

1207 
ur
->
addrs
 = 
˘x
->addrs;

1209 #i‡(
NGX_DEBUG
)

1211 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

1212 
ngx_°r_t
 
addr
;

1213 
ngx_uöt_t
 
i
;

1215 
addr
.
d©a
 = 
ãxt
;

1217 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

1218 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ur
->
addrs
[
i
].
sockaddr
, ur->addrs[i].
sockÀn
,

1219 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

1221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1222 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

1227 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
ur
Ë!
NGX_OK
) {

1228 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1229 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1230 
Áûed
;

1233 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

1234 
ur
->
˘x
 = 
NULL
;

1236 
u
->
≥î
.
°¨t_time
 = 
ngx_cuºít_m£c
;

1238 i‡(
u
->
c⁄f
->
√xt_up°ªam_åõs


1239 && 
u
->
≥î
.
åõs
 > u->
c⁄f
->
√xt_up°ªam_åõs
)

1241 
u
->
≥î
.
åõs
 = u->
c⁄f
->
√xt_up°ªam_åõs
;

1244 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

1246 
Áûed
:

1248 i‡(
run_po°ed
) {

1249 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1251 
	}
}

1255 
	$ngx_hâp_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

1257 
ngx_c⁄√˘i⁄_t
 *
c
;

1258 
ngx_hâp_ªque°_t
 *
r
;

1259 
ngx_hâp_up°ªam_t
 *
u
;

1261 
c
 = 
ev
->
d©a
;

1262 
r
 = 
c
->
d©a
;

1264 
u
 = 
r
->
up°ªam
;

1265 
c
 = 
r
->
c⁄√˘i⁄
;

1267 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1269 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1270 "hâ∞up°ªamÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1272 i‡(
ev
->
dñayed
 &&Év->
timedout
) {

1273 
ev
->
dñayed
 = 0;

1274 
ev
->
timedout
 = 0;

1277 i‡(
ev
->
wrôe
) {

1278 
u
->
	`wrôe_evít_h™dÀr
(
r
, u);

1281 
u
->
	`ªad_evít_h™dÀr
(
r
, u);

1284 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1285 
	}
}

1289 
	$ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

1291 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
ªad
);

1292 
	}
}

1296 
	$ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

1298 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
wrôe
);

1299 
	}
}

1303 
	$ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1304 
ngx_evít_t
 *
ev
)

1306 
n
;

1307 
buf
[1];

1308 
ngx_îr_t
 
îr
;

1309 
ngx_öt_t
 
evít
;

1310 
ngx_c⁄√˘i⁄_t
 *
c
;

1311 
ngx_hâp_up°ªam_t
 *
u
;

1313 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

1315 
ev
->
wrôe
, &
r
->
uri
);

1317 
c
 = 
r
->
c⁄√˘i⁄
;

1318 
u
 = 
r
->
up°ªam
;

1320 i‡(
c
->
îr‹
) {

1321 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1323 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1325 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1326 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1327 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1332 i‡(!
u
->
ˇchóbÀ
) {

1333 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1334 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1340 #i‡(
NGX_HTTP_V2
)

1341 i‡(
r
->
°ªam
) {

1346 #i‡(
NGX_HAVE_KQUEUE
)

1348 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1350 i‡(!
ev
->
≥ndög_eof
) {

1354 
ev
->
eof
 = 1;

1355 
c
->
îr‹
 = 1;

1357 i‡(
ev
->
kq_î∫o
) {

1358 
ev
->
îr‹
 = 1;

1361 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1362 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1365 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1366 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1370 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1374 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1375 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1376 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1384 #i‡(
NGX_HAVE_EPOLLRDHUP
)

1386 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
Ë&& 
ngx_u£_ïﬁl_rdhup
) {

1387 
sockÀn_t
 
Àn
;

1389 i‡(!
ev
->
≥ndög_eof
) {

1393 
ev
->
eof
 = 1;

1394 
c
->
îr‹
 = 1;

1396 
îr
 = 0;

1397 
Àn
 = (
ngx_îr_t
);

1404 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1407 
îr
 = 
ngx_sockë_î∫o
;

1410 i‡(
îr
) {

1411 
ev
->
îr‹
 = 1;

1414 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1415 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1418 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1419 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1423 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1427 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1428 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1429 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1437 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

1439 
îr
 = 
ngx_sockë_î∫o
;

1441 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 
îr
,

1442 "hâ∞up°ªamÑecv(): %d", 
n
);

1444 i‡(
ev
->
wrôe
 && (
n
 >0 || 
îr
 =
NGX_EAGAIN
)) {

1448 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1450 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1452 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1453 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1454 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1459 i‡(
n
 > 0) {

1463 i‡(
n
 == -1) {

1464 i‡(
îr
 =
NGX_EAGAIN
) {

1468 
ev
->
îr‹
 = 1;

1471 
îr
 = 0;

1474 
ev
->
eof
 = 1;

1475 
c
->
îr‹
 = 1;

1477 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1478 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1481 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1482 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1486 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1489 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1490 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1491 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1493 
	}
}

1497 
	$ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1499 
ngx_öt_t
 
rc
;

1500 
ngx_c⁄√˘i⁄_t
 *
c
;

1502 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1504 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_time
) {

1505 
u
->
°©e
->
ª•⁄£_time
 = 
ngx_cuºít_m£c
 - u->state->response_time;

1508 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

1509 i‡(
u
->
°©e
 =
NULL
) {

1510 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1511 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1515 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

1517 
u
->
°©e
->
ª•⁄£_time
 = 
ngx_cuºít_m£c
;

1518 
u
->
°©e
->
c⁄√˘_time
 = (
ngx_m£c_t
) -1;

1519 
u
->
°©e
->
hódî_time
 = (
ngx_m£c_t
) -1;

1521 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

1523 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1524 "hâ∞up°ªam c⁄√˘: %i", 
rc
);

1526 i‡(
rc
 =
NGX_ERROR
) {

1527 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1528 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1532 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

1534 i‡(
rc
 =
NGX_BUSY
) {

1535 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "noÜive upstreams");

1536 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_NOLIVE
);

1540 i‡(
rc
 =
NGX_DECLINED
) {

1541 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1547 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1549 
c
->
d©a
 = 
r
;

1551 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1552 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1554 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
;

1555 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_hódî
;

1557 
c
->
£ndfûe
 &
r
->
c⁄√˘i⁄
->sendfile;

1558 
u
->
ouçut
.
£ndfûe
 = 
c
->sendfile;

1560 i‡(
r
->
c⁄√˘i⁄
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_DISABLED
) {

1561 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1564 i‡(
c
->
poﬁ
 =
NULL
) {

1568 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
r
->
c⁄√˘i⁄
->
log
);

1569 i‡(
c
->
poﬁ
 =
NULL
) {

1570 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1571 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1576 
c
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1577 
c
->
poﬁ
->
log
 = c->log;

1578 
c
->
ªad
->
log
 = c->log;

1579 
c
->
wrôe
->
log
 = c->log;

1583 
u
->
wrôî
.
out
 = 
NULL
;

1584 
u
->
wrôî
.
œ°
 = &u->wrôî.
out
;

1585 
u
->
wrôî
.
c⁄√˘i⁄
 = 
c
;

1586 
u
->
wrôî
.
limô
 = 0;

1588 i‡(
u
->
ªque°_£¡
) {

1589 i‡(
	`ngx_hâp_up°ªam_ªöô
(
r
, 
u
Ë!
NGX_OK
) {

1590 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1591 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1596 i‡(
r
->
ªque°_body


1597 && 
r
->
ªque°_body
->
buf


1598 && 
r
->
ªque°_body
->
ãmp_fûe


1599 && 
r
 =r->
maö
)

1606 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1607 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1608 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1609 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1613 
u
->
ouçut
.
‰ì
->
buf
 = 
r
->
ªque°_body
->buf;

1614 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1615 
u
->
ouçut
.
Æloˇãd
 = 1;

1617 
r
->
ªque°_body
->
buf
->
pos
 =Ñ->ªque°_body->buf->
°¨t
;

1618 
r
->
ªque°_body
->
buf
->
œ°
 =Ñ->ªque°_body->buf->
°¨t
;

1619 
r
->
ªque°_body
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1622 
u
->
ªque°_£¡
 = 0;

1623 
u
->
ªque°_body_£¡
 = 0;

1624 
u
->
ªque°_body_blocked
 = 0;

1626 i‡(
rc
 =
NGX_AGAIN
) {

1627 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1631 #i‡(
NGX_HTTP_SSL
)

1633 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1634 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1640 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 1);

1641 
	}
}

1644 #i‡(
NGX_HTTP_SSL
)

1647 
	$ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1648 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
)

1650 
ngx_öt_t
 
rc
;

1651 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1653 i‡(
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1654 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1658 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
u
->
c⁄f
->
s¶
, 
c
,

1659 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

1660 !
NGX_OK
)

1662 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1663 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1667 
c
->
£ndfûe
 = 0;

1668 
u
->
ouçut
.
£ndfûe
 = 0;

1670 i‡(
u
->
c⁄f
->
s¶_£rvî_«me
 || u->c⁄f->
s¶_vîify
) {

1671 i‡(
	`ngx_hâp_up°ªam_s¶_«me
(
r
, 
u
, 
c
Ë!
NGX_OK
) {

1672 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1673 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1678 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1679 
c
->
s¶
->
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_s¶_ßve_£ssi⁄
;

1681 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1682 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1683 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1689 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1691 i‡(
˛cf
->
t˝_nodñay
 && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

1692 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1693 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1698 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1700 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

1702 i‡(
rc
 =
NGX_AGAIN
) {

1704 i‡(!
c
->
wrôe
->
timî_£t
) {

1705 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1708 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_s¶_h™dshake_h™dÀr
;

1712 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
r
, 
u
, 
c
);

1713 
	}
}

1717 
	$ngx_hâp_up°ªam_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

1719 
ngx_hâp_ªque°_t
 *
r
;

1720 
ngx_hâp_up°ªam_t
 *
u
;

1722 
r
 = 
c
->
d©a
;

1724 
u
 = 
r
->
up°ªam
;

1725 
c
 = 
r
->
c⁄√˘i⁄
;

1727 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1729 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1731 &
r
->
uri
, &r->
¨gs
);

1733 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
r
, 
u
, u->
≥î
.
c⁄√˘i⁄
);

1735 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1736 
	}
}

1740 
	$ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

1741 
ngx_c⁄√˘i⁄_t
 *
c
)

1743 
rc
;

1745 i‡(
c
->
s¶
->
h™dshaked
) {

1747 i‡(
u
->
c⁄f
->
s¶_vîify
) {

1748 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1750 i‡(
rc
 !
X509_V_OK
) {

1751 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1753 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1754 
Áûed
;

1757 i‡(
	`ngx_s¶_check_ho°
(
c
, &
u
->
s¶_«me
Ë!
NGX_OK
) {

1758 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1760 &
u
->
s¶_«me
);

1761 
Áûed
;

1765 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1766 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1768 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 1);

1773 i‡(
c
->
wrôe
->
timedout
) {

1774 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1778 
Áûed
:

1780 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1781 
	}
}

1785 
	$ngx_hâp_up°ªam_s¶_ßve_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

1787 
ngx_hâp_ªque°_t
 *
r
;

1788 
ngx_hâp_up°ªam_t
 *
u
;

1790 i‡(
c
->
idÀ
) {

1794 
r
 = 
c
->
d©a
;

1796 
u
 = 
r
->
up°ªam
;

1797 
c
 = 
r
->
c⁄√˘i⁄
;

1799 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1801 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1802 
	}
}

1805 
ngx_öt_t


1806 
	$ngx_hâp_up°ªam_s¶_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

1807 
ngx_c⁄√˘i⁄_t
 *
c
)

1809 
u_ch¨
 *
p
, *
œ°
;

1810 
ngx_°r_t
 
«me
;

1812 i‡(
u
->
c⁄f
->
s¶_«me
) {

1813 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
u
->
c⁄f
->
s¶_«me
, &
«me
Ë!
NGX_OK
) {

1814  
NGX_ERROR
;

1818 
«me
 = 
u
->
s¶_«me
;

1821 i‡(
«me
.
Àn
 == 0) {

1822 
d⁄e
;

1830 
p
 = 
«me
.
d©a
;

1831 
œ°
 = 
«me
.
d©a
 +Çame.
Àn
;

1833 i‡(*
p
 == '[') {

1834 
p
 = 
	`ngx_°æchr
’, 
œ°
, ']');

1836 i‡(
p
 =
NULL
) {

1837 
p
 = 
«me
.
d©a
;

1841 
p
 = 
	`ngx_°æchr
’, 
œ°
, ':');

1843 i‡(
p
 !
NULL
) {

1844 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1847 i‡(!
u
->
c⁄f
->
s¶_£rvî_«me
) {

1848 
d⁄e
;

1851 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


1855 i‡(
«me
.
Àn
 =0 || *«me.
d©a
 == '[') {

1856 
d⁄e
;

1859 i‡(
	`ngx_öë_addr
(
«me
.
d©a
,Çame.
Àn
Ë!
INADDR_NONE
) {

1860 
d⁄e
;

1868 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
«me
.
Àn
 + 1);

1869 i‡(
p
 =
NULL
) {

1870  
NGX_ERROR
;

1873 (Ë
	`ngx_˝y°∫
(
p
, 
«me
.
d©a
,Çame.
Àn
 + 1);

1875 
«me
.
d©a
 = 
p
;

1877 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1878 "up°ªam SSL sîvîÇame: \"%s\"", 
«me
.
d©a
);

1880 i‡(
	`SSL_£t_é£xt_ho°_«me
(
c
->
s¶
->
c⁄√˘i⁄
,

1881 (*Ë
«me
.
d©a
)

1884 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1885 "SSL_£t_é£xt_ho°_«me(\"%s\"ËÁûed", 
«me
.
d©a
);

1886  
NGX_ERROR
;

1891 
d⁄e
:

1893 
u
->
s¶_«me
 = 
«me
;

1895  
NGX_OK
;

1896 
	}
}

1901 
ngx_öt_t


1902 
	$ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1904 
off_t
 
fûe_pos
;

1905 
ngx_chaö_t
 *
˛
;

1907 i‡(
u
->
	`ªöô_ªque°
(
r
Ë!
NGX_OK
) {

1908  
NGX_ERROR
;

1911 
u
->
kì∑live
 = 0;

1912 
u
->
upgøde
 = 0;

1914 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1915 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1916 
u
->
hódîs_ö
.
œ°_modifõd_time
 = -1;

1918 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1919 (
ngx_èbÀ_ñt_t
))

1920 !
NGX_OK
)

1922  
NGX_ERROR
;

1925 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
åaûîs
, 
r
->
poﬁ
, 2,

1926 (
ngx_èbÀ_ñt_t
))

1927 !
NGX_OK
)

1929  
NGX_ERROR
;

1934 
fûe_pos
 = 0;

1936 
˛
 = 
u
->
ªque°_bufs
; cl; c»˛->
√xt
) {

1937 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1941 i‡(
˛
->
buf
->
ö_fûe
) {

1942 
˛
->
buf
->
fûe_pos
 = file_pos;

1943 
fûe_pos
 = 
˛
->
buf
->
fûe_œ°
;

1949 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


1950 && 
r
 !r->
maö
 && 
u
->
ouçut
.
buf
)

1952 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1953 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1954  
NGX_ERROR
;

1957 
u
->
ouçut
.
‰ì
->
buf
 = u->output.buf;

1958 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1960 
u
->
ouçut
.
buf
->
pos
 = u->ouçut.buf->
°¨t
;

1961 
u
->
ouçut
.
buf
->
œ°
 = u->ouçut.buf->
°¨t
;

1964 
u
->
ouçut
.
buf
 = 
NULL
;

1965 
u
->
ouçut
.
ö
 = 
NULL
;

1966 
u
->
ouçut
.
busy
 = 
NULL
;

1970 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1972 #i‡(
NGX_HTTP_CACHE
)

1974 i‡(
r
->
ˇche
) {

1975 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1980 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1982  
NGX_OK
;

1983 
	}
}

1987 
	$ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

1988 
ngx_uöt_t
 
do_wrôe
)

1990 
ngx_öt_t
 
rc
;

1991 
ngx_c⁄√˘i⁄_t
 *
c
;

1993 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1995 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1998 i‡(
u
->
°©e
->
c⁄√˘_time
 =(
ngx_m£c_t
) -1) {

1999 
u
->
°©e
->
c⁄√˘_time
 = 
ngx_cuºít_m£c
 - u->°©e->
ª•⁄£_time
;

2002 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

2003 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

2007 
c
->
log
->
a˘i⁄
 = "sendingÑequestÅo upstream";

2009 
rc
 = 
	`ngx_hâp_up°ªam_£nd_ªque°_body
(
r
, 
u
, 
do_wrôe
);

2011 i‡(
rc
 =
NGX_ERROR
) {

2012 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

2016 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

2017 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2021 i‡(
rc
 =
NGX_AGAIN
) {

2022 i‡(!
c
->
wrôe
->
ªady
 || 
u
->
ªque°_body_blocked
) {

2023 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

2025 } i‡(
c
->
wrôe
->
timî_£t
) {

2026 
	`ngx_dñ_timî
(
c
->
wrôe
);

2029 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
Ë!
NGX_OK
) {

2030 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2031 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2035 i‡(
c
->
wrôe
->
ªady
 && c->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

2036 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

2037 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

2038 
ngx_t˝_push_n
 " failed");

2039 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2040 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2044 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

2052 i‡(
c
->
wrôe
->
timî_£t
) {

2053 
	`ngx_dñ_timî
(
c
->
wrôe
);

2056 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

2057 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

2058 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

2059 
ngx_t˝_push_n
 " failed");

2060 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2061 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2065 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

2068 i‡(!
u
->
c⁄f
->
¥e£rve_ouçut
) {

2069 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

2072 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

2073 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2074 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2078 i‡(!
u
->
ªque°_body_£¡
) {

2079 
u
->
ªque°_body_£¡
 = 1;

2081 i‡(
u
->
hódî_£¡
) {

2085 
	`ngx_add_timî
(
c
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2087 i‡(
c
->
ªad
->
ªady
) {

2088 
	`ngx_hâp_up°ªam_¥o˚ss_hódî
(
r
, 
u
);

2092 
	}
}

2095 
ngx_öt_t


2096 
	$ngx_hâp_up°ªam_£nd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

2097 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
do_wrôe
)

2099 
ngx_öt_t
 
rc
;

2100 
ngx_chaö_t
 *
out
, *
˛
, *
 
;

2101 
ngx_c⁄√˘i⁄_t
 *
c
;

2102 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2104 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2107 i‡(!
r
->
ªque°_body_no_buf„rög
) {

2111 i‡(!
u
->
ªque°_£¡
) {

2112 
u
->
ªque°_£¡
 = 1;

2113 
out
 = 
u
->
ªque°_bufs
;

2116 
out
 = 
NULL
;

2119 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, 
out
);

2121 i‡(
rc
 =
NGX_AGAIN
) {

2122 
u
->
ªque°_body_blocked
 = 1;

2125 
u
->
ªque°_body_blocked
 = 0;

2128  
rc
;

2131 i‡(!
u
->
ªque°_£¡
) {

2132 
u
->
ªque°_£¡
 = 1;

2133 
out
 = 
u
->
ªque°_bufs
;

2135 i‡(
r
->
ªque°_body
->
bufs
) {

2136 
˛
 = 
out
; cl->
√xt
; cl = out->next) { }

2137 
˛
->
√xt
 = 
r
->
ªque°_body
->
bufs
;

2138 
r
->
ªque°_body
->
bufs
 = 
NULL
;

2141 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2142 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2144 i‡(
˛cf
->
t˝_nodñay
 && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

2145  
NGX_ERROR
;

2148 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_ªad_ªque°_h™dÀr
;

2151 
out
 = 
NULL
;

2156 i‡(
do_wrôe
) {

2157 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, 
out
);

2159 i‡(
rc
 =
NGX_ERROR
) {

2160  
NGX_ERROR
;

2163 
out
) {

2164 
 
 = 
out
;

2165 
out
 = out->
√xt
;

2166 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

2169 i‡(
rc
 =
NGX_AGAIN
) {

2170 
u
->
ªque°_body_blocked
 = 1;

2173 
u
->
ªque°_body_blocked
 = 0;

2176 i‡(
rc
 =
NGX_OK
 && !
r
->
ªadög_body
) {

2181 i‡(
r
->
ªadög_body
) {

2184 
rc
 = 
	`ngx_hâp_ªad_unbuf„ªd_ªque°_body
(
r
);

2186 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

2187  
rc
;

2190 
out
 = 
r
->
ªque°_body
->
bufs
;

2191 
r
->
ªque°_body
->
bufs
 = 
NULL
;

2196 i‡(
out
 =
NULL
) {

2197 
rc
 = 
NGX_AGAIN
;

2201 
do_wrôe
 = 1;

2204 i‡(!
r
->
ªadög_body
) {

2205 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

2206 
r
->
ªad_evít_h™dÀr
 =

2207 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

2211  
rc
;

2212 
	}
}

2216 
	$ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2217 
ngx_hâp_up°ªam_t
 *
u
)

2219 
ngx_c⁄√˘i⁄_t
 *
c
;

2221 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2223 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2226 i‡(
c
->
wrôe
->
timedout
) {

2227 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

2231 #i‡(
NGX_HTTP_SSL
)

2233 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

2234 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

2240 i‡(
u
->
hódî_£¡
 && !u->
c⁄f
->
¥e£rve_ouçut
) {

2241 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

2243 (Ë
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0);

2248 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 1);

2249 
	}
}

2253 
	$ngx_hâp_up°ªam_ªad_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2255 
ngx_c⁄√˘i⁄_t
 *
c
;

2256 
ngx_hâp_up°ªam_t
 *
u
;

2258 
c
 = 
r
->
c⁄√˘i⁄
;

2259 
u
 = 
r
->
up°ªam
;

2261 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2264 i‡(
c
->
ªad
->
timedout
) {

2265 
c
->
timedout
 = 1;

2266 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2270 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 0);

2271 
	}
}

2275 
	$ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2277 
ssize_t
 
n
;

2278 
ngx_öt_t
 
rc
;

2279 
ngx_c⁄√˘i⁄_t
 *
c
;

2281 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2283 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2286 
c
->
log
->
a˘i⁄
 = "readingÑesponse header from upstream";

2288 i‡(
c
->
ªad
->
timedout
) {

2289 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

2293 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

2294 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

2298 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

2299 
u
->
buf„r
.
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, u->
c⁄f
->
buf„r_size
);

2300 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

2301 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2302 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2306 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2307 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2308 
u
->
buf„r
.
íd
 = u->buf„r.
°¨t
 + u->
c⁄f
->
buf„r_size
;

2309 
u
->
buf„r
.
ãmp‹¨y
 = 1;

2311 
u
->
buf„r
.
èg
 = u->
ouçut
.tag;

2313 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

2314 (
ngx_èbÀ_ñt_t
))

2315 !
NGX_OK
)

2317 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2318 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2322 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
åaûîs
, 
r
->
poﬁ
, 2,

2323 (
ngx_èbÀ_ñt_t
))

2324 !
NGX_OK
)

2326 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2327 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2331 #i‡(
NGX_HTTP_CACHE
)

2333 i‡(
r
->
ˇche
) {

2334 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

2335 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2342 
n
 = 
c
->
	`ªcv
(c, 
u
->
buf„r
.
œ°
, u->buf„r.
íd
 - u->buffer.last);

2344 i‡(
n
 =
NGX_AGAIN
) {

2346 
	`ngx_add_timî
(
ªv
, 
u
->
ªad_timeout
);

2349 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

2350 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2351 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2358 i‡(
n
 == 0) {

2359 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

2363 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

2364 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

2368 
u
->
°©e
->
byãs_ª˚ived
 +
n
;

2370 
u
->
buf„r
.
œ°
 +
n
;

2373 
u
->
vÆid_hódî_ö
 = 0;

2375 
u
->
≥î
.
ˇched
 = 0;

2378 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

2380 i‡(
rc
 =
NGX_AGAIN
) {

2382 i‡(
u
->
buf„r
.
œ°
 =u->buf„r.
íd
) {

2383 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

2386 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
,

2387 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

2397 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

2398 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

2402 i‡(
rc
 =
NGX_ERROR
) {

2403 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2404 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2410 
u
->
°©e
->
hódî_time
 = 
ngx_cuºít_m£c
 - u->°©e->
ª•⁄£_time
;

2412 i‡(
u
->
hódîs_ö
.
°©us_n
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

2414 i‡(
	`ngx_hâp_up°ªam_ã°_√xt
(
r
, 
u
Ë=
NGX_OK
) {

2418 i‡(
	`ngx_hâp_up°ªam_öãr˚±_îr‹s
(
r
, 
u
Ë=
NGX_OK
) {

2423 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

2427 
	`ngx_hâp_up°ªam_£nd_ª•⁄£
(
r
, 
u
);

2428 
	}
}

2431 
ngx_öt_t


2432 
	$ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2434 
ngx_m£c_t
 
timeout
;

2435 
ngx_uöt_t
 
°©us
, 
mask
;

2436 
ngx_hâp_up°ªam_√xt_t
 *
un
;

2438 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2440 
un
 = 
ngx_hâp_up°ªam_√xt_îr‹s
; un->
°©us
; un++) {

2442 i‡(
°©us
 !
un
->status) {

2446 
timeout
 = 
u
->
c⁄f
->
√xt_up°ªam_timeout
;

2448 i‡(
u
->
ªque°_£¡


2449 && (
r
->
mëhod
 & (
NGX_HTTP_POST
|
NGX_HTTP_LOCK
|
NGX_HTTP_PATCH
)))

2451 
mask
 = 
un
->mask | 
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
;

2454 
mask
 = 
un
->mask;

2457 i‡(
u
->
≥î
.
åõs
 > 1

2458 && ((
u
->
c⁄f
->
√xt_up°ªam
 & 
mask
) == mask)

2459 && !(
u
->
ªque°_£¡
 && 
r
->
ªque°_body_no_buf„rög
)

2460 && !(
timeout
 && 
ngx_cuºít_m£c
 - 
u
->
≥î
.
°¨t_time
 >=Åimeout))

2462 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
un
->
mask
);

2463  
NGX_OK
;

2466 #i‡(
NGX_HTTP_CACHE
)

2468 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


2469 && ((
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
un
->
mask
Ë|| 
r
->
ˇche
->
°Æe_îr‹
))

2471 
ngx_öt_t
 
rc
;

2473 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

2475 i‡(
rc
 !
NGX_OK
) {

2476 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2477  
NGX_OK
;

2480 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

2481 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

2483 i‡(
rc
 =
NGX_DONE
) {

2484  
NGX_OK
;

2487 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

2488 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

2491 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2492  
NGX_OK
;

2498 #i‡(
NGX_HTTP_CACHE
)

2500 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED


2501 && 
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


2502 && 
u
->
c⁄f
->
ˇche_ªvÆid©e
)

2504 
time_t
 
now
, 
vÆid
, 
upd©ög
, 
îr‹
;

2505 
ngx_öt_t
 
rc
;

2507 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2510 
now
 = 
	`ngx_time
();

2512 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2513 
upd©ög
 = 
r
->
ˇche
->
upd©ög_£c
;

2514 
îr‹
 = 
r
->
ˇche
->
îr‹_£c
;

2516 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

2518 i‡(
rc
 !
NGX_OK
) {

2519 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2520  
NGX_OK
;

2523 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_REVALIDATED
;

2524 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

2526 i‡(
rc
 =
NGX_DONE
) {

2527  
NGX_OK
;

2530 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

2531 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

2534 i‡(
vÆid
 == 0) {

2535 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2536 
upd©ög
 = 
r
->
ˇche
->
upd©ög_£c
;

2537 
îr‹
 = 
r
->
ˇche
->
îr‹_£c
;

2540 i‡(
vÆid
 == 0) {

2541 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2542 
u
->
hódîs_ö
.
°©us_n
);

2543 i‡(
vÆid
) {

2544 
vÆid
 = 
now
 + valid;

2548 i‡(
vÆid
) {

2549 
r
->
ˇche
->
vÆid_£c
 = 
vÆid
;

2550 
r
->
ˇche
->
upd©ög_£c
 = 
upd©ög
;

2551 
r
->
ˇche
->
îr‹_£c
 = 
îr‹
;

2553 
r
->
ˇche
->
d©e
 = 
now
;

2555 
	`ngx_hâp_fûe_ˇche_upd©e_hódî
(
r
);

2558 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2559  
NGX_OK
;

2564  
NGX_DECLINED
;

2565 
	}
}

2568 
ngx_öt_t


2569 
	$ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

2570 
ngx_hâp_up°ªam_t
 *
u
)

2572 
ngx_öt_t
 
°©us
;

2573 
ngx_uöt_t
 
i
;

2574 
ngx_èbÀ_ñt_t
 *
h
;

2575 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

2576 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2578 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2580 i‡(
°©us
 =
NGX_HTTP_NOT_FOUND
 && 
u
->
c⁄f
->
öãr˚±_404
) {

2581 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_NOT_FOUND
);

2582  
NGX_OK
;

2585 i‡(!
u
->
c⁄f
->
öãr˚±_îr‹s
) {

2586  
NGX_DECLINED
;

2589 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2591 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

2592  
NGX_DECLINED
;

2595 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

2596 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

2598 i‡(
îr_∑ge
[
i
].
°©us
 == status) {

2600 i‡(
°©us
 =
NGX_HTTP_UNAUTHORIZED


2601 && 
u
->
hódîs_ö
.
www_authítiˇã
)

2603 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

2605 i‡(
h
 =
NULL
) {

2606 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2607 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2608  
NGX_OK
;

2611 *
h
 = *
u
->
hódîs_ö
.
www_authítiˇã
;

2613 
r
->
hódîs_out
.
www_authítiˇã
 = 
h
;

2616 #i‡(
NGX_HTTP_CACHE
)

2618 i‡(
r
->
ˇche
) {

2620 i‡(
u
->
ˇchóbÀ
) {

2621 
time_t
 
vÆid
;

2623 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2625 i‡(
vÆid
 == 0) {

2626 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2627 
°©us
);

2628 i‡(
vÆid
) {

2629 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

2633 i‡(
vÆid
) {

2634 
r
->
ˇche
->
îr‹
 = 
°©us
;

2638 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2641 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

2643  
NGX_OK
;

2647  
NGX_DECLINED
;

2648 
	}
}

2651 
ngx_öt_t


2652 
	$ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

2654 
îr
;

2655 
sockÀn_t
 
Àn
;

2657 #i‡(
NGX_HAVE_KQUEUE
)

2659 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2660 i‡(
c
->
wrôe
->
≥ndög_eof
 || c->
ªad
->pending_eof) {

2661 i‡(
c
->
wrôe
->
≥ndög_eof
) {

2662 
îr
 = 
c
->
wrôe
->
kq_î∫o
;

2665 
îr
 = 
c
->
ªad
->
kq_î∫o
;

2668 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

2669 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

2671  
NGX_ERROR
;

2677 
îr
 = 0;

2678 
Àn
 = ();

2685 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

2688 
îr
 = 
ngx_sockë_î∫o
;

2691 i‡(
îr
) {

2692 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

2693 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

2694  
NGX_ERROR
;

2698  
NGX_OK
;

2699 
	}
}

2702 
ngx_öt_t


2703 
	$ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2705 
ngx_°r_t
 
uri
, 
¨gs
;

2706 
ngx_uöt_t
 
i
, 
Êags
;

2707 
ngx_li°_∑π_t
 *
∑π
;

2708 
ngx_èbÀ_ñt_t
 *
h
;

2709 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

2710 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

2712 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

2714 i‡(
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘


2715 && !(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
))

2717 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DECLINED
);

2719 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

2720 
h
 = 
∑π
->
ñts
;

2722 
i
 = 0; ; i++) {

2724 i‡(
i
 >
∑π
->
√…s
) {

2725 i‡(
∑π
->
√xt
 =
NULL
) {

2729 
∑π
 =Ö¨t->
√xt
;

2730 
h
 = 
∑π
->
ñts
;

2731 
i
 = 0;

2734 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2735 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2737 i‡(
hh
 && hh->
ªdúe˘
) {

2738 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

2739 
	`ngx_hâp_föÆize_ªque°
(
r
,

2740 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2741  
NGX_DONE
;

2746 
uri
 = 
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘
->
vÆue
;

2748 i‡(
uri
.
d©a
[0] == '@') {

2749 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

2752 
	`ngx_°r_nuŒ
(&
¨gs
);

2753 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2755 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2756 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

2757  
NGX_DONE
;

2760 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

2761 
r
->
mëhod
 = 
NGX_HTTP_GET
;

2762 
r
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2765 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

2768 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

2769  
NGX_DONE
;

2772 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

2773 
h
 = 
∑π
->
ñts
;

2775 
i
 = 0; ; i++) {

2777 i‡(
i
 >
∑π
->
√…s
) {

2778 i‡(
∑π
->
√xt
 =
NULL
) {

2782 
∑π
 =Ö¨t->
√xt
;

2783 
h
 = 
∑π
->
ñts
;

2784 
i
 = 0;

2787 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

2788 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

2793 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2794 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2796 i‡(
hh
) {

2797 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

2798 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2799 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2800  
NGX_DONE
;

2806 i‡(
	`ngx_hâp_up°ªam_c›y_hódî_löe
(
r
, &
h
[
i
], 0Ë!
NGX_OK
) {

2807 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2808 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2809  
NGX_DONE
;

2813 i‡(
r
->
hódîs_out
.
£rvî
 &&Ñ->hódîs_out.£rvî->
vÆue
.
d©a
 =
NULL
) {

2814 
r
->
hódîs_out
.
£rvî
->
hash
 = 0;

2817 i‡(
r
->
hódîs_out
.
d©e
 &&Ñ->hódîs_out.d©e->
vÆue
.
d©a
 =
NULL
) {

2818 
r
->
hódîs_out
.
d©e
->
hash
 = 0;

2821 
r
->
hódîs_out
.
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2822 
r
->
hódîs_out
.
°©us_löe
 = 
u
->
hódîs_ö
.status_line;

2824 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
u
->
hódîs_ö
.content_length_n;

2826 
r
->
dißbÀ_nŸ_modifõd
 = !
u
->
ˇchóbÀ
;

2828 i‡(
u
->
c⁄f
->
f‹˚_ønges
) {

2829 
r
->
Ælow_ønges
 = 1;

2830 
r
->
sögÀ_ønge
 = 1;

2832 #i‡(
NGX_HTTP_CACHE
)

2833 i‡(
r
->
ˇched
) {

2834 
r
->
sögÀ_ønge
 = 0;

2839 
u
->
Àngth
 = -1;

2841  
NGX_OK
;

2842 
	}
}

2845 
ngx_öt_t


2846 
	$ngx_hâp_up°ªam_¥o˚ss_åaûîs
(
ngx_hâp_ªque°_t
 *
r
,

2847 
ngx_hâp_up°ªam_t
 *
u
)

2849 
ngx_uöt_t
 
i
;

2850 
ngx_li°_∑π_t
 *
∑π
;

2851 
ngx_èbÀ_ñt_t
 *
h
, *
ho
;

2853 i‡(!
u
->
c⁄f
->
∑ss_åaûîs
) {

2854  
NGX_OK
;

2857 
∑π
 = &
u
->
hódîs_ö
.
åaûîs
.part;

2858 
h
 = 
∑π
->
ñts
;

2860 
i
 = 0; ; i++) {

2862 i‡(
i
 >
∑π
->
√…s
) {

2863 i‡(
∑π
->
√xt
 =
NULL
) {

2867 
∑π
 =Ö¨t->
√xt
;

2868 
h
 = 
∑π
->
ñts
;

2869 
i
 = 0;

2872 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

2873 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

2878 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
åaûîs
);

2879 i‡(
ho
 =
NULL
) {

2880  
NGX_ERROR
;

2883 *
ho
 = 
h
[
i
];

2886  
NGX_OK
;

2887 
	}
}

2891 
	$ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2893 
ssize_t
 
n
;

2894 
ngx_öt_t
 
rc
;

2895 
ngx_evít_pùe_t
 *
p
;

2896 
ngx_c⁄√˘i⁄_t
 *
c
;

2897 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2899 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

2901 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
po°_a˘i⁄
) {

2902 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2906 
u
->
hódî_£¡
 = 1;

2908 i‡(
u
->
upgøde
) {

2910 #i‡(
NGX_HTTP_CACHE
)

2912 i‡(
r
->
ˇche
) {

2913 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2918 
	`ngx_hâp_up°ªam_upgøde
(
r
, 
u
);

2922 
c
 = 
r
->
c⁄√˘i⁄
;

2924 i‡(
r
->
hódî_⁄ly
) {

2926 i‡(!
u
->
buf„rög
) {

2927 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2931 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
) {

2932 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2936 
u
->
pùe
->
down°ªam_îr‹
 = 1;

2939 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


2940 && 
r
 =r->
maö
 && !r->
¥e£rve_body


2941 && !
u
->
c⁄f
->
¥e£rve_ouçut
)

2943 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
);

2944 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2947 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2949 i‡(!
u
->
buf„rög
) {

2951 #i‡(
NGX_HTTP_CACHE
)

2953 i‡(
r
->
ˇche
) {

2954 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2959 i‡(
u
->
öput_fûãr
 =
NULL
) {

2960 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2961 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2962 
u
->
öput_fûãr_˘x
 = 
r
;

2965 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
;

2966 
r
->
wrôe_evít_h™dÀr
 =

2967 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
;

2969 
r
->
limô_øã
 = 0;

2971 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2972 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2976 i‡(
˛cf
->
t˝_nodñay
 && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

2977 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2981 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2983 i‡(
n
) {

2984 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2986 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2988 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2989 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2993 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
r
);

2996 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2997 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2999 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

3000 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3004 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady
 || u->
Àngth
 == 0) {

3005 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
r
, 
u
);

3014 #i‡(
NGX_HTTP_CACHE
)

3016 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

3017 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ˇche
->
fûe
.
fd
);

3018 
r
->
ˇche
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3021 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
no_ˇche
)) {

3023 
NGX_ERROR
:

3024 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3027 
NGX_DECLINED
:

3028 
u
->
ˇchóbÀ
 = 0;

3033 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_BYPASS
) {

3037 i‡(
	`ngx_hâp_fûe_ˇche_¸óã
(
r
Ë!
NGX_OK
) {

3038 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3046 i‡(
u
->
ˇchóbÀ
) {

3047 
time_t
 
now
, 
vÆid
;

3049 
now
 = 
	`ngx_time
();

3051 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

3053 i‡(
vÆid
 == 0) {

3054 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

3055 
u
->
hódîs_ö
.
°©us_n
);

3056 i‡(
vÆid
) {

3057 
r
->
ˇche
->
vÆid_£c
 = 
now
 + 
vÆid
;

3061 i‡(
vÆid
) {

3062 
r
->
ˇche
->
d©e
 = 
now
;

3063 
r
->
ˇche
->
body_°¨t
 = (
u_sh‹t
Ë(
u
->
buf„r
.
pos
 - u->buf„r.
°¨t
);

3065 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


3066 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_PARTIAL_CONTENT
)

3068 
r
->
ˇche
->
œ°_modifõd
 = 
u
->
hódîs_ö
.
œ°_modifõd_time
;

3070 i‡(
u
->
hódîs_ö
.
ëag
) {

3071 
r
->
ˇche
->
ëag
 = 
u
->
hódîs_ö
.ëag->
vÆue
;

3074 
	`ngx_°r_nuŒ
(&
r
->
ˇche
->
ëag
);

3078 
r
->
ˇche
->
œ°_modifõd
 = -1;

3079 
	`ngx_°r_nuŒ
(&
r
->
ˇche
->
ëag
);

3082 i‡(
	`ngx_hâp_fûe_ˇche_£t_hódî
(
r
, 
u
->
buf„r
.
°¨t
Ë!
NGX_OK
) {

3083 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3088 
u
->
ˇchóbÀ
 = 0;

3092 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3093 "hâ∞ˇchóbÀ: %d", 
u
->
ˇchóbÀ
);

3095 i‡(
u
->
ˇchóbÀ
 =0 && 
r
->
ˇche
) {

3096 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

3099 i‡(
r
->
hódî_⁄ly
 && !
u
->
ˇchóbÀ
 && !u->
°‹e
) {

3100 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3106 
p
 = 
u
->
pùe
;

3108 
p
->
ouçut_fûãr
 = 
ngx_hâp_up°ªam_ouçut_fûãr
;

3109 
p
->
ouçut_˘x
 = 
r
;

3110 
p
->
èg
 = 
u
->
ouçut
.tag;

3111 
p
->
bufs
 = 
u
->
c⁄f
->bufs;

3112 
p
->
busy_size
 = 
u
->
c⁄f
->
busy_buf„rs_size
;

3113 
p
->
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3114 
p
->
down°ªam
 = 
c
;

3115 
p
->
poﬁ
 = 
r
->pool;

3116 
p
->
log
 = 
c
->log;

3117 
p
->
limô_øã
 = 
u
->
c⁄f
->limit_rate;

3118 
p
->
°¨t_£c
 = 
	`ngx_time
();

3120 
p
->
ˇchóbÀ
 = 
u
->ˇchóbÀ || u->
°‹e
;

3122 
p
->
ãmp_fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

3123 i‡(
p
->
ãmp_fûe
 =
NULL
) {

3124 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3128 
p
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3129 
p
->
ãmp_fûe
->
fûe
.
log
 = 
c
->log;

3130 
p
->
ãmp_fûe
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

3131 
p
->
ãmp_fûe
->
poﬁ
 = 
r
->pool;

3133 i‡(
p
->
ˇchóbÀ
) {

3134 
p
->
ãmp_fûe
->
≥rsi°ít
 = 1;

3136 #i‡(
NGX_HTTP_CACHE
)

3137 i‡(
r
->
ˇche
 && !r->ˇche->
fûe_ˇche
->
u£_ãmp_∑th
) {

3138 
p
->
ãmp_fûe
->
∑th
 = 
r
->
ˇche
->
fûe_ˇche
->path;

3139 
p
->
ãmp_fûe
->
fûe
.
«me
 = 
r
->
ˇche
->file.name;

3144 
p
->
ãmp_fûe
->
log_Àvñ
 = 
NGX_LOG_WARN
;

3145 
p
->
ãmp_fûe
->
w¨n
 = "an upstreamÑesponse is buffered "

3149 
p
->
max_ãmp_fûe_size
 = 
u
->
c⁄f
->max_temp_file_size;

3150 
p
->
ãmp_fûe_wrôe_size
 = 
u
->
c⁄f
->temp_file_write_size;

3152 #i‡(
NGX_THREADS
)

3153 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_THREADS
 && clcf->
aio_wrôe
) {

3154 
p
->
thªad_h™dÀr
 = 
ngx_hâp_up°ªam_thªad_h™dÀr
;

3155 
p
->
thªad_˘x
 = 
r
;

3159 
p
->
¥îód_bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

3160 i‡(
p
->
¥îód_bufs
 =
NULL
) {

3161 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3165 
p
->
¥îód_bufs
->
buf
 = &
u
->
buf„r
;

3166 
p
->
¥îód_bufs
->
√xt
 = 
NULL
;

3167 
u
->
buf„r
.
ªcy˛ed
 = 1;

3169 
p
->
¥îód_size
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

3171 i‡(
u
->
ˇchóbÀ
) {

3173 
p
->
buf_to_fûe
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3174 i‡(
p
->
buf_to_fûe
 =
NULL
) {

3175 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3179 
p
->
buf_to_fûe
->
°¨t
 = 
u
->
buf„r
.start;

3180 
p
->
buf_to_fûe
->
pos
 = 
u
->
buf„r
.
°¨t
;

3181 
p
->
buf_to_fûe
->
œ°
 = 
u
->
buf„r
.
pos
;

3182 
p
->
buf_to_fûe
->
ãmp‹¨y
 = 1;

3185 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

3187 
p
->
sögÀ_buf
 = 1;

3191 
p
->
‰ì_bufs
 = 1;

3197 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

3199 i‡(
u
->
c⁄f
->
cy˛ic_ãmp_fûe
) {

3207 
p
->
cy˛ic_ãmp_fûe
 = 1;

3208 
c
->
£ndfûe
 = 0;

3211 
p
->
cy˛ic_ãmp_fûe
 = 0;

3214 
p
->
ªad_timeout
 = 
u
->
c⁄f
->read_timeout;

3215 
p
->
£nd_timeout
 = 
˛cf
->send_timeout;

3216 
p
->
£nd_low©
 = 
˛cf
->send_lowat;

3218 
p
->
Àngth
 = -1;

3220 i‡(
u
->
öput_fûãr_öô


3221 && 
u
->
	`öput_fûãr_öô
(
p
->
öput_˘x
Ë!
NGX_OK
)

3223 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3227 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
;

3228 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
;

3230 
	`ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
r
, 
u
);

3231 
	}
}

3235 
	$ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3237 
ngx_c⁄√˘i⁄_t
 *
c
;

3238 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3240 
c
 = 
r
->
c⁄√˘i⁄
;

3241 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3245 i‡(
r
 !r->
maö
) {

3246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

3248 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3252 
r
->
kì∑live
 = 0;

3253 
c
->
log
->
a˘i⁄
 = "proxying upgraded connection";

3255 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
;

3256 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
;

3257 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
;

3258 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
;

3260 i‡(
˛cf
->
t˝_nodñay
) {

3262 i‡(
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

3263 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3267 i‡(
	`ngx_t˝_nodñay
(
u
->
≥î
.
c⁄√˘i⁄
Ë!
NGX_OK
) {

3268 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3273 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

3274 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3278 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady


3279 || 
u
->
buf„r
.
pos
 !u->buf„r.
œ°
)

3281 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

3282 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

3286 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

3287 
	}
}

3291 
	$ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3293 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 0);

3294 
	}
}

3298 
	$ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3300 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

3301 
	}
}

3305 
	$ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3306 
ngx_hâp_up°ªam_t
 *
u
)

3308 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 0);

3309 
	}
}

3313 
	$ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3314 
ngx_hâp_up°ªam_t
 *
u
)

3316 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

3317 
	}
}

3321 
	$ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

3322 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
)

3324 
size_t
 
size
;

3325 
ssize_t
 
n
;

3326 
ngx_buf_t
 *
b
;

3327 
ngx_c⁄√˘i⁄_t
 *
c
, *
down°ªam
, *
up°ªam
, *
d°
, *
§c
;

3328 
ngx_hâp_up°ªam_t
 *
u
;

3329 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3331 
c
 = 
r
->
c⁄√˘i⁄
;

3332 
u
 = 
r
->
up°ªam
;

3334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3335 "hâ∞up°ªamÖro˚s†upgøded, fu:%ui", 
‰om_up°ªam
);

3337 
down°ªam
 = 
c
;

3338 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3340 i‡(
down°ªam
->
wrôe
->
timedout
) {

3341 
c
->
timedout
 = 1;

3342 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3343 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

3347 i‡(
up°ªam
->
ªad
->
timedout
 || up°ªam->
wrôe
->timedout) {

3348 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3349 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

3353 i‡(
‰om_up°ªam
) {

3354 
§c
 = 
up°ªam
;

3355 
d°
 = 
down°ªam
;

3356 
b
 = &
u
->
buf„r
;

3359 
§c
 = 
down°ªam
;

3360 
d°
 = 
up°ªam
;

3361 
b
 = &
u
->
‰om_˛õ¡
;

3363 i‡(
r
->
hódî_ö
->
œ°
 >Ñ->hódî_ö->
pos
) {

3364 
b
 = 
r
->
hódî_ö
;

3365 
b
->
íd
 = b->
œ°
;

3366 
do_wrôe
 = 1;

3369 i‡(
b
->
°¨t
 =
NULL
) {

3370 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
u
->
c⁄f
->
buf„r_size
);

3371 i‡(
b
->
°¨t
 =
NULL
) {

3372 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3376 
b
->
pos
 = b->
°¨t
;

3377 
b
->
œ°
 = b->
°¨t
;

3378 
b
->
íd
 = b->
°¨t
 + 
u
->
c⁄f
->
buf„r_size
;

3379 
b
->
ãmp‹¨y
 = 1;

3380 
b
->
èg
 = 
u
->
ouçut
.tag;

3386 i‡(
do_wrôe
) {

3388 
size
 = 
b
->
œ°
 - b->
pos
;

3390 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

3392 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

3394 i‡(
n
 =
NGX_ERROR
) {

3395 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3399 i‡(
n
 > 0) {

3400 
b
->
pos
 +
n
;

3402 i‡(
b
->
pos
 =b->
œ°
) {

3403 
b
->
pos
 = b->
°¨t
;

3404 
b
->
œ°
 = b->
°¨t
;

3410 
size
 = 
b
->
íd
 - b->
œ°
;

3412 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

3414 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

3416 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

3420 i‡(
n
 > 0) {

3421 
do_wrôe
 = 1;

3422 
b
->
œ°
 +
n
;

3424 i‡(
‰om_up°ªam
) {

3425 
u
->
°©e
->
byãs_ª˚ived
 +
n
;

3431 i‡(
n
 =
NGX_ERROR
) {

3432 
§c
->
ªad
->
eof
 = 1;

3439 i‡((
up°ªam
->
ªad
->
eof
 && 
u
->
buf„r
.
pos
 =u->buf„r.
œ°
)

3440 || (
down°ªam
->
ªad
->
eof
 && 
u
->
‰om_˛õ¡
.
pos
 =u->‰om_˛õ¡.
œ°
)

3441 || (
down°ªam
->
ªad
->
eof
 && 
up°ªam
->read->eof))

3443 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3445 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3449 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3451 i‡(
	`ngx_h™dÀ_wrôe_evít
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
)

3452 !
NGX_OK
)

3454 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3458 i‡(
up°ªam
->
wrôe
->
a˘ive
 && !up°ªam->wrôe->
ªady
) {

3459 
	`ngx_add_timî
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

3461 } i‡(
up°ªam
->
wrôe
->
timî_£t
) {

3462 
	`ngx_dñ_timî
(
up°ªam
->
wrôe
);

3465 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

3466 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3470 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

3471 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

3473 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

3474 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

3477 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

3478 !
NGX_OK
)

3480 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3484 i‡(
	`ngx_h™dÀ_ªad_evít
(
down°ªam
->
ªad
, 0Ë!
NGX_OK
) {

3485 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3489 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

3490 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

3492 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

3493 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

3495 
	}
}

3499 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3501 
ngx_evít_t
 *
wev
;

3502 
ngx_c⁄√˘i⁄_t
 *
c
;

3503 
ngx_hâp_up°ªam_t
 *
u
;

3505 
c
 = 
r
->
c⁄√˘i⁄
;

3506 
u
 = 
r
->
up°ªam
;

3507 
wev
 = 
c
->
wrôe
;

3509 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3512 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

3514 i‡(
wev
->
timedout
) {

3515 
c
->
timedout
 = 1;

3516 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3517 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

3521 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 1);

3522 
	}
}

3526 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3527 
ngx_hâp_up°ªam_t
 *
u
)

3529 
ngx_c⁄√˘i⁄_t
 *
c
;

3531 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3533 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3536 
c
->
log
->
a˘i⁄
 = "reading upstream";

3538 i‡(
c
->
ªad
->
timedout
) {

3539 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3540 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

3544 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 0);

3545 
	}
}

3549 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3550 
ngx_uöt_t
 
do_wrôe
)

3552 
size_t
 
size
;

3553 
ssize_t
 
n
;

3554 
ngx_buf_t
 *
b
;

3555 
ngx_öt_t
 
rc
;

3556 
ngx_c⁄√˘i⁄_t
 *
down°ªam
, *
up°ªam
;

3557 
ngx_hâp_up°ªam_t
 *
u
;

3558 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3560 
u
 = 
r
->
up°ªam
;

3561 
down°ªam
 = 
r
->
c⁄√˘i⁄
;

3562 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3564 
b
 = &
u
->
buf„r
;

3566 
do_wrôe
 = do_wrôê|| 
u
->
Àngth
 == 0;

3570 i‡(
do_wrôe
) {

3572 i‡(
u
->
out_bufs
 || u->
busy_bufs
 || 
down°ªam
->
buf„ªd
) {

3573 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
u
->
out_bufs
);

3575 i‡(
rc
 =
NGX_ERROR
) {

3576 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3580 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
u
->
‰ì_bufs
, &u->
busy_bufs
,

3581 &
u
->
out_bufs
, u->
ouçut
.
èg
);

3584 i‡(
u
->
busy_bufs
 =
NULL
) {

3586 i‡(
u
->
Àngth
 == 0

3587 || (
up°ªam
->
ªad
->
eof
 && 
u
->
Àngth
 == -1))

3589 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3593 i‡(
up°ªam
->
ªad
->
eof
) {

3594 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
up°ªam
->
log
, 0,

3597 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3598 
NGX_HTTP_BAD_GATEWAY
);

3602 i‡(
up°ªam
->
ªad
->
îr‹
) {

3603 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3604 
NGX_HTTP_BAD_GATEWAY
);

3608 
b
->
pos
 = b->
°¨t
;

3609 
b
->
œ°
 = b->
°¨t
;

3613 
size
 = 
b
->
íd
 - b->
œ°
;

3615 i‡(
size
 && 
up°ªam
->
ªad
->
ªady
) {

3617 
n
 = 
up°ªam
->
	`ªcv
(up°ªam, 
b
->
œ°
, 
size
);

3619 i‡(
n
 =
NGX_AGAIN
) {

3623 i‡(
n
 > 0) {

3624 
u
->
°©e
->
byãs_ª˚ived
 +
n
;

3625 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

3627 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

3628 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3633 
do_wrôe
 = 1;

3641 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3643 i‡(
down°ªam
->
d©a
 =
r
) {

3644 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

3645 !
NGX_OK
)

3647 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3652 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

3653 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

3655 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

3656 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

3659 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

3660 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3664 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

3665 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

3667 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

3668 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

3670 
	}
}

3673 
ngx_öt_t


3674 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
)

3676  
NGX_OK
;

3677 
	}
}

3680 
ngx_öt_t


3681 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

3683 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

3685 
ngx_buf_t
 *
b
;

3686 
ngx_chaö_t
 *
˛
, **
Œ
;

3687 
ngx_hâp_up°ªam_t
 *
u
;

3689 
u
 = 
r
->
up°ªam
;

3691 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

3692 
Œ
 = &
˛
->
√xt
;

3695 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

3696 i‡(
˛
 =
NULL
) {

3697  
NGX_ERROR
;

3700 *
Œ
 = 
˛
;

3702 
˛
->
buf
->
Êush
 = 1;

3703 
˛
->
buf
->
mem‹y
 = 1;

3705 
b
 = &
u
->
buf„r
;

3707 
˛
->
buf
->
pos
 = 
b
->
œ°
;

3708 
b
->
œ°
 +
byãs
;

3709 
˛
->
buf
->
œ°
 = 
b
->last;

3710 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

3712 i‡(
u
->
Àngth
 == -1) {

3713  
NGX_OK
;

3716 
u
->
Àngth
 -
byãs
;

3718  
NGX_OK
;

3719 
	}
}

3722 #i‡(
NGX_THREADS
)

3724 
ngx_öt_t


3725 
	$ngx_hâp_up°ªam_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
, 
ngx_fûe_t
 *
fûe
)

3727 
ngx_°r_t
 
«me
;

3728 
ngx_evít_pùe_t
 *
p
;

3729 
ngx_thªad_poﬁ_t
 *
ç
;

3730 
ngx_hâp_ªque°_t
 *
r
;

3731 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3733 
r
 = 
fûe
->
thªad_˘x
;

3734 
p
 = 
r
->
up°ªam
->
pùe
;

3736 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3737 
ç
 = 
˛cf
->
thªad_poﬁ
;

3739 i‡(
ç
 =
NULL
) {

3740 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
thªad_poﬁ_vÆue
, &
«me
)

3741 !
NGX_OK
)

3743  
NGX_ERROR
;

3746 
ç
 = 
	`ngx_thªad_poﬁ_gë
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
«me
);

3748 i‡(
ç
 =
NULL
) {

3749 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3750 "thªadÖoﬁ \"%V\"ÇŸ found", &
«me
);

3751  
NGX_ERROR
;

3755 
èsk
->
evít
.
d©a
 = 
r
;

3756 
èsk
->
evít
.
h™dÀr
 = 
ngx_hâp_up°ªam_thªad_evít_h™dÀr
;

3758 i‡(
	`ngx_thªad_èsk_po°
(
ç
, 
èsk
Ë!
NGX_OK
) {

3759  
NGX_ERROR
;

3762 
r
->
maö
->
blocked
++;

3763 
r
->
aio
 = 1;

3764 
p
->
aio
 = 1;

3766  
NGX_OK
;

3767 
	}
}

3771 
	$ngx_hâp_up°ªam_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

3773 
ngx_c⁄√˘i⁄_t
 *
c
;

3774 
ngx_hâp_ªque°_t
 *
r
;

3776 
r
 = 
ev
->
d©a
;

3777 
c
 = 
r
->
c⁄√˘i⁄
;

3779 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

3781 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3782 "hâ∞up°ªamÅhªad: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

3784 
r
->
maö
->
blocked
--;

3785 
r
->
aio
 = 0;

3787 i‡(
r
->
d⁄e
) {

3794 
c
->
wrôe
->
	`h™dÀr
(c->write);

3797 
r
->
	`wrôe_evít_h™dÀr
(r);

3798 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

3800 
	}
}

3805 
ngx_öt_t


3806 
	$ngx_hâp_up°ªam_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
chaö
)

3808 
ngx_öt_t
 
rc
;

3809 
ngx_evít_pùe_t
 *
p
;

3810 
ngx_hâp_ªque°_t
 *
r
;

3812 
r
 = 
d©a
;

3813 
p
 = 
r
->
up°ªam
->
pùe
;

3815 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
chaö
);

3817 
p
->
aio
 = 
r
->aio;

3819  
rc
;

3820 
	}
}

3824 
	$ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3826 
ngx_evít_t
 *
wev
;

3827 
ngx_c⁄√˘i⁄_t
 *
c
;

3828 
ngx_evít_pùe_t
 *
p
;

3829 
ngx_hâp_up°ªam_t
 *
u
;

3831 
c
 = 
r
->
c⁄√˘i⁄
;

3832 
u
 = 
r
->
up°ªam
;

3833 
p
 = 
u
->
pùe
;

3834 
wev
 = 
c
->
wrôe
;

3836 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3839 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

3841 #i‡(
NGX_THREADS
)

3842 
p
->
aio
 = 
r
->aio;

3845 i‡(
wev
->
timedout
) {

3847 
p
->
down°ªam_îr‹
 = 1;

3848 
c
->
timedout
 = 1;

3849 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3853 i‡(
wev
->
dñayed
) {

3855 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3858 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

3859 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3865 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

3866 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3871 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
, 
u
);

3872 
	}
}

3876 
	$ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3877 
ngx_hâp_up°ªam_t
 *
u
)

3879 
ngx_evít_t
 *
ªv
;

3880 
ngx_evít_pùe_t
 *
p
;

3881 
ngx_c⁄√˘i⁄_t
 *
c
;

3883 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3884 
p
 = 
u
->
pùe
;

3885 
ªv
 = 
c
->
ªad
;

3887 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3890 
c
->
log
->
a˘i⁄
 = "reading upstream";

3892 i‡(
ªv
->
timedout
) {

3894 
p
->
up°ªam_îr‹
 = 1;

3895 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3899 i‡(
ªv
->
dñayed
) {

3901 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3904 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3905 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3911 i‡(
	`ngx_evít_pùe
(
p
, 0Ë=
NGX_ABORT
) {

3912 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3917 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
, 
u
);

3918 
	}
}

3922 
	$ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3923 
ngx_hâp_up°ªam_t
 *
u
)

3925 
ngx_ãmp_fûe_t
 *
tf
;

3926 
ngx_evít_pùe_t
 *
p
;

3928 
p
 = 
u
->
pùe
;

3930 #i‡(
NGX_THREADS
)

3932 i‡(
p
->
wrôög
 && !p->
aio
) {

3939 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

3940 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3945 i‡(
p
->
wrôög
) {

3951 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3953 i‡(
u
->
°‹e
) {

3955 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_d⁄e
) {

3957 
tf
 = 
p
->
ãmp_fûe
;

3959 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


3960 && (
p
->
up°ªam_d⁄e
 ||Ö->
Àngth
 == -1)

3961 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3962 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
tf
->
off£t
))

3964 
	`ngx_hâp_up°ªam_°‹e
(
r
, 
u
);

3969 #i‡(
NGX_HTTP_CACHE
)

3971 i‡(
u
->
ˇchóbÀ
) {

3973 i‡(
p
->
up°ªam_d⁄e
) {

3974 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
p
->
ãmp_fûe
);

3976 } i‡(
p
->
up°ªam_eof
) {

3978 
tf
 = 
p
->
ãmp_fûe
;

3980 i‡(
p
->
Àngth
 == -1

3981 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3982 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n


3983 =
tf
->
off£t
 - (
off_t
Ë
r
->
ˇche
->
body_°¨t
))

3985 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
tf
);

3988 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
tf
);

3991 } i‡(
p
->
up°ªam_îr‹
) {

3992 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
p
->
ãmp_fûe
);

3998 i‡(
p
->
up°ªam_d⁄e
 ||Ö->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
) {

3999 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4000 "hâ∞up°ªamÉxô: %p", 
p
->
out
);

4002 i‡(
p
->
up°ªam_d⁄e


4003 || (
p
->
up°ªam_eof
 &&Ö->
Àngth
 == -1))

4005 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

4009 i‡(
p
->
up°ªam_eof
) {

4010 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4014 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

4019 i‡(
p
->
down°ªam_îr‹
) {

4020 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4023 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
 && u->
≥î
.
c⁄√˘i⁄
) {

4024 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

4027 
	}
}

4031 
	$ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

4033 
size_t
 
roŸ
;

4034 
time_t
 
lm
;

4035 
ngx_°r_t
 
∑th
;

4036 
ngx_ãmp_fûe_t
 *
tf
;

4037 
ngx_ext_ª«me_fûe_t
 
ext
;

4039 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

4041 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

4045 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

4046 i‡(
tf
 =
NULL
) {

4050 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

4051 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

4052 
tf
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

4053 
tf
->
poﬁ
 = 
r
->pool;

4054 
tf
->
≥rsi°ít
 = 1;

4056 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

4057 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

4058 !
NGX_OK
)

4063 
u
->
pùe
->
ãmp_fûe
 = 
tf
;

4066 
ext
.
ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

4067 
ext
.
∑th_ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

4068 
ext
.
time
 = -1;

4069 
ext
.
¸óã_∑th
 = 1;

4070 
ext
.
dñëe_fûe
 = 1;

4071 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

4073 i‡(
u
->
hódîs_ö
.
œ°_modifõd
) {

4075 
lm
 = 
	`ngx_∑r£_hâp_time
(
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
d©a
,

4076 
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
Àn
);

4078 i‡(
lm
 !
NGX_ERROR
) {

4079 
ext
.
time
 = 
lm
;

4080 
ext
.
fd
 = 
tf
->
fûe
.fd;

4084 i‡(
u
->
c⁄f
->
°‹e_Àngths
 =
NULL
) {

4086 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

4091 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
u
->
c⁄f
->
°‹e_Àngths
->
ñts
, 0,

4092 
u
->
c⁄f
->
°‹e_vÆues
->
ñts
)

4093 =
NULL
)

4099 
∑th
.
Àn
--;

4101 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4103 
tf
->
fûe
.
«me
.
d©a
, 
∑th
.data);

4105 (Ë
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
∑th
, &
ext
);

4107 
u
->
°‹e
 = 0;

4108 
	}
}

4112 
	$ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

4114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4116 
	}
}

4120 
	$ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

4121 
ngx_uöt_t
 
·_ty≥
)

4123 
ngx_m£c_t
 
timeout
;

4124 
ngx_uöt_t
 
°©us
, 
°©e
;

4126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4127 "hâ∞√xàup°ªam, %xi", 
·_ty≥
);

4129 i‡(
u
->
≥î
.
sockaddr
) {

4131 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_403


4132 || 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

4134 
°©e
 = 
NGX_PEER_NEXT
;

4137 
°©e
 = 
NGX_PEER_FAILED
;

4140 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

4141 
u
->
≥î
.
sockaddr
 = 
NULL
;

4144 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_TIMEOUT
) {

4145 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ETIMEDOUT
,

4149 i‡(
u
->
≥î
.
ˇched
 && 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_ERROR
) {

4151 
u
->
≥î
.
åõs
++;

4154 
·_ty≥
) {

4156 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
:

4157 
NGX_HTTP_UPSTREAM_FT_HTTP_504
:

4158 
°©us
 = 
NGX_HTTP_GATEWAY_TIME_OUT
;

4161 
NGX_HTTP_UPSTREAM_FT_HTTP_500
:

4162 
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

4165 
NGX_HTTP_UPSTREAM_FT_HTTP_503
:

4166 
°©us
 = 
NGX_HTTP_SERVICE_UNAVAILABLE
;

4169 
NGX_HTTP_UPSTREAM_FT_HTTP_403
:

4170 
°©us
 = 
NGX_HTTP_FORBIDDEN
;

4173 
NGX_HTTP_UPSTREAM_FT_HTTP_404
:

4174 
°©us
 = 
NGX_HTTP_NOT_FOUND
;

4177 
NGX_HTTP_UPSTREAM_FT_HTTP_429
:

4178 
°©us
 = 
NGX_HTTP_TOO_MANY_REQUESTS
;

4187 
°©us
 = 
NGX_HTTP_BAD_GATEWAY
;

4190 i‡(
r
->
c⁄√˘i⁄
->
îr‹
) {

4191 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

4192 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

4196 
u
->
°©e
->
°©us
 = status;

4198 
timeout
 = 
u
->
c⁄f
->
√xt_up°ªam_timeout
;

4200 i‡(
u
->
ªque°_£¡


4201 && (
r
->
mëhod
 & (
NGX_HTTP_POST
|
NGX_HTTP_LOCK
|
NGX_HTTP_PATCH
)))

4203 
·_ty≥
 |
NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
;

4206 i‡(
u
->
≥î
.
åõs
 == 0

4207 || ((
u
->
c⁄f
->
√xt_up°ªam
 & 
·_ty≥
) != ft_type)

4208 || (
u
->
ªque°_£¡
 && 
r
->
ªque°_body_no_buf„rög
)

4209 || (
timeout
 && 
ngx_cuºít_m£c
 - 
u
->
≥î
.
°¨t_time
 >=Åimeout))

4211 #i‡(
NGX_HTTP_CACHE
)

4213 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


4214 && ((
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
·_ty≥
Ë|| 
r
->
ˇche
->
°Æe_îr‹
))

4216 
ngx_öt_t
 
rc
;

4218 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

4220 i‡(
rc
 !
NGX_OK
) {

4221 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

4225 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

4226 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

4228 i‡(
rc
 =
NGX_DONE
) {

4232 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

4233 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

4236 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

4241 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

4245 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

4246 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4248 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

4249 #i‡(
NGX_HTTP_SSL
)

4251 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

4252 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

4253 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_£nd_shutdown
 = 1;

4255 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

4259 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

4260 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

4263 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

4264 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

4267 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

4268 
	}
}

4272 
	$ngx_hâp_up°ªam_˛ónup
(*
d©a
)

4274 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

4276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4277 "˛ónu∞hâ∞up°ªamÑeque°: \"%V\"", &
r
->
uri
);

4279 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
,Ñ->
up°ªam
, 
NGX_DONE
);

4280 
	}
}

4284 
	$ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

4285 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
)

4287 
ngx_uöt_t
 
Êush
;

4289 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4290 "föÆizêhâ∞up°ªamÑeque°: %i", 
rc
);

4292 i‡(
u
->
˛ónup
 =
NULL
) {

4294 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

4298 *
u
->
˛ónup
 = 
NULL
;

4299 
u
->
˛ónup
 = 
NULL
;

4301 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

4302 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

4303 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

4306 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_time
) {

4307 
u
->
°©e
->
ª•⁄£_time
 = 
ngx_cuºít_m£c
 - u->state->response_time;

4309 i‡(
u
->
pùe
 && u->pùe->
ªad_Àngth
) {

4310 
u
->
°©e
->
byãs_ª˚ived
 +u->
pùe
->
ªad_Àngth


4311 - 
u
->
pùe
->
¥îód_size
;

4312 
u
->
°©e
->
ª•⁄£_Àngth
 = u->
pùe
->
ªad_Àngth
;

4316 
u
->
	`föÆize_ªque°
(
r
, 
rc
);

4318 i‡(
u
->
≥î
.
‰ì
 && u->≥î.
sockaddr
) {

4319 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 0);

4320 
u
->
≥î
.
sockaddr
 = 
NULL
;

4323 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

4325 #i‡(
NGX_HTTP_SSL
)

4329 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

4337 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

4339 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

4343 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4345 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

4347 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

4348 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

4351 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

4354 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

4356 i‡(
u
->
pùe
 && u->pùe->
ãmp_fûe
) {

4357 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4359 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
);

4362 i‡(
u
->
°‹e
 && u->
pùe
 && u->pùe->
ãmp_fûe


4363 && 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
)

4365 i‡(
	`ngx_dñëe_fûe
(
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
)

4366 =
NGX_FILE_ERROR
)

4368 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

4369 
ngx_dñëe_fûe_n
 " \"%s\" failed",

4370 
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
);

4374 #i‡(
NGX_HTTP_CACHE
)

4376 i‡(
r
->
ˇche
) {

4378 i‡(
u
->
ˇchóbÀ
) {

4380 i‡(
rc
 =
NGX_HTTP_BAD_GATEWAY
 ||Ñ¯=
NGX_HTTP_GATEWAY_TIME_OUT
) {

4381 
time_t
 
vÆid
;

4383 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
rc
);

4385 i‡(
vÆid
) {

4386 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

4387 
r
->
ˇche
->
îr‹
 = 
rc
;

4392 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

4397 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

4399 i‡(
rc
 =
NGX_DECLINED
) {

4403 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÅo client";

4405 i‡(!
u
->
hódî_£¡


4406 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


4407 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST
)

4409 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

4413 
Êush
 = 0;

4415 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

4416 
rc
 = 
NGX_ERROR
;

4417 
Êush
 = 1;

4420 i‡(
r
->
hódî_⁄ly


4421 || (
u
->
pùe
 && u->pùe->
down°ªam_îr‹
))

4423 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

4427 i‡(
rc
 == 0) {

4429 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_åaûîs
(
r
, 
u
Ë!
NGX_OK
) {

4430 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

4434 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

4436 } i‡(
Êush
) {

4437 
r
->
kì∑live
 = 0;

4438 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
);

4441 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

4442 
	}
}

4445 
ngx_öt_t


4446 
	$ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4447 
ngx_uöt_t
 
off£t
)

4449 
ngx_èbÀ_ñt_t
 **
ph
;

4451 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
up°ªam
->
hódîs_ö
 + 
off£t
);

4453 i‡(*
ph
 =
NULL
) {

4454 *
ph
 = 
h
;

4457  
NGX_OK
;

4458 
	}
}

4461 
ngx_öt_t


4462 
	$ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4463 
ngx_uöt_t
 
off£t
)

4465  
NGX_OK
;

4466 
	}
}

4469 
ngx_öt_t


4470 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

4471 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4473 
ngx_hâp_up°ªam_t
 *
u
;

4475 
u
 = 
r
->
up°ªam
;

4477 
u
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
h
;

4478 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

4480  
NGX_OK
;

4481 
	}
}

4484 
ngx_öt_t


4485 
	$ngx_hâp_up°ªam_¥o˚ss_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

4486 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4488 
ngx_hâp_up°ªam_t
 *
u
;

4490 
u
 = 
r
->
up°ªam
;

4492 
u
->
hódîs_ö
.
œ°_modifõd
 = 
h
;

4493 
u
->
hódîs_ö
.
œ°_modifõd_time
 = 
	`ngx_∑r£_hâp_time
(
h
->
vÆue
.
d©a
,

4494 
h
->
vÆue
.
Àn
);

4496  
NGX_OK
;

4497 
	}
}

4500 
ngx_öt_t


4501 
	$ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4502 
ngx_uöt_t
 
off£t
)

4504 
ngx_¨øy_t
 *
∑
;

4505 
ngx_èbÀ_ñt_t
 **
ph
;

4506 
ngx_hâp_up°ªam_t
 *
u
;

4508 
u
 = 
r
->
up°ªam
;

4509 
∑
 = &
u
->
hódîs_ö
.
cookõs
;

4511 i‡(
∑
->
ñts
 =
NULL
) {

4512 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

4514  
NGX_ERROR
;

4518 
ph
 = 
	`ngx_¨øy_push
(
∑
);

4519 i‡(
ph
 =
NULL
) {

4520  
NGX_ERROR
;

4523 *
ph
 = 
h
;

4525 #i‡(
NGX_HTTP_CACHE
)

4526 i‡(!(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
)) {

4527 
u
->
ˇchóbÀ
 = 0;

4531  
NGX_OK
;

4532 
	}
}

4535 
ngx_öt_t


4536 
	$ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

4537 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4539 
ngx_¨øy_t
 *
∑
;

4540 
ngx_èbÀ_ñt_t
 **
ph
;

4541 
ngx_hâp_up°ªam_t
 *
u
;

4543 
u
 = 
r
->
up°ªam
;

4544 
∑
 = &
u
->
hódîs_ö
.
ˇche_c⁄åﬁ
;

4546 i‡(
∑
->
ñts
 =
NULL
) {

4547 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

4549  
NGX_ERROR
;

4553 
ph
 = 
	`ngx_¨øy_push
(
∑
);

4554 i‡(
ph
 =
NULL
) {

4555  
NGX_ERROR
;

4558 *
ph
 = 
h
;

4560 #i‡(
NGX_HTTP_CACHE
)

4562 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

4563 
ngx_öt_t
 
n
;

4565 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
) {

4566  
NGX_OK
;

4569 i‡(
r
->
ˇche
 =
NULL
) {

4570  
NGX_OK
;

4573 i‡(
r
->
ˇche
->
vÆid_£c
 !0 && 
u
->
hódîs_ö
.
x_ac˚l_expúes
 !
NULL
) {

4574  
NGX_OK
;

4577 
°¨t
 = 
h
->
vÆue
.
d©a
;

4578 
œ°
 = 
°¨t
 + 
h
->
vÆue
.
Àn
;

4580 i‡(
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *Ë"no-ˇche", 8 - 1Ë!
NULL


4581 || 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *Ë"no-°‹e", 8 - 1Ë!
NULL


4582 || 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *Ë"¥iv©e", 7 - 1Ë!
NULL
)

4584 
u
->
ˇchóbÀ
 = 0;

4585  
NGX_OK
;

4588 
p
 = 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *) "s-maxage=", 9 - 1);

4589 
off£t
 = 9;

4591 i‡(
p
 =
NULL
) {

4592 
p
 = 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *) "max-age=", 8 - 1);

4593 
off£t
 = 8;

4596 i‡(
p
) {

4597 
n
 = 0;

4599 
p
 +
off£t
;Ö < 
œ°
;Ö++) {

4600 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

4604 i‡(*
p
 >= '0' && *p <= '9') {

4605 
n
 =Ç * 10 + (*
p
 - '0');

4609 
u
->
ˇchóbÀ
 = 0;

4610  
NGX_OK
;

4613 i‡(
n
 == 0) {

4614 
u
->
ˇchóbÀ
 = 0;

4615  
NGX_OK
;

4618 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

4621 
p
 = 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *) "stale-while-revalidate=",

4624 i‡(
p
) {

4625 
n
 = 0;

4627 
p
 +23;Ö < 
œ°
;Ö++) {

4628 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

4632 i‡(*
p
 >= '0' && *p <= '9') {

4633 
n
 =Ç * 10 + (*
p
 - '0');

4637 
u
->
ˇchóbÀ
 = 0;

4638  
NGX_OK
;

4641 
r
->
ˇche
->
upd©ög_£c
 = 
n
;

4642 
r
->
ˇche
->
îr‹_£c
 = 
n
;

4645 
p
 = 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *) "stale-if-error=", 15 - 1);

4647 i‡(
p
) {

4648 
n
 = 0;

4650 
p
 +15;Ö < 
œ°
;Ö++) {

4651 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

4655 i‡(*
p
 >= '0' && *p <= '9') {

4656 
n
 =Ç * 10 + (*
p
 - '0');

4660 
u
->
ˇchóbÀ
 = 0;

4661  
NGX_OK
;

4664 
r
->
ˇche
->
îr‹_£c
 = 
n
;

4669  
NGX_OK
;

4670 
	}
}

4673 
ngx_öt_t


4674 
	$ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4675 
ngx_uöt_t
 
off£t
)

4677 
ngx_hâp_up°ªam_t
 *
u
;

4679 
u
 = 
r
->
up°ªam
;

4680 
u
->
hódîs_ö
.
expúes
 = 
h
;

4682 #i‡(
NGX_HTTP_CACHE
)

4684 
time_t
 
expúes
;

4686 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
) {

4687  
NGX_OK
;

4690 i‡(
r
->
ˇche
 =
NULL
) {

4691  
NGX_OK
;

4694 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

4695  
NGX_OK
;

4698 
expúes
 = 
	`ngx_∑r£_hâp_time
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

4700 i‡(
expúes
 =
NGX_ERROR
 ||Éxpúe†< 
	`ngx_time
()) {

4701 
u
->
ˇchóbÀ
 = 0;

4702  
NGX_OK
;

4705 
r
->
ˇche
->
vÆid_£c
 = 
expúes
;

4709  
NGX_OK
;

4710 
	}
}

4713 
ngx_öt_t


4714 
	$ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

4715 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4717 
ngx_hâp_up°ªam_t
 *
u
;

4719 
u
 = 
r
->
up°ªam
;

4720 
u
->
hódîs_ö
.
x_ac˚l_expúes
 = 
h
;

4722 #i‡(
NGX_HTTP_CACHE
)

4724 
u_ch¨
 *
p
;

4725 
size_t
 
Àn
;

4726 
ngx_öt_t
 
n
;

4728 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
) {

4729  
NGX_OK
;

4732 i‡(
r
->
ˇche
 =
NULL
) {

4733  
NGX_OK
;

4736 
Àn
 = 
h
->
vÆue
.len;

4737 
p
 = 
h
->
vÆue
.
d©a
;

4739 i‡(
p
[0] != '@') {

4740 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

4742 
n
) {

4744 
u
->
ˇchóbÀ
 = 0;

4747 
NGX_ERROR
:

4748  
NGX_OK
;

4751 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

4752  
NGX_OK
;

4756 
p
++;

4757 
Àn
--;

4759 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

4761 i‡(
n
 !
NGX_ERROR
) {

4762 
r
->
ˇche
->
vÆid_£c
 = 
n
;

4767  
NGX_OK
;

4768 
	}
}

4771 
ngx_öt_t


4772 
	$ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4773 
ngx_uöt_t
 
off£t
)

4775 
ngx_öt_t
 
n
;

4776 
ngx_hâp_up°ªam_t
 *
u
;

4778 
u
 = 
r
->
up°ªam
;

4779 
u
->
hódîs_ö
.
x_ac˚l_limô_øã
 = 
h
;

4781 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
) {

4782  
NGX_OK
;

4785 
n
 = 
	`ngx_©oi
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

4787 i‡(
n
 !
NGX_ERROR
) {

4788 
r
->
limô_øã
 = (
size_t
Ë
n
;

4791  
NGX_OK
;

4792 
	}
}

4795 
ngx_öt_t


4796 
	$ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4797 
ngx_uöt_t
 
off£t
)

4799 
u_ch¨
 
c0
, 
c1
, 
c2
;

4800 
ngx_hâp_up°ªam_t
 *
u
;

4802 
u
 = 
r
->
up°ªam
;

4804 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
) {

4805  
NGX_OK
;

4808 i‡(
u
->
c⁄f
->
ch™ge_buf„rög
) {

4810 i‡(
h
->
vÆue
.
Àn
 == 2) {

4811 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

4812 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

4814 i‡(
c0
 ='n' && 
c1
 == 'o') {

4815 
u
->
buf„rög
 = 0;

4818 } i‡(
h
->
vÆue
.
Àn
 == 3) {

4819 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

4820 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

4821 
c2
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[2]);

4823 i‡(
c0
 ='y' && 
c1
 ='e' && 
c2
 == 's') {

4824 
u
->
buf„rög
 = 1;

4829  
NGX_OK
;

4830 
	}
}

4833 
ngx_öt_t


4834 
	$ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4835 
ngx_uöt_t
 
off£t
)

4837 i‡(
r
->
up°ªam
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
) {

4838  
NGX_OK
;

4841 
r
->
hódîs_out
.
ovîride_ch¨£t
 = &
h
->
vÆue
;

4843  
NGX_OK
;

4844 
	}
}

4847 
ngx_öt_t


4848 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4849 
ngx_uöt_t
 
off£t
)

4851 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄
 = 
h
;

4853 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

4854 (
u_ch¨
 *) "close", 5 - 1)

4855 !
NULL
)

4857 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

4860  
NGX_OK
;

4861 
	}
}

4864 
ngx_öt_t


4865 
	$ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

4866 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4868 
r
->
up°ªam
->
hódîs_ö
.
å™s„r_ícodög
 = 
h
;

4870 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

4871 (
u_ch¨
 *) "chunked", 7 - 1)

4872 !
NULL
)

4874 
r
->
up°ªam
->
hódîs_ö
.
chunked
 = 1;

4877  
NGX_OK
;

4878 
	}
}

4881 
ngx_öt_t


4882 
	$ngx_hâp_up°ªam_¥o˚ss_v¨y
(
ngx_hâp_ªque°_t
 *
r
,

4883 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4885 
ngx_hâp_up°ªam_t
 *
u
;

4887 
u
 = 
r
->
up°ªam
;

4888 
u
->
hódîs_ö
.
v¨y
 = 
h
;

4890 #i‡(
NGX_HTTP_CACHE
)

4892 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_VARY
) {

4893  
NGX_OK
;

4896 i‡(
r
->
ˇche
 =
NULL
) {

4897  
NGX_OK
;

4900 i‡(
h
->
vÆue
.
Àn
 > 
NGX_HTTP_CACHE_VARY_LEN


4901 || (
h
->
vÆue
.
Àn
 =1 && h->vÆue.
d©a
[0] == '*'))

4903 
u
->
ˇchóbÀ
 = 0;

4906 
r
->
ˇche
->
v¨y
 = 
h
->
vÆue
;

4910  
NGX_OK
;

4911 
	}
}

4914 
ngx_öt_t


4915 
	$ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4916 
ngx_uöt_t
 
off£t
)

4918 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

4920 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4921 i‡(
ho
 =
NULL
) {

4922  
NGX_ERROR
;

4925 *
ho
 = *
h
;

4927 i‡(
off£t
) {

4928 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

4929 *
ph
 = 
ho
;

4932  
NGX_OK
;

4933 
	}
}

4936 
ngx_öt_t


4937 
	$ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

4938 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4940 
ngx_¨øy_t
 *
∑
;

4941 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

4943 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

4945 i‡(
∑
->
ñts
 =
NULL
) {

4946 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

4948  
NGX_ERROR
;

4952 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4953 i‡(
ho
 =
NULL
) {

4954  
NGX_ERROR
;

4957 *
ho
 = *
h
;

4959 
ph
 = 
	`ngx_¨øy_push
(
∑
);

4960 i‡(
ph
 =
NULL
) {

4961  
NGX_ERROR
;

4964 *
ph
 = 
ho
;

4966  
NGX_OK
;

4967 
	}
}

4970 
ngx_öt_t


4971 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4972 
ngx_uöt_t
 
off£t
)

4974 
u_ch¨
 *
p
, *
œ°
;

4976 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
h
->
vÆue
.
Àn
;

4977 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
h
->
vÆue
;

4978 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

4980 
p
 = 
h
->
vÆue
.
d©a
; *p;Ö++) {

4982 i‡(*
p
 != ';') {

4986 
œ°
 = 
p
;

4988 *++
p
 == ' ') { }

4990 i‡(*
p
 == '\0') {

4991  
NGX_OK
;

4994 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "charset=", 8) != 0) {

4998 
p
 += 8;

5000 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
œ°
 - 
h
->
vÆue
.
d©a
;

5002 i‡(*
p
 == '"') {

5003 
p
++;

5006 
œ°
 = 
h
->
vÆue
.
d©a
 + h->vÆue.
Àn
;

5008 i‡(*(
œ°
 - 1) == '"') {

5009 
œ°
--;

5012 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
œ°
 - 
p
;

5013 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
p
;

5015  
NGX_OK
;

5018  
NGX_OK
;

5019 
	}
}

5022 
ngx_öt_t


5023 
	$ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

5024 
ngx_uöt_t
 
off£t
)

5026 
ngx_èbÀ_ñt_t
 *
ho
;

5028 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

5029 i‡(
ho
 =
NULL
) {

5030  
NGX_ERROR
;

5033 *
ho
 = *
h
;

5035 
r
->
hódîs_out
.
œ°_modifõd
 = 
ho
;

5036 
r
->
hódîs_out
.
œ°_modifõd_time
 =

5037 
r
->
up°ªam
->
hódîs_ö
.
œ°_modifõd_time
;

5039  
NGX_OK
;

5040 
	}
}

5043 
ngx_öt_t


5044 
	$ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

5045 
ngx_uöt_t
 
off£t
)

5047 
ngx_öt_t
 
rc
;

5048 
ngx_èbÀ_ñt_t
 *
ho
;

5050 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

5051 i‡(
ho
 =
NULL
) {

5052  
NGX_ERROR
;

5055 *
ho
 = *
h
;

5057 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

5058 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 0);

5060 i‡(
rc
 =
NGX_DECLINED
) {

5061  
NGX_OK
;

5064 i‡(
rc
 =
NGX_OK
) {

5065 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

5067 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

5068 "ªwrôã¿loˇti⁄: \"%V\"", &
ho
->
vÆue
);

5071  
rc
;

5074 i‡(
ho
->
vÆue
.
d©a
[0] != '/') {

5075 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

5083  
NGX_OK
;

5084 
	}
}

5087 
ngx_öt_t


5088 
	$ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

5089 
ngx_uöt_t
 
off£t
)

5091 
u_ch¨
 *
p
;

5092 
ngx_öt_t
 
rc
;

5093 
ngx_èbÀ_ñt_t
 *
ho
;

5095 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

5096 i‡(
ho
 =
NULL
) {

5097  
NGX_ERROR
;

5100 *
ho
 = *
h
;

5102 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

5104 
p
 = 
	`ngx_°rˇ£°∫
(
ho
->
vÆue
.
d©a
, "url=", 4 - 1);

5106 i‡(
p
) {

5107 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 
p
 + 4 - ho->
vÆue
.
d©a
);

5110  
NGX_OK
;

5113 i‡(
rc
 =
NGX_DECLINED
) {

5114  
NGX_OK
;

5117 i‡(
rc
 =
NGX_OK
) {

5118 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

5120 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

5121 "ªwrôã¿ª‰esh: \"%V\"", &
ho
->
vÆue
);

5124  
rc
;

5127 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

5129  
NGX_OK
;

5130 
	}
}

5133 
ngx_öt_t


5134 
	$ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

5135 
ngx_uöt_t
 
off£t
)

5137 
ngx_öt_t
 
rc
;

5138 
ngx_èbÀ_ñt_t
 *
ho
;

5140 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

5141 i‡(
ho
 =
NULL
) {

5142  
NGX_ERROR
;

5145 *
ho
 = *
h
;

5147 i‡(
r
->
up°ªam
->
ªwrôe_cookõ
) {

5148 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_cookõ
‘, 
ho
);

5150 i‡(
rc
 =
NGX_DECLINED
) {

5151  
NGX_OK
;

5154 #i‡(
NGX_DEBUG
)

5155 i‡(
rc
 =
NGX_OK
) {

5156 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

5157 "ªwrôã¿cookõ: \"%V\"", &
ho
->
vÆue
);

5161  
rc
;

5164  
NGX_OK
;

5165 
	}
}

5168 
ngx_öt_t


5169 
	$ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

5170 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

5172 
ngx_èbÀ_ñt_t
 *
ho
;

5174 i‡(
r
->
up°ªam
->
c⁄f
->
f‹˚_ønges
) {

5175  
NGX_OK
;

5178 #i‡(
NGX_HTTP_CACHE
)

5180 i‡(
r
->
ˇched
) {

5181 
r
->
Ælow_ønges
 = 1;

5182  
NGX_OK
;

5185 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

5186 
r
->
Ælow_ønges
 = 1;

5187 
r
->
sögÀ_ønge
 = 1;

5188  
NGX_OK
;

5193 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

5194 i‡(
ho
 =
NULL
) {

5195  
NGX_ERROR
;

5198 *
ho
 = *
h
;

5200 
r
->
hódîs_out
.
ac˚±_ønges
 = 
ho
;

5202  
NGX_OK
;

5203 
	}
}

5206 #i‡(
NGX_HTTP_GZIP
)

5208 
ngx_öt_t


5209 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

5210 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

5212 
ngx_èbÀ_ñt_t
 *
ho
;

5214 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

5215 i‡(
ho
 =
NULL
) {

5216  
NGX_ERROR
;

5219 *
ho
 = *
h
;

5221 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
ho
;

5223  
NGX_OK
;

5224 
	}
}

5229 
ngx_öt_t


5230 
	$ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

5232 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

5234 
v
 = 
ngx_hâp_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

5235 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

5236 i‡(
v¨
 =
NULL
) {

5237  
NGX_ERROR
;

5240 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

5241 
v¨
->
d©a
 = 
v
->data;

5244  
NGX_OK
;

5245 
	}
}

5248 
ngx_öt_t


5249 
	$ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5250 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5252 
u_ch¨
 *
p
;

5253 
size_t
 
Àn
;

5254 
ngx_uöt_t
 
i
;

5255 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

5257 
v
->
vÆid
 = 1;

5258 
v
->
no_ˇchóbÀ
 = 0;

5259 
v
->
nŸ_found
 = 0;

5261 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

5262 
v
->
nŸ_found
 = 1;

5263  
NGX_OK
;

5266 
Àn
 = 0;

5267 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

5269 
i
 = 0; i < 
r
->
up°ªam_°©es
->
√…s
; i++) {

5270 i‡(
°©e
[
i
].
≥î
) {

5271 
Àn
 +
°©e
[
i
].
≥î
->len + 2;

5274 
Àn
 += 3;

5278 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

5279 i‡(
p
 =
NULL
) {

5280  
NGX_ERROR
;

5283 
v
->
d©a
 = 
p
;

5285 
i
 = 0;

5288 i‡(
°©e
[
i
].
≥î
) {

5289 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

5292 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5296 i‡(
°©e
[
i
].
≥î
) {

5297 *
p
++ = ',';

5298 *
p
++ = ' ';

5301 *
p
++ = ' ';

5302 *
p
++ = ':';

5303 *
p
++ = ' ';

5305 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5313 
v
->
Àn
 = 
p
 - v->
d©a
;

5315  
NGX_OK
;

5316 
	}
}

5319 
ngx_öt_t


5320 
	$ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5321 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5323 
u_ch¨
 *
p
;

5324 
size_t
 
Àn
;

5325 
ngx_uöt_t
 
i
;

5326 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

5328 
v
->
vÆid
 = 1;

5329 
v
->
no_ˇchóbÀ
 = 0;

5330 
v
->
nŸ_found
 = 0;

5332 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

5333 
v
->
nŸ_found
 = 1;

5334  
NGX_OK
;

5337 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (3 + 2);

5339 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

5340 i‡(
p
 =
NULL
) {

5341  
NGX_ERROR
;

5344 
v
->
d©a
 = 
p
;

5346 
i
 = 0;

5347 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

5350 i‡(
°©e
[
i
].
°©us
) {

5351 
p
 = 
	`ngx_•rötf
’, "%ui", 
°©e
[
i
].
°©us
);

5354 *
p
++ = '-';

5357 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5361 i‡(
°©e
[
i
].
≥î
) {

5362 *
p
++ = ',';

5363 *
p
++ = ' ';

5366 *
p
++ = ' ';

5367 *
p
++ = ':';

5368 *
p
++ = ' ';

5370 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5378 
v
->
Àn
 = 
p
 - v->
d©a
;

5380  
NGX_OK
;

5381 
	}
}

5384 
ngx_öt_t


5385 
	$ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5386 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5388 
u_ch¨
 *
p
;

5389 
size_t
 
Àn
;

5390 
ngx_uöt_t
 
i
;

5391 
ngx_m£c_öt_t
 
ms
;

5392 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

5394 
v
->
vÆid
 = 1;

5395 
v
->
no_ˇchóbÀ
 = 0;

5396 
v
->
nŸ_found
 = 0;

5398 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

5399 
v
->
nŸ_found
 = 1;

5400  
NGX_OK
;

5403 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

5405 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

5406 i‡(
p
 =
NULL
) {

5407  
NGX_ERROR
;

5410 
v
->
d©a
 = 
p
;

5412 
i
 = 0;

5413 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

5416 i‡(
°©e
[
i
].
°©us
) {

5418 i‡(
d©a
 =1 && 
°©e
[
i
].
hódî_time
 !(
ngx_m£c_t
) -1) {

5419 
ms
 = 
°©e
[
i
].
hódî_time
;

5421 } i‡(
d©a
 =2 && 
°©e
[
i
].
c⁄√˘_time
 !(
ngx_m£c_t
) -1) {

5422 
ms
 = 
°©e
[
i
].
c⁄√˘_time
;

5425 
ms
 = 
°©e
[
i
].
ª•⁄£_time
;

5428 
ms
 = 
	`ngx_max
(ms, 0);

5429 
p
 = 
	`ngx_•rötf
’, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

5432 *
p
++ = '-';

5435 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5439 i‡(
°©e
[
i
].
≥î
) {

5440 *
p
++ = ',';

5441 *
p
++ = ' ';

5444 *
p
++ = ' ';

5445 *
p
++ = ':';

5446 *
p
++ = ' ';

5448 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5456 
v
->
Àn
 = 
p
 - v->
d©a
;

5458  
NGX_OK
;

5459 
	}
}

5462 
ngx_öt_t


5463 
	$ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5464 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5466 
u_ch¨
 *
p
;

5467 
size_t
 
Àn
;

5468 
ngx_uöt_t
 
i
;

5469 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

5471 
v
->
vÆid
 = 1;

5472 
v
->
no_ˇchóbÀ
 = 0;

5473 
v
->
nŸ_found
 = 0;

5475 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

5476 
v
->
nŸ_found
 = 1;

5477  
NGX_OK
;

5480 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

5482 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

5483 i‡(
p
 =
NULL
) {

5484  
NGX_ERROR
;

5487 
v
->
d©a
 = 
p
;

5489 
i
 = 0;

5490 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

5494 i‡(
d©a
 == 1) {

5495 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
byãs_ª˚ived
);

5498 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
ª•⁄£_Àngth
);

5501 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5505 i‡(
°©e
[
i
].
≥î
) {

5506 *
p
++ = ',';

5507 *
p
++ = ' ';

5510 *
p
++ = ' ';

5511 *
p
++ = ':';

5512 *
p
++ = ' ';

5514 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5522 
v
->
Àn
 = 
p
 - v->
d©a
;

5524  
NGX_OK
;

5525 
	}
}

5528 
ngx_öt_t


5529 
	$ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5530 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5532 i‡(
r
->
up°ªam
 =
NULL
) {

5533 
v
->
nŸ_found
 = 1;

5534  
NGX_OK
;

5537  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

5538 &
r
->
up°ªam
->
hódîs_ö
.
hódîs
.
∑π
,

5540 
	}
}

5543 
ngx_öt_t


5544 
	$ngx_hâp_up°ªam_åaûî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5545 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5547 i‡(
r
->
up°ªam
 =
NULL
) {

5548 
v
->
nŸ_found
 = 1;

5549  
NGX_OK
;

5552  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

5553 &
r
->
up°ªam
->
hódîs_ö
.
åaûîs
.
∑π
,

5555 
	}
}

5558 
ngx_öt_t


5559 
	$ngx_hâp_up°ªam_cookõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5560 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5562 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

5564 
ngx_°r_t
 
cookõ
, 
s
;

5566 i‡(
r
->
up°ªam
 =
NULL
) {

5567 
v
->
nŸ_found
 = 1;

5568  
NGX_OK
;

5571 
s
.
Àn
 = 
«me
->len - (("upstream_cookie_") - 1);

5572 
s
.
d©a
 = 
«me
->data + ("upstream_cookie_") - 1;

5574 i‡(
	`ngx_hâp_∑r£_£t_cookõ_löes
(&
r
->
up°ªam
->
hódîs_ö
.
cookõs
,

5575 &
s
, &
cookõ
)

5576 =
NGX_DECLINED
)

5578 
v
->
nŸ_found
 = 1;

5579  
NGX_OK
;

5582 
v
->
Àn
 = 
cookõ
.len;

5583 
v
->
vÆid
 = 1;

5584 
v
->
no_ˇchóbÀ
 = 0;

5585 
v
->
nŸ_found
 = 0;

5586 
v
->
d©a
 = 
cookõ
.data;

5588  
NGX_OK
;

5589 
	}
}

5592 #i‡(
NGX_HTTP_CACHE
)

5594 
ngx_öt_t


5595 
	$ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

5596 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5598 
ngx_uöt_t
 
n
;

5600 i‡(
r
->
up°ªam
 =
NULL
 ||Ñ->up°ªam->
ˇche_°©us
 == 0) {

5601 
v
->
nŸ_found
 = 1;

5602  
NGX_OK
;

5605 
n
 = 
r
->
up°ªam
->
ˇche_°©us
 - 1;

5607 
v
->
vÆid
 = 1;

5608 
v
->
no_ˇchóbÀ
 = 0;

5609 
v
->
nŸ_found
 = 0;

5610 
v
->
Àn
 = 
ngx_hâp_ˇche_°©us
[
n
].len;

5611 
v
->
d©a
 = 
ngx_hâp_ˇche_°©us
[
n
].data;

5613  
NGX_OK
;

5614 
	}
}

5617 
ngx_öt_t


5618 
	$ngx_hâp_up°ªam_ˇche_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

5619 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5621 
u_ch¨
 *
p
;

5623 i‡(
r
->
up°ªam
 =
NULL


5624 || !
r
->
up°ªam
->
c⁄f
->
ˇche_ªvÆid©e


5625 || 
r
->
up°ªam
->
ˇche_°©us
 !
NGX_HTTP_CACHE_EXPIRED


5626 || 
r
->
ˇche
->
œ°_modifõd
 == -1)

5628 
v
->
nŸ_found
 = 1;

5629  
NGX_OK
;

5632 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("Mon, 28 Sep 1970 06:00:00 GMT") - 1);

5633 i‡(
p
 =
NULL
) {

5634  
NGX_ERROR
;

5637 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
ˇche
->
œ°_modifõd
) -Ö;

5638 
v
->
vÆid
 = 1;

5639 
v
->
no_ˇchóbÀ
 = 0;

5640 
v
->
nŸ_found
 = 0;

5641 
v
->
d©a
 = 
p
;

5643  
NGX_OK
;

5644 
	}
}

5647 
ngx_öt_t


5648 
	$ngx_hâp_up°ªam_ˇche_ëag
(
ngx_hâp_ªque°_t
 *
r
,

5649 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5651 i‡(
r
->
up°ªam
 =
NULL


5652 || !
r
->
up°ªam
->
c⁄f
->
ˇche_ªvÆid©e


5653 || 
r
->
up°ªam
->
ˇche_°©us
 !
NGX_HTTP_CACHE_EXPIRED


5654 || 
r
->
ˇche
->
ëag
.
Àn
 == 0)

5656 
v
->
nŸ_found
 = 1;

5657  
NGX_OK
;

5660 
v
->
vÆid
 = 1;

5661 
v
->
no_ˇchóbÀ
 = 0;

5662 
v
->
nŸ_found
 = 0;

5663 
v
->
Àn
 = 
r
->
ˇche
->
ëag
.len;

5664 
v
->
d©a
 = 
r
->
ˇche
->
ëag
.data;

5666  
NGX_OK
;

5667 
	}
}

5673 
	$ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

5675 *
rv
;

5676 *
mc⁄f
;

5677 
ngx_°r_t
 *
vÆue
;

5678 
ngx_uæ_t
 
u
;

5679 
ngx_uöt_t
 
m
;

5680 
ngx_c⁄f_t
 
pcf
;

5681 
ngx_hâp_moduÀ_t
 *
moduÀ
;

5682 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

5683 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

5685 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

5687 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5688 
u
.
ho°
 = 
vÆue
[1];

5689 
u
.
no_ªsﬁve
 = 1;

5690 
u
.
no_p‹t
 = 1;

5692 
uscf
 = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 
NGX_HTTP_UPSTREAM_CREATE


5693 |
NGX_HTTP_UPSTREAM_WEIGHT


5694 |
NGX_HTTP_UPSTREAM_MAX_CONNS


5695 |
NGX_HTTP_UPSTREAM_MAX_FAILS


5696 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


5697 |
NGX_HTTP_UPSTREAM_DOWN


5698 |
NGX_HTTP_UPSTREAM_BACKUP
);

5699 i‡(
uscf
 =
NULL
) {

5700  
NGX_CONF_ERROR
;

5704 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

5705 i‡(
˘x
 =
NULL
) {

5706  
NGX_CONF_ERROR
;

5709 
hâp_˘x
 = 
cf
->
˘x
;

5710 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

5714 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

5715 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

5716  
NGX_CONF_ERROR
;

5719 
˘x
->
§v_c⁄f
[
ngx_hâp_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

5721 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

5726 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

5727 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

5728  
NGX_CONF_ERROR
;

5731 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

5732 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

5736 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

5738 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

5739 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

5740 i‡(
mc⁄f
 =
NULL
) {

5741  
NGX_CONF_ERROR
;

5744 
˘x
->
§v_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

5747 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

5748 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

5749 i‡(
mc⁄f
 =
NULL
) {

5750  
NGX_CONF_ERROR
;

5753 
˘x
->
loc_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

5757 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

5758 (
ngx_hâp_up°ªam_£rvî_t
));

5759 i‡(
uscf
->
£rvîs
 =
NULL
) {

5760  
NGX_CONF_ERROR
;

5766 
pcf
 = *
cf
;

5767 
cf
->
˘x
 = ctx;

5768 
cf
->
cmd_ty≥
 = 
NGX_HTTP_UPS_CONF
;

5770 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

5772 *
cf
 = 
pcf
;

5774 i‡(
rv
 !
NGX_CONF_OK
) {

5775  
rv
;

5778 i‡(
uscf
->
£rvîs
->
√…s
 == 0) {

5779 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5781  
NGX_CONF_ERROR
;

5784  
rv
;

5785 
	}
}

5789 
	$ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5791 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

5793 
time_t
 
Áû_timeout
;

5794 
ngx_°r_t
 *
vÆue
, 
s
;

5795 
ngx_uæ_t
 
u
;

5796 
ngx_öt_t
 
weight
, 
max_c⁄ns
, 
max_Áûs
;

5797 
ngx_uöt_t
 
i
;

5798 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

5800 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

5801 i‡(
us
 =
NULL
) {

5802  
NGX_CONF_ERROR
;

5805 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

5807 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5809 
weight
 = 1;

5810 
max_c⁄ns
 = 0;

5811 
max_Áûs
 = 1;

5812 
Áû_timeout
 = 10;

5814 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

5816 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

5818 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_WEIGHT
)) {

5819 
nŸ_suµ‹ãd
;

5822 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

5824 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

5825 
övÆid
;

5831 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_conns=", 10) == 0) {

5833 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_CONNS
)) {

5834 
nŸ_suµ‹ãd
;

5837 
max_c⁄ns
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

5839 i‡(
max_c⁄ns
 =
NGX_ERROR
) {

5840 
övÆid
;

5846 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

5848 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_FAILS
)) {

5849 
nŸ_suµ‹ãd
;

5852 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

5854 i‡(
max_Áûs
 =
NGX_ERROR
) {

5855 
övÆid
;

5861 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

5863 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
)) {

5864 
nŸ_suµ‹ãd
;

5867 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

5868 
s
.
d©a
 = &
vÆue
[
i
].data[13];

5870 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

5872 i‡(
Áû_timeout
 =(
time_t
Ë
NGX_ERROR
) {

5873 
övÆid
;

5879 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "backup") == 0) {

5881 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_BACKUP
)) {

5882 
nŸ_suµ‹ãd
;

5885 
us
->
backup
 = 1;

5890 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "down") == 0) {

5892 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_DOWN
)) {

5893 
nŸ_suµ‹ãd
;

5896 
us
->
down
 = 1;

5901 
övÆid
;

5904 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

5906 
u
.
uæ
 = 
vÆue
[1];

5907 
u
.
deÁu…_p‹t
 = 80;

5909 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

5910 i‡(
u
.
îr
) {

5911 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5912 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

5915  
NGX_CONF_ERROR
;

5918 
us
->
«me
 = 
u
.
uæ
;

5919 
us
->
addrs
 = 
u
.addrs;

5920 
us
->
«ddrs
 = 
u
.naddrs;

5921 
us
->
weight
 = weight;

5922 
us
->
max_c⁄ns
 = max_conns;

5923 
us
->
max_Áûs
 = max_fails;

5924 
us
->
Áû_timeout
 = fail_timeout;

5926  
NGX_CONF_OK
;

5928 
övÆid
:

5930 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5931 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5933  
NGX_CONF_ERROR
;

5935 
nŸ_suµ‹ãd
:

5937 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5939 &
vÆue
[
i
]);

5941  
NGX_CONF_ERROR
;

5942 
	}
}

5945 
ngx_hâp_up°ªam_§v_c⁄f_t
 *

5946 
	$ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

5948 
ngx_uöt_t
 
i
;

5949 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

5950 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

5951 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

5953 i‡(!(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)) {

5955 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

5956 i‡(
u
->
îr
) {

5957 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5958 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

5961  
NULL
;

5965 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

5967 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

5969 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

5971 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

5972 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

5978 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)

5979 && (
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
))

5981 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5982 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

5983  
NULL
;

5986 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
u
->
no_p‹t
) {

5987 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5989 &
u
->
ho°
, u->
p‹t
);

5990  
NULL
;

5993 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
uscÂ
[
i
]->
no_p‹t
) {

5994 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

5996 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

5997 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

5998  
NULL
;

6001 i‡(
uscÂ
[
i
]->
p‹t
 && 
u
->port

6002 && 
uscÂ
[
i
]->
p‹t
 !
u
->port)

6007 i‡(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
) {

6008 
uscÂ
[
i
]->
Êags
 = flags;

6009 
uscÂ
[
i
]->
p‹t
 = 0;

6012  
uscÂ
[
i
];

6015 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_§v_c⁄f_t
));

6016 i‡(
uscf
 =
NULL
) {

6017  
NULL
;

6020 
uscf
->
Êags
 = flags;

6021 
uscf
->
ho°
 = 
u
->host;

6022 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

6023 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

6024 
uscf
->
p‹t
 = 
u
->port;

6025 
uscf
->
no_p‹t
 = 
u
->no_port;

6027 i‡(
u
->
«ddrs
 =1 && (u->
p‹t
 || u->
Ámûy
 =
AF_UNIX
)) {

6028 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

6029 (
ngx_hâp_up°ªam_£rvî_t
));

6030 i‡(
uscf
->
£rvîs
 =
NULL
) {

6031  
NULL
;

6034 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

6035 i‡(
us
 =
NULL
) {

6036  
NULL
;

6039 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

6041 
us
->
addrs
 = 
u
->addrs;

6042 
us
->
«ddrs
 = 1;

6045 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

6046 i‡(
uscÂ
 =
NULL
) {

6047  
NULL
;

6050 *
uscÂ
 = 
uscf
;

6052  
uscf
;

6053 
	}
}

6057 
	$ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

6058 *
c⁄f
)

6060 *
p
 = 
c⁄f
;

6062 
ngx_öt_t
 
rc
;

6063 
ngx_°r_t
 *
vÆue
;

6064 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

6065 
ngx_hâp_up°ªam_loˇl_t
 **
∂oˇl
, *
loˇl
;

6066 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

6068 
∂oˇl
 = (
ngx_hâp_up°ªam_loˇl_t
 **Ë(
p
 + 
cmd
->
off£t
);

6070 i‡(*
∂oˇl
 !
NGX_CONF_UNSET_PTR
) {

6074 
vÆue
 = 
cf
->
¨gs
->
ñts
;

6076 i‡(
cf
->
¨gs
->
√…s
 =2 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

6077 *
∂oˇl
 = 
NULL
;

6078  
NGX_CONF_OK
;

6081 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

6083 
ccv
.
cf
 = cf;

6084 
ccv
.
vÆue
 = &value[1];

6085 
ccv
.
com∂ex_vÆue
 = &
cv
;

6087 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

6088  
NGX_CONF_ERROR
;

6091 
loˇl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_loˇl_t
));

6092 i‡(
loˇl
 =
NULL
) {

6093  
NGX_CONF_ERROR
;

6096 *
∂oˇl
 = 
loˇl
;

6098 i‡(
cv
.
Àngths
) {

6099 
loˇl
->
vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

6100 i‡(
loˇl
->
vÆue
 =
NULL
) {

6101  
NGX_CONF_ERROR
;

6104 *
loˇl
->
vÆue
 = 
cv
;

6107 
loˇl
->
addr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

6108 i‡(
loˇl
->
addr
 =
NULL
) {

6109  
NGX_CONF_ERROR
;

6112 
rc
 = 
	`ngx_∑r£_addr_p‹t
(
cf
->
poﬁ
, 
loˇl
->
addr
, 
vÆue
[1].
d©a
,

6113 
vÆue
[1].
Àn
);

6115 
rc
) {

6116 
NGX_OK
:

6117 
loˇl
->
addr
->
«me
 = 
vÆue
[1];

6120 
NGX_DECLINED
:

6121 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

6122 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

6126  
NGX_CONF_ERROR
;

6130 i‡(
cf
->
¨gs
->
√…s
 > 2) {

6131 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "transparent") == 0) {

6132 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

6133 
ngx_c‹e_c⁄f_t
 *
ccf
;

6135 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
,

6136 
ngx_c‹e_moduÀ
);

6138 
ccf
->
å™•¨ít
 = 1;

6139 
loˇl
->
å™•¨ít
 = 1;

6141 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

6146 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

6147 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

6148  
NGX_CONF_ERROR
;

6152  
NGX_CONF_OK
;

6153 
	}
}

6156 
ngx_öt_t


6157 
	$ngx_hâp_up°ªam_£t_loˇl
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

6158 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
)

6160 
ngx_öt_t
 
rc
;

6161 
ngx_°r_t
 
vÆ
;

6162 
ngx_addr_t
 *
addr
;

6164 i‡(
loˇl
 =
NULL
) {

6165 
u
->
≥î
.
loˇl
 = 
NULL
;

6166  
NGX_OK
;

6169 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

6170 
u
->
≥î
.
å™•¨ít
 = 
loˇl
->transparent;

6173 i‡(
loˇl
->
vÆue
 =
NULL
) {

6174 
u
->
≥î
.
loˇl
 =Üoˇl->
addr
;

6175  
NGX_OK
;

6178 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
loˇl
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

6179  
NGX_ERROR
;

6182 i‡(
vÆ
.
Àn
 == 0) {

6183  
NGX_OK
;

6186 
addr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_addr_t
));

6187 i‡(
addr
 =
NULL
) {

6188  
NGX_ERROR
;

6191 
rc
 = 
	`ngx_∑r£_addr_p‹t
(
r
->
poﬁ
, 
addr
, 
vÆ
.
d©a
, vÆ.
Àn
);

6192 i‡(
rc
 =
NGX_ERROR
) {

6193  
NGX_ERROR
;

6196 i‡(
rc
 !
NGX_OK
) {

6197 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

6198 "övÆidÜoˇ»addªs†\"%V\"", &
vÆ
);

6199  
NGX_OK
;

6202 
addr
->
«me
 = 
vÆ
;

6203 
u
->
≥î
.
loˇl
 = 
addr
;

6205  
NGX_OK
;

6206 
	}
}

6210 
	$ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

6211 *
c⁄f
)

6213 *
p
 = 
c⁄f
;

6215 
ngx_°r_t
 *
vÆue
;

6216 
ngx_¨øy_t
 **
a
;

6217 
ngx_hâp_up°ªam_∑øm_t
 *
∑øm
;

6219 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

6221 i‡(*
a
 =
NULL
) {

6222 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_hâp_up°ªam_∑øm_t
));

6223 i‡(*
a
 =
NULL
) {

6224  
NGX_CONF_ERROR
;

6228 
∑øm
 = 
	`ngx_¨øy_push
(*
a
);

6229 i‡(
∑øm
 =
NULL
) {

6230  
NGX_CONF_ERROR
;

6233 
vÆue
 = 
cf
->
¨gs
->
ñts
;

6235 
∑øm
->
key
 = 
vÆue
[1];

6236 
∑øm
->
vÆue
 = value[2];

6237 
∑øm
->
skù_em±y
 = 0;

6239 i‡(
cf
->
¨gs
->
√…s
 == 4) {

6240 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "if_not_empty") != 0) {

6241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

6242 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

6243  
NGX_CONF_ERROR
;

6246 
∑øm
->
skù_em±y
 = 1;

6249  
NGX_CONF_OK
;

6250 
	}
}

6253 
ngx_öt_t


6254 
	$ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

6255 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

6256 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
)

6258 
ngx_°r_t
 *
h
;

6259 
ngx_uöt_t
 
i
, 
j
;

6260 
ngx_¨øy_t
 
hide_hódîs
;

6261 
ngx_hash_key_t
 *
hk
;

6263 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR


6264 && 
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
)

6266 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

6267 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

6269 
c⁄f
->
hide_hódîs_hash
 = 
¥ev
->hide_headers_hash;

6271 i‡(
c⁄f
->
hide_hódîs_hash
.
buckës
) {

6272  
NGX_OK
;

6276 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR
) {

6277 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

6280 i‡(
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
) {

6281 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

6285 i‡(
	`ngx_¨øy_öô
(&
hide_hódîs
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

6286 !
NGX_OK
)

6288  
NGX_ERROR
;

6291 
h
 = 
deÁu…_hide_hódîs
; h->
Àn
; h++) {

6292 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

6293 i‡(
hk
 =
NULL
) {

6294  
NGX_ERROR
;

6297 
hk
->
key
 = *
h
;

6298 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
->
d©a
, h->
Àn
);

6299 
hk
->
vÆue
 = (*) 1;

6302 i‡(
c⁄f
->
hide_hódîs
 !
NGX_CONF_UNSET_PTR
) {

6304 
h
 = 
c⁄f
->
hide_hódîs
->
ñts
;

6306 
i
 = 0; i < 
c⁄f
->
hide_hódîs
->
√…s
; i++) {

6308 
hk
 = 
hide_hódîs
.
ñts
;

6310 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

6311 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

6312 
exi°
;

6316 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

6317 i‡(
hk
 =
NULL
) {

6318  
NGX_ERROR
;

6321 
hk
->
key
 = 
h
[
i
];

6322 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
[
i
].
d©a
, h[i].
Àn
);

6323 
hk
->
vÆue
 = (*) 1;

6325 
exi°
:

6331 i‡(
c⁄f
->
∑ss_hódîs
 !
NGX_CONF_UNSET_PTR
) {

6333 
h
 = 
c⁄f
->
∑ss_hódîs
->
ñts
;

6334 
hk
 = 
hide_hódîs
.
ñts
;

6336 
i
 = 0; i < 
c⁄f
->
∑ss_hódîs
->
√…s
; i++) {

6337 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

6339 i‡(
hk
[
j
].
key
.
d©a
 =
NULL
) {

6343 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

6344 
hk
[
j
].
key
.
d©a
 = 
NULL
;

6351 
hash
->hash = &
c⁄f
->
hide_hódîs_hash
;

6352 
hash
->
key
 = 
ngx_hash_key_lc
;

6353 
hash
->
poﬁ
 = 
cf
->pool;

6354 
hash
->
ãmp_poﬁ
 = 
NULL
;

6356 i‡(
	`ngx_hash_öô
(
hash
, 
hide_hódîs
.
ñts
, hide_hódîs.
√…s
Ë!
NGX_OK
) {

6357  
NGX_ERROR
;

6365 i‡(
¥ev
->
hide_hódîs_hash
.
buckës
 =
NULL


6366 && 
c⁄f
->
hide_hódîs
 =
¥ev
->hide_headers

6367 && 
c⁄f
->
∑ss_hódîs
 =
¥ev
->pass_headers)

6369 
¥ev
->
hide_hódîs_hash
 = 
c⁄f
->hide_headers_hash;

6372  
NGX_OK
;

6373 
	}
}

6377 
	$ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

6379 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

6381 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_maö_c⁄f_t
));

6382 i‡(
umcf
 =
NULL
) {

6383  
NULL
;

6386 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

6387 (
ngx_hâp_up°ªam_§v_c⁄f_t
 *))

6388 !
NGX_OK
)

6390  
NULL
;

6393  
umcf
;

6394 
	}
}

6398 
	$ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

6400 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

6402 
ngx_uöt_t
 
i
;

6403 
ngx_¨øy_t
 
hódîs_ö
;

6404 
ngx_hash_key_t
 *
hk
;

6405 
ngx_hash_öô_t
 
hash
;

6406 
ngx_hâp_up°ªam_öô_±
 
öô
;

6407 
ngx_hâp_up°ªam_hódî_t
 *
hódî
;

6408 
ngx_hâp_up°ªam_§v_c⁄f_t
 **
uscÂ
;

6410 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

6412 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

6414 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam
 ? uscfp[i]->peer.init_upstream:

6415 
ngx_hâp_up°ªam_öô_round_robö
;

6417 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

6418  
NGX_CONF_ERROR
;

6425 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

6426 !
NGX_OK
)

6428  
NGX_CONF_ERROR
;

6431 
hódî
 = 
ngx_hâp_up°ªam_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

6432 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

6433 i‡(
hk
 =
NULL
) {

6434  
NGX_CONF_ERROR
;

6437 
hk
->
key
 = 
hódî
->
«me
;

6438 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

6439 
hk
->
vÆue
 = 
hódî
;

6442 
hash
.hash = &
umcf
->
hódîs_ö_hash
;

6443 
hash
.
key
 = 
ngx_hash_key_lc
;

6444 
hash
.
max_size
 = 512;

6445 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

6446 
hash
.
«me
 = "upstream_headers_in_hash";

6447 
hash
.
poﬁ
 = 
cf
->pool;

6448 
hash
.
ãmp_poﬁ
 = 
NULL
;

6450 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

6451  
NGX_CONF_ERROR
;

6454  
NGX_CONF_OK
;

6455 
	}
}

	@src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_403
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_HTTP_429
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00001000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00002000

	)

33 
	#NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT
 0x00004000

	)

34 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

35 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

37 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

39 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

40 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

41 |
NGX_HTTP_UPSTREAM_FT_HTTP_403
 \

42 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
 \

43 |
NGX_HTTP_UPSTREAM_FT_HTTP_429
)

	)

45 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

51 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

52 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

53 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

54 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

55 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

56 
	#NGX_HTTP_UPSTREAM_IGN_VARY
 0x00000200

	)

60 
ngx_uöt_t
 
	m°©us
;

61 
ngx_m£c_t
 
	mª•⁄£_time
;

62 
ngx_m£c_t
 
	mc⁄√˘_time
;

63 
ngx_m£c_t
 
	mhódî_time
;

64 
ngx_m£c_t
 
	mqueue_time
;

65 
off_t
 
	mª•⁄£_Àngth
;

66 
off_t
 
	mbyãs_ª˚ived
;

68 
ngx_°r_t
 *
	m≥î
;

69 } 
	tngx_hâp_up°ªam_°©e_t
;

73 
ngx_hash_t
 
	mhódîs_ö_hash
;

74 
ngx_¨øy_t
 
	mup°ªams
;

76 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

78 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

80 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

81 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

82 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

83 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

87 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

88 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

89 *
d©a
;

90 } 
	tngx_hâp_up°ªam_≥î_t
;

94 
ngx_°r_t
 
«me
;

95 
ngx_addr_t
 *
addrs
;

96 
ngx_uöt_t
 
«ddrs
;

97 
ngx_uöt_t
 
weight
;

98 
ngx_uöt_t
 
max_c⁄ns
;

99 
ngx_uöt_t
 
max_Áûs
;

100 
time_t
 
Áû_timeout
;

101 
ngx_m£c_t
 
¶ow_°¨t
;

102 
ngx_uöt_t
 
down
;

104 
backup
:1;

106 
	`NGX_COMPAT_BEGIN
(6)

107 
NGX_COMPAT_END


108 } 
	tngx_hâp_up°ªam_£rvî_t
;

111 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

112 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

113 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

114 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

115 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

116 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

117 
	#NGX_HTTP_UPSTREAM_MAX_CONNS
 0x0100

	)

120 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

121 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

122 **
§v_c⁄f
;

124 
ngx_¨øy_t
 *
£rvîs
;

126 
ngx_uöt_t
 
Êags
;

127 
ngx_°r_t
 
ho°
;

128 
u_ch¨
 *
fûe_«me
;

129 
ngx_uöt_t
 
löe
;

130 
ö_p‹t_t
 
p‹t
;

131 
ngx_uöt_t
 
no_p‹t
;

133 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

134 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

140 
ngx_addr_t
 *
addr
;

141 
ngx_hâp_com∂ex_vÆue_t
 *
vÆue
;

142 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

143 
ngx_uöt_t
 
å™•¨ít
;

145 } 
	tngx_hâp_up°ªam_loˇl_t
;

149 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

151 
ngx_m£c_t
 
c⁄√˘_timeout
;

152 
ngx_m£c_t
 
£nd_timeout
;

153 
ngx_m£c_t
 
ªad_timeout
;

154 
ngx_m£c_t
 
√xt_up°ªam_timeout
;

156 
size_t
 
£nd_low©
;

157 
size_t
 
buf„r_size
;

158 
size_t
 
limô_øã
;

160 
size_t
 
busy_buf„rs_size
;

161 
size_t
 
max_ãmp_fûe_size
;

162 
size_t
 
ãmp_fûe_wrôe_size
;

164 
size_t
 
busy_buf„rs_size_c⁄f
;

165 
size_t
 
max_ãmp_fûe_size_c⁄f
;

166 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

168 
ngx_bufs_t
 
bufs
;

170 
ngx_uöt_t
 
ign‹e_hódîs
;

171 
ngx_uöt_t
 
√xt_up°ªam
;

172 
ngx_uöt_t
 
°‹e_ac˚ss
;

173 
ngx_uöt_t
 
√xt_up°ªam_åõs
;

174 
ngx_Êag_t
 
buf„rög
;

175 
ngx_Êag_t
 
ªque°_buf„rög
;

176 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

177 
ngx_Êag_t
 
∑ss_ªque°_body
;

179 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

180 
ngx_Êag_t
 
öãr˚±_îr‹s
;

181 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

182 
ngx_Êag_t
 
f‹˚_ønges
;

184 
ngx_∑th_t
 *
ãmp_∑th
;

186 
ngx_hash_t
 
hide_hódîs_hash
;

187 
ngx_¨øy_t
 *
hide_hódîs
;

188 
ngx_¨øy_t
 *
∑ss_hódîs
;

190 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
;

192 #i‡(
NGX_HTTP_CACHE
)

193 
ngx_shm_z⁄e_t
 *
ˇche_z⁄e
;

194 
ngx_hâp_com∂ex_vÆue_t
 *
ˇche_vÆue
;

196 
ngx_uöt_t
 
ˇche_mö_u£s
;

197 
ngx_uöt_t
 
ˇche_u£_°Æe
;

198 
ngx_uöt_t
 
ˇche_mëhods
;

200 
off_t
 
ˇche_max_ønge_off£t
;

202 
ngx_Êag_t
 
ˇche_lock
;

203 
ngx_m£c_t
 
ˇche_lock_timeout
;

204 
ngx_m£c_t
 
ˇche_lock_age
;

206 
ngx_Êag_t
 
ˇche_ªvÆid©e
;

207 
ngx_Êag_t
 
ˇche_c⁄vît_hód
;

208 
ngx_Êag_t
 
ˇche_background_upd©e
;

210 
ngx_¨øy_t
 *
ˇche_vÆid
;

211 
ngx_¨øy_t
 *
ˇche_by∑ss
;

212 
ngx_¨øy_t
 *
ˇche_purge
;

213 
ngx_¨øy_t
 *
no_ˇche
;

216 
ngx_¨øy_t
 *
°‹e_Àngths
;

217 
ngx_¨øy_t
 *
°‹e_vÆues
;

219 #i‡(
NGX_HTTP_CACHE
)

220 sig√d 
ˇche
:2;

222 sig√d 
°‹e
:2;

223 
öãr˚±_404
:1;

224 
ch™ge_buf„rög
:1;

225 
∑ss_åaûîs
:1;

226 
¥e£rve_ouçut
:1;

228 #i‡(
NGX_HTTP_SSL
 || 
NGX_COMPAT
)

229 
ngx_s¶_t
 *
s¶
;

230 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

232 
ngx_hâp_com∂ex_vÆue_t
 *
s¶_«me
;

233 
ngx_Êag_t
 
s¶_£rvî_«me
;

234 
ngx_Êag_t
 
s¶_vîify
;

237 
ngx_°r_t
 
moduÀ
;

239 
	`NGX_COMPAT_BEGIN
(2)

240 
NGX_COMPAT_END


241 } 
	tngx_hâp_up°ªam_c⁄f_t
;

245 
ngx_°r_t
 
«me
;

246 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

247 
ngx_uöt_t
 
off£t
;

248 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

249 
ngx_uöt_t
 
c⁄f
;

250 
ngx_uöt_t
 
ªdúe˘
;

251 } 
	tngx_hâp_up°ªam_hódî_t
;

255 
ngx_li°_t
 
hódîs
;

256 
ngx_li°_t
 
åaûîs
;

258 
ngx_uöt_t
 
°©us_n
;

259 
ngx_°r_t
 
°©us_löe
;

261 
ngx_èbÀ_ñt_t
 *
°©us
;

262 
ngx_èbÀ_ñt_t
 *
d©e
;

263 
ngx_èbÀ_ñt_t
 *
£rvî
;

264 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

266 
ngx_èbÀ_ñt_t
 *
expúes
;

267 
ngx_èbÀ_ñt_t
 *
ëag
;

268 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

269 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

270 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

272 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

273 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

275 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

276 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

277 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

278 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

279 
ngx_èbÀ_ñt_t
 *
å™s„r_ícodög
;

280 
ngx_èbÀ_ñt_t
 *
v¨y
;

282 #i‡(
NGX_HTTP_GZIP
)

283 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

286 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

287 
ngx_¨øy_t
 
cookõs
;

289 
off_t
 
c⁄ã¡_Àngth_n
;

290 
time_t
 
œ°_modifõd_time
;

292 
c⁄√˘i⁄_˛o£
:1;

293 
chunked
:1;

294 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

298 
ngx_°r_t
 
ho°
;

299 
ö_p‹t_t
 
p‹t
;

300 
ngx_uöt_t
 
no_p‹t
;

302 
ngx_uöt_t
 
«ddrs
;

303 
ngx_ªsﬁvî_addr_t
 *
addrs
;

305 
sockaddr
 *sockaddr;

306 
sockÀn_t
 
sockÀn
;

307 
ngx_°r_t
 
«me
;

309 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

310 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

313 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

314 
	tngx_hâp_up°ªam_t
 *
	tu
);

317 
	sngx_hâp_up°ªam_s
 {

318 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

319 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

321 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

323 
ngx_evít_pùe_t
 *
pùe
;

325 
ngx_chaö_t
 *
ªque°_bufs
;

327 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

328 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

330 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

331 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

332 #i‡(
NGX_HTTP_CACHE
)

333 
ngx_¨øy_t
 *
ˇches
;

336 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

338 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

340 
ngx_buf_t
 
‰om_˛õ¡
;

342 
ngx_buf_t
 
buf„r
;

343 
off_t
 
Àngth
;

345 
ngx_chaö_t
 *
out_bufs
;

346 
ngx_chaö_t
 *
busy_bufs
;

347 
ngx_chaö_t
 *
‰ì_bufs
;

349 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

350 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

351 *
öput_fûãr_˘x
;

353 #i‡(
NGX_HTTP_CACHE
)

354 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

356 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

357 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

358 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

359 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

360 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

361 
ngx_öt_t
 
rc
);

362 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

363 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

364 
	`ngx_öt_t
 (*
ªwrôe_cookõ
)(
ngx_hâp_ªque°_t
 *
r
,

365 
ngx_èbÀ_ñt_t
 *
h
);

367 
ngx_m£c_t
 
timeout
;

369 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

371 
ngx_°r_t
 
mëhod
;

372 
ngx_°r_t
 
schema
;

373 
ngx_°r_t
 
uri
;

375 #i‡(
NGX_HTTP_SSL
 || 
NGX_COMPAT
)

376 
ngx_°r_t
 
s¶_«me
;

379 
ngx_hâp_˛ónup_±
 *
˛ónup
;

381 
°‹e
:1;

382 
ˇchóbÀ
:1;

383 
ac˚l
:1;

384 
s¶
:1;

385 #i‡(
NGX_HTTP_CACHE
)

386 
ˇche_°©us
:3;

389 
buf„rög
:1;

390 
kì∑live
:1;

391 
upgøde
:1;

393 
ªque°_£¡
:1;

394 
ªque°_body_£¡
:1;

395 
ªque°_body_blocked
:1;

396 
hódî_£¡
:1;

401 
ngx_uöt_t
 
°©us
;

402 
ngx_uöt_t
 
mask
;

403 } 
	tngx_hâp_up°ªam_√xt_t
;

407 
ngx_°r_t
 
key
;

408 
ngx_°r_t
 
vÆue
;

409 
ngx_uöt_t
 
skù_em±y
;

410 } 
	tngx_hâp_up°ªam_∑øm_t
;

413 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

414 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

415 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

416 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

417 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

418 *
c⁄f
);

419 *
	`ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

420 *
c⁄f
);

421 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

422 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

423 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

426 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

427 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

430 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

431 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

432 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@src/http/ngx_http_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#ngx_hâp_up°ªam_åõs
(
p
Ë(’)->
numbî
 \

14 + ((
p
)->
√xt
 ? (p)->√xt->
numbî
 : 0))

	)

17 
ngx_hâp_up°ªam_º_≥î_t
 *
ngx_hâp_up°ªam_gë_≥î
(

18 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
);

20 #i‡(
NGX_HTTP_SSL
)

22 
ngx_öt_t
 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

23 *
d©a
);

24 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

25 *
d©a
);

30 
ngx_öt_t


31 
	$ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

32 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

34 
ngx_uæ_t
 
u
;

35 
ngx_uöt_t
 
i
, 
j
, 
n
, 
w
;

36 
ngx_hâp_up°ªam_£rvî_t
 *
£rvî
;

37 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, **
≥îp
;

38 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

40 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_round_robö_≥î
;

42 i‡(
us
->
£rvîs
) {

43 
£rvî
 = 
us
->
£rvîs
->
ñts
;

45 
n
 = 0;

46 
w
 = 0;

48 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

49 i‡(
£rvî
[
i
].
backup
) {

53 
n
 +
£rvî
[
i
].
«ddrs
;

54 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

57 i‡(
n
 == 0) {

58 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

60 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

61  
NGX_ERROR
;

64 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
));

65 i‡(
≥îs
 =
NULL
) {

66  
NGX_ERROR
;

69 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_t
Ë* 
n
);

70 i‡(
≥î
 =
NULL
) {

71  
NGX_ERROR
;

74 
≥îs
->
sögÀ
 = (
n
 == 1);

75 
≥îs
->
numbî
 = 
n
;

76 
≥îs
->
weighãd
 = (
w
 !
n
);

77 
≥îs
->
tŸÆ_weight
 = 
w
;

78 
≥îs
->
«me
 = &
us
->
ho°
;

80 
n
 = 0;

81 
≥îp
 = &
≥îs
->
≥î
;

83 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

84 i‡(
£rvî
[
i
].
backup
) {

88 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

89 
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

90 
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

91 
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

92 
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

93 
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

94 
≥î
[
n
].
cuºít_weight
 = 0;

95 
≥î
[
n
].
max_c⁄ns
 = 
£rvî
[
i
].max_conns;

96 
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

97 
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

98 
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

99 
≥î
[
n
].
£rvî
 = sîvî[
i
].
«me
;

101 *
≥îp
 = &
≥î
[
n
];

102 
≥îp
 = &
≥î
[
n
].
√xt
;

103 
n
++;

107 
us
->
≥î
.
d©a
 = 
≥îs
;

111 
n
 = 0;

112 
w
 = 0;

114 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

115 i‡(!
£rvî
[
i
].
backup
) {

119 
n
 +
£rvî
[
i
].
«ddrs
;

120 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

123 i‡(
n
 == 0) {

124  
NGX_OK
;

127 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
));

128 i‡(
backup
 =
NULL
) {

129  
NGX_ERROR
;

132 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_t
Ë* 
n
);

133 i‡(
≥î
 =
NULL
) {

134  
NGX_ERROR
;

137 
≥îs
->
sögÀ
 = 0;

138 
backup
->
sögÀ
 = 0;

139 
backup
->
numbî
 = 
n
;

140 
backup
->
weighãd
 = (
w
 !
n
);

141 
backup
->
tŸÆ_weight
 = 
w
;

142 
backup
->
«me
 = &
us
->
ho°
;

144 
n
 = 0;

145 
≥îp
 = &
backup
->
≥î
;

147 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

148 i‡(!
£rvî
[
i
].
backup
) {

152 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

153 
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

154 
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

155 
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

156 
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

157 
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

158 
≥î
[
n
].
cuºít_weight
 = 0;

159 
≥î
[
n
].
max_c⁄ns
 = 
£rvî
[
i
].max_conns;

160 
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

161 
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

162 
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

163 
≥î
[
n
].
£rvî
 = sîvî[
i
].
«me
;

165 *
≥îp
 = &
≥î
[
n
];

166 
≥îp
 = &
≥î
[
n
].
√xt
;

167 
n
++;

171 
≥îs
->
√xt
 = 
backup
;

173  
NGX_OK
;

179 i‡(
us
->
p‹t
 == 0) {

180 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

182 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

183  
NGX_ERROR
;

186 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

188 
u
.
ho°
 = 
us
->host;

189 
u
.
p‹t
 = 
us
->port;

191 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

192 i‡(
u
.
îr
) {

193 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

195 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

198  
NGX_ERROR
;

201 
n
 = 
u
.
«ddrs
;

203 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
));

204 i‡(
≥îs
 =
NULL
) {

205  
NGX_ERROR
;

208 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_t
Ë* 
n
);

209 i‡(
≥î
 =
NULL
) {

210  
NGX_ERROR
;

213 
≥îs
->
sögÀ
 = (
n
 == 1);

214 
≥îs
->
numbî
 = 
n
;

215 
≥îs
->
weighãd
 = 0;

216 
≥îs
->
tŸÆ_weight
 = 
n
;

217 
≥îs
->
«me
 = &
us
->
ho°
;

219 
≥îp
 = &
≥îs
->
≥î
;

221 
i
 = 0; i < 
u
.
«ddrs
; i++) {

222 
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

223 
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

224 
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

225 
≥î
[
i
].
weight
 = 1;

226 
≥î
[
i
].
ef„˘ive_weight
 = 1;

227 
≥î
[
i
].
cuºít_weight
 = 0;

228 
≥î
[
i
].
max_c⁄ns
 = 0;

229 
≥î
[
i
].
max_Áûs
 = 1;

230 
≥î
[
i
].
Áû_timeout
 = 10;

231 *
≥îp
 = &
≥î
[
i
];

232 
≥îp
 = &
≥î
[
i
].
√xt
;

235 
us
->
≥î
.
d©a
 = 
≥îs
;

239  
NGX_OK
;

240 
	}
}

243 
ngx_öt_t


244 
	$ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

245 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

247 
ngx_uöt_t
 
n
;

248 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

250 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

252 i‡(
ºp
 =
NULL
) {

253 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

254 i‡(
ºp
 =
NULL
) {

255  
NGX_ERROR
;

258 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

261 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

262 
ºp
->
cuºít
 = 
NULL
;

263 
ºp
->
c⁄fig
 = 0;

265 
n
 = 
ºp
->
≥îs
->
numbî
;

267 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

268 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

271 i‡(
n
 <8 * (
uöçå_t
)) {

272 
ºp
->
åõd
 = &ºp->
d©a
;

273 
ºp
->
d©a
 = 0;

276 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

278 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

279 i‡(
ºp
->
åõd
 =
NULL
) {

280  
NGX_ERROR
;

284 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

285 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

286 
r
->
up°ªam
->
≥î
.
åõs
 = 
	`ngx_hâp_up°ªam_åõs
(
ºp
->
≥îs
);

287 #i‡(
NGX_HTTP_SSL
)

288 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

289 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
;

290 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

291 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

294  
NGX_OK
;

295 
	}
}

298 
ngx_öt_t


299 
	$ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

300 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
)

302 
u_ch¨
 *
p
;

303 
size_t
 
Àn
;

304 
sockÀn_t
 
sockÀn
;

305 
ngx_uöt_t
 
i
, 
n
;

306 
sockaddr
 *sockaddr;

307 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, **
≥îp
;

308 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

309 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

311 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

313 i‡(
ºp
 =
NULL
) {

314 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

315 i‡(
ºp
 =
NULL
) {

316  
NGX_ERROR
;

319 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

322 
≥îs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
));

323 i‡(
≥îs
 =
NULL
) {

324  
NGX_ERROR
;

327 
≥î
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_t
)

328 * 
ur
->
«ddrs
);

329 i‡(
≥î
 =
NULL
) {

330  
NGX_ERROR
;

333 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

334 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

335 
≥îs
->
«me
 = &
ur
->
ho°
;

337 i‡(
ur
->
sockaddr
) {

338 
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

339 
≥î
[0].
sockÀn
 = 
ur
->socklen;

340 
≥î
[0].
«me
 = 
ur
->«me.
d©a
 ? ur->«mê: ur->
ho°
;

341 
≥î
[0].
weight
 = 1;

342 
≥î
[0].
ef„˘ive_weight
 = 1;

343 
≥î
[0].
cuºít_weight
 = 0;

344 
≥î
[0].
max_c⁄ns
 = 0;

345 
≥î
[0].
max_Áûs
 = 1;

346 
≥î
[0].
Áû_timeout
 = 10;

347 
≥îs
->
≥î
 =Öeer;

350 
≥îp
 = &
≥îs
->
≥î
;

352 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

354 
sockÀn
 = 
ur
->
addrs
[
i
].socklen;

356 
sockaddr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
sockÀn
);

357 i‡(
sockaddr
 =
NULL
) {

358  
NGX_ERROR
;

361 
	`ngx_mem˝y
(
sockaddr
, 
ur
->
addrs
[
i
].sockaddr, 
sockÀn
);

362 
	`ngx_öë_£t_p‹t
(
sockaddr
, 
ur
->
p‹t
);

364 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

365 i‡(
p
 =
NULL
) {

366  
NGX_ERROR
;

369 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

371 
≥î
[
i
].
sockaddr
 = sockaddr;

372 
≥î
[
i
].
sockÀn
 = socklen;

373 
≥î
[
i
].
«me
.
Àn
 =Üen;

374 
≥î
[
i
].
«me
.
d©a
 = 
p
;

375 
≥î
[
i
].
weight
 = 1;

376 
≥î
[
i
].
ef„˘ive_weight
 = 1;

377 
≥î
[
i
].
cuºít_weight
 = 0;

378 
≥î
[
i
].
max_c⁄ns
 = 0;

379 
≥î
[
i
].
max_Áûs
 = 1;

380 
≥î
[
i
].
Áû_timeout
 = 10;

381 *
≥îp
 = &
≥î
[
i
];

382 
≥îp
 = &
≥î
[
i
].
√xt
;

386 
ºp
->
≥îs
 =Öeers;

387 
ºp
->
cuºít
 = 
NULL
;

388 
ºp
->
c⁄fig
 = 0;

390 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

391 
ºp
->
åõd
 = &ºp->
d©a
;

392 
ºp
->
d©a
 = 0;

395 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

396 / (8 * (
uöçå_t
));

398 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

399 i‡(
ºp
->
åõd
 =
NULL
) {

400  
NGX_ERROR
;

404 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

405 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

406 
r
->
up°ªam
->
≥î
.
åõs
 = 
	`ngx_hâp_up°ªam_åõs
(
ºp
->
≥îs
);

407 #i‡(
NGX_HTTP_SSL
)

408 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
;

409 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
;

412  
NGX_OK
;

413 
	}
}

416 
ngx_öt_t


417 
	$ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

419 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

421 
ngx_öt_t
 
rc
;

422 
ngx_uöt_t
 
i
, 
n
;

423 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

424 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

426 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

427 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

429 
pc
->
ˇched
 = 0;

430 
pc
->
c⁄√˘i⁄
 = 
NULL
;

432 
≥îs
 = 
ºp
->peers;

433 
	`ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
);

435 i‡(
≥îs
->
sögÀ
) {

436 
≥î
 = 
≥îs
->peer;

438 i‡(
≥î
->
down
) {

439 
Áûed
;

442 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

443 
Áûed
;

446 
ºp
->
cuºít
 = 
≥î
;

452 
≥î
 = 
	`ngx_hâp_up°ªam_gë_≥î
(
ºp
);

454 i‡(
≥î
 =
NULL
) {

455 
Áûed
;

458 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

460 
≥î
,Öìr->
cuºít_weight
);

463 
pc
->
sockaddr
 = 
≥î
->sockaddr;

464 
pc
->
sockÀn
 = 
≥î
->socklen;

465 
pc
->
«me
 = &
≥î
->name;

467 
≥î
->
c⁄ns
++;

469 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

471  
NGX_OK
;

473 
Áûed
:

475 i‡(
≥îs
->
√xt
) {

477 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0, "backup servers");

479 
ºp
->
≥îs
 =Öìrs->
√xt
;

481 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

482 / (8 * (
uöçå_t
));

484 
i
 = 0; i < 
n
; i++) {

485 
ºp
->
åõd
[
i
] = 0;

488 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

490 
rc
 = 
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

492 i‡(
rc
 !
NGX_BUSY
) {

493  
rc
;

496 
	`ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
);

499 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

501 
pc
->
«me
 = 
≥îs
->name;

503  
NGX_BUSY
;

504 
	}
}

507 
ngx_hâp_up°ªam_º_≥î_t
 *

508 
	$ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
)

510 
time_t
 
now
;

511 
uöçå_t
 
m
;

512 
ngx_öt_t
 
tŸÆ
;

513 
ngx_uöt_t
 
i
, 
n
, 
p
;

514 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

516 
now
 = 
	`ngx_time
();

518 
be°
 = 
NULL
;

519 
tŸÆ
 = 0;

521 #i‡(
NGX_SUPPRESS_WARN
)

522 
p
 = 0;

525 
≥î
 = 
ºp
->
≥îs
->≥î, 
i
 = 0;

526 
≥î
;

527 
≥î
 =Öìr->
√xt
, 
i
++)

529 
n
 = 
i
 / (8 * (
uöçå_t
));

530 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

532 i‡(
ºp
->
åõd
[
n
] & 
m
) {

536 i‡(
≥î
->
down
) {

540 i‡(
≥î
->
max_Áûs


541 && 
≥î
->
Áûs
 >≥î->
max_Áûs


542 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

547 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

551 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

552 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

554 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

555 
≥î
->
ef„˘ive_weight
++;

558 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

559 
be°
 = 
≥î
;

560 
p
 = 
i
;

564 i‡(
be°
 =
NULL
) {

565  
NULL
;

568 
ºp
->
cuºít
 = 
be°
;

570 
n
 = 
p
 / (8 * (
uöçå_t
));

571 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

573 
ºp
->
åõd
[
n
] |
m
;

575 
be°
->
cuºít_weight
 -
tŸÆ
;

577 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

578 
be°
->
checked
 = 
now
;

581  
be°
;

582 
	}
}

586 
	$ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

587 
ngx_uöt_t
 
°©e
)

589 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

591 
time_t
 
now
;

592 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

594 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

595 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

599 
≥î
 = 
ºp
->
cuºít
;

601 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
ºp
->
≥îs
);

602 
	`ngx_hâp_up°ªam_º_≥î_lock
(
ºp
->
≥îs
, 
≥î
);

604 i‡(
ºp
->
≥îs
->
sögÀ
) {

606 
≥î
->
c⁄ns
--;

608 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
ºp
->
≥îs
, 
≥î
);

609 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
ºp
->
≥îs
);

611 
pc
->
åõs
 = 0;

615 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

616 
now
 = 
	`ngx_time
();

618 
≥î
->
Áûs
++;

619 
≥î
->
ac˚s£d
 = 
now
;

620 
≥î
->
checked
 = 
now
;

622 i‡(
≥î
->
max_Áûs
) {

623 
≥î
->
ef„˘ive_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

625 i‡(
≥î
->
Áûs
 >≥î->
max_Áûs
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
pc
->
log
, 0,

631 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

633 
≥î
,Öìr->
ef„˘ive_weight
);

635 i‡(
≥î
->
ef„˘ive_weight
 < 0) {

636 
≥î
->
ef„˘ive_weight
 = 0;

643 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

644 
≥î
->
Áûs
 = 0;

648 
≥î
->
c⁄ns
--;

650 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
ºp
->
≥îs
, 
≥î
);

651 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
ºp
->
≥îs
);

653 i‡(
pc
->
åõs
) {

654 
pc
->
åõs
--;

656 
	}
}

659 #i‡(
NGX_HTTP_SSL
)

661 
ngx_öt_t


662 
	$ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

663 *
d©a
)

665 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

667 
ngx_öt_t
 
rc
;

668 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

669 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

670 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

671 
Àn
;

672 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

675 
u_ch¨
 *
p
;

676 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

677 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

680 
≥î
 = 
ºp
->
cuºít
;

682 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

683 
≥îs
 = 
ºp
->peers;

685 i‡(
≥îs
->
shpoﬁ
) {

686 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
≥îs
);

687 
	`ngx_hâp_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
);

689 i‡(
≥î
->
s¶_£ssi⁄
 =
NULL
) {

690 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

691 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

692  
NGX_OK
;

695 
Àn
 = 
≥î
->
s¶_£ssi⁄_Àn
;

697 
	`ngx_mem˝y
(
buf
, 
≥î
->
s¶_£ssi⁄
, 
Àn
);

699 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

700 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

702 
p
 = 
buf
;

703 
s¶_£ssi⁄
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
Àn
);

705 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

707 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

708 "£à£ssi⁄: %p", 
s¶_£ssi⁄
);

710 
	`ngx_s¶_‰ì_£ssi⁄
(
s¶_£ssi⁄
);

712  
rc
;

716 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

718 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

720 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

721 "£à£ssi⁄: %p", 
s¶_£ssi⁄
);

723  
rc
;

724 
	}
}

728 
	$ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

729 *
d©a
)

731 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

733 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

734 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

735 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

736 
Àn
;

737 
u_ch¨
 *
p
;

738 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

739 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

742 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

743 
≥îs
 = 
ºp
->peers;

745 i‡(
≥îs
->
shpoﬁ
) {

747 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë0_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

749 i‡(
s¶_£ssi⁄
 =
NULL
) {

753 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

754 "ßvê£ssi⁄: %p", 
s¶_£ssi⁄
);

756 
Àn
 = 
	`i2d_SSL_SESSION
(
s¶_£ssi⁄
, 
NULL
);

760 i‡(
Àn
 > 
NGX_SSL_MAX_SESSION_SIZE
) {

764 
p
 = 
buf
;

765 (Ë
	`i2d_SSL_SESSION
(
s¶_£ssi⁄
, &
p
);

767 
≥î
 = 
ºp
->
cuºít
;

769 
	`ngx_hâp_up°ªam_º_≥îs_æock
(
≥îs
);

770 
	`ngx_hâp_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
);

772 i‡(
Àn
 > 
≥î
->
s¶_£ssi⁄_Àn
) {

773 
	`ngx_shmtx_lock
(&
≥îs
->
shpoﬁ
->
muãx
);

775 i‡(
≥î
->
s¶_£ssi⁄
) {

776 
	`ngx_¶ab_‰ì_locked
(
≥îs
->
shpoﬁ
, 
≥î
->
s¶_£ssi⁄
);

779 
≥î
->
s¶_£ssi⁄
 = 
	`ngx_¶ab_Æloc_locked
(
≥îs
->
shpoﬁ
, 
Àn
);

781 
	`ngx_shmtx_u∆ock
(&
≥îs
->
shpoﬁ
->
muãx
);

783 i‡(
≥î
->
s¶_£ssi⁄
 =
NULL
) {

784 
≥î
->
s¶_£ssi⁄_Àn
 = 0;

786 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

787 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

791 
≥î
->
s¶_£ssi⁄_Àn
 = 
Àn
;

794 
	`ngx_mem˝y
(
≥î
->
s¶_£ssi⁄
, 
buf
, 
Àn
);

796 
	`ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

797 
	`ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
);

803 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

805 i‡(
s¶_£ssi⁄
 =
NULL
) {

809 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

810 "ßvê£ssi⁄: %p", 
s¶_£ssi⁄
);

812 
≥î
 = 
ºp
->
cuºít
;

814 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

815 
≥î
->
s¶_£ssi⁄
 = ssl_session;

817 i‡(
ﬁd_s¶_£ssi⁄
) {

819 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

820 "ﬁd sessi⁄: %p", 
ﬁd_s¶_£ssi⁄
);

824 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

826 
	}
}

829 
ngx_öt_t


830 
	$ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

832  
NGX_OK
;

833 
	}
}

837 
	$ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

840 
	}
}

	@src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_hâp_up°ªam_º_≥î_s
 
	tngx_hâp_up°ªam_º_≥î_t
;

19 
	sngx_hâp_up°ªam_º_≥î_s
 {

20 
sockaddr
 *
	msockaddr
;

21 
sockÀn_t
 
	msockÀn
;

22 
ngx_°r_t
 
	m«me
;

23 
ngx_°r_t
 
	m£rvî
;

25 
ngx_öt_t
 
	mcuºít_weight
;

26 
ngx_öt_t
 
	mef„˘ive_weight
;

27 
ngx_öt_t
 
	mweight
;

29 
ngx_uöt_t
 
	mc⁄ns
;

30 
ngx_uöt_t
 
	mmax_c⁄ns
;

32 
ngx_uöt_t
 
	mÁûs
;

33 
time_t
 
	mac˚s£d
;

34 
time_t
 
	mchecked
;

36 
ngx_uöt_t
 
	mmax_Áûs
;

37 
time_t
 
	mÁû_timeout
;

38 
ngx_m£c_t
 
	m¶ow_°¨t
;

39 
ngx_m£c_t
 
	m°¨t_time
;

41 
ngx_uöt_t
 
	mdown
;

43 #i‡(
NGX_HTTP_SSL
 || 
NGX_COMPAT
)

44 *
	ms¶_£ssi⁄
;

45 
	ms¶_£ssi⁄_Àn
;

48 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

49 
ngx_©omic_t
 
	mlock
;

52 
ngx_hâp_up°ªam_º_≥î_t
 *
	m√xt
;

54 
NGX_COMPAT_BEGIN
(32)

55 
	mNGX_COMPAT_END


59 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

61 
	sngx_hâp_up°ªam_º_≥îs_s
 {

62 
ngx_uöt_t
 
	mnumbî
;

64 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

65 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

66 
ngx_©omic_t
 
	mrwlock
;

67 
ngx_hâp_up°ªam_º_≥îs_t
 *
	mz⁄e_√xt
;

70 
ngx_uöt_t
 
	mtŸÆ_weight
;

72 
	msögÀ
:1;

73 
	mweighãd
:1;

75 
ngx_°r_t
 *
	m«me
;

77 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

79 
ngx_hâp_up°ªam_º_≥î_t
 *
	m≥î
;

83 #i‡(
NGX_HTTP_UPSTREAM_ZONE
)

85 
	#ngx_hâp_up°ªam_º_≥îs_æock
(
≥îs
) \

87 i‡(
≥îs
->
shpoﬁ
) { \

88 
	`ngx_rwlock_æock
(&
≥îs
->
rwlock
); \

89 }

	)

91 
	#ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
) \

93 i‡(
≥îs
->
shpoﬁ
) { \

94 
	`ngx_rwlock_wlock
(&
≥îs
->
rwlock
); \

95 }

	)

97 
	#ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
) \

99 i‡(
≥îs
->
shpoﬁ
) { \

100 
	`ngx_rwlock_u∆ock
(&
≥îs
->
rwlock
); \

101 }

	)

104 
	#ngx_hâp_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
) \

106 i‡(
≥îs
->
shpoﬁ
) { \

107 
	`ngx_rwlock_wlock
(&
≥î
->
lock
); \

108 }

	)

110 
	#ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
) \

112 i‡(
≥îs
->
shpoﬁ
) { \

113 
	`ngx_rwlock_u∆ock
(&
≥î
->
lock
); \

114 }

	)

118 
	#ngx_hâp_up°ªam_º_≥îs_æock
(
≥îs
)

	)

119 
	#ngx_hâp_up°ªam_º_≥îs_wlock
(
≥îs
)

	)

120 
	#ngx_hâp_up°ªam_º_≥îs_u∆ock
(
≥îs
)

	)

121 
	#ngx_hâp_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
)

	)

122 
	#ngx_hâp_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
)

	)

128 
ngx_uöt_t
 
	mc⁄fig
;

129 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

130 
ngx_hâp_up°ªam_º_≥î_t
 *
	mcuºít
;

131 
uöçå_t
 *
	måõd
;

132 
uöçå_t
 
	md©a
;

133 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

136 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

137 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

138 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

139 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

140 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

141 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

142 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

143 *
d©a
);

144 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

145 *
d©a
, 
ngx_uöt_t
 
°©e
);

147 #i‡(
NGX_HTTP_SSL
)

148 
ngx_öt_t


149 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

150 *
d©a
);

151 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

152 *
d©a
);

	@src/http/ngx_http_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_hâp_v¨übÀ_t
 *
ngx_hâp_add_¥efix_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

15 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

23 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

25 
ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

30 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

32 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

34 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
);

37 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

38 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

40 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

41 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_åaûî_out
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

43 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

45 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

47 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

49 #i‡(
NGX_HAVE_TCP_INFO
)

50 
ngx_öt_t
 
ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

54 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

56 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

58 
ngx_öt_t
 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

62 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

64 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

66 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

68 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

69 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

70 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

71 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

72 
ngx_öt_t
 
ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

74 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

76 
ngx_hâp_v¨übÀ_£t_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

78 
ngx_öt_t
 
ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

80 
ngx_öt_t
 
ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

82 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

84 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

86 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

88 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

90 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

92 
ngx_öt_t
 
ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

94 
ngx_öt_t
 
ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

96 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

98 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

100 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

102 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

104 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

106 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

108 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_id
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

110 
ngx_öt_t
 
ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

113 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

115 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

117 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

119 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

121 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

123 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

125 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

126 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

128 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

130 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

133 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

134 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

135 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

136 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

137 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

138 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

139 
ngx_öt_t
 
ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

140 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

141 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

142 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

143 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

144 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

162 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_c‹e_v¨übÀs
[] = {

164 { 
ngx_°rög
("hâp_ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

165 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ho°
), 0, 0 },

167 { 
ngx_°rög
("hâp_u£r_agít"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

168 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
u£r_agít
), 0, 0 },

170 { 
ngx_°rög
("hâp_ª„ªr"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

171 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ª„ªr
), 0, 0 },

173 #i‡(
NGX_HTTP_GZIP
)

174 { 
ngx_°rög
("hâp_vü"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

175 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
vü
), 0, 0 },

178 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

179 { 
ngx_°rög
("hâp_x_f‹w¨ded_f‹"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

180 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
x_f‹w¨ded_f‹
), 0, 0 },

183 { 
ngx_°rög
("hâp_cookõ"), 
NULL
, 
ngx_hâp_v¨übÀ_cookõs
,

184 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
cookõs
), 0, 0 },

186 { 
ngx_°rög
("c⁄ã¡_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
,

189 { 
ngx_°rög
("c⁄ã¡_ty≥"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

190 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_ty≥
), 0, 0 },

192 { 
ngx_°rög
("ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°
, 0, 0, 0 },

194 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

195 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

197 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

199 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

201 { 
ngx_°rög
("¥oxy_¥Ÿocﬁ_addr"), 
NULL
,

202 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
, 0, 0, 0 },

204 { 
ngx_°rög
("¥oxy_¥Ÿocﬁ_p‹t"), 
NULL
,

205 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_p‹t
, 0, 0, 0 },

207 { 
ngx_°rög
("£rvî_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_addr
, 0, 0, 0 },

209 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

211 { 
ngx_°rög
("£rvî_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

212 
off£tof
(
ngx_hâp_ªque°_t
, 
hâp_¥Ÿocﬁ
), 0, 0 },

214 { 
ngx_°rög
("scheme"), 
NULL
, 
ngx_hâp_v¨übÀ_scheme
, 0, 0, 0 },

216 { 
ngx_°rög
("hâps"), 
NULL
, 
ngx_hâp_v¨übÀ_hâps
, 0, 0, 0 },

218 { 
ngx_°rög
("ªque°_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

219 
off£tof
(
ngx_hâp_ªque°_t
, 
u≈¨£d_uri
), 0, 0 },

221 { 
ngx_°rög
("uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

222 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

223 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

225 { 
ngx_°rög
("documít_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

226 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

227 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

229 { 
ngx_°rög
("ªque°"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_löe
, 0, 0, 0 },

231 { 
ngx_°rög
("documít_roŸ"), 
NULL
,

232 
ngx_hâp_v¨übÀ_documít_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

234 { 
ngx_°rög
("ªÆ∑th_roŸ"), 
NULL
,

235 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

237 { 
ngx_°rög
("quîy_°rög"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

238 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

239 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

241 { 
ngx_°rög
("args"),

242 
ngx_hâp_v¨übÀ_£t_¨gs
,

243 
ngx_hâp_v¨übÀ_ªque°
,

244 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

245 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

247 { 
ngx_°rög
("is_¨gs"), 
NULL
, 
ngx_hâp_v¨übÀ_is_¨gs
,

248 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

250 { 
ngx_°rög
("ªque°_fûíame"), 
NULL
,

251 
ngx_hâp_v¨übÀ_ªque°_fûíame
, 0,

252 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

254 { 
ngx_°rög
("£rvî_«me"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_«me
, 0, 0, 0 },

256 { 
ngx_°rög
("ªque°_mëhod"), 
NULL
,

257 
ngx_hâp_v¨übÀ_ªque°_mëhod
, 0,

258 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

260 { 
ngx_°rög
("ªmŸe_u£r"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_u£r
, 0, 0, 0 },

262 { 
ngx_°rög
("byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_byãs_£¡
,

265 { 
ngx_°rög
("body_byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_body_byãs_£¡
,

268 { 
ngx_°rög
("pùe"), 
NULL
, 
ngx_hâp_v¨übÀ_pùe
,

271 { 
ngx_°rög
("ªque°_com∂ëi⁄"), 
NULL
,

272 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
,

275 { 
ngx_°rög
("ªque°_body"), 
NULL
,

276 
ngx_hâp_v¨übÀ_ªque°_body
,

279 { 
ngx_°rög
("ªque°_body_fûe"), 
NULL
,

280 
ngx_hâp_v¨übÀ_ªque°_body_fûe
,

283 { 
ngx_°rög
("ªque°_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_Àngth
,

284 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

286 { 
ngx_°rög
("ªque°_time"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_time
,

287 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

289 { 
ngx_°rög
("ªque°_id"), 
NULL
,

290 
ngx_hâp_v¨übÀ_ªque°_id
,

293 { 
ngx_°rög
("°©us"), 
NULL
,

294 
ngx_hâp_v¨übÀ_°©us
, 0,

295 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

297 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_ty≥"), 
NULL
,

298 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
, 0, 0, 0 },

300 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_Àngth"), 
NULL
,

301 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
, 0, 0, 0 },

303 { 
ngx_°rög
("£¡_hâp_loˇti⁄"), 
NULL
,

304 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
, 0, 0, 0 },

306 { 
ngx_°rög
("£¡_hâp_œ°_modifõd"), 
NULL
,

307 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
, 0, 0, 0 },

309 { 
ngx_°rög
("£¡_hâp_c⁄√˘i⁄"), 
NULL
,

310 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
, 0, 0, 0 },

312 { 
ngx_°rög
("£¡_hâp_kìp_Æive"), 
NULL
,

313 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
, 0, 0, 0 },

315 { 
ngx_°rög
("£¡_hâp_å™s„r_ícodög"), 
NULL
,

316 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
, 0, 0, 0 },

318 { 
ngx_°rög
("£¡_hâp_ˇche_c⁄åﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

319 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
ˇche_c⁄åﬁ
), 0, 0 },

321 { 
ngx_°rög
("£¡_hâp_lök"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

322 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
lök
), 0, 0 },

324 { 
ngx_°rög
("limô_øã"), 
ngx_hâp_v¨übÀ_ªque°_£t_size
,

325 
ngx_hâp_v¨übÀ_ªque°_gë_size
,

326 
off£tof
(
ngx_hâp_ªque°_t
, 
limô_øã
),

327 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

329 { 
ngx_°rög
("c⁄√˘i⁄"), 
NULL
,

330 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
, 0, 0, 0 },

332 { 
ngx_°rög
("c⁄√˘i⁄_ªque°s"), 
NULL
,

333 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
, 0, 0, 0 },

335 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
,

338 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°«me
,

341 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_hâp_v¨übÀ_pid
,

344 { 
ngx_°rög
("m£c"), 
NULL
, 
ngx_hâp_v¨übÀ_m£c
,

345 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

347 { 
ngx_°rög
("time_iso8601"), 
NULL
, 
ngx_hâp_v¨übÀ_time_iso8601
,

348 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

350 { 
ngx_°rög
("time_loˇl"), 
NULL
, 
ngx_hâp_v¨übÀ_time_loˇl
,

351 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

353 #i‡(
NGX_HAVE_TCP_INFO
)

354 { 
ngx_°rög
("t˝öfo_πt"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

355 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

357 { 
ngx_°rög
("t˝öfo_πtv¨"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

358 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

360 { 
ngx_°rög
("t˝öfo_¢d_cwnd"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

361 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

363 { 
ngx_°rög
("t˝öfo_rcv_•a˚"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

364 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

367 { 
ngx_°rög
("hâp_"), 
NULL
, 
ngx_hâp_v¨übÀ_unknown_hódî_ö
,

368 0, 
NGX_HTTP_VAR_PREFIX
, 0 },

370 { 
ngx_°rög
("£¡_hâp_"), 
NULL
, 
ngx_hâp_v¨übÀ_unknown_hódî_out
,

371 0, 
NGX_HTTP_VAR_PREFIX
, 0 },

373 { 
ngx_°rög
("£¡_åaûî_"), 
NULL
, 
ngx_hâp_v¨übÀ_unknown_åaûî_out
,

374 0, 
NGX_HTTP_VAR_PREFIX
, 0 },

376 { 
ngx_°rög
("cookõ_"), 
NULL
, 
ngx_hâp_v¨übÀ_cookõ
,

377 0, 
NGX_HTTP_VAR_PREFIX
, 0 },

379 { 
ngx_°rög
("¨g_"), 
NULL
, 
ngx_hâp_v¨übÀ_¨gumít
,

380 0, 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_PREFIX
, 0 },

382 
ngx_hâp_nuŒ_v¨übÀ


386 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_nuŒ_vÆue
 =

387 
ngx_hâp_v¨übÀ
("");

388 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_åue_vÆue
 =

389 
ngx_hâp_v¨übÀ
("1");

392 
ngx_uöt_t
 
	gngx_hâp_v¨übÀ_dïth
 = 100;

395 
ngx_hâp_v¨übÀ_t
 *

396 
	$ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

398 
ngx_öt_t
 
rc
;

399 
ngx_uöt_t
 
i
;

400 
ngx_hash_key_t
 *
key
;

401 
ngx_hâp_v¨übÀ_t
 *
v
;

402 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

404 i‡(
«me
->
Àn
 == 0) {

405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

407  
NULL
;

410 i‡(
Êags
 & 
NGX_HTTP_VAR_PREFIX
) {

411  
	`ngx_hâp_add_¥efix_v¨übÀ
(
cf
, 
«me
, 
Êags
);

414 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

416 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

417 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

418 i‡(
«me
->
Àn
 !
key
[
i
].key.len

419 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

424 
v
 = 
key
[
i
].
vÆue
;

426 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

427 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

428 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

429  
NULL
;

432 i‡(!(
Êags
 & 
NGX_HTTP_VAR_WEAK
)) {

433 
v
->
Êags
 &~
NGX_HTTP_VAR_WEAK
;

436  
v
;

439 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

440 i‡(
v
 =
NULL
) {

441  
NULL
;

444 
v
->
«me
.
Àn
 =Çame->len;

445 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

446 i‡(
v
->
«me
.
d©a
 =
NULL
) {

447  
NULL
;

450 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

452 
v
->
£t_h™dÀr
 = 
NULL
;

453 
v
->
gë_h™dÀr
 = 
NULL
;

454 
v
->
d©a
 = 0;

455 
v
->
Êags
 = flags;

456 
v
->
ödex
 = 0;

458 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

460 i‡(
rc
 =
NGX_ERROR
) {

461  
NULL
;

464 i‡(
rc
 =
NGX_BUSY
) {

465 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

466 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

467  
NULL
;

470  
v
;

471 
	}
}

474 
ngx_hâp_v¨übÀ_t
 *

475 
	$ngx_hâp_add_¥efix_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

477 
ngx_uöt_t
 
i
;

478 
ngx_hâp_v¨übÀ_t
 *
v
;

479 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

481 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

483 
v
 = 
cmcf
->
¥efix_v¨übÀs
.
ñts
;

484 
i
 = 0; i < 
cmcf
->
¥efix_v¨übÀs
.
√…s
; i++) {

485 i‡(
«me
->
Àn
 !
v
[
i
].name.len

486 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

491 
v
 = &v[
i
];

493 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

494 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

495 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

496  
NULL
;

499 i‡(!(
Êags
 & 
NGX_HTTP_VAR_WEAK
)) {

500 
v
->
Êags
 &~
NGX_HTTP_VAR_WEAK
;

503  
v
;

506 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
¥efix_v¨übÀs
);

507 i‡(
v
 =
NULL
) {

508  
NULL
;

511 
v
->
«me
.
Àn
 =Çame->len;

512 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

513 i‡(
v
->
«me
.
d©a
 =
NULL
) {

514  
NULL
;

517 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

519 
v
->
£t_h™dÀr
 = 
NULL
;

520 
v
->
gë_h™dÀr
 = 
NULL
;

521 
v
->
d©a
 = 0;

522 
v
->
Êags
 = flags;

523 
v
->
ödex
 = 0;

525  
v
;

526 
	}
}

529 
ngx_öt_t


530 
	$ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

532 
ngx_uöt_t
 
i
;

533 
ngx_hâp_v¨übÀ_t
 *
v
;

534 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

536 i‡(
«me
->
Àn
 == 0) {

537 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

539  
NGX_ERROR
;

542 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

544 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

546 i‡(
v
 =
NULL
) {

547 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

548 (
ngx_hâp_v¨übÀ_t
))

549 !
NGX_OK
)

551  
NGX_ERROR
;

555 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

556 i‡(
«me
->
Àn
 !
v
[
i
].name.len

557 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

562  
i
;

566 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

567 i‡(
v
 =
NULL
) {

568  
NGX_ERROR
;

571 
v
->
«me
.
Àn
 =Çame->len;

572 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

573 i‡(
v
->
«me
.
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

579 
v
->
£t_h™dÀr
 = 
NULL
;

580 
v
->
gë_h™dÀr
 = 
NULL
;

581 
v
->
d©a
 = 0;

582 
v
->
Êags
 = 0;

583 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

585  
v
->
ödex
;

586 
	}
}

589 
ngx_hâp_v¨übÀ_vÆue_t
 *

590 
	$ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

592 
ngx_hâp_v¨übÀ_t
 *
v
;

593 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

595 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

597 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

598 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

599 "unknow¿v¨übÀ index: %ui", 
ödex
);

600  
NULL
;

603 i‡(
r
->
v¨übÀs
[
ödex
].
nŸ_found
 ||Ñ->v¨übÀs[ödex].
vÆid
) {

604  &
r
->
v¨übÀs
[
ödex
];

607 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

609 i‡(
ngx_hâp_v¨übÀ_dïth
 == 0) {

610 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

612 &
v
[
ödex
].
«me
);

613  
NULL
;

616 
ngx_hâp_v¨übÀ_dïth
--;

618 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
r
, &r->
v¨übÀs
[ödex], v[ödex].
d©a
)

619 =
NGX_OK
)

621 
ngx_hâp_v¨übÀ_dïth
++;

623 i‡(
v
[
ödex
].
Êags
 & 
NGX_HTTP_VAR_NOCACHEABLE
) {

624 
r
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

627  &
r
->
v¨übÀs
[
ödex
];

630 
ngx_hâp_v¨übÀ_dïth
++;

632 
r
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

633 
r
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

635  
NULL
;

636 
	}
}

639 
ngx_hâp_v¨übÀ_vÆue_t
 *

640 
	$ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

642 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

644 
v
 = &
r
->
v¨übÀs
[
ödex
];

646 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

647 i‡(!
v
->
no_ˇchóbÀ
) {

648  
v
;

651 
v
->
vÆid
 = 0;

652 
v
->
nŸ_found
 = 0;

655  
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ödex
);

656 
	}
}

659 
ngx_hâp_v¨übÀ_vÆue_t
 *

660 
	$ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
)

662 
size_t
 
Àn
;

663 
ngx_uöt_t
 
i
, 
n
;

664 
ngx_hâp_v¨übÀ_t
 *
v
;

665 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

666 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

668 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

670 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

672 i‡(
v
) {

673 i‡(
v
->
Êags
 & 
NGX_HTTP_VAR_INDEXED
) {

674  
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
v
->
ödex
);

677 i‡(
ngx_hâp_v¨übÀ_dïth
 == 0) {

678 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

679 "cy˛êwhûêevÆu©ög v¨übÀ \"%V\"", 
«me
);

680  
NULL
;

683 
ngx_hâp_v¨übÀ_dïth
--;

685 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

687 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
r
, vv, v->
d©a
Ë=
NGX_OK
) {

688 
ngx_hâp_v¨übÀ_dïth
++;

689  
vv
;

692 
ngx_hâp_v¨übÀ_dïth
++;

693  
NULL
;

696 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

697 i‡(
vv
 =
NULL
) {

698  
NULL
;

701 
Àn
 = 0;

703 
v
 = 
cmcf
->
¥efix_v¨übÀs
.
ñts
;

704 
n
 = 
cmcf
->
¥efix_v¨übÀs
.
√…s
;

706 
i
 = 0; i < 
cmcf
->
¥efix_v¨übÀs
.
√…s
; i++) {

707 i‡(
«me
->
Àn
 >
v
[
i
].name.len &&Çame->len >Üen

708 && 
	`ngx_°∫cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a, v[i].«me.
Àn
) == 0)

710 
Àn
 = 
v
[
i
].
«me
.len;

711 
n
 = 
i
;

715 i‡(
n
 !
cmcf
->
¥efix_v¨übÀs
.
√…s
) {

716 i‡(
v
[
n
].
	`gë_h™dÀr
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

717  
vv
;

720  
NULL
;

723 
vv
->
nŸ_found
 = 1;

725  
vv
;

726 
	}
}

729 
ngx_öt_t


730 
	$ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

731 
uöçå_t
 
d©a
)

733 
ngx_°r_t
 *
s
;

735 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

737 i‡(
s
->
d©a
) {

738 
v
->
Àn
 = 
s
->len;

739 
v
->
vÆid
 = 1;

740 
v
->
no_ˇchóbÀ
 = 0;

741 
v
->
nŸ_found
 = 0;

742 
v
->
d©a
 = 
s
->data;

745 
v
->
nŸ_found
 = 1;

748  
NGX_OK
;

749 
	}
}

755 
	$ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

756 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

758 
ngx_°r_t
 *
s
;

760 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

762 
s
->
Àn
 = 
v
->len;

763 
s
->
d©a
 = 
v
->data;

764 
	}
}

769 
ngx_öt_t


770 
	$ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

771 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

773 
size_t
 *
•
;

775 
•
 = (
size_t
 *Ë((*Ë
r
 + 
d©a
);

777 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
);

778 i‡(
v
->
d©a
 =
NULL
) {

779  
NGX_ERROR
;

782 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", *
•
) - v->data;

783 
v
->
vÆid
 = 1;

784 
v
->
no_ˇchóbÀ
 = 0;

785 
v
->
nŸ_found
 = 0;

787  
NGX_OK
;

788 
	}
}

792 
	$ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

793 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

795 
ssize_t
 
s
, *
•
;

796 
ngx_°r_t
 
vÆ
;

798 
vÆ
.
Àn
 = 
v
->len;

799 
vÆ
.
d©a
 = 
v
->data;

801 
s
 = 
	`ngx_∑r£_size
(&
vÆ
);

803 i‡(
s
 =
NGX_ERROR
) {

804 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

805 "övÆid sizê\"%V\"", &
vÆ
);

809 
•
 = (
ssize_t
 *Ë((*Ë
r
 + 
d©a
);

811 *
•
 = 
s
;

814 
	}
}

817 
ngx_öt_t


818 
	$ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

819 
uöçå_t
 
d©a
)

821 
ngx_èbÀ_ñt_t
 *
h
;

823 
h
 = *(
ngx_èbÀ_ñt_t
 **Ë((*Ë
r
 + 
d©a
);

825 i‡(
h
) {

826 
v
->
Àn
 = 
h
->
vÆue
.len;

827 
v
->
vÆid
 = 1;

828 
v
->
no_ˇchóbÀ
 = 0;

829 
v
->
nŸ_found
 = 0;

830 
v
->
d©a
 = 
h
->
vÆue
.data;

833 
v
->
nŸ_found
 = 1;

836  
NGX_OK
;

837 
	}
}

840 
ngx_öt_t


841 
	$ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

842 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

844  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ';');

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

850 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

852  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ',');

853 
	}
}

856 
ngx_öt_t


857 
	$ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

858 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
)

860 
size_t
 
Àn
;

861 
u_ch¨
 *
p
, *
íd
;

862 
ngx_uöt_t
 
i
, 
n
;

863 
ngx_¨øy_t
 *
a
;

864 
ngx_èbÀ_ñt_t
 **
h
;

866 
a
 = (
ngx_¨øy_t
 *Ë((*Ë
r
 + 
d©a
);

868 
n
 = 
a
->
√…s
;

869 
h
 = 
a
->
ñts
;

871 
Àn
 = 0;

873 
i
 = 0; i < 
n
; i++) {

875 i‡(
h
[
i
]->
hash
 == 0) {

879 
Àn
 +
h
[
i
]->
vÆue
.len + 2;

882 i‡(
Àn
 == 0) {

883 
v
->
nŸ_found
 = 1;

884  
NGX_OK
;

887 
Àn
 -= 2;

889 
v
->
vÆid
 = 1;

890 
v
->
no_ˇchóbÀ
 = 0;

891 
v
->
nŸ_found
 = 0;

893 i‡(
n
 == 1) {

894 
v
->
Àn
 = (*
h
)->
vÆue
.len;

895 
v
->
d©a
 = (*
h
)->
vÆue
.data;

897  
NGX_OK
;

900 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

901 i‡(
p
 =
NULL
) {

902  
NGX_ERROR
;

905 
v
->
Àn
 =Üen;

906 
v
->
d©a
 = 
p
;

908 
íd
 = 
p
 + 
Àn
;

910 
i
 = 0; ; i++) {

912 i‡(
h
[
i
]->
hash
 == 0) {

916 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

918 i‡(
p
 =
íd
) {

922 *
p
++ = 
£p
; *p++ = ' ';

925  
NGX_OK
;

926 
	}
}

929 
ngx_öt_t


930 
	$ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

931 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

933  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

934 &
r
->
hódîs_ö
.
hódîs
.
∑π
,

936 
	}
}

939 
ngx_öt_t


940 
	$ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

941 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

943  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

944 &
r
->
hódîs_out
.
hódîs
.
∑π
,

946 
	}
}

949 
ngx_öt_t


950 
	$ngx_hâp_v¨übÀ_unknown_åaûî_out
(
ngx_hâp_ªque°_t
 *
r
,

951 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

953  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

954 &
r
->
hódîs_out
.
åaûîs
.
∑π
,

956 
	}
}

959 
ngx_öt_t


960 
	$ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
v¨
,

961 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
)

963 
u_ch¨
 
ch
;

964 
ngx_uöt_t
 
i
, 
n
;

965 
ngx_èbÀ_ñt_t
 *
hódî
;

967 
hódî
 = 
∑π
->
ñts
;

969 
i
 = 0; ; i++) {

971 i‡(
i
 >
∑π
->
√…s
) {

972 i‡(
∑π
->
√xt
 =
NULL
) {

976 
∑π
 =Ö¨t->
√xt
;

977 
hódî
 = 
∑π
->
ñts
;

978 
i
 = 0;

981 i‡(
hódî
[
i
].
hash
 == 0) {

985 
n
 = 0;Ç + 
¥efix
 < 
v¨
->
Àn
 &&Ç < 
hódî
[
i
].
key
.len;Ç++) {

986 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

988 i‡(
ch
 >= 'A' && ch <= 'Z') {

989 
ch
 |= 0x20;

991 } i‡(
ch
 == '-') {

992 
ch
 = '_';

995 i‡(
v¨
->
d©a
[
n
 + 
¥efix
] !
ch
) {

1000 i‡(
n
 + 
¥efix
 =
v¨
->
Àn
 &&Ç =
hódî
[
i
].
key
.len) {

1001 
v
->
Àn
 = 
hódî
[
i
].
vÆue
.len;

1002 
v
->
vÆid
 = 1;

1003 
v
->
no_ˇchóbÀ
 = 0;

1004 
v
->
nŸ_found
 = 0;

1005 
v
->
d©a
 = 
hódî
[
i
].
vÆue
.data;

1007  
NGX_OK
;

1011 
v
->
nŸ_found
 = 1;

1013  
NGX_OK
;

1014 
	}
}

1017 
ngx_öt_t


1018 
	$ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

1019 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1021 
u_ch¨
 *
p
, *
s
;

1023 
s
 = 
r
->
ªque°_löe
.
d©a
;

1025 i‡(
s
 =
NULL
) {

1026 
s
 = 
r
->
ªque°_°¨t
;

1028 i‡(
s
 =
NULL
) {

1029 
v
->
nŸ_found
 = 1;

1030  
NGX_OK
;

1033 
p
 = 
s
;Ö < 
r
->
hódî_ö
->
œ°
;Ö++) {

1034 i‡(*
p
 =
CR
 || *∞=
LF
) {

1039 
r
->
ªque°_löe
.
Àn
 = 
p
 - 
s
;

1040 
r
->
ªque°_löe
.
d©a
 = 
s
;

1043 
v
->
Àn
 = 
r
->
ªque°_löe
.len;

1044 
v
->
vÆid
 = 1;

1045 
v
->
no_ˇchóbÀ
 = 0;

1046 
v
->
nŸ_found
 = 0;

1047 
v
->
d©a
 = 
s
;

1049  
NGX_OK
;

1050 
	}
}

1053 
ngx_öt_t


1054 
	$ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1055 
uöçå_t
 
d©a
)

1057 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

1059 
ngx_°r_t
 
cookõ
, 
s
;

1061 
s
.
Àn
 = 
«me
->len - (("cookie_") - 1);

1062 
s
.
d©a
 = 
«me
->data + ("cookie_") - 1;

1064 i‡(
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
s
, &
cookõ
)

1065 =
NGX_DECLINED
)

1067 
v
->
nŸ_found
 = 1;

1068  
NGX_OK
;

1071 
v
->
Àn
 = 
cookõ
.len;

1072 
v
->
vÆid
 = 1;

1073 
v
->
no_ˇchóbÀ
 = 0;

1074 
v
->
nŸ_found
 = 0;

1075 
v
->
d©a
 = 
cookõ
.data;

1077  
NGX_OK
;

1078 
	}
}

1081 
ngx_öt_t


1082 
	$ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1083 
uöçå_t
 
d©a
)

1085 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

1087 
u_ch¨
 *
¨g
;

1088 
size_t
 
Àn
;

1089 
ngx_°r_t
 
vÆue
;

1091 
Àn
 = 
«me
->len - (("arg_") - 1);

1092 
¨g
 = 
«me
->
d©a
 + ("arg_") - 1;

1094 i‡(
	`ngx_hâp_¨g
(
r
, 
¨g
, 
Àn
, &
vÆue
Ë!
NGX_OK
) {

1095 
v
->
nŸ_found
 = 1;

1096  
NGX_OK
;

1099 
v
->
d©a
 = 
vÆue
.data;

1100 
v
->
Àn
 = 
vÆue
.len;

1101 
v
->
vÆid
 = 1;

1102 
v
->
no_ˇchóbÀ
 = 0;

1103 
v
->
nŸ_found
 = 0;

1105  
NGX_OK
;

1106 
	}
}

1109 #i‡(
NGX_HAVE_TCP_INFO
)

1111 
ngx_öt_t


1112 
	$ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1113 
uöçå_t
 
d©a
)

1115 
t˝_öfo
 
ti
;

1116 
sockÀn_t
 
Àn
;

1117 
uöt32_t
 
vÆue
;

1119 
Àn
 = (
t˝_öfo
);

1120 i‡(
	`gësock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_INFO
, &
ti
, &
Àn
) == -1) {

1121 
v
->
nŸ_found
 = 1;

1122  
NGX_OK
;

1125 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
);

1126 i‡(
v
->
d©a
 =
NULL
) {

1127  
NGX_ERROR
;

1130 
d©a
) {

1132 
vÆue
 = 
ti
.
t˝i_πt
;

1136 
vÆue
 = 
ti
.
t˝i_πtv¨
;

1140 
vÆue
 = 
ti
.
t˝i_¢d_cwnd
;

1144 
vÆue
 = 
ti
.
t˝i_rcv_•a˚
;

1149 
vÆue
 = 0;

1153 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uD", 
vÆue
) - v->data;

1154 
v
->
vÆid
 = 1;

1155 
v
->
no_ˇchóbÀ
 = 0;

1156 
v
->
nŸ_found
 = 0;

1158  
NGX_OK
;

1159 
	}
}

1164 
ngx_öt_t


1165 
	$ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1166 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1168 
u_ch¨
 *
p
;

1170 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1171 
v
->
Àn
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.len;

1172 
v
->
d©a
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.data;

1173 
v
->
vÆid
 = 1;

1174 
v
->
no_ˇchóbÀ
 = 0;

1175 
v
->
nŸ_found
 = 0;

1177 } i‡(
r
->
ªadög_body
) {

1178 
v
->
nŸ_found
 = 1;

1179 
v
->
no_ˇchóbÀ
 = 1;

1181 } i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 >= 0) {

1182 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1183 i‡(
p
 =
NULL
) {

1184  
NGX_ERROR
;

1187 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) -Ö;

1188 
v
->
d©a
 = 
p
;

1189 
v
->
vÆid
 = 1;

1190 
v
->
no_ˇchóbÀ
 = 0;

1191 
v
->
nŸ_found
 = 0;

1194 
v
->
nŸ_found
 = 1;

1197  
NGX_OK
;

1198 
	}
}

1201 
ngx_öt_t


1202 
	$ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1203 
uöçå_t
 
d©a
)

1205 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1207 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1208 
v
->
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

1209 
v
->
d©a
 = 
r
->
hódîs_ö
.
£rvî
.data;

1212 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1214 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1215 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1218 
v
->
vÆid
 = 1;

1219 
v
->
no_ˇchóbÀ
 = 0;

1220 
v
->
nŸ_found
 = 0;

1222  
NGX_OK
;

1223 
	}
}

1226 
ngx_öt_t


1227 
	$ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1230 
sockaddr_ö
 *
sö
;

1231 #i‡(
NGX_HAVE_INET6
)

1232 
sockaddr_ö6
 *
sö6
;

1235 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1237 #i‡(
NGX_HAVE_INET6
)

1238 
AF_INET6
:

1239 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1241 
v
->
Àn
 = (
ö6_addr
);

1242 
v
->
vÆid
 = 1;

1243 
v
->
no_ˇchóbÀ
 = 0;

1244 
v
->
nŸ_found
 = 0;

1245 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

1250 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1251 
AF_UNIX
:

1253 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1254 
v
->
vÆid
 = 1;

1255 
v
->
no_ˇchóbÀ
 = 0;

1256 
v
->
nŸ_found
 = 0;

1257 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1263 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1265 
v
->
Àn
 = (
ö_addr_t
);

1266 
v
->
vÆid
 = 1;

1267 
v
->
no_ˇchóbÀ
 = 0;

1268 
v
->
nŸ_found
 = 0;

1269 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

1274  
NGX_OK
;

1275 
	}
}

1278 
ngx_öt_t


1279 
	$ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1280 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1282 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1283 
v
->
vÆid
 = 1;

1284 
v
->
no_ˇchóbÀ
 = 0;

1285 
v
->
nŸ_found
 = 0;

1286 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1288  
NGX_OK
;

1289 
	}
}

1292 
ngx_öt_t


1293 
	$ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1294 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1296 
ngx_uöt_t
 
p‹t
;

1298 
v
->
Àn
 = 0;

1299 
v
->
vÆid
 = 1;

1300 
v
->
no_ˇchóbÀ
 = 0;

1301 
v
->
nŸ_found
 = 0;

1303 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1304 i‡(
v
->
d©a
 =
NULL
) {

1305  
NGX_ERROR
;

1308 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
r
->
c⁄√˘i⁄
->
sockaddr
);

1310 i‡(
p‹t
 > 0 &&Öort < 65536) {

1311 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1314  
NGX_OK
;

1315 
	}
}

1318 
ngx_öt_t


1319 
	$ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_hâp_ªque°_t
 *
r
,

1320 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1322 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.len;

1323 
v
->
vÆid
 = 1;

1324 
v
->
no_ˇchóbÀ
 = 0;

1325 
v
->
nŸ_found
 = 0;

1326 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.data;

1328  
NGX_OK
;

1329 
	}
}

1332 
ngx_öt_t


1333 
	$ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1334 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1336 
ngx_uöt_t
 
p‹t
;

1338 
v
->
Àn
 = 0;

1339 
v
->
vÆid
 = 1;

1340 
v
->
no_ˇchóbÀ
 = 0;

1341 
v
->
nŸ_found
 = 0;

1343 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1344 i‡(
v
->
d©a
 =
NULL
) {

1345  
NGX_ERROR
;

1348 
p‹t
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_p‹t
;

1350 i‡(
p‹t
 > 0 &&Öort < 65536) {

1351 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1354  
NGX_OK
;

1355 
	}
}

1358 
ngx_öt_t


1359 
	$ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

1360 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1362 
ngx_°r_t
 
s
;

1363 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

1365 
s
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

1366 
s
.
d©a
 = 
addr
;

1368 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, &
s
, 0Ë!
NGX_OK
) {

1369  
NGX_ERROR
;

1372 
s
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, s.
Àn
);

1373 i‡(
s
.
d©a
 =
NULL
) {

1374  
NGX_ERROR
;

1377 
	`ngx_mem˝y
(
s
.
d©a
, 
addr
, s.
Àn
);

1379 
v
->
Àn
 = 
s
.len;

1380 
v
->
vÆid
 = 1;

1381 
v
->
no_ˇchóbÀ
 = 0;

1382 
v
->
nŸ_found
 = 0;

1383 
v
->
d©a
 = 
s
.data;

1385  
NGX_OK
;

1386 
	}
}

1389 
ngx_öt_t


1390 
	$ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1391 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1393 
ngx_uöt_t
 
p‹t
;

1395 
v
->
Àn
 = 0;

1396 
v
->
vÆid
 = 1;

1397 
v
->
no_ˇchóbÀ
 = 0;

1398 
v
->
nŸ_found
 = 0;

1400 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

1401  
NGX_ERROR
;

1404 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1405 i‡(
v
->
d©a
 =
NULL
) {

1406  
NGX_ERROR
;

1409 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
);

1411 i‡(
p‹t
 > 0 &&Öort < 65536) {

1412 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1415  
NGX_OK
;

1416 
	}
}

1419 
ngx_öt_t


1420 
	$ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

1421 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1423 #i‡(
NGX_HTTP_SSL
)

1425 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1426 
v
->
Àn
 = ("https") - 1;

1427 
v
->
vÆid
 = 1;

1428 
v
->
no_ˇchóbÀ
 = 0;

1429 
v
->
nŸ_found
 = 0;

1430 
v
->
d©a
 = (
u_ch¨
 *) "https";

1432  
NGX_OK
;

1437 
v
->
Àn
 = ("http") - 1;

1438 
v
->
vÆid
 = 1;

1439 
v
->
no_ˇchóbÀ
 = 0;

1440 
v
->
nŸ_found
 = 0;

1441 
v
->
d©a
 = (
u_ch¨
 *) "http";

1443  
NGX_OK
;

1444 
	}
}

1447 
ngx_öt_t


1448 
	$ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

1449 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1451 #i‡(
NGX_HTTP_SSL
)

1453 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1454 
v
->
Àn
 = ("on") - 1;

1455 
v
->
vÆid
 = 1;

1456 
v
->
no_ˇchóbÀ
 = 0;

1457 
v
->
nŸ_found
 = 0;

1458 
v
->
d©a
 = (
u_ch¨
 *) "on";

1460  
NGX_OK
;

1465 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1467  
NGX_OK
;

1468 
	}
}

1472 
	$ngx_hâp_v¨übÀ_£t_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1473 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1475 
r
->
¨gs
.
Àn
 = 
v
->len;

1476 
r
->
¨gs
.
d©a
 = 
v
->data;

1477 
r
->
vÆid_u≈¨£d_uri
 = 0;

1478 
	}
}

1481 
ngx_öt_t


1482 
	$ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1483 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1485 i‡(
r
->
¨gs
.
Àn
 == 0) {

1486 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1487  
NGX_OK
;

1490 
v
->
Àn
 = 1;

1491 
v
->
vÆid
 = 1;

1492 
v
->
no_ˇchóbÀ
 = 0;

1493 
v
->
nŸ_found
 = 0;

1494 
v
->
d©a
 = (
u_ch¨
 *) "?";

1496  
NGX_OK
;

1497 
	}
}

1500 
ngx_öt_t


1501 
	$ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1502 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1504 
ngx_°r_t
 
∑th
;

1505 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1507 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1509 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1510 
v
->
Àn
 = 
˛cf
->
roŸ
.len;

1511 
v
->
vÆid
 = 1;

1512 
v
->
no_ˇchóbÀ
 = 0;

1513 
v
->
nŸ_found
 = 0;

1514 
v
->
d©a
 = 
˛cf
->
roŸ
.data;

1517 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 0,

1518 
˛cf
->
roŸ_vÆues
->
ñts
)

1519 =
NULL
)

1521  
NGX_ERROR
;

1524 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, &
∑th
)

1525 !
NGX_OK
)

1527  
NGX_ERROR
;

1530 
v
->
Àn
 = 
∑th
.len;

1531 
v
->
vÆid
 = 1;

1532 
v
->
no_ˇchóbÀ
 = 0;

1533 
v
->
nŸ_found
 = 0;

1534 
v
->
d©a
 = 
∑th
.data;

1537  
NGX_OK
;

1538 
	}
}

1541 
ngx_öt_t


1542 
	$ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1543 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1545 
u_ch¨
 *
ªÆ
;

1546 
size_t
 
Àn
;

1547 
ngx_°r_t
 
∑th
;

1548 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1549 #i‡(
NGX_HAVE_MAX_PATH
)

1550 
u_ch¨
 
buf„r
[
NGX_MAX_PATH
];

1553 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1555 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1556 
∑th
 = 
˛cf
->
roŸ
;

1559 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 1,

1560 
˛cf
->
roŸ_vÆues
->
ñts
)

1561 =
NULL
)

1563  
NGX_ERROR
;

1566 
∑th
.
d©a
[∑th.
Àn
 - 1] = '\0';

1568 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, &
∑th
)

1569 !
NGX_OK
)

1571  
NGX_ERROR
;

1575 #i‡(
NGX_HAVE_MAX_PATH
)

1576 
ªÆ
 = 
buf„r
;

1578 
ªÆ
 = 
NULL
;

1581 
ªÆ
 = 
	`ngx_ªÆ∑th
(
∑th
.
d©a
,Ñeal);

1583 i‡(
ªÆ
 =
NULL
) {

1584 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1585 
ngx_ªÆ∑th_n
 " \"%s\" faûed", 
∑th
.
d©a
);

1586  
NGX_ERROR
;

1589 
Àn
 = 
	`ngx_°æí
(
ªÆ
);

1591 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1592 i‡(
v
->
d©a
 =
NULL
) {

1593 #i‡!(
NGX_HAVE_MAX_PATH
)

1594 
	`ngx_‰ì
(
ªÆ
);

1596  
NGX_ERROR
;

1599 
v
->
Àn
 =Üen;

1600 
v
->
vÆid
 = 1;

1601 
v
->
no_ˇchóbÀ
 = 0;

1602 
v
->
nŸ_found
 = 0;

1604 
	`ngx_mem˝y
(
v
->
d©a
, 
ªÆ
, 
Àn
);

1606 #i‡!(
NGX_HAVE_MAX_PATH
)

1607 
	`ngx_‰ì
(
ªÆ
);

1610  
NGX_OK
;

1611 
	}
}

1614 
ngx_öt_t


1615 
	$ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

1616 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1618 
size_t
 
roŸ
;

1619 
ngx_°r_t
 
∑th
;

1621 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

1622  
NGX_ERROR
;

1627 
v
->
Àn
 = 
∑th
.len - 1;

1628 
v
->
vÆid
 = 1;

1629 
v
->
no_ˇchóbÀ
 = 0;

1630 
v
->
nŸ_found
 = 0;

1631 
v
->
d©a
 = 
∑th
.data;

1633  
NGX_OK
;

1634 
	}
}

1637 
ngx_öt_t


1638 
	$ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

1639 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1641 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1643 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1645 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1646 
v
->
vÆid
 = 1;

1647 
v
->
no_ˇchóbÀ
 = 0;

1648 
v
->
nŸ_found
 = 0;

1649 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1651  
NGX_OK
;

1652 
	}
}

1655 
ngx_öt_t


1656 
	$ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

1657 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1659 i‡(
r
->
maö
->
mëhod_«me
.
d©a
) {

1660 
v
->
Àn
 = 
r
->
maö
->
mëhod_«me
.len;

1661 
v
->
vÆid
 = 1;

1662 
v
->
no_ˇchóbÀ
 = 0;

1663 
v
->
nŸ_found
 = 0;

1664 
v
->
d©a
 = 
r
->
maö
->
mëhod_«me
.data;

1667 
v
->
nŸ_found
 = 1;

1670  
NGX_OK
;

1671 
	}
}

1674 
ngx_öt_t


1675 
	$ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

1676 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1678 
ngx_öt_t
 
rc
;

1680 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

1682 i‡(
rc
 =
NGX_DECLINED
) {

1683 
v
->
nŸ_found
 = 1;

1684  
NGX_OK
;

1687 i‡(
rc
 =
NGX_ERROR
) {

1688  
NGX_ERROR
;

1691 
v
->
Àn
 = 
r
->
hódîs_ö
.
u£r
.len;

1692 
v
->
vÆid
 = 1;

1693 
v
->
no_ˇchóbÀ
 = 0;

1694 
v
->
nŸ_found
 = 0;

1695 
v
->
d©a
 = 
r
->
hódîs_ö
.
u£r
.data;

1697  
NGX_OK
;

1698 
	}
}

1701 
ngx_öt_t


1702 
	$ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1703 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1705 
u_ch¨
 *
p
;

1707 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1708 i‡(
p
 =
NULL
) {

1709  
NGX_ERROR
;

1712 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
) -Ö;

1713 
v
->
vÆid
 = 1;

1714 
v
->
no_ˇchóbÀ
 = 0;

1715 
v
->
nŸ_found
 = 0;

1716 
v
->
d©a
 = 
p
;

1718  
NGX_OK
;

1719 
	}
}

1722 
ngx_öt_t


1723 
	$ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1724 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1726 
off_t
 
£¡
;

1727 
u_ch¨
 *
p
;

1729 
£¡
 = 
r
->
c⁄√˘i⁄
->£¡ -Ñ->
hódî_size
;

1731 i‡(
£¡
 < 0) {

1732 
£¡
 = 0;

1735 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1736 i‡(
p
 =
NULL
) {

1737  
NGX_ERROR
;

1740 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
£¡
) -Ö;

1741 
v
->
vÆid
 = 1;

1742 
v
->
no_ˇchóbÀ
 = 0;

1743 
v
->
nŸ_found
 = 0;

1744 
v
->
d©a
 = 
p
;

1746  
NGX_OK
;

1747 
	}
}

1750 
ngx_öt_t


1751 
	$ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

1752 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1754 
v
->
d©a
 = (
u_ch¨
 *Ë(
r
->
pùñöe
 ? "p" : ".");

1755 
v
->
Àn
 = 1;

1756 
v
->
vÆid
 = 1;

1757 
v
->
no_ˇchóbÀ
 = 0;

1758 
v
->
nŸ_found
 = 0;

1760  
NGX_OK
;

1761 
	}
}

1764 
ngx_öt_t


1765 
	$ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

1766 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1768 
ngx_uöt_t
 
°©us
;

1770 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

1771 i‡(
v
->
d©a
 =
NULL
) {

1772  
NGX_ERROR
;

1775 i‡(
r
->
îr_°©us
) {

1776 
°©us
 = 
r
->
îr_°©us
;

1778 } i‡(
r
->
hódîs_out
.
°©us
) {

1779 
°©us
 = 
r
->
hódîs_out
.status;

1781 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

1782 
°©us
 = 9;

1785 
°©us
 = 0;

1788 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%03ui", 
°©us
) - v->data;

1789 
v
->
vÆid
 = 1;

1790 
v
->
no_ˇchóbÀ
 = 0;

1791 
v
->
nŸ_found
 = 0;

1793  
NGX_OK
;

1794 
	}
}

1797 
ngx_öt_t


1798 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

1799 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1801 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1802 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

1803 
v
->
vÆid
 = 1;

1804 
v
->
no_ˇchóbÀ
 = 0;

1805 
v
->
nŸ_found
 = 0;

1806 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.data;

1809 
v
->
nŸ_found
 = 1;

1812  
NGX_OK
;

1813 
	}
}

1816 
ngx_öt_t


1817 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1818 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1820 
u_ch¨
 *
p
;

1822 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

1823 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.len;

1824 
v
->
vÆid
 = 1;

1825 
v
->
no_ˇchóbÀ
 = 0;

1826 
v
->
nŸ_found
 = 0;

1827 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.data;

1829  
NGX_OK
;

1832 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0) {

1833 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1834 i‡(
p
 =
NULL
) {

1835  
NGX_ERROR
;

1838 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
) -Ö;

1839 
v
->
vÆid
 = 1;

1840 
v
->
no_ˇchóbÀ
 = 0;

1841 
v
->
nŸ_found
 = 0;

1842 
v
->
d©a
 = 
p
;

1844  
NGX_OK
;

1847 
v
->
nŸ_found
 = 1;

1849  
NGX_OK
;

1850 
	}
}

1853 
ngx_öt_t


1854 
	$ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1855 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1857 
ngx_°r_t
 
«me
;

1859 i‡(
r
->
hódîs_out
.
loˇti⁄
) {

1860 
v
->
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

1861 
v
->
vÆid
 = 1;

1862 
v
->
no_ˇchóbÀ
 = 0;

1863 
v
->
nŸ_found
 = 0;

1864 
v
->
d©a
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.data;

1866  
NGX_OK
;

1869 
	`ngx_°r_£t
(&
«me
, "sent_http_location");

1871  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, &
«me
,

1872 &
r
->
hódîs_out
.
hódîs
.
∑π
,

1874 
	}
}

1877 
ngx_öt_t


1878 
	$ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

1879 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1881 
u_ch¨
 *
p
;

1883 i‡(
r
->
hódîs_out
.
œ°_modifõd
) {

1884 
v
->
Àn
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.len;

1885 
v
->
vÆid
 = 1;

1886 
v
->
no_ˇchóbÀ
 = 0;

1887 
v
->
nŸ_found
 = 0;

1888 
v
->
d©a
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.data;

1890  
NGX_OK
;

1893 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 >= 0) {

1894 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("Mon, 28 Sep 1970 06:00:00 GMT") - 1);

1895 i‡(
p
 =
NULL
) {

1896  
NGX_ERROR
;

1899 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
) -Ö;

1900 
v
->
vÆid
 = 1;

1901 
v
->
no_ˇchóbÀ
 = 0;

1902 
v
->
nŸ_found
 = 0;

1903 
v
->
d©a
 = 
p
;

1905  
NGX_OK
;

1908 
v
->
nŸ_found
 = 1;

1910  
NGX_OK
;

1911 
	}
}

1914 
ngx_öt_t


1915 
	$ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1916 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1918 
size_t
 
Àn
;

1919 *
p
;

1921 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1922 
Àn
 = ("upgrade") - 1;

1923 
p
 = "upgrade";

1925 } i‡(
r
->
kì∑live
) {

1926 
Àn
 = ("keep-alive") - 1;

1927 
p
 = "keep-alive";

1930 
Àn
 = ("close") - 1;

1931 
p
 = "close";

1934 
v
->
Àn
 =Üen;

1935 
v
->
vÆid
 = 1;

1936 
v
->
no_ˇchóbÀ
 = 0;

1937 
v
->
nŸ_found
 = 0;

1938 
v
->
d©a
 = (
u_ch¨
 *Ë
p
;

1940  
NGX_OK
;

1941 
	}
}

1944 
ngx_öt_t


1945 
	$ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

1946 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1948 
u_ch¨
 *
p
;

1949 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1951 i‡(
r
->
kì∑live
) {

1952 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1954 i‡(
˛cf
->
kì∑live_hódî
) {

1956 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("timeout="Ë- 1 + 
NGX_TIME_T_LEN
);

1957 i‡(
p
 =
NULL
) {

1958  
NGX_ERROR
;

1961 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "timeout=%T", 
˛cf
->
kì∑live_hódî
) -Ö;

1962 
v
->
vÆid
 = 1;

1963 
v
->
no_ˇchóbÀ
 = 0;

1964 
v
->
nŸ_found
 = 0;

1965 
v
->
d©a
 = 
p
;

1967  
NGX_OK
;

1971 
v
->
nŸ_found
 = 1;

1973  
NGX_OK
;

1974 
	}
}

1977 
ngx_öt_t


1978 
	$ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

1979 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1981 i‡(
r
->
chunked
) {

1982 
v
->
Àn
 = ("chunked") - 1;

1983 
v
->
vÆid
 = 1;

1984 
v
->
no_ˇchóbÀ
 = 0;

1985 
v
->
nŸ_found
 = 0;

1986 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

1989 
v
->
nŸ_found
 = 1;

1992  
NGX_OK
;

1993 
	}
}

1996 
ngx_öt_t


1997 
	$ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1998 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2000 i‡(
r
->
ªque°_com∂ëe
) {

2001 
v
->
Àn
 = 2;

2002 
v
->
vÆid
 = 1;

2003 
v
->
no_ˇchóbÀ
 = 0;

2004 
v
->
nŸ_found
 = 0;

2005 
v
->
d©a
 = (
u_ch¨
 *) "OK";

2007  
NGX_OK
;

2010 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

2012  
NGX_OK
;

2013 
	}
}

2016 
ngx_öt_t


2017 
	$ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

2018 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2020 
u_ch¨
 *
p
;

2021 
size_t
 
Àn
;

2022 
ngx_buf_t
 *
buf
;

2023 
ngx_chaö_t
 *
˛
;

2025 i‡(
r
->
ªque°_body
 =
NULL


2026 || 
r
->
ªque°_body
->
bufs
 =
NULL


2027 || 
r
->
ªque°_body
->
ãmp_fûe
)

2029 
v
->
nŸ_found
 = 1;

2031  
NGX_OK
;

2034 
˛
 = 
r
->
ªque°_body
->
bufs
;

2035 
buf
 = 
˛
->buf;

2037 i‡(
˛
->
√xt
 =
NULL
) {

2038 
v
->
Àn
 = 
buf
->
œ°
 - buf->
pos
;

2039 
v
->
vÆid
 = 1;

2040 
v
->
no_ˇchóbÀ
 = 0;

2041 
v
->
nŸ_found
 = 0;

2042 
v
->
d©a
 = 
buf
->
pos
;

2044  
NGX_OK
;

2047 
Àn
 = 
buf
->
œ°
 - buf->
pos
;

2048 
˛
 = cl->
√xt
;

2050  ; 
˛
; c»˛->
√xt
) {

2051 
buf
 = 
˛
->buf;

2052 
Àn
 +
buf
->
œ°
 - buf->
pos
;

2055 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2056 i‡(
p
 =
NULL
) {

2057  
NGX_ERROR
;

2060 
v
->
d©a
 = 
p
;

2061 
˛
 = 
r
->
ªque°_body
->
bufs
;

2063  ; 
˛
; c»˛->
√xt
) {

2064 
buf
 = 
˛
->buf;

2065 
p
 = 
	`ngx_˝ymem
’, 
buf
->
pos
, buf->
œ°
 - buf->pos);

2068 
v
->
Àn
 =Üen;

2069 
v
->
vÆid
 = 1;

2070 
v
->
no_ˇchóbÀ
 = 0;

2071 
v
->
nŸ_found
 = 0;

2073  
NGX_OK
;

2074 
	}
}

2077 
ngx_öt_t


2078 
	$ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

2079 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2081 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

2082 
v
->
nŸ_found
 = 1;

2084  
NGX_OK
;

2087 
v
->
Àn
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.len;

2088 
v
->
vÆid
 = 1;

2089 
v
->
no_ˇchóbÀ
 = 0;

2090 
v
->
nŸ_found
 = 0;

2091 
v
->
d©a
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.data;

2093  
NGX_OK
;

2094 
	}
}

2097 
ngx_öt_t


2098 
	$ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

2099 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2101 
u_ch¨
 *
p
;

2103 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

2104 i‡(
p
 =
NULL
) {

2105  
NGX_ERROR
;

2108 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
ªque°_Àngth
) -Ö;

2109 
v
->
vÆid
 = 1;

2110 
v
->
no_ˇchóbÀ
 = 0;

2111 
v
->
nŸ_found
 = 0;

2112 
v
->
d©a
 = 
p
;

2114  
NGX_OK
;

2115 
	}
}

2118 
ngx_öt_t


2119 
	$ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

2120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2122 
u_ch¨
 *
p
;

2123 
ngx_time_t
 *
ç
;

2124 
ngx_m£c_öt_t
 
ms
;

2126 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2127 i‡(
p
 =
NULL
) {

2128  
NGX_ERROR
;

2131 
ç
 = 
	`ngx_timeofday
();

2133 
ms
 = (
ngx_m£c_öt_t
)

2134 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

2135 
ms
 = 
	`ngx_max
(ms, 0);

2137 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000) -Ö;

2138 
v
->
vÆid
 = 1;

2139 
v
->
no_ˇchóbÀ
 = 0;

2140 
v
->
nŸ_found
 = 0;

2141 
v
->
d©a
 = 
p
;

2143  
NGX_OK
;

2144 
	}
}

2147 
ngx_öt_t


2148 
	$ngx_hâp_v¨übÀ_ªque°_id
(
ngx_hâp_ªque°_t
 *
r
,

2149 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2151 
u_ch¨
 *
id
;

2153 #i‡(
NGX_OPENSSL
)

2154 
u_ch¨
 
øndom_byãs
[16];

2157 
id
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 32);

2158 i‡(
id
 =
NULL
) {

2159  
NGX_ERROR
;

2162 
v
->
vÆid
 = 1;

2163 
v
->
no_ˇchóbÀ
 = 0;

2164 
v
->
nŸ_found
 = 0;

2166 
v
->
Àn
 = 32;

2167 
v
->
d©a
 = 
id
;

2169 #i‡(
NGX_OPENSSL
)

2171 i‡(
	`RAND_byãs
(
øndom_byãs
, 16) == 1) {

2172 
	`ngx_hex_dump
(
id
, 
øndom_byãs
, 16);

2173  
NGX_OK
;

2176 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "RAND_bytes() failed");

2180 
	`ngx_•rötf
(
id
, "%08xD%08xD%08xD%08xD",

2181 (
uöt32_t
Ë
	`ngx_øndom
(), (uint32_t)Çgx_random(),

2182 (
uöt32_t
Ë
	`ngx_øndom
(), (uint32_t)Çgx_random());

2184  
NGX_OK
;

2185 
	}
}

2188 
ngx_öt_t


2189 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

2190 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2192 
u_ch¨
 *
p
;

2194 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

2195 i‡(
p
 =
NULL
) {

2196  
NGX_ERROR
;

2199 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
r
->
c⁄√˘i⁄
->
numbî
) -Ö;

2200 
v
->
vÆid
 = 1;

2201 
v
->
no_ˇchóbÀ
 = 0;

2202 
v
->
nŸ_found
 = 0;

2203 
v
->
d©a
 = 
p
;

2205  
NGX_OK
;

2206 
	}
}

2209 
ngx_öt_t


2210 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

2211 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2213 
u_ch¨
 *
p
;

2215 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

2216 i‡(
p
 =
NULL
) {

2217  
NGX_ERROR
;

2220 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%ui", 
r
->
c⁄√˘i⁄
->
ªque°s
) -Ö;

2221 
v
->
vÆid
 = 1;

2222 
v
->
no_ˇchóbÀ
 = 0;

2223 
v
->
nŸ_found
 = 0;

2224 
v
->
d©a
 = 
p
;

2226  
NGX_OK
;

2227 
	}
}

2230 
ngx_öt_t


2231 
	$ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

2232 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2234 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

2235 
v
->
vÆid
 = 1;

2236 
v
->
no_ˇchóbÀ
 = 0;

2237 
v
->
nŸ_found
 = 0;

2238 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

2240  
NGX_OK
;

2241 
	}
}

2244 
ngx_öt_t


2245 
	$ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

2246 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2248 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

2249 
v
->
vÆid
 = 1;

2250 
v
->
no_ˇchóbÀ
 = 0;

2251 
v
->
nŸ_found
 = 0;

2252 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

2254  
NGX_OK
;

2255 
	}
}

2258 
ngx_öt_t


2259 
	$ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

2260 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2262 
u_ch¨
 *
p
;

2264 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

2265 i‡(
p
 =
NULL
) {

2266  
NGX_ERROR
;

2269 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

2270 
v
->
vÆid
 = 1;

2271 
v
->
no_ˇchóbÀ
 = 0;

2272 
v
->
nŸ_found
 = 0;

2273 
v
->
d©a
 = 
p
;

2275  
NGX_OK
;

2276 
	}
}

2279 
ngx_öt_t


2280 
	$ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

2281 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2283 
u_ch¨
 *
p
;

2284 
ngx_time_t
 *
ç
;

2286 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2287 i‡(
p
 =
NULL
) {

2288  
NGX_ERROR
;

2291 
ç
 = 
	`ngx_timeofday
();

2293 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
) -Ö;

2294 
v
->
vÆid
 = 1;

2295 
v
->
no_ˇchóbÀ
 = 0;

2296 
v
->
nŸ_found
 = 0;

2297 
v
->
d©a
 = 
p
;

2299  
NGX_OK
;

2300 
	}
}

2303 
ngx_öt_t


2304 
	$ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

2305 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2307 
u_ch¨
 *
p
;

2309 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2310 i‡(
p
 =
NULL
) {

2311  
NGX_ERROR
;

2314 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

2315 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2317 
v
->
Àn
 = 
ngx_ˇched_hâp_log_iso8601
.len;

2318 
v
->
vÆid
 = 1;

2319 
v
->
no_ˇchóbÀ
 = 0;

2320 
v
->
nŸ_found
 = 0;

2321 
v
->
d©a
 = 
p
;

2323  
NGX_OK
;

2324 
	}
}

2327 
ngx_öt_t


2328 
	$ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

2329 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2331 
u_ch¨
 *
p
;

2333 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_time
.
Àn
);

2334 i‡(
p
 =
NULL
) {

2335  
NGX_ERROR
;

2338 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_time
.
d©a
,Çgx_ˇched_hâp_log_time.
Àn
);

2340 
v
->
Àn
 = 
ngx_ˇched_hâp_log_time
.len;

2341 
v
->
vÆid
 = 1;

2342 
v
->
no_ˇchóbÀ
 = 0;

2343 
v
->
nŸ_found
 = 0;

2344 
v
->
d©a
 = 
p
;

2346  
NGX_OK
;

2347 
	}
}

2351 
	$ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
, 
ngx_°r_t
 *
m©ch
)

2353 *
vÆue
;

2354 
u_ch¨
 *
low
;

2355 
size_t
 
Àn
;

2356 
ngx_uöt_t
 
key
;

2358 
Àn
 = 
m©ch
->len;

2360 i‡(
Àn
) {

2361 
low
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2362 i‡(
low
 =
NULL
) {

2363  
NULL
;

2367 
low
 = 
NULL
;

2370 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

2372 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

2373 i‡(
vÆue
) {

2374  
vÆue
;

2377 #i‡(
NGX_PCRE
)

2379 i‡(
Àn
 && 
m≠
->
ƒegex
) {

2380 
ngx_öt_t
 
n
;

2381 
ngx_uöt_t
 
i
;

2382 
ngx_hâp_m≠_ªgex_t
 *
ªg
;

2384 
ªg
 = 
m≠
->
ªgex
;

2386 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

2388 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
ªg
[
i
].
ªgex
, 
m©ch
);

2390 i‡(
n
 =
NGX_OK
) {

2391  
ªg
[
i
].
vÆue
;

2394 i‡(
n
 =
NGX_DECLINED
) {

2400  
NULL
;

2406  
NULL
;

2407 
	}
}

2410 #i‡(
NGX_PCRE
)

2412 
ngx_öt_t


2413 
	$ngx_hâp_v¨übÀ_nŸ_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

2414 
uöçå_t
 
d©a
)

2416 
v
->
nŸ_found
 = 1;

2417  
NGX_OK
;

2418 
	}
}

2421 
ngx_hâp_ªgex_t
 *

2422 
	$ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

2424 
u_ch¨
 *
p
;

2425 
size_t
 
size
;

2426 
ngx_°r_t
 
«me
;

2427 
ngx_uöt_t
 
i
, 
n
;

2428 
ngx_hâp_v¨übÀ_t
 *
v
;

2429 
ngx_hâp_ªgex_t
 *
ª
;

2430 
ngx_hâp_ªgex_v¨übÀ_t
 *
rv
;

2431 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2433 
rc
->
poﬁ
 = 
cf
->pool;

2435 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

2436 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

2437  
NULL
;

2440 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªgex_t
));

2441 i‡(
ª
 =
NULL
) {

2442  
NULL
;

2445 
ª
->
ªgex
 = 
rc
->regex;

2446 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

2447 
ª
->
«me
 = 
rc
->
∑âîn
;

2449 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2450 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

2452 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

2454 i‡(
n
 == 0) {

2455  
ª
;

2458 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_hâp_ªgex_v¨übÀ_t
));

2459 i‡(
rv
 =
NULL
) {

2460  
NULL
;

2463 
ª
->
v¨übÀs
 = 
rv
;

2464 
ª
->
nv¨übÀs
 = 
n
;

2466 
size
 = 
rc
->
«me_size
;

2467 
p
 = 
rc
->
«mes
;

2469 
i
 = 0; i < 
n
; i++) {

2470 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

2472 
«me
.
d©a
 = &
p
[2];

2473 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

2475 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

2476 i‡(
v
 =
NULL
) {

2477  
NULL
;

2480 
rv
[
i
].
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

2481 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

2482  
NULL
;

2485 
v
->
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_nŸ_found
;

2487 
p
 +
size
;

2490  
ª
;

2491 
	}
}

2494 
ngx_öt_t


2495 
	$ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
, 
ngx_°r_t
 *
s
)

2497 
ngx_öt_t
 
rc
, 
ödex
;

2498 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

2499 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2500 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2502 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2504 i‡(
ª
->
nˇ±uªs
) {

2505 
Àn
 = 
cmcf
->
nˇ±uªs
;

2507 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2508 
r
->
ˇ±uªs
 = 
	`ngx_∑Œoc
‘->
poﬁ
, 
Àn
 * ());

2509 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2510  
NGX_ERROR
;

2515 
Àn
 = 0;

2518 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
s
, 
r
->
ˇ±uªs
, 
Àn
);

2520 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

2521  
NGX_DECLINED
;

2524 i‡(
rc
 < 0) {

2525 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2526 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2527 
rc
, 
s
, &
ª
->
«me
);

2528  
NGX_ERROR
;

2531 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

2533 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

2534 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

2535 
vv
 = &
r
->
v¨übÀs
[
ödex
];

2537 
vv
->
Àn
 = 
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

2538 
vv
->
vÆid
 = 1;

2539 
vv
->
no_ˇchóbÀ
 = 0;

2540 
vv
->
nŸ_found
 = 0;

2541 
vv
->
d©a
 = &
s
->d©a[
r
->
ˇ±uªs
[
n
]];

2543 #i‡(
NGX_DEBUG
)

2545 
ngx_hâp_v¨übÀ_t
 *
v
;

2547 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2549 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2550 "hâ∞ªgex së $%VÅÿ\"%v\"", &
v
[
ödex
].
«me
, 
vv
);

2555 
r
->
nˇ±uªs
 = 
rc
 * 2;

2556 
r
->
ˇ±uªs_d©a
 = 
s
->
d©a
;

2558  
NGX_OK
;

2559 
	}
}

2564 
ngx_öt_t


2565 
	$ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

2567 
ngx_hâp_v¨übÀ_t
 *
cv
, *
v
;

2568 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2570 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2572 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

2573 (
ngx_hash_keys_¨øys_t
));

2574 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

2575  
NGX_ERROR
;

2578 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

2579 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

2581 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

2582 !
NGX_OK
)

2584  
NGX_ERROR
;

2587 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
¥efix_v¨übÀs
, 
cf
->
poﬁ
, 8,

2588 (
ngx_hâp_v¨übÀ_t
))

2589 !
NGX_OK
)

2591  
NGX_ERROR
;

2594 
cv
 = 
ngx_hâp_c‹e_v¨übÀs
; cv->
«me
.
Àn
; cv++) {

2595 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
cv
->
«me
, cv->
Êags
);

2596 i‡(
v
 =
NULL
) {

2597  
NGX_ERROR
;

2600 *
v
 = *
cv
;

2603  
NGX_OK
;

2604 
	}
}

2607 
ngx_öt_t


2608 
	$ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

2610 
size_t
 
Àn
;

2611 
ngx_uöt_t
 
i
, 
n
;

2612 
ngx_hash_key_t
 *
key
;

2613 
ngx_hash_öô_t
 
hash
;

2614 
ngx_hâp_v¨übÀ_t
 *
v
, *
av
, *
pv
;

2615 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2619 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2621 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2622 
pv
 = 
cmcf
->
¥efix_v¨übÀs
.
ñts
;

2623 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

2625 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

2627 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2629 
av
 = 
key
[
n
].
vÆue
;

2631 i‡(
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

2632 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

2635 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

2636 
v
[
i
].
d©a
 = 
av
->data;

2638 
av
->
Êags
 |
NGX_HTTP_VAR_INDEXED
;

2639 
v
[
i
].
Êags
 = 
av
->flags;

2641 
av
->
ödex
 = 
i
;

2643 i‡(
av
->
gë_h™dÀr
 =
NULL


2644 || (
av
->
Êags
 & 
NGX_HTTP_VAR_WEAK
))

2649 
√xt
;

2653 
Àn
 = 0;

2654 
av
 = 
NULL
;

2656 
n
 = 0;Ç < 
cmcf
->
¥efix_v¨übÀs
.
√…s
;Ç++) {

2657 i‡(
v
[
i
].
«me
.
Àn
 >
pv
[
n
].name.len && v[i].name.len >Üen

2658 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
pv
[
n
].«me.d©a,Öv[n].«me.
Àn
)

2661 
av
 = &
pv
[
n
];

2662 
Àn
 = 
pv
[
n
].
«me
.len;

2666 i‡(
av
) {

2667 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

2668 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2669 
v
[
i
].
Êags
 = 
av
->flags;

2671 
√xt
;

2674 i‡(
v
[
i
].
gë_h™dÀr
 =
NULL
) {

2675 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2676 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

2678  
NGX_ERROR
;

2681 
√xt
:

2686 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2687 
av
 = 
key
[
n
].
vÆue
;

2689 i‡(
av
->
Êags
 & 
NGX_HTTP_VAR_NOHASH
) {

2690 
key
[
n
].key.
d©a
 = 
NULL
;

2695 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

2696 
hash
.
key
 = 
ngx_hash_key
;

2697 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

2698 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

2699 
hash
.
«me
 = "variables_hash";

2700 
hash
.
poﬁ
 = 
cf
->pool;

2701 
hash
.
ãmp_poﬁ
 = 
NULL
;

2703 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

2704 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

2705 !
NGX_OK
)

2707  
NGX_ERROR
;

2710 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

2712  
NGX_OK
;

2713 
	}
}

	@src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

33 
	#NGX_HTTP_VAR_WEAK
 16

	)

34 
	#NGX_HTTP_VAR_PREFIX
 32

	)

37 
	sngx_hâp_v¨übÀ_s
 {

38 
ngx_°r_t
 
«me
;

39 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

40 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

41 
uöçå_t
 
d©a
;

42 
ngx_uöt_t
 
Êags
;

43 
ngx_uöt_t
 
ödex
;

46 
	#ngx_hâp_nuŒ_v¨übÀ
 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 
	}

	)
}

49 
ngx_hâp_v¨übÀ_t
 *
ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

50 
ngx_uöt_t
 
Êags
);

51 
ngx_öt_t
 
ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

52 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_uöt_t
 
ödex
);

54 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_uöt_t
 
ödex
);

57 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

60 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

61 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

64 #i‡(
NGX_PCRE
)

67 
ngx_uöt_t
 
	mˇ±uª
;

68 
ngx_öt_t
 
	mödex
;

69 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

73 
ngx_ªgex_t
 *
	mªgex
;

74 
ngx_uöt_t
 
	mnˇ±uªs
;

75 
ngx_hâp_ªgex_v¨übÀ_t
 *
	mv¨übÀs
;

76 
ngx_uöt_t
 
	mnv¨übÀs
;

77 
ngx_°r_t
 
	m«me
;

78 } 
	tngx_hâp_ªgex_t
;

82 
ngx_hâp_ªgex_t
 *
	mªgex
;

83 *
	mvÆue
;

84 } 
	tngx_hâp_m≠_ªgex_t
;

87 
ngx_hâp_ªgex_t
 *
ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

88 
ngx_ªgex_compûe_t
 *
rc
);

89 
ngx_öt_t
 
ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

90 
ngx_°r_t
 *
s
);

96 
ngx_hash_comböed_t
 
	mhash
;

97 #i‡(
NGX_PCRE
)

98 
ngx_hâp_m≠_ªgex_t
 *
	mªgex
;

99 
ngx_uöt_t
 
	mƒegex
;

101 } 
	tngx_hâp_m≠_t
;

104 *
ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

105 
ngx_°r_t
 *
m©ch
);

108 
ngx_öt_t
 
ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

109 
ngx_öt_t
 
ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

112 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

113 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@src/http/ngx_http_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_hâp_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ_˘x
 = {

17 
NULL
,

18 
ngx_hâp_wrôe_fûãr_öô
,

20 
NULL
,

21 
NULL
,

23 
NULL
,

24 
NULL
,

26 
NULL
,

27 
NULL
,

31 
ngx_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 &
ngx_hâp_wrôe_fûãr_moduÀ_˘x
,

34 
NULL
,

35 
NGX_HTTP_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


47 
ngx_öt_t


48 
	$ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

50 
off_t
 
size
, 
£¡
, 
n£¡
, 
limô
;

51 
ngx_uöt_t
 
œ°
, 
Êush
, 
sync
;

52 
ngx_m£c_t
 
dñay
;

53 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, *
chaö
;

54 
ngx_c⁄√˘i⁄_t
 *
c
;

55 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

57 
c
 = 
r
->
c⁄√˘i⁄
;

59 i‡(
c
->
îr‹
) {

60  
NGX_ERROR
;

63 
size
 = 0;

64 
Êush
 = 0;

65 
sync
 = 0;

66 
œ°
 = 0;

67 
Œ
 = &
r
->
out
;

71 
˛
 = 
r
->
out
; cl; c»˛->
√xt
) {

72 
Œ
 = &
˛
->
√xt
;

74 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

77 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

78 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

79 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

80 
˛
->
buf
->
fûe_pos
,

81 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

84 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

88 
˛
->
buf
->
ãmp‹¨y
,

89 
˛
->
buf
->
ªcy˛ed
,

90 
˛
->
buf
->
ö_fûe
,

91 
˛
->
buf
->
°¨t
,

92 
˛
->
buf
->
pos
,

93 
˛
->
buf
->
œ°
,

94 
˛
->
buf
->
fûe
,

95 
˛
->
buf
->
fûe_pos
,

96 
˛
->
buf
->
fûe_œ°
);

98 
	`ngx_debug_poöt
();

99  
NGX_ERROR
;

103 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

105 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

106 
Êush
 = 1;

109 i‡(
˛
->
buf
->
sync
) {

110 
sync
 = 1;

113 i‡(
˛
->
buf
->
œ°_buf
) {

114 
œ°
 = 1;

120 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

121 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

122 i‡(
˛
 =
NULL
) {

123  
NGX_ERROR
;

126 
˛
->
buf
 = 
 
->buf;

127 *
Œ
 = 
˛
;

128 
Œ
 = &
˛
->
√xt
;

130 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

133 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

134 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

135 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

136 
˛
->
buf
->
fûe_pos
,

137 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

140 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

141 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

144 
˛
->
buf
->
ãmp‹¨y
,

145 
˛
->
buf
->
ªcy˛ed
,

146 
˛
->
buf
->
ö_fûe
,

147 
˛
->
buf
->
°¨t
,

148 
˛
->
buf
->
pos
,

149 
˛
->
buf
->
œ°
,

150 
˛
->
buf
->
fûe
,

151 
˛
->
buf
->
fûe_pos
,

152 
˛
->
buf
->
fûe_œ°
);

154 
	`ngx_debug_poöt
();

155  
NGX_ERROR
;

159 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

161 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

162 
Êush
 = 1;

165 i‡(
˛
->
buf
->
sync
) {

166 
sync
 = 1;

169 i‡(
˛
->
buf
->
œ°_buf
) {

170 
œ°
 = 1;

174 *
Œ
 = 
NULL
;

176 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

177 "hâ∞wrôêfûãr:Ü:%uòf:%uòs:%O", 
œ°
, 
Êush
, 
size
);

179 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

187 i‡(!
œ°
 && !
Êush
 && 
ö
 && 
size
 < (
off_t
Ë
˛cf
->
po°p⁄e_ouçut
) {

188  
NGX_OK
;

191 i‡(
c
->
wrôe
->
dñayed
) {

192 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

193  
NGX_AGAIN
;

196 i‡(
size
 == 0

197 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)

198 && !(
œ°
 && 
c
->
√ed_œ°_buf
))

200 i‡(
œ°
 || 
Êush
 || 
sync
) {

201 
˛
 = 
r
->
out
; cl; ) {

202 
 
 = 
˛
;

203 
˛
 = cl->
√xt
;

204 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

207 
r
->
out
 = 
NULL
;

208 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

210  
NGX_OK
;

213 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

216 
	`ngx_debug_poöt
();

218  
NGX_ERROR
;

221 i‡(
r
->
limô_øã
) {

222 i‡(
r
->
limô_øã_a·î
 == 0) {

223 
r
->
limô_øã_a·î
 = 
˛cf
->limit_rate_after;

226 
limô
 = (
off_t
Ë
r
->
limô_øã
 * (
	`ngx_time
(Ë-Ñ->
°¨t_£c
 + 1)

227 - (
c
->
£¡
 - 
r
->
limô_øã_a·î
);

229 i‡(
limô
 <= 0) {

230 
c
->
wrôe
->
dñayed
 = 1;

231 
dñay
 = (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
r
->
limô_øã
 + 1);

232 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

234 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

236  
NGX_AGAIN
;

239 i‡(
˛cf
->
£ndfûe_max_chunk


240 && (
off_t
Ë
˛cf
->
£ndfûe_max_chunk
 < 
limô
)

242 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

246 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

249 
£¡
 = 
c
->sent;

251 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

252 "hâ∞wrôêfûã∏limô %O", 
limô
);

254 
chaö
 = 
c
->
	`£nd_chaö
(c, 
r
->
out
, 
limô
);

256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

257 "hâ∞wrôêfûã∏%p", 
chaö
);

259 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

260 
c
->
îr‹
 = 1;

261  
NGX_ERROR
;

264 i‡(
r
->
limô_øã
) {

266 
n£¡
 = 
c
->
£¡
;

268 i‡(
r
->
limô_øã_a·î
) {

270 
£¡
 -
r
->
limô_øã_a·î
;

271 i‡(
£¡
 < 0) {

272 
£¡
 = 0;

275 
n£¡
 -
r
->
limô_øã_a·î
;

276 i‡(
n£¡
 < 0) {

277 
n£¡
 = 0;

281 
dñay
 = (
ngx_m£c_t
Ë((
n£¡
 - 
£¡
Ë* 1000 / 
r
->
limô_øã
);

283 i‡(
dñay
 > 0) {

284 
limô
 = 0;

285 
c
->
wrôe
->
dñayed
 = 1;

286 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

290 i‡(
limô


291 && 
c
->
wrôe
->
ªady


292 && 
c
->
£¡
 - síà>
limô
 - (
off_t
Ë(2 * 
ngx_∑gesize
))

294 
c
->
wrôe
->
dñayed
 = 1;

295 
	`ngx_add_timî
(
c
->
wrôe
, 1);

298 
˛
 = 
r
->
out
; c»&& c»!
chaö
; ) {

299 
 
 = 
˛
;

300 
˛
 = cl->
√xt
;

301 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

304 
r
->
out
 = 
chaö
;

306 i‡(
chaö
) {

307 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

308  
NGX_AGAIN
;

311 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

313 i‡((
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
Ë&& 
r
->
po°p⁄ed
 =
NULL
) {

314  
NGX_AGAIN
;

317  
NGX_OK
;

318 
	}
}

321 
ngx_öt_t


322 
	$ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

324 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_wrôe_fûãr
;

326  
NGX_OK
;

327 
	}
}

	@src/http/v2/ngx_http_v2.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_v2_moduÀ.h
>

15 
ngx_°r_t
 
	m«me
;

16 
ngx_uöt_t
 
	moff£t
;

17 
ngx_uöt_t
 
	mhash
;

18 
ngx_hâp_hódî_t
 *
	mhh
;

19 } 
	tngx_hâp_v2_∑r£_hódî_t
;

23 
	#NGX_HTTP_V2_NO_ERROR
 0x0

	)

24 
	#NGX_HTTP_V2_PROTOCOL_ERROR
 0x1

	)

25 
	#NGX_HTTP_V2_INTERNAL_ERROR
 0x2

	)

26 
	#NGX_HTTP_V2_FLOW_CTRL_ERROR
 0x3

	)

27 
	#NGX_HTTP_V2_SETTINGS_TIMEOUT
 0x4

	)

28 
	#NGX_HTTP_V2_STREAM_CLOSED
 0x5

	)

29 
	#NGX_HTTP_V2_SIZE_ERROR
 0x6

	)

30 
	#NGX_HTTP_V2_REFUSED_STREAM
 0x7

	)

31 
	#NGX_HTTP_V2_CANCEL
 0x8

	)

32 
	#NGX_HTTP_V2_COMP_ERROR
 0x9

	)

33 
	#NGX_HTTP_V2_CONNECT_ERROR
 0xa

	)

34 
	#NGX_HTTP_V2_ENHANCE_YOUR_CALM
 0xb

	)

35 
	#NGX_HTTP_V2_INADEQUATE_SECURITY
 0xc

	)

36 
	#NGX_HTTP_V2_HTTP_1_1_REQUIRED
 0xd

	)

39 
	#NGX_HTTP_V2_SETTINGS_ACK_SIZE
 0

	)

40 
	#NGX_HTTP_V2_RST_STREAM_SIZE
 4

	)

41 
	#NGX_HTTP_V2_PRIORITY_SIZE
 5

	)

42 
	#NGX_HTTP_V2_PING_SIZE
 8

	)

43 
	#NGX_HTTP_V2_GOAWAY_SIZE
 8

	)

44 
	#NGX_HTTP_V2_WINDOW_UPDATE_SIZE
 4

	)

46 
	#NGX_HTTP_V2_SETTINGS_PARAM_SIZE
 6

	)

49 
	#NGX_HTTP_V2_HEADER_TABLE_SIZE_SETTING
 0x1

	)

50 
	#NGX_HTTP_V2_ENABLE_PUSH_SETTING
 0x2

	)

51 
	#NGX_HTTP_V2_MAX_STREAMS_SETTING
 0x3

	)

52 
	#NGX_HTTP_V2_INIT_WINDOW_SIZE_SETTING
 0x4

	)

53 
	#NGX_HTTP_V2_MAX_FRAME_SIZE_SETTING
 0x5

	)

55 
	#NGX_HTTP_V2_FRAME_BUFFER_SIZE
 24

	)

57 
	#NGX_HTTP_V2_ROOT
 (*Ë-1

	)

60 
ngx_hâp_v2_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

61 
ngx_hâp_v2_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

62 
ngx_hâp_v2_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
);

64 
u_ch¨
 *
ngx_hâp_v2_°©e_¥oxy_¥Ÿocﬁ
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

65 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

66 
u_ch¨
 *
ngx_hâp_v2_°©e_¥eÁ˚
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

67 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

68 
u_ch¨
 *
ngx_hâp_v2_°©e_¥eÁ˚_íd
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

69 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

70 
u_ch¨
 *
ngx_hâp_v2_°©e_hód
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

71 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

72 
u_ch¨
 *
ngx_hâp_v2_°©e_d©a
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

73 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

74 
u_ch¨
 *
ngx_hâp_v2_°©e_ªad_d©a
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

75 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

76 
u_ch¨
 *
ngx_hâp_v2_°©e_hódîs
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

77 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

78 
u_ch¨
 *
ngx_hâp_v2_°©e_hódî_block
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

79 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

80 
u_ch¨
 *
ngx_hâp_v2_°©e_fõld_Àn
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

81 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

82 
u_ch¨
 *
ngx_hâp_v2_°©e_fõld_huff
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

83 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

84 
u_ch¨
 *
ngx_hâp_v2_°©e_fõld_øw
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

85 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

86 
u_ch¨
 *
ngx_hâp_v2_°©e_fõld_skù
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

87 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

88 
u_ch¨
 *
ngx_hâp_v2_°©e_¥o˚ss_hódî
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

89 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

90 
u_ch¨
 *
ngx_hâp_v2_°©e_hódî_com∂ëe
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

91 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

92 
u_ch¨
 *
ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

93 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_v2_h™dÀr_±
 
h™dÀr
);

94 
u_ch¨
 *
ngx_hâp_v2_°©e_¥i‹ôy
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

95 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

96 
u_ch¨
 *
ngx_hâp_v2_°©e_r°_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

97 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

98 
u_ch¨
 *
ngx_hâp_v2_°©e_£âögs
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

99 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

100 
u_ch¨
 *
ngx_hâp_v2_°©e_£âögs_∑øms
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

101 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

102 
u_ch¨
 *
ngx_hâp_v2_°©e_push_¥omi£
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

103 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

104 
u_ch¨
 *
ngx_hâp_v2_°©e_pög
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

105 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

106 
u_ch¨
 *
ngx_hâp_v2_°©e_gﬂway
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

107 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

108 
u_ch¨
 *
ngx_hâp_v2_°©e_wödow_upd©e
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

109 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

110 
u_ch¨
 *
ngx_hâp_v2_°©e_c⁄töu©i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

111 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

112 
u_ch¨
 *
ngx_hâp_v2_°©e_com∂ëe
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

113 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

114 
u_ch¨
 *
ngx_hâp_v2_°©e_skù_∑dded
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

115 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

116 
u_ch¨
 *
ngx_hâp_v2_°©e_skù
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

117 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

118 
u_ch¨
 *
ngx_hâp_v2_°©e_ßve
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

119 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_v2_h™dÀr_±
 
h™dÀr
);

120 
u_ch¨
 *
ngx_hâp_v2_°©e_hódîs_ßve
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

121 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_v2_h™dÀr_±
 
h™dÀr
);

122 
u_ch¨
 *
ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

123 
ngx_uöt_t
 
îr
);

125 
ngx_öt_t
 
ngx_hâp_v2_∑r£_öt
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

126 
u_ch¨
 **
pos
, u_ch¨ *
íd
, 
ngx_uöt_t
 
¥efix
);

128 
ngx_hâp_v2_°ªam_t
 *
ngx_hâp_v2_¸óã_°ªam
(

129 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
push
);

130 
ngx_hâp_v2_node_t
 *
ngx_hâp_v2_gë_node_by_id
(

131 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
sid
,Çgx_uöt_à
Æloc
);

132 
ngx_hâp_v2_node_t
 *
ngx_hâp_v2_gë_˛o£d_node
(

133 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
);

134 
	#ngx_hâp_v2_ödex_size
(
h2scf
Ë(h2scf->
°ªams_ödex_mask
 + 1)

	)

135 
	#ngx_hâp_v2_ödex
(
h2scf
, 
sid
Ë((sid >> 1Ë& h2scf->
°ªams_ödex_mask
)

	)

137 
ngx_öt_t
 
ngx_hâp_v2_£nd_£âögs
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
);

138 
ngx_öt_t
 
ngx_hâp_v2_£âögs_‰ame_h™dÀr
(

139 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
);

140 
ngx_öt_t
 
ngx_hâp_v2_£nd_wödow_upd©e
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

141 
ngx_uöt_t
 
sid
, 
size_t
 
wödow
);

142 
ngx_öt_t
 
ngx_hâp_v2_£nd_r°_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

143 
ngx_uöt_t
 
sid
,Çgx_uöt_à
°©us
);

144 
ngx_öt_t
 
ngx_hâp_v2_£nd_gﬂway
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

145 
ngx_uöt_t
 
°©us
);

147 
ngx_hâp_v2_out_‰ame_t
 *
ngx_hâp_v2_gë_‰ame
(

148 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
size_t
 
Àngth
, 
ngx_uöt_t
 
ty≥
,

149 
u_ch¨
 
Êags
, 
ngx_uöt_t
 
sid
);

150 
ngx_öt_t
 
ngx_hâp_v2_‰ame_h™dÀr
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

151 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
);

153 
ngx_öt_t
 
ngx_hâp_v2_vÆid©e_hódî
(
ngx_hâp_ªque°_t
 *
r
,

154 
ngx_hâp_v2_hódî_t
 *
hódî
);

155 
ngx_öt_t
 
ngx_hâp_v2_p£udo_hódî
(
ngx_hâp_ªque°_t
 *
r
,

156 
ngx_hâp_v2_hódî_t
 *
hódî
);

157 
ngx_öt_t
 
ngx_hâp_v2_∑r£_∑th
(
ngx_hâp_ªque°_t
 *
r
,

158 
ngx_°r_t
 *
vÆue
);

159 
ngx_öt_t
 
ngx_hâp_v2_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

160 
ngx_°r_t
 *
vÆue
);

161 
ngx_öt_t
 
ngx_hâp_v2_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
,

162 
ngx_°r_t
 *
vÆue
);

163 
ngx_öt_t
 
ngx_hâp_v2_∑r£_auth‹ôy
(
ngx_hâp_ªque°_t
 *
r
,

164 
ngx_°r_t
 *
vÆue
);

165 
ngx_öt_t
 
ngx_hâp_v2_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

166 
ngx_hâp_v2_∑r£_hódî_t
 *
hódî
, 
ngx_°r_t
 *
vÆue
);

167 
ngx_öt_t
 
ngx_hâp_v2_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
);

168 
ngx_öt_t
 
ngx_hâp_v2_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

169 
ngx_hâp_v2_hódî_t
 *
hódî
);

170 
ngx_öt_t
 
ngx_hâp_v2_c⁄°ru˘_cookõ_hódî
(
ngx_hâp_ªque°_t
 *
r
);

171 
ngx_hâp_v2_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

172 
ngx_hâp_v2_run_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

173 
ngx_öt_t
 
ngx_hâp_v2_¥o˚ss_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

174 
u_ch¨
 *
pos
, 
size_t
 
size
, 
ngx_uöt_t
 
œ°
);

175 
ngx_öt_t
 
ngx_hâp_v2_fûãr_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

176 
ngx_hâp_v2_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

178 
ngx_öt_t
 
ngx_hâp_v2_ãrmö©e_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

179 
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_uöt_t
 
°©us
);

180 
ngx_hâp_v2_˛o£_°ªam_h™dÀr
(
ngx_evít_t
 *
ev
);

181 
ngx_hâp_v2_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
);

182 
ngx_hâp_v2_idÀ_h™dÀr
(
ngx_evít_t
 *
ªv
);

183 
ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

184 
ngx_uöt_t
 
°©us
);

186 
ngx_öt_t
 
ngx_hâp_v2_adju°_wödows
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

187 
ssize_t
 
dñè
);

188 
ngx_hâp_v2_£t_dïídícy
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

189 
ngx_hâp_v2_node_t
 *
node
, 
ngx_uöt_t
 
dïíd
,Çgx_uöt_à
ex˛usive
);

190 
ngx_hâp_v2_node_chûdªn_upd©e
(
ngx_hâp_v2_node_t
 *
node
);

192 
ngx_hâp_v2_poﬁ_˛ónup
(*
d©a
);

195 
ngx_hâp_v2_h™dÀr_±
 
	gngx_hâp_v2_‰ame_°©es
[] = {

196 
ngx_hâp_v2_°©e_d©a
,

197 
ngx_hâp_v2_°©e_hódîs
,

198 
ngx_hâp_v2_°©e_¥i‹ôy
,

199 
ngx_hâp_v2_°©e_r°_°ªam
,

200 
ngx_hâp_v2_°©e_£âögs
,

201 
ngx_hâp_v2_°©e_push_¥omi£
,

202 
ngx_hâp_v2_°©e_pög
,

203 
ngx_hâp_v2_°©e_gﬂway
,

204 
ngx_hâp_v2_°©e_wödow_upd©e
,

205 
ngx_hâp_v2_°©e_c⁄töu©i⁄


208 
	#NGX_HTTP_V2_FRAME_STATES
 \

209 ((
ngx_hâp_v2_‰ame_°©es
Ë/ (
ngx_hâp_v2_h™dÀr_±
))

	)

212 
ngx_hâp_v2_∑r£_hódî_t
 
	gngx_hâp_v2_∑r£_hódîs
[] = {

213 { 
ngx_°rög
("host"),

214 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
), 0, 
NULL
 },

216 { 
ngx_°rög
("accept-encoding"),

217 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
), 0, 
NULL
 },

219 { 
ngx_°rög
("accept-language"),

220 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
), 0, 
NULL
 },

222 { 
ngx_°rög
("user-agent"),

223 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
), 0, 
NULL
 },

225 { 
ngx_nuŒ_°rög
, 0, 0, 
NULL
 }

230 
	$ngx_hâp_v2_öô
(
ngx_evít_t
 *
ªv
)

232 
ngx_c⁄√˘i⁄_t
 *
c
;

233 
ngx_poﬁ_˛ónup_t
 *
˛n
;

234 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

235 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

236 
ngx_hâp_v2_maö_c⁄f_t
 *
h2mcf
;

237 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

239 
c
 = 
ªv
->
d©a
;

240 
hc
 = 
c
->
d©a
;

242 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "init http2 connection");

244 
c
->
log
->
a˘i⁄
 = "processing HTTP/2 connection";

246 
h2mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_v2_moduÀ
);

248 i‡(
h2mcf
->
ªcv_buf„r
 =
NULL
) {

249 
h2mcf
->
ªcv_buf„r
 = 
	`ngx_∑Œoc
(
ngx_cy˛e
->
poﬁ
,

250 
h2mcf
->
ªcv_buf„r_size
);

251 i‡(
h2mcf
->
ªcv_buf„r
 =
NULL
) {

252 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

257 
h2c
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_v2_c⁄√˘i⁄_t
));

258 i‡(
h2c
 =
NULL
) {

259 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

263 
h2c
->
c⁄√˘i⁄
 = 
c
;

264 
h2c
->
hâp_c⁄√˘i⁄
 = 
hc
;

266 
h2c
->
£nd_wödow
 = 
NGX_HTTP_V2_DEFAULT_WINDOW
;

267 
h2c
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

269 
h2c
->
öô_wödow
 = 
NGX_HTTP_V2_DEFAULT_WINDOW
;

271 
h2c
->
‰ame_size
 = 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
;

273 
h2c
->
èbÀ_upd©e
 = 1;

275 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_v2_moduÀ
);

277 
h2c
->
c⁄cuºít_pushes
 = 
h2scf
->concurrent_pushes;

279 
h2c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
h2scf
->
poﬁ_size
, h2c->
c⁄√˘i⁄
->
log
);

280 i‡(
h2c
->
poﬁ
 =
NULL
) {

281 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

285 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
c
->
poﬁ
, 0);

286 i‡(
˛n
 =
NULL
) {

287 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

291 
˛n
->
h™dÀr
 = 
ngx_hâp_v2_poﬁ_˛ónup
;

292 
˛n
->
d©a
 = 
h2c
;

294 
h2c
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, 
	`ngx_hâp_v2_ödex_size
(
h2scf
)

295 * (
ngx_hâp_v2_node_t
 *));

296 i‡(
h2c
->
°ªams_ödex
 =
NULL
) {

297 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

301 i‡(
	`ngx_hâp_v2_£nd_£âögs
(
h2c
Ë=
NGX_ERROR
) {

302 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

306 i‡(
	`ngx_hâp_v2_£nd_wödow_upd©e
(
h2c
, 0, 
NGX_HTTP_V2_MAX_WINDOW


307 - 
NGX_HTTP_V2_DEFAULT_WINDOW
)

308 =
NGX_ERROR
)

310 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

314 
h2c
->
°©e
.
h™dÀr
 = 
hc
->
¥oxy_¥Ÿocﬁ
 ? 
ngx_hâp_v2_°©e_¥oxy_¥Ÿocﬁ


315 : 
ngx_hâp_v2_°©e_¥eÁ˚
;

317 
	`ngx_queue_öô
(&
h2c
->
waôög
);

318 
	`ngx_queue_öô
(&
h2c
->
dïídícõs
);

319 
	`ngx_queue_öô
(&
h2c
->
˛o£d
);

321 
c
->
d©a
 = 
h2c
;

323 
ªv
->
h™dÀr
 = 
ngx_hâp_v2_ªad_h™dÀr
;

324 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_v2_wrôe_h™dÀr
;

326 
c
->
idÀ
 = 1;

328 
	`ngx_hâp_v2_ªad_h™dÀr
(
ªv
);

329 
	}
}

333 
	$ngx_hâp_v2_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

335 
u_ch¨
 *
p
, *
íd
;

336 
size_t
 
avaûabÀ
;

337 
ssize_t
 
n
;

338 
ngx_c⁄√˘i⁄_t
 *
c
;

339 
ngx_hâp_v2_maö_c⁄f_t
 *
h2mcf
;

340 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

342 
c
 = 
ªv
->
d©a
;

343 
h2c
 = 
c
->
d©a
;

345 i‡(
ªv
->
timedout
) {

346 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

347 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

351 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http2Ñead handler");

353 
h2c
->
blocked
 = 1;

355 i‡(
c
->
˛o£
) {

356 
c
->
˛o£
 = 0;

358 i‡(!
h2c
->
gﬂway
) {

359 
h2c
->
gﬂway
 = 1;

361 i‡(
	`ngx_hâp_v2_£nd_gﬂway
(
h2c
, 
NGX_HTTP_V2_NO_ERROR
)

362 =
NGX_ERROR
)

364 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

368 i‡(
	`ngx_hâp_v2_£nd_ouçut_queue
(
h2c
Ë=
NGX_ERROR
) {

369 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

374 
h2c
->
blocked
 = 0;

379 
h2mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

380 
ngx_hâp_v2_moduÀ
);

382 
avaûabÀ
 = 
h2mcf
->
ªcv_buf„r_size
 - 2 * 
NGX_HTTP_V2_STATE_BUFFER_SIZE
;

385 
p
 = 
h2mcf
->
ªcv_buf„r
;

387 
	`ngx_mem˝y
(
p
, 
h2c
->
°©e
.
buf„r
, 
NGX_HTTP_V2_STATE_BUFFER_SIZE
);

388 
íd
 = 
p
 + 
h2c
->
°©e
.
buf„r_u£d
;

390 
n
 = 
c
->
	`ªcv
(c, 
íd
, 
avaûabÀ
);

392 i‡(
n
 =
NGX_AGAIN
) {

396 i‡(
n
 == 0

397 && (
h2c
->
°©e
.
öcom∂ëe
 || h2c->
¥o˚ssög
 || h2c->
pushög
))

399 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

403 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

404 
c
->
îr‹
 = 1;

405 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

409 
íd
 +
n
;

411 
h2c
->
°©e
.
buf„r_u£d
 = 0;

412 
h2c
->
°©e
.
öcom∂ëe
 = 0;

415 
p
 = 
h2c
->
°©e
.
	`h™dÀr
(h2c,Ö, 
íd
);

417 i‡(
p
 =
NULL
) {

421 } 
p
 !
íd
);

423 } 
ªv
->
ªady
);

425 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

426 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

430 i‡(
h2c
->
œ°_out
 && 
	`ngx_hâp_v2_£nd_ouçut_queue
(h2cË=
NGX_ERROR
) {

431 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

435 
h2c
->
blocked
 = 0;

437 i‡(
h2c
->
¥o˚ssög
 || h2c->
pushög
) {

438 i‡(
ªv
->
timî_£t
) {

439 
	`ngx_dñ_timî
(
ªv
);

445 
	`ngx_hâp_v2_h™dÀ_c⁄√˘i⁄
(
h2c
);

446 
	}
}

450 
	$ngx_hâp_v2_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

452 
ngx_öt_t
 
rc
;

453 
ngx_c⁄√˘i⁄_t
 *
c
;

454 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

456 
c
 = 
wev
->
d©a
;

457 
h2c
 = 
c
->
d©a
;

459 i‡(
wev
->
timedout
) {

460 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

462 
c
->
îr‹
 = 1;

463 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

467 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http2 write handler");

469 i‡(
h2c
->
œ°_out
 =
NULL
 && !
c
->
buf„ªd
) {

471 i‡(
wev
->
timî_£t
) {

472 
	`ngx_dñ_timî
(
wev
);

475 
	`ngx_hâp_v2_h™dÀ_c⁄√˘i⁄
(
h2c
);

479 
h2c
->
blocked
 = 1;

481 
rc
 = 
	`ngx_hâp_v2_£nd_ouçut_queue
(
h2c
);

483 i‡(
rc
 =
NGX_ERROR
) {

484 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

488 
h2c
->
blocked
 = 0;

490 i‡(
rc
 =
NGX_AGAIN
) {

494 
	`ngx_hâp_v2_h™dÀ_c⁄√˘i⁄
(
h2c
);

495 
	}
}

498 
ngx_öt_t


499 
	$ngx_hâp_v2_£nd_ouçut_queue
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
)

501 
t˝_nodñay
;

502 
ngx_chaö_t
 *
˛
;

503 
ngx_evít_t
 *
wev
;

504 
ngx_c⁄√˘i⁄_t
 *
c
;

505 
ngx_hâp_v2_out_‰ame_t
 *
out
, *
‰ame
, *
‚
;

506 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

508 
c
 = 
h2c
->
c⁄√˘i⁄
;

510 i‡(
c
->
îr‹
) {

511  
NGX_ERROR
;

514 
wev
 = 
c
->
wrôe
;

516 i‡(!
wev
->
ªady
) {

517  
NGX_AGAIN
;

520 
˛
 = 
NULL
;

521 
out
 = 
NULL
;

523 
‰ame
 = 
h2c
->
œ°_out
; føme; fømê
‚
) {

524 
‰ame
->
œ°
->
√xt
 = 
˛
;

525 
˛
 = 
‰ame
->
fú°
;

527 
‚
 = 
‰ame
->
√xt
;

528 
‰ame
->
√xt
 = 
out
;

529 
out
 = 
‰ame
;

531 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

533 
out
, out->
°ªam
 ? out->°ªam->
node
->
id
 : 0,

534 
out
->
blocked
, out->
Àngth
);

537 
˛
 = 
c
->
	`£nd_chaö
(c, cl, 0);

539 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

540 
îr‹
;

543 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

544 
ngx_hâp_c‹e_moduÀ
);

546 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

547 
îr‹
;

550 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

551 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

552 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

553 
îr‹
;

556 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

557 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

560 
t˝_nodñay
 = 1;

563 i‡(
t˝_nodñay
 && 
˛cf
->t˝_nodñay && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

564 
îr‹
;

567  ; 
out
; ouà
‚
) {

568 
‚
 = 
out
->
√xt
;

570 i‡(
out
->
	`h™dÀr
(
h2c
, outË!
NGX_OK
) {

571 
out
->
blocked
 = 1;

575 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

577 
out
, out->
°ªam
 ? out->°ªam->
node
->
id
 : 0,

578 
out
->
blocked
, out->
Àngth
);

581 
‰ame
 = 
NULL
;

583  ; 
out
; ouà
‚
) {

584 
‚
 = 
out
->
√xt
;

585 
out
->
√xt
 = 
‰ame
;

586 
‰ame
 = 
out
;

589 
h2c
->
œ°_out
 = 
‰ame
;

591 i‡(!
wev
->
ªady
) {

592 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

593  
NGX_AGAIN
;

596 i‡(
wev
->
timî_£t
) {

597 
	`ngx_dñ_timî
(
wev
);

600  
NGX_OK
;

602 
îr‹
:

604 
c
->
îr‹
 = 1;

606 i‡(!
h2c
->
blocked
) {

607 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

610  
NGX_ERROR
;

611 
	}
}

615 
	$ngx_hâp_v2_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
)

617 
ngx_öt_t
 
rc
;

618 
ngx_c⁄√˘i⁄_t
 *
c
;

619 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

621 i‡(
h2c
->
œ°_out
 || h2c->
¥o˚ssög
 || h2c->
pushög
) {

625 
c
 = 
h2c
->
c⁄√˘i⁄
;

627 i‡(
c
->
îr‹
) {

628 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

632 i‡(
c
->
buf„ªd
) {

633 
h2c
->
blocked
 = 1;

635 
rc
 = 
	`ngx_hâp_v2_£nd_ouçut_queue
(
h2c
);

637 
h2c
->
blocked
 = 0;

639 i‡(
rc
 =
NGX_ERROR
) {

640 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

644 i‡(
rc
 =
NGX_AGAIN
) {

651 i‡(
h2c
->
gﬂway
) {

652 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

656 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

657 
ngx_hâp_v2_moduÀ
);

658 i‡(
h2c
->
°©e
.
öcom∂ëe
) {

659 
	`ngx_add_timî
(
c
->
ªad
, 
h2scf
->
ªcv_timeout
);

663 
	`ngx_de°roy_poﬁ
(
h2c
->
poﬁ
);

665 
h2c
->
poﬁ
 = 
NULL
;

666 
h2c
->
‰ì_‰ames
 = 
NULL
;

667 
h2c
->
‰ì_Áke_c⁄√˘i⁄s
 = 
NULL
;

669 #i‡(
NGX_HTTP_SSL
)

670 i‡(
c
->
s¶
) {

671 
	`ngx_s¶_‰ì_buf„r
(
c
);

675 
c
->
de°royed
 = 1;

676 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

678 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

679 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_v2_idÀ_h™dÀr
;

681 i‡(
c
->
wrôe
->
timî_£t
) {

682 
	`ngx_dñ_timî
(
c
->
wrôe
);

685 
	`ngx_add_timî
(
c
->
ªad
, 
h2scf
->
idÀ_timeout
);

686 
	}
}

689 
u_ch¨
 *

690 
	$ngx_hâp_v2_°©e_¥oxy_¥Ÿocﬁ
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

691 
u_ch¨
 *
íd
)

693 
ngx_log_t
 *
log
;

695 
log
 = 
h2c
->
c⁄√˘i⁄
->log;

696 
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

698 
pos
 = 
	`ngx_¥oxy_¥Ÿocﬁ_ªad
(
h2c
->
c⁄√˘i⁄
,Öos, 
íd
);

700 
log
->
a˘i⁄
 = "processing HTTP/2 connection";

702 i‡(
pos
 =
NULL
) {

703  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

706  
	`ngx_hâp_v2_°©e_¥eÁ˚
(
h2c
, 
pos
, 
íd
);

707 
	}
}

710 
u_ch¨
 *

711 
	$ngx_hâp_v2_°©e_¥eÁ˚
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

712 
u_ch¨
 *
íd
)

714 c⁄° 
u_ch¨
 
¥eÁ˚
[] = "PRI * HTTP/2.0\r\n";

716 i‡((
size_t
Ë(
íd
 - 
pos
Ë< (
¥eÁ˚
) - 1) {

717  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
, 
ngx_hâp_v2_°©e_¥eÁ˚
);

720 i‡(
	`ngx_memcmp
(
pos
, 
¥eÁ˚
, (preface) - 1) != 0) {

721 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

723 (
¥eÁ˚
Ë- 1, 
pos
);

725  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

728  
	`ngx_hâp_v2_°©e_¥eÁ˚_íd
(
h2c
, 
pos
 + (
¥eÁ˚
Ë- 1, 
íd
);

729 
	}
}

732 
u_ch¨
 *

733 
	$ngx_hâp_v2_°©e_¥eÁ˚_íd
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

734 
u_ch¨
 *
íd
)

736 c⁄° 
u_ch¨
 
¥eÁ˚
[] = "\r\nSM\r\n\r\n";

738 i‡((
size_t
Ë(
íd
 - 
pos
Ë< (
¥eÁ˚
) - 1) {

739  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

740 
ngx_hâp_v2_°©e_¥eÁ˚_íd
);

743 i‡(
	`ngx_memcmp
(
pos
, 
¥eÁ˚
, (preface) - 1) != 0) {

744 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

746 (
¥eÁ˚
Ë- 1, 
pos
);

748  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

751 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

754  
	`ngx_hâp_v2_°©e_hód
(
h2c
, 
pos
 + (
¥eÁ˚
Ë- 1, 
íd
);

755 
	}
}

758 
u_ch¨
 *

759 
	$ngx_hâp_v2_°©e_hód
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
)

761 
uöt32_t
 
hód
;

762 
ngx_uöt_t
 
ty≥
;

764 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_FRAME_HEADER_SIZE
) {

765  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
, 
ngx_hâp_v2_°©e_hód
);

768 
hód
 = 
	`ngx_hâp_v2_∑r£_uöt32
(
pos
);

770 
h2c
->
°©e
.
Àngth
 = 
	`ngx_hâp_v2_∑r£_Àngth
(
hód
);

771 
h2c
->
°©e
.
Êags
 = 
pos
[4];

773 
h2c
->
°©e
.
sid
 = 
	`ngx_hâp_v2_∑r£_sid
(&
pos
[5]);

775 
pos
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE
;

777 
ty≥
 = 
	`ngx_hâp_v2_∑r£_ty≥
(
hód
);

779 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

781 
ty≥
, 
h2c
->
°©e
.
Êags
, h2c->°©e.
Àngth
, h2c->°©e.
sid
);

783 i‡(
ty≥
 >
NGX_HTTP_V2_FRAME_STATES
) {

784 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

785 "˛õ¡ síà‰amêwôh unknow¿ty≥ %ui", 
ty≥
);

786  
	`ngx_hâp_v2_°©e_skù
(
h2c
, 
pos
, 
íd
);

789  
ngx_hâp_v2_‰ame_°©es
[
ty≥
](
h2c
, 
pos
, 
íd
);

790 
	}
}

793 
u_ch¨
 *

794 
	$ngx_hâp_v2_°©e_d©a
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
)

796 
size_t
 
size
;

797 
ngx_hâp_v2_node_t
 *
node
;

798 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

800 
size
 = 
h2c
->
°©e
.
Àngth
;

802 i‡(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_PADDED_FLAG
) {

804 i‡(
h2c
->
°©e
.
Àngth
 == 0) {

805 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

809  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

812 i‡(
íd
 - 
pos
 == 0) {

813  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

814 
ngx_hâp_v2_°©e_d©a
);

817 
h2c
->
°©e
.
∑ddög
 = *
pos
++;

819 i‡(
h2c
->
°©e
.
∑ddög
 >
size
) {

820 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

823 
size
, 
h2c
->
°©e
.
∑ddög
);

825  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

826 
NGX_HTTP_V2_PROTOCOL_ERROR
);

829 
h2c
->
°©e
.
Àngth
 -1 + h2c->°©e.
∑ddög
;

832 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

835 i‡(
size
 > 
h2c
->
ªcv_wödow
) {

836 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

839 
size
, 
h2c
->
ªcv_wödow
);

841  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_FLOW_CTRL_ERROR
);

844 
h2c
->
ªcv_wödow
 -
size
;

846 i‡(
h2c
->
ªcv_wödow
 < 
NGX_HTTP_V2_MAX_WINDOW
 / 4) {

848 i‡(
	`ngx_hâp_v2_£nd_wödow_upd©e
(
h2c
, 0, 
NGX_HTTP_V2_MAX_WINDOW


849 - 
h2c
->
ªcv_wödow
)

850 =
NGX_ERROR
)

852  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

853 
NGX_HTTP_V2_INTERNAL_ERROR
);

856 
h2c
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

859 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 0);

861 i‡(
node
 =
NULL
 ||Çode->
°ªam
 == NULL) {

862 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

865  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

868 
°ªam
 = 
node
->stream;

870 i‡(
size
 > 
°ªam
->
ªcv_wödow
) {

871 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

874 
node
->
id
, 
size
, 
°ªam
->
ªcv_wödow
);

876 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, 
°ªam
,

877 
NGX_HTTP_V2_FLOW_CTRL_ERROR
)

878 =
NGX_ERROR
)

880  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

881 
NGX_HTTP_V2_INTERNAL_ERROR
);

884  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

887 
°ªam
->
ªcv_wödow
 -
size
;

889 i‡(
°ªam
->
no_Êow_c⁄åﬁ


890 && 
°ªam
->
ªcv_wödow
 < 
NGX_HTTP_V2_MAX_WINDOW
 / 4)

892 i‡(
	`ngx_hâp_v2_£nd_wödow_upd©e
(
h2c
, 
node
->
id
,

893 
NGX_HTTP_V2_MAX_WINDOW


894 - 
°ªam
->
ªcv_wödow
)

895 =
NGX_ERROR
)

897  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

898 
NGX_HTTP_V2_INTERNAL_ERROR
);

901 
°ªam
->
ªcv_wödow
 = 
NGX_HTTP_V2_MAX_WINDOW
;

904 i‡(
°ªam
->
ö_˛o£d
) {

905 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

907 
node
->
id
);

909 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, 
°ªam
,

910 
NGX_HTTP_V2_STREAM_CLOSED
)

911 =
NGX_ERROR
)

913  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

914 
NGX_HTTP_V2_INTERNAL_ERROR
);

917  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

920 
h2c
->
°©e
.
°ªam
 = stream;

922  
	`ngx_hâp_v2_°©e_ªad_d©a
(
h2c
, 
pos
, 
íd
);

923 
	}
}

926 
u_ch¨
 *

927 
	$ngx_hâp_v2_°©e_ªad_d©a
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

928 
u_ch¨
 *
íd
)

930 
size_t
 
size
;

931 
ngx_buf_t
 *
buf
;

932 
ngx_öt_t
 
rc
;

933 
ngx_hâp_ªque°_t
 *
r
;

934 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

935 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

937 
°ªam
 = 
h2c
->
°©e
.stream;

939 i‡(
°ªam
 =
NULL
) {

940  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

943 i‡(
°ªam
->
skù_d©a
) {

944 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

947  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

950 
size
 = 
íd
 - 
pos
;

952 i‡(
size
 >
h2c
->
°©e
.
Àngth
) {

953 
size
 = 
h2c
->
°©e
.
Àngth
;

954 
°ªam
->
ö_˛o£d
 = 
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_STREAM_FLAG
;

957 
r
 = 
°ªam
->
ªque°
;

959 i‡(
r
->
ªque°_body
) {

960 
rc
 = 
	`ngx_hâp_v2_¥o˚ss_ªque°_body
(
r
, 
pos
, 
size
, 
°ªam
->
ö_˛o£d
);

962 i‡(
rc
 !
NGX_OK
) {

963 
°ªam
->
skù_d©a
 = 1;

964 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

967 } i‡(
size
) {

968 
buf
 = 
°ªam
->
¥îód
;

970 i‡(
buf
 =
NULL
) {

971 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_v2_moduÀ
);

973 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
h2scf
->
¥îód_size
);

974 i‡(
buf
 =
NULL
) {

975  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

976 
NGX_HTTP_V2_INTERNAL_ERROR
);

979 
°ªam
->
¥îód
 = 
buf
;

982 i‡(
size
 > (
size_t
Ë(
buf
->
íd
 - buf->
œ°
)) {

983 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

985  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

986 
NGX_HTTP_V2_INTERNAL_ERROR
);

989 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->œ°, 
pos
, 
size
);

992 
pos
 +
size
;

993 
h2c
->
°©e
.
Àngth
 -
size
;

995 i‡(
h2c
->
°©e
.
Àngth
) {

996  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

997 
ngx_hâp_v2_°©e_ªad_d©a
);

1000 i‡(
h2c
->
°©e
.
∑ddög
) {

1001  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

1004  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1005 
	}
}

1008 
u_ch¨
 *

1009 
	$ngx_hâp_v2_°©e_hódîs
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1010 
u_ch¨
 *
íd
)

1012 
size_t
 
size
;

1013 
ngx_uöt_t
 
∑dded
, 
¥i‹ôy
, 
dïíd
, 
dïídícy
, 
ex˛
, 
weight
;

1014 
ngx_uöt_t
 
°©us
;

1015 
ngx_hâp_v2_node_t
 *
node
;

1016 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1017 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

1019 
∑dded
 = 
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_PADDED_FLAG
;

1020 
¥i‹ôy
 = 
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_PRIORITY_FLAG
;

1022 
size
 = 0;

1024 i‡(
∑dded
) {

1025 
size
++;

1028 i‡(
¥i‹ôy
) {

1029 
size
 +(
uöt32_t
) + 1;

1032 i‡(
h2c
->
°©e
.
Àngth
 < 
size
) {

1033 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1035 
h2c
->
°©e
.
Àngth
);

1037  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1040 i‡(
h2c
->
°©e
.
Àngth
 =
size
) {

1041 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1044  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1047 i‡(
h2c
->
gﬂway
) {

1048 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1050  
	`ngx_hâp_v2_°©e_skù
(
h2c
, 
pos
, 
íd
);

1053 i‡((
size_t
Ë(
íd
 - 
pos
Ë< 
size
) {

1054  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

1055 
ngx_hâp_v2_°©e_hódîs
);

1058 
h2c
->
°©e
.
Àngth
 -
size
;

1060 i‡(
∑dded
) {

1061 
h2c
->
°©e
.
∑ddög
 = *
pos
++;

1063 i‡(
h2c
->
°©e
.
∑ddög
 > h2c->°©e.
Àngth
) {

1064 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1067 
h2c
->
°©e
.
Àngth
, h2c->°©e.
∑ddög
);

1069  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1070 
NGX_HTTP_V2_PROTOCOL_ERROR
);

1073 
h2c
->
°©e
.
Àngth
 -h2c->°©e.
∑ddög
;

1076 
dïíd
 = 0;

1077 
ex˛
 = 0;

1078 
weight
 = 
NGX_HTTP_V2_DEFAULT_WEIGHT
;

1080 i‡(
¥i‹ôy
) {

1081 
dïídícy
 = 
	`ngx_hâp_v2_∑r£_uöt32
(
pos
);

1083 
dïíd
 = 
dïídícy
 & 0x7fffffff;

1084 
ex˛
 = 
dïídícy
 >> 31;

1085 
weight
 = 
pos
[4] + 1;

1087 
pos
 +(
uöt32_t
) + 1;

1090 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1093 
h2c
->
°©e
.
sid
, 
dïíd
, 
ex˛
, 
weight
);

1095 i‡(
h2c
->
°©e
.
sid
 % 2 =0 || h2c->°©e.sid <h2c->
œ°_sid
) {

1096 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1098 "%ui,Åhêœ° wa†%ui", 
h2c
->
°©e
.
sid
, h2c->
œ°_sid
);

1100  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

1103 
h2c
->
œ°_sid
 = h2c->
°©e
.
sid
;

1105 
h2c
->
°©e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, h2c->
c⁄√˘i⁄
->
log
);

1106 i‡(
h2c
->
°©e
.
poﬁ
 =
NULL
) {

1107  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1110 i‡(
dïíd
 =
h2c
->
°©e
.
sid
) {

1111 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1113 "wôh inc‹ª˘ dïídícy", 
h2c
->
°©e
.
sid
);

1115 
°©us
 = 
NGX_HTTP_V2_PROTOCOL_ERROR
;

1116 
r°_°ªam
;

1119 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

1120 
ngx_hâp_v2_moduÀ
);

1122 
h2c
->
°©e
.
hódî_limô
 = 
h2scf
->
max_hódî_size
;

1124 i‡(
h2c
->
¥o˚ssög
 >
h2scf
->
c⁄cuºít_°ªams
) {

1125 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1126 "c⁄cuºíà°ªam†ex˚eded %ui", 
h2c
->
¥o˚ssög
);

1128 
°©us
 = 
NGX_HTTP_V2_REFUSED_STREAM
;

1129 
r°_°ªam
;

1132 i‡(!
h2c
->
£âögs_ack


1133 && !(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_STREAM_FLAG
)

1134 && 
h2scf
->
¥îód_size
 < 
NGX_HTTP_V2_DEFAULT_WINDOW
)

1136 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1140 
°©us
 = 
NGX_HTTP_V2_REFUSED_STREAM
;

1141 
r°_°ªam
;

1144 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 1);

1146 i‡(
node
 =
NULL
) {

1147  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1150 i‡(
node
->
∑ª¡
) {

1151 
	`ngx_queue_ªmove
(&
node
->
ªu£
);

1152 
h2c
->
˛o£d_nodes
--;

1155 
°ªam
 = 
	`ngx_hâp_v2_¸óã_°ªam
(
h2c
, 0);

1156 i‡(
°ªam
 =
NULL
) {

1157  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1160 
h2c
->
°©e
.
°ªam
 = stream;

1162 
°ªam
->
poﬁ
 = 
h2c
->
°©e
.pool;

1163 
h2c
->
°©e
.
kìp_poﬁ
 = 1;

1165 
°ªam
->
ªque°
->
ªque°_Àngth
 = 
h2c
->
°©e
.
Àngth
;

1167 
°ªam
->
ö_˛o£d
 = 
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_STREAM_FLAG
;

1168 
°ªam
->
node
 =Çode;

1170 
node
->
°ªam
 = stream;

1172 i‡(
¥i‹ôy
 || 
node
->
∑ª¡
 =
NULL
) {

1173 
node
->
weight
 = weight;

1174 
	`ngx_hâp_v2_£t_dïídícy
(
h2c
, 
node
, 
dïíd
, 
ex˛
);

1177 i‡(
h2c
->
c⁄√˘i⁄
->
ªque°s
 >
h2scf
->
max_ªque°s
) {

1178 
h2c
->
gﬂway
 = 1;

1180 i‡(
	`ngx_hâp_v2_£nd_gﬂway
(
h2c
, 
NGX_HTTP_V2_NO_ERROR
Ë=
NGX_ERROR
) {

1181  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1182 
NGX_HTTP_V2_INTERNAL_ERROR
);

1186  
	`ngx_hâp_v2_°©e_hódî_block
(
h2c
, 
pos
, 
íd
);

1188 
r°_°ªam
:

1190 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, h2c->
°©e
.
sid
, 
°©us
Ë!
NGX_OK
) {

1191  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1194  
	`ngx_hâp_v2_°©e_hódî_block
(
h2c
, 
pos
, 
íd
);

1195 
	}
}

1198 
u_ch¨
 *

1199 
	$ngx_hâp_v2_°©e_hódî_block
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1200 
u_ch¨
 *
íd
)

1202 
u_ch¨
 
ch
;

1203 
ngx_öt_t
 
vÆue
;

1204 
ngx_uöt_t
 
ödexed
, 
size_upd©e
, 
¥efix
;

1206 i‡(
íd
 - 
pos
 < 1) {

1207  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
,

1208 
ngx_hâp_v2_°©e_hódî_block
);

1211 i‡(!(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
)

1212 && 
h2c
->
°©e
.
Àngth
 < 
NGX_HTTP_V2_INT_OCTETS
)

1214  
	`ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
h2c
, 
pos
, 
íd
,

1215 
ngx_hâp_v2_°©e_hódî_block
);

1218 
size_upd©e
 = 0;

1219 
ödexed
 = 0;

1221 
ch
 = *
pos
;

1223 i‡(
ch
 >= (1 << 7)) {

1225 
ödexed
 = 1;

1226 
¥efix
 = 
	`ngx_hâp_v2_¥efix
(7);

1228 } i‡(
ch
 >= (1 << 6)) {

1230 
h2c
->
°©e
.
ödex
 = 1;

1231 
¥efix
 = 
	`ngx_hâp_v2_¥efix
(6);

1233 } i‡(
ch
 >= (1 << 5)) {

1235 
size_upd©e
 = 1;

1236 
¥efix
 = 
	`ngx_hâp_v2_¥efix
(5);

1238 } i‡(
ch
 >= (1 << 4)) {

1240 
¥efix
 = 
	`ngx_hâp_v2_¥efix
(4);

1244 
¥efix
 = 
	`ngx_hâp_v2_¥efix
(4);

1247 
vÆue
 = 
	`ngx_hâp_v2_∑r£_öt
(
h2c
, &
pos
, 
íd
, 
¥efix
);

1249 i‡(
vÆue
 < 0) {

1250 i‡(
vÆue
 =
NGX_AGAIN
) {

1251  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
,

1252 
ngx_hâp_v2_°©e_hódî_block
);

1255 i‡(
vÆue
 =
NGX_DECLINED
) {

1256 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1258 
size_upd©e
 ? "size update" : "header index");

1260  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_COMP_ERROR
);

1263 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1266  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1269 i‡(
ödexed
) {

1270 i‡(
	`ngx_hâp_v2_gë_ödexed_hódî
(
h2c
, 
vÆue
, 0Ë!
NGX_OK
) {

1271  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_COMP_ERROR
);

1274  
	`ngx_hâp_v2_°©e_¥o˚ss_hódî
(
h2c
, 
pos
, 
íd
);

1277 i‡(
size_upd©e
) {

1278 i‡(
	`ngx_hâp_v2_èbÀ_size
(
h2c
, 
vÆue
Ë!
NGX_OK
) {

1279  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_COMP_ERROR
);

1282  
	`ngx_hâp_v2_°©e_hódî_com∂ëe
(
h2c
, 
pos
, 
íd
);

1285 i‡(
vÆue
 == 0) {

1286 
h2c
->
°©e
.
∑r£_«me
 = 1;

1288 } i‡(
	`ngx_hâp_v2_gë_ödexed_hódî
(
h2c
, 
vÆue
, 1Ë!
NGX_OK
) {

1289  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_COMP_ERROR
);

1292 
h2c
->
°©e
.
∑r£_vÆue
 = 1;

1294  
	`ngx_hâp_v2_°©e_fõld_Àn
(
h2c
, 
pos
, 
íd
);

1295 
	}
}

1298 
u_ch¨
 *

1299 
	$ngx_hâp_v2_°©e_fõld_Àn
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1300 
u_ch¨
 *
íd
)

1302 
size_t
 
Æloc
;

1303 
ngx_öt_t
 
Àn
;

1304 
ngx_uöt_t
 
huff
;

1305 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

1307 i‡(!(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
)

1308 && 
h2c
->
°©e
.
Àngth
 < 
NGX_HTTP_V2_INT_OCTETS
)

1310  
	`ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
h2c
, 
pos
, 
íd
,

1311 
ngx_hâp_v2_°©e_fõld_Àn
);

1314 i‡(
h2c
->
°©e
.
Àngth
 < 1) {

1315 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1318  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1321 i‡(
íd
 - 
pos
 < 1) {

1322  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
,

1323 
ngx_hâp_v2_°©e_fõld_Àn
);

1326 
huff
 = *
pos
 >> 7;

1327 
Àn
 = 
	`ngx_hâp_v2_∑r£_öt
(
h2c
, &
pos
, 
íd
, 
	`ngx_hâp_v2_¥efix
(7));

1329 i‡(
Àn
 < 0) {

1330 i‡(
Àn
 =
NGX_AGAIN
) {

1331  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
,

1332 
ngx_hâp_v2_°©e_fõld_Àn
);

1335 i‡(
Àn
 =
NGX_DECLINED
) {

1336 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1339  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_COMP_ERROR
);

1342 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1345  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1348 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1350 
huff
 ? "ícoded" : "øw", 
Àn
);

1352 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

1353 
ngx_hâp_v2_moduÀ
);

1355 i‡((
size_t
Ë
Àn
 > 
h2scf
->
max_fõld_size
) {

1356 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1359  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_ENHANCE_YOUR_CALM
);

1362 
h2c
->
°©e
.
fõld_ª°
 = 
Àn
;

1364 i‡(
h2c
->
°©e
.
°ªam
 =
NULL
 && !h2c->°©e.
ödex
) {

1365  
	`ngx_hâp_v2_°©e_fõld_skù
(
h2c
, 
pos
, 
íd
);

1368 
Æloc
 = (
huff
 ? 
Àn
 * 8 / 5 :Üen) + 1;

1370 
h2c
->
°©e
.
fõld_°¨t
 = 
	`ngx_≤Æloc
(h2c->°©e.
poﬁ
, 
Æloc
);

1371 i‡(
h2c
->
°©e
.
fõld_°¨t
 =
NULL
) {

1372  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1375 
h2c
->
°©e
.
fõld_íd
 = h2c->°©e.
fõld_°¨t
;

1377 i‡(
huff
) {

1378  
	`ngx_hâp_v2_°©e_fõld_huff
(
h2c
, 
pos
, 
íd
);

1381  
	`ngx_hâp_v2_°©e_fõld_øw
(
h2c
, 
pos
, 
íd
);

1382 
	}
}

1385 
u_ch¨
 *

1386 
	$ngx_hâp_v2_°©e_fõld_huff
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1387 
u_ch¨
 *
íd
)

1389 
size_t
 
size
;

1391 
size
 = 
íd
 - 
pos
;

1393 i‡(
size
 > 
h2c
->
°©e
.
fõld_ª°
) {

1394 
size
 = 
h2c
->
°©e
.
fõld_ª°
;

1397 i‡(
size
 > 
h2c
->
°©e
.
Àngth
) {

1398 
size
 = 
h2c
->
°©e
.
Àngth
;

1401 
h2c
->
°©e
.
Àngth
 -
size
;

1402 
h2c
->
°©e
.
fõld_ª°
 -
size
;

1404 i‡(
	`ngx_hâp_v2_huff_decode
(&
h2c
->
°©e
.
fõld_°©e
, 
pos
, 
size
,

1405 &
h2c
->
°©e
.
fõld_íd
,

1406 
h2c
->
°©e
.
fõld_ª°
 == 0,

1407 
h2c
->
c⁄√˘i⁄
->
log
)

1408 !
NGX_OK
)

1410 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1413  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_COMP_ERROR
);

1416 
pos
 +
size
;

1418 i‡(
h2c
->
°©e
.
fõld_ª°
 == 0) {

1419 *
h2c
->
°©e
.
fõld_íd
 = '\0';

1420  
	`ngx_hâp_v2_°©e_¥o˚ss_hódî
(
h2c
, 
pos
, 
íd
);

1423 i‡(
h2c
->
°©e
.
Àngth
) {

1424  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
,

1425 
ngx_hâp_v2_°©e_fõld_huff
);

1428 i‡(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
) {

1429 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1432  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1435  
	`ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
h2c
, 
pos
, 
íd
,

1436 
ngx_hâp_v2_°©e_fõld_huff
);

1437 
	}
}

1440 
u_ch¨
 *

1441 
	$ngx_hâp_v2_°©e_fõld_øw
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1442 
u_ch¨
 *
íd
)

1444 
size_t
 
size
;

1446 
size
 = 
íd
 - 
pos
;

1448 i‡(
size
 > 
h2c
->
°©e
.
fõld_ª°
) {

1449 
size
 = 
h2c
->
°©e
.
fõld_ª°
;

1452 i‡(
size
 > 
h2c
->
°©e
.
Àngth
) {

1453 
size
 = 
h2c
->
°©e
.
Àngth
;

1456 
h2c
->
°©e
.
Àngth
 -
size
;

1457 
h2c
->
°©e
.
fõld_ª°
 -
size
;

1459 
h2c
->
°©e
.
fõld_íd
 = 
	`ngx_˝ymem
(h2c->°©e.fõld_íd, 
pos
, 
size
);

1461 
pos
 +
size
;

1463 i‡(
h2c
->
°©e
.
fõld_ª°
 == 0) {

1464 *
h2c
->
°©e
.
fõld_íd
 = '\0';

1465  
	`ngx_hâp_v2_°©e_¥o˚ss_hódî
(
h2c
, 
pos
, 
íd
);

1468 i‡(
h2c
->
°©e
.
Àngth
) {

1469  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
,

1470 
ngx_hâp_v2_°©e_fõld_øw
);

1473 i‡(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
) {

1474 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1477  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1480  
	`ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
h2c
, 
pos
, 
íd
,

1481 
ngx_hâp_v2_°©e_fõld_øw
);

1482 
	}
}

1485 
u_ch¨
 *

1486 
	$ngx_hâp_v2_°©e_fõld_skù
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1487 
u_ch¨
 *
íd
)

1489 
size_t
 
size
;

1491 
size
 = 
íd
 - 
pos
;

1493 i‡(
size
 > 
h2c
->
°©e
.
fõld_ª°
) {

1494 
size
 = 
h2c
->
°©e
.
fõld_ª°
;

1497 i‡(
size
 > 
h2c
->
°©e
.
Àngth
) {

1498 
size
 = 
h2c
->
°©e
.
Àngth
;

1501 
h2c
->
°©e
.
Àngth
 -
size
;

1502 
h2c
->
°©e
.
fõld_ª°
 -
size
;

1504 
pos
 +
size
;

1506 i‡(
h2c
->
°©e
.
fõld_ª°
 == 0) {

1507  
	`ngx_hâp_v2_°©e_¥o˚ss_hódî
(
h2c
, 
pos
, 
íd
);

1510 i‡(
h2c
->
°©e
.
Àngth
) {

1511  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

1512 
ngx_hâp_v2_°©e_fõld_skù
);

1515 i‡(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
) {

1516 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1519  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1522  
	`ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
h2c
, 
pos
, 
íd
,

1523 
ngx_hâp_v2_°©e_fõld_skù
);

1524 
	}
}

1527 
u_ch¨
 *

1528 
	$ngx_hâp_v2_°©e_¥o˚ss_hódî
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1529 
u_ch¨
 *
íd
)

1531 
size_t
 
Àn
;

1532 
ngx_öt_t
 
rc
;

1533 
ngx_èbÀ_ñt_t
 *
h
;

1534 
ngx_hâp_hódî_t
 *
hh
;

1535 
ngx_hâp_ªque°_t
 *
r
;

1536 
ngx_hâp_v2_hódî_t
 *
hódî
;

1537 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1538 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1540 
ngx_°r_t
 
cookõ
 = 
	`ngx_°rög
("cookie");

1542 
hódî
 = &
h2c
->
°©e
.header;

1544 i‡(
h2c
->
°©e
.
∑r£_«me
) {

1545 
h2c
->
°©e
.
∑r£_«me
 = 0;

1547 
hódî
->
«me
.
Àn
 = 
h2c
->
°©e
.
fõld_íd
 - h2c->°©e.
fõld_°¨t
;

1548 
hódî
->
«me
.
d©a
 = 
h2c
->
°©e
.
fõld_°¨t
;

1550  
	`ngx_hâp_v2_°©e_fõld_Àn
(
h2c
, 
pos
, 
íd
);

1553 i‡(
h2c
->
°©e
.
∑r£_vÆue
) {

1554 
h2c
->
°©e
.
∑r£_vÆue
 = 0;

1556 
hódî
->
vÆue
.
Àn
 = 
h2c
->
°©e
.
fõld_íd
 - h2c->°©e.
fõld_°¨t
;

1557 
hódî
->
vÆue
.
d©a
 = 
h2c
->
°©e
.
fõld_°¨t
;

1560 
Àn
 = 
hódî
->
«me
.À¿+ hódî->
vÆue
.len;

1562 i‡(
Àn
 > 
h2c
->
°©e
.
hódî_limô
) {

1563 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1566  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_ENHANCE_YOUR_CALM
);

1569 
h2c
->
°©e
.
hódî_limô
 -
Àn
;

1571 i‡(
h2c
->
°©e
.
ödex
) {

1572 i‡(
	`ngx_hâp_v2_add_hódî
(
h2c
, 
hódî
Ë!
NGX_OK
) {

1573  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1574 
NGX_HTTP_V2_INTERNAL_ERROR
);

1577 
h2c
->
°©e
.
ödex
 = 0;

1580 i‡(
h2c
->
°©e
.
°ªam
 =
NULL
) {

1581  
	`ngx_hâp_v2_°©e_hódî_com∂ëe
(
h2c
, 
pos
, 
íd
);

1584 
r
 = 
h2c
->
°©e
.
°ªam
->
ªque°
;

1587 i‡(
	`ngx_hâp_v2_vÆid©e_hódî
(
r
, 
hódî
Ë!
NGX_OK
) {

1588 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, h2c->
°©e
.
°ªam
,

1589 
NGX_HTTP_V2_PROTOCOL_ERROR
)

1590 =
NGX_ERROR
)

1592  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1593 
NGX_HTTP_V2_INTERNAL_ERROR
);

1596 
îr‹
;

1599 i‡(
hódî
->
«me
.
d©a
[0] == ':') {

1600 
rc
 = 
	`ngx_hâp_v2_p£udo_hódî
(
r
, 
hódî
);

1602 i‡(
rc
 =
NGX_OK
) {

1603 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1605 &
hódî
->
«me
, &hódî->
vÆue
);

1607  
	`ngx_hâp_v2_°©e_hódî_com∂ëe
(
h2c
, 
pos
, 
íd
);

1610 i‡(
rc
 =
NGX_ABORT
) {

1611 
îr‹
;

1614 i‡(
rc
 =
NGX_DECLINED
) {

1615 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1616 
îr‹
;

1619  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1622 i‡(
r
->
övÆid_hódî
) {

1623 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1625 i‡(
cscf
->
ign‹e_övÆid_hódîs
) {

1626 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1627 "˛õ¡ síàövÆid hódî: \"%V\"", &
hódî
->
«me
);

1629  
	`ngx_hâp_v2_°©e_hódî_com∂ëe
(
h2c
, 
pos
, 
íd
);

1633 i‡(
hódî
->
«me
.
Àn
 =
cookõ
.len

1634 && 
	`ngx_memcmp
(
hódî
->
«me
.
d©a
, 
cookõ
.d©a, cookõ.
Àn
) == 0)

1636 i‡(
	`ngx_hâp_v2_cookõ
(
r
, 
hódî
Ë!
NGX_OK
) {

1637  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1638 
NGX_HTTP_V2_INTERNAL_ERROR
);

1642 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1643 i‡(
h
 =
NULL
) {

1644  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1645 
NGX_HTTP_V2_INTERNAL_ERROR
);

1648 
h
->
key
.
Àn
 = 
hódî
->
«me
.len;

1649 
h
->
key
.
d©a
 = 
hódî
->
«me
.data;

1655 
h
->
hash
 = 
	`ngx_hash_key
(h->
key
.
d©a
, h->key.
Àn
);

1657 
h
->
vÆue
.
Àn
 = 
hódî
->value.len;

1658 
h
->
vÆue
.
d©a
 = 
hódî
->value.data;

1660 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

1662 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1664 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1665 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1667 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1668 
îr‹
;

1672 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1674 &
hódî
->
«me
, &hódî->
vÆue
);

1676  
	`ngx_hâp_v2_°©e_hódî_com∂ëe
(
h2c
, 
pos
, 
íd
);

1678 
îr‹
:

1680 
h2c
->
°©e
.
°ªam
 = 
NULL
;

1682  
	`ngx_hâp_v2_°©e_hódî_com∂ëe
(
h2c
, 
pos
, 
íd
);

1683 
	}
}

1686 
u_ch¨
 *

1687 
	$ngx_hâp_v2_°©e_hódî_com∂ëe
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1688 
u_ch¨
 *
íd
)

1690 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1692 i‡(
h2c
->
°©e
.
Àngth
) {

1693 
h2c
->
°©e
.
h™dÀr
 = 
ngx_hâp_v2_°©e_hódî_block
;

1694  
pos
;

1697 i‡(!(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_END_HEADERS_FLAG
)) {

1698  
	`ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
h2c
, 
pos
, 
íd
,

1699 
ngx_hâp_v2_°©e_hódî_com∂ëe
);

1702 
°ªam
 = 
h2c
->
°©e
.stream;

1704 i‡(
°ªam
) {

1705 
	`ngx_hâp_v2_run_ªque°
(
°ªam
->
ªque°
);

1708 i‡(!
h2c
->
°©e
.
kìp_poﬁ
) {

1709 
	`ngx_de°roy_poﬁ
(
h2c
->
°©e
.
poﬁ
);

1712 
h2c
->
°©e
.
poﬁ
 = 
NULL
;

1713 
h2c
->
°©e
.
kìp_poﬁ
 = 0;

1715 i‡(
h2c
->
°©e
.
∑ddög
) {

1716  
	`ngx_hâp_v2_°©e_skù_∑dded
(
h2c
, 
pos
, 
íd
);

1719  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1720 
	}
}

1723 
u_ch¨
 *

1724 
	$ngx_hâp_v2_h™dÀ_c⁄töu©i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1725 
u_ch¨
 *
íd
, 
ngx_hâp_v2_h™dÀr_±
 
h™dÀr
)

1727 
u_ch¨
 *
p
;

1728 
size_t
 
Àn
, 
skù
;

1729 
uöt32_t
 
hód
;

1731 
Àn
 = 
h2c
->
°©e
.
Àngth
;

1733 i‡(
h2c
->
°©e
.
∑ddög
 && (
size_t
Ë(
íd
 - 
pos
Ë> 
Àn
) {

1734 
skù
 = 
	`ngx_mö
(
h2c
->
°©e
.
∑ddög
, (
íd
 - 
pos
Ë- 
Àn
);

1736 
h2c
->
°©e
.
∑ddög
 -
skù
;

1738 
p
 = 
pos
;

1739 
pos
 +
skù
;

1740 
	`ngx_memmove
(
pos
, 
p
, 
Àn
);

1743 i‡((
size_t
Ë(
íd
 - 
pos
Ë< 
Àn
 + 
NGX_HTTP_V2_FRAME_HEADER_SIZE
) {

1744  
	`ngx_hâp_v2_°©e_hódîs_ßve
(
h2c
, 
pos
, 
íd
, 
h™dÀr
);

1747 
p
 = 
pos
 + 
Àn
;

1749 
hód
 = 
	`ngx_hâp_v2_∑r£_uöt32
(
p
);

1751 i‡(
	`ngx_hâp_v2_∑r£_ty≥
(
hód
Ë!
NGX_HTTP_V2_CONTINUATION_FRAME
) {

1752 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1755  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

1758 
h2c
->
°©e
.
Êags
 |
p
[4];

1760 i‡(
h2c
->
°©e
.
sid
 !
	`ngx_hâp_v2_∑r£_sid
(&
p
[5])) {

1761 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1764  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

1767 
p
 = 
pos
;

1768 
pos
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE
;

1770 
	`ngx_mem˝y
(
pos
, 
p
, 
Àn
);

1772 
Àn
 = 
	`ngx_hâp_v2_∑r£_Àngth
(
hód
);

1774 
h2c
->
°©e
.
Àngth
 +
Àn
;

1776 i‡(
h2c
->
°©e
.
°ªam
) {

1777 
h2c
->
°©e
.
°ªam
->
ªque°
->
ªque°_Àngth
 +
Àn
;

1780 
h2c
->
°©e
.
h™dÀr
 = handler;

1781  
pos
;

1782 
	}
}

1785 
u_ch¨
 *

1786 
	$ngx_hâp_v2_°©e_¥i‹ôy
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1787 
u_ch¨
 *
íd
)

1789 
ngx_uöt_t
 
dïíd
, 
dïídícy
, 
ex˛
, 
weight
;

1790 
ngx_hâp_v2_node_t
 *
node
;

1792 i‡(
h2c
->
°©e
.
Àngth
 !
NGX_HTTP_V2_PRIORITY_SIZE
) {

1793 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1795 
h2c
->
°©e
.
Àngth
);

1797  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1800 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_PRIORITY_SIZE
) {

1801  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

1802 
ngx_hâp_v2_°©e_¥i‹ôy
);

1805 
dïídícy
 = 
	`ngx_hâp_v2_∑r£_uöt32
(
pos
);

1807 
dïíd
 = 
dïídícy
 & 0x7fffffff;

1808 
ex˛
 = 
dïídícy
 >> 31;

1809 
weight
 = 
pos
[4] + 1;

1811 
pos
 +
NGX_HTTP_V2_PRIORITY_SIZE
;

1813 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1816 
h2c
->
°©e
.
sid
, 
dïíd
, 
ex˛
, 
weight
);

1818 i‡(
h2c
->
°©e
.
sid
 == 0) {

1819 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1822  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

1825 i‡(
dïíd
 =
h2c
->
°©e
.
sid
) {

1826 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1828 "wôh inc‹ª˘ dïídícy", 
h2c
->
°©e
.
sid
);

1830 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 0);

1832 i‡(
node
 &&Çode->
°ªam
) {

1833 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, 
node
->
°ªam
,

1834 
NGX_HTTP_V2_PROTOCOL_ERROR
)

1835 =
NGX_ERROR
)

1837  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1838 
NGX_HTTP_V2_INTERNAL_ERROR
);

1842 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, h2c->
°©e
.
sid
,

1843 
NGX_HTTP_V2_PROTOCOL_ERROR
)

1844 =
NGX_ERROR
)

1846  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

1847 
NGX_HTTP_V2_INTERNAL_ERROR
);

1851  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1854 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 1);

1856 i‡(
node
 =
NULL
) {

1857  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

1860 
node
->
weight
 = weight;

1862 i‡(
node
->
°ªam
 =
NULL
) {

1863 i‡(
node
->
∑ª¡
 =
NULL
) {

1864 
h2c
->
˛o£d_nodes
++;

1867 
	`ngx_queue_ªmove
(&
node
->
ªu£
);

1870 
	`ngx_queue_ö£π_èû
(&
h2c
->
˛o£d
, &
node
->
ªu£
);

1873 
	`ngx_hâp_v2_£t_dïídícy
(
h2c
, 
node
, 
dïíd
, 
ex˛
);

1875  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1876 
	}
}

1879 
u_ch¨
 *

1880 
	$ngx_hâp_v2_°©e_r°_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1881 
u_ch¨
 *
íd
)

1883 
ngx_uöt_t
 
°©us
;

1884 
ngx_evít_t
 *
ev
;

1885 
ngx_c⁄√˘i⁄_t
 *
fc
;

1886 
ngx_hâp_v2_node_t
 *
node
;

1887 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1889 i‡(
h2c
->
°©e
.
Àngth
 !
NGX_HTTP_V2_RST_STREAM_SIZE
) {

1890 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1892 
h2c
->
°©e
.
Àngth
);

1894  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1897 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_RST_STREAM_SIZE
) {

1898  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

1899 
ngx_hâp_v2_°©e_r°_°ªam
);

1902 
°©us
 = 
	`ngx_hâp_v2_∑r£_uöt32
(
pos
);

1904 
pos
 +
NGX_HTTP_V2_RST_STREAM_SIZE
;

1906 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1908 
h2c
->
°©e
.
sid
, 
°©us
);

1910 i‡(
h2c
->
°©e
.
sid
 == 0) {

1911 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1914  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

1917 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 0);

1919 i‡(
node
 =
NULL
 ||Çode->
°ªam
 == NULL) {

1920 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1923  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1926 
°ªam
 = 
node
->stream;

1928 
°ªam
->
ö_˛o£d
 = 1;

1929 
°ªam
->
out_˛o£d
 = 1;

1931 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

1932 
fc
->
îr‹
 = 1;

1934 
°©us
) {

1936 
NGX_HTTP_V2_CANCEL
:

1937 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1938 "˛õ¡ c™˚Àd såóm %ui", 
h2c
->
°©e
.
sid
);

1941 
NGX_HTTP_V2_REFUSED_STREAM
:

1942 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1943 "˛õ¡Ñefu£d såóm %ui", 
h2c
->
°©e
.
sid
);

1946 
NGX_HTTP_V2_INTERNAL_ERROR
:

1947 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1949 
h2c
->
°©e
.
sid
);

1953 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1955 
h2c
->
°©e
.
sid
, 
°©us
);

1959 
ev
 = 
fc
->
ªad
;

1960 
ev
->
	`h™dÀr
(ev);

1962  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1963 
	}
}

1966 
u_ch¨
 *

1967 
	$ngx_hâp_v2_°©e_£âögs
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

1968 
u_ch¨
 *
íd
)

1970 i‡(
h2c
->
°©e
.
Êags
 =
NGX_HTTP_V2_ACK_FLAG
) {

1972 i‡(
h2c
->
°©e
.
Àngth
 != 0) {

1973 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1977  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1980 
h2c
->
£âögs_ack
 = 1;

1982  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

1985 i‡(
h2c
->
°©e
.
Àngth
 % 
NGX_HTTP_V2_SETTINGS_PARAM_SIZE
) {

1986 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1988 
h2c
->
°©e
.
Àngth
);

1990  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

1993 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1996  
	`ngx_hâp_v2_°©e_£âögs_∑øms
(
h2c
, 
pos
, 
íd
);

1997 
	}
}

2000 
u_ch¨
 *

2001 
	$ngx_hâp_v2_°©e_£âögs_∑øms
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2002 
u_ch¨
 *
íd
)

2004 
ssize_t
 
wödow_dñè
;

2005 
ngx_uöt_t
 
id
, 
vÆue
;

2006 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

2007 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2009 
wödow_dñè
 = 0;

2011 
h2c
->
°©e
.
Àngth
) {

2012 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_SETTINGS_PARAM_SIZE
) {

2013  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

2014 
ngx_hâp_v2_°©e_£âögs_∑øms
);

2017 
h2c
->
°©e
.
Àngth
 -
NGX_HTTP_V2_SETTINGS_PARAM_SIZE
;

2019 
id
 = 
	`ngx_hâp_v2_∑r£_uöt16
(
pos
);

2020 
vÆue
 = 
	`ngx_hâp_v2_∑r£_uöt32
(&
pos
[2]);

2022 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2023 "hâp2 sëtög %ui:%ui", 
id
, 
vÆue
);

2025 
id
) {

2027 
NGX_HTTP_V2_INIT_WINDOW_SIZE_SETTING
:

2029 i‡(
vÆue
 > 
NGX_HTTP_V2_MAX_WINDOW
) {

2030 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2032 "INITIAL_WINDOW_SIZE vÆuê%ui", 
vÆue
);

2034  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2035 
NGX_HTTP_V2_FLOW_CTRL_ERROR
);

2038 
wödow_dñè
 = 
vÆue
 - 
h2c
->
öô_wödow
;

2041 
NGX_HTTP_V2_MAX_FRAME_SIZE_SETTING
:

2043 i‡(
vÆue
 > 
NGX_HTTP_V2_MAX_FRAME_SIZE


2044 || 
vÆue
 < 
NGX_HTTP_V2_DEFAULT_FRAME_SIZE
)

2046 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2048 "MAX_FRAME_SIZE vÆuê%ui", 
vÆue
);

2050  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2051 
NGX_HTTP_V2_PROTOCOL_ERROR
);

2054 
h2c
->
‰ame_size
 = 
vÆue
;

2057 
NGX_HTTP_V2_ENABLE_PUSH_SETTING
:

2059 i‡(
vÆue
 > 1) {

2060 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2062 "ENABLE_PUSH vÆuê%ui", 
vÆue
);

2064  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2065 
NGX_HTTP_V2_PROTOCOL_ERROR
);

2068 
h2c
->
push_dißbÀd
 = !
vÆue
;

2071 
NGX_HTTP_V2_MAX_STREAMS_SETTING
:

2072 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2073 
ngx_hâp_v2_moduÀ
);

2075 
h2c
->
c⁄cuºít_pushes
 = 
	`ngx_mö
(
vÆue
, 
h2scf
->concurrent_pushes);

2082 
pos
 +
NGX_HTTP_V2_SETTINGS_PARAM_SIZE
;

2085 
‰ame
 = 
	`ngx_hâp_v2_gë_‰ame
(
h2c
, 
NGX_HTTP_V2_SETTINGS_ACK_SIZE
,

2086 
NGX_HTTP_V2_SETTINGS_FRAME
,

2087 
NGX_HTTP_V2_ACK_FLAG
, 0);

2088 i‡(
‰ame
 =
NULL
) {

2089  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

2092 
	`ngx_hâp_v2_queue_‹dîed_‰ame
(
h2c
, 
‰ame
);

2094 i‡(
wödow_dñè
) {

2095 
h2c
->
öô_wödow
 +
wödow_dñè
;

2097 i‡(
	`ngx_hâp_v2_adju°_wödows
(
h2c
, 
wödow_dñè
Ë!
NGX_OK
) {

2098  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2099 
NGX_HTTP_V2_INTERNAL_ERROR
);

2103  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

2104 
	}
}

2107 
u_ch¨
 *

2108 
	$ngx_hâp_v2_°©e_push_¥omi£
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2109 
u_ch¨
 *
íd
)

2111 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2114  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

2115 
	}
}

2118 
u_ch¨
 *

2119 
	$ngx_hâp_v2_°©e_pög
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
)

2121 
ngx_buf_t
 *
buf
;

2122 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2124 i‡(
h2c
->
°©e
.
Àngth
 !
NGX_HTTP_V2_PING_SIZE
) {

2125 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2127 
h2c
->
°©e
.
Àngth
);

2129  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

2132 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_PING_SIZE
) {

2133  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
, 
ngx_hâp_v2_°©e_pög
);

2136 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2139 i‡(
h2c
->
°©e
.
Êags
 & 
NGX_HTTP_V2_ACK_FLAG
) {

2140  
	`ngx_hâp_v2_°©e_skù
(
h2c
, 
pos
, 
íd
);

2143 
‰ame
 = 
	`ngx_hâp_v2_gë_‰ame
(
h2c
, 
NGX_HTTP_V2_PING_SIZE
,

2144 
NGX_HTTP_V2_PING_FRAME
,

2145 
NGX_HTTP_V2_ACK_FLAG
, 0);

2146 i‡(
‰ame
 =
NULL
) {

2147  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

2150 
buf
 = 
‰ame
->
fú°
->buf;

2152 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->œ°, 
pos
, 
NGX_HTTP_V2_PING_SIZE
);

2154 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

2156  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
 + 
NGX_HTTP_V2_PING_SIZE
, 
íd
);

2157 
	}
}

2160 
u_ch¨
 *

2161 
	$ngx_hâp_v2_°©e_gﬂway
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2162 
u_ch¨
 *
íd
)

2164 #i‡(
NGX_DEBUG
)

2165 
ngx_uöt_t
 
œ°_sid
, 
îr‹
;

2168 i‡(
h2c
->
°©e
.
Àngth
 < 
NGX_HTTP_V2_GOAWAY_SIZE
) {

2169 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2171 "wôh inc‹ª˘Üígth %uz", 
h2c
->
°©e
.
Àngth
);

2173  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

2176 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_GOAWAY_SIZE
) {

2177  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
, 
ngx_hâp_v2_°©e_gﬂway
);

2180 #i‡(
NGX_DEBUG
)

2181 
h2c
->
°©e
.
Àngth
 -
NGX_HTTP_V2_GOAWAY_SIZE
;

2183 
œ°_sid
 = 
	`ngx_hâp_v2_∑r£_sid
(
pos
);

2184 
îr‹
 = 
	`ngx_hâp_v2_∑r£_uöt32
(&
pos
[4]);

2186 
pos
 +
NGX_HTTP_V2_GOAWAY_SIZE
;

2188 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2190 
œ°_sid
, 
îr‹
);

2193  
	`ngx_hâp_v2_°©e_skù
(
h2c
, 
pos
, 
íd
);

2194 
	}
}

2197 
u_ch¨
 *

2198 
	$ngx_hâp_v2_°©e_wödow_upd©e
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2199 
u_ch¨
 *
íd
)

2201 
size_t
 
wödow
;

2202 
ngx_evít_t
 *
wev
;

2203 
ngx_queue_t
 *
q
;

2204 
ngx_hâp_v2_node_t
 *
node
;

2205 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

2207 i‡(
h2c
->
°©e
.
Àngth
 !
NGX_HTTP_V2_WINDOW_UPDATE_SIZE
) {

2208 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2210 "wôh inc‹ª˘Üígth %uz", 
h2c
->
°©e
.
Àngth
);

2212  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_SIZE_ERROR
);

2215 i‡(
íd
 - 
pos
 < 
NGX_HTTP_V2_WINDOW_UPDATE_SIZE
) {

2216  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
,

2217 
ngx_hâp_v2_°©e_wödow_upd©e
);

2220 
wödow
 = 
	`ngx_hâp_v2_∑r£_wödow
(
pos
);

2222 
pos
 +
NGX_HTTP_V2_WINDOW_UPDATE_SIZE
;

2224 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2226 
h2c
->
°©e
.
sid
, 
wödow
);

2228 i‡(
wödow
 == 0) {

2229 i‡(
h2c
->
°©e
.
sid
 == 0) {

2230 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2234  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2235 
NGX_HTTP_V2_PROTOCOL_ERROR
);

2238 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2240 "wôh inc‹ª˘ wödow in¸emíà0", 
h2c
->
°©e
.
sid
);

2242 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 0);

2244 i‡(
node
 &&Çode->
°ªam
) {

2245 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, 
node
->
°ªam
,

2246 
NGX_HTTP_V2_PROTOCOL_ERROR
)

2247 =
NGX_ERROR
)

2249  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2250 
NGX_HTTP_V2_INTERNAL_ERROR
);

2254 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, h2c->
°©e
.
sid
,

2255 
NGX_HTTP_V2_PROTOCOL_ERROR
)

2256 =
NGX_ERROR
)

2258  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2259 
NGX_HTTP_V2_INTERNAL_ERROR
);

2263  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

2266 i‡(
h2c
->
°©e
.
sid
) {

2267 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
°©e
.
sid
, 0);

2269 i‡(
node
 =
NULL
 ||Çode->
°ªam
 == NULL) {

2270 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2273  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

2276 
°ªam
 = 
node
->stream;

2278 i‡(
wödow
 > (
size_t
Ë(
NGX_HTTP_V2_MAX_WINDOW
 - 
°ªam
->
£nd_wödow
)) {

2280 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2285 
h2c
->
°©e
.
sid
, 
wödow
, 
°ªam
->
£nd_wödow
);

2287 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, 
°ªam
,

2288 
NGX_HTTP_V2_FLOW_CTRL_ERROR
)

2289 =
NGX_ERROR
)

2291  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
,

2292 
NGX_HTTP_V2_INTERNAL_ERROR
);

2295  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

2298 
°ªam
->
£nd_wödow
 +
wödow
;

2300 i‡(
°ªam
->
exhau°ed
) {

2301 
°ªam
->
exhau°ed
 = 0;

2303 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

2305 
wev
->
a˘ive
 = 0;

2306 
wev
->
ªady
 = 1;

2308 i‡(!
wev
->
dñayed
) {

2309 
wev
->
	`h™dÀr
(wev);

2313  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

2316 i‡(
wödow
 > 
NGX_HTTP_V2_MAX_WINDOW
 - 
h2c
->
£nd_wödow
) {

2317 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2322 
wödow
, 
h2c
->
£nd_wödow
);

2324  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_FLOW_CTRL_ERROR
);

2327 
h2c
->
£nd_wödow
 +
wödow
;

2329 !
	`ngx_queue_em±y
(&
h2c
->
waôög
)) {

2330 
q
 = 
	`ngx_queue_hód
(&
h2c
->
waôög
);

2332 
	`ngx_queue_ªmove
(
q
);

2334 
°ªam
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_°ªam_t
, 
queue
);

2336 
°ªam
->
waôög
 = 0;

2338 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

2340 
wev
->
a˘ive
 = 0;

2341 
wev
->
ªady
 = 1;

2343 i‡(!
wev
->
dñayed
) {

2344 
wev
->
	`h™dÀr
(wev);

2346 i‡(
h2c
->
£nd_wödow
 == 0) {

2352  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
, 
íd
);

2353 
	}
}

2356 
u_ch¨
 *

2357 
	$ngx_hâp_v2_°©e_c⁄töu©i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2358 
u_ch¨
 *
íd
)

2360 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2363  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_PROTOCOL_ERROR
);

2364 
	}
}

2367 
u_ch¨
 *

2368 
	$ngx_hâp_v2_°©e_com∂ëe
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2369 
u_ch¨
 *
íd
)

2371 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2372 "hâp2 fømêcom∂ëêpos:%∞íd:%p", 
pos
, 
íd
);

2374 i‡(
pos
 > 
íd
) {

2375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2378  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

2381 
h2c
->
°©e
.
°ªam
 = 
NULL
;

2382 
h2c
->
°©e
.
h™dÀr
 = 
ngx_hâp_v2_°©e_hód
;

2384  
pos
;

2385 
	}
}

2388 
u_ch¨
 *

2389 
	$ngx_hâp_v2_°©e_skù_∑dded
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2390 
u_ch¨
 *
íd
)

2392 
h2c
->
°©e
.
Àngth
 +h2c->°©e.
∑ddög
;

2393 
h2c
->
°©e
.
∑ddög
 = 0;

2395  
	`ngx_hâp_v2_°©e_skù
(
h2c
, 
pos
, 
íd
);

2396 
	}
}

2399 
u_ch¨
 *

2400 
	$ngx_hâp_v2_°©e_skù
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
)

2402 
size_t
 
size
;

2404 
size
 = 
íd
 - 
pos
;

2406 i‡(
size
 < 
h2c
->
°©e
.
Àngth
) {

2407 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2408 "hâp2 fømêskù %uz o‡%uz", 
size
, 
h2c
->
°©e
.
Àngth
);

2410 
h2c
->
°©e
.
Àngth
 -
size
;

2411  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
íd
,Énd, 
ngx_hâp_v2_°©e_skù
);

2414 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2415 "hâp2 fømêskù %uz", 
h2c
->
°©e
.
Àngth
);

2417  
	`ngx_hâp_v2_°©e_com∂ëe
(
h2c
, 
pos
 + h2c->
°©e
.
Àngth
, 
íd
);

2418 
	}
}

2421 
u_ch¨
 *

2422 
	$ngx_hâp_v2_°©e_ßve
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
,

2423 
ngx_hâp_v2_h™dÀr_±
 
h™dÀr
)

2425 
size_t
 
size
;

2427 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2429 
pos
, 
íd
, 
h™dÀr
);

2431 
size
 = 
íd
 - 
pos
;

2433 i‡(
size
 > 
NGX_HTTP_V2_STATE_BUFFER_SIZE
) {

2434 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2435 "°©êbuf„∏ovîÊow: %uz byã†ªquúed", 
size
);

2437  
	`ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

2440 
	`ngx_mem˝y
(
h2c
->
°©e
.
buf„r
, 
pos
, 
NGX_HTTP_V2_STATE_BUFFER_SIZE
);

2442 
h2c
->
°©e
.
buf„r_u£d
 = 
size
;

2443 
h2c
->
°©e
.
h™dÀr
 = handler;

2444 
h2c
->
°©e
.
öcom∂ëe
 = 1;

2446  
íd
;

2447 
	}
}

2450 
u_ch¨
 *

2451 
	$ngx_hâp_v2_°©e_hódîs_ßve
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 *
pos
,

2452 
u_ch¨
 *
íd
, 
ngx_hâp_v2_h™dÀr_±
 
h™dÀr
)

2454 
ngx_evít_t
 *
ªv
;

2455 
ngx_hâp_ªque°_t
 *
r
;

2456 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2458 i‡(
h2c
->
°©e
.
°ªam
) {

2459 
r
 = 
h2c
->
°©e
.
°ªam
->
ªque°
;

2460 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

2462 i‡(!
ªv
->
timî_£t
) {

2463 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2464 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

2468  
	`ngx_hâp_v2_°©e_ßve
(
h2c
, 
pos
, 
íd
, 
h™dÀr
);

2469 
	}
}

2472 
u_ch¨
 *

2473 
	$ngx_hâp_v2_c⁄√˘i⁄_îr‹
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

2474 
ngx_uöt_t
 
îr
)

2476 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2479 i‡(
îr
 =
NGX_HTTP_V2_INTERNAL_ERROR
) {

2480 
	`ngx_debug_poöt
();

2483 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 
îr
);

2485  
NULL
;

2486 
	}
}

2489 
ngx_öt_t


2490 
	$ngx_hâp_v2_∑r£_öt
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
u_ch¨
 **
pos
, u_ch¨ *
íd
,

2491 
ngx_uöt_t
 
¥efix
)

2493 
u_ch¨
 *
°¨t
, *
p
;

2494 
ngx_uöt_t
 
vÆue
, 
o˘ë
, 
shi·
;

2496 
°¨t
 = *
pos
;

2497 
p
 = 
°¨t
;

2499 
vÆue
 = *
p
++ & 
¥efix
;

2501 i‡(
vÆue
 !
¥efix
) {

2502 i‡(
h2c
->
°©e
.
Àngth
 == 0) {

2503  
NGX_ERROR
;

2506 
h2c
->
°©e
.
Àngth
--;

2508 *
pos
 = 
p
;

2509  
vÆue
;

2512 i‡(
íd
 - 
°¨t
 > 
NGX_HTTP_V2_INT_OCTETS
) {

2513 
íd
 = 
°¨t
 + 
NGX_HTTP_V2_INT_OCTETS
;

2516 
shi·
 = 0; 
p
 !
íd
; shift += 7) {

2517 
o˘ë
 = *
p
++;

2519 
vÆue
 +(
o˘ë
 & 0x7fË<< 
shi·
;

2521 i‡(
o˘ë
 < 128) {

2522 i‡((
size_t
Ë(
p
 - 
°¨t
Ë> 
h2c
->
°©e
.
Àngth
) {

2523  
NGX_ERROR
;

2526 
h2c
->
°©e
.
Àngth
 -
p
 - 
°¨t
;

2528 *
pos
 = 
p
;

2529  
vÆue
;

2533 i‡((
size_t
Ë(
íd
 - 
°¨t
Ë>
h2c
->
°©e
.
Àngth
) {

2534  
NGX_ERROR
;

2537 i‡(
íd
 =
°¨t
 + 
NGX_HTTP_V2_INT_OCTETS
) {

2538  
NGX_DECLINED
;

2541  
NGX_AGAIN
;

2542 
	}
}

2545 
ngx_hâp_v2_°ªam_t
 *

2546 
	$ngx_hâp_v2_push_°ªam
(
ngx_hâp_v2_°ªam_t
 *
∑ª¡
, 
ngx_°r_t
 *
∑th
)

2548 
ngx_öt_t
 
rc
;

2549 
ngx_°r_t
 
vÆue
;

2550 
ngx_poﬁ_t
 *
poﬁ
;

2551 
ngx_uöt_t
 
ödex
;

2552 
ngx_èbÀ_ñt_t
 **
h
;

2553 
ngx_c⁄√˘i⁄_t
 *
fc
;

2554 
ngx_hâp_ªque°_t
 *
r
;

2555 
ngx_hâp_v2_node_t
 *
node
;

2556 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

2557 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

2558 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

2559 
ngx_hâp_v2_∑r£_hódî_t
 *
hódî
;

2561 
h2c
 = 
∑ª¡
->
c⁄√˘i⁄
;

2563 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
h2c
->
c⁄√˘i⁄
->
log
);

2564 i‡(
poﬁ
 =
NULL
) {

2565 
r°_°ªam
;

2568 
node
 = 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, h2c->
œ°_push
, 1);

2570 i‡(
node
 =
NULL
) {

2571 
	`ngx_de°roy_poﬁ
(
poﬁ
);

2572 
r°_°ªam
;

2575 
°ªam
 = 
	`ngx_hâp_v2_¸óã_°ªam
(
h2c
, 1);

2576 i‡(
°ªam
 =
NULL
) {

2578 i‡(
node
->
∑ª¡
 =
NULL
) {

2579 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2580 
ngx_hâp_v2_moduÀ
);

2582 
ödex
 = 
	`ngx_hâp_v2_ödex
(
h2scf
, 
h2c
->
œ°_push
);

2583 
h2c
->
°ªams_ödex
[
ödex
] = 
node
->index;

2585 
	`ngx_queue_ö£π_èû
(&
h2c
->
˛o£d
, &
node
->
ªu£
);

2586 
h2c
->
˛o£d_nodes
++;

2589 
	`ngx_de°roy_poﬁ
(
poﬁ
);

2590 
r°_°ªam
;

2593 i‡(
node
->
∑ª¡
) {

2594 
	`ngx_queue_ªmove
(&
node
->
ªu£
);

2595 
h2c
->
˛o£d_nodes
--;

2598 
°ªam
->
poﬁ
 =Öool;

2600 
r
 = 
°ªam
->
ªque°
;

2601 
fc
 = 
r
->
c⁄√˘i⁄
;

2603 
°ªam
->
ö_˛o£d
 = 1;

2604 
°ªam
->
node
 =Çode;

2606 
node
->
°ªam
 = stream;

2608 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2611 
h2c
->
œ°_push
, 
∑ª¡
->
node
->
id
);

2613 
node
->
weight
 = 
NGX_HTTP_V2_DEFAULT_WEIGHT
;

2614 
	`ngx_hâp_v2_£t_dïídícy
(
h2c
, 
node
, 
∑ª¡
->node->
id
, 0);

2616 
r
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2617 
r
->
mëhod
 = 
NGX_HTTP_GET
;

2619 
r
->
schema
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
∑ª¡
->
ªque°
->schema);

2620 i‡(
r
->
schema
.
d©a
 =
NULL
) {

2621 
˛o£
;

2624 
r
->
schema
.
Àn
 = 
∑ª¡
->
ªque°
->schema.len;

2626 
vÆue
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, 
∑th
);

2627 i‡(
vÆue
.
d©a
 =
NULL
) {

2628 
˛o£
;

2631 
vÆue
.
Àn
 = 
∑th
->len;

2633 
rc
 = 
	`ngx_hâp_v2_∑r£_∑th
(
r
, &
vÆue
);

2635 i‡(
rc
 !
NGX_OK
) {

2636 
îr‹
;

2639 
hódî
 = 
ngx_hâp_v2_∑r£_hódîs
; hódî->
«me
.
Àn
; header++) {

2640 
h
 = (
ngx_èbÀ_ñt_t
 **)

2641 ((*Ë&
∑ª¡
->
ªque°
->
hódîs_ö
 + 
hódî
->
off£t
);

2643 i‡(*
h
 =
NULL
) {

2647 
vÆue
.
Àn
 = (*
h
)->value.len;

2649 
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, vÆue.
Àn
 + 1);

2650 i‡(
vÆue
.
d©a
 =
NULL
) {

2651 
˛o£
;

2654 
	`ngx_mem˝y
(
vÆue
.
d©a
, (*
h
)->vÆue.d©a, vÆue.
Àn
);

2655 
vÆue
.
d©a
[vÆue.
Àn
] = '\0';

2657 
rc
 = 
	`ngx_hâp_v2_∑r£_hódî
(
r
, 
hódî
, &
vÆue
);

2659 i‡(
rc
 !
NGX_OK
) {

2660 
îr‹
;

2664 
fc
->
wrôe
->
h™dÀr
 = 
ngx_hâp_v2_run_ªque°_h™dÀr
;

2665 
	`ngx_po°_evít
(
fc
->
wrôe
, &
ngx_po°ed_evíts
);

2667  
°ªam
;

2669 
îr‹
:

2671 i‡(
rc
 =
NGX_ABORT
) {

2673  
NULL
;

2676 i‡(
rc
 =
NGX_DECLINED
) {

2677 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2678  
NULL
;

2681 
˛o£
:

2683 
	`ngx_hâp_v2_˛o£_°ªam
(
°ªam
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2685  
NULL
;

2687 
r°_°ªam
:

2689 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, h2c->
œ°_push
,

2690 
NGX_HTTP_INTERNAL_SERVER_ERROR
)

2691 !
NGX_OK
)

2693 
h2c
->
c⁄√˘i⁄
->
îr‹
 = 1;

2696  
NULL
;

2697 
	}
}

2700 
ngx_öt_t


2701 
	$ngx_hâp_v2_£nd_£âögs
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
)

2703 
size_t
 
Àn
;

2704 
ngx_buf_t
 *
buf
;

2705 
ngx_chaö_t
 *
˛
;

2706 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

2707 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2709 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2712 
‰ame
 = 
	`ngx_∑Œoc
(
h2c
->
poﬁ
, (
ngx_hâp_v2_out_‰ame_t
));

2713 i‡(
‰ame
 =
NULL
) {

2714  
NGX_ERROR
;

2717 
˛
 = 
	`ngx_Æloc_chaö_lök
(
h2c
->
poﬁ
);

2718 i‡(
˛
 =
NULL
) {

2719  
NGX_ERROR
;

2722 
Àn
 = 
NGX_HTTP_V2_SETTINGS_PARAM_SIZE
 * 3;

2724 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
h2c
->
poﬁ
, 
NGX_HTTP_V2_FRAME_HEADER_SIZE
 + 
Àn
);

2725 i‡(
buf
 =
NULL
) {

2726  
NGX_ERROR
;

2729 
buf
->
œ°_buf
 = 1;

2731 
˛
->
buf
 = buf;

2732 
˛
->
√xt
 = 
NULL
;

2734 
‰ame
->
fú°
 = 
˛
;

2735 
‰ame
->
œ°
 = 
˛
;

2736 
‰ame
->
h™dÀr
 = 
ngx_hâp_v2_£âögs_‰ame_h™dÀr
;

2737 
‰ame
->
°ªam
 = 
NULL
;

2738 #i‡(
NGX_DEBUG
)

2739 
‰ame
->
Àngth
 = 
Àn
;

2741 
‰ame
->
blocked
 = 0;

2743 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_Àn_™d_ty≥
(buf->œ°, 
Àn
,

2744 
NGX_HTTP_V2_SETTINGS_FRAME
);

2746 *
buf
->
œ°
++ = 
NGX_HTTP_V2_NO_FLAG
;

2748 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(buf->last, 0);

2750 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2751 
ngx_hâp_v2_moduÀ
);

2753 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt16
(buf->last,

2754 
NGX_HTTP_V2_MAX_STREAMS_SETTING
);

2755 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt32
(buf->last,

2756 
h2scf
->
c⁄cuºít_°ªams
);

2758 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt16
(buf->last,

2759 
NGX_HTTP_V2_INIT_WINDOW_SIZE_SETTING
);

2760 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt32
(buf->œ°, 
h2scf
->
¥îód_size
);

2762 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt16
(buf->last,

2763 
NGX_HTTP_V2_MAX_FRAME_SIZE_SETTING
);

2764 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt32
(buf->last,

2765 
NGX_HTTP_V2_MAX_FRAME_SIZE
);

2767 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

2769  
NGX_OK
;

2770 
	}
}

2773 
ngx_öt_t


2774 
	$ngx_hâp_v2_£âögs_‰ame_h™dÀr
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

2775 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

2777 
ngx_buf_t
 *
buf
;

2779 
buf
 = 
‰ame
->
fú°
->buf;

2781 i‡(
buf
->
pos
 !buf->
œ°
) {

2782  
NGX_AGAIN
;

2785 
	`ngx_‰ì_chaö
(
h2c
->
poﬁ
, 
‰ame
->
fú°
);

2787  
NGX_OK
;

2788 
	}
}

2791 
ngx_öt_t


2792 
	$ngx_hâp_v2_£nd_wödow_upd©e
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
sid
,

2793 
size_t
 
wödow
)

2795 
ngx_buf_t
 *
buf
;

2796 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2798 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2800 
sid
, 
wödow
);

2802 
‰ame
 = 
	`ngx_hâp_v2_gë_‰ame
(
h2c
, 
NGX_HTTP_V2_WINDOW_UPDATE_SIZE
,

2803 
NGX_HTTP_V2_WINDOW_UPDATE_FRAME
,

2804 
NGX_HTTP_V2_NO_FLAG
, 
sid
);

2805 i‡(
‰ame
 =
NULL
) {

2806  
NGX_ERROR
;

2809 
buf
 = 
‰ame
->
fú°
->buf;

2811 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt32
(buf->œ°, 
wödow
);

2813 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

2815  
NGX_OK
;

2816 
	}
}

2819 
ngx_öt_t


2820 
	$ngx_hâp_v2_£nd_r°_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
sid
,

2821 
ngx_uöt_t
 
°©us
)

2823 
ngx_buf_t
 *
buf
;

2824 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2826 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2828 
sid
, 
°©us
);

2830 
‰ame
 = 
	`ngx_hâp_v2_gë_‰ame
(
h2c
, 
NGX_HTTP_V2_RST_STREAM_SIZE
,

2831 
NGX_HTTP_V2_RST_STREAM_FRAME
,

2832 
NGX_HTTP_V2_NO_FLAG
, 
sid
);

2833 i‡(
‰ame
 =
NULL
) {

2834  
NGX_ERROR
;

2837 
buf
 = 
‰ame
->
fú°
->buf;

2839 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt32
(buf->œ°, 
°©us
);

2841 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

2843  
NGX_OK
;

2844 
	}
}

2847 
ngx_öt_t


2848 
	$ngx_hâp_v2_£nd_gﬂway
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
°©us
)

2850 
ngx_buf_t
 *
buf
;

2851 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2853 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2855 
h2c
->
œ°_sid
, 
°©us
);

2857 
‰ame
 = 
	`ngx_hâp_v2_gë_‰ame
(
h2c
, 
NGX_HTTP_V2_GOAWAY_SIZE
,

2858 
NGX_HTTP_V2_GOAWAY_FRAME
,

2859 
NGX_HTTP_V2_NO_FLAG
, 0);

2860 i‡(
‰ame
 =
NULL
) {

2861  
NGX_ERROR
;

2864 
buf
 = 
‰ame
->
fú°
->buf;

2866 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(buf->œ°, 
h2c
->
œ°_sid
);

2867 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_uöt32
(buf->œ°, 
°©us
);

2869 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

2871  
NGX_OK
;

2872 
	}
}

2875 
ngx_hâp_v2_out_‰ame_t
 *

2876 
	$ngx_hâp_v2_gë_‰ame
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
size_t
 
Àngth
,

2877 
ngx_uöt_t
 
ty≥
, 
u_ch¨
 
Êags
,Çgx_uöt_à
sid
)

2879 
ngx_buf_t
 *
buf
;

2880 
ngx_poﬁ_t
 *
poﬁ
;

2881 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

2883 
‰ame
 = 
h2c
->
‰ì_‰ames
;

2885 i‡(
‰ame
) {

2886 
h2c
->
‰ì_‰ames
 = 
‰ame
->
√xt
;

2888 
buf
 = 
‰ame
->
fú°
->buf;

2889 
buf
->
pos
 = buf->
°¨t
;

2891 
‰ame
->
blocked
 = 0;

2894 
poﬁ
 = 
h2c
->poﬁ ? h2c->poﬁ : h2c->
c⁄√˘i⁄
->pool;

2896 
‰ame
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_hâp_v2_out_‰ame_t
));

2897 i‡(
‰ame
 =
NULL
) {

2898  
NULL
;

2901 
‰ame
->
fú°
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

2902 i‡(
‰ame
->
fú°
 =
NULL
) {

2903  
NULL
;

2906 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
NGX_HTTP_V2_FRAME_BUFFER_SIZE
);

2907 i‡(
buf
 =
NULL
) {

2908  
NULL
;

2911 
buf
->
œ°_buf
 = 1;

2913 
‰ame
->
fú°
->
buf
 = buf;

2914 
‰ame
->
œ°
 = føme->
fú°
;

2916 
‰ame
->
h™dÀr
 = 
ngx_hâp_v2_‰ame_h™dÀr
;

2919 #i‡(
NGX_DEBUG
)

2920 i‡(
Àngth
 > 
NGX_HTTP_V2_FRAME_BUFFER_SIZE
 - 
NGX_HTTP_V2_FRAME_HEADER_SIZE
)

2922 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2923 "ªque°ed c⁄åﬁ fømêi†toÿœrge: %uz", 
Àngth
);

2924  
NULL
;

2927 
‰ame
->
Àngth
 =Üength;

2930 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_Àn_™d_ty≥
(buf->
pos
, 
Àngth
, 
ty≥
);

2932 *
buf
->
œ°
++ = 
Êags
;

2934 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(buf->œ°, 
sid
);

2936  
‰ame
;

2937 
	}
}

2940 
ngx_öt_t


2941 
	$ngx_hâp_v2_‰ame_h™dÀr
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

2942 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

2944 
ngx_buf_t
 *
buf
;

2946 
buf
 = 
‰ame
->
fú°
->buf;

2948 i‡(
buf
->
pos
 !buf->
œ°
) {

2949  
NGX_AGAIN
;

2952 
‰ame
->
√xt
 = 
h2c
->
‰ì_‰ames
;

2953 
h2c
->
‰ì_‰ames
 = 
‰ame
;

2955  
NGX_OK
;

2956 
	}
}

2959 
ngx_hâp_v2_°ªam_t
 *

2960 
	$ngx_hâp_v2_¸óã_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
push
)

2962 
ngx_log_t
 *
log
;

2963 
ngx_evít_t
 *
ªv
, *
wev
;

2964 
ngx_c⁄√˘i⁄_t
 *
fc
;

2965 
ngx_hâp_log_˘x_t
 *
˘x
;

2966 
ngx_hâp_ªque°_t
 *
r
;

2967 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

2968 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

2969 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2971 
fc
 = 
h2c
->
‰ì_Áke_c⁄√˘i⁄s
;

2973 i‡(
fc
) {

2974 
h2c
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
->
d©a
;

2976 
ªv
 = 
fc
->
ªad
;

2977 
wev
 = 
fc
->
wrôe
;

2978 
log
 = 
fc
->log;

2979 
˘x
 = 
log
->
d©a
;

2982 
fc
 = 
	`ngx_∑Œoc
(
h2c
->
poﬁ
, (
ngx_c⁄√˘i⁄_t
));

2983 i‡(
fc
 =
NULL
) {

2984  
NULL
;

2987 
ªv
 = 
	`ngx_∑Œoc
(
h2c
->
poﬁ
, (
ngx_evít_t
));

2988 i‡(
ªv
 =
NULL
) {

2989  
NULL
;

2992 
wev
 = 
	`ngx_∑Œoc
(
h2c
->
poﬁ
, (
ngx_evít_t
));

2993 i‡(
wev
 =
NULL
) {

2994  
NULL
;

2997 
log
 = 
	`ngx_∑Œoc
(
h2c
->
poﬁ
, (
ngx_log_t
));

2998 i‡(
log
 =
NULL
) {

2999  
NULL
;

3002 
˘x
 = 
	`ngx_∑Œoc
(
h2c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

3003 i‡(
˘x
 =
NULL
) {

3004  
NULL
;

3007 
˘x
->
c⁄√˘i⁄
 = 
fc
;

3008 
˘x
->
ªque°
 = 
NULL
;

3009 
˘x
->
cuºít_ªque°
 = 
NULL
;

3012 
	`ngx_mem˝y
(
log
, 
h2c
->
c⁄√˘i⁄
->log, (
ngx_log_t
));

3014 
log
->
d©a
 = 
˘x
;

3016 i‡(
push
) {

3017 
log
->
a˘i⁄
 = "processingÖushedÑequest headers";

3020 
log
->
a˘i⁄
 = "reading clientÑequest headers";

3023 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

3025 
ªv
->
d©a
 = 
fc
;

3026 
ªv
->
ªady
 = 1;

3027 
ªv
->
h™dÀr
 = 
ngx_hâp_v2_˛o£_°ªam_h™dÀr
;

3028 
ªv
->
log
 =Üog;

3030 
	`ngx_mem˝y
(
wev
, 
ªv
, (
ngx_evít_t
));

3032 
wev
->
wrôe
 = 1;

3034 
	`ngx_mem˝y
(
fc
, 
h2c
->
c⁄√˘i⁄
, (
ngx_c⁄√˘i⁄_t
));

3036 
fc
->
d©a
 = 
h2c
->
hâp_c⁄√˘i⁄
;

3037 
fc
->
ªad
 = 
ªv
;

3038 
fc
->
wrôe
 = 
wev
;

3039 
fc
->
£¡
 = 0;

3040 
fc
->
log
 =Üog;

3041 
fc
->
buf„ªd
 = 0;

3042 
fc
->
¢dlow©
 = 1;

3043 
fc
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

3045 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
fc
);

3046 i‡(
r
 =
NULL
) {

3047  
NULL
;

3050 
	`ngx_°r_£t
(&
r
->
hâp_¥Ÿocﬁ
, "HTTP/2.0");

3052 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_20
;

3053 
r
->
vÆid_loˇti⁄
 = 1;

3055 
fc
->
d©a
 = 
r
;

3056 
h2c
->
c⁄√˘i⁄
->
ªque°s
++;

3058 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3060 
r
->
hódî_ö
 = 
	`ngx_¸óã_ãmp_buf
‘->
poﬁ
,

3061 
cscf
->
˛õ¡_hódî_buf„r_size
);

3062 i‡(
r
->
hódî_ö
 =
NULL
) {

3063 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3064  
NULL
;

3067 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

3068 (
ngx_èbÀ_ñt_t
))

3069 !
NGX_OK
)

3071 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3072  
NULL
;

3075 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

3077 
°ªam
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_v2_°ªam_t
));

3078 i‡(
°ªam
 =
NULL
) {

3079 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3080  
NULL
;

3083 
r
->
°ªam
 = stream;

3085 
°ªam
->
ªque°
 = 
r
;

3086 
°ªam
->
c⁄√˘i⁄
 = 
h2c
;

3088 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_v2_moduÀ
);

3090 
°ªam
->
£nd_wödow
 = 
h2c
->
öô_wödow
;

3091 
°ªam
->
ªcv_wödow
 = 
h2scf
->
¥îód_size
;

3093 i‡(
push
) {

3094 
h2c
->
pushög
++;

3097 
h2c
->
¥o˚ssög
++;

3100  
°ªam
;

3101 
	}
}

3104 
ngx_hâp_v2_node_t
 *

3105 
	$ngx_hâp_v2_gë_node_by_id
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
sid
,

3106 
ngx_uöt_t
 
Æloc
)

3108 
ngx_uöt_t
 
ödex
;

3109 
ngx_hâp_v2_node_t
 *
node
;

3110 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

3112 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3113 
ngx_hâp_v2_moduÀ
);

3115 
ödex
 = 
	`ngx_hâp_v2_ödex
(
h2scf
, 
sid
);

3117 
node
 = 
h2c
->
°ªams_ödex
[
ödex
];Çode;Çode =Çode->index) {

3119 i‡(
node
->
id
 =
sid
) {

3120  
node
;

3124 i‡(!
Æloc
) {

3125  
NULL
;

3128 i‡(
h2c
->
˛o£d_nodes
 < 32) {

3129 
node
 = 
	`ngx_pˇŒoc
(
h2c
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_hâp_v2_node_t
));

3130 i‡(
node
 =
NULL
) {

3131  
NULL
;

3135 
node
 = 
	`ngx_hâp_v2_gë_˛o£d_node
(
h2c
);

3138 
node
->
id
 = 
sid
;

3140 
	`ngx_queue_öô
(&
node
->
chûdªn
);

3142 
node
->
ödex
 = 
h2c
->
°ªams_ödex
[index];

3143 
h2c
->
°ªams_ödex
[
ödex
] = 
node
;

3145  
node
;

3146 
	}
}

3149 
ngx_hâp_v2_node_t
 *

3150 
	$ngx_hâp_v2_gë_˛o£d_node
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
)

3152 
ngx_uöt_t
 
weight
;

3153 
ngx_queue_t
 *
q
, *
chûdªn
;

3154 
ngx_hâp_v2_node_t
 *
node
, **
√xt
, *
n
, *
∑ª¡
, *
chûd
;

3155 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

3157 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3158 
ngx_hâp_v2_moduÀ
);

3160 
h2c
->
˛o£d_nodes
--;

3162 
q
 = 
	`ngx_queue_hód
(&
h2c
->
˛o£d
);

3164 
	`ngx_queue_ªmove
(
q
);

3166 
node
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_node_t
, 
ªu£
);

3168 
√xt
 = &
h2c
->
°ªams_ödex
[
	`ngx_hâp_v2_ödex
(
h2scf
, 
node
->
id
)];

3171 
n
 = *
√xt
;

3173 i‡(
n
 =
node
) {

3174 *
√xt
 = 
n
->
ödex
;

3178 
√xt
 = &
n
->
ödex
;

3181 
	`ngx_queue_ªmove
(&
node
->
queue
);

3183 
weight
 = 0;

3185 
q
 = 
	`ngx_queue_hód
(&
node
->
chûdªn
);

3186 
q
 !
	`ngx_queue_£¡öñ
(&
node
->
chûdªn
);

3187 
q
 = 
	`ngx_queue_√xt
(q))

3189 
chûd
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_node_t
, 
queue
);

3190 
weight
 +
chûd
->weight;

3193 
∑ª¡
 = 
node
->parent;

3195 
q
 = 
	`ngx_queue_hód
(&
node
->
chûdªn
);

3196 
q
 !
	`ngx_queue_£¡öñ
(&
node
->
chûdªn
);

3197 
q
 = 
	`ngx_queue_√xt
(q))

3199 
chûd
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_node_t
, 
queue
);

3200 
chûd
->
∑ª¡
 =Öarent;

3201 
chûd
->
weight
 = 
node
->weight * child->weight / weight;

3203 i‡(
chûd
->
weight
 == 0) {

3204 
chûd
->
weight
 = 1;

3208 i‡(
∑ª¡
 =
NGX_HTTP_V2_ROOT
) {

3209 
node
->
ønk
 = 0;

3210 
node
->
ªl_weight
 = 1.0;

3212 
chûdªn
 = &
h2c
->
dïídícõs
;

3215 
node
->
ønk
 = 
∑ª¡
->rank;

3216 
node
->
ªl_weight
 = 
∑ª¡
->rel_weight;

3218 
chûdªn
 = &
∑ª¡
->children;

3221 
	`ngx_hâp_v2_node_chûdªn_upd©e
(
node
);

3222 
	`ngx_queue_add
(
chûdªn
, &
node
->children);

3224 
	`ngx_memzîo
(
node
, (
ngx_hâp_v2_node_t
));

3226  
node
;

3227 
	}
}

3230 
ngx_öt_t


3231 
	$ngx_hâp_v2_vÆid©e_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v2_hódî_t
 *
hódî
)

3233 
u_ch¨
 
ch
;

3234 
ngx_uöt_t
 
i
;

3235 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3237 i‡(
hódî
->
«me
.
Àn
 == 0) {

3238  
NGX_ERROR
;

3241 
r
->
övÆid_hódî
 = 0;

3243 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3245 
i
 = (
hódî
->
«me
.
d©a
[0] =':'); i !hódî->«me.
Àn
; i++) {

3246 
ch
 = 
hódî
->
«me
.
d©a
[
i
];

3248 i‡((
ch
 >= 'a' && ch <= 'z')

3249 || (
ch
 == '-')

3250 || (
ch
 >= '0' && ch <= '9')

3251 || (
ch
 ='_' && 
cscf
->
undîsc‹es_ö_hódîs
))

3256 i‡(
ch
 ='\0' || ch =
LF
 || ch =
CR
 || ch == ':'

3257 || (
ch
 >= 'A' && ch <= 'Z'))

3259 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3261 &
hódî
->
«me
);

3263  
NGX_ERROR
;

3266 
r
->
övÆid_hódî
 = 1;

3269 
i
 = 0; i !
hódî
->
vÆue
.
Àn
; i++) {

3270 
ch
 = 
hódî
->
vÆue
.
d©a
[
i
];

3272 i‡(
ch
 ='\0' || ch =
LF
 || ch =
CR
) {

3273 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3276 &
hódî
->
«me
, &hódî->
vÆue
);

3278  
NGX_ERROR
;

3282  
NGX_OK
;

3283 
	}
}

3286 
ngx_öt_t


3287 
	$ngx_hâp_v2_p£udo_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v2_hódî_t
 *
hódî
)

3289 
hódî
->
«me
.
Àn
--;

3290 
hódî
->
«me
.
d©a
++;

3292 
hódî
->
«me
.
Àn
) {

3294 i‡(
	`ngx_memcmp
(
hódî
->
«me
.
d©a
, "path", ("path") - 1)

3297  
	`ngx_hâp_v2_∑r£_∑th
(
r
, &
hódî
->
vÆue
);

3303 i‡(
	`ngx_memcmp
(
hódî
->
«me
.
d©a
, "method", ("method") - 1)

3306  
	`ngx_hâp_v2_∑r£_mëhod
(
r
, &
hódî
->
vÆue
);

3309 i‡(
	`ngx_memcmp
(
hódî
->
«me
.
d©a
, "scheme", ("scheme") - 1)

3312  
	`ngx_hâp_v2_∑r£_scheme
(
r
, &
hódî
->
vÆue
);

3318 i‡(
	`ngx_memcmp
(
hódî
->
«me
.
d©a
, "authority", ("authority") - 1)

3321  
	`ngx_hâp_v2_∑r£_auth‹ôy
(
r
, &
hódî
->
vÆue
);

3327 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3329 &
hódî
->
«me
);

3331  
NGX_DECLINED
;

3332 
	}
}

3335 
ngx_öt_t


3336 
	$ngx_hâp_v2_∑r£_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
)

3338 i‡(
r
->
u≈¨£d_uri
.
Àn
) {

3339 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3342  
NGX_DECLINED
;

3345 i‡(
vÆue
->
Àn
 == 0) {

3346 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3349  
NGX_DECLINED
;

3352 
r
->
uri_°¨t
 = 
vÆue
->
d©a
;

3353 
r
->
uri_íd
 = 
vÆue
->
d©a
 + vÆue->
Àn
;

3355 i‡(
	`ngx_hâp_∑r£_uri
(
r
Ë!
NGX_OK
) {

3356 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3357 "˛õ¡ síàövÆid :∑th hódî: \"%V\"", 
vÆue
);

3359  
NGX_DECLINED
;

3362 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

3367  
NGX_ABORT
;

3370  
NGX_OK
;

3371 
	}
}

3374 
ngx_öt_t


3375 
	$ngx_hâp_v2_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
)

3377 
size_t
 
k
, 
Àn
;

3378 
ngx_uöt_t
 
n
;

3379 c⁄° 
u_ch¨
 *
p
, *
m
;

3387 
u_ch¨
 
Àn
;

3388 c⁄° 
u_ch¨
 
mëhod
[11];

3389 
uöt32_t
 
vÆue
;

3390 } 
ã°s
[] = {

3391 { 3, "GET", 
NGX_HTTP_GET
 },

3392 { 4, "POST", 
NGX_HTTP_POST
 },

3393 { 4, "HEAD", 
NGX_HTTP_HEAD
 },

3394 { 7, "OPTIONS", 
NGX_HTTP_OPTIONS
 },

3395 { 8, "PROPFIND", 
NGX_HTTP_PROPFIND
 },

3396 { 3, "PUT", 
NGX_HTTP_PUT
 },

3397 { 5, "MKCOL", 
NGX_HTTP_MKCOL
 },

3398 { 6, "DELETE", 
NGX_HTTP_DELETE
 },

3399 { 4, "COPY", 
NGX_HTTP_COPY
 },

3400 { 4, "MOVE", 
NGX_HTTP_MOVE
 },

3401 { 9, "PROPPATCH", 
NGX_HTTP_PROPPATCH
 },

3402 { 4, "LOCK", 
NGX_HTTP_LOCK
 },

3403 { 6, "UNLOCK", 
NGX_HTTP_UNLOCK
 },

3404 { 5, "PATCH", 
NGX_HTTP_PATCH
 },

3405 { 5, "TRACE", 
NGX_HTTP_TRACE
 }

3406 }, *
ã°
;

3408 i‡(
r
->
mëhod_«me
.
Àn
) {

3409 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3412  
NGX_DECLINED
;

3415 i‡(
vÆue
->
Àn
 == 0) {

3416 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3419  
NGX_DECLINED
;

3422 
r
->
mëhod_«me
.
Àn
 = 
vÆue
->len;

3423 
r
->
mëhod_«me
.
d©a
 = 
vÆue
->data;

3425 
Àn
 = 
r
->
mëhod_«me
.len;

3426 
n
 = (
ã°s
) / (tests[0]);

3427 
ã°
 = 
ã°s
;

3430 i‡(
Àn
 =
ã°
->len) {

3431 
p
 = 
r
->
mëhod_«me
.
d©a
;

3432 
m
 = 
ã°
->
mëhod
;

3433 
k
 = 
Àn
;

3436 i‡(*
p
++ !*
m
++) {

3437 
√xt
;

3439 } --
k
);

3441 
r
->
mëhod
 = 
ã°
->
vÆue
;

3442  
NGX_OK
;

3445 
√xt
:

3446 
ã°
++;

3448 } --
n
);

3450 
p
 = 
r
->
mëhod_«me
.
d©a
;

3453 i‡((*
p
 < 'A' || *p > 'Z') && *p != '_' && *p != '-') {

3454 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3456 &
r
->
mëhod_«me
);

3458  
NGX_DECLINED
;

3461 
p
++;

3463 } --
Àn
);

3465  
NGX_OK
;

3466 
	}
}

3469 
ngx_öt_t


3470 
	$ngx_hâp_v2_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
)

3472 
u_ch¨
 
c
, 
ch
;

3473 
ngx_uöt_t
 
i
;

3475 i‡(
r
->
schema
.
Àn
) {

3476 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3479  
NGX_DECLINED
;

3482 i‡(
vÆue
->
Àn
 == 0) {

3483 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3486  
NGX_DECLINED
;

3489 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

3490 
ch
 = 
vÆue
->
d©a
[
i
];

3492 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

3493 i‡(
c
 >= 'a' && c <= 'z') {

3497 i‡(((
ch
 >= '0' && ch <= '9') || ch == '+' || ch == '-' || ch == '.')

3498 && 
i
 > 0)

3503 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3504 "˛õ¡ síàövÆid :schemêhódî: \"%V\"", 
vÆue
);

3506  
NGX_DECLINED
;

3509 
r
->
schema
 = *
vÆue
;

3511  
NGX_OK
;

3512 
	}
}

3515 
ngx_öt_t


3516 
	$ngx_hâp_v2_∑r£_auth‹ôy
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
)

3518  
	`ngx_hâp_v2_∑r£_hódî
(
r
, &
ngx_hâp_v2_∑r£_hódîs
[0], 
vÆue
);

3519 
	}
}

3522 
ngx_öt_t


3523 
	$ngx_hâp_v2_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

3524 
ngx_hâp_v2_∑r£_hódî_t
 *
hódî
, 
ngx_°r_t
 *
vÆue
)

3526 
ngx_èbÀ_ñt_t
 *
h
;

3527 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3529 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

3530 i‡(
h
 =
NULL
) {

3531  
NGX_ERROR
;

3534 
h
->
key
.
Àn
 = 
hódî
->
«me
.len;

3535 
h
->
key
.
d©a
 = 
hódî
->
«me
.data;

3536 
h
->
lowˇ£_key
 = 
hódî
->
«me
.
d©a
;

3538 i‡(
hódî
->
hh
 =
NULL
) {

3539 
hódî
->
hash
 = 
	`ngx_hash_key
(hódî->
«me
.
d©a
, hódî->«me.
Àn
);

3541 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3543 
hódî
->
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, hódî->
hash
,

3544 
h
->
lowˇ£_key
, h->
key
.
Àn
);

3545 i‡(
hódî
->
hh
 =
NULL
) {

3546  
NGX_ERROR
;

3550 
h
->
hash
 = 
hódî
->hash;

3552 
h
->
vÆue
.
Àn
 = value->len;

3553 
h
->
vÆue
.
d©a
 = value->data;

3555 i‡(
hódî
->
hh
->
	`h™dÀr
(
r
, 
h
, hódî->hh->
off£t
Ë!
NGX_OK
) {

3557  
NGX_ABORT
;

3560  
NGX_OK
;

3561 
	}
}

3564 
ngx_öt_t


3565 
	$ngx_hâp_v2_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
)

3567 
u_ch¨
 *
p
;

3569 c⁄° 
u_ch¨
 
ídög
[] = " HTTP/2.0";

3571 i‡(
r
->
mëhod_«me
.
Àn
 == 0

3572 || 
r
->
schema
.
Àn
 == 0

3573 || 
r
->
u≈¨£d_uri
.
Àn
 == 0)

3575 i‡(
r
->
mëhod_«me
.
Àn
 == 0) {

3576 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3579 } i‡(
r
->
schema
.
Àn
 == 0) {

3580 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3584 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3588 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

3589  
NGX_ERROR
;

3592 
r
->
ªque°_löe
.
Àn
 =Ñ->
mëhod_«me
.len + 1

3593 + 
r
->
u≈¨£d_uri
.
Àn


3594 + (
ídög
) - 1;

3596 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
ªque°_löe
.
Àn
 + 1);

3597 i‡(
p
 =
NULL
) {

3598 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3599  
NGX_ERROR
;

3602 
r
->
ªque°_löe
.
d©a
 = 
p
;

3604 
p
 = 
	`ngx_˝ymem
’, 
r
->
mëhod_«me
.
d©a
,Ñ->mëhod_«me.
Àn
);

3606 *
p
++ = ' ';

3608 
p
 = 
	`ngx_˝ymem
’, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

3610 
	`ngx_mem˝y
(
p
, 
ídög
, (ending));

3612 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3613 "hâp2Ñeque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

3615  
NGX_OK
;

3616 
	}
}

3619 
ngx_öt_t


3620 
	$ngx_hâp_v2_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v2_hódî_t
 *
hódî
)

3622 
ngx_°r_t
 *
vÆ
;

3623 
ngx_¨øy_t
 *
cookõs
;

3625 
cookõs
 = 
r
->
°ªam
->cookies;

3627 i‡(
cookõs
 =
NULL
) {

3628 
cookõs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 2, (
ngx_°r_t
));

3629 i‡(
cookõs
 =
NULL
) {

3630  
NGX_ERROR
;

3633 
r
->
°ªam
->
cookõs
 = cookies;

3636 
vÆ
 = 
	`ngx_¨øy_push
(
cookõs
);

3637 i‡(
vÆ
 =
NULL
) {

3638  
NGX_ERROR
;

3641 
vÆ
->
Àn
 = 
hódî
->
vÆue
.len;

3642 
vÆ
->
d©a
 = 
hódî
->
vÆue
.data;

3644  
NGX_OK
;

3645 
	}
}

3648 
ngx_öt_t


3649 
	$ngx_hâp_v2_c⁄°ru˘_cookõ_hódî
(
ngx_hâp_ªque°_t
 *
r
)

3651 
u_ch¨
 *
buf
, *
p
, *
íd
;

3652 
size_t
 
Àn
;

3653 
ngx_°r_t
 *
vÆs
;

3654 
ngx_uöt_t
 
i
;

3655 
ngx_¨øy_t
 *
cookõs
;

3656 
ngx_èbÀ_ñt_t
 *
h
;

3657 
ngx_hâp_hódî_t
 *
hh
;

3658 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3660 
ngx_°r_t
 
cookõ
 = 
	`ngx_°rög
("cookie");

3662 
cookõs
 = 
r
->
°ªam
->cookies;

3664 i‡(
cookõs
 =
NULL
) {

3665  
NGX_OK
;

3668 
vÆs
 = 
cookõs
->
ñts
;

3670 
i
 = 0;

3671 
Àn
 = 0;

3674 
Àn
 +
vÆs
[
i
].len + 2;

3675 } ++
i
 !
cookõs
->
√…s
);

3677 
Àn
 -= 2;

3679 
buf
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + 1);

3680 i‡(
buf
 =
NULL
) {

3681 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3682  
NGX_ERROR
;

3685 
p
 = 
buf
;

3686 
íd
 = 
buf
 + 
Àn
;

3688 
i
 = 0; ; i++) {

3690 
p
 = 
	`ngx_˝ymem
’, 
vÆs
[
i
].
d©a
, vÆs[i].
Àn
);

3692 i‡(
p
 =
íd
) {

3693 *
p
 = '\0';

3697 *
p
++ = ';'; *p++ = ' ';

3700 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

3701 i‡(
h
 =
NULL
) {

3702 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3703  
NGX_ERROR
;

3706 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

3707 
	`ngx_hash
('c', 'o'), 'o'), 'k'), 'i'), 'e');

3709 
h
->
key
.
Àn
 = 
cookõ
.len;

3710 
h
->
key
.
d©a
 = 
cookõ
.data;

3712 
h
->
vÆue
.
Àn
 =Üen;

3713 
h
->
vÆue
.
d©a
 = 
buf
;

3715 
h
->
lowˇ£_key
 = 
cookõ
.
d©a
;

3717 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3719 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

3720 
h
->
lowˇ£_key
, h->
key
.
Àn
);

3722 i‡(
hh
 =
NULL
) {

3723 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3724  
NGX_ERROR
;

3727 i‡(
hh
->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

3732  
NGX_ERROR
;

3735  
NGX_OK
;

3736 
	}
}

3740 
	$ngx_hâp_v2_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3742 i‡(
	`ngx_hâp_v2_c⁄°ru˘_ªque°_löe
(
r
Ë!
NGX_OK
) {

3746 i‡(
	`ngx_hâp_v2_c⁄°ru˘_cookõ_hódî
(
r
Ë!
NGX_OK
) {

3750 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

3752 i‡(
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
Ë!
NGX_OK
) {

3756 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0 &&Ñ->
°ªam
->
ö_˛o£d
) {

3757 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3760 
r
->
°ªam
->
skù_d©a
 = 1;

3762 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

3766 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =-1 && !r->
°ªam
->
ö_˛o£d
) {

3767 
r
->
hódîs_ö
.
chunked
 = 1;

3770 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

3771 
	}
}

3775 
	$ngx_hâp_v2_run_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

3777 
ngx_c⁄√˘i⁄_t
 *
fc
;

3778 
ngx_hâp_ªque°_t
 *
r
;

3780 
fc
 = 
ev
->
d©a
;

3781 
r
 = 
fc
->
d©a
;

3783 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

3786 
	`ngx_hâp_v2_run_ªque°
(
r
);

3787 
	}
}

3790 
ngx_öt_t


3791 
	$ngx_hâp_v2_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

3793 
off_t
 
Àn
;

3794 
size_t
 
size
;

3795 
ngx_buf_t
 *
buf
;

3796 
ngx_öt_t
 
rc
;

3797 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

3798 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

3799 
ngx_hâp_ªque°_body_t
 *
rb
;

3800 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3801 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

3803 
°ªam
 = 
r
->stream;

3804 
rb
 = 
r
->
ªque°_body
;

3806 i‡(
°ªam
->
skù_d©a
) {

3807 
r
->
ªque°_body_no_buf„rög
 = 0;

3808 
rb
->
	`po°_h™dÀr
(
r
);

3809  
NGX_OK
;

3812 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_v2_moduÀ
);

3813 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3815 
Àn
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

3817 i‡(
r
->
ªque°_body_no_buf„rög
 && !
°ªam
->
ö_˛o£d
) {

3819 i‡(
Àn
 < 0 ||Üí > (
off_t
Ë
˛cf
->
˛õ¡_body_buf„r_size
) {

3820 
Àn
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

3828 i‡(
Àn
 < (
off_t
Ë
h2scf
->
¥îód_size
) {

3829 
Àn
 = 
h2scf
->
¥îód_size
;

3832 i‡(
Àn
 > 
NGX_HTTP_V2_MAX_WINDOW
) {

3833 
Àn
 = 
NGX_HTTP_V2_MAX_WINDOW
;

3836 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, (
size_t
Ë
Àn
);

3838 } i‡(
Àn
 >0 &&Üí <(
off_t
Ë
˛cf
->
˛õ¡_body_buf„r_size


3839 && !
r
->
ªque°_body_ö_fûe_⁄ly
)

3841 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, (
size_t
Ë
Àn
);

3844 
rb
->
buf
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3846 i‡(
rb
->
buf
 !
NULL
) {

3847 
rb
->
buf
->
sync
 = 1;

3851 i‡(
rb
->
buf
 =
NULL
) {

3852 
°ªam
->
skù_d©a
 = 1;

3853  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3856 
rb
->
ª°
 = 1;

3858 
buf
 = 
°ªam
->
¥îód
;

3860 i‡(
°ªam
->
ö_˛o£d
) {

3861 
r
->
ªque°_body_no_buf„rög
 = 0;

3863 i‡(
buf
) {

3864 
rc
 = 
	`ngx_hâp_v2_¥o˚ss_ªque°_body
(
r
, 
buf
->
pos
,

3865 
buf
->
œ°
 - buf->
pos
, 1);

3866 
	`ngx_p‰ì
(
r
->
poﬁ
, 
buf
->
°¨t
);

3867  
rc
;

3870  
	`ngx_hâp_v2_¥o˚ss_ªque°_body
(
r
, 
NULL
, 0, 1);

3873 i‡(
buf
) {

3874 
rc
 = 
	`ngx_hâp_v2_¥o˚ss_ªque°_body
(
r
, 
buf
->
pos
,

3875 
buf
->
œ°
 - buf->
pos
, 0);

3877 
	`ngx_p‰ì
(
r
->
poﬁ
, 
buf
->
°¨t
);

3879 i‡(
rc
 !
NGX_OK
) {

3880 
°ªam
->
skù_d©a
 = 1;

3881  
rc
;

3885 i‡(
r
->
ªque°_body_no_buf„rög
) {

3886 
size
 = (
size_t
Ë
Àn
 - 
h2scf
->
¥îód_size
;

3889 
°ªam
->
no_Êow_c⁄åﬁ
 = 1;

3890 
size
 = 
NGX_HTTP_V2_MAX_WINDOW
 - 
°ªam
->
ªcv_wödow
;

3893 i‡(
size
) {

3894 i‡(
	`ngx_hâp_v2_£nd_wödow_upd©e
(
°ªam
->
c⁄√˘i⁄
,

3895 
°ªam
->
node
->
id
, 
size
)

3896 =
NGX_ERROR
)

3898 
°ªam
->
skù_d©a
 = 1;

3899  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3902 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

3904 i‡(!
h2c
->
blocked
) {

3905 i‡(
	`ngx_hâp_v2_£nd_ouçut_queue
(
h2c
Ë=
NGX_ERROR
) {

3906 
°ªam
->
skù_d©a
 = 1;

3907  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3911 
°ªam
->
ªcv_wödow
 +
size
;

3914 i‡(!
buf
) {

3915 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

3918 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_v2_ªad_˛õ¡_ªque°_body_h™dÀr
;

3919 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

3921  
NGX_AGAIN
;

3922 
	}
}

3925 
ngx_öt_t


3926 
	$ngx_hâp_v2_¥o˚ss_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
pos
,

3927 
size_t
 
size
, 
ngx_uöt_t
 
œ°
)

3929 
ngx_buf_t
 *
buf
;

3930 
ngx_öt_t
 
rc
;

3931 
ngx_c⁄√˘i⁄_t
 *
fc
;

3932 
ngx_hâp_ªque°_body_t
 *
rb
;

3933 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3935 
fc
 = 
r
->
c⁄√˘i⁄
;

3936 
rb
 = 
r
->
ªque°_body
;

3937 
buf
 = 
rb
->buf;

3939 i‡(
size
) {

3940 i‡(
buf
->
sync
) {

3941 
buf
->
pos
 = buf->
°¨t
 =Öos;

3942 
buf
->
œ°
 = buf->
íd
 = 
pos
 + 
size
;

3944 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

3947 i‡(
size
 > (
size_t
Ë(
buf
->
íd
 - buf->
œ°
)) {

3948 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

3952  
NGX_HTTP_BAD_REQUEST
;

3955 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->œ°, 
pos
, 
size
);

3959 i‡(
œ°
) {

3960 
rb
->
ª°
 = 0;

3962 i‡(
fc
->
ªad
->
timî_£t
) {

3963 
	`ngx_dñ_timî
(
fc
->
ªad
);

3966 i‡(
r
->
ªque°_body_no_buf„rög
) {

3967 
	`ngx_po°_evít
(
fc
->
ªad
, &
ngx_po°ed_evíts
);

3968  
NGX_OK
;

3971 
rc
 = 
	`ngx_hâp_v2_fûãr_ªque°_body
(
r
);

3973 i‡(
rc
 !
NGX_OK
) {

3974  
rc
;

3977 i‡(
buf
->
sync
) {

3979 
rb
->
buf
 = 
NULL
;

3982 i‡(
r
->
hódîs_ö
.
chunked
) {

3983 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
ª˚ived
;

3986 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

3987 
rb
->
	`po°_h™dÀr
(
r
);

3989  
NGX_OK
;

3992 i‡(
size
 == 0) {

3993  
NGX_OK
;

3996 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3997 
	`ngx_add_timî
(
fc
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

3999 i‡(
r
->
ªque°_body_no_buf„rög
) {

4000 
	`ngx_po°_evít
(
fc
->
ªad
, &
ngx_po°ed_evíts
);

4001  
NGX_OK
;

4004 i‡(
buf
->
sync
) {

4005  
	`ngx_hâp_v2_fûãr_ªque°_body
(
r
);

4008  
NGX_OK
;

4009 
	}
}

4012 
ngx_öt_t


4013 
	$ngx_hâp_v2_fûãr_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

4015 
ngx_buf_t
 *
b
, *
buf
;

4016 
ngx_öt_t
 
rc
;

4017 
ngx_chaö_t
 *
˛
;

4018 
ngx_hâp_ªque°_body_t
 *
rb
;

4019 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4021 
rb
 = 
r
->
ªque°_body
;

4022 
buf
 = 
rb
->buf;

4024 i‡(
buf
->
pos
 =buf->
œ°
 && 
rb
->
ª°
) {

4025 
˛
 = 
NULL
;

4026 
upd©e
;

4029 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

4030 i‡(
˛
 =
NULL
) {

4031  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

4034 
b
 = 
˛
->
buf
;

4036 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

4038 i‡(
buf
->
pos
 !buf->
œ°
) {

4039 
r
->
ªque°_Àngth
 +
buf
->
œ°
 - buf->
pos
;

4040 
rb
->
ª˚ived
 +
buf
->
œ°
 - buf->
pos
;

4042 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1) {

4043 i‡(
rb
->
ª˚ived
 > 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

4044 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4048  
NGX_HTTP_BAD_REQUEST
;

4052 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

4054 i‡(
˛cf
->
˛õ¡_max_body_size


4055 && 
rb
->
ª˚ived
 > 
˛cf
->
˛õ¡_max_body_size
)

4057 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4059 "%O byãs", 
rb
->
ª˚ived
);

4061  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

4065 
b
->
ãmp‹¨y
 = 1;

4066 
b
->
pos
 = 
buf
->pos;

4067 
b
->
œ°
 = 
buf
->last;

4068 
b
->
°¨t
 = b->
pos
;

4069 
b
->
íd
 = b->
œ°
;

4071 
buf
->
pos
 = buf->
œ°
;

4074 i‡(!
rb
->
ª°
) {

4075 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

4076 && 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 !
rb
->
ª˚ived
)

4078 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4081 
rb
->
ª˚ived
, 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

4083  
NGX_HTTP_BAD_REQUEST
;

4086 
b
->
œ°_buf
 = 1;

4089 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_v2_fûãr_ªque°_body
;

4090 
b
->
Êush
 = 
r
->
ªque°_body_no_buf„rög
;

4092 
upd©e
:

4094 
rc
 = 
	`ngx_hâp_t›_ªque°_body_fûãr
(
r
, 
˛
);

4096 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
˛
,

4097 (
ngx_buf_èg_t
Ë&
ngx_hâp_v2_fûãr_ªque°_body
);

4099  
rc
;

4100 
	}
}

4104 
	$ngx_hâp_v2_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

4106 
ngx_c⁄√˘i⁄_t
 *
fc
;

4108 
fc
 = 
r
->
c⁄√˘i⁄
;

4110 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

4113 i‡(
fc
->
ªad
->
timedout
) {

4114 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

4116 
fc
->
timedout
 = 1;

4117 
r
->
°ªam
->
skù_d©a
 = 1;

4119 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

4123 i‡(
fc
->
îr‹
) {

4124 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

4127 
r
->
°ªam
->
skù_d©a
 = 1;

4129 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

4132 
	}
}

4135 
ngx_öt_t


4136 
	$ngx_hâp_v2_ªad_unbuf„ªd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

4138 
size_t
 
wödow
;

4139 
ngx_buf_t
 *
buf
;

4140 
ngx_öt_t
 
rc
;

4141 
ngx_c⁄√˘i⁄_t
 *
fc
;

4142 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

4143 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

4144 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4146 
°ªam
 = 
r
->stream;

4147 
fc
 = 
r
->
c⁄√˘i⁄
;

4149 i‡(
fc
->
ªad
->
timedout
) {

4150 i‡(
°ªam
->
ªcv_wödow
) {

4151 
°ªam
->
skù_d©a
 = 1;

4152 
fc
->
timedout
 = 1;

4154  
NGX_HTTP_REQUEST_TIME_OUT
;

4157 
fc
->
ªad
->
timedout
 = 0;

4160 i‡(
fc
->
îr‹
) {

4161 
°ªam
->
skù_d©a
 = 1;

4162  
NGX_HTTP_BAD_REQUEST
;

4165 
rc
 = 
	`ngx_hâp_v2_fûãr_ªque°_body
(
r
);

4167 i‡(
rc
 !
NGX_OK
) {

4168 
°ªam
->
skù_d©a
 = 1;

4169  
rc
;

4172 i‡(!
r
->
ªque°_body
->
ª°
) {

4173  
NGX_OK
;

4176 i‡(
r
->
ªque°_body
->
busy
 !
NULL
) {

4177  
NGX_AGAIN
;

4180 
buf
 = 
r
->
ªque°_body
->buf;

4182 
buf
->
pos
 = buf->
°¨t
;

4183 
buf
->
œ°
 = buf->
°¨t
;

4185 
wödow
 = 
buf
->
íd
 - buf->
°¨t
;

4186 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

4188 i‡(
h2c
->
°©e
.
°ªam
 == stream) {

4189 
wödow
 -
h2c
->
°©e
.
Àngth
;

4192 i‡(
wödow
 <
°ªam
->
ªcv_wödow
) {

4193 i‡(
wödow
 < 
°ªam
->
ªcv_wödow
) {

4194 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4196 
°ªam
->
skù_d©a
 = 1;

4197  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

4200  
NGX_AGAIN
;

4203 i‡(
	`ngx_hâp_v2_£nd_wödow_upd©e
(
h2c
, 
°ªam
->
node
->
id
,

4204 
wödow
 - 
°ªam
->
ªcv_wödow
)

4205 =
NGX_ERROR
)

4207 
°ªam
->
skù_d©a
 = 1;

4208  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

4211 i‡(
	`ngx_hâp_v2_£nd_ouçut_queue
(
h2c
Ë=
NGX_ERROR
) {

4212 
°ªam
->
skù_d©a
 = 1;

4213  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

4216 i‡(
°ªam
->
ªcv_wödow
 == 0) {

4217 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

4218 
	`ngx_add_timî
(
fc
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

4221 
°ªam
->
ªcv_wödow
 = 
wödow
;

4223  
NGX_AGAIN
;

4224 
	}
}

4227 
ngx_öt_t


4228 
	$ngx_hâp_v2_ãrmö©e_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

4229 
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_uöt_t
 
°©us
)

4231 
ngx_evít_t
 *
ªv
;

4232 
ngx_c⁄√˘i⁄_t
 *
fc
;

4234 i‡(
°ªam
->
r°_£¡
) {

4235  
NGX_OK
;

4238 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, 
°ªam
->
node
->
id
, 
°©us
)

4239 =
NGX_ERROR
)

4241  
NGX_ERROR
;

4244 
°ªam
->
r°_£¡
 = 1;

4245 
°ªam
->
skù_d©a
 = 1;

4247 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

4248 
fc
->
îr‹
 = 1;

4250 
ªv
 = 
fc
->
ªad
;

4251 
ªv
->
	`h™dÀr
(rev);

4253  
NGX_OK
;

4254 
	}
}

4258 
	$ngx_hâp_v2_˛o£_°ªam
(
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
)

4260 
ngx_poﬁ_t
 *
poﬁ
;

4261 
ngx_uöt_t
 
push
;

4262 
ngx_evít_t
 *
ev
;

4263 
ngx_c⁄√˘i⁄_t
 *
fc
;

4264 
ngx_hâp_v2_node_t
 *
node
;

4265 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

4267 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

4268 
node
 = 
°ªam
->node;

4270 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

4273 
node
->
id
, 
°ªam
->
queued
, 
h2c
->
¥o˚ssög
, h2c->
pushög
);

4275 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

4277 i‡(
°ªam
->
queued
) {

4278 
fc
->
wrôe
->
h™dÀr
 = 
ngx_hâp_v2_˛o£_°ªam_h™dÀr
;

4279 
fc
->
ªad
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

4283 i‡(!
°ªam
->
r°_£¡
 && !
h2c
->
c⁄√˘i⁄
->
îr‹
) {

4285 i‡(!
°ªam
->
out_˛o£d
) {

4286 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, 
node
->
id
,

4287 
fc
->
timedout
 ? 
NGX_HTTP_V2_PROTOCOL_ERROR


4288 : 
NGX_HTTP_V2_INTERNAL_ERROR
)

4289 !
NGX_OK
)

4291 
h2c
->
c⁄√˘i⁄
->
îr‹
 = 1;

4294 } i‡(!
°ªam
->
ö_˛o£d
) {

4296 i‡(
	`ngx_hâp_v2_£nd_r°_°ªam
(
h2c
, 
node
->
id
, 
NGX_HTTP_V2_NO_ERROR
)

4297 !
NGX_OK
)

4299 
h2c
->
c⁄√˘i⁄
->
îr‹
 = 1;

4313 i‡(
°ªam
->
ªcv_wödow
 < 
NGX_HTTP_V2_MAX_WINDOW


4314 && 
	`ngx_hâp_v2_£nd_wödow_upd©e
(
h2c
, 
node
->
id
,

4315 
NGX_HTTP_V2_MAX_WINDOW


4316 - 
°ªam
->
ªcv_wödow
)

4317 !
NGX_OK
)

4319 
h2c
->
c⁄√˘i⁄
->
îr‹
 = 1;

4325 i‡(
h2c
->
°©e
.
°ªam
 == stream) {

4326 
h2c
->
°©e
.
°ªam
 = 
NULL
;

4329 
push
 = 
°ªam
->
node
->
id
 % 2 == 0;

4331 
node
->
°ªam
 = 
NULL
;

4333 
	`ngx_queue_ö£π_èû
(&
h2c
->
˛o£d
, &
node
->
ªu£
);

4334 
h2c
->
˛o£d_nodes
++;

4343 
poﬁ
 = 
°ªam
->pool;

4345 
	`ngx_hâp_‰ì_ªque°
(
°ªam
->
ªque°
, 
rc
);

4347 i‡(
poﬁ
 !
h2c
->
°©e
.pool) {

4348 
	`ngx_de°roy_poﬁ
(
poﬁ
);

4352 
h2c
->
°©e
.
kìp_poﬁ
 = 0;

4355 
ev
 = 
fc
->
ªad
;

4357 i‡(
ev
->
timî_£t
) {

4358 
	`ngx_dñ_timî
(
ev
);

4361 i‡(
ev
->
po°ed
) {

4362 
	`ngx_dñëe_po°ed_evít
(
ev
);

4365 
ev
 = 
fc
->
wrôe
;

4367 i‡(
ev
->
timî_£t
) {

4368 
	`ngx_dñ_timî
(
ev
);

4371 i‡(
ev
->
po°ed
) {

4372 
	`ngx_dñëe_po°ed_evít
(
ev
);

4375 
fc
->
d©a
 = 
h2c
->
‰ì_Áke_c⁄√˘i⁄s
;

4376 
h2c
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
;

4378 i‡(
push
) {

4379 
h2c
->
pushög
--;

4382 
h2c
->
¥o˚ssög
--;

4385 i‡(
h2c
->
¥o˚ssög
 || h2c->
pushög
 || h2c->
blocked
) {

4389 
ev
 = 
h2c
->
c⁄√˘i⁄
->
ªad
;

4391 
ev
->
h™dÀr
 = 
ngx_hâp_v2_h™dÀ_c⁄√˘i⁄_h™dÀr
;

4392 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

4393 
	}
}

4397 
	$ngx_hâp_v2_˛o£_°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

4399 
ngx_c⁄√˘i⁄_t
 *
fc
;

4400 
ngx_hâp_ªque°_t
 *
r
;

4402 
fc
 = 
ev
->
d©a
;

4403 
r
 = 
fc
->
d©a
;

4405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

4408 i‡(
ev
->
timedout
) {

4409 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

4411 
fc
->
timedout
 = 1;

4413 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 
NGX_HTTP_REQUEST_TIME_OUT
);

4417 
	`ngx_hâp_v2_˛o£_°ªam
(
r
->
°ªam
, 0);

4418 
	}
}

4422 
	$ngx_hâp_v2_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
)

4424 
ngx_c⁄√˘i⁄_t
 *
c
;

4425 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

4427 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

4430 
c
 = 
ªv
->
d©a
;

4431 
h2c
 = 
c
->
d©a
;

4433 i‡(
c
->
îr‹
) {

4434 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

4438 
ªv
->
h™dÀr
 = 
ngx_hâp_v2_ªad_h™dÀr
;

4440 i‡(
ªv
->
ªady
) {

4441 
	`ngx_hâp_v2_ªad_h™dÀr
(
ªv
);

4445 i‡(
h2c
->
œ°_out
 && 
	`ngx_hâp_v2_£nd_ouçut_queue
(h2cË=
NGX_ERROR
) {

4446 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 0);

4450 
	`ngx_hâp_v2_h™dÀ_c⁄√˘i⁄
(
c
->
d©a
);

4451 
	}
}

4455 
	$ngx_hâp_v2_idÀ_h™dÀr
(
ngx_evít_t
 *
ªv
)

4457 
ngx_c⁄√˘i⁄_t
 *
c
;

4458 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

4459 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

4461 
c
 = 
ªv
->
d©a
;

4462 
h2c
 = 
c
->
d©a
;

4464 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http2 idle handler");

4466 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

4467 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 
NGX_HTTP_V2_NO_ERROR
);

4471 #i‡(
NGX_HAVE_KQUEUE
)

4473 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

4474 i‡(
ªv
->
≥ndög_eof
) {

4475 
c
->
log
->
h™dÀr
 = 
NULL
;

4476 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

4478 "idÀ c⁄√˘i⁄", &
c
->
addr_ãxt
);

4479 #i‡(
NGX_HTTP_SSL
)

4480 i‡(
c
->
s¶
) {

4481 
c
->
s¶
->
no_£nd_shutdown
 = 1;

4484 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

4491 
c
->
de°royed
 = 0;

4492 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

4494 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

4495 
ngx_hâp_v2_moduÀ
);

4497 
h2c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
h2scf
->
poﬁ_size
, h2c->
c⁄√˘i⁄
->
log
);

4498 i‡(
h2c
->
poﬁ
 =
NULL
) {

4499 
	`ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
h2c
, 
NGX_HTTP_V2_INTERNAL_ERROR
);

4503 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_v2_wrôe_h™dÀr
;

4505 
ªv
->
h™dÀr
 = 
ngx_hâp_v2_ªad_h™dÀr
;

4506 
	`ngx_hâp_v2_ªad_h™dÀr
(
ªv
);

4507 
	}
}

4511 
	$ngx_hâp_v2_föÆize_c⁄√˘i⁄
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

4512 
ngx_uöt_t
 
°©us
)

4514 
ngx_uöt_t
 
i
, 
size
;

4515 
ngx_evít_t
 *
ev
;

4516 
ngx_c⁄√˘i⁄_t
 *
c
, *
fc
;

4517 
ngx_hâp_ªque°_t
 *
r
;

4518 
ngx_hâp_v2_node_t
 *
node
;

4519 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

4520 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

4522 
c
 = 
h2c
->
c⁄√˘i⁄
;

4524 
h2c
->
blocked
 = 1;

4526 i‡(!
c
->
îr‹
 && !
h2c
->
gﬂway
) {

4527 i‡(
	`ngx_hâp_v2_£nd_gﬂway
(
h2c
, 
°©us
Ë!
NGX_ERROR
) {

4528 (Ë
	`ngx_hâp_v2_£nd_ouçut_queue
(
h2c
);

4532 
c
->
îr‹
 = 1;

4534 i‡(!
h2c
->
¥o˚ssög
 && !h2c->
pushög
) {

4535 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

4539 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

4540 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

4542 
h2c
->
œ°_out
 = 
NULL
;

4544 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

4545 
ngx_hâp_v2_moduÀ
);

4547 
size
 = 
	`ngx_hâp_v2_ödex_size
(
h2scf
);

4549 
i
 = 0; i < 
size
; i++) {

4551 
node
 = 
h2c
->
°ªams_ödex
[
i
];Çode;Çodênode->
ödex
) {

4552 
°ªam
 = 
node
->stream;

4554 i‡(
°ªam
 =
NULL
) {

4558 
°ªam
->
waôög
 = 0;

4560 
r
 = 
°ªam
->
ªque°
;

4561 
fc
 = 
r
->
c⁄√˘i⁄
;

4563 
fc
->
îr‹
 = 1;

4565 i‡(
°ªam
->
queued
) {

4566 
°ªam
->
queued
 = 0;

4568 
ev
 = 
fc
->
wrôe
;

4569 
ev
->
a˘ive
 = 0;

4570 
ev
->
ªady
 = 1;

4573 
ev
 = 
fc
->
ªad
;

4576 
ev
->
eof
 = 1;

4577 
ev
->
	`h™dÀr
(ev);

4581 
h2c
->
blocked
 = 0;

4583 i‡(
h2c
->
¥o˚ssög
 || h2c->
pushög
) {

4587 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

4588 
	}
}

4591 
ngx_öt_t


4592 
	$ngx_hâp_v2_adju°_wödows
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ssize_t
 
dñè
)

4594 
ngx_uöt_t
 
i
, 
size
;

4595 
ngx_evít_t
 *
wev
;

4596 
ngx_hâp_v2_node_t
 *
node
;

4597 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

4598 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

4600 
h2scf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
h2c
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

4601 
ngx_hâp_v2_moduÀ
);

4603 
size
 = 
	`ngx_hâp_v2_ödex_size
(
h2scf
);

4605 
i
 = 0; i < 
size
; i++) {

4607 
node
 = 
h2c
->
°ªams_ödex
[
i
];Çode;Çodênode->
ödex
) {

4608 
°ªam
 = 
node
->stream;

4610 i‡(
°ªam
 =
NULL
) {

4614 i‡(
dñè
 > 0

4615 && 
°ªam
->
£nd_wödow


4616 > (
ssize_t
Ë(
NGX_HTTP_V2_MAX_WINDOW
 - 
dñè
))

4618 i‡(
	`ngx_hâp_v2_ãrmö©e_°ªam
(
h2c
, 
°ªam
,

4619 
NGX_HTTP_V2_FLOW_CTRL_ERROR
)

4620 =
NGX_ERROR
)

4622  
NGX_ERROR
;

4628 
°ªam
->
£nd_wödow
 +
dñè
;

4630 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

4632 
node
->
id
, 
°ªam
->
£nd_wödow
);

4634 i‡(
°ªam
->
£nd_wödow
 > 0 && såóm->
exhau°ed
) {

4635 
°ªam
->
exhau°ed
 = 0;

4637 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

4639 
wev
->
a˘ive
 = 0;

4640 
wev
->
ªady
 = 1;

4642 i‡(!
wev
->
dñayed
) {

4643 
wev
->
	`h™dÀr
(wev);

4649  
NGX_OK
;

4650 
	}
}

4654 
	$ngx_hâp_v2_£t_dïídícy
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

4655 
ngx_hâp_v2_node_t
 *
node
, 
ngx_uöt_t
 
dïíd
,Çgx_uöt_à
ex˛usive
)

4657 
ngx_queue_t
 *
chûdªn
, *
q
;

4658 
ngx_hâp_v2_node_t
 *
∑ª¡
, *
chûd
, *
√xt
;

4660 
∑ª¡
 = 
dïíd
 ? 
	`ngx_hâp_v2_gë_node_by_id
(
h2c
, dïíd, 0Ë: 
NULL
;

4662 i‡(
∑ª¡
 =
NULL
) {

4663 
∑ª¡
 = 
NGX_HTTP_V2_ROOT
;

4665 i‡(
dïíd
 != 0) {

4666 
ex˛usive
 = 0;

4669 
node
->
ønk
 = 1;

4670 
node
->
ªl_weight
 = (1.0 / 256Ë*Çode->
weight
;

4672 
chûdªn
 = &
h2c
->
dïídícõs
;

4675 i‡(
node
->
∑ª¡
 !
NULL
) {

4677 
√xt
 = 
∑ª¡
->parent;

4678 
√xt
 !
NGX_HTTP_V2_ROOT
 &&Çext->
ønk
 >
node
->rank;

4679 
√xt
 =Çext->
∑ª¡
)

4681 i‡(
√xt
 !
node
) {

4685 
	`ngx_queue_ªmove
(&
∑ª¡
->
queue
);

4686 
	`ngx_queue_ö£π_a·î
(&
node
->
queue
, &
∑ª¡
->queue);

4688 
∑ª¡
->∑ª¡ = 
node
->parent;

4690 i‡(
node
->
∑ª¡
 =
NGX_HTTP_V2_ROOT
) {

4691 
∑ª¡
->
ønk
 = 1;

4692 
∑ª¡
->
ªl_weight
 = (1.0 / 256Ë*Ö¨ít->
weight
;

4695 
∑ª¡
->
ønk
 = 
node
->parent->rank + 1;

4696 
∑ª¡
->
ªl_weight
 = (
node
->parent->rel_weight / 256)

4697 * 
∑ª¡
->
weight
;

4700 i‡(!
ex˛usive
) {

4701 
	`ngx_hâp_v2_node_chûdªn_upd©e
(
∑ª¡
);

4708 
node
->
ønk
 = 
∑ª¡
->rank + 1;

4709 
node
->
ªl_weight
 = (
∑ª¡
->ªl_weighà/ 256Ë*Çode->
weight
;

4711 i‡(
∑ª¡
->
°ªam
 =
NULL
) {

4712 
	`ngx_queue_ªmove
(&
∑ª¡
->
ªu£
);

4713 
	`ngx_queue_ö£π_èû
(&
h2c
->
˛o£d
, &
∑ª¡
->
ªu£
);

4716 
chûdªn
 = &
∑ª¡
->children;

4719 i‡(
ex˛usive
) {

4720 
q
 = 
	`ngx_queue_hód
(
chûdªn
);

4721 
q
 !
	`ngx_queue_£¡öñ
(
chûdªn
);

4722 
q
 = 
	`ngx_queue_√xt
(q))

4724 
chûd
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_node_t
, 
queue
);

4725 
chûd
->
∑ª¡
 = 
node
;

4728 
	`ngx_queue_add
(&
node
->
chûdªn
, children);

4729 
	`ngx_queue_öô
(
chûdªn
);

4732 i‡(
node
->
∑ª¡
 !
NULL
) {

4733 
	`ngx_queue_ªmove
(&
node
->
queue
);

4736 
	`ngx_queue_ö£π_èû
(
chûdªn
, &
node
->
queue
);

4738 
node
->
∑ª¡
 =Öarent;

4740 
	`ngx_hâp_v2_node_chûdªn_upd©e
(
node
);

4741 
	}
}

4745 
	$ngx_hâp_v2_node_chûdªn_upd©e
(
ngx_hâp_v2_node_t
 *
node
)

4747 
ngx_queue_t
 *
q
;

4748 
ngx_hâp_v2_node_t
 *
chûd
;

4750 
q
 = 
	`ngx_queue_hód
(&
node
->
chûdªn
);

4751 
q
 !
	`ngx_queue_£¡öñ
(&
node
->
chûdªn
);

4752 
q
 = 
	`ngx_queue_√xt
(q))

4754 
chûd
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_node_t
, 
queue
);

4756 
chûd
->
ønk
 = 
node
->rank + 1;

4757 
chûd
->
ªl_weight
 = (
node
->ªl_weighà/ 256Ë* chûd->
weight
;

4759 
	`ngx_hâp_v2_node_chûdªn_upd©e
(
chûd
);

4761 
	}
}

4765 
	$ngx_hâp_v2_poﬁ_˛ónup
(*
d©a
)

4767 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
 = 
d©a
;

4769 i‡(
h2c
->
°©e
.
poﬁ
) {

4770 
	`ngx_de°roy_poﬁ
(
h2c
->
°©e
.
poﬁ
);

4773 i‡(
h2c
->
poﬁ
) {

4774 
	`ngx_de°roy_poﬁ
(
h2c
->
poﬁ
);

4776 
	}
}

	@src/http/v2/ngx_http_v2.h

7 #i‚de‡
_NGX_HTTP_V2_H_INCLUDED_


8 
	#_NGX_HTTP_V2_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_hâp.h
>

16 
	#NGX_HTTP_V2_ALPN_ADVERTISE
 "\x02h2"

	)

17 
	#NGX_HTTP_V2_NPN_ADVERTISE
 
NGX_HTTP_V2_ALPN_ADVERTISE


	)

19 
	#NGX_HTTP_V2_STATE_BUFFER_SIZE
 16

	)

21 
	#NGX_HTTP_V2_DEFAULT_FRAME_SIZE
 (1 << 14)

	)

22 
	#NGX_HTTP_V2_MAX_FRAME_SIZE
 ((1 << 24Ë- 1)

	)

24 
	#NGX_HTTP_V2_INT_OCTETS
 4

	)

25 
	#NGX_HTTP_V2_MAX_FIELD
 \

26 (127 + (1 << (
NGX_HTTP_V2_INT_OCTETS
 - 1Ë* 7Ë- 1)

	)

28 
	#NGX_HTTP_V2_STREAM_ID_SIZE
 4

	)

30 
	#NGX_HTTP_V2_FRAME_HEADER_SIZE
 9

	)

33 
	#NGX_HTTP_V2_DATA_FRAME
 0x0

	)

34 
	#NGX_HTTP_V2_HEADERS_FRAME
 0x1

	)

35 
	#NGX_HTTP_V2_PRIORITY_FRAME
 0x2

	)

36 
	#NGX_HTTP_V2_RST_STREAM_FRAME
 0x3

	)

37 
	#NGX_HTTP_V2_SETTINGS_FRAME
 0x4

	)

38 
	#NGX_HTTP_V2_PUSH_PROMISE_FRAME
 0x5

	)

39 
	#NGX_HTTP_V2_PING_FRAME
 0x6

	)

40 
	#NGX_HTTP_V2_GOAWAY_FRAME
 0x7

	)

41 
	#NGX_HTTP_V2_WINDOW_UPDATE_FRAME
 0x8

	)

42 
	#NGX_HTTP_V2_CONTINUATION_FRAME
 0x9

	)

45 
	#NGX_HTTP_V2_NO_FLAG
 0x00

	)

46 
	#NGX_HTTP_V2_ACK_FLAG
 0x01

	)

47 
	#NGX_HTTP_V2_END_STREAM_FLAG
 0x01

	)

48 
	#NGX_HTTP_V2_END_HEADERS_FLAG
 0x04

	)

49 
	#NGX_HTTP_V2_PADDED_FLAG
 0x08

	)

50 
	#NGX_HTTP_V2_PRIORITY_FLAG
 0x20

	)

52 
	#NGX_HTTP_V2_MAX_WINDOW
 ((1U << 31Ë- 1)

	)

53 
	#NGX_HTTP_V2_DEFAULT_WINDOW
 65535

	)

55 
	#NGX_HTTP_V2_DEFAULT_WEIGHT
 16

	)

58 
ngx_hâp_v2_c⁄√˘i⁄_s
 
	tngx_hâp_v2_c⁄√˘i⁄_t
;

59 
ngx_hâp_v2_node_s
 
	tngx_hâp_v2_node_t
;

60 
ngx_hâp_v2_out_‰ame_s
 
	tngx_hâp_v2_out_‰ame_t
;

63 
	gu_ch¨
 *(*
	tngx_hâp_v2_h™dÀr_±
Ë(
	tngx_hâp_v2_c⁄√˘i⁄_t
 *
	th2c
,

64 
	tu_ch¨
 *
	tpos
, u_ch¨ *
	tíd
);

68 
ngx_°r_t
 
	m«me
;

69 
ngx_°r_t
 
	mvÆue
;

70 } 
	tngx_hâp_v2_hódî_t
;

74 
ngx_uöt_t
 
	msid
;

75 
size_t
 
	mÀngth
;

76 
size_t
 
	m∑ddög
;

77 
	mÊags
:8;

79 
	möcom∂ëe
:1;

80 
	mkìp_poﬁ
:1;

83 
	m∑r£_«me
:1;

84 
	m∑r£_vÆue
:1;

85 
	mödex
:1;

86 
ngx_hâp_v2_hódî_t
 
	mhódî
;

87 
size_t
 
	mhódî_limô
;

88 
u_ch¨
 
	mfõld_°©e
;

89 
u_ch¨
 *
	mfõld_°¨t
;

90 
u_ch¨
 *
	mfõld_íd
;

91 
size_t
 
	mfõld_ª°
;

92 
ngx_poﬁ_t
 *
	mpoﬁ
;

94 
ngx_hâp_v2_°ªam_t
 *
	m°ªam
;

96 
u_ch¨
 
	mbuf„r
[
NGX_HTTP_V2_STATE_BUFFER_SIZE
];

97 
size_t
 
	mbuf„r_u£d
;

98 
ngx_hâp_v2_h™dÀr_±
 
	mh™dÀr
;

99 } 
	tngx_hâp_v2_°©e_t
;

104 
ngx_hâp_v2_hódî_t
 **
	míåõs
;

106 
ngx_uöt_t
 
	madded
;

107 
ngx_uöt_t
 
	mdñëed
;

108 
ngx_uöt_t
 
	mªu£d
;

109 
ngx_uöt_t
 
	mÆloˇãd
;

111 
size_t
 
	msize
;

112 
size_t
 
	m‰ì
;

113 
u_ch¨
 *
	m°‹age
;

114 
u_ch¨
 *
	mpos
;

115 } 
	tngx_hâp_v2_h∑ck_t
;

118 
	sngx_hâp_v2_c⁄√˘i⁄_s
 {

119 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

120 
ngx_hâp_c⁄√˘i⁄_t
 *
	mhâp_c⁄√˘i⁄
;

122 
ngx_uöt_t
 
	m¥o˚ssög
;

124 
ngx_uöt_t
 
	mpushög
;

125 
ngx_uöt_t
 
	mc⁄cuºít_pushes
;

127 
size_t
 
	m£nd_wödow
;

128 
size_t
 
	mªcv_wödow
;

129 
size_t
 
	möô_wödow
;

131 
size_t
 
	m‰ame_size
;

133 
ngx_queue_t
 
	mwaôög
;

135 
ngx_hâp_v2_°©e_t
 
	m°©e
;

137 
ngx_hâp_v2_h∑ck_t
 
	mh∑ck
;

139 
ngx_poﬁ_t
 *
	mpoﬁ
;

141 
ngx_hâp_v2_out_‰ame_t
 *
	m‰ì_‰ames
;

142 
ngx_c⁄√˘i⁄_t
 *
	m‰ì_Áke_c⁄√˘i⁄s
;

144 
ngx_hâp_v2_node_t
 **
	m°ªams_ödex
;

146 
ngx_hâp_v2_out_‰ame_t
 *
	mœ°_out
;

148 
ngx_queue_t
 
	mdïídícõs
;

149 
ngx_queue_t
 
	m˛o£d
;

151 
ngx_uöt_t
 
	mœ°_sid
;

152 
ngx_uöt_t
 
	mœ°_push
;

154 
	m˛o£d_nodes
:8;

155 
	m£âögs_ack
:1;

156 
	mèbÀ_upd©e
:1;

157 
	mblocked
:1;

158 
	mgﬂway
:1;

159 
	mpush_dißbÀd
:1;

163 
	sngx_hâp_v2_node_s
 {

164 
ngx_uöt_t
 
	mid
;

165 
ngx_hâp_v2_node_t
 *
	mödex
;

166 
ngx_hâp_v2_node_t
 *
	m∑ª¡
;

167 
ngx_queue_t
 
	mqueue
;

168 
ngx_queue_t
 
	mchûdªn
;

169 
ngx_queue_t
 
	mªu£
;

170 
ngx_uöt_t
 
	mønk
;

171 
ngx_uöt_t
 
	mweight
;

172 
	mªl_weight
;

173 
ngx_hâp_v2_°ªam_t
 *
	m°ªam
;

177 
	sngx_hâp_v2_°ªam_s
 {

178 
ngx_hâp_ªque°_t
 *
	mªque°
;

179 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

180 
ngx_hâp_v2_node_t
 *
	mnode
;

182 
ngx_uöt_t
 
	mqueued
;

188 
ssize_t
 
	m£nd_wödow
;

189 
size_t
 
	mªcv_wödow
;

191 
ngx_buf_t
 *
	m¥îód
;

193 
ngx_hâp_v2_out_‰ame_t
 *
	m‰ì_‰ames
;

194 
ngx_chaö_t
 *
	m‰ì_‰ame_hódîs
;

195 
ngx_chaö_t
 *
	m‰ì_bufs
;

197 
ngx_queue_t
 
	mqueue
;

199 
ngx_¨øy_t
 *
	mcookõs
;

201 
ngx_poﬁ_t
 *
	mpoﬁ
;

203 
	mwaôög
:1;

204 
	mblocked
:1;

205 
	mexhau°ed
:1;

206 
	mö_˛o£d
:1;

207 
	mout_˛o£d
:1;

208 
	mr°_£¡
:1;

209 
	mno_Êow_c⁄åﬁ
:1;

210 
	mskù_d©a
:1;

214 
	sngx_hâp_v2_out_‰ame_s
 {

215 
ngx_hâp_v2_out_‰ame_t
 *
	m√xt
;

216 
ngx_chaö_t
 *
	mfú°
;

217 
ngx_chaö_t
 *
	mœ°
;

218 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
	mh2c
,

219 
ngx_hâp_v2_out_‰ame_t
 *
	m‰ame
);

221 
ngx_hâp_v2_°ªam_t
 *
	m°ªam
;

222 
size_t
 
	mÀngth
;

224 
	mblocked
:1;

225 
	mfö
:1;

229 
ngx_ölöe
 

230 
	$ngx_hâp_v2_queue_‰ame
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

231 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

233 
ngx_hâp_v2_out_‰ame_t
 **
out
;

235 
out
 = &
h2c
->
œ°_out
; *out; ouà&(*out)->
√xt
) {

237 i‡((*
out
)->
blocked
 || (*out)->
°ªam
 =
NULL
) {

241 i‡((*
out
)->
°ªam
->
node
->
ønk
 < 
‰ame
->stream->node->rank

242 || ((*
out
)->
°ªam
->
node
->
ønk
 =
‰ame
->stream->node->rank

243 && (*
out
)->
°ªam
->
node
->
ªl_weight


244 >
‰ame
->
°ªam
->
node
->
ªl_weight
))

250 
‰ame
->
√xt
 = *
out
;

251 *
out
 = 
‰ame
;

252 
	}
}

255 
ngx_ölöe
 

256 
	$ngx_hâp_v2_queue_blocked_‰ame
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

257 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

259 
ngx_hâp_v2_out_‰ame_t
 **
out
;

261 
out
 = &
h2c
->
œ°_out
; *out; ouà&(*out)->
√xt
) {

263 i‡((*
out
)->
blocked
 || (*out)->
°ªam
 =
NULL
) {

268 
‰ame
->
√xt
 = *
out
;

269 *
out
 = 
‰ame
;

270 
	}
}

273 
ngx_ölöe
 

274 
	$ngx_hâp_v2_queue_‹dîed_‰ame
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

275 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

277 
‰ame
->
√xt
 = 
h2c
->
œ°_out
;

278 
h2c
->
œ°_out
 = 
‰ame
;

279 
	}
}

282 
ngx_hâp_v2_öô
(
ngx_evít_t
 *
ªv
);

284 
ngx_öt_t
 
ngx_hâp_v2_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

285 
ngx_öt_t
 
ngx_hâp_v2_ªad_unbuf„ªd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

287 
ngx_hâp_v2_°ªam_t
 *
ngx_hâp_v2_push_°ªam
“gx_hâp_v2_°ªam_à*
∑ª¡
,

288 
ngx_°r_t
 *
∑th
);

290 
ngx_hâp_v2_˛o£_°ªam
(
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
);

292 
ngx_öt_t
 
ngx_hâp_v2_£nd_ouçut_queue
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
);

295 
ngx_°r_t
 *
ngx_hâp_v2_gë_°©ic_«me
(
ngx_uöt_t
 
ödex
);

296 
ngx_°r_t
 *
ngx_hâp_v2_gë_°©ic_vÆue
(
ngx_uöt_t
 
ödex
);

298 
ngx_öt_t
 
ngx_hâp_v2_gë_ödexed_hódî
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

299 
ngx_uöt_t
 
ödex
,Çgx_uöt_à
«me_⁄ly
);

300 
ngx_öt_t
 
ngx_hâp_v2_add_hódî
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

301 
ngx_hâp_v2_hódî_t
 *
hódî
);

302 
ngx_öt_t
 
ngx_hâp_v2_èbÀ_size
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
size_t
 
size
);

305 
ngx_öt_t
 
ngx_hâp_v2_huff_decode
(
u_ch¨
 *
°©e
, u_ch¨ *
§c
, 
size_t
 
Àn
,

306 
u_ch¨
 **
d°
, 
ngx_uöt_t
 
œ°
, 
ngx_log_t
 *
log
);

307 
size_t
 
ngx_hâp_v2_huff_ícode
(
u_ch¨
 *
§c
, size_à
Àn
, u_ch¨ *
d°
,

308 
ngx_uöt_t
 
lowî
);

311 
	#ngx_hâp_v2_¥efix
(
bôs
Ë((1 << (bôs)Ë- 1)

	)

314 #i‡(
NGX_HAVE_NONALIGNED
)

316 
	#ngx_hâp_v2_∑r£_uöt16
(
p
Ë
	`¡ohs
(*(
uöt16_t
 *Ë’))

	)

317 
	#ngx_hâp_v2_∑r£_uöt32
(
p
Ë
	`¡ohl
(*(
uöt32_t
 *Ë’))

	)

321 
	#ngx_hâp_v2_∑r£_uöt16
(
p
Ë(’)[0] << 8 | (p)[1])

	)

322 
	#ngx_hâp_v2_∑r£_uöt32
(
p
) \

323 ((
uöt32_t
Ë(
p
)[0] << 24 | (p)[1] << 16 | (p)[2] << 8 | (p)[3])

	)

327 
	#ngx_hâp_v2_∑r£_Àngth
(
p
Ë(’Ë>> 8)

	)

328 
	#ngx_hâp_v2_∑r£_ty≥
(
p
Ë(’Ë& 0xff)

	)

329 
	#ngx_hâp_v2_∑r£_sid
(
p
Ë(
	`ngx_hâp_v2_∑r£_uöt32
’Ë& 0x7fffffff)

	)

330 
	#ngx_hâp_v2_∑r£_wödow
(
p
Ë(
	`ngx_hâp_v2_∑r£_uöt32
’Ë& 0x7fffffff)

	)

333 
	#ngx_hâp_v2_wrôe_uöt16_Æig√d
(
p
, 
s
) \

334 (*(
uöt16_t
 *Ë(
p
Ë
	`ht⁄s
((uöt16_tË(
s
)), (pË+ (uöt16_t))

	)

335 
	#ngx_hâp_v2_wrôe_uöt32_Æig√d
(
p
, 
s
) \

336 (*(
uöt32_t
 *Ë(
p
Ë
	`ht⁄l
((uöt32_tË(
s
)), (pË+ (uöt32_t))

	)

338 #i‡(
NGX_HAVE_NONALIGNED
)

340 
	#ngx_hâp_v2_wrôe_uöt16
 
ngx_hâp_v2_wrôe_uöt16_Æig√d


	)

341 
	#ngx_hâp_v2_wrôe_uöt32
 
ngx_hâp_v2_wrôe_uöt32_Æig√d


	)

345 
	#ngx_hâp_v2_wrôe_uöt16
(
p
, 
s
) \

346 ((
p
)[0] = (
u_ch¨
Ë((
s
) >> 8), \

347 (
p
)[1] = (
u_ch¨
Ë(
s
), \

348 (
p
Ë+ (
uöt16_t
))

	)

350 
	#ngx_hâp_v2_wrôe_uöt32
(
p
, 
s
) \

351 ((
p
)[0] = (
u_ch¨
Ë((
s
) >> 24), \

352 (
p
)[1] = (
u_ch¨
Ë((
s
) >> 16), \

353 (
p
)[2] = (
u_ch¨
Ë((
s
) >> 8), \

354 (
p
)[3] = (
u_ch¨
Ë(
s
), \

355 (
p
Ë+ (
uöt32_t
))

	)

359 
	#ngx_hâp_v2_wrôe_Àn_™d_ty≥
(
p
, 
l
, 
t
) \

360 
	`ngx_hâp_v2_wrôe_uöt32_Æig√d
(
p
, (
l
Ë<< 8 | (
t
))

	)

362 
	#ngx_hâp_v2_wrôe_sid
 
ngx_hâp_v2_wrôe_uöt32


	)

365 
	#ngx_hâp_v2_ödexed
(
i
Ë(128 + (i))

	)

366 
	#ngx_hâp_v2_öc_ödexed
(
i
Ë(64 + (i))

	)

368 
	#ngx_hâp_v2_wrôe_«me
(
d°
, 
§c
, 
Àn
, 
tmp
) \

369 
	`ngx_hâp_v2_°rög_ícode
(
d°
, 
§c
, 
Àn
, 
tmp
, 1)

	)

370 
	#ngx_hâp_v2_wrôe_vÆue
(
d°
, 
§c
, 
Àn
, 
tmp
) \

371 
	`ngx_hâp_v2_°rög_ícode
(
d°
, 
§c
, 
Àn
, 
tmp
, 0)

	)

373 
	#NGX_HTTP_V2_ENCODE_RAW
 0

	)

374 
	#NGX_HTTP_V2_ENCODE_HUFF
 0x80

	)

376 
	#NGX_HTTP_V2_AUTHORITY_INDEX
 1

	)

378 
	#NGX_HTTP_V2_METHOD_INDEX
 2

	)

379 
	#NGX_HTTP_V2_METHOD_GET_INDEX
 2

	)

380 
	#NGX_HTTP_V2_METHOD_POST_INDEX
 3

	)

382 
	#NGX_HTTP_V2_PATH_INDEX
 4

	)

383 
	#NGX_HTTP_V2_PATH_ROOT_INDEX
 4

	)

385 
	#NGX_HTTP_V2_SCHEME_HTTP_INDEX
 6

	)

386 
	#NGX_HTTP_V2_SCHEME_HTTPS_INDEX
 7

	)

388 
	#NGX_HTTP_V2_STATUS_INDEX
 8

	)

389 
	#NGX_HTTP_V2_STATUS_200_INDEX
 8

	)

390 
	#NGX_HTTP_V2_STATUS_204_INDEX
 9

	)

391 
	#NGX_HTTP_V2_STATUS_206_INDEX
 10

	)

392 
	#NGX_HTTP_V2_STATUS_304_INDEX
 11

	)

393 
	#NGX_HTTP_V2_STATUS_400_INDEX
 12

	)

394 
	#NGX_HTTP_V2_STATUS_404_INDEX
 13

	)

395 
	#NGX_HTTP_V2_STATUS_500_INDEX
 14

	)

397 
	#NGX_HTTP_V2_ACCEPT_ENCODING_INDEX
 16

	)

398 
	#NGX_HTTP_V2_ACCEPT_LANGUAGE_INDEX
 17

	)

399 
	#NGX_HTTP_V2_CONTENT_LENGTH_INDEX
 28

	)

400 
	#NGX_HTTP_V2_CONTENT_TYPE_INDEX
 31

	)

401 
	#NGX_HTTP_V2_DATE_INDEX
 33

	)

402 
	#NGX_HTTP_V2_LAST_MODIFIED_INDEX
 44

	)

403 
	#NGX_HTTP_V2_LOCATION_INDEX
 46

	)

404 
	#NGX_HTTP_V2_SERVER_INDEX
 54

	)

405 
	#NGX_HTTP_V2_USER_AGENT_INDEX
 58

	)

406 
	#NGX_HTTP_V2_VARY_INDEX
 59

	)

409 
u_ch¨
 *
ngx_hâp_v2_°rög_ícode
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
,

410 
u_ch¨
 *
tmp
, 
ngx_uöt_t
 
lowî
);

	@src/http/v2/ngx_http_v2_encode.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
u_ch¨
 *
ngx_hâp_v2_wrôe_öt
(u_ch¨ *
pos
, 
ngx_uöt_t
 
¥efix
,

14 
ngx_uöt_t
 
vÆue
);

17 
u_ch¨
 *

18 
	$ngx_hâp_v2_°rög_ícode
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
, u_ch¨ *
tmp
,

19 
ngx_uöt_t
 
lowî
)

21 
size_t
 
hÀn
;

23 
hÀn
 = 
	`ngx_hâp_v2_huff_ícode
(
§c
, 
Àn
, 
tmp
, 
lowî
);

25 i‡(
hÀn
 > 0) {

26 *
d°
 = 
NGX_HTTP_V2_ENCODE_HUFF
;

27 
d°
 = 
	`ngx_hâp_v2_wrôe_öt
(d°, 
	`ngx_hâp_v2_¥efix
(7), 
hÀn
);

28  
	`ngx_˝ymem
(
d°
, 
tmp
, 
hÀn
);

31 *
d°
 = 
NGX_HTTP_V2_ENCODE_RAW
;

32 
d°
 = 
	`ngx_hâp_v2_wrôe_öt
(d°, 
	`ngx_hâp_v2_¥efix
(7), 
Àn
);

34 i‡(
lowî
) {

35 
	`ngx_°æow
(
d°
, 
§c
, 
Àn
);

36  
d°
 + 
Àn
;

39  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

40 
	}
}

43 
u_ch¨
 *

44 
	$ngx_hâp_v2_wrôe_öt
(
u_ch¨
 *
pos
, 
ngx_uöt_t
 
¥efix
,Çgx_uöt_à
vÆue
)

46 i‡(
vÆue
 < 
¥efix
) {

47 *
pos
++ |
vÆue
;

48  
pos
;

51 *
pos
++ |
¥efix
;

52 
vÆue
 -
¥efix
;

54 
vÆue
 >= 128) {

55 *
pos
++ = 
vÆue
 % 128 + 128;

56 
vÆue
 /= 128;

59 *
pos
++ = (
u_ch¨
Ë
vÆue
;

61  
pos
;

62 
	}
}

	@src/http/v2/ngx_http_v2_filter_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

12 
	~<ngöx.h
>

13 
	~<ngx_hâp_v2_moduÀ.h
>

21 
	#ngx_hâp_v2_öãgî_o˘ës
(
v
Ë(1 + (vË/ 127)

	)

23 
	#ngx_hâp_v2_lôîÆ_size
(
h
) \

24 (
	`ngx_hâp_v2_öãgî_o˘ës
((
h
Ë- 1Ë+ (hË- 1)

	)

27 
	#NGX_HTTP_V2_NO_TRAILERS
 (
ngx_hâp_v2_out_‰ame_t
 *Ë-1

	)

31 
ngx_°r_t
 
	m«me
;

32 
u_ch¨
 
	mödex
;

33 
ngx_uöt_t
 
	moff£t
;

34 } 
	tngx_hâp_v2_push_hódî_t
;

37 
ngx_hâp_v2_push_hódî_t
 
	gngx_hâp_v2_push_hódîs
[] = {

38 { 
ngx_°rög
(":auth‹ôy"), 
NGX_HTTP_V2_AUTHORITY_INDEX
,

39 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
) },

41 { 
ngx_°rög
("ac˚±-ícodög"), 
NGX_HTTP_V2_ACCEPT_ENCODING_INDEX
,

42 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
) },

44 { 
ngx_°rög
("ac˚±-œnguage"), 
NGX_HTTP_V2_ACCEPT_LANGUAGE_INDEX
,

45 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
) },

47 { 
ngx_°rög
("u£r-agít"), 
NGX_HTTP_V2_USER_AGENT_INDEX
,

48 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
) },

51 
	#NGX_HTTP_V2_PUSH_HEADERS
 \

52 ((
ngx_hâp_v2_push_hódîs
Ë/ (
ngx_hâp_v2_push_hódî_t
))

	)

55 
ngx_öt_t
 
ngx_hâp_v2_push_ªsour˚s
(
ngx_hâp_ªque°_t
 *
r
);

56 
ngx_öt_t
 
ngx_hâp_v2_push_ªsour˚
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_°r_t
 *
∑th
,Çgx_°r_à*
bö¨y
);

59 
ngx_hâp_v2_out_‰ame_t
 *
ngx_hâp_v2_¸óã_hódîs_‰ame
(

60 
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_uöt_t
 
fö
);

61 
ngx_hâp_v2_out_‰ame_t
 *
ngx_hâp_v2_¸óã_push_‰ame
(

62 
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

63 
ngx_hâp_v2_out_‰ame_t
 *
ngx_hâp_v2_¸óã_åaûîs_‰ame
(

64 
ngx_hâp_ªque°_t
 *
r
);

66 
ngx_chaö_t
 *
ngx_hâp_v2_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
fc
,

67 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
);

69 
ngx_chaö_t
 *
ngx_hâp_v2_fûãr_gë_shadow
(

70 
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_buf_t
 *
buf
, 
off_t
 
off£t
, off_à
size
);

71 
ngx_hâp_v2_out_‰ame_t
 *
ngx_hâp_v2_fûãr_gë_d©a_‰ame
(

72 
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
size_t
 
Àn
, 
ngx_chaö_t
 *
fú°
,

73 
ngx_chaö_t
 *
œ°
);

75 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_v2_Êow_c⁄åﬁ
(

76 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_hâp_v2_°ªam_t
 *
°ªam
);

77 
ngx_hâp_v2_waôög_queue
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

78 
ngx_hâp_v2_°ªam_t
 *
°ªam
);

80 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_v2_fûãr_£nd
(

81 
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_v2_°ªam_t
 *
°ªam
);

83 
ngx_öt_t
 
ngx_hâp_v2_hódîs_‰ame_h™dÀr
(

84 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
);

85 
ngx_öt_t
 
ngx_hâp_v2_push_‰ame_h™dÀr
(

86 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
);

87 
ngx_öt_t
 
ngx_hâp_v2_d©a_‰ame_h™dÀr
(

88 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
);

89 
ngx_ölöe
 
ngx_hâp_v2_h™dÀ_‰ame
(

90 
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
);

91 
ngx_ölöe
 
ngx_hâp_v2_h™dÀ_°ªam
(

92 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_hâp_v2_°ªam_t
 *
°ªam
);

94 
ngx_hâp_v2_fûãr_˛ónup
(*
d©a
);

96 
ngx_öt_t
 
ngx_hâp_v2_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

99 
ngx_hâp_moduÀ_t
 
	gngx_hâp_v2_fûãr_moduÀ_˘x
 = {

100 
NULL
,

101 
ngx_hâp_v2_fûãr_öô
,

103 
NULL
,

104 
NULL
,

106 
NULL
,

107 
NULL
,

109 
NULL
,

110 
NULL


114 
ngx_moduÀ_t
 
	gngx_hâp_v2_fûãr_moduÀ
 = {

115 
NGX_MODULE_V1
,

116 &
ngx_hâp_v2_fûãr_moduÀ_˘x
,

117 
NULL
,

118 
NGX_HTTP_MODULE
,

119 
NULL
,

120 
NULL
,

121 
NULL
,

122 
NULL
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
NGX_MODULE_V1_PADDING


130 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

133 
ngx_öt_t


134 
	$ngx_hâp_v2_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

136 
u_ch¨
 
°©us
, *
pos
, *
°¨t
, *
p
, *
tmp
;

137 
size_t
 
Àn
, 
tmp_Àn
;

138 
ngx_°r_t
 
ho°
, 
loˇti⁄
;

139 
ngx_uöt_t
 
i
, 
p‹t
, 
fö
;

140 
ngx_li°_∑π_t
 *
∑π
;

141 
ngx_èbÀ_ñt_t
 *
hódî
;

142 
ngx_c⁄√˘i⁄_t
 *
fc
;

143 
ngx_hâp_˛ónup_t
 *
˛n
;

144 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

145 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

146 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

147 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

148 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

149 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

151 c⁄° 
u_ch¨
 
ngöx
[5] = "\x84\xaa\x63\x55\xe7";

152 #i‡(
NGX_HTTP_GZIP
)

153 c⁄° 
u_ch¨
 
ac˚±_ícodög
[12] =

157 
size_t
 
ngöx_vî_Àn
 = 
	`ngx_hâp_v2_lôîÆ_size
(
NGINX_VER
);

158 
u_ch¨
 
ngöx_vî
[
	`ngx_hâp_v2_lôîÆ_size
(
NGINX_VER
)];

160 
size_t
 
ngöx_vî_buûd_Àn
 =

161 
	`ngx_hâp_v2_lôîÆ_size
(
NGINX_VER_BUILD
);

162 
u_ch¨
 
ngöx_vî_buûd
[
	`ngx_hâp_v2_lôîÆ_size
(
NGINX_VER_BUILD
)];

164 
°ªam
 = 
r
->stream;

166 i‡(!
°ªam
) {

167  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

170 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

173 i‡(
r
->
hódî_£¡
) {

174  
NGX_OK
;

177 
r
->
hódî_£¡
 = 1;

179 i‡(
r
 !r->
maö
) {

180  
NGX_OK
;

183 
fc
 = 
r
->
c⁄√˘i⁄
;

185 i‡(
fc
->
îr‹
) {

186  
NGX_ERROR
;

189 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

190 
r
->
hódî_⁄ly
 = 1;

193 
r
->
hódîs_out
.
°©us
) {

195 
NGX_HTTP_OK
:

196 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_200_INDEX
);

199 
NGX_HTTP_NO_CONTENT
:

200 
r
->
hódî_⁄ly
 = 1;

202 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

204 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

205 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

207 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

208 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

210 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_204_INDEX
);

213 
NGX_HTTP_PARTIAL_CONTENT
:

214 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_206_INDEX
);

217 
NGX_HTTP_NOT_MODIFIED
:

218 
r
->
hódî_⁄ly
 = 1;

219 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_304_INDEX
);

223 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

224 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

226 
r
->
hódîs_out
.
°©us
) {

228 
NGX_HTTP_BAD_REQUEST
:

229 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_400_INDEX
);

232 
NGX_HTTP_NOT_FOUND
:

233 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_404_INDEX
);

236 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

237 
°©us
 = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_STATUS_500_INDEX
);

241 
°©us
 = 0;

245 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

247 i‡(!
h2c
->
push_dißbÀd
 && !h2c->
gﬂway


248 && 
°ªam
->
node
->
id
 % 2 == 1

249 && 
r
->
mëhod
 !
NGX_HTTP_HEAD
)

251 i‡(
	`ngx_hâp_v2_push_ªsour˚s
(
r
Ë!
NGX_OK
) {

252  
NGX_ERROR
;

256 
Àn
 = 
h2c
->
èbÀ_upd©e
 ? 1 : 0;

258 
Àn
 +
°©us
 ? 1 : 1 + 
	`ngx_hâp_v2_lôîÆ_size
("418");

260 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

262 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

264 i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_ON
) {

265 
Àn
 +1 + 
ngöx_vî_Àn
;

267 } i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_BUILD
) {

268 
Àn
 +1 + 
ngöx_vî_buûd_Àn
;

271 
Àn
 +1 + (
ngöx
);

275 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

276 
Àn
 +1 + 
	`ngx_hâp_v2_lôîÆ_size
("Wed, 31 Dec 1986 18:00:00 GMT");

279 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

280 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

282 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


283 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

285 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

289 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


290 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

292 
Àn
 +1 + 
	`ngx_hâp_v2_öãgî_o˘ës
(
NGX_OFF_T_LEN
) + NGX_OFF_T_LEN;

295 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


296 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

298 
Àn
 +1 + 
	`ngx_hâp_v2_lôîÆ_size
("Wed, 31 Dec 1986 18:00:00 GMT");

301 i‡(
r
->
hódîs_out
.
loˇti⁄
 &&Ñ->hódîs_out.loˇti⁄->
vÆue
.
Àn
) {

303 i‡(
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/'

304 && 
˛cf
->
absﬁuã_ªdúe˘
)

306 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

307 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

308 
ho°
 = 
cscf
->
£rvî_«me
;

310 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

311 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

314 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

315 
ho°
.
d©a
 = 
addr
;

317 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
fc
, &
ho°
, 0Ë!
NGX_OK
) {

318  
NGX_ERROR
;

322 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
fc
->
loˇl_sockaddr
);

324 
loˇti⁄
.
Àn
 = ("hâps://"Ë- 1 + 
ho°
.len

325 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
;

327 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

329 #i‡(
NGX_HTTP_SSL
)

330 i‡(
fc
->
s¶
)

331 
p‹t
 = (port == 443) ? 0 :Öort;

334 
p‹t
 = (port == 80) ? 0 :Öort;

337 
p‹t
 = 0;

340 i‡(
p‹t
) {

341 
loˇti⁄
.
Àn
 += (":65535") - 1;

344 
loˇti⁄
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Üoˇti⁄.
Àn
);

345 i‡(
loˇti⁄
.
d©a
 =
NULL
) {

346  
NGX_ERROR
;

349 
p
 = 
	`ngx_˝ymem
(
loˇti⁄
.
d©a
, "http", ("http") - 1);

351 #i‡(
NGX_HTTP_SSL
)

352 i‡(
fc
->
s¶
) {

353 *
p
++ = 's';

357 *
p
++ = ':'; *p++ = '/'; *p++ = '/';

358 
p
 = 
	`ngx_˝ymem
’, 
ho°
.
d©a
, ho°.
Àn
);

360 i‡(
p‹t
) {

361 
p
 = 
	`ngx_•rötf
’, ":%ui", 
p‹t
);

364 
p
 = 
	`ngx_˝ymem
’, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

365 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

369 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
p
 -Üoˇti⁄.
d©a
;

370 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation.data;

371 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

374 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

376 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

379 
tmp_Àn
 = 
Àn
;

381 #i‡(
NGX_HTTP_GZIP
)

382 i‡(
r
->
gzù_v¨y
) {

383 i‡(
˛cf
->
gzù_v¨y
) {

384 
Àn
 +1 + (
ac˚±_ícodög
);

387 
r
->
gzù_v¨y
 = 0;

392 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

393 
hódî
 = 
∑π
->
ñts
;

395 
i
 = 0; ; i++) {

397 i‡(
i
 >
∑π
->
√…s
) {

398 i‡(
∑π
->
√xt
 =
NULL
) {

402 
∑π
 =Ö¨t->
√xt
;

403 
hódî
 = 
∑π
->
ñts
;

404 
i
 = 0;

407 i‡(
hódî
[
i
].
hash
 == 0) {

411 i‡(
hódî
[
i
].
key
.
Àn
 > 
NGX_HTTP_V2_MAX_FIELD
) {

412 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fc
->
log
, 0,

414 &
hódî
[
i
].
key
);

415  
NGX_ERROR
;

418 i‡(
hódî
[
i
].
vÆue
.
Àn
 > 
NGX_HTTP_V2_MAX_FIELD
) {

419 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fc
->
log
, 0,

421 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

422  
NGX_ERROR
;

425 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
hódî
[
i
].
key
.len

426 + 
NGX_HTTP_V2_INT_OCTETS
 + 
hódî
[
i
].
vÆue
.
Àn
;

428 i‡(
hódî
[
i
].
key
.
Àn
 > 
tmp_Àn
) {

429 
tmp_Àn
 = 
hódî
[
i
].
key
.
Àn
;

432 i‡(
hódî
[
i
].
vÆue
.
Àn
 > 
tmp_Àn
) {

433 
tmp_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

437 
tmp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
tmp_Àn
);

438 
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

440 i‡(
pos
 =
NULL
 || 
tmp
 == NULL) {

441  
NGX_ERROR
;

444 
°¨t
 = 
pos
;

446 i‡(
h2c
->
èbÀ_upd©e
) {

447 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

449 *
pos
++ = (1 << 5) | 0;

450 
h2c
->
èbÀ_upd©e
 = 0;

453 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

455 
r
->
hódîs_out
.
°©us
);

457 i‡(
°©us
) {

458 *
pos
++ = 
°©us
;

461 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_STATUS_INDEX
);

462 *
pos
++ = 
NGX_HTTP_V2_ENCODE_RAW
 | 3;

463 
pos
 = 
	`ngx_•rötf
’os, "%03ui", 
r
->
hódîs_out
.
°©us
);

466 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

468 i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_ON
) {

469 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

471 
NGINX_VER
);

473 } i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_BUILD
) {

474 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

476 
NGINX_VER_BUILD
);

479 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

483 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_SERVER_INDEX
);

485 i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_ON
) {

486 i‡(
ngöx_vî
[0] == '\0') {

487 
p
 = 
	`ngx_hâp_v2_wrôe_vÆue
(
ngöx_vî
, (
u_ch¨
 *Ë
NGINX_VER
,

488 (
NGINX_VER
Ë- 1, 
tmp
);

489 
ngöx_vî_Àn
 = 
p
 - 
ngöx_vî
;

492 
pos
 = 
	`ngx_˝ymem
’os, 
ngöx_vî
, 
ngöx_vî_Àn
);

494 } i‡(
˛cf
->
£rvî_tokís
 =
NGX_HTTP_SERVER_TOKENS_BUILD
) {

495 i‡(
ngöx_vî_buûd
[0] == '\0') {

496 
p
 = 
	`ngx_hâp_v2_wrôe_vÆue
(
ngöx_vî_buûd
,

497 (
u_ch¨
 *Ë
NGINX_VER_BUILD
,

498 (
NGINX_VER_BUILD
Ë- 1, 
tmp
);

499 
ngöx_vî_buûd_Àn
 = 
p
 - 
ngöx_vî_buûd
;

502 
pos
 = 
	`ngx_˝ymem
’os, 
ngöx_vî_buûd
, 
ngöx_vî_buûd_Àn
);

505 
pos
 = 
	`ngx_˝ymem
’os, 
ngöx
, (nginx));

509 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

510 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

512 &
ngx_ˇched_hâp_time
);

514 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_DATE_INDEX
);

515 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
ngx_ˇched_hâp_time
.
d©a
,

516 
ngx_ˇched_hâp_time
.
Àn
, 
tmp
);

519 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

520 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_CONTENT_TYPE_INDEX
);

522 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


523 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

525 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len + ("; charset=") - 1

526 + 
r
->
hódîs_out
.
ch¨£t
.
Àn
;

528 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

529 i‡(
p
 =
NULL
) {

530  
NGX_ERROR
;

533 
p
 = 
	`ngx_˝ymem
’, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

534 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

536 
p
 = 
	`ngx_˝ymem
(p, "; charset=", ("; charset=") - 1);

538 
p
 = 
	`ngx_˝ymem
’, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

539 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

543 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

544 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
 - 
Àn
;

547 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

549 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

551 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

552 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
, 
tmp
);

555 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


556 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

558 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

560 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

562 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_CONTENT_LENGTH_INDEX
);

564 
p
 = 
pos
;

565 
pos
 = 
	`ngx_•rötf
’o†+ 1, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

566 *
p
 = 
NGX_HTTP_V2_ENCODE_RAW
 | (
u_ch¨
Ë(
pos
 -Ö - 1);

569 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


570 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

572 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_LAST_MODIFIED_INDEX
);

574 
	`ngx_hâp_time
(
pos
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

575 
Àn
 = ("Wed, 31 Dec 1986 18:00:00 GMT") - 1;

577 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

579 
Àn
, 
pos
);

585 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os,Öos, 
Àn
, 
tmp
);

588 i‡(
r
->
hódîs_out
.
loˇti⁄
 &&Ñ->hódîs_out.loˇti⁄->
vÆue
.
Àn
) {

589 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

591 &
r
->
hódîs_out
.
loˇti⁄
->
vÆue
);

593 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_LOCATION_INDEX
);

594 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

595 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
, 
tmp
);

598 #i‡(
NGX_HTTP_GZIP
)

599 i‡(
r
->
gzù_v¨y
) {

600 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

603 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_VARY_INDEX
);

604 
pos
 = 
	`ngx_˝ymem
’os, 
ac˚±_ícodög
, (accept_encoding));

608 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

609 
hódî
 = 
∑π
->
ñts
;

611 
i
 = 0; ; i++) {

613 i‡(
i
 >
∑π
->
√…s
) {

614 i‡(
∑π
->
√xt
 =
NULL
) {

618 
∑π
 =Ö¨t->
√xt
;

619 
hódî
 = 
∑π
->
ñts
;

620 
i
 = 0;

623 i‡(
hódî
[
i
].
hash
 == 0) {

627 #i‡(
NGX_DEBUG
)

628 i‡(
fc
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
) {

629 
	`ngx_°æow
(
tmp
, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

631 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

633 
hódî
[
i
].
key
.
Àn
, 
tmp
, &hódî[i].
vÆue
);

637 *
pos
++ = 0;

639 
pos
 = 
	`ngx_hâp_v2_wrôe_«me
’os, 
hódî
[
i
].
key
.
d©a
,

640 
hódî
[
i
].
key
.
Àn
, 
tmp
);

642 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
hódî
[
i
].
vÆue
.
d©a
,

643 
hódî
[
i
].
vÆue
.
Àn
, 
tmp
);

646 
fö
 = 
r
->
hódî_⁄ly


647 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 =0 && !r->
ex≥˘_åaûîs
);

649 
‰ame
 = 
	`ngx_hâp_v2_¸óã_hódîs_‰ame
(
r
, 
°¨t
, 
pos
, 
fö
);

650 i‡(
‰ame
 =
NULL
) {

651  
NGX_ERROR
;

654 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

656 
°ªam
->
queued
++;

658 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

659 i‡(
˛n
 =
NULL
) {

660  
NGX_ERROR
;

663 
˛n
->
h™dÀr
 = 
ngx_hâp_v2_fûãr_˛ónup
;

664 
˛n
->
d©a
 = 
°ªam
;

666 
fc
->
£nd_chaö
 = 
ngx_hâp_v2_£nd_chaö
;

667 
fc
->
√ed_œ°_buf
 = 1;

669  
	`ngx_hâp_v2_fûãr_£nd
(
fc
, 
°ªam
);

670 
	}
}

673 
ngx_öt_t


674 
	$ngx_hâp_v2_push_ªsour˚s
(
ngx_hâp_ªque°_t
 *
r
)

676 
u_ch¨
 *
°¨t
, *
íd
, *
œ°
;

677 
ngx_öt_t
 
rc
;

678 
ngx_°r_t
 
∑th
;

679 
ngx_uöt_t
 
i
, 
push
;

680 
ngx_èbÀ_ñt_t
 **
h
;

681 
ngx_hâp_v2_loc_c⁄f_t
 *
h2lcf
;

682 
ngx_hâp_com∂ex_vÆue_t
 *
pushes
;

683 
ngx_°r_t
 
bö¨y
[
NGX_HTTP_V2_PUSH_HEADERS
];

685 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

688 
	`ngx_memzîo
(
bö¨y
, 
NGX_HTTP_V2_PUSH_HEADERS
 * (
ngx_°r_t
));

690 
h2lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_v2_moduÀ
);

692 i‡(
h2lcf
->
pushes
) {

693 
pushes
 = 
h2lcf
->pushes->
ñts
;

695 
i
 = 0; i < 
h2lcf
->
pushes
->
√…s
; i++) {

697 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
pushes
[
i
], &
∑th
Ë!
NGX_OK
) {

698  
NGX_ERROR
;

701 i‡(
∑th
.
Àn
 == 0) {

705 i‡(
∑th
.
Àn
 =3 && 
	`ngx_°∫cmp
’©h.
d©a
, "off", 3) == 0) {

709 
rc
 = 
	`ngx_hâp_v2_push_ªsour˚
(
r
, &
∑th
, 
bö¨y
);

711 i‡(
rc
 =
NGX_ERROR
) {

712  
NGX_ERROR
;

715 i‡(
rc
 =
NGX_ABORT
) {

716  
NGX_OK
;

723 i‡(!
h2lcf
->
push_¥ñﬂd
) {

724  
NGX_OK
;

727 
h
 = 
r
->
hódîs_out
.
lök
.
ñts
;

729 
i
 = 0; i < 
r
->
hódîs_out
.
lök
.
√…s
; i++) {

731 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

732 "hâp2Ö¨£Üök: \"%V\"", &
h
[
i
]->
vÆue
);

734 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

735 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

737 
√xt_lök
:

739 
°¨t
 < 
íd
 && *start == ' ') { start++; }

741 i‡(
°¨t
 =
íd
 || *start++ != '<') {

745 
°¨t
 < 
íd
 && *start == ' ') { start++; }

747 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != '>';Üast++) {

751 i‡(
œ°
 =
°¨t
 ||Üa° =
íd
) {

755 
∑th
.
Àn
 = 
œ°
 - 
°¨t
;

756 
∑th
.
d©a
 = 
°¨t
;

758 
°¨t
 = 
œ°
 + 1;

760 
°¨t
 < 
íd
 && *start == ' ') { start++; }

762 i‡(
°¨t
 =
íd
) {

766 i‡(*
°¨t
 == ',') {

767 
°¨t
++;

768 
√xt_lök
;

771 i‡(*
°¨t
++ != ';') {

775 
œ°
 = 
	`ngx_°æchr
(
°¨t
, 
íd
, ',');

777 i‡(
œ°
 =
NULL
) {

778 
œ°
 = 
íd
;

781 
push
 = 0;

785 
°¨t
 < 
œ°
 && *start == ' ') { start++; }

787 i‡(
œ°
 - 
°¨t
 >= 6

788 && 
	`ngx_°∫ˇ£cmp
(
°¨t
, (
u_ch¨
 *) "nopush", 6) == 0)

790 
°¨t
 += 6;

792 i‡(
°¨t
 =
œ°
 || *start == ' ' || *start == ';') {

793 
push
 = 0;

797 
√xt_∑øm
;

800 i‡(
œ°
 - 
°¨t
 >= 11

801 && 
	`ngx_°∫ˇ£cmp
(
°¨t
, (
u_ch¨
 *) "rel=preload", 11) == 0)

803 
°¨t
 += 11;

805 i‡(
°¨t
 =
œ°
 || *start == ' ' || *start == ';') {

806 
push
 = 1;

809 
√xt_∑øm
;

812 i‡(
œ°
 - 
°¨t
 >= 4

813 && 
	`ngx_°∫ˇ£cmp
(
°¨t
, (
u_ch¨
 *) "rel=", 4) == 0)

815 
°¨t
 += 4;

817 
°¨t
 < 
œ°
 && *start == ' ') { start++; }

819 i‡(
°¨t
 =
œ°
 || *start++ != '"') {

820 
√xt_∑øm
;

825 
°¨t
 < 
œ°
 && *start == ' ') { start++; }

827 i‡(
œ°
 - 
°¨t
 >= 7

828 && 
	`ngx_°∫ˇ£cmp
(
°¨t
, (
u_ch¨
 *) "preload", 7) == 0)

830 
°¨t
 += 7;

832 i‡(
°¨t
 < 
œ°
 && (*start == ' ' || *start == '"')) {

833 
push
 = 1;

838 
°¨t
 < 
œ°
 && *start != ' ' && *start != '"') {

839 
°¨t
++;

842 i‡(
°¨t
 =
œ°
) {

846 i‡(*
°¨t
 == '"') {

850 
°¨t
++;

854 
√xt_∑øm
:

856 
°¨t
 = 
	`ngx_°æchr
(°¨t, 
œ°
, ';');

858 i‡(
°¨t
 =
NULL
) {

862 
°¨t
++;

865 i‡(
push
) {

866 
∑th
.
Àn
 &&Ö©h.
d©a
[path.len - 1] == ' ') {

867 
∑th
.
Àn
--;

871 i‡(
push
 && 
∑th
.
Àn


872 && !(
∑th
.
Àn
 > 1 &&Ö©h.
d©a
[0] == '/' &&Öath.data[1] == '/'))

874 
rc
 = 
	`ngx_hâp_v2_push_ªsour˚
(
r
, &
∑th
, 
bö¨y
);

876 i‡(
rc
 =
NGX_ERROR
) {

877  
NGX_ERROR
;

880 i‡(
rc
 =
NGX_ABORT
) {

881  
NGX_OK
;

887 i‡(
œ°
 < 
íd
) {

888 
°¨t
 = 
œ°
 + 1;

889 
√xt_lök
;

893  
NGX_OK
;

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_hâp_v2_push_ªsour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

899 
ngx_°r_t
 *
bö¨y
)

901 
u_ch¨
 *
°¨t
, *
pos
, *
tmp
;

902 
size_t
 
Àn
;

903 
ngx_°r_t
 *
vÆue
;

904 
ngx_uöt_t
 
i
;

905 
ngx_èbÀ_ñt_t
 **
h
;

906 
ngx_c⁄√˘i⁄_t
 *
fc
;

907 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

908 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

909 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

910 
ngx_hâp_v2_push_hódî_t
 *
ph
;

912 
fc
 = 
r
->
c⁄√˘i⁄
;

914 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0, "http2ÖushÑesource");

916 
°ªam
 = 
r
->stream;

917 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

919 i‡(!
	`ngx_∑th_£∑øt‹
(
∑th
->
d©a
[0])) {

920 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
fc
->
log
, 0,

921 "n⁄-absﬁuãÖ©h \"%V\"ÇŸÖushed", 
∑th
);

922  
NGX_DECLINED
;

925 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

927 
h2c
->
pushög
, h2c->
c⁄cuºít_pushes
);

929 i‡(
h2c
->
pushög
 >h2c->
c⁄cuºít_pushes
) {

930  
NGX_ABORT
;

933 i‡(
h2c
->
œ°_push
 == 0x7ffffffe) {

934  
NGX_ABORT
;

937 i‡(
∑th
->
Àn
 > 
NGX_HTTP_V2_MAX_FIELD
) {

938  
NGX_DECLINED
;

941 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

942  
NGX_ABORT
;

945 
ph
 = 
ngx_hâp_v2_push_hódîs
;

947 
Àn
 = 
	`ngx_max
(
r
->
schema
.Àn, 
∑th
->len);

949 i‡(
bö¨y
[0].
Àn
) {

950 
tmp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
Àn
);

951 i‡(
tmp
 =
NULL
) {

952  
NGX_ERROR
;

956 
i
 = 0; i < 
NGX_HTTP_V2_PUSH_HEADERS
; i++) {

957 
h
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
ph
[
i
].
off£t
);

959 i‡(*
h
) {

960 
Àn
 = 
	`ngx_max
÷í, (*
h
)->
vÆue
.len);

964 
tmp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
Àn
);

965 i‡(
tmp
 =
NULL
) {

966  
NGX_ERROR
;

969 
i
 = 0; i < 
NGX_HTTP_V2_PUSH_HEADERS
; i++) {

970 
h
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
ph
[
i
].
off£t
);

972 i‡(*
h
 =
NULL
) {

976 
vÆue
 = &(*
h
)->value;

978 
Àn
 = 1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
vÆue
->len;

980 
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

981 i‡(
pos
 =
NULL
) {

982  
NGX_ERROR
;

985 
bö¨y
[
i
].
d©a
 = 
pos
;

987 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
ph
[
i
].
ödex
);

988 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
vÆue
->
d©a
, vÆue->
Àn
, 
tmp
);

990 
bö¨y
[
i
].
Àn
 = 
pos
 - bö¨y[i].
d©a
;

994 
Àn
 = (
h2c
->
èbÀ_upd©e
 ? 1 : 0)

996 + 1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
∑th
->
Àn


997 + 1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
r
->
schema
.
Àn
;

999 
i
 = 0; i < 
NGX_HTTP_V2_PUSH_HEADERS
; i++) {

1000 
Àn
 +
bö¨y
[
i
].len;

1003 
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1004 i‡(
pos
 =
NULL
) {

1005  
NGX_ERROR
;

1008 
°¨t
 = 
pos
;

1010 i‡(
h2c
->
èbÀ_upd©e
) {

1011 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

1013 *
pos
++ = (1 << 5) | 0;

1014 
h2c
->
èbÀ_upd©e
 = 0;

1017 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

1020 *
pos
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_METHOD_GET_INDEX
);

1022 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

1023 "hâp2Öush hódî: \":∑th: %V\"", 
∑th
);

1025 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_PATH_INDEX
);

1026 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
∑th
->
d©a
,Ö©h->
Àn
, 
tmp
);

1028 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

1029 "hâp2Öush hódî: \":scheme: %V\"", &
r
->
schema
);

1031 i‡(
r
->
schema
.
Àn
 =5 && 
	`ngx_°∫cmp
‘->schema.
d©a
, "https", 5) == 0) {

1032 *
pos
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_SCHEME_HTTPS_INDEX
);

1034 } i‡(
r
->
schema
.
Àn
 == 4

1035 && 
	`ngx_°∫cmp
(
r
->
schema
.
d©a
, "http", 4) == 0)

1037 *
pos
++ = 
	`ngx_hâp_v2_ödexed
(
NGX_HTTP_V2_SCHEME_HTTP_INDEX
);

1040 *
pos
++ = 
	`ngx_hâp_v2_öc_ödexed
(
NGX_HTTP_V2_SCHEME_HTTP_INDEX
);

1041 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
r
->
schema
.
d©a
,Ñ->schema.
Àn
, 
tmp
);

1044 
i
 = 0; i < 
NGX_HTTP_V2_PUSH_HEADERS
; i++) {

1045 
h
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
ph
[
i
].
off£t
);

1047 i‡(*
h
 =
NULL
) {

1051 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

1053 &
ph
[
i
].
«me
, &(*
h
)->
vÆue
);

1055 
pos
 = 
	`ngx_˝ymem
’os, 
bö¨y
[
i
].
d©a
, bö¨y[i].
Àn
);

1058 
‰ame
 = 
	`ngx_hâp_v2_¸óã_push_‰ame
(
r
, 
°¨t
, 
pos
);

1059 i‡(
‰ame
 =
NULL
) {

1060  
NGX_ERROR
;

1063 
	`ngx_hâp_v2_queue_blocked_‰ame
(
h2c
, 
‰ame
);

1065 
°ªam
->
queued
++;

1067 
°ªam
 = 
	`ngx_hâp_v2_push_°ªam
(°ªam, 
∑th
);

1069 i‡(
°ªam
) {

1070 
°ªam
->
ªque°
->
ªque°_Àngth
 = 
pos
 - 
°¨t
;

1071  
NGX_OK
;

1074  
NGX_ERROR
;

1075 
	}
}

1078 
ngx_hâp_v2_out_‰ame_t
 *

1079 
	$ngx_hâp_v2_¸óã_hódîs_‰ame
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
pos
,

1080 
u_ch¨
 *
íd
, 
ngx_uöt_t
 
fö
)

1082 
u_ch¨
 
ty≥
, 
Êags
;

1083 
size_t
 
ª°
, 
‰ame_size
;

1084 
ngx_buf_t
 *
b
;

1085 
ngx_chaö_t
 *
˛
, **
Œ
;

1086 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1087 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

1089 
°ªam
 = 
r
->stream;

1090 
ª°
 = 
íd
 - 
pos
;

1092 
‰ame
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v2_out_‰ame_t
));

1093 i‡(
‰ame
 =
NULL
) {

1094  
NULL
;

1097 
‰ame
->
h™dÀr
 = 
ngx_hâp_v2_hódîs_‰ame_h™dÀr
;

1098 
‰ame
->
°ªam
 = stream;

1099 
‰ame
->
Àngth
 = 
ª°
;

1100 
‰ame
->
blocked
 = 1;

1101 
‰ame
->
fö
 = fin;

1103 
Œ
 = &
‰ame
->
fú°
;

1105 
ty≥
 = 
NGX_HTTP_V2_HEADERS_FRAME
;

1106 
Êags
 = 
fö
 ? 
NGX_HTTP_V2_END_STREAM_FLAG
 : 
NGX_HTTP_V2_NO_FLAG
;

1107 
‰ame_size
 = 
°ªam
->
c⁄√˘i⁄
->frame_size;

1110 i‡(
ª°
 <
‰ame_size
) {

1111 
‰ame_size
 = 
ª°
;

1112 
Êags
 |
NGX_HTTP_V2_END_HEADERS_FLAG
;

1115 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_HTTP_V2_FRAME_HEADER_SIZE
);

1116 i‡(
b
 =
NULL
) {

1117  
NULL
;

1120 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_Àn_™d_ty≥
(b->œ°, 
‰ame_size
, 
ty≥
);

1121 *
b
->
œ°
++ = 
Êags
;

1122 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(b->œ°, 
°ªam
->
node
->
id
);

1124 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_v2_moduÀ
;

1126 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1127 i‡(
˛
 =
NULL
) {

1128  
NULL
;

1131 
˛
->
buf
 = 
b
;

1133 *
Œ
 = 
˛
;

1134 
Œ
 = &
˛
->
√xt
;

1136 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1137 i‡(
b
 =
NULL
) {

1138  
NULL
;

1141 
b
->
pos
 =Öos;

1143 
pos
 +
‰ame_size
;

1145 
b
->
œ°
 = 
pos
;

1146 
b
->
°¨t
 = b->
pos
;

1147 
b
->
íd
 = b->
œ°
;

1148 
b
->
ãmp‹¨y
 = 1;

1150 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1151 i‡(
˛
 =
NULL
) {

1152  
NULL
;

1155 
˛
->
buf
 = 
b
;

1157 *
Œ
 = 
˛
;

1158 
Œ
 = &
˛
->
√xt
;

1160 
ª°
 -
‰ame_size
;

1162 i‡(
ª°
) {

1163 
‰ame
->
Àngth
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE
;

1165 
ty≥
 = 
NGX_HTTP_V2_CONTINUATION_FRAME
;

1166 
Êags
 = 
NGX_HTTP_V2_NO_FLAG
;

1170 
b
->
œ°_buf
 = 
fö
;

1171 
˛
->
√xt
 = 
NULL
;

1172 
‰ame
->
œ°
 = 
˛
;

1174 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1176 
°ªam
->
node
->
id
, 
‰ame
, føme->
Àngth
, 
fö
);

1178  
‰ame
;

1180 
	}
}

1183 
ngx_hâp_v2_out_‰ame_t
 *

1184 
	$ngx_hâp_v2_¸óã_push_‰ame
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
)

1186 
u_ch¨
 
ty≥
, 
Êags
;

1187 
size_t
 
ª°
, 
‰ame_size
, 
Àn
;

1188 
ngx_buf_t
 *
b
;

1189 
ngx_chaö_t
 *
˛
, **
Œ
;

1190 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1191 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

1192 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

1194 
°ªam
 = 
r
->stream;

1195 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

1196 
ª°
 = 
NGX_HTTP_V2_STREAM_ID_SIZE
 + (
íd
 - 
pos
);

1198 
‰ame
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v2_out_‰ame_t
));

1199 i‡(
‰ame
 =
NULL
) {

1200  
NULL
;

1203 
‰ame
->
h™dÀr
 = 
ngx_hâp_v2_push_‰ame_h™dÀr
;

1204 
‰ame
->
°ªam
 = stream;

1205 
‰ame
->
Àngth
 = 
ª°
;

1206 
‰ame
->
blocked
 = 1;

1207 
‰ame
->
fö
 = 0;

1209 
Œ
 = &
‰ame
->
fú°
;

1211 
ty≥
 = 
NGX_HTTP_V2_PUSH_PROMISE_FRAME
;

1212 
Êags
 = 
NGX_HTTP_V2_NO_FLAG
;

1213 
‰ame_size
 = 
h2c
->frame_size;

1216 i‡(
ª°
 <
‰ame_size
) {

1217 
‰ame_size
 = 
ª°
;

1218 
Êags
 |
NGX_HTTP_V2_END_HEADERS_FLAG
;

1221 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1222 
NGX_HTTP_V2_FRAME_HEADER_SIZE


1223 + ((
ty≥
 =
NGX_HTTP_V2_PUSH_PROMISE_FRAME
)

1224 ? 
NGX_HTTP_V2_STREAM_ID_SIZE
 : 0));

1225 i‡(
b
 =
NULL
) {

1226  
NULL
;

1229 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_Àn_™d_ty≥
(b->œ°, 
‰ame_size
, 
ty≥
);

1230 *
b
->
œ°
++ = 
Êags
;

1231 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(b->œ°, 
°ªam
->
node
->
id
);

1233 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_v2_moduÀ
;

1235 i‡(
ty≥
 =
NGX_HTTP_V2_PUSH_PROMISE_FRAME
) {

1236 
h2c
->
œ°_push
 += 2;

1238 
b
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(b->œ°, 
h2c
->
œ°_push
);

1239 
Àn
 = 
‰ame_size
 - 
NGX_HTTP_V2_STREAM_ID_SIZE
;

1242 
Àn
 = 
‰ame_size
;

1245 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1246 i‡(
˛
 =
NULL
) {

1247  
NULL
;

1250 
˛
->
buf
 = 
b
;

1252 *
Œ
 = 
˛
;

1253 
Œ
 = &
˛
->
√xt
;

1255 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

1256 i‡(
b
 =
NULL
) {

1257  
NULL
;

1260 
b
->
pos
 =Öos;

1262 
pos
 +
Àn
;

1264 
b
->
œ°
 = 
pos
;

1265 
b
->
°¨t
 = b->
pos
;

1266 
b
->
íd
 = b->
œ°
;

1267 
b
->
ãmp‹¨y
 = 1;

1269 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1270 i‡(
˛
 =
NULL
) {

1271  
NULL
;

1274 
˛
->
buf
 = 
b
;

1276 *
Œ
 = 
˛
;

1277 
Œ
 = &
˛
->
√xt
;

1279 
ª°
 -
‰ame_size
;

1281 i‡(
ª°
) {

1282 
‰ame
->
Àngth
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE
;

1284 
ty≥
 = 
NGX_HTTP_V2_CONTINUATION_FRAME
;

1288 
˛
->
√xt
 = 
NULL
;

1289 
‰ame
->
œ°
 = 
˛
;

1291 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1294 
°ªam
->
node
->
id
, 
‰ame
, 
h2c
->
œ°_push
,

1295 
‰ame
->
Àngth
);

1297  
‰ame
;

1299 
	}
}

1302 
ngx_hâp_v2_out_‰ame_t
 *

1303 
	$ngx_hâp_v2_¸óã_åaûîs_‰ame
(
ngx_hâp_ªque°_t
 *
r
)

1305 
u_ch¨
 *
pos
, *
°¨t
, *
tmp
;

1306 
size_t
 
Àn
, 
tmp_Àn
;

1307 
ngx_uöt_t
 
i
;

1308 
ngx_li°_∑π_t
 *
∑π
;

1309 
ngx_èbÀ_ñt_t
 *
hódî
;

1310 
ngx_c⁄√˘i⁄_t
 *
fc
;

1312 
fc
 = 
r
->
c⁄√˘i⁄
;

1313 
Àn
 = 0;

1314 
tmp_Àn
 = 0;

1316 
∑π
 = &
r
->
hódîs_out
.
åaûîs
.part;

1317 
hódî
 = 
∑π
->
ñts
;

1319 
i
 = 0; ; i++) {

1321 i‡(
i
 >
∑π
->
√…s
) {

1322 i‡(
∑π
->
√xt
 =
NULL
) {

1326 
∑π
 =Ö¨t->
√xt
;

1327 
hódî
 = 
∑π
->
ñts
;

1328 
i
 = 0;

1331 i‡(
hódî
[
i
].
hash
 == 0) {

1335 i‡(
hódî
[
i
].
key
.
Àn
 > 
NGX_HTTP_V2_MAX_FIELD
) {

1336 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fc
->
log
, 0,

1338 &
hódî
[
i
].
key
);

1339  
NULL
;

1342 i‡(
hódî
[
i
].
vÆue
.
Àn
 > 
NGX_HTTP_V2_MAX_FIELD
) {

1343 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fc
->
log
, 0,

1345 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1346  
NULL
;

1349 
Àn
 +1 + 
NGX_HTTP_V2_INT_OCTETS
 + 
hódî
[
i
].
key
.len

1350 + 
NGX_HTTP_V2_INT_OCTETS
 + 
hódî
[
i
].
vÆue
.
Àn
;

1352 i‡(
hódî
[
i
].
key
.
Àn
 > 
tmp_Àn
) {

1353 
tmp_Àn
 = 
hódî
[
i
].
key
.
Àn
;

1356 i‡(
hódî
[
i
].
vÆue
.
Àn
 > 
tmp_Àn
) {

1357 
tmp_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1361 i‡(
Àn
 == 0) {

1362  
NGX_HTTP_V2_NO_TRAILERS
;

1365 
tmp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
tmp_Àn
);

1366 
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1368 i‡(
pos
 =
NULL
 || 
tmp
 == NULL) {

1369  
NULL
;

1372 
°¨t
 = 
pos
;

1374 
∑π
 = &
r
->
hódîs_out
.
åaûîs
.part;

1375 
hódî
 = 
∑π
->
ñts
;

1377 
i
 = 0; ; i++) {

1379 i‡(
i
 >
∑π
->
√…s
) {

1380 i‡(
∑π
->
√xt
 =
NULL
) {

1384 
∑π
 =Ö¨t->
√xt
;

1385 
hódî
 = 
∑π
->
ñts
;

1386 
i
 = 0;

1389 i‡(
hódî
[
i
].
hash
 == 0) {

1393 #i‡(
NGX_DEBUG
)

1394 i‡(
fc
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
) {

1395 
	`ngx_°æow
(
tmp
, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1397 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
fc
->
log
, 0,

1399 
hódî
[
i
].
key
.
Àn
, 
tmp
, &hódî[i].
vÆue
);

1403 *
pos
++ = 0;

1405 
pos
 = 
	`ngx_hâp_v2_wrôe_«me
’os, 
hódî
[
i
].
key
.
d©a
,

1406 
hódî
[
i
].
key
.
Àn
, 
tmp
);

1408 
pos
 = 
	`ngx_hâp_v2_wrôe_vÆue
’os, 
hódî
[
i
].
vÆue
.
d©a
,

1409 
hódî
[
i
].
vÆue
.
Àn
, 
tmp
);

1412  
	`ngx_hâp_v2_¸óã_hódîs_‰ame
(
r
, 
°¨t
, 
pos
, 1);

1413 
	}
}

1416 
ngx_chaö_t
 *

1417 
	$ngx_hâp_v2_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

1419 
off_t
 
size
, 
off£t
;

1420 
size_t
 
ª°
, 
‰ame_size
;

1421 
ngx_chaö_t
 *
˛
, *
out
, **
 
;

1422 
ngx_hâp_ªque°_t
 *
r
;

1423 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1424 
ngx_hâp_v2_loc_c⁄f_t
 *
h2lcf
;

1425 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
, *
åaûîs
;

1426 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

1428 
r
 = 
fc
->
d©a
;

1429 
°ªam
 = 
r
->stream;

1431 #i‡(
NGX_SUPPRESS_WARN
)

1432 
size
 = 0;

1435 
ö
) {

1436 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

1438 i‡(
size
 || 
ö
->
buf
->
œ°_buf
) {

1442 
ö
 = in->
√xt
;

1445 i‡(
ö
 =
NULL
 || 
°ªam
->
out_˛o£d
) {

1447 i‡(
°ªam
->
queued
) {

1448 
fc
->
wrôe
->
a˘ive
 = 1;

1449 
fc
->
wrôe
->
ªady
 = 0;

1452 
fc
->
buf„ªd
 &~
NGX_HTTP_V2_BUFFERED
;

1455  
NULL
;

1458 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

1460 i‡(
size
 && 
	`ngx_hâp_v2_Êow_c⁄åﬁ
(
h2c
, 
°ªam
Ë=
NGX_DECLINED
) {

1461 
fc
->
wrôe
->
a˘ive
 = 1;

1462 
fc
->
wrôe
->
ªady
 = 0;

1463  
ö
;

1466 i‡(
ö
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_v2_fûãr_gë_shadow
) {

1467 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1468 i‡(
˛
 =
NULL
) {

1469  
NGX_CHAIN_ERROR
;

1472 
˛
->
buf
 = 
ö
->buf;

1473 
ö
->
buf
 = 
˛
->buf->
shadow
;

1475 
off£t
 = 
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)

1476 ? (
˛
->
buf
->
pos
 - 
ö
->buf->pos)

1477 : (
˛
->
buf
->
fûe_pos
 - 
ö
->buf->file_pos);

1479 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

1480 
°ªam
->
‰ì_bufs
 = 
˛
;

1483 
off£t
 = 0;

1486 i‡(
limô
 =0 ||Üimô > (
off_t
Ë
h2c
->
£nd_wödow
) {

1487 
limô
 = 
h2c
->
£nd_wödow
;

1490 i‡(
limô
 > 
°ªam
->
£nd_wödow
) {

1491 
limô
 = (
°ªam
->
£nd_wödow
 > 0) ? stream->send_window : 0;

1494 
h2lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_v2_moduÀ
);

1496 
‰ame_size
 = (
h2lcf
->
chunk_size
 < 
h2c
->frame_size)

1497 ? 
h2lcf
->
chunk_size
 : 
h2c
->
‰ame_size
;

1499 
åaûîs
 = 
NGX_HTTP_V2_NO_TRAILERS
;

1501 #i‡(
NGX_SUPPRESS_WARN
)

1502 
˛
 = 
NULL
;

1506 i‡((
off_t
Ë
‰ame_size
 > 
limô
) {

1507 
‰ame_size
 = (
size_t
Ë
limô
;

1510 
 
 = &
out
;

1511 
ª°
 = 
‰ame_size
;

1513 (
off_t
Ë
ª°
 >
size
) {

1515 i‡(
off£t
) {

1516 
˛
 = 
	`ngx_hâp_v2_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
,

1517 
off£t
, 
size
);

1518 i‡(
˛
 =
NULL
) {

1519  
NGX_CHAIN_ERROR
;

1522 
off£t
 = 0;

1525 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1526 i‡(
˛
 =
NULL
) {

1527  
NGX_CHAIN_ERROR
;

1530 
˛
->
buf
 = 
ö
->buf;

1533 *
 
 = 
˛
;

1534 
 
 = &
˛
->
√xt
;

1536 
ª°
 -(
size_t
Ë
size
;

1537 
ö
 = in->
√xt
;

1539 i‡(
ö
 =
NULL
) {

1540 
‰ame_size
 -
ª°
;

1541 
ª°
 = 0;

1545 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

1548 i‡(
ª°
) {

1549 
˛
 = 
	`ngx_hâp_v2_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
, 
off£t
, 
ª°
);

1550 i‡(
˛
 =
NULL
) {

1551  
NGX_CHAIN_ERROR
;

1554 
˛
->
buf
->
Êush
 = 0;

1555 
˛
->
buf
->
œ°_buf
 = 0;

1557 *
 
 = 
˛
;

1559 
off£t
 +
ª°
;

1560 
size
 -
ª°
;

1563 i‡(
˛
->
buf
->
œ°_buf
) {

1564 
åaûîs
 = 
	`ngx_hâp_v2_¸óã_åaûîs_‰ame
(
r
);

1565 i‡(
åaûîs
 =
NULL
) {

1566  
NGX_CHAIN_ERROR
;

1569 i‡(
åaûîs
 !
NGX_HTTP_V2_NO_TRAILERS
) {

1570 
˛
->
buf
->
œ°_buf
 = 0;

1574 i‡(
‰ame_size
 || 
˛
->
buf
->
œ°_buf
) {

1575 
‰ame
 = 
	`ngx_hâp_v2_fûãr_gë_d©a_‰ame
(
°ªam
, 
‰ame_size
,

1576 
out
, 
˛
);

1577 i‡(
‰ame
 =
NULL
) {

1578  
NGX_CHAIN_ERROR
;

1581 
	`ngx_hâp_v2_queue_‰ame
(
h2c
, 
‰ame
);

1583 
h2c
->
£nd_wödow
 -
‰ame_size
;

1585 
°ªam
->
£nd_wödow
 -
‰ame_size
;

1586 
°ªam
->
queued
++;

1589 i‡(
ö
 =
NULL
) {

1591 i‡(
åaûîs
 !
NGX_HTTP_V2_NO_TRAILERS
) {

1592 
	`ngx_hâp_v2_queue_‰ame
(
h2c
, 
åaûîs
);

1593 
°ªam
->
queued
++;

1599 
limô
 -
‰ame_size
;

1601 i‡(
limô
 == 0) {

1606 i‡(
off£t
) {

1607 
˛
 = 
	`ngx_hâp_v2_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
, 
off£t
, 
size
);

1608 i‡(
˛
 =
NULL
) {

1609  
NGX_CHAIN_ERROR
;

1612 
ö
->
buf
 = 
˛
->buf;

1613 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
˛
);

1616 i‡(
	`ngx_hâp_v2_fûãr_£nd
(
fc
, 
°ªam
Ë=
NGX_ERROR
) {

1617  
NGX_CHAIN_ERROR
;

1620 i‡(
ö
 && 
	`ngx_hâp_v2_Êow_c⁄åﬁ
(
h2c
, 
°ªam
Ë=
NGX_DECLINED
) {

1621 
fc
->
wrôe
->
a˘ive
 = 1;

1622 
fc
->
wrôe
->
ªady
 = 0;

1625  
ö
;

1626 
	}
}

1629 
ngx_chaö_t
 *

1630 
	$ngx_hâp_v2_fûãr_gë_shadow
(
ngx_hâp_v2_°ªam_t
 *
°ªam
, 
ngx_buf_t
 *
buf
,

1631 
off_t
 
off£t
, off_à
size
)

1633 
ngx_buf_t
 *
chunk
;

1634 
ngx_chaö_t
 *
˛
;

1636 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
, &°ªam->
‰ì_bufs
);

1637 i‡(
˛
 =
NULL
) {

1638  
NULL
;

1641 
chunk
 = 
˛
->
buf
;

1643 
	`ngx_mem˝y
(
chunk
, 
buf
, (
ngx_buf_t
));

1645 
chunk
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_v2_fûãr_gë_shadow
;

1646 
chunk
->
shadow
 = 
buf
;

1648 i‡(
	`ngx_buf_ö_mem‹y
(
chunk
)) {

1649 
chunk
->
pos
 +
off£t
;

1650 
chunk
->
œ°
 = chunk->
pos
 + 
size
;

1653 i‡(
chunk
->
ö_fûe
) {

1654 
chunk
->
fûe_pos
 +
off£t
;

1655 
chunk
->
fûe_œ°
 = chunk->
fûe_pos
 + 
size
;

1658  
˛
;

1659 
	}
}

1662 
ngx_hâp_v2_out_‰ame_t
 *

1663 
	$ngx_hâp_v2_fûãr_gë_d©a_‰ame
(
ngx_hâp_v2_°ªam_t
 *
°ªam
,

1664 
size_t
 
Àn
, 
ngx_chaö_t
 *
fú°
,Çgx_chaö_à*
œ°
)

1666 
u_ch¨
 
Êags
;

1667 
ngx_buf_t
 *
buf
;

1668 
ngx_chaö_t
 *
˛
;

1669 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
;

1671 
‰ame
 = 
°ªam
->
‰ì_‰ames
;

1673 i‡(
‰ame
) {

1674 
°ªam
->
‰ì_‰ames
 = 
‰ame
->
√xt
;

1677 
‰ame
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
,

1678 (
ngx_hâp_v2_out_‰ame_t
));

1679 i‡(
‰ame
 =
NULL
) {

1680  
NULL
;

1684 
Êags
 = 
œ°
->
buf
->
œ°_buf
 ? 
NGX_HTTP_V2_END_STREAM_FLAG
 : 0;

1686 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1688 
°ªam
->
node
->
id
, 
‰ame
, 
Àn
, (
ngx_uöt_t
Ë
Êags
);

1690 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
,

1691 &
°ªam
->
‰ì_‰ame_hódîs
);

1692 i‡(
˛
 =
NULL
) {

1693  
NULL
;

1696 
buf
 = 
˛
->buf;

1698 i‡(
buf
->
°¨t
 =
NULL
) {

1699 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
,

1700 
NGX_HTTP_V2_FRAME_HEADER_SIZE
);

1701 i‡(
buf
->
°¨t
 =
NULL
) {

1702  
NULL
;

1705 
buf
->
íd
 = buf->
°¨t
 + 
NGX_HTTP_V2_FRAME_HEADER_SIZE
;

1706 
buf
->
œ°
 = buf->
íd
;

1708 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_v2_moduÀ
;

1709 
buf
->
mem‹y
 = 1;

1712 
buf
->
pos
 = buf->
°¨t
;

1713 
buf
->
œ°
 = buf->
pos
;

1715 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_Àn_™d_ty≥
(buf->œ°, 
Àn
,

1716 
NGX_HTTP_V2_DATA_FRAME
);

1717 *
buf
->
œ°
++ = 
Êags
;

1719 
buf
->
œ°
 = 
	`ngx_hâp_v2_wrôe_sid
(buf->œ°, 
°ªam
->
node
->
id
);

1721 
˛
->
√xt
 = 
fú°
;

1722 
fú°
 = 
˛
;

1724 
œ°
->
buf
->
Êush
 = 1;

1726 
‰ame
->
fú°
 = first;

1727 
‰ame
->
œ°
 =Üast;

1728 
‰ame
->
h™dÀr
 = 
ngx_hâp_v2_d©a_‰ame_h™dÀr
;

1729 
‰ame
->
°ªam
 = stream;

1730 
‰ame
->
Àngth
 = 
Àn
;

1731 
‰ame
->
blocked
 = 0;

1732 
‰ame
->
fö
 = 
œ°
->
buf
->
œ°_buf
;

1734  
‰ame
;

1735 
	}
}

1738 
ngx_ölöe
 
ngx_öt_t


1739 
	$ngx_hâp_v2_Êow_c⁄åﬁ
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

1740 
ngx_hâp_v2_°ªam_t
 *
°ªam
)

1742 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1744 
°ªam
->
node
->
id
, 
h2c
->
£nd_wödow
, stream->send_window);

1746 i‡(
°ªam
->
£nd_wödow
 <= 0) {

1747 
°ªam
->
exhau°ed
 = 1;

1748  
NGX_DECLINED
;

1751 i‡(
h2c
->
£nd_wödow
 == 0) {

1752 
	`ngx_hâp_v2_waôög_queue
(
h2c
, 
°ªam
);

1753  
NGX_DECLINED
;

1756  
NGX_OK
;

1757 
	}
}

1761 
	$ngx_hâp_v2_waôög_queue
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

1762 
ngx_hâp_v2_°ªam_t
 *
°ªam
)

1764 
ngx_queue_t
 *
q
;

1765 
ngx_hâp_v2_°ªam_t
 *
s
;

1767 i‡(
°ªam
->
waôög
) {

1771 
°ªam
->
waôög
 = 1;

1773 
q
 = 
	`ngx_queue_œ°
(&
h2c
->
waôög
);

1774 
q
 !
	`ngx_queue_£¡öñ
(&
h2c
->
waôög
);

1775 
q
 = 
	`ngx_queue_¥ev
(q))

1777 
s
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_°ªam_t
, 
queue
);

1779 i‡(
s
->
node
->
ønk
 < 
°ªam
->node->rank

1780 || (
s
->
node
->
ønk
 =
°ªam
->node->rank

1781 && 
s
->
node
->
ªl_weight
 >
°ªam
->node->rel_weight))

1787 
	`ngx_queue_ö£π_a·î
(
q
, &
°ªam
->
queue
);

1788 
	}
}

1791 
ngx_ölöe
 
ngx_öt_t


1792 
	$ngx_hâp_v2_fûãr_£nd
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_v2_°ªam_t
 *
°ªam
)

1794 
°ªam
->
blocked
 = 1;

1796 i‡(
	`ngx_hâp_v2_£nd_ouçut_queue
(
°ªam
->
c⁄√˘i⁄
Ë=
NGX_ERROR
) {

1797 
fc
->
îr‹
 = 1;

1798  
NGX_ERROR
;

1801 
°ªam
->
blocked
 = 0;

1803 i‡(
°ªam
->
queued
) {

1804 
fc
->
buf„ªd
 |
NGX_HTTP_V2_BUFFERED
;

1805 
fc
->
wrôe
->
a˘ive
 = 1;

1806 
fc
->
wrôe
->
ªady
 = 0;

1807  
NGX_AGAIN
;

1810 
fc
->
buf„ªd
 &~
NGX_HTTP_V2_BUFFERED
;

1812  
NGX_OK
;

1813 
	}
}

1816 
ngx_öt_t


1817 
	$ngx_hâp_v2_hódîs_‰ame_h™dÀr
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

1818 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

1820 
ngx_chaö_t
 *
˛
, *
 
;

1821 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1823 
°ªam
 = 
‰ame
->stream;

1824 
˛
 = 
‰ame
->
fú°
;

1827 i‡(
˛
->
buf
->
pos
 !˛->buf->
œ°
) {

1828 
‰ame
->
fú°
 = 
˛
;

1830 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1832 
°ªam
->
node
->
id
, 
‰ame
);

1834  
NGX_AGAIN
;

1837 
 
 = 
˛
->
√xt
;

1839 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_v2_moduÀ
) {

1840 
˛
->
√xt
 = 
°ªam
->
‰ì_‰ame_hódîs
;

1841 
°ªam
->
‰ì_‰ame_hódîs
 = 
˛
;

1844 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

1845 
°ªam
->
‰ì_bufs
 = 
˛
;

1848 i‡(
˛
 =
‰ame
->
œ°
) {

1852 
˛
 = 
 
;

1855 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1857 
°ªam
->
node
->
id
, 
‰ame
);

1859 
°ªam
->
ªque°
->
hódî_size
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE


1860 + 
‰ame
->
Àngth
;

1862 
	`ngx_hâp_v2_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

1864 
	`ngx_hâp_v2_h™dÀ_°ªam
(
h2c
, 
°ªam
);

1866  
NGX_OK
;

1867 
	}
}

1870 
ngx_öt_t


1871 
	$ngx_hâp_v2_push_‰ame_h™dÀr
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

1872 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

1874 
ngx_chaö_t
 *
˛
, *
 
;

1875 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1877 
°ªam
 = 
‰ame
->stream;

1878 
˛
 = 
‰ame
->
fú°
;

1881 i‡(
˛
->
buf
->
pos
 !˛->buf->
œ°
) {

1882 
‰ame
->
fú°
 = 
˛
;

1884 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1886 
°ªam
->
node
->
id
, 
‰ame
);

1888  
NGX_AGAIN
;

1891 
 
 = 
˛
->
√xt
;

1893 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_v2_moduÀ
) {

1894 
˛
->
√xt
 = 
°ªam
->
‰ì_‰ame_hódîs
;

1895 
°ªam
->
‰ì_‰ame_hódîs
 = 
˛
;

1898 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

1899 
°ªam
->
‰ì_bufs
 = 
˛
;

1902 i‡(
˛
 =
‰ame
->
œ°
) {

1906 
˛
 = 
 
;

1909 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1911 
°ªam
->
node
->
id
, 
‰ame
);

1913 
°ªam
->
ªque°
->
hódî_size
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE


1914 + 
‰ame
->
Àngth
;

1916 
	`ngx_hâp_v2_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

1918 
	`ngx_hâp_v2_h™dÀ_°ªam
(
h2c
, 
°ªam
);

1920  
NGX_OK
;

1921 
	}
}

1924 
ngx_öt_t


1925 
	$ngx_hâp_v2_d©a_‰ame_h™dÀr
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

1926 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

1928 
ngx_buf_t
 *
buf
;

1929 
ngx_chaö_t
 *
˛
, *
 
;

1930 
ngx_hâp_v2_°ªam_t
 *
°ªam
;

1932 
°ªam
 = 
‰ame
->stream;

1933 
˛
 = 
‰ame
->
fú°
;

1935 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_v2_moduÀ
) {

1937 i‡(
˛
->
buf
->
pos
 !˛->buf->
œ°
) {

1938 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1940 
°ªam
->
node
->
id
, 
‰ame
);

1942  
NGX_AGAIN
;

1945 
 
 = 
˛
->
√xt
;

1947 
˛
->
√xt
 = 
°ªam
->
‰ì_‰ame_hódîs
;

1948 
°ªam
->
‰ì_‰ame_hódîs
 = 
˛
;

1950 i‡(
˛
 =
‰ame
->
œ°
) {

1951 
d⁄e
;

1954 
˛
 = 
 
;

1958 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_v2_fûãr_gë_shadow
) {

1959 
buf
 = 
˛
->buf->
shadow
;

1961 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

1962 
buf
->
pos
 = 
˛
->buf->pos;

1965 i‡(
buf
->
ö_fûe
) {

1966 
buf
->
fûe_pos
 = 
˛
->buf->file_pos;

1970 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

1972 i‡(
˛
 !
‰ame
->
fú°
) {

1973 
‰ame
->
fú°
 = 
˛
;

1974 
	`ngx_hâp_v2_h™dÀ_°ªam
(
h2c
, 
°ªam
);

1977 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

1979 
°ªam
->
node
->
id
, 
‰ame
);

1981  
NGX_AGAIN
;

1984 
 
 = 
˛
->
√xt
;

1986 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_v2_fûãr_gë_shadow
) {

1987 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

1988 
°ªam
->
‰ì_bufs
 = 
˛
;

1991 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
˛
);

1994 i‡(
˛
 =
‰ame
->
œ°
) {

1995 
d⁄e
;

1998 
˛
 = 
 
;

2001 
d⁄e
:

2003 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

2005 
°ªam
->
node
->
id
, 
‰ame
);

2007 
°ªam
->
ªque°
->
hódî_size
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE
;

2009 
	`ngx_hâp_v2_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

2011 
	`ngx_hâp_v2_h™dÀ_°ªam
(
h2c
, 
°ªam
);

2013  
NGX_OK
;

2014 
	}
}

2017 
ngx_ölöe
 

2018 
	$ngx_hâp_v2_h™dÀ_‰ame
(
ngx_hâp_v2_°ªam_t
 *
°ªam
,

2019 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
)

2021 
ngx_hâp_ªque°_t
 *
r
;

2023 
r
 = 
°ªam
->
ªque°
;

2025 
r
->
c⁄√˘i⁄
->
£¡
 +
NGX_HTTP_V2_FRAME_HEADER_SIZE
 + 
‰ame
->
Àngth
;

2027 i‡(
‰ame
->
fö
) {

2028 
°ªam
->
out_˛o£d
 = 1;

2031 
‰ame
->
√xt
 = 
°ªam
->
‰ì_‰ames
;

2032 
°ªam
->
‰ì_‰ames
 = 
‰ame
;

2034 
°ªam
->
queued
--;

2035 
	}
}

2038 
ngx_ölöe
 

2039 
	$ngx_hâp_v2_h™dÀ_°ªam
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

2040 
ngx_hâp_v2_°ªam_t
 *
°ªam
)

2042 
ngx_evít_t
 *
wev
;

2043 
ngx_c⁄√˘i⁄_t
 *
fc
;

2045 i‡(
°ªam
->
waôög
 || såóm->
blocked
) {

2049 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

2051 i‡(!
fc
->
îr‹
 && 
°ªam
->
exhau°ed
) {

2055 
wev
 = 
fc
->
wrôe
;

2057 
wev
->
a˘ive
 = 0;

2058 
wev
->
ªady
 = 1;

2060 i‡(!
fc
->
îr‹
 && 
wev
->
dñayed
) {

2064 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

2065 
	}
}

2069 
	$ngx_hâp_v2_fûãr_˛ónup
(*
d©a
)

2071 
ngx_hâp_v2_°ªam_t
 *
°ªam
 = 
d©a
;

2073 
size_t
 
wödow
;

2074 
ngx_evít_t
 *
wev
;

2075 
ngx_queue_t
 *
q
;

2076 
ngx_hâp_v2_out_‰ame_t
 *
‰ame
, **
‚
;

2077 
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
;

2079 i‡(
°ªam
->
waôög
) {

2080 
°ªam
->
waôög
 = 0;

2081 
	`ngx_queue_ªmove
(&
°ªam
->
queue
);

2084 i‡(
°ªam
->
queued
 == 0) {

2088 
wödow
 = 0;

2089 
h2c
 = 
°ªam
->
c⁄√˘i⁄
;

2090 
‚
 = &
h2c
->
œ°_out
;

2093 
‰ame
 = *
‚
;

2095 i‡(
‰ame
 =
NULL
) {

2099 i‡(
‰ame
->
°ªam
 =°ªam && !‰ame->
blocked
) {

2100 *
‚
 = 
‰ame
->
√xt
;

2102 
wödow
 +
‰ame
->
Àngth
;

2104 i‡(--
°ªam
->
queued
 == 0) {

2111 
‚
 = &
‰ame
->
√xt
;

2114 i‡(
h2c
->
£nd_wödow
 =0 && 
wödow
) {

2116 !
	`ngx_queue_em±y
(&
h2c
->
waôög
)) {

2117 
q
 = 
	`ngx_queue_hód
(&
h2c
->
waôög
);

2119 
	`ngx_queue_ªmove
(
q
);

2121 
°ªam
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_v2_°ªam_t
, 
queue
);

2123 
°ªam
->
waôög
 = 0;

2125 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

2127 
wev
->
a˘ive
 = 0;

2128 
wev
->
ªady
 = 1;

2130 i‡(!
wev
->
dñayed
) {

2131 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

2136 
h2c
->
£nd_wödow
 +
wödow
;

2137 
	}
}

2140 
ngx_öt_t


2141 
	$ngx_hâp_v2_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2143 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2144 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_v2_hódî_fûãr
;

2146  
NGX_OK
;

2147 
	}
}

	@src/http/v2/ngx_http_v2_huff_decode.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	m√xt
;

15 
u_ch¨
 
	memô
;

16 
u_ch¨
 
	msym
;

17 
u_ch¨
 
	mídög
;

18 } 
	tngx_hâp_v2_huff_decode_code_t
;

21 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_v2_huff_decode_bôs
(
u_ch¨
 *
°©e
,

22 
u_ch¨
 *
ídög
, 
ngx_uöt_t
 
bôs
, u_ch¨ **
d°
);

25 
ngx_hâp_v2_huff_decode_code_t
 
	gngx_hâp_v2_huff_decode_codes
[256][16] =

2642 
ngx_öt_t


2643 
	$ngx_hâp_v2_huff_decode
(
u_ch¨
 *
°©e
, u_ch¨ *
§c
, 
size_t
 
Àn
, u_ch¨ **
d°
,

2644 
ngx_uöt_t
 
œ°
, 
ngx_log_t
 *
log
)

2646 
u_ch¨
 *
íd
, 
ch
, 
ídög
;

2648 
ch
 = 0;

2649 
ídög
 = 1;

2651 
íd
 = 
§c
 + 
Àn
;

2653 
§c
 !
íd
) {

2654 
ch
 = *
§c
++;

2656 i‡(
	`ngx_hâp_v2_huff_decode_bôs
(
°©e
, &
ídög
, 
ch
 >> 4, 
d°
)

2657 !
NGX_OK
)

2659 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

2661 "bad codê0x%Xd", *
°©e
, 
ch
 >> 4);

2663  
NGX_ERROR
;

2666 i‡(
	`ngx_hâp_v2_huff_decode_bôs
(
°©e
, &
ídög
, 
ch
 & 0xf, 
d°
)

2667 !
NGX_OK
)

2669 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

2671 "bad codê0x%Xd", *
°©e
, 
ch
 & 0xf);

2673  
NGX_ERROR
;

2677 i‡(
œ°
) {

2678 i‡(!
ídög
) {

2679 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

2681 "öcom∂ëêcodê0x%Xd", 
ch
);

2683  
NGX_ERROR
;

2686 *
°©e
 = 0;

2689  
NGX_OK
;

2690 
	}
}

2694 
ngx_ölöe
 
ngx_öt_t


2695 
	$ngx_hâp_v2_huff_decode_bôs
(
u_ch¨
 *
°©e
, u_ch¨ *
ídög
, 
ngx_uöt_t
 
bôs
,

2696 
u_ch¨
 **
d°
)

2698 
ngx_hâp_v2_huff_decode_code_t
 
code
;

2700 
code
 = 
ngx_hâp_v2_huff_decode_codes
[*
°©e
][
bôs
];

2702 i‡(
code
.
√xt
 =*
°©e
) {

2703  
NGX_ERROR
;

2706 i‡(
code
.
emô
) {

2707 *(*
d°
)++ = 
code
.
sym
;

2710 *
ídög
 = 
code
.ending;

2711 *
°©e
 = 
code
.
√xt
;

2713  
NGX_OK
;

2714 
	}
}

	@src/http/v2/ngx_http_v2_huff_encode.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
uöt32_t
 
	mcode
;

16 
uöt32_t
 
	mÀn
;

17 } 
	tngx_hâp_v2_huff_ícode_code_t
;

20 
ngx_hâp_v2_huff_ícode_code_t
 
	gngx_hâp_v2_huff_ícode_èbÀ
[256] =

90 
ngx_hâp_v2_huff_ícode_code_t
 
	gngx_hâp_v2_huff_ícode_èbÀ_lc
[256] =

159 #i‡(
NGX_PTR_SIZE
 == 8)

161 #i‡(
NGX_HAVE_LITTLE_ENDIAN
)

163 #i‡(
NGX_HAVE_GCC_BSWAP64
)

164 
	#ngx_hâp_v2_huff_ícode_buf
(
d°
, 
buf
) \

165 (*(
uöt64_t
 *Ë(
d°
Ë
	`__buûtö_bsw≠64
(
buf
))

	)

167 
	#ngx_hâp_v2_huff_ícode_buf
(
d°
, 
buf
) \

168 ((
d°
)[0] = (
u_ch¨
Ë((
buf
) >> 56), \

169 (
d°
)[1] = (
u_ch¨
Ë((
buf
) >> 48), \

170 (
d°
)[2] = (
u_ch¨
Ë((
buf
) >> 40), \

171 (
d°
)[3] = (
u_ch¨
Ë((
buf
) >> 32), \

172 (
d°
)[4] = (
u_ch¨
Ë((
buf
) >> 24), \

173 (
d°
)[5] = (
u_ch¨
Ë((
buf
) >> 16), \

174 (
d°
)[6] = (
u_ch¨
Ë((
buf
) >> 8), \

175 (
d°
)[7] = (
u_ch¨
Ë(
buf
))

	)

179 
	#ngx_hâp_v2_huff_ícode_buf
(
d°
, 
buf
) \

180 (*(
uöt64_t
 *Ë(
d°
Ë(
buf
))

	)

185 
	#ngx_hâp_v2_huff_ícode_buf
(
d°
, 
buf
) \

186 (*(
uöt32_t
 *Ë(
d°
Ë
	`ht⁄l
(
buf
))

	)

191 
size_t


192 
	$ngx_hâp_v2_huff_ícode
(
u_ch¨
 *
§c
, 
size_t
 
Àn
, u_ch¨ *
d°
, 
ngx_uöt_t
 
lowî
)

194 
u_ch¨
 *
íd
;

195 
size_t
 
hÀn
;

196 
ngx_uöt_t
 
buf
, 
≥ndög
, 
code
;

197 
ngx_hâp_v2_huff_ícode_code_t
 *
èbÀ
, *
√xt
;

199 
èbÀ
 = 
lowî
 ? 
ngx_hâp_v2_huff_ícode_èbÀ_lc


200 : 
ngx_hâp_v2_huff_ícode_èbÀ
;

201 
hÀn
 = 0;

202 
buf
 = 0;

203 
≥ndög
 = 0;

205 
íd
 = 
§c
 + 
Àn
;

207 
§c
 !
íd
) {

208 
√xt
 = &
èbÀ
[*
§c
++];

210 
code
 = 
√xt
->code;

211 
≥ndög
 +
√xt
->
Àn
;

214 i‡(
≥ndög
 < (
buf
) * 8) {

215 
buf
 |
code
 << ((bufË* 8 - 
≥ndög
);

219 i‡(
hÀn
 + (
buf
Ë>
Àn
) {

223 
≥ndög
 -(
buf
) * 8;

225 
buf
 |
code
 >> 
≥ndög
;

227 
	`ngx_hâp_v2_huff_ícode_buf
(&
d°
[
hÀn
], 
buf
);

229 
hÀn
 +(
buf
);

231 
buf
 = 
≥ndög
 ? 
code
 << ((buf) * 8 -Öending) : 0;

234 i‡(
≥ndög
 == 0) {

235  
hÀn
;

238 
buf
 |(
ngx_uöt_t
Ë-1 >> 
≥ndög
;

240 
≥ndög
 = 
	`ngx_Æign
(pending, 8);

242 i‡(
hÀn
 + 
≥ndög
 / 8 >
Àn
) {

246 
buf
 >>(bufË* 8 - 
≥ndög
;

249 
≥ndög
 -= 8;

250 
d°
[
hÀn
++] = (
u_ch¨
Ë(
buf
 >> 
≥ndög
);

251 } 
≥ndög
);

253  
hÀn
;

254 
	}
}

	@src/http/v2/ngx_http_v2_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_v2_moduÀ.h
>

14 
ngx_öt_t
 
ngx_hâp_v2_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_öt_t
 
ngx_hâp_v2_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

19 
ngx_öt_t
 
ngx_hâp_v2_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

21 *
ngx_hâp_v2_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

22 *
ngx_hâp_v2_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

23 *
ngx_hâp_v2_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_v2_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

25 *
chûd
);

26 *
ngx_hâp_v2_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_v2_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

28 *
chûd
);

30 *
ngx_hâp_v2_push
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

32 *
ngx_hâp_v2_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
,

33 *
d©a
);

34 *
ngx_hâp_v2_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

35 *
ngx_hâp_v2_¥îód_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

36 *
ngx_hâp_v2_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
,

37 *
d©a
);

38 *
ngx_hâp_v2_chunk_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

39 *
ngx_hâp_v2_•dy_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

43 
ngx_c⁄f_po°_t
 
	gngx_hâp_v2_ªcv_buf„r_size_po°
 =

44 { 
ngx_hâp_v2_ªcv_buf„r_size
 };

45 
ngx_c⁄f_po°_t
 
	gngx_hâp_v2_poﬁ_size_po°
 =

46 { 
ngx_hâp_v2_poﬁ_size
 };

47 
ngx_c⁄f_po°_t
 
	gngx_hâp_v2_¥îód_size_po°
 =

48 { 
ngx_hâp_v2_¥îód_size
 };

49 
ngx_c⁄f_po°_t
 
	gngx_hâp_v2_°ªams_ödex_mask_po°
 =

50 { 
ngx_hâp_v2_°ªams_ödex_mask
 };

51 
ngx_c⁄f_po°_t
 
	gngx_hâp_v2_chunk_size_po°
 =

52 { 
ngx_hâp_v2_chunk_size
 };

55 
ngx_comm™d_t
 
	gngx_hâp_v2_comm™ds
[] = {

57 { 
ngx_°rög
("http2_recv_buffer_size"),

58 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

59 
ngx_c⁄f_£t_size_¶Ÿ
,

60 
NGX_HTTP_MAIN_CONF_OFFSET
,

61 
off£tof
(
ngx_hâp_v2_maö_c⁄f_t
, 
ªcv_buf„r_size
),

62 &
ngx_hâp_v2_ªcv_buf„r_size_po°
 },

64 { 
ngx_°rög
("http2_pool_size"),

65 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_size_¶Ÿ
,

67 
NGX_HTTP_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
poﬁ_size
),

69 &
ngx_hâp_v2_poﬁ_size_po°
 },

71 { 
ngx_°rög
("http2_max_concurrent_streams"),

72 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_num_¶Ÿ
,

74 
NGX_HTTP_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
c⁄cuºít_°ªams
),

76 
NULL
 },

78 { 
ngx_°rög
("http2_max_concurrent_pushes"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

80 
ngx_c⁄f_£t_num_¶Ÿ
,

81 
NGX_HTTP_SRV_CONF_OFFSET
,

82 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
c⁄cuºít_pushes
),

83 
NULL
 },

85 { 
ngx_°rög
("http2_max_requests"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_num_¶Ÿ
,

88 
NGX_HTTP_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
max_ªque°s
),

90 
NULL
 },

92 { 
ngx_°rög
("http2_max_field_size"),

93 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

94 
ngx_c⁄f_£t_size_¶Ÿ
,

95 
NGX_HTTP_SRV_CONF_OFFSET
,

96 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
max_fõld_size
),

97 
NULL
 },

99 { 
ngx_°rög
("http2_max_header_size"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_size_¶Ÿ
,

102 
NGX_HTTP_SRV_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
max_hódî_size
),

104 
NULL
 },

106 { 
ngx_°rög
("http2_body_preread_size"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_size_¶Ÿ
,

109 
NGX_HTTP_SRV_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
¥îód_size
),

111 &
ngx_hâp_v2_¥îód_size_po°
 },

113 { 
ngx_°rög
("http2_streams_index_size"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_num_¶Ÿ
,

116 
NGX_HTTP_SRV_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
°ªams_ödex_mask
),

118 &
ngx_hâp_v2_°ªams_ödex_mask_po°
 },

120 { 
ngx_°rög
("http2_recv_timeout"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_m£c_¶Ÿ
,

123 
NGX_HTTP_SRV_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
ªcv_timeout
),

125 
NULL
 },

127 { 
ngx_°rög
("http2_idle_timeout"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_m£c_¶Ÿ
,

130 
NGX_HTTP_SRV_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_v2_§v_c⁄f_t
, 
idÀ_timeout
),

132 
NULL
 },

134 { 
ngx_°rög
("http2_chunk_size"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_c⁄f_£t_size_¶Ÿ
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

138 
off£tof
(
ngx_hâp_v2_loc_c⁄f_t
, 
chunk_size
),

139 &
ngx_hâp_v2_chunk_size_po°
 },

141 { 
ngx_°rög
("http2_push_preload"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

143 
ngx_c⁄f_£t_Êag_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_v2_loc_c⁄f_t
, 
push_¥ñﬂd
),

146 
NULL
 },

148 { 
ngx_°rög
("http2_push"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_v2_push
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 { 
ngx_°rög
("spdy_recv_buffer_size"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

157 
ngx_hâp_v2_•dy_dïªˇãd
,

158 
NGX_HTTP_MAIN_CONF_OFFSET
,

160 
NULL
 },

162 { 
ngx_°rög
("spdy_pool_size"),

163 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

164 
ngx_hâp_v2_•dy_dïªˇãd
,

165 
NGX_HTTP_SRV_CONF_OFFSET
,

167 
NULL
 },

169 { 
ngx_°rög
("spdy_max_concurrent_streams"),

170 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

171 
ngx_hâp_v2_•dy_dïªˇãd
,

172 
NGX_HTTP_SRV_CONF_OFFSET
,

174 
NULL
 },

176 { 
ngx_°rög
("spdy_streams_index_size"),

177 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

178 
ngx_hâp_v2_•dy_dïªˇãd
,

179 
NGX_HTTP_SRV_CONF_OFFSET
,

181 
NULL
 },

183 { 
ngx_°rög
("spdy_recv_timeout"),

184 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

185 
ngx_hâp_v2_•dy_dïªˇãd
,

186 
NGX_HTTP_SRV_CONF_OFFSET
,

188 
NULL
 },

190 { 
ngx_°rög
("spdy_keepalive_timeout"),

191 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

192 
ngx_hâp_v2_•dy_dïªˇãd
,

193 
NGX_HTTP_SRV_CONF_OFFSET
,

195 
NULL
 },

197 { 
ngx_°rög
("spdy_headers_comp"),

198 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

199 
ngx_hâp_v2_•dy_dïªˇãd
,

200 
NGX_HTTP_SRV_CONF_OFFSET
,

202 
NULL
 },

204 { 
ngx_°rög
("spdy_chunk_size"),

205 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

206 
ngx_hâp_v2_•dy_dïªˇãd
,

207 
NGX_HTTP_LOC_CONF_OFFSET
,

209 
NULL
 },

211 
ngx_nuŒ_comm™d


215 
ngx_hâp_moduÀ_t
 
	gngx_hâp_v2_moduÀ_˘x
 = {

216 
ngx_hâp_v2_add_v¨übÀs
,

217 
NULL
,

219 
ngx_hâp_v2_¸óã_maö_c⁄f
,

220 
ngx_hâp_v2_öô_maö_c⁄f
,

222 
ngx_hâp_v2_¸óã_§v_c⁄f
,

223 
ngx_hâp_v2_mîge_§v_c⁄f
,

225 
ngx_hâp_v2_¸óã_loc_c⁄f
,

226 
ngx_hâp_v2_mîge_loc_c⁄f


230 
ngx_moduÀ_t
 
	gngx_hâp_v2_moduÀ
 = {

231 
NGX_MODULE_V1
,

232 &
ngx_hâp_v2_moduÀ_˘x
,

233 
ngx_hâp_v2_comm™ds
,

234 
NGX_HTTP_MODULE
,

235 
NULL
,

236 
ngx_hâp_v2_moduÀ_öô
,

237 
NULL
,

238 
NULL
,

239 
NULL
,

240 
NULL
,

241 
NULL
,

242 
NGX_MODULE_V1_PADDING


246 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_v2_v¨s
[] = {

248 { 
ngx_°rög
("hâp2"), 
NULL
,

249 
ngx_hâp_v2_v¨übÀ
, 0, 0, 0 },

251 
ngx_hâp_nuŒ_v¨übÀ


255 
ngx_öt_t


256 
	$ngx_hâp_v2_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

258 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

260 
v
 = 
ngx_hâp_v2_v¨s
; v->
«me
.
Àn
; v++) {

261 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

262 i‡(
v¨
 =
NULL
) {

263  
NGX_ERROR
;

266 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

267 
v¨
->
d©a
 = 
v
->data;

270  
NGX_OK
;

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_v2_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

276 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

279 i‡(
r
->
°ªam
) {

280 #i‡(
NGX_HTTP_SSL
)

282 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

283 
v
->
Àn
 = ("h2") - 1;

284 
v
->
vÆid
 = 1;

285 
v
->
no_ˇchóbÀ
 = 0;

286 
v
->
nŸ_found
 = 0;

287 
v
->
d©a
 = (
u_ch¨
 *) "h2";

289  
NGX_OK
;

293 
v
->
Àn
 = ("h2c") - 1;

294 
v
->
vÆid
 = 1;

295 
v
->
no_ˇchóbÀ
 = 0;

296 
v
->
nŸ_found
 = 0;

297 
v
->
d©a
 = (
u_ch¨
 *) "h2c";

299  
NGX_OK
;

302 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

304  
NGX_OK
;

305 
	}
}

308 
ngx_öt_t


309 
	$ngx_hâp_v2_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

311  
NGX_OK
;

312 
	}
}

316 
	$ngx_hâp_v2_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

318 
ngx_hâp_v2_maö_c⁄f_t
 *
h2mcf
;

320 
h2mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_v2_maö_c⁄f_t
));

321 i‡(
h2mcf
 =
NULL
) {

322  
NULL
;

325 
h2mcf
->
ªcv_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

327  
h2mcf
;

328 
	}
}

332 
	$ngx_hâp_v2_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

334 
ngx_hâp_v2_maö_c⁄f_t
 *
h2mcf
 = 
c⁄f
;

336 
	`ngx_c⁄f_öô_size_vÆue
(
h2mcf
->
ªcv_buf„r_size
, 256 * 1024);

338  
NGX_CONF_OK
;

339 
	}
}

343 
	$ngx_hâp_v2_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

345 
ngx_hâp_v2_§v_c⁄f_t
 *
h2scf
;

347 
h2scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_v2_§v_c⁄f_t
));

348 i‡(
h2scf
 =
NULL
) {

349  
NULL
;

352 
h2scf
->
poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

354 
h2scf
->
c⁄cuºít_°ªams
 = 
NGX_CONF_UNSET_UINT
;

355 
h2scf
->
c⁄cuºít_pushes
 = 
NGX_CONF_UNSET_UINT
;

356 
h2scf
->
max_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

358 
h2scf
->
max_fõld_size
 = 
NGX_CONF_UNSET_SIZE
;

359 
h2scf
->
max_hódî_size
 = 
NGX_CONF_UNSET_SIZE
;

361 
h2scf
->
¥îód_size
 = 
NGX_CONF_UNSET_SIZE
;

363 
h2scf
->
°ªams_ödex_mask
 = 
NGX_CONF_UNSET_UINT
;

365 
h2scf
->
ªcv_timeout
 = 
NGX_CONF_UNSET_MSEC
;

366 
h2scf
->
idÀ_timeout
 = 
NGX_CONF_UNSET_MSEC
;

368  
h2scf
;

369 
	}
}

373 
	$ngx_hâp_v2_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

375 
ngx_hâp_v2_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

376 
ngx_hâp_v2_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

378 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
poﬁ_size
, 
¥ev
->pool_size, 4096);

380 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
c⁄cuºít_°ªams
,

381 
¥ev
->
c⁄cuºít_°ªams
, 128);

382 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
c⁄cuºít_pushes
,

383 
¥ev
->
c⁄cuºít_pushes
, 10);

384 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ªque°s
, 
¥ev
->max_requests, 1000);

386 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_fõld_size
, 
¥ev
->max_field_size,

388 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_hódî_size
, 
¥ev
->max_header_size,

391 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
¥îód_size
, 
¥ev
->preread_size, 65536);

393 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ªams_ödex_mask
,

394 
¥ev
->
°ªams_ödex_mask
, 32 - 1);

396 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªcv_timeout
,

397 
¥ev
->
ªcv_timeout
, 30000);

398 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
idÀ_timeout
,

399 
¥ev
->
idÀ_timeout
, 180000);

401  
NGX_CONF_OK
;

402 
	}
}

406 
	$ngx_hâp_v2_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

408 
ngx_hâp_v2_loc_c⁄f_t
 *
h2lcf
;

410 
h2lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_v2_loc_c⁄f_t
));

411 i‡(
h2lcf
 =
NULL
) {

412  
NULL
;

421 
h2lcf
->
chunk_size
 = 
NGX_CONF_UNSET_SIZE
;

423 
h2lcf
->
push_¥ñﬂd
 = 
NGX_CONF_UNSET
;

424 
h2lcf
->
push
 = 
NGX_CONF_UNSET
;

426  
h2lcf
;

427 
	}
}

431 
	$ngx_hâp_v2_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

433 
ngx_hâp_v2_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

434 
ngx_hâp_v2_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

436 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
chunk_size
, 
¥ev
->chunk_size, 8 * 1024);

438 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
push
, 
¥ev
->push, 1);

440 i‡(
c⁄f
->
push
 && c⁄f->
pushes
 =
NULL
) {

441 
c⁄f
->
pushes
 = 
¥ev
->pushes;

444 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
push_¥ñﬂd
, 
¥ev
->push_preload, 0);

446  
NGX_CONF_OK
;

447 
	}
}

451 
	$ngx_hâp_v2_push
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

453 
ngx_hâp_v2_loc_c⁄f_t
 *
h2lcf
 = 
c⁄f
;

455 
ngx_°r_t
 *
vÆue
;

456 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

457 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

459 
vÆue
 = 
cf
->
¨gs
->
ñts
;

461 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

463 i‡(
h2lcf
->
pushes
) {

467 i‡(
h2lcf
->
push
 == 0) {

471 
h2lcf
->
push
 = 0;

472  
NGX_CONF_OK
;

475 i‡(
h2lcf
->
push
 == 0) {

479 
h2lcf
->
push
 = 1;

481 i‡(
h2lcf
->
pushes
 =
NULL
) {

482 
h2lcf
->
pushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

483 (
ngx_hâp_com∂ex_vÆue_t
));

484 i‡(
h2lcf
->
pushes
 =
NULL
) {

485  
NGX_CONF_ERROR
;

489 
cv
 = 
	`ngx_¨øy_push
(
h2lcf
->
pushes
);

490 i‡(
cv
 =
NULL
) {

491  
NGX_CONF_ERROR
;

494 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

496 
ccv
.
cf
 = cf;

497 
ccv
.
vÆue
 = &value[1];

498 
ccv
.
com∂ex_vÆue
 = 
cv
;

500 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

501  
NGX_CONF_ERROR
;

504  
NGX_CONF_OK
;

505 
	}
}

509 
	$ngx_hâp_v2_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

511 
size_t
 *
•
 = 
d©a
;

513 i‡(*
•
 <2 * 
NGX_HTTP_V2_STATE_BUFFER_SIZE
) {

517  
NGX_CONF_OK
;

518 
	}
}

522 
	$ngx_hâp_v2_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

524 
size_t
 *
•
 = 
d©a
;

526 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

527 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

529 
NGX_MIN_POOL_SIZE
);

531  
NGX_CONF_ERROR
;

534 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

535 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

537 
NGX_POOL_ALIGNMENT
);

539  
NGX_CONF_ERROR
;

542  
NGX_CONF_OK
;

543 
	}
}

547 
	$ngx_hâp_v2_¥îód_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

549 
size_t
 *
•
 = 
d©a
;

551 i‡(*
•
 > 
NGX_HTTP_V2_MAX_WINDOW
) {

552 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

554 
NGX_HTTP_V2_MAX_WINDOW
);

556  
NGX_CONF_ERROR
;

559  
NGX_CONF_OK
;

560 
	}
}

564 
	$ngx_hâp_v2_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

566 
ngx_uöt_t
 *
≈
 = 
d©a
;

568 
ngx_uöt_t
 
mask
;

570 
mask
 = *
≈
 - 1;

572 i‡(*
≈
 =0 || (*≈ & 
mask
)) {

576 *
≈
 = 
mask
;

578  
NGX_CONF_OK
;

579 
	}
}

583 
	$ngx_hâp_v2_chunk_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

585 
size_t
 *
•
 = 
d©a
;

587 i‡(*
•
 == 0) {

588 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

591  
NGX_CONF_ERROR
;

594 i‡(*
•
 > 
NGX_HTTP_V2_MAX_FRAME_SIZE
) {

595 *
•
 = 
NGX_HTTP_V2_MAX_FRAME_SIZE
;

598  
NGX_CONF_OK
;

599 
	}
}

603 
	$ngx_hâp_v2_•dy_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

605 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

607 "wa†su≥r£ded byÇgx_hâp_v2_moduÀ", &
cmd
->
«me
);

609  
NGX_CONF_OK
;

610 
	}
}

	@src/http/v2/ngx_http_v2_module.h

8 #i‚de‡
_NGX_HTTP_V2_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_V2_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
size_t
 
	mªcv_buf„r_size
;

19 
u_ch¨
 *
	mªcv_buf„r
;

20 } 
	tngx_hâp_v2_maö_c⁄f_t
;

24 
size_t
 
	mpoﬁ_size
;

25 
ngx_uöt_t
 
	mc⁄cuºít_°ªams
;

26 
ngx_uöt_t
 
	mc⁄cuºít_pushes
;

27 
ngx_uöt_t
 
	mmax_ªque°s
;

28 
size_t
 
	mmax_fõld_size
;

29 
size_t
 
	mmax_hódî_size
;

30 
size_t
 
	m¥îód_size
;

31 
ngx_uöt_t
 
	m°ªams_ödex_mask
;

32 
ngx_m£c_t
 
	mªcv_timeout
;

33 
ngx_m£c_t
 
	midÀ_timeout
;

34 } 
	tngx_hâp_v2_§v_c⁄f_t
;

38 
size_t
 
	mchunk_size
;

40 
ngx_Êag_t
 
	mpush_¥ñﬂd
;

42 
ngx_Êag_t
 
	mpush
;

43 
ngx_¨øy_t
 *
	mpushes
;

44 } 
	tngx_hâp_v2_loc_c⁄f_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_v2_moduÀ
;

	@src/http/v2/ngx_http_v2_table.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_V2_TABLE_SIZE
 4096

	)

16 
ngx_öt_t
 
ngx_hâp_v2_èbÀ_accou¡
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

17 
size_t
 
size
);

20 
ngx_hâp_v2_hódî_t
 
	gngx_hâp_v2_°©ic_èbÀ
[] = {

21 { 
ngx_°rög
(":authority"),Çgx_string("") },

22 { 
ngx_°rög
(":method"),Çgx_string("GET") },

23 { 
ngx_°rög
(":method"),Çgx_string("POST") },

24 { 
ngx_°rög
(":path"),Çgx_string("/") },

25 { 
ngx_°rög
(":path"),Çgx_string("/index.html") },

26 { 
ngx_°rög
(":scheme"),Çgx_string("http") },

27 { 
ngx_°rög
(":scheme"),Çgx_string("https") },

28 { 
ngx_°rög
(":status"),Çgx_string("200") },

29 { 
ngx_°rög
(":status"),Çgx_string("204") },

30 { 
ngx_°rög
(":status"),Çgx_string("206") },

31 { 
ngx_°rög
(":status"),Çgx_string("304") },

32 { 
ngx_°rög
(":status"),Çgx_string("400") },

33 { 
ngx_°rög
(":status"),Çgx_string("404") },

34 { 
ngx_°rög
(":status"),Çgx_string("500") },

35 { 
ngx_°rög
("accept-charset"),Çgx_string("") },

36 { 
ngx_°rög
("accept-encoding"),Çgx_string("gzip, deflate") },

37 { 
ngx_°rög
("accept-language"),Çgx_string("") },

38 { 
ngx_°rög
("accept-ranges"),Çgx_string("") },

39 { 
ngx_°rög
("accept"),Çgx_string("") },

40 { 
ngx_°rög
("access-control-allow-origin"),Çgx_string("") },

41 { 
ngx_°rög
("age"),Çgx_string("") },

42 { 
ngx_°rög
("allow"),Çgx_string("") },

43 { 
ngx_°rög
("authorization"),Çgx_string("") },

44 { 
ngx_°rög
("cache-control"),Çgx_string("") },

45 { 
ngx_°rög
("content-disposition"),Çgx_string("") },

46 { 
ngx_°rög
("content-encoding"),Çgx_string("") },

47 { 
ngx_°rög
("content-language"),Çgx_string("") },

48 { 
ngx_°rög
("content-length"),Çgx_string("") },

49 { 
ngx_°rög
("content-location"),Çgx_string("") },

50 { 
ngx_°rög
("content-range"),Çgx_string("") },

51 { 
ngx_°rög
("content-type"),Çgx_string("") },

52 { 
ngx_°rög
("cookie"),Çgx_string("") },

53 { 
ngx_°rög
("date"),Çgx_string("") },

54 { 
ngx_°rög
("etag"),Çgx_string("") },

55 { 
ngx_°rög
("expect"),Çgx_string("") },

56 { 
ngx_°rög
("expires"),Çgx_string("") },

57 { 
ngx_°rög
("from"),Çgx_string("") },

58 { 
ngx_°rög
("host"),Çgx_string("") },

59 { 
ngx_°rög
("if-match"),Çgx_string("") },

60 { 
ngx_°rög
("if-modified-since"),Çgx_string("") },

61 { 
ngx_°rög
("if-none-match"),Çgx_string("") },

62 { 
ngx_°rög
("if-range"),Çgx_string("") },

63 { 
ngx_°rög
("if-unmodified-since"),Çgx_string("") },

64 { 
ngx_°rög
("last-modified"),Çgx_string("") },

65 { 
ngx_°rög
("link"),Çgx_string("") },

66 { 
ngx_°rög
("location"),Çgx_string("") },

67 { 
ngx_°rög
("max-forwards"),Çgx_string("") },

68 { 
ngx_°rög
("proxy-authenticate"),Çgx_string("") },

69 { 
ngx_°rög
("proxy-authorization"),Çgx_string("") },

70 { 
ngx_°rög
("range"),Çgx_string("") },

71 { 
ngx_°rög
("referer"),Çgx_string("") },

72 { 
ngx_°rög
("refresh"),Çgx_string("") },

73 { 
ngx_°rög
("retry-after"),Çgx_string("") },

74 { 
ngx_°rög
("server"),Çgx_string("") },

75 { 
ngx_°rög
("set-cookie"),Çgx_string("") },

76 { 
ngx_°rög
("strict-transport-security"),Çgx_string("") },

77 { 
ngx_°rög
("transfer-encoding"),Çgx_string("") },

78 { 
ngx_°rög
("user-agent"),Çgx_string("") },

79 { 
ngx_°rög
("vary"),Çgx_string("") },

80 { 
ngx_°rög
("via"),Çgx_string("") },

81 { 
ngx_°rög
("www-authenticate"),Çgx_string("") },

84 
	#NGX_HTTP_V2_STATIC_TABLE_ENTRIES
 \

85 ((
ngx_hâp_v2_°©ic_èbÀ
) \

86 / (
ngx_hâp_v2_hódî_t
))

	)

89 
ngx_°r_t
 *

90 
	$ngx_hâp_v2_gë_°©ic_«me
(
ngx_uöt_t
 
ödex
)

92  &
ngx_hâp_v2_°©ic_èbÀ
[
ödex
 - 1].
«me
;

93 
	}
}

96 
ngx_°r_t
 *

97 
	$ngx_hâp_v2_gë_°©ic_vÆue
(
ngx_uöt_t
 
ödex
)

99  &
ngx_hâp_v2_°©ic_èbÀ
[
ödex
 - 1].
vÆue
;

100 
	}
}

103 
ngx_öt_t


104 
	$ngx_hâp_v2_gë_ödexed_hódî
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
ngx_uöt_t
 
ödex
,

105 
ngx_uöt_t
 
«me_⁄ly
)

107 
u_ch¨
 *
p
;

108 
size_t
 
ª°
;

109 
ngx_hâp_v2_hódî_t
 *
íåy
;

111 i‡(
ödex
 == 0) {

112 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

114  
NGX_ERROR
;

117 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

119 
«me_⁄ly
 ? "«me" : "hódî", 
ödex
);

121 
ödex
--;

123 i‡(
ödex
 < 
NGX_HTTP_V2_STATIC_TABLE_ENTRIES
) {

124 
h2c
->
°©e
.
hódî
 = 
ngx_hâp_v2_°©ic_èbÀ
[
ödex
];

125  
NGX_OK
;

128 
ödex
 -
NGX_HTTP_V2_STATIC_TABLE_ENTRIES
;

130 i‡(
ödex
 < 
h2c
->
h∑ck
.
added
 - h2c->h∑ck.
dñëed
) {

131 
ödex
 = (
h2c
->
h∑ck
.
added
 - index - 1Ë% h2c->h∑ck.
Æloˇãd
;

132 
íåy
 = 
h2c
->
h∑ck
.
íåõs
[
ödex
];

134 
p
 = 
	`ngx_≤Æloc
(
h2c
->
°©e
.
poﬁ
, 
íåy
->
«me
.
Àn
 + 1);

135 i‡(
p
 =
NULL
) {

136  
NGX_ERROR
;

139 
h2c
->
°©e
.
hódî
.
«me
.
Àn
 = 
íåy
->name.len;

140 
h2c
->
°©e
.
hódî
.
«me
.
d©a
 = 
p
;

142 
ª°
 = 
h2c
->
h∑ck
.
°‹age
 + 
NGX_HTTP_V2_TABLE_SIZE
 - 
íåy
->
«me
.
d©a
;

144 i‡(
íåy
->
«me
.
Àn
 > 
ª°
) {

145 
p
 = 
	`ngx_˝ymem
’, 
íåy
->
«me
.
d©a
, 
ª°
);

146 
p
 = 
	`ngx_˝ymem
’, 
h2c
->
h∑ck
.
°‹age
, 
íåy
->
«me
.
Àn
 - 
ª°
);

149 
p
 = 
	`ngx_˝ymem
’, 
íåy
->
«me
.
d©a
,É¡ry->«me.
Àn
);

152 *
p
 = '\0';

154 i‡(
«me_⁄ly
) {

155  
NGX_OK
;

158 
p
 = 
	`ngx_≤Æloc
(
h2c
->
°©e
.
poﬁ
, 
íåy
->
vÆue
.
Àn
 + 1);

159 i‡(
p
 =
NULL
) {

160  
NGX_ERROR
;

163 
h2c
->
°©e
.
hódî
.
vÆue
.
Àn
 = 
íåy
->value.len;

164 
h2c
->
°©e
.
hódî
.
vÆue
.
d©a
 = 
p
;

166 
ª°
 = 
h2c
->
h∑ck
.
°‹age
 + 
NGX_HTTP_V2_TABLE_SIZE
 - 
íåy
->
vÆue
.
d©a
;

168 i‡(
íåy
->
vÆue
.
Àn
 > 
ª°
) {

169 
p
 = 
	`ngx_˝ymem
’, 
íåy
->
vÆue
.
d©a
, 
ª°
);

170 
p
 = 
	`ngx_˝ymem
’, 
h2c
->
h∑ck
.
°‹age
, 
íåy
->
vÆue
.
Àn
 - 
ª°
);

173 
p
 = 
	`ngx_˝ymem
’, 
íåy
->
vÆue
.
d©a
,É¡ry->vÆue.
Àn
);

176 *
p
 = '\0';

178  
NGX_OK
;

181 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

182 "˛õ¡ síàouào‡bound h∑ckÅabÀ index: %ui", 
ödex
);

184  
NGX_ERROR
;

185 
	}
}

188 
ngx_öt_t


189 
	$ngx_hâp_v2_add_hódî
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
,

190 
ngx_hâp_v2_hódî_t
 *
hódî
)

192 
size_t
 
avaû
;

193 
ngx_uöt_t
 
ödex
;

194 
ngx_hâp_v2_hódî_t
 *
íåy
, **
íåõs
;

196 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

198 &
hódî
->
«me
, &hódî->
vÆue
);

200 i‡(
h2c
->
h∑ck
.
íåõs
 =
NULL
) {

201 
h2c
->
h∑ck
.
Æloˇãd
 = 64;

202 
h2c
->
h∑ck
.
size
 = 
NGX_HTTP_V2_TABLE_SIZE
;

203 
h2c
->
h∑ck
.
‰ì
 = 
NGX_HTTP_V2_TABLE_SIZE
;

205 
h2c
->
h∑ck
.
íåõs
 = 
	`ngx_∑Œoc
(h2c->
c⁄√˘i⁄
->
poﬁ
,

206 (
ngx_hâp_v2_hódî_t
 *)

207 * 
h2c
->
h∑ck
.
Æloˇãd
);

208 i‡(
h2c
->
h∑ck
.
íåõs
 =
NULL
) {

209  
NGX_ERROR
;

212 
h2c
->
h∑ck
.
°‹age
 = 
	`ngx_∑Œoc
(h2c->
c⁄√˘i⁄
->
poﬁ
,

213 
h2c
->
h∑ck
.
‰ì
);

214 i‡(
h2c
->
h∑ck
.
°‹age
 =
NULL
) {

215  
NGX_ERROR
;

218 
h2c
->
h∑ck
.
pos
 = h2c->h∑ck.
°‹age
;

221 i‡(
	`ngx_hâp_v2_èbÀ_accou¡
(
h2c
, 
hódî
->
«me
.
Àn
 + hódî->
vÆue
.len)

222 !
NGX_OK
)

224  
NGX_OK
;

227 i‡(
h2c
->
h∑ck
.
ªu£d
 =h2c->h∑ck.
dñëed
) {

228 
íåy
 = 
	`ngx_∑Œoc
(
h2c
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_hâp_v2_hódî_t
));

229 i‡(
íåy
 =
NULL
) {

230  
NGX_ERROR
;

234 
íåy
 = 
h2c
->
h∑ck
.
íåõs
[h2c->h∑ck.
ªu£d
++ % h2c->h∑ck.
Æloˇãd
];

237 
avaû
 = 
h2c
->
h∑ck
.
°‹age
 + 
NGX_HTTP_V2_TABLE_SIZE
 - h2c->h∑ck.
pos
;

239 
íåy
->
«me
.
Àn
 = 
hódî
->name.len;

240 
íåy
->
«me
.
d©a
 = 
h2c
->
h∑ck
.
pos
;

242 i‡(
avaû
 >
hódî
->
«me
.
Àn
) {

243 
h2c
->
h∑ck
.
pos
 = 
	`ngx_˝ymem
(h2c->h∑ck.pos, 
hódî
->
«me
.
d©a
,

244 
hódî
->
«me
.
Àn
);

246 
	`ngx_mem˝y
(
h2c
->
h∑ck
.
pos
, 
hódî
->
«me
.
d©a
, 
avaû
);

247 
h2c
->
h∑ck
.
pos
 = 
	`ngx_˝ymem
(h2c->h∑ck.
°‹age
,

248 
hódî
->
«me
.
d©a
 + 
avaû
,

249 
hódî
->
«me
.
Àn
 - 
avaû
);

250 
avaû
 = 
NGX_HTTP_V2_TABLE_SIZE
;

253 
avaû
 -
hódî
->
«me
.
Àn
;

255 
íåy
->
vÆue
.
Àn
 = 
hódî
->value.len;

256 
íåy
->
vÆue
.
d©a
 = 
h2c
->
h∑ck
.
pos
;

258 i‡(
avaû
 >
hódî
->
vÆue
.
Àn
) {

259 
h2c
->
h∑ck
.
pos
 = 
	`ngx_˝ymem
(h2c->h∑ck.pos, 
hódî
->
vÆue
.
d©a
,

260 
hódî
->
vÆue
.
Àn
);

262 
	`ngx_mem˝y
(
h2c
->
h∑ck
.
pos
, 
hódî
->
vÆue
.
d©a
, 
avaû
);

263 
h2c
->
h∑ck
.
pos
 = 
	`ngx_˝ymem
(h2c->h∑ck.
°‹age
,

264 
hódî
->
vÆue
.
d©a
 + 
avaû
,

265 
hódî
->
vÆue
.
Àn
 - 
avaû
);

268 i‡(
h2c
->
h∑ck
.
Æloˇãd
 =h2c->h∑ck.
added
 - h2c->h∑ck.
dñëed
) {

270 
íåõs
 = 
	`ngx_∑Œoc
(
h2c
->
c⁄√˘i⁄
->
poﬁ
,

271 (
ngx_hâp_v2_hódî_t
 *)

272 * (
h2c
->
h∑ck
.
Æloˇãd
 + 64));

273 i‡(
íåõs
 =
NULL
) {

274  
NGX_ERROR
;

277 
ödex
 = 
h2c
->
h∑ck
.
dñëed
 % h2c->h∑ck.
Æloˇãd
;

279 
	`ngx_mem˝y
(
íåõs
, &
h2c
->
h∑ck
.íåõs[
ödex
],

280 (
h2c
->
h∑ck
.
Æloˇãd
 - 
ödex
)

281 * (
ngx_hâp_v2_hódî_t
 *));

283 
	`ngx_mem˝y
(&
íåõs
[
h2c
->
h∑ck
.
Æloˇãd
 - 
ödex
], h2c->hpack.entries,

284 
ödex
 * (
ngx_hâp_v2_hódî_t
 *));

286 (Ë
	`ngx_p‰ì
(
h2c
->
c⁄√˘i⁄
->
poﬁ
, h2c->
h∑ck
.
íåõs
);

288 
h2c
->
h∑ck
.
íåõs
 =Éntries;

290 
h2c
->
h∑ck
.
added
 = h2c->h∑ck.
Æloˇãd
;

291 
h2c
->
h∑ck
.
dñëed
 = 0;

292 
h2c
->
h∑ck
.
ªu£d
 = 0;

293 
h2c
->
h∑ck
.
Æloˇãd
 += 64;

296 
h2c
->
h∑ck
.
íåõs
[h2c->h∑ck.
added
++ % h2c->h∑ck.
Æloˇãd
] = 
íåy
;

298  
NGX_OK
;

299 
	}
}

302 
ngx_öt_t


303 
	$ngx_hâp_v2_èbÀ_accou¡
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
size_t
 
size
)

305 
ngx_hâp_v2_hódî_t
 *
íåy
;

307 
size
 += 32;

309 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

311 
size
, 
h2c
->
h∑ck
.
‰ì
);

313 i‡(
size
 <
h2c
->
h∑ck
.
‰ì
) {

314 
h2c
->
h∑ck
.
‰ì
 -
size
;

315  
NGX_OK
;

318 i‡(
size
 > 
h2c
->
h∑ck
.size) {

319 
h2c
->
h∑ck
.
dñëed
 = h2c->h∑ck.
added
;

320 
h2c
->
h∑ck
.
‰ì
 = h2c->h∑ck.
size
;

321  
NGX_DECLINED
;

325 
íåy
 = 
h2c
->
h∑ck
.
íåõs
[h2c->h∑ck.
dñëed
++ % h2c->h∑ck.
Æloˇãd
];

326 
h2c
->
h∑ck
.
‰ì
 +32 + 
íåy
->
«me
.
Àn
 +É¡ry->
vÆue
.len;

327 } 
size
 > 
h2c
->
h∑ck
.
‰ì
);

329 
h2c
->
h∑ck
.
‰ì
 -
size
;

331  
NGX_OK
;

332 
	}
}

335 
ngx_öt_t


336 
	$ngx_hâp_v2_èbÀ_size
(
ngx_hâp_v2_c⁄√˘i⁄_t
 *
h2c
, 
size_t
 
size
)

338 
ssize_t
 
√eded
;

339 
ngx_hâp_v2_hódî_t
 *
íåy
;

341 i‡(
size
 > 
NGX_HTTP_V2_TABLE_SIZE
) {

342 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

343 "˛õ¡ síàövÆidÅabÀ sizêupd©e: %uz", 
size
);

345  
NGX_ERROR
;

348 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
h2c
->
c⁄√˘i⁄
->
log
, 0,

350 
size
, 
h2c
->
h∑ck
.size);

352 
√eded
 = 
h2c
->
h∑ck
.
size
 - size;

354 
√eded
 > (
ssize_t
Ë
h2c
->
h∑ck
.
‰ì
) {

355 
íåy
 = 
h2c
->
h∑ck
.
íåõs
[h2c->h∑ck.
dñëed
++ % h2c->h∑ck.
Æloˇãd
];

356 
h2c
->
h∑ck
.
‰ì
 +32 + 
íåy
->
«me
.
Àn
 +É¡ry->
vÆue
.len;

359 
h2c
->
h∑ck
.
size
 = size;

360 
h2c
->
h∑ck
.
‰ì
 -
√eded
;

362  
NGX_OK
;

363 
	}
}

	@src/mail/ngx_mail.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_maû_li°í_t
 *
li°í
);

17 *
ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

19 
ngx_maû_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

22 
ngx_maû_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

27 
ngx_uöt_t
 
	gngx_maû_max_moduÀ
;

30 
ngx_comm™d_t
 
	gngx_maû_comm™ds
[] = {

32 { 
ngx_°rög
("mail"),

33 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_block
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_maû_moduÀ_˘x
 = {

44 
ngx_°rög
("mail"),

45 
NULL
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_maû_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_maû_moduÀ_˘x
,

53 
ngx_maû_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

69 *
rv
;

70 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

71 
ngx_c⁄f_t
 
pcf
;

72 
ngx_¨øy_t
 
p‹ts
;

73 
ngx_maû_li°í_t
 *
li°í
;

74 
ngx_maû_moduÀ_t
 *
moduÀ
;

75 
ngx_maû_c⁄f_˘x_t
 *
˘x
;

76 
ngx_maû_c‹e_§v_c⁄f_t
 **
cscÂ
;

77 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

79 i‡(*(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
) {

85 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

86 i‡(
˘x
 =
NULL
) {

87  
NGX_CONF_ERROR
;

90 *(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

94 
ngx_maû_max_moduÀ
 = 
	`ngx_cou¡_moduÀs
(
cf
->
cy˛e
, 
NGX_MAIL_MODULE
);

99 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

100 (*Ë* 
ngx_maû_max_moduÀ
);

101 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

102  
NGX_CONF_ERROR
;

111 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

112 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

113  
NGX_CONF_ERROR
;

121 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

122 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

126 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

127 
mi
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

129 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

130 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

131 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

132  
NGX_CONF_ERROR
;

136 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

137 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

138 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

139  
NGX_CONF_ERROR
;

147 
pcf
 = *
cf
;

148 
cf
->
˘x
 = ctx;

150 
cf
->
moduÀ_ty≥
 = 
NGX_MAIL_MODULE
;

151 
cf
->
cmd_ty≥
 = 
NGX_MAIL_MAIN_CONF
;

152 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

154 i‡(
rv
 !
NGX_CONF_OK
) {

155 *
cf
 = 
pcf
;

156  
rv
;

162 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

163 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

165 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

166 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

170 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

171 
mi
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

175 
cf
->
˘x
 = ctx;

177 i‡(
moduÀ
->
öô_maö_c⁄f
) {

178 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

179 i‡(
rv
 !
NGX_CONF_OK
) {

180 *
cf
 = 
pcf
;

181  
rv
;

185 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

189 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

191 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

192 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

193 
˘x
->
§v_c⁄f
[
mi
],

194 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

195 i‡(
rv
 !
NGX_CONF_OK
) {

196 *
cf
 = 
pcf
;

197  
rv
;

203 *
cf
 = 
pcf
;

206 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_maû_c⁄f_p‹t_t
))

207 !
NGX_OK
)

209  
NGX_CONF_ERROR
;

212 
li°í
 = 
cmcf
->li°í.
ñts
;

214 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

215 i‡(
	`ngx_maû_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

216  
NGX_CONF_ERROR
;

220  
	`ngx_maû_›timize_£rvîs
(
cf
, &
p‹ts
);

221 
	}
}

224 
ngx_öt_t


225 
	$ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

226 
ngx_maû_li°í_t
 *
li°í
)

228 
ö_p‹t_t
 
p
;

229 
ngx_uöt_t
 
i
;

230 
sockaddr
 *
ß
;

231 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

232 
ngx_maû_c⁄f_addr_t
 *
addr
;

234 
ß
 = &
li°í
->
sockaddr
.sockaddr;

235 
p
 = 
	`ngx_öë_gë_p‹t
(
ß
);

237 
p‹t
 = 
p‹ts
->
ñts
;

238 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

239 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

243 
p‹t
 = &p‹t[
i
];

244 
found
;

250 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

251 i‡(
p‹t
 =
NULL
) {

252  
NGX_ERROR
;

255 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

256 
p‹t
->p‹à
p
;

258 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

259 (
ngx_maû_c⁄f_addr_t
))

260 !
NGX_OK
)

262  
NGX_ERROR
;

265 
found
:

267 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

268 i‡(
addr
 =
NULL
) {

269  
NGX_ERROR
;

272 
addr
->
›t
 = *
li°í
;

274  
NGX_OK
;

275 
	}
}

279 
	$ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

281 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

282 
ngx_li°íög_t
 *
ls
;

283 
ngx_maû_p‹t_t
 *
mp‹t
;

284 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

285 
ngx_maû_c⁄f_addr_t
 *
addr
;

286 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

288 
p‹t
 = 
p‹ts
->
ñts
;

289 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

291 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

292 (
ngx_maû_c⁄f_addr_t
), 
ngx_maû_cmp_c⁄f_addrs
);

294 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

295 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

302 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

303 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

304 
böd_wûdˇrd
 = 1;

307 
böd_wûdˇrd
 = 0;

310 
i
 = 0;

312 
i
 < 
œ°
) {

314 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

315 
i
++;

319 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
[
i
].
›t
.
sockaddr
.sockaddr,

320 
addr
[
i
].
›t
.
sockÀn
);

321 i‡(
ls
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
ls
->
addr_¡›
 = 1;

326 
ls
->
h™dÀr
 = 
ngx_maû_öô_c⁄√˘i⁄
;

327 
ls
->
poﬁ_size
 = 256;

329 
cscf
 = 
addr
->
›t
.
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

331 
ls
->
logp
 = 
cscf
->
îr‹_log
;

332 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

333 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

335 
ls
->
backlog
 = 
addr
[
i
].
›t
.backlog;

336 
ls
->
rcvbuf
 = 
addr
[
i
].
›t
.rcvbuf;

337 
ls
->
¢dbuf
 = 
addr
[
i
].
›t
.sndbuf;

339 
ls
->
kì∑live
 = 
addr
[
i
].
›t
.
so_kì∑live
;

340 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

341 
ls
->
kìpidÀ
 = 
addr
[
i
].
›t
.
t˝_kìpidÀ
;

342 
ls
->
kìpötvl
 = 
addr
[
i
].
›t
.
t˝_kìpötvl
;

343 
ls
->
kìp˙t
 = 
addr
[
i
].
›t
.
t˝_kìp˙t
;

346 #i‡(
NGX_HAVE_INET6
)

347 
ls
->
ùv6⁄ly
 = 
addr
[
i
].
›t
.ipv6only;

350 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_maû_p‹t_t
));

351 i‡(
mp‹t
 =
NULL
) {

352  
NGX_CONF_ERROR
;

355 
ls
->
£rvîs
 = 
mp‹t
;

357 
mp‹t
->
«ddrs
 = 
i
 + 1;

359 
ls
->
sockaddr
->
ß_Ámûy
) {

360 #i‡(
NGX_HAVE_INET6
)

361 
AF_INET6
:

362 i‡(
	`ngx_maû_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

363  
NGX_CONF_ERROR
;

368 i‡(
	`ngx_maû_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

369  
NGX_CONF_ERROR
;

374 
addr
++;

375 
œ°
--;

379  
NGX_CONF_OK
;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

385 
ngx_maû_c⁄f_addr_t
 *
addr
)

387 
u_ch¨
 *
p
;

388 
size_t
 
Àn
;

389 
ngx_uöt_t
 
i
;

390 
ngx_maû_ö_addr_t
 *
addrs
;

391 
sockaddr_ö
 *
sö
;

392 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

394 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

395 
mp‹t
->
«ddrs
 * (
ngx_maû_ö_addr_t
));

396 i‡(
mp‹t
->
addrs
 =
NULL
) {

397  
NGX_ERROR
;

400 
addrs
 = 
mp‹t
->addrs;

402 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

404 
sö
 = &
addr
[
i
].
›t
.
sockaddr
.
sockaddr_ö
;

405 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

407 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].
›t
.ctx;

408 #i‡(
NGX_MAIL_SSL
)

409 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

412 
Àn
 = 
	`ngx_sock_¡›
(&
addr
[
i
].
›t
.
sockaddr
.sockaddr,áddr[i].›t.
sockÀn
,

413 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

415 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

416 i‡(
p
 =
NULL
) {

417  
NGX_ERROR
;

420 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

422 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

423 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

426  
NGX_OK
;

427 
	}
}

430 #i‡(
NGX_HAVE_INET6
)

432 
ngx_öt_t


433 
	$ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

434 
ngx_maû_c⁄f_addr_t
 *
addr
)

436 
u_ch¨
 *
p
;

437 
size_t
 
Àn
;

438 
ngx_uöt_t
 
i
;

439 
ngx_maû_ö6_addr_t
 *
addrs6
;

440 
sockaddr_ö6
 *
sö6
;

441 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

443 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

444 
mp‹t
->
«ddrs
 * (
ngx_maû_ö6_addr_t
));

445 i‡(
mp‹t
->
addrs
 =
NULL
) {

446  
NGX_ERROR
;

449 
addrs6
 = 
mp‹t
->
addrs
;

451 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

453 
sö6
 = &
addr
[
i
].
›t
.
sockaddr
.
sockaddr_ö6
;

454 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

456 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].
›t
.ctx;

457 #i‡(
NGX_MAIL_SSL
)

458 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

461 
Àn
 = 
	`ngx_sock_¡›
(&
addr
[
i
].
›t
.
sockaddr
.sockaddr,áddr[i].›t.
sockÀn
,

462 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

464 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

465 i‡(
p
 =
NULL
) {

466  
NGX_ERROR
;

469 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

471 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

472 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

475  
NGX_OK
;

476 
	}
}

481 
ngx_öt_t


482 
	$ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

484 
ngx_maû_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

486 
fú°
 = (
ngx_maû_c⁄f_addr_t
 *Ë
⁄e
;

487 
£c⁄d
 = (
ngx_maû_c⁄f_addr_t
 *Ë
two
;

489 i‡(
fú°
->
›t
.
wûdˇrd
) {

494 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

499 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

504 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

512 
	}
}

	@src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
ngx_sockaddr_t
 
	msockaddr
;

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 
	ms¶
:1;

39 #i‡(
NGX_HAVE_INET6
)

40 
	mùv6⁄ly
:1;

42 
	mso_kì∑live
:2;

43 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

44 
	mt˝_kìpidÀ
;

45 
	mt˝_kìpötvl
;

46 
	mt˝_kìp˙t
;

48 
	mbacklog
;

49 
	mrcvbuf
;

50 
	m¢dbuf
;

51 } 
	tngx_maû_li°í_t
;

55 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

56 
ngx_°r_t
 
	maddr_ãxt
;

57 
ngx_uöt_t
 
	ms¶
;

58 } 
	tngx_maû_addr_c⁄f_t
;

61 
ö_addr_t
 
	maddr
;

62 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

63 } 
	tngx_maû_ö_addr_t
;

66 #i‡(
NGX_HAVE_INET6
)

69 
ö6_addr
 
	maddr6
;

70 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

71 } 
	tngx_maû_ö6_addr_t
;

78 *
	maddrs
;

79 
ngx_uöt_t
 
	m«ddrs
;

80 } 
	tngx_maû_p‹t_t
;

84 
	mÁmûy
;

85 
ö_p‹t_t
 
	mp‹t
;

86 
ngx_¨øy_t
 
	maddrs
;

87 } 
	tngx_maû_c⁄f_p‹t_t
;

91 
ngx_maû_li°í_t
 
	m›t
;

92 } 
	tngx_maû_c⁄f_addr_t
;

96 
ngx_¨øy_t
 
	m£rvîs
;

97 
ngx_¨øy_t
 
	mli°í
;

98 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

101 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

102 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

103 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

106 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

110 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

112 
ngx_m£c_t
 
	mtimeout
;

113 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

115 
ngx_°r_t
 
	m£rvî_«me
;

117 
u_ch¨
 *
	mfûe_«me
;

118 
ngx_uöt_t
 
	mlöe
;

120 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

121 
ngx_log_t
 *
	mîr‹_log
;

124 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

126 
ngx_uöt_t
 
	mli°í
;

127 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

131 
	mngx_p›3_°¨t
 = 0,

132 
	mngx_p›3_u£r
,

133 
	mngx_p›3_∑sswd
,

134 
	mngx_p›3_auth_logö_u£∫ame
,

135 
	mngx_p›3_auth_logö_∑ssw‹d
,

136 
	mngx_p›3_auth_∂aö
,

137 
	mngx_p›3_auth_¸am_md5
,

138 
	mngx_p›3_auth_exã∫Æ


139 } 
	tngx_p›3_°©e_e
;

143 
	mngx_im≠_°¨t
 = 0,

144 
	mngx_im≠_auth_logö_u£∫ame
,

145 
	mngx_im≠_auth_logö_∑ssw‹d
,

146 
	mngx_im≠_auth_∂aö
,

147 
	mngx_im≠_auth_¸am_md5
,

148 
	mngx_im≠_auth_exã∫Æ
,

149 
	mngx_im≠_logö
,

150 
	mngx_im≠_u£r
,

151 
	mngx_im≠_∑sswd


152 } 
	tngx_im≠_°©e_e
;

156 
	mngx_smç_°¨t
 = 0,

157 
	mngx_smç_auth_logö_u£∫ame
,

158 
	mngx_smç_auth_logö_∑ssw‹d
,

159 
	mngx_smç_auth_∂aö
,

160 
	mngx_smç_auth_¸am_md5
,

161 
	mngx_smç_auth_exã∫Æ
,

162 
	mngx_smç_hño
,

163 
	mngx_smç_hño_x˛õ¡
,

164 
	mngx_smç_hño_‰om
,

165 
	mngx_smç_x˛õ¡
,

166 
	mngx_smç_x˛õ¡_‰om
,

167 
	mngx_smç_x˛õ¡_hño
,

168 
	mngx_smç_‰om
,

169 
	mngx_smç_to


170 } 
	tngx_smç_°©e_e
;

174 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

175 
ngx_buf_t
 *
	mbuf„r
;

176 } 
	tngx_maû_¥oxy_˘x_t
;

180 
uöt32_t
 
	msig«tuª
;

182 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

184 
ngx_°r_t
 
	mout
;

185 
ngx_buf_t
 *
	mbuf„r
;

187 **
	m˘x
;

188 **
	mmaö_c⁄f
;

189 **
	m§v_c⁄f
;

191 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

193 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

195 
ngx_uöt_t
 
	mmaû_°©e
;

197 
	m¥Ÿocﬁ
:3;

198 
	mblocked
:1;

199 
	mquô
:1;

200 
	mquŸed
:1;

201 
	mback¶ash
:1;

202 
	mno_sync_lôîÆ
:1;

203 
	m°¨âls
:1;

204 
	mesmç
:1;

205 
	mauth_mëhod
:3;

206 
	mauth_waô
:1;

208 
ngx_°r_t
 
	mlogö
;

209 
ngx_°r_t
 
	m∑sswd
;

211 
ngx_°r_t
 
	mß…
;

212 
ngx_°r_t
 
	mèg
;

213 
ngx_°r_t
 
	mègged_löe
;

214 
ngx_°r_t
 
	mãxt
;

216 
ngx_°r_t
 *
	maddr_ãxt
;

217 
ngx_°r_t
 
	mho°
;

218 
ngx_°r_t
 
	msmç_hño
;

219 
ngx_°r_t
 
	msmç_‰om
;

220 
ngx_°r_t
 
	msmç_to
;

222 
ngx_°r_t
 
	mcmd
;

224 
ngx_uöt_t
 
	mcomm™d
;

225 
ngx_¨øy_t
 
	m¨gs
;

227 
ngx_uöt_t
 
	mlogö_©ãm±
;

231 
ngx_uöt_t
 
	m°©e
;

232 
u_ch¨
 *
	mcmd_°¨t
;

233 
u_ch¨
 *
	m¨g_°¨t
;

234 
u_ch¨
 *
	m¨g_íd
;

235 
ngx_uöt_t
 
	mlôîÆ_Àn
;

236 } 
	tngx_maû_£ssi⁄_t
;

240 
ngx_°r_t
 *
	m˛õ¡
;

241 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

242 } 
	tngx_maû_log_˘x_t
;

245 
	#NGX_POP3_USER
 1

	)

246 
	#NGX_POP3_PASS
 2

	)

247 
	#NGX_POP3_CAPA
 3

	)

248 
	#NGX_POP3_QUIT
 4

	)

249 
	#NGX_POP3_NOOP
 5

	)

250 
	#NGX_POP3_STLS
 6

	)

251 
	#NGX_POP3_APOP
 7

	)

252 
	#NGX_POP3_AUTH
 8

	)

253 
	#NGX_POP3_STAT
 9

	)

254 
	#NGX_POP3_LIST
 10

	)

255 
	#NGX_POP3_RETR
 11

	)

256 
	#NGX_POP3_DELE
 12

	)

257 
	#NGX_POP3_RSET
 13

	)

258 
	#NGX_POP3_TOP
 14

	)

259 
	#NGX_POP3_UIDL
 15

	)

262 
	#NGX_IMAP_LOGIN
 1

	)

263 
	#NGX_IMAP_LOGOUT
 2

	)

264 
	#NGX_IMAP_CAPABILITY
 3

	)

265 
	#NGX_IMAP_NOOP
 4

	)

266 
	#NGX_IMAP_STARTTLS
 5

	)

268 
	#NGX_IMAP_NEXT
 6

	)

270 
	#NGX_IMAP_AUTHENTICATE
 7

	)

273 
	#NGX_SMTP_HELO
 1

	)

274 
	#NGX_SMTP_EHLO
 2

	)

275 
	#NGX_SMTP_AUTH
 3

	)

276 
	#NGX_SMTP_QUIT
 4

	)

277 
	#NGX_SMTP_NOOP
 5

	)

278 
	#NGX_SMTP_MAIL
 6

	)

279 
	#NGX_SMTP_RSET
 7

	)

280 
	#NGX_SMTP_RCPT
 8

	)

281 
	#NGX_SMTP_DATA
 9

	)

282 
	#NGX_SMTP_VRFY
 10

	)

283 
	#NGX_SMTP_EXPN
 11

	)

284 
	#NGX_SMTP_HELP
 12

	)

285 
	#NGX_SMTP_STARTTLS
 13

	)

288 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

289 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

290 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

291 
	#NGX_MAIL_AUTH_APOP
 3

	)

292 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

293 
	#NGX_MAIL_AUTH_EXTERNAL
 5

	)

294 
	#NGX_MAIL_AUTH_NONE
 6

	)

297 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

298 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

299 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

300 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

301 
	#NGX_MAIL_AUTH_EXTERNAL_ENABLED
 0x0020

	)

302 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0040

	)

305 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

308 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

309 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

310 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

311 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

312 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

315 
	sngx_maû_¥Ÿocﬁ_s
 {

316 
ngx_°r_t
 
«me
;

317 
ö_p‹t_t
 
p‹t
[4];

318 
ngx_uöt_t
 
ty≥
;

320 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

321 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

322 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

323 
ngx_maû_auth_°©e_±
 
auth_°©e
;

325 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

326 
ngx_°r_t
 
˚π_îr‹
;

327 
ngx_°r_t
 
no_˚π
;

332 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

334 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

335 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

337 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

338 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

339 *
c⁄f
);

340 } 
	tngx_maû_moduÀ_t
;

343 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

345 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

346 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

349 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

350 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

353 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

354 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

355 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

358 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

359 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

360 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

362 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

363 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

364 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

365 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

368 #i‡(
NGX_MAIL_SSL
)

369 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

370 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

374 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

376 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

377 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

378 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

379 
ngx_uöt_t
 
n
);

380 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

381 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

382 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

383 
ngx_c⁄√˘i⁄_t
 *
c
);

384 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

385 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

386 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

387 
ngx_öt_t
 
	`ngx_maû_auth_exã∫Æ
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

388 
ngx_uöt_t
 
n
);

389 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

391 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

392 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

393 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

394 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

395 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

396 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

399 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

403 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

404 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

408 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

409 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@src/mail/ngx_mail_auth_http_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_addr_t
 *
	m≥î
;

18 
ngx_m£c_t
 
	mtimeout
;

19 
ngx_Êag_t
 
	m∑ss_˛õ¡_˚π
;

21 
ngx_°r_t
 
	mho°_hódî
;

22 
ngx_°r_t
 
	muri
;

23 
ngx_°r_t
 
	mhódî
;

25 
ngx_¨øy_t
 *
	mhódîs
;

27 
u_ch¨
 *
	mfûe
;

28 
ngx_uöt_t
 
	mlöe
;

29 } 
	tngx_maû_auth_hâp_c⁄f_t
;

32 
ngx_maû_auth_hâp_˘x_s
 
	tngx_maû_auth_hâp_˘x_t
;

34 (*
	tngx_maû_auth_hâp_h™dÀr_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

35 
	tngx_maû_auth_hâp_˘x_t
 *
	t˘x
);

37 
	sngx_maû_auth_hâp_˘x_s
 {

38 
ngx_buf_t
 *
ªque°
;

39 
ngx_buf_t
 *
ª•⁄£
;

40 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

42 
ngx_maû_auth_hâp_h™dÀr_±
 
h™dÀr
;

44 
ngx_uöt_t
 
°©e
;

46 
u_ch¨
 *
hódî_«me_°¨t
;

47 
u_ch¨
 *
hódî_«me_íd
;

48 
u_ch¨
 *
hódî_°¨t
;

49 
u_ch¨
 *
hódî_íd
;

51 
ngx_°r_t
 
addr
;

52 
ngx_°r_t
 
p‹t
;

53 
ngx_°r_t
 
îr
;

54 
ngx_°r_t
 
îrmsg
;

55 
ngx_°r_t
 
îrcode
;

57 
time_t
 
¶ìp
;

59 
ngx_poﬁ_t
 *
poﬁ
;

63 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

64 
	`ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

65 
	`ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

66 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

67 
	`ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

68 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

69 
	`ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
);

70 
ngx_öt_t
 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

71 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

72 
	`ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
);

73 
	`ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

74 
ngx_buf_t
 *
	`ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
,

75 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
);

76 
ngx_öt_t
 
	`ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,

77 
ngx_°r_t
 *
esˇ≥d
);

79 *
	`ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

80 *
	`ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

81 *
chûd
);

82 *
	`ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

83 *
	`ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

84 *
c⁄f
);

87 
ngx_comm™d_t
 
ngx_maû_auth_hâp_comm™ds
[] = {

89 { 
	`ngx_°rög
("auth_http"),

90 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_maû_auth_hâp
,

92 
NGX_MAIL_SRV_CONF_OFFSET
,

94 
NULL
 },

96 { 
	`ngx_°rög
("auth_http_timeout"),

97 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_m£c_¶Ÿ
,

99 
NGX_MAIL_SRV_CONF_OFFSET
,

100 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
timeout
),

101 
NULL
 },

103 { 
	`ngx_°rög
("auth_http_header"),

104 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE2
,

105 
ngx_maû_auth_hâp_hódî
,

106 
NGX_MAIL_SRV_CONF_OFFSET
,

108 
NULL
 },

110 { 
	`ngx_°rög
("auth_http_pass_client_cert"),

111 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

112 
ngx_c⁄f_£t_Êag_¶Ÿ
,

113 
NGX_MAIL_SRV_CONF_OFFSET
,

114 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
∑ss_˛õ¡_˚π
),

115 
NULL
 },

117 
ngx_nuŒ_comm™d


118 
	}
};

121 
ngx_maû_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ_˘x
 = {

122 
NULL
,

124 
NULL
,

125 
NULL
,

127 
ngx_maû_auth_hâp_¸óã_c⁄f
,

128 
ngx_maû_auth_hâp_mîge_c⁄f


132 
ngx_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ
 = {

133 
NGX_MODULE_V1
,

134 &
ngx_maû_auth_hâp_moduÀ_˘x
,

135 
ngx_maû_auth_hâp_comm™ds
,

136 
NGX_MAIL_MODULE
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NGX_MODULE_V1_PADDING


148 
ngx_°r_t
 
	gngx_maû_auth_hâp_mëhod
[] = {

149 
ngx_°rög
("plain"),

150 
ngx_°rög
("plain"),

151 
ngx_°rög
("plain"),

152 
ngx_°rög
("apop"),

153 
ngx_°rög
("cram-md5"),

154 
ngx_°rög
("external"),

155 
ngx_°rög
("none")

158 
ngx_°r_t
 
	gngx_maû_smç_îrcode
 = 
ngx_°rög
("535 5.7.0");

162 
	$ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
)

164 
ngx_öt_t
 
rc
;

165 
ngx_poﬁ_t
 *
poﬁ
;

166 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

167 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

169 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "in httpáuth state";

171 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
s
->
c⁄√˘i⁄
->
log
);

172 i‡(
poﬁ
 =
NULL
) {

173 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

177 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_maû_auth_hâp_˘x_t
));

178 i‡(
˘x
 =
NULL
) {

179 
	`ngx_de°roy_poﬁ
(
poﬁ
);

180 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

184 
˘x
->
poﬁ
 =Öool;

186 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

188 
˘x
->
ªque°
 = 
	`ngx_maû_auth_hâp_¸óã_ªque°
(
s
, 
poﬁ
, 
ahcf
);

189 i‡(
˘x
->
ªque°
 =
NULL
) {

190 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

191 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

195 
	`ngx_maû_£t_˘x
(
s
, 
˘x
, 
ngx_maû_auth_hâp_moduÀ
);

197 
˘x
->
≥î
.
sockaddr
 = 
ahcf
->peer->sockaddr;

198 
˘x
->
≥î
.
sockÀn
 = 
ahcf
->peer->socklen;

199 
˘x
->
≥î
.
«me
 = &
ahcf
->peer->name;

200 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

201 
˘x
->
≥î
.
log
 = 
s
->
c⁄√˘i⁄
->log;

202 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

204 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

206 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

207 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

208 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

211 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

212 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

216 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = 
s
;

217 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

219 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_block_ªad
;

220 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_ªad_h™dÀr
;

221 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_auth_hâp_wrôe_h™dÀr
;

223 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_ign‹e_°©us_löe
;

225 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, 
ahcf
->
timeout
);

226 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, 
ahcf
->
timeout
);

228 i‡(
rc
 =
NGX_OK
) {

229 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

232 
	}
}

236 
	$ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

238 
ssize_t
 
n
, 
size
;

239 
ngx_c⁄√˘i⁄_t
 *
c
;

240 
ngx_maû_£ssi⁄_t
 *
s
;

241 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

242 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

244 
c
 = 
wev
->
d©a
;

245 
s
 = 
c
->
d©a
;

247 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

249 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0,

252 i‡(
wev
->
timedout
) {

253 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

254 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

255 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

256 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

257 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

261 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

263 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

265 i‡(
n
 =
NGX_ERROR
) {

266 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

267 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

268 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

272 i‡(
n
 > 0) {

273 
˘x
->
ªque°
->
pos
 +
n
;

275 i‡(
n
 =
size
) {

276 
wev
->
h™dÀr
 = 
ngx_maû_auth_hâp_dummy_h™dÀr
;

278 i‡(
wev
->
timî_£t
) {

279 
	`ngx_dñ_timî
(
wev
);

282 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

283 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

284 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

285 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

292 i‡(!
wev
->
timî_£t
) {

293 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

294 
	`ngx_add_timî
(
wev
, 
ahcf
->
timeout
);

296 
	}
}

300 
	$ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

302 
ssize_t
 
n
, 
size
;

303 
ngx_c⁄√˘i⁄_t
 *
c
;

304 
ngx_maû_£ssi⁄_t
 *
s
;

305 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

307 
c
 = 
ªv
->
d©a
;

308 
s
 = 
c
->
d©a
;

310 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

313 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

315 i‡(
ªv
->
timedout
) {

316 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

317 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

318 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

319 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

320 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

324 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

325 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 1024);

326 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

327 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

328 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

329 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

334 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

336 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
pos
, 
size
);

338 i‡(
n
 > 0) {

339 
˘x
->
ª•⁄£
->
œ°
 +
n
;

341 
˘x
->
	`h™dÀr
(
s
, ctx);

345 i‡(
n
 =
NGX_AGAIN
) {

349 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

350 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

351 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

352 
	}
}

356 
	$ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

357 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

359 
u_ch¨
 *
p
, 
ch
;

361 
sw_°¨t
 = 0,

362 
sw_H
,

363 
sw_HT
,

364 
sw_HTT
,

365 
sw_HTTP
,

366 
sw_skù
,

367 
sw_Æmo°_d⁄e


368 } 
°©e
;

370 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

373 
°©e
 = 
˘x
->state;

375 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

376 
ch
 = *
p
;

378 
°©e
) {

381 
sw_°¨t
:

382 i‡(
ch
 == 'H') {

383 
°©e
 = 
sw_H
;

386 
√xt
;

388 
sw_H
:

389 i‡(
ch
 == 'T') {

390 
°©e
 = 
sw_HT
;

393 
√xt
;

395 
sw_HT
:

396 i‡(
ch
 == 'T') {

397 
°©e
 = 
sw_HTT
;

400 
√xt
;

402 
sw_HTT
:

403 i‡(
ch
 == 'P') {

404 
°©e
 = 
sw_HTTP
;

407 
√xt
;

409 
sw_HTTP
:

410 i‡(
ch
 == '/') {

411 
°©e
 = 
sw_skù
;

414 
√xt
;

417 
sw_skù
:

418 
ch
) {

419 
CR
:

420 
°©e
 = 
sw_Æmo°_d⁄e
;

423 
LF
:

424 
d⁄e
;

429 
sw_Æmo°_d⁄e
:

430 i‡(
ch
 =
LF
) {

431 
d⁄e
;

434 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

436 
˘x
->
≥î
.
«me
);

437 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

438 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

439 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

444 
˘x
->
ª•⁄£
->
pos
 = 
p
;

445 
˘x
->
°©e
 = state;

449 
√xt
:

451 
p
 = 
˘x
->
ª•⁄£
->
°¨t
 - 1;

453 
d⁄e
:

455 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

456 
˘x
->
°©e
 = 0;

457 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_¥o˚ss_hódîs
;

458 
˘x
->
	`h™dÀr
(
s
, ctx);

459 
	}
}

463 
	$ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

464 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

466 
u_ch¨
 *
p
;

467 
time_t
 
timî
;

468 
size_t
 
Àn
, 
size
;

469 
ngx_öt_t
 
rc
, 
p‹t
, 
n
;

470 
ngx_addr_t
 *
≥î
;

472 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

476 
rc
 = 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
s
, 
˘x
);

478 i‡(
rc
 =
NGX_OK
) {

480 #i‡(
NGX_DEBUG
)

482 
ngx_°r_t
 
key
, 
vÆue
;

484 
key
.
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

485 
key
.
d©a
 = 
˘x
->
hódî_«me_°¨t
;

486 
vÆue
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

487 
vÆue
.
d©a
 = 
˘x
->
hódî_°¨t
;

489 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

491 &
key
, &
vÆue
);

495 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

497 i‡(
Àn
 == ("Auth-Status") - 1

498 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

499 (
u_ch¨
 *) "Auth-Status",

503 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

505 i‡(
Àn
 == 2

506 && 
˘x
->
hódî_°¨t
[0] == 'O'

507 && 
˘x
->
hódî_°¨t
[1] == 'K')

512 i‡(
Àn
 == 4

513 && 
˘x
->
hódî_°¨t
[0] == 'W'

514 && 
˘x
->
hódî_°¨t
[1] == 'A'

515 && 
˘x
->
hódî_°¨t
[2] == 'I'

516 && 
˘x
->
hódî_°¨t
[3] == 'T')

518 
s
->
auth_waô
 = 1;

522 
˘x
->
îrmsg
.
Àn
 =Üen;

523 
˘x
->
îrmsg
.
d©a
 = ctx->
hódî_°¨t
;

525 
s
->
¥Ÿocﬁ
) {

527 
NGX_MAIL_POP3_PROTOCOL
:

528 
size
 = ("-ERR "Ë- 1 + 
Àn
 + (
CRLF
) - 1;

531 
NGX_MAIL_IMAP_PROTOCOL
:

532 
size
 = 
s
->
èg
.
Àn
 + ("NO ") - 1 +Üen

533 + (
CRLF
) - 1;

537 
˘x
->
îr
 = ctx->
îrmsg
;

541 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
size
);

542 i‡(
p
 =
NULL
) {

543 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

544 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

545 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

549 
˘x
->
îr
.
d©a
 = 
p
;

551 
s
->
¥Ÿocﬁ
) {

553 
NGX_MAIL_POP3_PROTOCOL
:

554 *
p
++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';

557 
NGX_MAIL_IMAP_PROTOCOL
:

558 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

559 *
p
++ = 'N'; *p++ = 'O'; *p++ = ' ';

566 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
hódî_°¨t
, 
Àn
);

567 *
p
++ = 
CR
; *p++ = 
LF
;

569 
˘x
->
îr
.
Àn
 = 
p
 - ctx->îr.
d©a
;

574 i‡(
Àn
 == ("Auth-Server") - 1

575 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

576 (
u_ch¨
 *) "Auth-Server",

580 
˘x
->
addr
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

581 
˘x
->
addr
.
d©a
 = ctx->
hódî_°¨t
;

586 i‡(
Àn
 == ("Auth-Port") - 1

587 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

588 (
u_ch¨
 *) "Auth-Port",

592 
˘x
->
p‹t
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

593 
˘x
->
p‹t
.
d©a
 = ctx->
hódî_°¨t
;

598 i‡(
Àn
 == ("Auth-User") - 1

599 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

600 (
u_ch¨
 *) "Auth-User",

604 
s
->
logö
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

606 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
, s->logö.
Àn
);

607 i‡(
s
->
logö
.
d©a
 =
NULL
) {

608 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

609 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

610 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

614 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
˘x
->
hódî_°¨t
, s->logö.
Àn
);

619 i‡(
Àn
 == ("Auth-Pass") - 1

620 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

621 (
u_ch¨
 *) "Auth-Pass",

625 
s
->
∑sswd
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

627 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
,

628 
s
->
∑sswd
.
Àn
);

629 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

630 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

631 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

632 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

636 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
˘x
->
hódî_°¨t
, s->∑sswd.
Àn
);

641 i‡(
Àn
 == ("Auth-Wait") - 1

642 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

643 (
u_ch¨
 *) "Auth-Wait",

647 
n
 = 
	`ngx_©oi
(
˘x
->
hódî_°¨t
,

648 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
);

650 i‡(
n
 !
NGX_ERROR
) {

651 
˘x
->
¶ìp
 = 
n
;

657 i‡(
Àn
 == ("Auth-Error-Code") - 1

658 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

659 (
u_ch¨
 *) "Auth-Error-Code",

663 
˘x
->
îrcode
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

665 
˘x
->
îrcode
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

666 
˘x
->
îrcode
.
Àn
);

667 i‡(
˘x
->
îrcode
.
d©a
 =
NULL
) {

668 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

669 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

670 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

674 
	`ngx_mem˝y
(
˘x
->
îrcode
.
d©a
, ctx->
hódî_°¨t
,

675 
˘x
->
îrcode
.
Àn
);

685 i‡(
rc
 =
NGX_DONE
) {

686 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

689 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

691 i‡(
˘x
->
îr
.
Àn
) {

693 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

694 "˛õ¡Üogö faûed: \"%V\"", &
˘x
->
îrmsg
);

696 i‡(
s
->
¥Ÿocﬁ
 =
NGX_MAIL_SMTP_PROTOCOL
) {

698 i‡(
˘x
->
îrcode
.
Àn
 == 0) {

699 
˘x
->
îrcode
 = 
ngx_maû_smç_îrcode
;

702 
˘x
->
îr
.
Àn
 = ctx->
îrcode
.À¿+ ctx->
îrmsg
.len

703 + (" " 
CRLF
) - 1;

705 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
˘x
->
îr
.
Àn
);

706 i‡(
p
 =
NULL
) {

707 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

708 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

712 
˘x
->
îr
.
d©a
 = 
p
;

714 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrcode
.
d©a
, ctx->îrcode.
Àn
);

715 *
p
++ = ' ';

716 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrmsg
.
d©a
, ctx->îrmsg.
Àn
);

717 *
p
++ = 
CR
; *∞
LF
;

720 
s
->
out
 = 
˘x
->
îr
;

721 
timî
 = 
˘x
->
¶ìp
;

723 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

725 i‡(
timî
 == 0) {

726 
s
->
quô
 = 1;

727 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

731 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

733 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

738 i‡(
s
->
auth_waô
) {

739 
timî
 = 
˘x
->
¶ìp
;

741 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

743 i‡(
timî
 == 0) {

744 
	`ngx_maû_auth_hâp_öô
(
s
);

748 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

750 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

755 i‡(
˘x
->
addr
.
Àn
 =0 || ctx->
p‹t
.len == 0) {

756 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

758 
˘x
->
≥î
.
«me
);

759 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

760 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

764 i‡(
s
->
∑sswd
.
d©a
 =
NULL


765 && 
s
->
¥Ÿocﬁ
 !
NGX_MAIL_SMTP_PROTOCOL
)

767 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

769 
˘x
->
≥î
.
«me
);

770 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

771 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

775 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

776 i‡(
≥î
 =
NULL
) {

777 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

778 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

782 
rc
 = 
	`ngx_∑r£_addr
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
≥î
,

783 
˘x
->
addr
.
d©a
, ctx->addr.
Àn
);

785 
rc
) {

786 
NGX_OK
:

789 
NGX_DECLINED
:

790 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

793 
˘x
->
≥î
.
«me
, &˘x->
addr
);

797 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

798 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

802 
p‹t
 = 
	`ngx_©oi
(
˘x
->p‹t.
d©a
, ctx->p‹t.
Àn
);

803 i‡(
p‹t
 =
NGX_ERROR
 ||Öort < 1 ||Öort > 65535) {

804 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

807 
˘x
->
≥î
.
«me
, &˘x->
p‹t
);

808 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

809 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

813 
	`ngx_öë_£t_p‹t
(
≥î
->
sockaddr
, (
ö_p‹t_t
Ë
p‹t
);

815 
Àn
 = 
˘x
->
addr
.À¿+ 1 + ctx->
p‹t
.len;

817 
≥î
->
«me
.
Àn
 =Üen;

819 
≥î
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

820 i‡(
≥î
->
«me
.
d©a
 =
NULL
) {

821 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

822 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

826 
Àn
 = 
˘x
->
addr
.len;

828 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
, 
˘x
->
addr
.d©a, 
Àn
);

830 
≥î
->
«me
.
d©a
[
Àn
++] = ':';

832 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
 + 
Àn
, 
˘x
->
p‹t
.data, ctx->port.len);

834 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

835 
	`ngx_maû_¥oxy_öô
(
s
, 
≥î
);

840 i‡(
rc
 =
NGX_AGAIN
 ) {

846 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

848 
˘x
->
≥î
.
«me
);

849 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

850 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

851 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

855 
	}
}

859 
	$ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
)

861 
ngx_c⁄√˘i⁄_t
 *
c
;

862 
ngx_maû_£ssi⁄_t
 *
s
;

863 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

865 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailáuth sleep handler");

867 
c
 = 
ªv
->
d©a
;

868 
s
 = 
c
->
d©a
;

870 i‡(
ªv
->
timedout
) {

872 
ªv
->
timedout
 = 0;

874 i‡(
s
->
auth_waô
) {

875 
s
->
auth_waô
 = 0;

876 
	`ngx_maû_auth_hâp_öô
(
s
);

880 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

882 
ªv
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
auth_°©e
;

884 
s
->
maû_°©e
 = 0;

885 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_PLAIN
;

887 
c
->
log
->
a˘i⁄
 = "ináuth state";

889 
	`ngx_maû_£nd
(
c
->
wrôe
);

891 i‡(
c
->
de°royed
) {

895 
	`ngx_add_timî
(
ªv
, 
cscf
->
timeout
);

897 i‡(
ªv
->
ªady
) {

898 
ªv
->
	`h™dÀr
(rev);

902 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

903 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

909 i‡(
ªv
->
a˘ive
) {

910 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

911 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

914 
	}
}

917 
ngx_öt_t


918 
	$ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

919 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

921 
u_ch¨
 
c
, 
ch
, *
p
;

923 
sw_°¨t
 = 0,

924 
sw_«me
,

925 
sw_•a˚_bef‹e_vÆue
,

926 
sw_vÆue
,

927 
sw_•a˚_a·î_vÆue
,

928 
sw_Æmo°_d⁄e
,

929 
sw_hódî_Æmo°_d⁄e


930 } 
°©e
;

932 
°©e
 = 
˘x
->state;

934 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

935 
ch
 = *
p
;

937 
°©e
) {

940 
sw_°¨t
:

942 
ch
) {

943 
CR
:

944 
˘x
->
hódî_íd
 = 
p
;

945 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

947 
LF
:

948 
˘x
->
hódî_íd
 = 
p
;

949 
hódî_d⁄e
;

951 
°©e
 = 
sw_«me
;

952 
˘x
->
hódî_«me_°¨t
 = 
p
;

954 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

955 i‡(
c
 >= 'a' && c <= 'z') {

959 i‡(
ch
 >= '0' && ch <= '9') {

963  
NGX_ERROR
;

968 
sw_«me
:

969 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

970 i‡(
c
 >= 'a' && c <= 'z') {

974 i‡(
ch
 == ':') {

975 
˘x
->
hódî_«me_íd
 = 
p
;

976 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

980 i‡(
ch
 == '-') {

984 i‡(
ch
 >= '0' && ch <= '9') {

988 i‡(
ch
 =
CR
) {

989 
˘x
->
hódî_«me_íd
 = 
p
;

990 
˘x
->
hódî_°¨t
 = 
p
;

991 
˘x
->
hódî_íd
 = 
p
;

992 
°©e
 = 
sw_Æmo°_d⁄e
;

996 i‡(
ch
 =
LF
) {

997 
˘x
->
hódî_«me_íd
 = 
p
;

998 
˘x
->
hódî_°¨t
 = 
p
;

999 
˘x
->
hódî_íd
 = 
p
;

1000 
d⁄e
;

1003  
NGX_ERROR
;

1006 
sw_•a˚_bef‹e_vÆue
:

1007 
ch
) {

1010 
CR
:

1011 
˘x
->
hódî_°¨t
 = 
p
;

1012 
˘x
->
hódî_íd
 = 
p
;

1013 
°©e
 = 
sw_Æmo°_d⁄e
;

1015 
LF
:

1016 
˘x
->
hódî_°¨t
 = 
p
;

1017 
˘x
->
hódî_íd
 = 
p
;

1018 
d⁄e
;

1020 
˘x
->
hódî_°¨t
 = 
p
;

1021 
°©e
 = 
sw_vÆue
;

1027 
sw_vÆue
:

1028 
ch
) {

1030 
˘x
->
hódî_íd
 = 
p
;

1031 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1033 
CR
:

1034 
˘x
->
hódî_íd
 = 
p
;

1035 
°©e
 = 
sw_Æmo°_d⁄e
;

1037 
LF
:

1038 
˘x
->
hódî_íd
 = 
p
;

1039 
d⁄e
;

1044 
sw_•a˚_a·î_vÆue
:

1045 
ch
) {

1048 
CR
:

1049 
°©e
 = 
sw_Æmo°_d⁄e
;

1051 
LF
:

1052 
d⁄e
;

1054 
°©e
 = 
sw_vÆue
;

1060 
sw_Æmo°_d⁄e
:

1061 
ch
) {

1062 
LF
:

1063 
d⁄e
;

1065  
NGX_ERROR
;

1069 
sw_hódî_Æmo°_d⁄e
:

1070 
ch
) {

1071 
LF
:

1072 
hódî_d⁄e
;

1074  
NGX_ERROR
;

1079 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1080 
˘x
->
°©e
 = state;

1082  
NGX_AGAIN
;

1084 
d⁄e
:

1086 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1087 
˘x
->
°©e
 = 
sw_°¨t
;

1089  
NGX_OK
;

1091 
hódî_d⁄e
:

1093 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1094 
˘x
->
°©e
 = 
sw_°¨t
;

1096  
NGX_DONE
;

1097 
	}
}

1101 
	$ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
)

1103 
ngx_c⁄√˘i⁄_t
 *
c
;

1104 
ngx_maû_£ssi⁄_t
 *
s
;

1105 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

1107 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

1110 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1111 
c
 = 
ªv
->
d©a
;

1112 
s
 = 
c
->
d©a
;

1114 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

1116 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

1117 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

1118 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1120 
	}
}

1124 
	$ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1126 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

1128 
	}
}

1131 
ngx_buf_t
 *

1132 
	$ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

1133 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
)

1135 
size_t
 
Àn
;

1136 
ngx_buf_t
 *
b
;

1137 
ngx_°r_t
 
logö
, 
∑sswd
;

1138 #i‡(
NGX_MAIL_SSL
)

1139 
ngx_°r_t
 
vîify
, 
subje˘
, 
issuî
, 
£rül
, 
fögî¥öt
,

1140 
øw_˚π
, 
˚π
;

1141 
ngx_c⁄√˘i⁄_t
 *
c
;

1142 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

1144 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

1146 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
logö
, &logöË!
NGX_OK
) {

1147  
NULL
;

1150 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
∑sswd
, &∑sswdË!
NGX_OK
) {

1151  
NULL
;

1154 #i‡(
NGX_MAIL_SSL
)

1156 
c
 = 
s
->
c⁄√˘i⁄
;

1157 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

1159 i‡(
c
->
s¶
 && 
s¶cf
->
vîify
) {

1163 i‡(
	`ngx_s¶_gë_˛õ¡_vîify
(
c
, 
poﬁ
, &
vîify
Ë!
NGX_OK
) {

1164  
NULL
;

1167 i‡(
	`ngx_s¶_gë_subje˘_dn
(
c
, 
poﬁ
, &
subje˘
Ë!
NGX_OK
) {

1168  
NULL
;

1171 i‡(
	`ngx_s¶_gë_issuî_dn
(
c
, 
poﬁ
, &
issuî
Ë!
NGX_OK
) {

1172  
NULL
;

1175 i‡(
	`ngx_s¶_gë_£rül_numbî
(
c
, 
poﬁ
, &
£rül
Ë!
NGX_OK
) {

1176  
NULL
;

1179 i‡(
	`ngx_s¶_gë_fögî¥öt
(
c
, 
poﬁ
, &
fögî¥öt
Ë!
NGX_OK
) {

1180  
NULL
;

1183 i‡(
ahcf
->
∑ss_˛õ¡_˚π
) {

1187 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
øw_˚π
Ë!
NGX_OK
) {

1188  
NULL
;

1191 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
øw_˚π
, &
˚π
Ë!
NGX_OK
) {

1192  
NULL
;

1196 
	`ngx_°r_nuŒ
(&
˚π
);

1200 
	`ngx_°r_nuŒ
(&
vîify
);

1201 
	`ngx_°r_nuŒ
(&
subje˘
);

1202 
	`ngx_°r_nuŒ
(&
issuî
);

1203 
	`ngx_°r_nuŒ
(&
£rül
);

1204 
	`ngx_°r_nuŒ
(&
fögî¥öt
);

1205 
	`ngx_°r_nuŒ
(&
˚π
);

1210 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

1212 
Àn
 = ("GET "Ë- 1 + 
ahcf
->
uri
.À¿+ (" HTTP/1.0" 
CRLF
) - 1

1213 + ("Ho°: "Ë- 1 + 
ahcf
->
ho°_hódî
.
Àn
 + (
CRLF
) - 1

1215 + 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn


1216 + (
CRLF
) - 1

1217 + ("Auth-U£r: "Ë- 1 + 
logö
.
Àn
 + (
CRLF
) - 1

1218 + ("Auth-Pass: "Ë- 1 + 
∑sswd
.
Àn
 + (
CRLF
) - 1

1219 + ("Auth-SÆt: "Ë- 1 + 
s
->
ß…
.
Àn


1220 + ("Auth-PrŸocﬁ: "Ë- 1 + 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn


1221 + (
CRLF
) - 1

1222 + ("Auth-Logö-Aâem±: "Ë- 1 + 
NGX_INT_T_LEN


1223 + (
CRLF
) - 1

1224 + ("Clõ¡-IP: "Ë- 1 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn


1225 + (
CRLF
) - 1

1226 + ("Clõ¡-Ho°: "Ë- 1 + 
s
->
ho°
.
Àn
 + (
CRLF
) - 1

1227 + ("Auth-SMTP-Hño: "Ë- 1 + 
s
->
smç_hño
.
Àn
 + (
CRLF
) - 1

1228 + ("Auth-SMTP-From: "Ë- 1 + 
s
->
smç_‰om
.
Àn
 + (
CRLF
) - 1

1229 + ("Auth-SMTP-To: "Ë- 1 + 
s
->
smç_to
.
Àn
 + (
CRLF
) - 1

1230 #i‡(
NGX_MAIL_SSL
)

1231 + ("Auth-SSL: on" 
CRLF
) - 1

1232 + ("Auth-SSL-Vîify: "Ë- 1 + 
vîify
.
Àn
 + (
CRLF
) - 1

1233 + ("Auth-SSL-Subje˘: "Ë- 1 + 
subje˘
.
Àn
 + (
CRLF
) - 1

1234 + ("Auth-SSL-Issuî: "Ë- 1 + 
issuî
.
Àn
 + (
CRLF
) - 1

1235 + ("Auth-SSL-Sîül: "Ë- 1 + 
£rül
.
Àn
 + (
CRLF
) - 1

1236 + ("Auth-SSL-Fögî¥öt: "Ë- 1 + 
fögî¥öt
.
Àn


1237 + (
CRLF
) - 1

1238 + ("Auth-SSL-Cît: "Ë- 1 + 
˚π
.
Àn
 + (
CRLF
) - 1

1240 + 
ahcf
->
hódî
.
Àn


1241 + (
CRLF
) - 1;

1243 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
Àn
);

1244 i‡(
b
 =
NULL
) {

1245  
NULL
;

1248 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "GET ", ("GET ") - 1);

1249 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
uri
.
d©a
,áhcf->uri.
Àn
);

1250 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, " HTTP/1.0" 
CRLF
,

1251 (" HTTP/1.0" 
CRLF
) - 1);

1253 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Host: ", ("Host: ") - 1);

1254 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
ho°_hódî
.
d©a
,

1255 
ahcf
->
ho°_hódî
.
Àn
);

1256 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1258 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Method: ",

1260 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last,

1261 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
d©a
,

1262 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn
);

1263 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1265 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-User: ", ("Auth-User: ") - 1);

1266 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
logö
.
d©a
,Üogö.
Àn
);

1267 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1269 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Pass: ", ("Auth-Pass: ") - 1);

1270 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
∑sswd
.
d©a
,Öasswd.
Àn
);

1271 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1273 i‡(
s
->
auth_mëhod
 !
NGX_MAIL_AUTH_PLAIN
 && s->
ß…
.
Àn
) {

1274 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Salt: ", ("Auth-Salt: ") - 1);

1275 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

1277 
s
->
∑sswd
.
d©a
 = 
NULL
;

1280 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Protocol: ",

1282 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
cscf
->
¥Ÿocﬁ
->
«me
.
d©a
,

1283 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn
);

1284 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1286 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Auth-Logö-Aâem±: %ui" 
CRLF
,

1287 
s
->
logö_©ãm±
);

1289 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-IP: ", ("Client-IP: ") - 1);

1290 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

1291 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

1292 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1294 i‡(
s
->
ho°
.
Àn
) {

1295 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-Host: ",

1297 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

1298 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1301 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

1305 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-Helo: ",

1307 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_hño
.
d©a
, s->smç_hño.
Àn
);

1308 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1310 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-From: ",

1312 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_‰om
.
d©a
, s->smç_‰om.
Àn
);

1313 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1315 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-To: ",

1317 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_to
.
d©a
, s->smç_to.
Àn
);

1318 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1322 #i‡(
NGX_MAIL_SSL
)

1324 i‡(
c
->
s¶
) {

1325 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Auth-SSL: on" 
CRLF
,

1326 ("Auth-SSL: on" 
CRLF
) - 1);

1328 i‡(
vîify
.
Àn
) {

1329 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Verify: ",

1331 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vîify
.
d©a
, vîify.
Àn
);

1332 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1335 i‡(
subje˘
.
Àn
) {

1336 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Subject: ",

1338 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
subje˘
.
d©a
, subje˘.
Àn
);

1339 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1342 i‡(
issuî
.
Àn
) {

1343 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Issuer: ",

1345 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
issuî
.
d©a
, issuî.
Àn
);

1346 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1349 i‡(
£rül
.
Àn
) {

1350 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Serial: ",

1352 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
£rül
.
d©a
, sîül.
Àn
);

1353 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1356 i‡(
fögî¥öt
.
Àn
) {

1357 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Fingerprint: ",

1359 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
fögî¥öt
.
d©a
, fögî¥öt.
Àn
);

1360 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1363 i‡(
˚π
.
Àn
) {

1364 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Cert: ",

1366 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˚π
.
d©a
, cît.
Àn
);

1367 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1373 i‡(
ahcf
->
hódî
.
Àn
) {

1374 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
hódî
.
d©a
,áhcf->hódî.
Àn
);

1378 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1380 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

1381 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1383 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1386  
b
;

1387 
	}
}

1390 
ngx_öt_t


1391 
	$ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,Çgx_°r_à*
esˇ≥d
)

1393 
u_ch¨
 *
p
;

1394 
uöçå_t
 
n
;

1396 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1398 i‡(
n
 == 0) {

1399 *
esˇ≥d
 = *
ãxt
;

1400  
NGX_OK
;

1403 
esˇ≥d
->
Àn
 = 
ãxt
->À¿+ 
n
 * 2;

1405 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
esˇ≥d
->
Àn
);

1406 i‡(
p
 =
NULL
) {

1407  
NGX_ERROR
;

1410 (Ë
	`ngx_esˇ≥_uri
(
p
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1412 
esˇ≥d
->
d©a
 = 
p
;

1414  
NGX_OK
;

1415 
	}
}

1419 
	$ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1421 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

1423 
ahcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_auth_hâp_c⁄f_t
));

1424 i‡(
ahcf
 =
NULL
) {

1425  
NULL
;

1428 
ahcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1429 
ahcf
->
∑ss_˛õ¡_˚π
 = 
NGX_CONF_UNSET
;

1431 
ahcf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

1432 
ahcf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1434  
ahcf
;

1435 
	}
}

1439 
	$ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1441 
ngx_maû_auth_hâp_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1442 
ngx_maû_auth_hâp_c⁄f_t
 *
c⁄f
 = 
chûd
;

1444 
u_ch¨
 *
p
;

1445 
size_t
 
Àn
;

1446 
ngx_uöt_t
 
i
;

1447 
ngx_èbÀ_ñt_t
 *
hódî
;

1449 i‡(
c⁄f
->
≥î
 =
NULL
) {

1450 
c⁄f
->
≥î
 = 
¥ev
->peer;

1451 
c⁄f
->
ho°_hódî
 = 
¥ev
->host_header;

1452 
c⁄f
->
uri
 = 
¥ev
->uri;

1454 i‡(
c⁄f
->
≥î
 =
NULL
) {

1455 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1457 
c⁄f
->
fûe
, c⁄f->
löe
);

1459  
NGX_CONF_ERROR
;

1463 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

1465 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_˛õ¡_˚π
, 
¥ev
->pass_client_cert, 0);

1467 i‡(
c⁄f
->
hódîs
 =
NULL
) {

1468 
c⁄f
->
hódîs
 = 
¥ev
->headers;

1469 
c⁄f
->
hódî
 = 
¥ev
->header;

1472 i‡(
c⁄f
->
hódîs
 && c⁄f->
hódî
.
Àn
 == 0) {

1473 
Àn
 = 0;

1474 
hódî
 = 
c⁄f
->
hódîs
->
ñts
;

1475 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1476 
Àn
 +
hódî
[
i
].
key
.À¿+ 2 + hódî[i].
vÆue
.len + 2;

1479 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1480 i‡(
p
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 
c⁄f
->
hódî
.
Àn
 =Üen;

1485 
c⁄f
->
hódî
.
d©a
 = 
p
;

1487 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1488 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1489 *
p
++ = ':'; *p++ = ' ';

1490 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1491 *
p
++ = 
CR
; *p++ = 
LF
;

1495  
NGX_CONF_OK
;

1496 
	}
}

1500 
	$ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1502 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1504 
ngx_°r_t
 *
vÆue
;

1505 
ngx_uæ_t
 
u
;

1507 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1509 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1511 
u
.
uæ
 = 
vÆue
[1];

1512 
u
.
deÁu…_p‹t
 = 80;

1513 
u
.
uri_∑π
 = 1;

1515 i‡(
	`ngx_°∫cmp
(
u
.
uæ
.
d©a
, "http://", 7) == 0) {

1516 
u
.
uæ
.
Àn
 -= 7;

1517 
u
.
uæ
.
d©a
 += 7;

1520 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1521 i‡(
u
.
îr
) {

1522 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1523 "%†öáuth_hâ∞\"%V\"", 
u
.
îr
, &u.
uæ
);

1526  
NGX_CONF_ERROR
;

1529 
ahcf
->
≥î
 = 
u
.
addrs
;

1531 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

1532 
ahcf
->
ho°_hódî
 = 
u
.
ho°
;

1535 
	`ngx_°r_£t
(&
ahcf
->
ho°_hódî
, "localhost");

1538 
ahcf
->
uri
 = 
u
.uri;

1540 i‡(
ahcf
->
uri
.
Àn
 == 0) {

1541 
	`ngx_°r_£t
(&
ahcf
->
uri
, "/");

1544  
NGX_CONF_OK
;

1545 
	}
}

1549 
	$ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1551 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1553 
ngx_°r_t
 *
vÆue
;

1554 
ngx_èbÀ_ñt_t
 *
hódî
;

1556 i‡(
ahcf
->
hódîs
 =
NULL
) {

1557 
ahcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
));

1558 i‡(
ahcf
->
hódîs
 =
NULL
) {

1559  
NGX_CONF_ERROR
;

1563 
hódî
 = 
	`ngx_¨øy_push
(
ahcf
->
hódîs
);

1564 i‡(
hódî
 =
NULL
) {

1565  
NGX_CONF_ERROR
;

1568 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1570 
hódî
->
key
 = 
vÆue
[1];

1571 
hódî
->
vÆue
 = value[2];

1573  
NGX_CONF_OK
;

1574 
	}
}

	@src/mail/ngx_mail_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

19 *
c⁄f
);

20 *
ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

26 *
ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

27 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_maû_c‹e_comm™ds
[] = {

32 { 
ngx_°rög
("server"),

33 
NGX_MAIL_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_c‹e_£rvî
,

37 
NULL
 },

39 { 
ngx_°rög
("listen"),

40 
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

41 
ngx_maû_c‹e_li°í
,

42 
NGX_MAIL_SRV_CONF_OFFSET
,

44 
NULL
 },

46 { 
ngx_°rög
("protocol"),

47 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_maû_c‹e_¥Ÿocﬁ
,

49 
NGX_MAIL_SRV_CONF_OFFSET
,

51 
NULL
 },

53 { 
ngx_°rög
("timeout"),

54 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_m£c_¶Ÿ
,

56 
NGX_MAIL_SRV_CONF_OFFSET
,

57 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
timeout
),

58 
NULL
 },

60 { 
ngx_°rög
("server_name"),

61 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

62 
ngx_c⁄f_£t_°r_¶Ÿ
,

63 
NGX_MAIL_SRV_CONF_OFFSET
,

64 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
£rvî_«me
),

65 
NULL
 },

67 { 
ngx_°rög
("error_log"),

68 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

69 
ngx_maû_c‹e_îr‹_log
,

70 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
NULL
 },

74 { 
ngx_°rög
("resolver"),

75 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

76 
ngx_maû_c‹e_ªsﬁvî
,

77 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
NULL
 },

81 { 
ngx_°rög
("resolver_timeout"),

82 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

83 
ngx_c⁄f_£t_m£c_¶Ÿ
,

84 
NGX_MAIL_SRV_CONF_OFFSET
,

85 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

86 
NULL
 },

88 
ngx_nuŒ_comm™d


92 
ngx_maû_moduÀ_t
 
	gngx_maû_c‹e_moduÀ_˘x
 = {

93 
NULL
,

95 
ngx_maû_c‹e_¸óã_maö_c⁄f
,

96 
NULL
,

98 
ngx_maû_c‹e_¸óã_§v_c⁄f
,

99 
ngx_maû_c‹e_mîge_§v_c⁄f


103 
ngx_moduÀ_t
 
	gngx_maû_c‹e_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_maû_c‹e_moduÀ_˘x
,

106 
ngx_maû_c‹e_comm™ds
,

107 
NGX_MAIL_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


120 
	$ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

122 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

124 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_maö_c⁄f_t
));

125 i‡(
cmcf
 =
NULL
) {

126  
NULL
;

129 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

130 (
ngx_maû_c‹e_§v_c⁄f_t
 *))

131 !
NGX_OK
)

133  
NULL
;

136 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_maû_li°í_t
))

137 !
NGX_OK
)

139  
NULL
;

142  
cmcf
;

143 
	}
}

147 
	$ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

149 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

151 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_§v_c⁄f_t
));

152 i‡(
cscf
 =
NULL
) {

153  
NULL
;

163 
cscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

164 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

166 
cscf
->
ªsﬁvî
 = 
NGX_CONF_UNSET_PTR
;

168 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

169 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

171  
cscf
;

172 
	}
}

176 
	$ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

178 
ngx_maû_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

179 
ngx_maû_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

181 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

182 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
, 
¥ev
->resolver_timeout,

186 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£rvî_«me
, 
¥ev
->server_name, "");

188 i‡(
c⁄f
->
£rvî_«me
.
Àn
 == 0) {

189 
c⁄f
->
£rvî_«me
 = 
cf
->
cy˛e
->
ho°«me
;

192 i‡(
c⁄f
->
¥Ÿocﬁ
 =
NULL
) {

193 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

195 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

196  
NGX_CONF_ERROR
;

199 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

200 i‡(
¥ev
->
îr‹_log
) {

201 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

203 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

207 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªsﬁvî
, 
¥ev
->ªsﬁvî, 
NULL
);

209  
NGX_CONF_OK
;

210 
	}
}

214 
	$ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

216 *
rv
;

217 *
mc⁄f
;

218 
ngx_uöt_t
 
m
;

219 
ngx_c⁄f_t
 
pcf
;

220 
ngx_maû_moduÀ_t
 *
moduÀ
;

221 
ngx_maû_c⁄f_˘x_t
 *
˘x
, *
maû_˘x
;

222 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

223 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

225 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

226 i‡(
˘x
 =
NULL
) {

227  
NGX_CONF_ERROR
;

230 
maû_˘x
 = 
cf
->
˘x
;

231 
˘x
->
maö_c⁄f
 = 
maû_˘x
->main_conf;

235 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

236 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

237  
NGX_CONF_ERROR
;

240 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

241 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

245 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

247 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

248 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

249 i‡(
mc⁄f
 =
NULL
) {

250  
NGX_CONF_ERROR
;

253 
˘x
->
§v_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

259 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

260 
cscf
->
˘x
 = ctx;

262 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

264 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

265 i‡(
cscÂ
 =
NULL
) {

266  
NGX_CONF_ERROR
;

269 *
cscÂ
 = 
cscf
;

274 
pcf
 = *
cf
;

275 
cf
->
˘x
 = ctx;

276 
cf
->
cmd_ty≥
 = 
NGX_MAIL_SRV_CONF
;

278 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

280 *
cf
 = 
pcf
;

282 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

283 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

285 
cscf
->
fûe_«me
, cscf->
löe
);

286  
NGX_CONF_ERROR
;

289  
rv
;

290 
	}
}

294 
	$ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

296 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

298 
ngx_°r_t
 *
vÆue
, 
size
;

299 
ngx_uæ_t
 
u
;

300 
ngx_uöt_t
 
i
, 
m
;

301 
ngx_maû_li°í_t
 *
ls
;

302 
ngx_maû_moduÀ_t
 *
moduÀ
;

303 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

305 
cscf
->
li°í
 = 1;

307 
vÆue
 = 
cf
->
¨gs
->
ñts
;

309 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

311 
u
.
uæ
 = 
vÆue
[1];

312 
u
.
li°í
 = 1;

314 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

315 i‡(
u
.
îr
) {

316 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

318 
u
.
îr
, &u.
uæ
);

321  
NGX_CONF_ERROR
;

324 
cmcf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

326 
ls
 = 
cmcf
->
li°í
.
ñts
;

328 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

330 i‡(
	`ngx_cmp_sockaddr
(&
ls
[
i
].
sockaddr
.sockaddr,Üs[i].
sockÀn
,

331 (
sockaddr
 *Ë&
u
.sockaddr, u.
sockÀn
, 1)

332 !
NGX_OK
)

337 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

338 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

339  
NGX_CONF_ERROR
;

342 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

343 i‡(
ls
 =
NULL
) {

344  
NGX_CONF_ERROR
;

347 
	`ngx_memzîo
(
ls
, (
ngx_maû_li°í_t
));

349 
	`ngx_mem˝y
(&
ls
->
sockaddr
.sockaddr, &
u
.sockaddr, u.
sockÀn
);

351 
ls
->
sockÀn
 = 
u
.socklen;

352 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

353 
ls
->
rcvbuf
 = -1;

354 
ls
->
¢dbuf
 = -1;

355 
ls
->
wûdˇrd
 = 
u
.wildcard;

356 
ls
->
˘x
 = 
cf
->ctx;

358 #i‡(
NGX_HAVE_INET6
)

359 
ls
->
ùv6⁄ly
 = 1;

362 i‡(
cscf
->
¥Ÿocﬁ
 =
NULL
) {

363 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

364 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

368 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

370 i‡(
moduÀ
->
¥Ÿocﬁ
 =
NULL
) {

374 
i
 = 0; 
moduÀ
->
¥Ÿocﬁ
->
p‹t
[i]; i++) {

375 i‡(
moduÀ
->
¥Ÿocﬁ
->
p‹t
[
i
] =
u
.port) {

376 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

383 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

385 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

386 
ls
->
böd
 = 1;

390 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "backlog=", 8) == 0) {

391 
ls
->
backlog
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 8, vÆue[i].
Àn
 - 8);

392 
ls
->
böd
 = 1;

394 i‡(
ls
->
backlog
 =
NGX_ERROR
 ||Üs->backlog == 0) {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

396 "övÆid backlog \"%V\"", &
vÆue
[
i
]);

397  
NGX_CONF_ERROR
;

403 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rcvbuf=", 7) == 0) {

404 
size
.
Àn
 = 
vÆue
[
i
].len - 7;

405 
size
.
d©a
 = 
vÆue
[
i
].data + 7;

407 
ls
->
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

408 
ls
->
böd
 = 1;

410 i‡(
ls
->
rcvbuf
 =
NGX_ERROR
) {

411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

412 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
i
]);

413  
NGX_CONF_ERROR
;

419 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "sndbuf=", 7) == 0) {

420 
size
.
Àn
 = 
vÆue
[
i
].len - 7;

421 
size
.
d©a
 = 
vÆue
[
i
].data + 7;

423 
ls
->
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

424 
ls
->
böd
 = 1;

426 i‡(
ls
->
¢dbuf
 =
NGX_ERROR
) {

427 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

428 "övÆid sndbu‡\"%V\"", &
vÆue
[
i
]);

429  
NGX_CONF_ERROR
;

435 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

436 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

437 
size_t
 
Àn
;

438 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

440 i‡(
ls
->
sockaddr
.sockaddr.
ß_Ámûy
 =
AF_INET6
) {

442 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

443 
ls
->
ùv6⁄ly
 = 1;

445 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

446 
ls
->
ùv6⁄ly
 = 0;

449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

451 &
vÆue
[
i
].
d©a
[9]);

452  
NGX_CONF_ERROR
;

455 
ls
->
böd
 = 1;

458 
Àn
 = 
	`ngx_sock_¡›
(&
ls
->
sockaddr
.sockaddr,Üs->
sockÀn
, 
buf
,

459 
NGX_SOCKADDR_STRLEN
, 1);

461 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

463 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

468 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

471  
NGX_CONF_ERROR
;

475 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

476 #i‡(
NGX_MAIL_SSL
)

477 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

479 
s¶cf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_s¶_moduÀ
);

481 
s¶cf
->
li°í
 = 1;

482 
s¶cf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

483 
s¶cf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

485 
ls
->
s¶
 = 1;

489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

492  
NGX_CONF_ERROR
;

496 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

498 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

499 
ls
->
so_kì∑live
 = 1;

501 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

502 
ls
->
so_kì∑live
 = 2;

506 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

507 
u_ch¨
 *
p
, *
íd
;

508 
ngx_°r_t
 
s
;

510 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

511 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

513 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

514 i‡(
p
 =
NULL
) {

515 
p
 = 
íd
;

518 i‡(
p
 > 
s
.
d©a
) {

519 
s
.
Àn
 = 
p
 - s.
d©a
;

521 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

522 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

523 
övÆid_so_kì∑live
;

527 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

529 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

530 i‡(
p
 =
NULL
) {

531 
p
 = 
íd
;

534 i‡(
p
 > 
s
.
d©a
) {

535 
s
.
Àn
 = 
p
 - s.
d©a
;

537 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

538 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

539 
övÆid_so_kì∑live
;

543 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

545 i‡(
s
.
d©a
 < 
íd
) {

546 
s
.
Àn
 = 
íd
 - s.
d©a
;

548 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

549 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

550 
övÆid_so_kì∑live
;

554 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

555 && 
ls
->
t˝_kìp˙t
 == 0)

557 
övÆid_so_kì∑live
;

560 
ls
->
so_kì∑live
 = 1;

564 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

567  
NGX_CONF_ERROR
;

572 
ls
->
böd
 = 1;

576 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

577 
övÆid_so_kì∑live
:

579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

581 &
vÆue
[
i
].
d©a
[13]);

582  
NGX_CONF_ERROR
;

586 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

587 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

588  
NGX_CONF_ERROR
;

591  
NGX_CONF_OK
;

592 
	}
}

596 
	$ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

598 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

600 
ngx_°r_t
 *
vÆue
;

601 
ngx_uöt_t
 
m
;

602 
ngx_maû_moduÀ_t
 *
moduÀ
;

604 
vÆue
 = 
cf
->
¨gs
->
ñts
;

606 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

607 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

611 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

613 i‡(
moduÀ
->
¥Ÿocﬁ


614 && 
	`ngx_°rcmp
(
moduÀ
->
¥Ÿocﬁ
->
«me
.
d©a
, 
vÆue
[1].data) == 0)

616 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

618  
NGX_CONF_OK
;

622 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

623 "unknow¿¥Ÿocﬁ \"%V\"", &
vÆue
[1]);

624  
NGX_CONF_ERROR
;

625 
	}
}

629 
	$ngx_maû_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

631 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

633  
	`ngx_log_£t_log
(
cf
, &
cscf
->
îr‹_log
);

634 
	}
}

638 
	$ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

640 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

642 
ngx_°r_t
 *
vÆue
;

644 
vÆue
 = 
cf
->
¨gs
->
ñts
;

646 i‡(
cscf
->
ªsﬁvî
 !
NGX_CONF_UNSET_PTR
) {

650 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

651 
cscf
->
ªsﬁvî
 = 
NULL
;

652  
NGX_CONF_OK
;

655 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

656 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

657  
NGX_CONF_ERROR
;

660  
NGX_CONF_OK
;

661 
	}
}

665 
	$ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

667 *
p
 = 
c⁄f
;

669 
ngx_°r_t
 *
c
, *
vÆue
;

670 
ngx_uöt_t
 
i
;

671 
ngx_¨øy_t
 *
a
;

673 
a
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

675 
vÆue
 = 
cf
->
¨gs
->
ñts
;

677 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

678 
c
 = 
	`ngx_¨øy_push
(
a
);

679 i‡(
c
 =
NULL
) {

680  
NGX_CONF_ERROR
;

683 *
c
 = 
vÆue
[
i
];

686  
NGX_CONF_OK
;

687 
	}
}

	@src/mail/ngx_mail_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 #i‡(
NGX_MAIL_SSL
)

17 
ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
);

18 
ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_vîify_˚π
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
	$ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

27 
size_t
 
Àn
;

28 
ngx_uöt_t
 
i
;

29 
ngx_maû_p‹t_t
 *
p‹t
;

30 
sockaddr
 *
ß
;

31 
sockaddr_ö
 *
sö
;

32 
ngx_maû_log_˘x_t
 *
˘x
;

33 
ngx_maû_ö_addr_t
 *
addr
;

34 
ngx_maû_£ssi⁄_t
 *
s
;

35 
ngx_maû_addr_c⁄f_t
 *
addr_c⁄f
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

38 #i‡(
NGX_HAVE_INET6
)

39 
sockaddr_ö6
 *
sö6
;

40 
ngx_maû_ö6_addr_t
 *
addr6
;

46 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

48 i‡(
p‹t
->
«ddrs
 > 1) {

58 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

59 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

63 
ß
 = 
c
->
loˇl_sockaddr
;

65 
ß
->
ß_Ámûy
) {

67 #i‡(
NGX_HAVE_INET6
)

68 
AF_INET6
:

69 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

71 
addr6
 = 
p‹t
->
addrs
;

75 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

76 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

81 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

87 
sö
 = (
sockaddr_ö
 *Ë
ß
;

89 
addr
 = 
p‹t
->
addrs
;

93 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

94 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

99 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

105 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

107 #i‡(
NGX_HAVE_INET6
)

108 
AF_INET6
:

109 
addr6
 = 
p‹t
->
addrs
;

110 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

115 
addr
 = 
p‹t
->
addrs
;

116 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

121 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_maû_£ssi⁄_t
));

122 i‡(
s
 =
NULL
) {

123 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

127 
s
->
sig«tuª
 = 
NGX_MAIL_MODULE
;

129 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

130 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

132 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

134 
c
->
d©a
 = 
s
;

135 
s
->
c⁄√˘i⁄
 = 
c
;

137 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

139 
	`ngx_£t_c⁄√˘i⁄_log
(
c
, 
cscf
->
îr‹_log
);

141 
Àn
 = 
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

143 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%uA client %*s connectedÅo %V",

144 
c
->
numbî
, 
Àn
, 
ãxt
, 
s
->
addr_ãxt
);

146 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_maû_log_˘x_t
));

147 i‡(
˘x
 =
NULL
) {

148 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

152 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

153 
˘x
->
£ssi⁄
 = 
s
;

155 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

156 
c
->
log
->
h™dÀr
 = 
ngx_maû_log_îr‹
;

157 
c
->
log
->
d©a
 = 
˘x
;

158 
c
->
log
->
a˘i⁄
 = "sending client greetingÜine";

160 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

162 #i‡(
NGX_MAIL_SSL
)

164 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

166 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

168 i‡(
s¶cf
->
íabÀ
 || 
addr_c⁄f
->
s¶
) {

169 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

171 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

178 
	`ngx_maû_öô_£ssi⁄
(
c
);

179 
	}
}

182 #i‡(
NGX_MAIL_SSL
)

185 
	$ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
)

187 
ngx_c⁄√˘i⁄_t
 *
c
;

188 
ngx_maû_£ssi⁄_t
 *
s
;

189 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

191 
c
 = 
ªv
->
d©a
;

192 
s
 = 
c
->
d©a
;

193 
s
->
°¨âls
 = 1;

195 
c
->
log
->
a˘i⁄
 = "in starttls state";

197 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

199 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

200 
	}
}

204 
	$ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

206 
ngx_maû_£ssi⁄_t
 *
s
;

207 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

209 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë!
NGX_OK
) {

210 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

214 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

216 
s
 = 
c
->
d©a
;

218 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

220 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

222 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_s¶_h™dshake_h™dÀr
;

227 
	`ngx_maû_s¶_h™dshake_h™dÀr
(
c
);

228 
	}
}

232 
	$ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

234 
ngx_maû_£ssi⁄_t
 *
s
;

235 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

237 i‡(
c
->
s¶
->
h™dshaked
) {

239 
s
 = 
c
->
d©a
;

241 i‡(
	`ngx_maû_vîify_˚π
(
s
, 
c
Ë!
NGX_OK
) {

245 i‡(
s
->
°¨âls
) {

246 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

248 
c
->
ªad
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
öô_¥Ÿocﬁ
;

249 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

251 
cscf
->
¥Ÿocﬁ
->
	`öô_¥Ÿocﬁ
(
c
->
ªad
);

256 
c
->
ªad
->
ªady
 = 0;

258 
	`ngx_maû_öô_£ssi⁄
(
c
);

262 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

263 
	}
}

266 
ngx_öt_t


267 
	$ngx_maû_vîify_˚π
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

269 
rc
;

270 
X509
 *
˚π
;

271 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

272 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

274 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

276 i‡(!
s¶cf
->
vîify
) {

277  
NGX_OK
;

280 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

282 i‡(
rc
 !
X509_V_OK


283 && (
s¶cf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

285 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

287 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

289 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
c
->
s¶
->
£ssi⁄_˘x
,

290 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

292 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

294 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
˚π_îr‹
;

295 
s
->
quô
 = 1;

297 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

299 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

300  
NGX_ERROR
;

303 i‡(
s¶cf
->
vîify
 == 1) {

304 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

306 i‡(
˚π
 =
NULL
) {

307 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

310 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
c
->
s¶
->
£ssi⁄_˘x
,

311 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

313 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

315 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
no_˚π
;

316 
s
->
quô
 = 1;

318 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

320 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

321  
NGX_ERROR
;

324 
	`X509_‰ì
(
˚π
);

327  
NGX_OK
;

328 
	}
}

334 
	$ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

336 
ngx_maû_£ssi⁄_t
 *
s
;

337 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

339 
s
 = 
c
->
d©a
;

341 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

343 
s
->
¥Ÿocﬁ
 = 
cscf
->¥Ÿocﬁ->
ty≥
;

345 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

346 i‡(
s
->
˘x
 =
NULL
) {

347 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

351 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

353 
cscf
->
¥Ÿocﬁ
->
	`öô_£ssi⁄
(
s
, 
c
);

354 
	}
}

357 
ngx_öt_t


358 
	$ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

359 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
)

361 
s
->
ß…
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

362 (" <18446744073709551616.@>" 
CRLF
) - 1

363 + 
NGX_TIME_T_LEN


364 + 
cscf
->
£rvî_«me
.
Àn
);

365 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

366  
NGX_ERROR
;

369 
s
->
ß…
.
Àn
 = 
	`ngx_•rötf
(s->ß….
d©a
, "<%ul.%T@%V>" 
CRLF
,

370 
	`ngx_øndom
(), 
	`ngx_time
(), &
cscf
->
£rvî_«me
)

371 - 
s
->
ß…
.
d©a
;

373  
NGX_OK
;

374 
	}
}

377 #i‡(
NGX_MAIL_SSL
)

379 
ngx_öt_t


380 
	$ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

382 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

384 i‡(
c
->
s¶
) {

388 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

390 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

395 
	}
}

400 
ngx_öt_t


401 
	$ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
)

403 
u_ch¨
 *
p
, *
œ°
;

404 
ngx_°r_t
 *
¨g
, 
∂aö
;

406 
¨g
 = 
s
->
¨gs
.
ñts
;

408 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

409 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

410 "maûáuthÖœö: \"%V\"", &
¨g
[
n
]);

413 
∂aö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

414 i‡(
∂aö
.
d©a
 =
NULL
) {

415  
NGX_ERROR
;

418 i‡(
	`ngx_decode_ba£64
(&
∂aö
, &
¨g
[
n
]Ë!
NGX_OK
) {

419 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

421  
NGX_MAIL_PARSE_INVALID_COMMAND
;

424 
p
 = 
∂aö
.
d©a
;

425 
œ°
 = 
p
 + 
∂aö
.
Àn
;

427 
p
 < 
œ°
 && *p++) { }

429 i‡(
p
 =
œ°
) {

430 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

432  
NGX_MAIL_PARSE_INVALID_COMMAND
;

435 
s
->
logö
.
d©a
 = 
p
;

437 
p
 < 
œ°
 && *p) {Ö++; }

439 i‡(
p
 =
œ°
) {

440 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

442  
NGX_MAIL_PARSE_INVALID_COMMAND
;

445 
s
->
logö
.
Àn
 = 
p
++ - s->logö.
d©a
;

447 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

448 
s
->
∑sswd
.
d©a
 = 
p
;

450 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

451 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

452 "maûáuthÖœö: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

455  
NGX_DONE
;

456 
	}
}

459 
ngx_öt_t


460 
	$ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

461 
ngx_uöt_t
 
n
)

463 
ngx_°r_t
 *
¨g
;

465 
¨g
 = 
s
->
¨gs
.
ñts
;

467 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

468 "maûáuthÜogö u£∫ame: \"%V\"", &
¨g
[
n
]);

470 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

471 i‡(
s
->
logö
.
d©a
 =
NULL
) {

472  
NGX_ERROR
;

475 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[
n
]Ë!
NGX_OK
) {

476 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

478  
NGX_MAIL_PARSE_INVALID_COMMAND
;

481 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

482 "maûáuthÜogö u£∫ame: \"%V\"", &
s
->
logö
);

484  
NGX_OK
;

485 
	}
}

488 
ngx_öt_t


489 
	$ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

491 
ngx_°r_t
 *
¨g
;

493 
¨g
 = 
s
->
¨gs
.
ñts
;

495 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

496 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

497 "maûáuthÜogöÖassw‹d: \"%V\"", &
¨g
[0]);

500 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

501 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

502 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

503  
NGX_ERROR
;

506 i‡(
	`ngx_decode_ba£64
(&
s
->
∑sswd
, &
¨g
[0]Ë!
NGX_OK
) {

507 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

509  
NGX_MAIL_PARSE_INVALID_COMMAND
;

512 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

513 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

514 "maûáuthÜogöÖassw‹d: \"%V\"", &
s
->
∑sswd
);

517  
NGX_DONE
;

518 
	}
}

521 
ngx_öt_t


522 
	$ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

523 *
¥efix
, 
size_t
 
Àn
)

525 
u_ch¨
 *
p
;

526 
ngx_°r_t
 
ß…
;

527 
ngx_uöt_t
 
n
;

529 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
 + 
	`ngx_ba£64_ícoded_Àngth
(
s
->
ß…
.len) + 2);

530 i‡(
p
 =
NULL
) {

531  
NGX_ERROR
;

534 
ß…
.
d©a
 = 
	`ngx_˝ymem
(
p
, 
¥efix
, 
Àn
);

535 
s
->
ß…
.
Àn
 -= 2;

537 
	`ngx_ícode_ba£64
(&
ß…
, &
s
->salt);

539 
s
->
ß…
.
Àn
 += 2;

540 
n
 = 
Àn
 + 
ß…
.len;

541 
p
[
n
++] = 
CR
;Ö[n++] = 
LF
;

543 
s
->
out
.
Àn
 = 
n
;

544 
s
->
out
.
d©a
 = 
p
;

546  
NGX_OK
;

547 
	}
}

550 
ngx_öt_t


551 
	$ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

553 
u_ch¨
 *
p
, *
œ°
;

554 
ngx_°r_t
 *
¨g
;

556 
¨g
 = 
s
->
¨gs
.
ñts
;

558 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

559 "maûáuth cøm-md5: \"%V\"", &
¨g
[0]);

561 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

562 i‡(
s
->
logö
.
d©a
 =
NULL
) {

563  
NGX_ERROR
;

566 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[0]Ë!
NGX_OK
) {

567 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

569  
NGX_MAIL_PARSE_INVALID_COMMAND
;

572 
p
 = 
s
->
logö
.
d©a
;

573 
œ°
 = 
p
 + 
s
->
logö
.
Àn
;

575 
p
 < 
œ°
) {

576 i‡(*
p
++ == ' ') {

577 
s
->
logö
.
Àn
 = 
p
 - s->logö.
d©a
 - 1;

578 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

579 
s
->
∑sswd
.
d©a
 = 
p
;

584 i‡(
s
->
∑sswd
.
Àn
 != 32) {

585 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

587  
NGX_MAIL_PARSE_INVALID_COMMAND
;

590 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

591 "maûáuth cøm-md5: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

593 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_CRAM_MD5
;

595  
NGX_DONE
;

596 
	}
}

599 
ngx_öt_t


600 
	$ngx_maû_auth_exã∫Æ
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

601 
ngx_uöt_t
 
n
)

603 
ngx_°r_t
 *
¨g
, 
exã∫Æ
;

605 
¨g
 = 
s
->
¨gs
.
ñts
;

607 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

608 "maûáuthÉxã∫Æ: \"%V\"", &
¨g
[
n
]);

610 
exã∫Æ
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

611 i‡(
exã∫Æ
.
d©a
 =
NULL
) {

612  
NGX_ERROR
;

615 i‡(
	`ngx_decode_ba£64
(&
exã∫Æ
, &
¨g
[
n
]Ë!
NGX_OK
) {

616 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

618  
NGX_MAIL_PARSE_INVALID_COMMAND
;

621 
s
->
logö
.
Àn
 = 
exã∫Æ
.len;

622 
s
->
logö
.
d©a
 = 
exã∫Æ
.data;

624 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

625 "maûáuthÉxã∫Æ: \"%V\"", &
s
->
logö
);

627 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_EXTERNAL
;

629  
NGX_DONE
;

630 
	}
}

634 
	$ngx_maû_£nd
(
ngx_evít_t
 *
wev
)

636 
ngx_öt_t
 
n
;

637 
ngx_c⁄√˘i⁄_t
 *
c
;

638 
ngx_maû_£ssi⁄_t
 *
s
;

639 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

641 
c
 = 
wev
->
d©a
;

642 
s
 = 
c
->
d©a
;

644 i‡(
wev
->
timedout
) {

645 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

646 
c
->
timedout
 = 1;

647 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

651 i‡(
s
->
out
.
Àn
 == 0) {

652 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

653 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

659 
n
 = 
c
->
	`£nd
(c, 
s
->
out
.
d©a
, s->out.
Àn
);

661 i‡(
n
 > 0) {

662 
s
->
out
.
d©a
 +
n
;

663 
s
->
out
.
Àn
 -
n
;

665 i‡(
s
->
out
.
Àn
 != 0) {

666 
agaö
;

669 i‡(
wev
->
timî_£t
) {

670 
	`ngx_dñ_timî
(
wev
);

673 i‡(
s
->
quô
) {

674 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

678 i‡(
s
->
blocked
) {

679 
c
->
ªad
->
	`h™dÀr
(c->read);

685 i‡(
n
 =
NGX_ERROR
) {

686 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

692 
agaö
:

694 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

696 
	`ngx_add_timî
(
c
->
wrôe
, 
cscf
->
timeout
);

698 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

699 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

702 
	}
}

705 
ngx_öt_t


706 
	$ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

708 
ssize_t
 
n
;

709 
ngx_öt_t
 
rc
;

710 
ngx_°r_t
 
l
;

711 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

713 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

715 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

716 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

717  
NGX_ERROR
;

720 i‡(
n
 > 0) {

721 
s
->
buf„r
->
œ°
 +
n
;

724 i‡(
n
 =
NGX_AGAIN
) {

725 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

726 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

727  
NGX_ERROR
;

730 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

731  
NGX_AGAIN
;

735 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

737 
rc
 = 
cscf
->
¥Ÿocﬁ
->
	`∑r£_comm™d
(
s
);

739 i‡(
rc
 =
NGX_AGAIN
) {

741 i‡(
s
->
buf„r
->
œ°
 < s->buf„r->
íd
) {

742  
rc
;

745 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

746 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

748 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

749 "˛õ¡ síàtoÿl⁄g comm™d \"%V\"", &
l
);

751 
s
->
quô
 = 1;

753  
NGX_MAIL_PARSE_INVALID_COMMAND
;

756 i‡(
rc
 =
NGX_IMAP_NEXT
 ||Ñ¯=
NGX_MAIL_PARSE_INVALID_COMMAND
) {

757  
rc
;

760 i‡(
rc
 =
NGX_ERROR
) {

761 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

762  
NGX_ERROR
;

765  
NGX_OK
;

766 
	}
}

770 
	$ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

772 
s
->
¨gs
.
√…s
 = 0;

774 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

775 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

776 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

779 
s
->
°©e
 = 0;

781 i‡(
c
->
ªad
->
timî_£t
) {

782 
	`ngx_dñ_timî
(
c
->
ªad
);

785 
s
->
logö_©ãm±
++;

787 
	`ngx_maû_auth_hâp_öô
(
s
);

788 
	}
}

792 
	$ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

794 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

796 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

798 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
öã∫Æ_£rvî_îr‹
;

799 
s
->
quô
 = 1;

801 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

802 
	}
}

806 
	$ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

808 
ngx_poﬁ_t
 *
poﬁ
;

810 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

811 "˛o£ maû c⁄√˘i⁄: %d", 
c
->
fd
);

813 #i‡(
NGX_MAIL_SSL
)

815 i‡(
c
->
s¶
) {

816 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

817 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_˛o£_c⁄√˘i⁄
;

824 #i‡(
NGX_STAT_STUB
)

825 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

828 
c
->
de°royed
 = 1;

830 
poﬁ
 = 
c
->pool;

832 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

834 
	`ngx_de°roy_poﬁ
(
poﬁ
);

835 
	}
}

838 
u_ch¨
 *

839 
	$ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

841 
u_ch¨
 *
p
;

842 
ngx_maû_£ssi⁄_t
 *
s
;

843 
ngx_maû_log_˘x_t
 *
˘x
;

845 i‡(
log
->
a˘i⁄
) {

846 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

847 
Àn
 -
p
 - 
buf
;

848 
buf
 = 
p
;

851 
˘x
 = 
log
->
d©a
;

853 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

854 
Àn
 -
p
 - 
buf
;

855 
buf
 = 
p
;

857 
s
 = 
˘x
->
£ssi⁄
;

859 i‡(
s
 =
NULL
) {

860  
p
;

863 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, "%s, server: %V",

864 
s
->
°¨âls
 ? " using starttls" : "",

865 
s
->
addr_ãxt
);

866 
Àn
 -
p
 - 
buf
;

867 
buf
 = 
p
;

869 i‡(
s
->
logö
.
Àn
 == 0) {

870  
p
;

873 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Üogö: \"%V\"", &
s
->
logö
);

874 
Àn
 -
p
 - 
buf
;

875 
buf
 = 
p
;

877 i‡(
s
->
¥oxy
 =
NULL
) {

878  
p
;

881 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", up°ªam: %V", 
s
->
¥oxy
->
up°ªam
.
«me
);

883  
p
;

884 
	}
}

	@src/mail/ngx_mail_imap_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
,

16 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
,

18 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

22 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
u_ch¨
 
	gim≠_gªëög
[] = "* OK IMAP4Ñódy" 
CRLF
;

26 
u_ch¨
 
	gim≠_°¨
[] = "* ";

27 
u_ch¨
 
	gim≠_ok
[] = "OK com∂ëed" 
CRLF
;

28 
u_ch¨
 
	gim≠_√xt
[] = "+ OK" 
CRLF
;

29 
u_ch¨
 
	gim≠_∂aö_√xt
[] = "+ " 
CRLF
;

30 
u_ch¨
 
	gim≠_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

31 
u_ch¨
 
	gim≠_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

32 
u_ch¨
 
	gim≠_bye
[] = "* BYE" 
CRLF
;

33 
u_ch¨
 
	gim≠_övÆid_comm™d
[] = "BAD invÆid comm™d" 
CRLF
;

37 
	$ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

39 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

41 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

43 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_gªëög
);

45 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_öô_¥Ÿocﬁ
;

47 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

49 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

50 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

53 
	`ngx_maû_£nd
(
c
->
wrôe
);

54 
	}
}

58 
	$ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

60 
ngx_c⁄√˘i⁄_t
 *
c
;

61 
ngx_maû_£ssi⁄_t
 *
s
;

62 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

64 
c
 = 
ªv
->
d©a
;

66 
c
->
log
->
a˘i⁄
 = "ináuth state";

68 i‡(
ªv
->
timedout
) {

69 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

70 
c
->
timedout
 = 1;

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

75 
s
 = 
c
->
d©a
;

77 i‡(
s
->
buf„r
 =
NULL
) {

78 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

79 =
NGX_ERROR
)

81 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

85 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

87 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
iscf
->
˛õ¡_buf„r_size
);

88 i‡(
s
->
buf„r
 =
NULL
) {

89 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

94 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

95 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_auth_°©e
;

97 
	`ngx_maû_im≠_auth_°©e
(
ªv
);

98 
	}
}

102 
	$ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
)

104 
u_ch¨
 *
p
, *
d°
, *
§c
, *
íd
;

105 
ngx_°r_t
 *
¨g
;

106 
ngx_öt_t
 
rc
;

107 
ngx_uöt_t
 
èg
, 
i
;

108 
ngx_c⁄√˘i⁄_t
 *
c
;

109 
ngx_maû_£ssi⁄_t
 *
s
;

111 
c
 = 
ªv
->
d©a
;

112 
s
 = 
c
->
d©a
;

114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth state");

116 i‡(
ªv
->
timedout
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

118 
c
->
timedout
 = 1;

119 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

123 i‡(
s
->
out
.
Àn
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imap send handler busy");

125 
s
->
blocked
 = 1;

129 
s
->
blocked
 = 0;

131 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

133 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

137 
èg
 = 1;

138 
s
->
ãxt
.
Àn
 = 0;

139 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_ok
);

141 i‡(
rc
 =
NGX_OK
) {

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth command: %i",

144 
s
->
comm™d
);

146 i‡(
s
->
back¶ash
) {

148 
¨g
 = 
s
->
¨gs
.
ñts
;

150 
i
 = 0; i < 
s
->
¨gs
.
√…s
; i++) {

151 
d°
 = 
¨g
[
i
].
d©a
;

152 
íd
 = 
d°
 + 
¨g
[
i
].
Àn
;

154 
§c
 = 
d°
; sr¯< 
íd
; dst++) {

155 *
d°
 = *
§c
;

156 i‡(*
§c
++ == '\\') {

157 *
d°
 = *
§c
++;

161 
¨g
[
i
].
Àn
 = 
d°
 -árg[i].
d©a
;

164 
s
->
back¶ash
 = 0;

167 
s
->
maû_°©e
) {

169 
ngx_im≠_°¨t
:

171 
s
->
comm™d
) {

173 
NGX_IMAP_LOGIN
:

174 
rc
 = 
	`ngx_maû_im≠_logö
(
s
, 
c
);

177 
NGX_IMAP_AUTHENTICATE
:

178 
rc
 = 
	`ngx_maû_im≠_authítiˇã
(
s
, 
c
);

179 
èg
 = (
rc
 !
NGX_OK
);

182 
NGX_IMAP_CAPABILITY
:

183 
rc
 = 
	`ngx_maû_im≠_ˇ∑bûôy
(
s
, 
c
);

186 
NGX_IMAP_LOGOUT
:

187 
s
->
quô
 = 1;

188 
	`ngx_°r_£t
(&
s
->
ãxt
, 
im≠_bye
);

191 
NGX_IMAP_NOOP
:

194 
NGX_IMAP_STARTTLS
:

195 
rc
 = 
	`ngx_maû_im≠_°¨âls
(
s
, 
c
);

199 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

205 
ngx_im≠_auth_logö_u£∫ame
:

206 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

208 
èg
 = 0;

209 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

210 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

214 
ngx_im≠_auth_logö_∑ssw‹d
:

215 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

218 
ngx_im≠_auth_∂aö
:

219 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

222 
ngx_im≠_auth_¸am_md5
:

223 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

226 
ngx_im≠_auth_exã∫Æ
:

227 
rc
 = 
	`ngx_maû_auth_exã∫Æ
(
s
, 
c
, 0);

231 } i‡(
rc
 =
NGX_IMAP_NEXT
) {

232 
èg
 = 0;

233 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_√xt
);

236 
rc
) {

238 
NGX_DONE
:

239 
	`ngx_maû_auth
(
s
, 
c
);

242 
NGX_ERROR
:

243 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

246 
NGX_MAIL_PARSE_INVALID_COMMAND
:

247 
s
->
°©e
 = 0;

248 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_övÆid_comm™d
);

249 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

253 i‡(
èg
) {

254 i‡(
s
->
èg
.
Àn
 == 0) {

255 
	`ngx_°r_£t
(&
s
->
èg
, 
im≠_°¨
);

258 i‡(
s
->
ègged_löe
.
Àn
 < s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len) {

259 
s
->
ègged_löe
.
Àn
 = s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len;

260 
s
->
ègged_löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->ègged_löe.
Àn
);

261 i‡(
s
->
ègged_löe
.
d©a
 =
NULL
) {

262 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

267 
p
 = 
s
->
ègged_löe
.
d©a
;

269 i‡(
s
->
ãxt
.
Àn
) {

270 
p
 = 
	`ngx_˝ymem
’, 
s
->
ãxt
.
d©a
, s->ãxt.
Àn
);

273 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

274 
	`ngx_mem˝y
(
p
, 
s
->
out
.
d©a
, s->out.
Àn
);

276 
s
->
out
.
Àn
 = s->
ãxt
.À¿+ s->
èg
.len + s->out.len;

277 
s
->
out
.
d©a
 = s->
ègged_löe
.data;

280 i‡(
rc
 !
NGX_IMAP_NEXT
) {

281 
s
->
¨gs
.
√…s
 = 0;

283 i‡(
s
->
°©e
) {

285 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
 + s->
èg
.
Àn
;

286 
s
->
buf„r
->
pos
 = s->
¨g_°¨t
;

287 
s
->
buf„r
->
œ°
 = s->
¨g_°¨t
;

290 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

291 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

292 
s
->
èg
.
Àn
 = 0;

296 
	`ngx_maû_£nd
(
c
->
wrôe
);

297 
	}
}

300 
ngx_öt_t


301 
	$ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

303 
ngx_°r_t
 *
¨g
;

305 #i‡(
NGX_MAIL_SSL
)

306 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

307  
NGX_MAIL_PARSE_INVALID_COMMAND
;

311 
¨g
 = 
s
->
¨gs
.
ñts
;

313 i‡(
s
->
¨gs
.
√…s
 !2 || 
¨g
[0].
Àn
 == 0) {

314  
NGX_MAIL_PARSE_INVALID_COMMAND
;

317 
s
->
logö
.
Àn
 = 
¨g
[0].len;

318 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

319 i‡(
s
->
logö
.
d©a
 =
NULL
) {

320  
NGX_ERROR
;

323 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

325 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

326 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

327 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

328  
NGX_ERROR
;

331 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

333 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

334 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

336 &
s
->
logö
, &s->
∑sswd
);

338 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

339 "im≠Üogö:\"%V\"", &
s
->
logö
);

342  
NGX_DONE
;

343 
	}
}

346 
ngx_öt_t


347 
	$ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

349 
ngx_öt_t
 
rc
;

350 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

351 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

353 #i‡(
NGX_MAIL_SSL
)

354 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

355  
NGX_MAIL_PARSE_INVALID_COMMAND
;

359 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

361 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

363 
rc
) {

365 
NGX_MAIL_AUTH_LOGIN
:

367 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

368 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_u£∫ame
;

370  
NGX_OK
;

372 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

374 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

375 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

377  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

379 
NGX_MAIL_AUTH_PLAIN
:

381 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∂aö_√xt
);

382 
s
->
maû_°©e
 = 
ngx_im≠_auth_∂aö
;

384  
NGX_OK
;

386 
NGX_MAIL_AUTH_CRAM_MD5
:

388 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

389  
NGX_MAIL_PARSE_INVALID_COMMAND
;

392 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

393 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

395 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

396  
NGX_ERROR
;

400 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

401 
s
->
maû_°©e
 = 
ngx_im≠_auth_¸am_md5
;

402  
NGX_OK
;

405  
NGX_ERROR
;

407 
NGX_MAIL_AUTH_EXTERNAL
:

409 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_EXTERNAL_ENABLED
)) {

410  
NGX_MAIL_PARSE_INVALID_COMMAND
;

413 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

414 
s
->
maû_°©e
 = 
ngx_im≠_auth_exã∫Æ
;

416  
NGX_OK
;

419  
rc
;

420 
	}
}

423 
ngx_öt_t


424 
	$ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

426 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

428 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

430 #i‡(
NGX_MAIL_SSL
)

432 i‡(
c
->
s¶
 =
NULL
) {

433 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

435 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

437 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

438 
s
->
ãxt
 = 
iscf
->
°¨âls_ˇ∑bûôy
;

439  
NGX_OK
;

442 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

443 
s
->
ãxt
 = 
iscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

444  
NGX_OK
;

449 
s
->
ãxt
 = 
iscf
->
ˇ∑bûôy
;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

458 #i‡(
NGX_MAIL_SSL
)

459 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

461 i‡(
c
->
s¶
 =
NULL
) {

462 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

463 i‡(
s¶cf
->
°¨âls
) {

464 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

465  
NGX_OK
;

471  
NGX_MAIL_PARSE_INVALID_COMMAND
;

472 
	}
}

	@src/mail/ngx_mail_imap_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 *
ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_im≠_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("IMAP4"),

22 
ngx_°rög
("IMAP4rev1"),

23 
ngx_°rög
("UIDPLUS"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_im≠_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_°rög
("exã∫Æ"), 
NGX_MAIL_AUTH_EXTERNAL_ENABLED
 },

33 { 
ngx_nuŒ_°rög
, 0 }

37 
ngx_°r_t
 
	gngx_maû_im≠_auth_mëhods_«mes
[] = {

38 
ngx_°rög
("AUTH=PLAIN"),

39 
ngx_°rög
("AUTH=LOGIN"),

40 
ngx_nuŒ_°rög
,

41 
ngx_°rög
("AUTH=CRAM-MD5"),

42 
ngx_°rög
("AUTH=EXTERNAL"),

43 
ngx_nuŒ_°rög


47 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_im≠_¥Ÿocﬁ
 = {

48 
ngx_°rög
("imap"),

50 
NGX_MAIL_IMAP_PROTOCOL
,

52 
ngx_maû_im≠_öô_£ssi⁄
,

53 
ngx_maû_im≠_öô_¥Ÿocﬁ
,

54 
ngx_maû_im≠_∑r£_comm™d
,

55 
ngx_maû_im≠_auth_°©e
,

57 
ngx_°rög
("* BAD i¡î«»£rvîÉº‹" 
CRLF
),

58 
ngx_°rög
("* BYE SSL cîtifiˇãÉº‹" 
CRLF
),

59 
ngx_°rög
("* BYE Nÿªquúed SSL cîtifiˇã" 
CRLF
)

63 
ngx_comm™d_t
 
	gngx_maû_im≠_comm™ds
[] = {

65 { 
ngx_°rög
("imap_client_buffer"),

66 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_size_¶Ÿ
,

68 
NGX_MAIL_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

70 
NULL
 },

72 { 
ngx_°rög
("imap_capabilities"),

73 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

74 
ngx_maû_ˇ∑bûôõs
,

75 
NGX_MAIL_SRV_CONF_OFFSET
,

76 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
ˇ∑bûôõs
),

77 
NULL
 },

79 { 
ngx_°rög
("imap_auth"),

80 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

81 
ngx_c⁄f_£t_bômask_¶Ÿ
,

82 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
auth_mëhods
),

84 &
ngx_maû_im≠_auth_mëhods
 },

86 
ngx_nuŒ_comm™d


90 
ngx_maû_moduÀ_t
 
	gngx_maû_im≠_moduÀ_˘x
 = {

91 &
ngx_maû_im≠_¥Ÿocﬁ
,

93 
NULL
,

94 
NULL
,

96 
ngx_maû_im≠_¸óã_§v_c⁄f
,

97 
ngx_maû_im≠_mîge_§v_c⁄f


101 
ngx_moduÀ_t
 
	gngx_maû_im≠_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_maû_im≠_moduÀ_˘x
,

104 
ngx_maû_im≠_comm™ds
,

105 
NGX_MAIL_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


118 
	$ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

120 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

122 
iscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_im≠_§v_c⁄f_t
));

123 i‡(
iscf
 =
NULL
) {

124  
NULL
;

127 
iscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

129 i‡(
	`ngx_¨øy_öô
(&
iscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

130 !
NGX_OK
)

132  
NULL
;

135  
iscf
;

136 
	}
}

140 
	$ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

142 
ngx_maû_im≠_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

143 
ngx_maû_im≠_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

145 
u_ch¨
 *
p
, *
auth
;

146 
size_t
 
size
;

147 
ngx_°r_t
 *
c
, *
d
;

148 
ngx_uöt_t
 
i
, 
m
;

150 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

151 
¥ev
->
˛õ¡_buf„r_size
,

152 (
size_t
Ë
ngx_∑gesize
);

154 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

155 
¥ev
->
auth_mëhods
,

156 (
NGX_CONF_BITMASK_SET


157 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

160 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

161 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

164 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

166 
d
 = 
ngx_maû_im≠_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

167 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

168 i‡(
c
 =
NULL
) {

169  
NGX_CONF_ERROR
;

172 *
c
 = *
d
;

176 
size
 = ("* CAPABILITY" 
CRLF
) - 1;

178 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

179 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

180 
size
 +1 + 
c
[
i
].
Àn
;

183 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

184 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

185 
m
 <<1, 
i
++)

187 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

188 
size
 +1 + 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
;

192 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

193 i‡(
p
 =
NULL
) {

194  
NGX_CONF_ERROR
;

197 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

198 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

200 
p
 = 
	`ngx_˝ymem
(p, "* CAPABILITY", ("* CAPABILITY") - 1);

202 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

203 *
p
++ = ' ';

204 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

207 
auth
 = 
p
;

209 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

210 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

211 
m
 <<1, 
i
++)

213 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

214 *
p
++ = ' ';

215 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
d©a
,

216 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
);

220 *
p
++ = 
CR
; *∞
LF
;

223 
size
 += (" STARTTLS") - 1;

225 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

226 i‡(
p
 =
NULL
) {

227  
NGX_CONF_ERROR
;

230 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

231 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

233 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

234 
c⁄f
->
ˇ∑bûôy
.
Àn
 - ((
CRLF
) - 1));

235 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS", (" STARTTLS") - 1);

236 *
p
++ = 
CR
; *∞
LF
;

239 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
Ë+ (
CRLF
) - 1

242 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

243 i‡(
p
 =
NULL
) {

244  
NGX_CONF_ERROR
;

247 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

248 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

250 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

251 
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
);

252 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS LOGINDISABLED",

254 *
p
++ = 
CR
; *∞
LF
;

256  
NGX_CONF_OK
;

257 
	}
}

	@src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@src/mail/ngx_mail_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

13 
	~<ngx_maû_im≠_moduÀ.h
>

14 
	~<ngx_maû_smç_moduÀ.h
>

17 
ngx_öt_t


18 
	$ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

20 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

21 
ngx_°r_t
 *
¨g
;

23 
sw_°¨t
 = 0,

24 
sw_•a˚s_bef‹e_¨gumít
,

25 
sw_¨gumít
,

26 
sw_Æmo°_d⁄e


27 } 
°©e
;

29 
°©e
 = 
s
->state;

31 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

32 
ch
 = *
p
;

34 
°©e
) {

37 
sw_°¨t
:

38 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

39 
c
 = 
s
->
buf„r
->
°¨t
;

41 i‡(
p
 - 
c
 == 4) {

43 
c0
 = 
	`ngx_touµî
(
c
[0]);

44 
c1
 = 
	`ngx_touµî
(
c
[1]);

45 
c2
 = 
	`ngx_touµî
(
c
[2]);

46 
c3
 = 
	`ngx_touµî
(
c
[3]);

48 i‡(
c0
 ='U' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'R')

50 
s
->
comm™d
 = 
NGX_POP3_USER
;

52 } i‡(
c0
 ='P' && 
c1
 ='A' && 
c2
 ='S' && 
c3
 == 'S')

54 
s
->
comm™d
 = 
NGX_POP3_PASS
;

56 } i‡(
c0
 ='A' && 
c1
 ='P' && 
c2
 ='O' && 
c3
 == 'P')

58 
s
->
comm™d
 = 
NGX_POP3_APOP
;

60 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

62 
s
->
comm™d
 = 
NGX_POP3_QUIT
;

64 } i‡(
c0
 ='C' && 
c1
 ='A' && 
c2
 ='P' && 
c3
 == 'A')

66 
s
->
comm™d
 = 
NGX_POP3_CAPA
;

68 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

70 
s
->
comm™d
 = 
NGX_POP3_AUTH
;

72 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

74 
s
->
comm™d
 = 
NGX_POP3_NOOP
;

75 #i‡(
NGX_MAIL_SSL
)

76 } i‡(
c0
 ='S' && 
c1
 ='T' && 
c2
 ='L' && 
c3
 == 'S')

78 
s
->
comm™d
 = 
NGX_POP3_STLS
;

81 
övÆid
;

85 
övÆid
;

88 
ch
) {

90 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

92 
CR
:

93 
°©e
 = 
sw_Æmo°_d⁄e
;

95 
LF
:

96 
d⁄e
;

101 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

102 
övÆid
;

107 
sw_•a˚s_bef‹e_¨gumít
:

108 
ch
) {

111 
CR
:

112 
°©e
 = 
sw_Æmo°_d⁄e
;

113 
s
->
¨g_íd
 = 
p
;

115 
LF
:

116 
s
->
¨g_íd
 = 
p
;

117 
d⁄e
;

119 i‡(
s
->
¨gs
.
√…s
 <= 2) {

120 
°©e
 = 
sw_¨gumít
;

121 
s
->
¨g_°¨t
 = 
p
;

124 
övÆid
;

128 
sw_¨gumít
:

129 
ch
) {

138 i‡(
s
->
comm™d
 =
NGX_POP3_USER


139 || 
s
->
comm™d
 =
NGX_POP3_PASS
)

146 
CR
:

147 
LF
:

148 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

149 i‡(
¨g
 =
NULL
) {

150  
NGX_ERROR
;

152 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

153 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

154 
s
->
¨g_°¨t
 = 
NULL
;

156 
ch
) {

158 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

160 
CR
:

161 
°©e
 = 
sw_Æmo°_d⁄e
;

163 
LF
:

164 
d⁄e
;

173 
sw_Æmo°_d⁄e
:

174 
ch
) {

175 
LF
:

176 
d⁄e
;

178 
övÆid
;

183 
s
->
buf„r
->
pos
 = 
p
;

184 
s
->
°©e
 = state;

186  
NGX_AGAIN
;

188 
d⁄e
:

190 
s
->
buf„r
->
pos
 = 
p
 + 1;

192 i‡(
s
->
¨g_°¨t
) {

193 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

194 i‡(
¨g
 =
NULL
) {

195  
NGX_ERROR
;

197 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

198 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

199 
s
->
¨g_°¨t
 = 
NULL
;

202 
s
->
°©e
 = (s->
comm™d
 !
NGX_POP3_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

204  
NGX_OK
;

206 
övÆid
:

208 
s
->
°©e
 = 
sw_°¨t
;

209 
s
->
¨g_°¨t
 = 
NULL
;

211  
NGX_MAIL_PARSE_INVALID_COMMAND
;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

218 
u_ch¨
 
ch
, *
p
, *
c
;

219 
ngx_°r_t
 *
¨g
;

221 
sw_°¨t
 = 0,

222 
sw_•a˚s_bef‹e_comm™d
,

223 
sw_comm™d
,

224 
sw_•a˚s_bef‹e_¨gumít
,

225 
sw_¨gumít
,

226 
sw_back¶ash
,

227 
sw_lôîÆ
,

228 
sw_no_sync_lôîÆ_¨gumít
,

229 
sw_°¨t_lôîÆ_¨gumít
,

230 
sw_lôîÆ_¨gumít
,

231 
sw_íd_lôîÆ_¨gumít
,

232 
sw_Æmo°_d⁄e


233 } 
°©e
;

235 
°©e
 = 
s
->state;

237 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

238 
ch
 = *
p
;

240 
°©e
) {

243 
sw_°¨t
:

244 
ch
) {

246 
s
->
èg
.
Àn
 = 
p
 - s->
buf„r
->
°¨t
 + 1;

247 
s
->
èg
.
d©a
 = s->
buf„r
->
°¨t
;

248 
°©e
 = 
sw_•a˚s_bef‹e_comm™d
;

250 
CR
:

251 
s
->
°©e
 = 
sw_°¨t
;

252  
NGX_MAIL_PARSE_INVALID_COMMAND
;

253 
LF
:

254 
s
->
°©e
 = 
sw_°¨t
;

255  
NGX_MAIL_PARSE_INVALID_COMMAND
;

259 
sw_•a˚s_bef‹e_comm™d
:

260 
ch
) {

263 
CR
:

264 
s
->
°©e
 = 
sw_°¨t
;

265  
NGX_MAIL_PARSE_INVALID_COMMAND
;

266 
LF
:

267 
s
->
°©e
 = 
sw_°¨t
;

268  
NGX_MAIL_PARSE_INVALID_COMMAND
;

270 
s
->
cmd_°¨t
 = 
p
;

271 
°©e
 = 
sw_comm™d
;

276 
sw_comm™d
:

277 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

279 
c
 = 
s
->
cmd_°¨t
;

281 
p
 - 
c
) {

284 i‡((
c
[0] == 'N' || c[0] == 'n')

285 && (
c
[1] == 'O'|| c[1] == 'o')

286 && (
c
[2] == 'O'|| c[2] == 'o')

287 && (
c
[3] == 'P'|| c[3] == 'p'))

289 
s
->
comm™d
 = 
NGX_IMAP_NOOP
;

292 
övÆid
;

297 i‡((
c
[0] == 'L'|| c[0] == 'l')

298 && (
c
[1] == 'O'|| c[1] == 'o')

299 && (
c
[2] == 'G'|| c[2] == 'g')

300 && (
c
[3] == 'I'|| c[3] == 'i')

301 && (
c
[4] == 'N'|| c[4] == 'n'))

303 
s
->
comm™d
 = 
NGX_IMAP_LOGIN
;

306 
övÆid
;

311 i‡((
c
[0] == 'L'|| c[0] == 'l')

312 && (
c
[1] == 'O'|| c[1] == 'o')

313 && (
c
[2] == 'G'|| c[2] == 'g')

314 && (
c
[3] == 'O'|| c[3] == 'o')

315 && (
c
[4] == 'U'|| c[4] == 'u')

316 && (
c
[5] == 'T'|| c[5] == 't'))

318 
s
->
comm™d
 = 
NGX_IMAP_LOGOUT
;

321 
övÆid
;

325 #i‡(
NGX_MAIL_SSL
)

327 i‡((
c
[0] == 'S'|| c[0] == 's')

328 && (
c
[1] == 'T'|| c[1] == 't')

329 && (
c
[2] == 'A'|| c[2] == 'a')

330 && (
c
[3] == 'R'|| c[3] == 'r')

331 && (
c
[4] == 'T'|| c[4] == 't')

332 && (
c
[5] == 'T'|| c[5] == 't')

333 && (
c
[6] == 'L'|| c[6] == 'l')

334 && (
c
[7] == 'S'|| c[7] == 's'))

336 
s
->
comm™d
 = 
NGX_IMAP_STARTTLS
;

339 
övÆid
;

345 i‡((
c
[0] == 'C'|| c[0] == 'c')

346 && (
c
[1] == 'A'|| c[1] == 'a')

347 && (
c
[2] == 'P'|| c[2] == 'p')

348 && (
c
[3] == 'A'|| c[3] == 'a')

349 && (
c
[4] == 'B'|| c[4] == 'b')

350 && (
c
[5] == 'I'|| c[5] == 'i')

351 && (
c
[6] == 'L'|| c[6] == 'l')

352 && (
c
[7] == 'I'|| c[7] == 'i')

353 && (
c
[8] == 'T'|| c[8] == 't')

354 && (
c
[9] == 'Y'|| c[9] == 'y'))

356 
s
->
comm™d
 = 
NGX_IMAP_CAPABILITY
;

359 
övÆid
;

364 i‡((
c
[0] == 'A'|| c[0] == 'a')

365 && (
c
[1] == 'U'|| c[1] == 'u')

366 && (
c
[2] == 'T'|| c[2] == 't')

367 && (
c
[3] == 'H'|| c[3] == 'h')

368 && (
c
[4] == 'E'|| c[4] == 'e')

369 && (
c
[5] == 'N'|| c[5] == 'n')

370 && (
c
[6] == 'T'|| c[6] == 't')

371 && (
c
[7] == 'I'|| c[7] == 'i')

372 && (
c
[8] == 'C'|| c[8] == 'c')

373 && (
c
[9] == 'A'|| c[9] == 'a')

374 && (
c
[10] == 'T'|| c[10] == 't')

375 && (
c
[11] == 'E'|| c[11] == 'e'))

377 
s
->
comm™d
 = 
NGX_IMAP_AUTHENTICATE
;

380 
övÆid
;

385 
övÆid
;

388 
ch
) {

390 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

392 
CR
:

393 
°©e
 = 
sw_Æmo°_d⁄e
;

395 
LF
:

396 
d⁄e
;

401 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

402 
övÆid
;

407 
sw_•a˚s_bef‹e_¨gumít
:

408 
ch
) {

411 
CR
:

412 
°©e
 = 
sw_Æmo°_d⁄e
;

413 
s
->
¨g_íd
 = 
p
;

415 
LF
:

416 
s
->
¨g_íd
 = 
p
;

417 
d⁄e
;

419 i‡(
s
->
¨gs
.
√…s
 <= 2) {

420 
s
->
quŸed
 = 1;

421 
s
->
¨g_°¨t
 = 
p
 + 1;

422 
°©e
 = 
sw_¨gumít
;

425 
övÆid
;

427 i‡(
s
->
¨gs
.
√…s
 <= 2) {

428 
°©e
 = 
sw_lôîÆ
;

431 
övÆid
;

433 i‡(
s
->
¨gs
.
√…s
 <= 2) {

434 
s
->
¨g_°¨t
 = 
p
;

435 
°©e
 = 
sw_¨gumít
;

438 
övÆid
;

442 
sw_¨gumít
:

443 i‡(
ch
 =' ' && 
s
->
quŸed
) {

447 
ch
) {

449 i‡(!
s
->
quŸed
) {

452 
s
->
quŸed
 = 0;

455 
CR
:

456 
LF
:

457 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

458 i‡(
¨g
 =
NULL
) {

459  
NGX_ERROR
;

461 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

462 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

463 
s
->
¨g_°¨t
 = 
NULL
;

465 
ch
) {

468 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

470 
CR
:

471 
°©e
 = 
sw_Æmo°_d⁄e
;

473 
LF
:

474 
d⁄e
;

478 i‡(
s
->
quŸed
) {

479 
s
->
back¶ash
 = 1;

480 
°©e
 = 
sw_back¶ash
;

486 
sw_back¶ash
:

487 
ch
) {

488 
CR
:

489 
LF
:

490 
övÆid
;

492 
°©e
 = 
sw_¨gumít
;

496 
sw_lôîÆ
:

497 i‡(
ch
 >= '0' && ch <= '9') {

498 
s
->
lôîÆ_Àn
 = s->lôîÆ_À¿* 10 + (
ch
 - '0');

501 i‡(
ch
 == '}') {

502 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

505 i‡(
ch
 == '+') {

506 
°©e
 = 
sw_no_sync_lôîÆ_¨gumít
;

509 
övÆid
;

511 
sw_no_sync_lôîÆ_¨gumít
:

512 i‡(
ch
 == '}') {

513 
s
->
no_sync_lôîÆ
 = 1;

514 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

517 
övÆid
;

519 
sw_°¨t_lôîÆ_¨gumít
:

520 
ch
) {

521 
CR
:

523 
LF
:

524 
s
->
buf„r
->
pos
 = 
p
 + 1;

525 
s
->
¨g_°¨t
 = 
p
 + 1;

526 i‡(
s
->
no_sync_lôîÆ
 == 0) {

527 
s
->
°©e
 = 
sw_lôîÆ_¨gumít
;

528  
NGX_IMAP_NEXT
;

530 
°©e
 = 
sw_lôîÆ_¨gumít
;

531 
s
->
no_sync_lôîÆ
 = 0;

534 
övÆid
;

538 
sw_lôîÆ_¨gumít
:

539 i‡(
s
->
lôîÆ_Àn
 && --s->literal_len) {

543 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

544 i‡(
¨g
 =
NULL
) {

545  
NGX_ERROR
;

547 
¨g
->
Àn
 = 
p
 + 1 - 
s
->
¨g_°¨t
;

548 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

549 
s
->
¨g_°¨t
 = 
NULL
;

550 
°©e
 = 
sw_íd_lôîÆ_¨gumít
;

554 
sw_íd_lôîÆ_¨gumít
:

555 
ch
) {

557 i‡(
s
->
¨gs
.
√…s
 <= 2) {

558 
°©e
 = 
sw_lôîÆ
;

561 
övÆid
;

562 
CR
:

563 
°©e
 = 
sw_Æmo°_d⁄e
;

565 
LF
:

566 
d⁄e
;

568 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

573 
sw_Æmo°_d⁄e
:

574 
ch
) {

575 
LF
:

576 
d⁄e
;

578 
övÆid
;

583 
s
->
buf„r
->
pos
 = 
p
;

584 
s
->
°©e
 = state;

586  
NGX_AGAIN
;

588 
d⁄e
:

590 
s
->
buf„r
->
pos
 = 
p
 + 1;

592 i‡(
s
->
¨g_°¨t
) {

593 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

594 i‡(
¨g
 =
NULL
) {

595  
NGX_ERROR
;

597 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

598 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

600 
s
->
¨g_°¨t
 = 
NULL
;

601 
s
->
cmd_°¨t
 = 
NULL
;

602 
s
->
quŸed
 = 0;

603 
s
->
no_sync_lôîÆ
 = 0;

604 
s
->
lôîÆ_Àn
 = 0;

607 
s
->
°©e
 = (s->
comm™d
 !
NGX_IMAP_AUTHENTICATE
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

609  
NGX_OK
;

611 
övÆid
:

613 
s
->
°©e
 = 
sw_°¨t
;

614 
s
->
quŸed
 = 0;

615 
s
->
no_sync_lôîÆ
 = 0;

616 
s
->
lôîÆ_Àn
 = 0;

618  
NGX_MAIL_PARSE_INVALID_COMMAND
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

625 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

626 
ngx_°r_t
 *
¨g
;

628 
sw_°¨t
 = 0,

629 
sw_comm™d
,

630 
sw_övÆid
,

631 
sw_•a˚s_bef‹e_¨gumít
,

632 
sw_¨gumít
,

633 
sw_Æmo°_d⁄e


634 } 
°©e
;

636 
°©e
 = 
s
->state;

638 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

639 
ch
 = *
p
;

641 
°©e
) {

644 
sw_°¨t
:

645 
s
->
cmd_°¨t
 = 
p
;

646 
°©e
 = 
sw_comm™d
;

650 
sw_comm™d
:

651 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

652 
c
 = 
s
->
cmd_°¨t
;

654 i‡(
p
 - 
c
 == 4) {

656 
c0
 = 
	`ngx_touµî
(
c
[0]);

657 
c1
 = 
	`ngx_touµî
(
c
[1]);

658 
c2
 = 
	`ngx_touµî
(
c
[2]);

659 
c3
 = 
	`ngx_touµî
(
c
[3]);

661 i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'O')

663 
s
->
comm™d
 = 
NGX_SMTP_HELO
;

665 } i‡(
c0
 ='E' && 
c1
 ='H' && 
c2
 ='L' && 
c3
 == 'O')

667 
s
->
comm™d
 = 
NGX_SMTP_EHLO
;

669 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

671 
s
->
comm™d
 = 
NGX_SMTP_QUIT
;

673 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

675 
s
->
comm™d
 = 
NGX_SMTP_AUTH
;

677 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

679 
s
->
comm™d
 = 
NGX_SMTP_NOOP
;

681 } i‡(
c0
 ='M' && 
c1
 ='A' && 
c2
 ='I' && 
c3
 == 'L')

683 
s
->
comm™d
 = 
NGX_SMTP_MAIL
;

685 } i‡(
c0
 ='R' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'T')

687 
s
->
comm™d
 = 
NGX_SMTP_RSET
;

689 } i‡(
c0
 ='R' && 
c1
 ='C' && 
c2
 ='P' && 
c3
 == 'T')

691 
s
->
comm™d
 = 
NGX_SMTP_RCPT
;

693 } i‡(
c0
 ='V' && 
c1
 ='R' && 
c2
 ='F' && 
c3
 == 'Y')

695 
s
->
comm™d
 = 
NGX_SMTP_VRFY
;

697 } i‡(
c0
 ='E' && 
c1
 ='X' && 
c2
 ='P' && 
c3
 == 'N')

699 
s
->
comm™d
 = 
NGX_SMTP_EXPN
;

701 } i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'P')

703 
s
->
comm™d
 = 
NGX_SMTP_HELP
;

706 
övÆid
;

708 #i‡(
NGX_MAIL_SSL
)

709 } i‡(
p
 - 
c
 == 8) {

711 i‡((
c
[0] == 'S'|| c[0] == 's')

712 && (
c
[1] == 'T'|| c[1] == 't')

713 && (
c
[2] == 'A'|| c[2] == 'a')

714 && (
c
[3] == 'R'|| c[3] == 'r')

715 && (
c
[4] == 'T'|| c[4] == 't')

716 && (
c
[5] == 'T'|| c[5] == 't')

717 && (
c
[6] == 'L'|| c[6] == 'l')

718 && (
c
[7] == 'S'|| c[7] == 's'))

720 
s
->
comm™d
 = 
NGX_SMTP_STARTTLS
;

723 
övÆid
;

727 
övÆid
;

730 
s
->
cmd
.
d©a
 = s->
cmd_°¨t
;

731 
s
->
cmd
.
Àn
 = 
p
 - s->
cmd_°¨t
;

733 
ch
) {

735 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

737 
CR
:

738 
°©e
 = 
sw_Æmo°_d⁄e
;

740 
LF
:

741 
d⁄e
;

746 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

747 
övÆid
;

752 
sw_övÆid
:

753 
övÆid
;

755 
sw_•a˚s_bef‹e_¨gumít
:

756 
ch
) {

759 
CR
:

760 
°©e
 = 
sw_Æmo°_d⁄e
;

761 
s
->
¨g_íd
 = 
p
;

763 
LF
:

764 
s
->
¨g_íd
 = 
p
;

765 
d⁄e
;

767 i‡(
s
->
¨gs
.
√…s
 <= 10) {

768 
°©e
 = 
sw_¨gumít
;

769 
s
->
¨g_°¨t
 = 
p
;

772 
övÆid
;

776 
sw_¨gumít
:

777 
ch
) {

779 
CR
:

780 
LF
:

781 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

782 i‡(
¨g
 =
NULL
) {

783  
NGX_ERROR
;

785 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

786 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

787 
s
->
¨g_°¨t
 = 
NULL
;

789 
ch
) {

791 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

793 
CR
:

794 
°©e
 = 
sw_Æmo°_d⁄e
;

796 
LF
:

797 
d⁄e
;

806 
sw_Æmo°_d⁄e
:

807 
ch
) {

808 
LF
:

809 
d⁄e
;

811 
övÆid
;

816 
s
->
buf„r
->
pos
 = 
p
;

817 
s
->
°©e
 = state;

819  
NGX_AGAIN
;

821 
d⁄e
:

823 
s
->
buf„r
->
pos
 = 
p
 + 1;

825 i‡(
s
->
¨g_°¨t
) {

826 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

827 i‡(
¨g
 =
NULL
) {

828  
NGX_ERROR
;

830 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

831 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

832 
s
->
¨g_°¨t
 = 
NULL
;

835 
s
->
°©e
 = (s->
comm™d
 !
NGX_SMTP_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

837  
NGX_OK
;

839 
övÆid
:

841 
s
->
°©e
 = 
sw_övÆid
;

842 
s
->
¨g_°¨t
 = 
NULL
;

846 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

847 i‡(*
p
 =
LF
) {

848 
s
->
°©e
 = 
sw_°¨t
;

849 
p
++;

854 
s
->
buf„r
->
pos
 = 
p
;

856  
NGX_MAIL_PARSE_INVALID_COMMAND
;

857 
	}
}

860 
ngx_öt_t


861 
	$ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

863 
ngx_°r_t
 *
¨g
;

865 #i‡(
NGX_MAIL_SSL
)

866 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

867  
NGX_MAIL_PARSE_INVALID_COMMAND
;

871 i‡(
s
->
¨gs
.
√…s
 == 0) {

872  
NGX_MAIL_PARSE_INVALID_COMMAND
;

875 
¨g
 = 
s
->
¨gs
.
ñts
;

877 i‡(
¨g
[0].
Àn
 == 5) {

879 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "LOGIN", 5) == 0) {

881 i‡(
s
->
¨gs
.
√…s
 == 1) {

882  
NGX_MAIL_AUTH_LOGIN
;

885 i‡(
s
->
¨gs
.
√…s
 == 2) {

886  
NGX_MAIL_AUTH_LOGIN_USERNAME
;

889  
NGX_MAIL_PARSE_INVALID_COMMAND
;

892 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "PLAIN", 5) == 0) {

894 i‡(
s
->
¨gs
.
√…s
 == 1) {

895  
NGX_MAIL_AUTH_PLAIN
;

898 i‡(
s
->
¨gs
.
√…s
 == 2) {

899  
	`ngx_maû_auth_∂aö
(
s
, 
c
, 1);

903  
NGX_MAIL_PARSE_INVALID_COMMAND
;

906 i‡(
¨g
[0].
Àn
 == 8) {

908 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "CRAM-MD5", 8) == 0) {

910 i‡(
s
->
¨gs
.
√…s
 != 1) {

911  
NGX_MAIL_PARSE_INVALID_COMMAND
;

914  
NGX_MAIL_AUTH_CRAM_MD5
;

917 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "EXTERNAL", 8) == 0) {

919 i‡(
s
->
¨gs
.
√…s
 == 1) {

920  
NGX_MAIL_AUTH_EXTERNAL
;

923 i‡(
s
->
¨gs
.
√…s
 == 2) {

924  
	`ngx_maû_auth_exã∫Æ
(
s
, 
c
, 1);

928  
NGX_MAIL_PARSE_INVALID_COMMAND
;

931  
NGX_MAIL_PARSE_INVALID_COMMAND
;

932 
	}
}

	@src/mail/ngx_mail_pop3_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

16 
ngx_öt_t
 
ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

18 
ngx_öt_t
 
°ls
);

19 
ngx_öt_t
 
ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

20 
ngx_öt_t
 
ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
u_ch¨
 
	gp›3_gªëög
[] = "+OK POP3Ñódy" 
CRLF
;

25 
u_ch¨
 
	gp›3_ok
[] = "+OK" 
CRLF
;

26 
u_ch¨
 
	gp›3_√xt
[] = "+ " 
CRLF
;

27 
u_ch¨
 
	gp›3_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

28 
u_ch¨
 
	gp›3_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

29 
u_ch¨
 
	gp›3_övÆid_comm™d
[] = "-ERR invÆid comm™d" 
CRLF
;

33 
	$ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

35 
u_ch¨
 *
p
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

39 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

40 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

42 i‡(
pscf
->
auth_mëhods


43 & (
NGX_MAIL_AUTH_APOP_ENABLED
|
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
))

45 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

46 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

50 
s
->
out
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, (
p›3_gªëög
Ë+ s->
ß…
.
Àn
);

51 i‡(
s
->
out
.
d©a
 =
NULL
) {

52 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

56 
p
 = 
	`ngx_˝ymem
(
s
->
out
.
d©a
, 
p›3_gªëög
, (pop3_greeting) - 3);

57 *
p
++ = ' ';

58 
p
 = 
	`ngx_˝ymem
’, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

60 
s
->
out
.
Àn
 = 
p
 - s->out.
d©a
;

63 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_gªëög
);

66 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_öô_¥Ÿocﬁ
;

68 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

70 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

74 
	`ngx_maû_£nd
(
c
->
wrôe
);

75 
	}
}

79 
	$ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

81 
ngx_c⁄√˘i⁄_t
 *
c
;

82 
ngx_maû_£ssi⁄_t
 *
s
;

84 
c
 = 
ªv
->
d©a
;

86 
c
->
log
->
a˘i⁄
 = "ináuth state";

88 i‡(
ªv
->
timedout
) {

89 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

90 
c
->
timedout
 = 1;

91 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

95 
s
 = 
c
->
d©a
;

97 i‡(
s
->
buf„r
 =
NULL
) {

98 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

99 =
NGX_ERROR
)

101 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

105 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 128);

106 i‡(
s
->
buf„r
 =
NULL
) {

107 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

112 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

113 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_auth_°©e
;

115 
	`ngx_maû_p›3_auth_°©e
(
ªv
);

116 
	}
}

120 
	$ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
)

122 
ngx_öt_t
 
rc
;

123 
ngx_c⁄√˘i⁄_t
 *
c
;

124 
ngx_maû_£ssi⁄_t
 *
s
;

126 
c
 = 
ªv
->
d©a
;

127 
s
 = 
c
->
d©a
;

129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3áuth state");

131 i‡(
ªv
->
timedout
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

133 
c
->
timedout
 = 1;

134 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

138 i‡(
s
->
out
.
Àn
) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3 send handler busy");

140 
s
->
blocked
 = 1;

144 
s
->
blocked
 = 0;

146 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

148 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

152 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_ok
);

154 i‡(
rc
 =
NGX_OK
) {

155 
s
->
maû_°©e
) {

157 
ngx_p›3_°¨t
:

159 
s
->
comm™d
) {

161 
NGX_POP3_USER
:

162 
rc
 = 
	`ngx_maû_p›3_u£r
(
s
, 
c
);

165 
NGX_POP3_CAPA
:

166 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 1);

169 
NGX_POP3_APOP
:

170 
rc
 = 
	`ngx_maû_p›3_≠›
(
s
, 
c
);

173 
NGX_POP3_AUTH
:

174 
rc
 = 
	`ngx_maû_p›3_auth
(
s
, 
c
);

177 
NGX_POP3_QUIT
:

178 
s
->
quô
 = 1;

181 
NGX_POP3_NOOP
:

184 
NGX_POP3_STLS
:

185 
rc
 = 
	`ngx_maû_p›3_°ls
(
s
, 
c
);

189 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

195 
ngx_p›3_u£r
:

197 
s
->
comm™d
) {

199 
NGX_POP3_PASS
:

200 
rc
 = 
	`ngx_maû_p›3_∑ss
(
s
, 
c
);

203 
NGX_POP3_CAPA
:

204 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 0);

207 
NGX_POP3_QUIT
:

208 
s
->
quô
 = 1;

211 
NGX_POP3_NOOP
:

215 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

222 
ngx_p›3_∑sswd
:

225 
ngx_p›3_auth_logö_u£∫ame
:

226 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

228 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

229 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

232 
ngx_p›3_auth_logö_∑ssw‹d
:

233 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

236 
ngx_p›3_auth_∂aö
:

237 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

240 
ngx_p›3_auth_¸am_md5
:

241 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

244 
ngx_p›3_auth_exã∫Æ
:

245 
rc
 = 
	`ngx_maû_auth_exã∫Æ
(
s
, 
c
, 0);

250 
rc
) {

252 
NGX_DONE
:

253 
	`ngx_maû_auth
(
s
, 
c
);

256 
NGX_ERROR
:

257 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

260 
NGX_MAIL_PARSE_INVALID_COMMAND
:

261 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

262 
s
->
°©e
 = 0;

264 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_övÆid_comm™d
);

268 
NGX_OK
:

270 
s
->
¨gs
.
√…s
 = 0;

271 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

272 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

274 i‡(
s
->
°©e
) {

275 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

278 
	`ngx_maû_£nd
(
c
->
wrôe
);

280 
	}
}

282 
ngx_öt_t


283 
	$ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

285 
ngx_°r_t
 *
¨g
;

287 #i‡(
NGX_MAIL_SSL
)

288 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

289  
NGX_MAIL_PARSE_INVALID_COMMAND
;

293 i‡(
s
->
¨gs
.
√…s
 != 1) {

294  
NGX_MAIL_PARSE_INVALID_COMMAND
;

297 
¨g
 = 
s
->
¨gs
.
ñts
;

298 
s
->
logö
.
Àn
 = 
¨g
[0].len;

299 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

300 i‡(
s
->
logö
.
d©a
 =
NULL
) {

301  
NGX_ERROR
;

304 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

307 "p›3Üogö: \"%V\"", &
s
->
logö
);

309 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

311  
NGX_OK
;

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

318 
ngx_°r_t
 *
¨g
;

320 i‡(
s
->
¨gs
.
√…s
 != 1) {

321  
NGX_MAIL_PARSE_INVALID_COMMAND
;

324 
¨g
 = 
s
->
¨gs
.
ñts
;

325 
s
->
∑sswd
.
Àn
 = 
¨g
[0].len;

326 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

327 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

328  
NGX_ERROR
;

331 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[0].d©a, s->∑sswd.
Àn
);

333 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

335 "p›3Öasswd: \"%V\"", &
s
->
∑sswd
);

338  
NGX_DONE
;

339 
	}
}

342 
ngx_öt_t


343 
	$ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_öt_t
 
°ls
)

345 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

347 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

349 #i‡(
NGX_MAIL_SSL
)

351 i‡(
°ls
 && 
c
->
s¶
 =
NULL
) {

352 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

354 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

356 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

357 
s
->
out
 = 
pscf
->
°¨âls_ˇ∑bûôy
;

358  
NGX_OK
;

361 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

362 
s
->
out
 = 
pscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

363  
NGX_OK
;

369 
s
->
out
 = 
pscf
->
ˇ∑bûôy
;

370  
NGX_OK
;

371 
	}
}

374 
ngx_öt_t


375 
	$ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

377 #i‡(
NGX_MAIL_SSL
)

378 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

380 i‡(
c
->
s¶
 =
NULL
) {

381 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

382 i‡(
s¶cf
->
°¨âls
) {

383 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

384  
NGX_OK
;

390  
NGX_MAIL_PARSE_INVALID_COMMAND
;

391 
	}
}

394 
ngx_öt_t


395 
	$ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

397 
ngx_°r_t
 *
¨g
;

398 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

400 #i‡(
NGX_MAIL_SSL
)

401 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

402  
NGX_MAIL_PARSE_INVALID_COMMAND
;

406 i‡(
s
->
¨gs
.
√…s
 != 2) {

407  
NGX_MAIL_PARSE_INVALID_COMMAND
;

410 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

412 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_APOP_ENABLED
)) {

413  
NGX_MAIL_PARSE_INVALID_COMMAND
;

416 
¨g
 = 
s
->
¨gs
.
ñts
;

418 
s
->
logö
.
Àn
 = 
¨g
[0].len;

419 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

420 i‡(
s
->
logö
.
d©a
 =
NULL
) {

421  
NGX_ERROR
;

424 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

426 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

427 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

428 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

429  
NGX_ERROR
;

432 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

435 "p›3áp›: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

437 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_APOP
;

439  
NGX_DONE
;

440 
	}
}

443 
ngx_öt_t


444 
	$ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

446 
ngx_öt_t
 
rc
;

447 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

449 #i‡(
NGX_MAIL_SSL
)

450 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

451  
NGX_MAIL_PARSE_INVALID_COMMAND
;

455 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

457 i‡(
s
->
¨gs
.
√…s
 == 0) {

458 
s
->
out
 = 
pscf
->
auth_ˇ∑bûôy
;

459 
s
->
°©e
 = 0;

461  
NGX_OK
;

464 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

466 
rc
) {

468 
NGX_MAIL_AUTH_LOGIN
:

470 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

471 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_u£∫ame
;

473  
NGX_OK
;

475 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

477 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

478 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

480  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

482 
NGX_MAIL_AUTH_PLAIN
:

484 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_√xt
);

485 
s
->
maû_°©e
 = 
ngx_p›3_auth_∂aö
;

487  
NGX_OK
;

489 
NGX_MAIL_AUTH_CRAM_MD5
:

491 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

492  
NGX_MAIL_PARSE_INVALID_COMMAND
;

495 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

496 
s
->
maû_°©e
 = 
ngx_p›3_auth_¸am_md5
;

497  
NGX_OK
;

500  
NGX_ERROR
;

502 
NGX_MAIL_AUTH_EXTERNAL
:

504 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_EXTERNAL_ENABLED
)) {

505  
NGX_MAIL_PARSE_INVALID_COMMAND
;

508 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

509 
s
->
maû_°©e
 = 
ngx_p›3_auth_exã∫Æ
;

511  
NGX_OK
;

514  
rc
;

515 
	}
}

	@src/mail/ngx_mail_pop3_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 *
ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_p›3_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("TOP"),

22 
ngx_°rög
("USER"),

23 
ngx_°rög
("UIDL"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_p›3_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("≠›"), 
NGX_MAIL_AUTH_APOP_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_°rög
("exã∫Æ"), 
NGX_MAIL_AUTH_EXTERNAL_ENABLED
 },

33 { 
ngx_nuŒ_°rög
, 0 }

37 
ngx_°r_t
 
	gngx_maû_p›3_auth_mëhods_«mes
[] = {

38 
ngx_°rög
("PLAIN"),

39 
ngx_°rög
("LOGIN"),

40 
ngx_nuŒ_°rög
,

41 
ngx_°rög
("CRAM-MD5"),

42 
ngx_°rög
("EXTERNAL"),

43 
ngx_nuŒ_°rög


47 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_p›3_¥Ÿocﬁ
 = {

48 
ngx_°rög
("pop3"),

50 
NGX_MAIL_POP3_PROTOCOL
,

52 
ngx_maû_p›3_öô_£ssi⁄
,

53 
ngx_maû_p›3_öô_¥Ÿocﬁ
,

54 
ngx_maû_p›3_∑r£_comm™d
,

55 
ngx_maû_p›3_auth_°©e
,

57 
ngx_°rög
("-ERR i¡î«»£rvîÉº‹" 
CRLF
),

58 
ngx_°rög
("-ERR SSL cîtifiˇãÉº‹" 
CRLF
),

59 
ngx_°rög
("-ERR Nÿªquúed SSL cîtifiˇã" 
CRLF
)

63 
ngx_comm™d_t
 
	gngx_maû_p›3_comm™ds
[] = {

65 { 
ngx_°rög
("pop3_capabilities"),

66 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

67 
ngx_maû_ˇ∑bûôõs
,

68 
NGX_MAIL_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
ˇ∑bûôõs
),

70 
NULL
 },

72 { 
ngx_°rög
("pop3_auth"),

73 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

74 
ngx_c⁄f_£t_bômask_¶Ÿ
,

75 
NGX_MAIL_SRV_CONF_OFFSET
,

76 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
auth_mëhods
),

77 &
ngx_maû_p›3_auth_mëhods
 },

79 
ngx_nuŒ_comm™d


83 
ngx_maû_moduÀ_t
 
	gngx_maû_p›3_moduÀ_˘x
 = {

84 &
ngx_maû_p›3_¥Ÿocﬁ
,

86 
NULL
,

87 
NULL
,

89 
ngx_maû_p›3_¸óã_§v_c⁄f
,

90 
ngx_maû_p›3_mîge_§v_c⁄f


94 
ngx_moduÀ_t
 
	gngx_maû_p›3_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_maû_p›3_moduÀ_˘x
,

97 
ngx_maû_p›3_comm™ds
,

98 
NGX_MAIL_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


111 
	$ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

113 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

115 
pscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_p›3_§v_c⁄f_t
));

116 i‡(
pscf
 =
NULL
) {

117  
NULL
;

120 i‡(
	`ngx_¨øy_öô
(&
pscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

121 !
NGX_OK
)

123  
NULL
;

126  
pscf
;

127 
	}
}

131 
	$ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

133 
ngx_maû_p›3_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

134 
ngx_maû_p›3_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

136 
u_ch¨
 *
p
;

137 
size_t
 
size
, 
°ls_⁄ly_size
;

138 
ngx_°r_t
 *
c
, *
d
;

139 
ngx_uöt_t
 
i
, 
m
;

141 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

142 
¥ev
->
auth_mëhods
,

143 (
NGX_CONF_BITMASK_SET


144 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

146 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_PLAIN_ENABLED
) {

147 
c⁄f
->
auth_mëhods
 |
NGX_MAIL_AUTH_LOGIN_ENABLED
;

150 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

151 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

154 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

156 
d
 = 
ngx_maû_p›3_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

157 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

158 i‡(
c
 =
NULL
) {

159  
NGX_CONF_ERROR
;

162 *
c
 = *
d
;

166 
size
 = ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1

167 + ("." 
CRLF
) - 1;

169 
°ls_⁄ly_size
 = 
size
 + ("STLS" 
CRLF
) - 1;

171 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

172 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

173 
size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

175 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

179 
°ls_⁄ly_size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

182 
size
 +("SASL"Ë- 1 + (
CRLF
) - 1;

184 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

185 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

186 
m
 <<1, 
i
++)

188 i‡(
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
 == 0) {

192 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

193 
size
 +1 + 
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
;

197 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

198 i‡(
p
 =
NULL
) {

199  
NGX_CONF_ERROR
;

202 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

203 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

205 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

206 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

208 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

209 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

210 *
p
++ = 
CR
; *p++ = 
LF
;

213 
p
 = 
	`ngx_˝ymem
(p, "SASL", ("SASL") - 1);

215 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

216 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

217 
m
 <<1, 
i
++)

219 i‡(
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
 == 0) {

223 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

224 *
p
++ = ' ';

225 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
d©a
,

226 
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
);

230 *
p
++ = 
CR
; *p++ = 
LF
;

232 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

235 
size
 +("STLS" 
CRLF
) - 1;

237 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

238 i‡(
p
 =
NULL
) {

239  
NGX_CONF_ERROR
;

242 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

243 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

245 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

246 
c⁄f
->
ˇ∑bûôy
.
Àn
 - (("." 
CRLF
) - 1));

248 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

249 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

252 
size
 = ("+OK mëhod†suµ‹ãd:" 
CRLF
) - 1

253 + ("." 
CRLF
) - 1;

255 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

256 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

257 
m
 <<1, 
i
++)

259 i‡(
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
 == 0) {

263 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

264 
size
 +
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn


265 + (
CRLF
) - 1;

269 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

270 i‡(
p
 =
NULL
) {

271  
NGX_CONF_ERROR
;

274 
c⁄f
->
auth_ˇ∑bûôy
.
d©a
 = 
p
;

275 
c⁄f
->
auth_ˇ∑bûôy
.
Àn
 = 
size
;

277 
p
 = 
	`ngx_˝ymem
’, "+OK mëhod†suµ‹ãd:" 
CRLF
,

278 ("+OK mëhod†suµ‹ãd:" 
CRLF
) - 1);

280 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

281 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

282 
m
 <<1, 
i
++)

284 i‡(
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
 == 0) {

288 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

289 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
d©a
,

290 
ngx_maû_p›3_auth_mëhods_«mes
[
i
].
Àn
);

291 *
p
++ = 
CR
; *p++ = 
LF
;

295 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

298 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
°ls_⁄ly_size
);

299 i‡(
p
 =
NULL
) {

300  
NGX_CONF_ERROR
;

303 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
°ls_⁄ly_size
;

304 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

306 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

307 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

309 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

310 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

314 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

315 *
p
++ = 
CR
; *p++ = 
LF
;

318 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

319 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

321  
NGX_CONF_OK
;

322 
	}
}

	@src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@src/mail/ngx_mail_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	m∑ss_îr‹_mesßge
;

18 
ngx_Êag_t
 
	mx˛õ¡
;

19 
size_t
 
	mbuf„r_size
;

20 
ngx_m£c_t
 
	mtimeout
;

21 } 
	tngx_maû_¥oxy_c⁄f_t
;

24 
ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
);

25 
ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
);

26 
ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
);

27 
ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
);

28 
ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

29 
ngx_öt_t
 
ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
,

30 
ngx_uöt_t
 
°©e
);

31 
ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

33 
ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

34 
ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
);

35 *
ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

40 
ngx_comm™d_t
 
	gngx_maû_¥oxy_comm™ds
[] = {

42 { 
ngx_°rög
("proxy"),

43 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

45 
NGX_MAIL_SRV_CONF_OFFSET
,

46 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
íabÀ
),

47 
NULL
 },

49 { 
ngx_°rög
("proxy_buffer"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_size_¶Ÿ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
buf„r_size
),

54 
NULL
 },

56 { 
ngx_°rög
("proxy_timeout"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("proxy_pass_error_message"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
∑ss_îr‹_mesßge
),

68 
NULL
 },

70 { 
ngx_°rög
("xclient"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
x˛õ¡
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_maû_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ_˘x
 = {

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_maû_¥oxy_¸óã_c⁄f
,

88 
ngx_maû_¥oxy_mîge_c⁄f


92 
ngx_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_maû_¥oxy_moduÀ_˘x
,

95 
ngx_maû_¥oxy_comm™ds
,

96 
NGX_MAIL_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
u_ch¨
 
	gsmç_auth_ok
[] = "235 2.0.0 OK" 
CRLF
;

112 
	$ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
)

114 
ngx_öt_t
 
rc
;

115 
ngx_maû_¥oxy_˘x_t
 *
p
;

116 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

117 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

119 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

121 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

123 
p
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_maû_¥oxy_˘x_t
));

124 i‡(
p
 =
NULL
) {

125 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

129 
s
->
¥oxy
 = 
p
;

131 
p
->
up°ªam
.
sockaddr
 = 
≥î
->sockaddr;

132 
p
->
up°ªam
.
sockÀn
 = 
≥î
->socklen;

133 
p
->
up°ªam
.
«me
 = &
≥î
->name;

134 
p
->
up°ªam
.
gë
 = 
ngx_evít_gë_≥î
;

135 
p
->
up°ªam
.
log
 = 
s
->
c⁄√˘i⁄
->log;

136 
p
->
up°ªam
.
log_îr‹
 = 
NGX_ERROR_ERR
;

138 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
p
->
up°ªam
);

140 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

141 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

145 
	`ngx_add_timî
(
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
, 
cscf
->
timeout
);

147 
p
->
up°ªam
.
c⁄√˘i⁄
->
d©a
 = 
s
;

148 
p
->
up°ªam
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

150 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_block_ªad
;

151 
p
->
up°ªam
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_dummy_h™dÀr
;

153 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

155 
s
->
¥oxy
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(s->
c⁄√˘i⁄
->
poﬁ
,

156 
pcf
->
buf„r_size
);

157 i‡(
s
->
¥oxy
->
buf„r
 =
NULL
) {

158 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

162 
s
->
out
.
Àn
 = 0;

164 
s
->
¥Ÿocﬁ
) {

166 
NGX_MAIL_POP3_PROTOCOL
:

167 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_p›3_h™dÀr
;

168 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

171 
NGX_MAIL_IMAP_PROTOCOL
:

172 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_im≠_h™dÀr
;

173 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

177 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_smç_h™dÀr
;

178 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

181 
	}
}

185 
	$ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
)

187 
ngx_c⁄√˘i⁄_t
 *
c
;

188 
ngx_maû_£ssi⁄_t
 *
s
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy blockÑead");

192 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

193 
c
 = 
ªv
->
d©a
;

194 
s
 = 
c
->
d©a
;

196 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

198 
	}
}

202 
	$ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
)

204 
u_ch¨
 *
p
;

205 
ngx_öt_t
 
rc
;

206 
ngx_°r_t
 
löe
;

207 
ngx_c⁄√˘i⁄_t
 *
c
;

208 
ngx_maû_£ssi⁄_t
 *
s
;

209 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

211 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

214 
c
 = 
ªv
->
d©a
;

215 
s
 = 
c
->
d©a
;

217 i‡(
ªv
->
timedout
) {

218 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

220 
c
->
timedout
 = 1;

221 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

225 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, 0);

227 i‡(
rc
 =
NGX_AGAIN
) {

231 i‡(
rc
 =
NGX_ERROR
) {

232 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

236 
s
->
maû_°©e
) {

238 
ngx_p›3_°¨t
:

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

241 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

243 
löe
.
Àn
 = ("USER "Ë- 1 + 
s
->
logö
.len + 2;

244 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

245 i‡(
löe
.
d©a
 =
NULL
) {

246 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

250 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "USER ", ("USER ") - 1);

251 
p
 = 
	`ngx_˝ymem
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

252 *
p
++ = 
CR
; *∞
LF
;

254 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

257 
ngx_p›3_u£r
:

258 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÖass");

260 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

262 
löe
.
Àn
 = ("PASS "Ë- 1 + 
s
->
∑sswd
.len + 2;

263 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

264 i‡(
löe
.
d©a
 =
NULL
) {

265 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

269 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "PASS ", ("PASS ") - 1);

270 
p
 = 
	`ngx_˝ymem
’, 
s
->
∑sswd
.
d©a
, s->∑sswd.
Àn
);

271 *
p
++ = 
CR
; *∞
LF
;

273 
s
->
maû_°©e
 = 
ngx_p›3_∑sswd
;

276 
ngx_p›3_∑sswd
:

277 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

278 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

279 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

280 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

282 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

283 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

284 
	`ngx_dñ_timî
(
c
->
ªad
);

286 
c
->
log
->
a˘i⁄
 = 
NULL
;

287 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

289 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

294 #i‡(
NGX_SUPPRESS_WARN
)

295 
	`ngx_°r_nuŒ
(&
löe
);

300 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

305 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

309 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

310 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

311 
	}
}

315 
	$ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
)

317 
u_ch¨
 *
p
;

318 
ngx_öt_t
 
rc
;

319 
ngx_°r_t
 
löe
;

320 
ngx_c⁄√˘i⁄_t
 *
c
;

321 
ngx_maû_£ssi⁄_t
 *
s
;

322 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

324 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

327 
c
 = 
ªv
->
d©a
;

328 
s
 = 
c
->
d©a
;

330 i‡(
ªv
->
timedout
) {

331 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

333 
c
->
timedout
 = 1;

334 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

338 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

340 i‡(
rc
 =
NGX_AGAIN
) {

344 i‡(
rc
 =
NGX_ERROR
) {

345 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

349 
s
->
maû_°©e
) {

351 
ngx_im≠_°¨t
:

352 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

355 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending LOGIN commandÅo upstream";

357 
löe
.
Àn
 = 
s
->
èg
.len + ("LOGIN ") - 1

358 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

359 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

360 i‡(
löe
.
d©a
 =
NULL
) {

361 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

365 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%VLOGIN {%uz}" 
CRLF
,

366 &
s
->
èg
, s->
logö
.
Àn
)

367 - 
löe
.
d©a
;

369 
s
->
maû_°©e
 = 
ngx_im≠_logö
;

372 
ngx_im≠_logö
:

373 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

375 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

377 
löe
.
Àn
 = 
s
->
logö
.À¿+ 1 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

378 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

379 i‡(
löe
.
d©a
 =
NULL
) {

380 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

384 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%V {%uz}" 
CRLF
,

385 &
s
->
logö
, s->
∑sswd
.
Àn
)

386 - 
löe
.
d©a
;

388 
s
->
maû_°©e
 = 
ngx_im≠_u£r
;

391 
ngx_im≠_u£r
:

392 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

395 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

397 
löe
.
Àn
 = 
s
->
∑sswd
.len + 2;

398 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

399 i‡(
löe
.
d©a
 =
NULL
) {

400 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

404 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
∑sswd
.d©a, s->∑sswd.
Àn
);

405 *
p
++ = 
CR
; *∞
LF
;

407 
s
->
maû_°©e
 = 
ngx_im≠_∑sswd
;

410 
ngx_im≠_∑sswd
:

411 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

412 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

413 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

414 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

416 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

417 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

418 
	`ngx_dñ_timî
(
c
->
ªad
);

420 
c
->
log
->
a˘i⁄
 = 
NULL
;

421 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

423 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

428 #i‡(
NGX_SUPPRESS_WARN
)

429 
	`ngx_°r_nuŒ
(&
löe
);

434 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

439 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

443 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

444 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

445 
	}
}

449 
	$ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
)

451 
u_ch¨
 *
p
;

452 
ngx_öt_t
 
rc
;

453 
ngx_°r_t
 
löe
;

454 
ngx_buf_t
 *
b
;

455 
ngx_c⁄√˘i⁄_t
 *
c
;

456 
ngx_maû_£ssi⁄_t
 *
s
;

457 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

458 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

460 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

463 
c
 = 
ªv
->
d©a
;

464 
s
 = 
c
->
d©a
;

466 i‡(
ªv
->
timedout
) {

467 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

469 
c
->
timedout
 = 1;

470 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

474 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

476 i‡(
rc
 =
NGX_AGAIN
) {

480 i‡(
rc
 =
NGX_ERROR
) {

481 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

485 
s
->
maû_°©e
) {

487 
ngx_smç_°¨t
:

488 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÉhlo");

490 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending HELO/EHLOÅo upstream";

492 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

494 
löe
.
Àn
 = ("HELO "Ë- 1 + 
cscf
->
£rvî_«me
.len + 2;

495 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

496 i‡(
löe
.
d©a
 =
NULL
) {

497 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

501 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

503 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
,

504 ((
s
->
esmç
 || 
pcf
->
x˛õ¡
) ? "EHLO " : "HELO "),

507 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

508 *
p
++ = 
CR
; *∞
LF
;

510 i‡(
pcf
->
x˛õ¡
) {

511 
s
->
maû_°©e
 = 
ngx_smç_hño_x˛õ¡
;

513 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

514 
s
->
maû_°©e
 = 
ngx_smç_hño_‰om
;

517 
s
->
maû_°©e
 = 
ngx_smç_hño
;

522 
ngx_smç_hño_x˛õ¡
:

523 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

526 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending XCLIENTÅo upstream";

528 
löe
.
Àn
 = ("XCLIENT ADDR= LOGIN= NAME="

529 
CRLF
) - 1

530 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
 + s->
logö
.À¿+ s->
ho°
.len;

532 #i‡(
NGX_HAVE_INET6
)

533 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

534 
löe
.
Àn
 += ("IPV6:") - 1;

538 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

539 i‡(
löe
.
d©a
 =
NULL
) {

540 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

544 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "XCLIENT ADDR=", ("XCLIENT ADDR=") - 1);

546 #i‡(
NGX_HAVE_INET6
)

547 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

548 
p
 = 
	`ngx_˝ymem
(p, "IPV6:", ("IPV6:") - 1);

552 
p
 = 
	`ngx_c›y
’, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

553 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

555 i‡(
s
->
logö
.
Àn
) {

556 
p
 = 
	`ngx_˝ymem
(p, " LOGIN=", (" LOGIN=") - 1);

557 
p
 = 
	`ngx_c›y
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

560 
p
 = 
	`ngx_˝ymem
(p, " NAME=", (" NAME=") - 1);

561 
p
 = 
	`ngx_c›y
’, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

563 *
p
++ = 
CR
; *p++ = 
LF
;

565 
löe
.
Àn
 = 
p
 -Üöe.
d©a
;

567 i‡(
s
->
smç_hño
.
Àn
) {

568 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_hño
;

570 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

571 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_‰om
;

574 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡
;

579 
ngx_smç_x˛õ¡_hño
:

580 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

583 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending client HELO/EHLOÅo upstream";

585 
löe
.
Àn
 = ("HELO " 
CRLF
Ë- 1 + 
s
->
smç_hño
.len;

587 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

588 i‡(
löe
.
d©a
 =
NULL
) {

589 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

593 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

594 ((
s
->
esmç
Ë? "EHLO %V" 
CRLF
 : "HELO %V" CRLF),

595 &
s
->
smç_hño
)

596 - 
löe
.
d©a
;

598 
s
->
maû_°©e
 = (s->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) ?

599 
ngx_smç_hño_‰om
 : 
ngx_smç_hño
;

603 
ngx_smç_hño_‰om
:

604 
ngx_smç_x˛õ¡_‰om
:

605 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

608 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending MAIL FROMÅo upstream";

610 
löe
.
Àn
 = 
s
->
smç_‰om
.À¿+ (
CRLF
) - 1;

611 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

612 i‡(
löe
.
d©a
 =
NULL
) {

613 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

617 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_‰om
.d©a, s->smç_‰om.
Àn
);

618 *
p
++ = 
CR
; *∞
LF
;

620 
s
->
maû_°©e
 = 
ngx_smç_‰om
;

624 
ngx_smç_‰om
:

625 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

628 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending RCPT TOÅo upstream";

630 
löe
.
Àn
 = 
s
->
smç_to
.À¿+ (
CRLF
) - 1;

631 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

632 i‡(
löe
.
d©a
 =
NULL
) {

633 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

637 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_to
.d©a, s->smç_to.
Àn
);

638 *
p
++ = 
CR
; *∞
LF
;

640 
s
->
maû_°©e
 = 
ngx_smç_to
;

644 
ngx_smç_hño
:

645 
ngx_smç_x˛õ¡
:

646 
ngx_smç_to
:

648 
b
 = 
s
->
¥oxy
->
buf„r
;

650 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

651 
b
->
pos
 = b->
°¨t
;

654 
	`ngx_mem˝y
(
b
->
°¨t
, 
smç_auth_ok
, (smtp_auth_ok) - 1);

655 
b
->
œ°
 = b->
°¨t
 + (
smç_auth_ok
) - 1;

658 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

659 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

660 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

661 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

663 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

664 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

665 
	`ngx_dñ_timî
(
c
->
ªad
);

667 
c
->
log
->
a˘i⁄
 = 
NULL
;

668 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

670 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

671 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

674 
	`ngx_maû_¥oxy_h™dÀr
(
c
->
wrôe
);

680 #i‡(
NGX_SUPPRESS_WARN
)

681 
	`ngx_°r_nuŒ
(&
löe
);

686 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

691 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

695 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

696 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

697 
	}
}

701 
	$ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
wev
)

703 
ngx_c⁄√˘i⁄_t
 *
c
;

704 
ngx_maû_£ssi⁄_t
 *
s
;

706 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0, "mailÖroxy dummy handler");

708 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

709 
c
 = 
wev
->
d©a
;

710 
s
 = 
c
->
d©a
;

712 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

714 
	}
}

717 
ngx_öt_t


718 
	$ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
°©e
)

720 
u_ch¨
 *
p
, *
m
;

721 
ssize_t
 
n
;

722 
ngx_buf_t
 *
b
;

723 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

725 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "readingÑesponse from upstream";

727 
b
 = 
s
->
¥oxy
->
buf„r
;

729 
n
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
	`ªcv
(s->proxy->upstream.connection,

730 
b
->
œ°
, b->
íd
 - b->last);

732 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

733  
NGX_ERROR
;

736 i‡(
n
 =
NGX_AGAIN
) {

737  
NGX_AGAIN
;

740 
b
->
œ°
 +
n
;

742 i‡(
b
->
œ°
 - b->
pos
 < 4) {

743  
NGX_AGAIN
;

746 i‡(*(
b
->
œ°
 - 2Ë!
CR
 || *(b->œ° - 1Ë!
LF
) {

747 i‡(
b
->
œ°
 =b->
íd
) {

748 *(
b
->
œ°
 - 1) = '\0';

749 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

751 
b
->
pos
);

752  
NGX_ERROR
;

755  
NGX_AGAIN
;

758 
p
 = 
b
->
pos
;

760 
s
->
¥Ÿocﬁ
) {

762 
NGX_MAIL_POP3_PROTOCOL
:

763 i‡(
p
[0] == '+' &&Ö[1] == 'O' &&Ö[2] == 'K') {

764  
NGX_OK
;

768 
NGX_MAIL_IMAP_PROTOCOL
:

769 
°©e
) {

771 
ngx_im≠_°¨t
:

772 i‡(
p
[0] == '*' &&Ö[1] == ' ' &&Ö[2] == 'O' &&Ö[3] == 'K') {

773  
NGX_OK
;

777 
ngx_im≠_logö
:

778 
ngx_im≠_u£r
:

779 i‡(
p
[0] == '+') {

780  
NGX_OK
;

784 
ngx_im≠_∑sswd
:

785 i‡(
	`ngx_°∫cmp
(
p
, 
s
->
èg
.
d©a
, s->èg.
Àn
) == 0) {

786 
p
 +
s
->
èg
.
Àn
;

787 i‡(
p
[0] == 'O' &&Ö[1] == 'K') {

788  
NGX_OK
;

798 i‡(
p
[3] == '-') {

801 
m
 = 
b
->
œ°
 - ((
CRLF
 "200" CRLF) - 1);

803 
m
 > 
p
) {

804 i‡(
m
[0] =
CR
 && m[1] =
LF
) {

808 
m
--;

811 i‡(
m
 <
p
 || m[5] == '-') {

812  
NGX_AGAIN
;

816 
°©e
) {

818 
ngx_smç_°¨t
:

819 i‡(
p
[0] == '2' &&Ö[1] == '2' &&Ö[2] == '0') {

820  
NGX_OK
;

824 
ngx_smç_hño
:

825 
ngx_smç_hño_x˛õ¡
:

826 
ngx_smç_hño_‰om
:

827 
ngx_smç_‰om
:

828 i‡(
p
[0] == '2' &&Ö[1] == '5' &&Ö[2] == '0') {

829  
NGX_OK
;

833 
ngx_smç_x˛õ¡
:

834 
ngx_smç_x˛õ¡_‰om
:

835 
ngx_smç_x˛õ¡_hño
:

836 i‡(
p
[0] == '2' && (p[1] == '2' ||Ö[1] == '5') &&Ö[2] == '0') {

837  
NGX_OK
;

841 
ngx_smç_to
:

842  
NGX_OK
;

848 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

850 i‡(
pcf
->
∑ss_îr‹_mesßge
 == 0) {

851 *(
b
->
œ°
 - 2) = '\0';

852 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

853 "up°ªam síàövÆidÑe•⁄£: \"%s\"", 
p
);

854  
NGX_ERROR
;

857 
s
->
out
.
Àn
 = 
b
->
œ°
 - 
p
 - 2;

858 
s
->
out
.
d©a
 = 
p
;

860 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

861 "up°ªam síàövÆidÑe•⁄£: \"%V\"", &
s
->
out
);

863 
s
->
out
.
Àn
 = 
b
->
œ°
 - b->
pos
;

864 
s
->
out
.
d©a
 = 
b
->
pos
;

866  
NGX_ERROR
;

867 
	}
}

871 
	$ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
)

873 *
a˘i⁄
, *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

874 
size_t
 
size
;

875 
ssize_t
 
n
;

876 
ngx_buf_t
 *
b
;

877 
ngx_uöt_t
 
do_wrôe
;

878 
ngx_c⁄√˘i⁄_t
 *
c
, *
§c
, *
d°
;

879 
ngx_maû_£ssi⁄_t
 *
s
;

880 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

882 
c
 = 
ev
->
d©a
;

883 
s
 = 
c
->
d©a
;

885 i‡(
ev
->
timedout
 || 
c
->
˛o£
) {

886 
c
->
log
->
a˘i⁄
 = "proxying";

888 i‡(
c
->
˛o£
) {

889 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "shutdownÅimeout");

891 } i‡(
c
 =
s
->
c⁄√˘i⁄
) {

892 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

894 
c
->
timedout
 = 1;

897 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

901 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

905 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

906 i‡(
ev
->
wrôe
) {

907 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

908 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

909 
§c
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

910 
d°
 = 
c
;

911 
b
 = 
s
->
¥oxy
->
buf„r
;

914 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

915 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

916 
§c
 = 
c
;

917 
d°
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

918 
b
 = 
s
->
buf„r
;

922 i‡(
ev
->
wrôe
) {

923 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

924 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

925 
§c
 = 
s
->
c⁄√˘i⁄
;

926 
d°
 = 
c
;

927 
b
 = 
s
->
buf„r
;

930 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

931 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

932 
§c
 = 
c
;

933 
d°
 = 
s
->
c⁄√˘i⁄
;

934 
b
 = 
s
->
¥oxy
->
buf„r
;

938 
do_wrôe
 = 
ev
->
wrôe
 ? 1 : 0;

940 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

942 
do_wrôe
, 
§c
->
fd
, 
d°
->fd);

946 i‡(
do_wrôe
) {

948 
size
 = 
b
->
œ°
 - b->
pos
;

950 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

951 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

953 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

955 i‡(
n
 =
NGX_ERROR
) {

956 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

960 i‡(
n
 > 0) {

961 
b
->
pos
 +
n
;

963 i‡(
b
->
pos
 =b->
œ°
) {

964 
b
->
pos
 = b->
°¨t
;

965 
b
->
œ°
 = b->
°¨t
;

971 
size
 = 
b
->
íd
 - b->
œ°
;

973 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

974 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

976 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

978 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

982 i‡(
n
 > 0) {

983 
do_wrôe
 = 1;

984 
b
->
œ°
 +
n
;

989 i‡(
n
 =
NGX_ERROR
) {

990 
§c
->
ªad
->
eof
 = 1;

997 
c
->
log
->
a˘i⁄
 = "proxying";

999 i‡((
s
->
c⁄√˘i⁄
->
ªad
->
eof
 && s->
buf„r
->
pos
 =s->buf„r->
œ°
)

1000 || (
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof


1001 && 
s
->
¥oxy
->
buf„r
->
pos
 =s->¥oxy->buf„r->
œ°
)

1002 || (
s
->
c⁄√˘i⁄
->
ªad
->
eof


1003 && 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof
))

1005 
a˘i⁄
 = 
c
->
log
->action;

1006 
c
->
log
->
a˘i⁄
 = 
NULL
;

1007 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxied session done");

1008 
c
->
log
->
a˘i⁄
 =áction;

1010 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1014 i‡(
	`ngx_h™dÀ_wrôe_evít
(
d°
->
wrôe
, 0Ë!
NGX_OK
) {

1015 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1019 i‡(
	`ngx_h™dÀ_ªad_evít
(
d°
->
ªad
, 0Ë!
NGX_OK
) {

1020 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1024 i‡(
	`ngx_h™dÀ_wrôe_evít
(
§c
->
wrôe
, 0Ë!
NGX_OK
) {

1025 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1029 i‡(
	`ngx_h™dÀ_ªad_evít
(
§c
->
ªad
, 0Ë!
NGX_OK
) {

1030 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1034 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

1035 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

1036 
	`ngx_add_timî
(
c
->
ªad
, 
pcf
->
timeout
);

1038 
	}
}

1042 
	$ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1044 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1045 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1047 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1049 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1052 i‡(
s
->
out
.
Àn
 == 0) {

1053 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1057 
s
->
quô
 = 1;

1058 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

1059 
	}
}

1063 
	$ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1065 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1066 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1068 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1070 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1073 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1074 
	}
}

1078 
	$ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
)

1080 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1081 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1083 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1085 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1088 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

1089 
	}
}

1093 
	$ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1095 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

1097 
pcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_¥oxy_c⁄f_t
));

1098 i‡(
pcf
 =
NULL
) {

1099  
NULL
;

1102 
pcf
->
íabÀ
 = 
NGX_CONF_UNSET
;

1103 
pcf
->
∑ss_îr‹_mesßge
 = 
NGX_CONF_UNSET
;

1104 
pcf
->
x˛õ¡
 = 
NGX_CONF_UNSET
;

1105 
pcf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1106 
pcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1108  
pcf
;

1109 
	}
}

1113 
	$ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1115 
ngx_maû_¥oxy_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1116 
ngx_maû_¥oxy_c⁄f_t
 *
c⁄f
 = 
chûd
;

1118 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1119 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_îr‹_mesßge
, 
¥ev
->pass_error_message, 0);

1120 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
x˛õ¡
, 
¥ev
->xclient, 1);

1121 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1122 (
size_t
Ë
ngx_∑gesize
);

1123 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 24 * 60 * 60000);

1125  
NGX_CONF_OK
;

1126 
	}
}

	@src/mail/ngx_mail_smtp_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

16 
ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
);

17 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

18 
ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
);

20 
ngx_öt_t
 
ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
,

21 
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ngx_öt_t
 
ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
ngx_öt_t
 
ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_öt_t
 
ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

27 
ngx_c⁄√˘i⁄_t
 *
c
);

28 
ngx_öt_t
 
ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

29 
ngx_öt_t
 
ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_öt_t
 
ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

32 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

33 
ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

34 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

37 
u_ch¨
 
	gsmç_ok
[] = "250 2.0.0 OK" 
CRLF
;

38 
u_ch¨
 
	gsmç_bye
[] = "221 2.0.0 Bye" 
CRLF
;

39 
u_ch¨
 
	gsmç_°¨âls
[] = "220 2.0.0 Sèπ TLS" 
CRLF
;

40 
u_ch¨
 
	gsmç_√xt
[] = "334 " 
CRLF
;

41 
u_ch¨
 
	gsmç_u£∫ame
[] = "334 VXNlcm5hbWU6" 
CRLF
;

42 
u_ch¨
 
	gsmç_∑ssw‹d
[] = "334 UGFzc3dvcmQ6" 
CRLF
;

43 
u_ch¨
 
	gsmç_övÆid_comm™d
[] = "500 5.5.1 InvÆid comm™d" 
CRLF
;

44 
u_ch¨
 
	gsmç_övÆid_pùñöög
[] =

45 "503 5.5.0 Im¥›î u£ o‡SMTP comm™dÖùñöög" 
CRLF
;

46 
u_ch¨
 
	gsmç_övÆid_¨gumít
[] = "501 5.5.4 InvÆidárgumít" 
CRLF
;

47 
u_ch¨
 
	gsmç_auth_ªquúed
[] = "530 5.7.1 Authítiˇti⁄Ñequúed" 
CRLF
;

48 
u_ch¨
 
	gsmç_bad_£quí˚
[] = "503 5.5.1 Bad sequí˚ o‡comm™ds" 
CRLF
;

51 
ngx_°r_t
 
	gsmç_u«vaûabÀ
 = 
ngx_°rög
("[UNAVAILABLE]");

52 
ngx_°r_t
 
	gsmç_ãmpu«vaû
 = 
ngx_°rög
("[TEMPUNAVAIL]");

56 
	$ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

58 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

59 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

61 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

63 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

64 
s
->
ho°
 = 
smç_u«vaûabÀ
;

65 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

69 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

70 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

71 
s
->
ho°
 = 
smç_ãmpu«vaû
;

72 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

77 
c
->
log
->
a˘i⁄
 = "inÑesolving clientáddress";

79 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

80 i‡(
˘x
 =
NULL
) {

81 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

85 
˘x
->
addr
.
sockaddr
 = 
c
->sockaddr;

86 
˘x
->
addr
.
sockÀn
 = 
c
->socklen;

87 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
;

88 
˘x
->
d©a
 = 
s
;

89 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

91 i‡(
	`ngx_ªsﬁve_addr
(
˘x
Ë!
NGX_OK
) {

92 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

94 
	}
}

98 
	$ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

100 
ngx_c⁄√˘i⁄_t
 *
c
;

101 
ngx_maû_£ssi⁄_t
 *
s
;

103 
s
 = 
˘x
->
d©a
;

104 
c
 = 
s
->
c⁄√˘i⁄
;

106 i‡(
˘x
->
°©e
) {

107 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

109 &
c
->
addr_ãxt
, 
˘x
->
°©e
,

110 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

112 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

113 
s
->
ho°
 = 
smç_u«vaûabÀ
;

116 
s
->
ho°
 = 
smç_ãmpu«vaû
;

119 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

121 
	`ngx_maû_smç_gªëög
(
s
, s->
c⁄√˘i⁄
);

126 
c
->
log
->
a˘i⁄
 = "inÑesolving client hostname";

128 
s
->
ho°
.
d©a
 = 
	`ngx_p°rdup
(
c
->
poﬁ
, &
˘x
->
«me
);

129 i‡(
s
->
ho°
.
d©a
 =
NULL
) {

130 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

131 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

135 
s
->
ho°
.
Àn
 = 
˘x
->
«me
.len;

137 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

139 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

140 "addªs†ªsﬁved: %V", &
s
->
ho°
);

142 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me
;

144 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

145 
	}
}

149 
	$ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
)

151 
ngx_c⁄√˘i⁄_t
 *
c
;

152 
ngx_maû_£ssi⁄_t
 *
s
;

153 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

154 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

156 
c
 = 
ªv
->
d©a
;

157 
s
 = 
c
->
d©a
;

159 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

161 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

162 i‡(
˘x
 =
NULL
) {

163 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

167 
˘x
->
«me
 = 
s
->
ho°
;

168 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
;

169 
˘x
->
d©a
 = 
s
;

170 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

172 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

173 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

175 
	}
}

179 
	$ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

181 
ngx_uöt_t
 
i
;

182 
ngx_c⁄√˘i⁄_t
 *
c
;

183 
ngx_maû_£ssi⁄_t
 *
s
;

185 
s
 = 
˘x
->
d©a
;

186 
c
 = 
s
->
c⁄√˘i⁄
;

188 i‡(
˘x
->
°©e
) {

189 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

191 &
˘x
->
«me
, ctx->
°©e
,

192 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

194 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

195 
s
->
ho°
 = 
smç_u«vaûabÀ
;

198 
s
->
ho°
 = 
smç_ãmpu«vaû
;

203 #i‡(
NGX_DEBUG
)

205 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

206 
ngx_°r_t
 
addr
;

208 
addr
.
d©a
 = 
ãxt
;

210 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

211 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
˘x
->
addrs
[
i
].
sockaddr
,

212 
˘x
->
addrs
[
i
].
sockÀn
,

213 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

216 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

221 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

222 i‡(
	`ngx_cmp_sockaddr
(
˘x
->
addrs
[
i
].
sockaddr
, ctx->addrs[i].
sockÀn
,

223 
c
->
sockaddr
, c->
sockÀn
, 0)

224 =
NGX_OK
)

226 
found
;

230 
s
->
ho°
 = 
smç_u«vaûabÀ
;

233 
found
:

235 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

237 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

238 
	}
}

242 
	$ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

244 
ngx_m£c_t
 
timeout
;

245 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

246 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

249 "smç gªëög f‹ \"%V\"", &
s
->
ho°
);

251 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

252 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

254 
timeout
 = 
sscf
->
gªëög_dñay
 ? sscf->gªëög_dñay : 
cscf
->timeout;

255 
	`ngx_add_timî
(
c
->
ªad
, 
timeout
);

257 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

261 i‡(
sscf
->
gªëög_dñay
) {

262 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_övÆid_pùñöög
;

266 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

268 
s
->
out
 = 
sscf
->
gªëög
;

270 
	`ngx_maû_£nd
(
c
->
wrôe
);

271 
	}
}

275 
	$ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
)

277 
ngx_c⁄√˘i⁄_t
 *
c
;

278 
ngx_maû_£ssi⁄_t
 *
s
;

279 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

280 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

282 
c
 = 
ªv
->
d©a
;

283 
s
 = 
c
->
d©a
;

285 
c
->
log
->
a˘i⁄
 = "in delayÖipelining state";

287 i‡(
ªv
->
timedout
) {

289 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "delay greeting");

291 
ªv
->
timedout
 = 0;

293 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

295 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

297 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

299 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

300 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

304 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

306 
s
->
out
 = 
sscf
->
gªëög
;

310 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "invalidÖipelining");

312 i‡(
s
->
buf„r
 =
NULL
) {

313 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

318 i‡(
	`ngx_maû_smç_disˇrd_comm™d
(
s
, 
c
,

320 !
NGX_OK
)

325 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_pùñöög
);

326 
s
->
quô
 = 1;

329 
	`ngx_maû_£nd
(
c
->
wrôe
);

330 
	}
}

334 
	$ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

336 
ngx_c⁄√˘i⁄_t
 *
c
;

337 
ngx_maû_£ssi⁄_t
 *
s
;

339 
c
 = 
ªv
->
d©a
;

341 
c
->
log
->
a˘i⁄
 = "ináuth state";

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

345 
c
->
timedout
 = 1;

346 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

350 
s
 = 
c
->
d©a
;

352 i‡(
s
->
buf„r
 =
NULL
) {

353 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

358 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

359 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_auth_°©e
;

361 
	`ngx_maû_smç_auth_°©e
(
ªv
);

362 
	}
}

365 
ngx_öt_t


366 
	$ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

368 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

370 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
)Ë=
NGX_ERROR
) {

371 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

372  
NGX_ERROR
;

375 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

377 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
sscf
->
˛õ¡_buf„r_size
);

378 i‡(
s
->
buf„r
 =
NULL
) {

379 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

380  
NGX_ERROR
;

383  
NGX_OK
;

384 
	}
}

388 
	$ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
)

390 
ngx_öt_t
 
rc
;

391 
ngx_c⁄√˘i⁄_t
 *
c
;

392 
ngx_maû_£ssi⁄_t
 *
s
;

394 
c
 = 
ªv
->
d©a
;

395 
s
 = 
c
->
d©a
;

397 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtpáuth state");

399 i‡(
ªv
->
timedout
) {

400 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

401 
c
->
timedout
 = 1;

402 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

406 i‡(
s
->
out
.
Àn
) {

407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtp send handler busy");

408 
s
->
blocked
 = 1;

412 
s
->
blocked
 = 0;

414 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

416 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

420 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

422 i‡(
rc
 =
NGX_OK
) {

423 
s
->
maû_°©e
) {

425 
ngx_smç_°¨t
:

427 
s
->
comm™d
) {

429 
NGX_SMTP_HELO
:

430 
NGX_SMTP_EHLO
:

431 
rc
 = 
	`ngx_maû_smç_hño
(
s
, 
c
);

434 
NGX_SMTP_AUTH
:

435 
rc
 = 
	`ngx_maû_smç_auth
(
s
, 
c
);

438 
NGX_SMTP_QUIT
:

439 
s
->
quô
 = 1;

440 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bye
);

443 
NGX_SMTP_MAIL
:

444 
rc
 = 
	`ngx_maû_smç_maû
(
s
, 
c
);

447 
NGX_SMTP_RCPT
:

448 
rc
 = 
	`ngx_maû_smç_r˝t
(
s
, 
c
);

451 
NGX_SMTP_RSET
:

452 
rc
 = 
	`ngx_maû_smç_r£t
(
s
, 
c
);

455 
NGX_SMTP_NOOP
:

458 
NGX_SMTP_STARTTLS
:

459 
rc
 = 
	`ngx_maû_smç_°¨âls
(
s
, 
c
);

460 
	`ngx_°r_£t
(&
s
->
out
, 
smç_°¨âls
);

464 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

470 
ngx_smç_auth_logö_u£∫ame
:

471 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

473 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

477 
ngx_smç_auth_logö_∑ssw‹d
:

478 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

481 
ngx_smç_auth_∂aö
:

482 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

485 
ngx_smç_auth_¸am_md5
:

486 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

489 
ngx_smç_auth_exã∫Æ
:

490 
rc
 = 
	`ngx_maû_auth_exã∫Æ
(
s
, 
c
, 0);

495 i‡(
s
->
buf„r
->
pos
 < s->buf„r->
œ°
) {

496 
s
->
blocked
 = 1;

499 
rc
) {

501 
NGX_DONE
:

502 
	`ngx_maû_auth
(
s
, 
c
);

505 
NGX_ERROR
:

506 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

509 
NGX_MAIL_PARSE_INVALID_COMMAND
:

510 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

511 
s
->
°©e
 = 0;

512 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_comm™d
);

516 
NGX_OK
:

517 
s
->
¨gs
.
√…s
 = 0;

519 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

520 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

521 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

524 i‡(
s
->
°©e
) {

525 
s
->
¨g_°¨t
 = s->
buf„r
->
pos
;

528 
	`ngx_maû_£nd
(
c
->
wrôe
);

530 
	}
}

533 
ngx_öt_t


534 
	$ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

536 
ngx_°r_t
 *
¨g
;

537 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

539 i‡(
s
->
¨gs
.
√…s
 != 1) {

540 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

541 
s
->
°©e
 = 0;

542  
NGX_OK
;

545 
¨g
 = 
s
->
¨gs
.
ñts
;

547 
s
->
smç_hño
.
Àn
 = 
¨g
[0].len;

549 
s
->
smç_hño
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
¨g
[0].
Àn
);

550 i‡(
s
->
smç_hño
.
d©a
 =
NULL
) {

551  
NGX_ERROR
;

554 
	`ngx_mem˝y
(
s
->
smç_hño
.
d©a
, 
¨g
[0].d©a,árg[0].
Àn
);

556 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

557 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

559 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

561 i‡(
s
->
comm™d
 =
NGX_SMTP_HELO
) {

562 
s
->
out
 = 
sscf
->
£rvî_«me
;

565 
s
->
esmç
 = 1;

567 #i‡(
NGX_MAIL_SSL
)

569 i‡(
c
->
s¶
 =
NULL
) {

570 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

572 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

574 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

575 
s
->
out
 = 
sscf
->
°¨âls_ˇ∑bûôy
;

576  
NGX_OK
;

579 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

580 
s
->
out
 = 
sscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

581  
NGX_OK
;

586 
s
->
out
 = 
sscf
->
ˇ∑bûôy
;

589  
NGX_OK
;

590 
	}
}

593 
ngx_öt_t


594 
	$ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

596 
ngx_öt_t
 
rc
;

597 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

598 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

600 #i‡(
NGX_MAIL_SSL
)

601 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

602  
NGX_MAIL_PARSE_INVALID_COMMAND
;

606 i‡(
s
->
¨gs
.
√…s
 == 0) {

607 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

608 
s
->
°©e
 = 0;

609  
NGX_OK
;

612 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

614 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

616 
rc
) {

618 
NGX_MAIL_AUTH_LOGIN
:

620 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

621 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_u£∫ame
;

623  
NGX_OK
;

625 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

627 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

628 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

630  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

632 
NGX_MAIL_AUTH_PLAIN
:

634 
	`ngx_°r_£t
(&
s
->
out
, 
smç_√xt
);

635 
s
->
maû_°©e
 = 
ngx_smç_auth_∂aö
;

637  
NGX_OK
;

639 
NGX_MAIL_AUTH_CRAM_MD5
:

641 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

642  
NGX_MAIL_PARSE_INVALID_COMMAND
;

645 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

646 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

648 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

649  
NGX_ERROR
;

653 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "334 ", 4Ë=
NGX_OK
) {

654 
s
->
maû_°©e
 = 
ngx_smç_auth_¸am_md5
;

655  
NGX_OK
;

658  
NGX_ERROR
;

660 
NGX_MAIL_AUTH_EXTERNAL
:

662 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_EXTERNAL_ENABLED
)) {

663  
NGX_MAIL_PARSE_INVALID_COMMAND
;

666 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

667 
s
->
maû_°©e
 = 
ngx_smç_auth_exã∫Æ
;

669  
NGX_OK
;

672  
rc
;

673 
	}
}

676 
ngx_öt_t


677 
	$ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

679 
ngx_°r_t
 *
¨g
, 
cmd
;

680 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

682 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

684 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_NONE_ENABLED
)) {

685 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, "client wasÑejected: \"%V\"");

686 
	`ngx_°r_£t
(&
s
->
out
, 
smç_auth_ªquúed
);

687  
NGX_OK
;

692 i‡(
s
->
smç_‰om
.
Àn
) {

693 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

694  
NGX_OK
;

697 i‡(
s
->
¨gs
.
√…s
 == 0) {

698 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

699  
NGX_OK
;

702 
¨g
 = 
s
->
¨gs
.
ñts
;

703 
¨g
 +
s
->
¨gs
.
√…s
 - 1;

705 
cmd
.
Àn
 = 
¨g
->
d©a
 +árg->À¿- 
s
->cmd.data;

706 
cmd
.
d©a
 = 
s
->cmd.data;

708 
s
->
smç_‰om
.
Àn
 = 
cmd
.len;

710 
s
->
smç_‰om
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
cmd
.
Àn
);

711 i‡(
s
->
smç_‰om
.
d©a
 =
NULL
) {

712  
NGX_ERROR
;

715 
	`ngx_mem˝y
(
s
->
smç_‰om
.
d©a
, 
cmd
.d©a, cmd.
Àn
);

717 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

718 "smç maû from:\"%V\"", &
s
->
smç_‰om
);

720 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

722  
NGX_OK
;

723 
	}
}

726 
ngx_öt_t


727 
	$ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

729 
ngx_°r_t
 *
¨g
, 
cmd
;

731 i‡(
s
->
smç_‰om
.
Àn
 == 0) {

732 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

733  
NGX_OK
;

736 i‡(
s
->
¨gs
.
√…s
 == 0) {

737 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

738  
NGX_OK
;

741 
¨g
 = 
s
->
¨gs
.
ñts
;

742 
¨g
 +
s
->
¨gs
.
√…s
 - 1;

744 
cmd
.
Àn
 = 
¨g
->
d©a
 +árg->À¿- 
s
->cmd.data;

745 
cmd
.
d©a
 = 
s
->cmd.data;

747 
s
->
smç_to
.
Àn
 = 
cmd
.len;

749 
s
->
smç_to
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
cmd
.
Àn
);

750 i‡(
s
->
smç_to
.
d©a
 =
NULL
) {

751  
NGX_ERROR
;

754 
	`ngx_mem˝y
(
s
->
smç_to
.
d©a
, 
cmd
.d©a, cmd.
Àn
);

756 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

757 "smçÑ˝àto:\"%V\"", &
s
->
smç_to
);

759 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_NONE
;

761  
NGX_DONE
;

762 
	}
}

765 
ngx_öt_t


766 
	$ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

768 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

769 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

770 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

772  
NGX_OK
;

773 
	}
}

776 
ngx_öt_t


777 
	$ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

779 #i‡(
NGX_MAIL_SSL
)

780 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

782 i‡(
c
->
s¶
 =
NULL
) {

783 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

784 i‡(
s¶cf
->
°¨âls
) {

791 
	`ngx_°r_nuŒ
(&
s
->
smç_hño
);

792 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

793 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

795 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

796 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

798 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

799  
NGX_OK
;

805  
NGX_MAIL_PARSE_INVALID_COMMAND
;

806 
	}
}

809 
ngx_öt_t


810 
	$ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

811 *
îr
)

813 
ssize_t
 
n
;

815 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

817 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

818 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

819  
NGX_ERROR
;

822 i‡(
n
 > 0) {

823 
s
->
buf„r
->
œ°
 +
n
;

826 i‡(
n
 =
NGX_AGAIN
) {

827 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

828 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

829  
NGX_ERROR
;

832  
NGX_AGAIN
;

835 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, 
îr
);

837 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

838 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

840  
NGX_OK
;

841 
	}
}

845 
	$ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

846 *
îr
)

848 
u_ch¨
 
ch
;

849 
ngx_°r_t
 
cmd
;

850 
ngx_uöt_t
 
i
;

852 i‡(
c
->
log
->
log_Àvñ
 < 
NGX_LOG_INFO
) {

856 
cmd
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

857 
cmd
.
d©a
 = 
s
->
buf„r
->
°¨t
;

859 
i
 = 0; i < 
cmd
.
Àn
; i++) {

860 
ch
 = 
cmd
.
d©a
[
i
];

862 i‡(
ch
 !
CR
 && ch !
LF
) {

866 
cmd
.
d©a
[
i
] = '_';

869 
cmd
.
Àn
 = 
i
;

871 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, 
îr
, &
cmd
);

872 
	}
}

	@src/mail/ngx_mail_smtp_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 *
ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_c⁄f_bômask_t
 
	gngx_maû_smç_auth_mëhods
[] = {

21 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

22 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

23 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

24 { 
ngx_°rög
("exã∫Æ"), 
NGX_MAIL_AUTH_EXTERNAL_ENABLED
 },

25 { 
ngx_°rög
("n⁄e"), 
NGX_MAIL_AUTH_NONE_ENABLED
 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 
ngx_°r_t
 
	gngx_maû_smç_auth_mëhods_«mes
[] = {

31 
ngx_°rög
("PLAIN"),

32 
ngx_°rög
("LOGIN"),

33 
ngx_nuŒ_°rög
,

34 
ngx_°rög
("CRAM-MD5"),

35 
ngx_°rög
("EXTERNAL"),

36 
ngx_nuŒ_°rög


40 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_smç_¥Ÿocﬁ
 = {

41 
ngx_°rög
("smtp"),

43 
NGX_MAIL_SMTP_PROTOCOL
,

45 
ngx_maû_smç_öô_£ssi⁄
,

46 
ngx_maû_smç_öô_¥Ÿocﬁ
,

47 
ngx_maû_smç_∑r£_comm™d
,

48 
ngx_maû_smç_auth_°©e
,

50 
ngx_°rög
("451 4.3.2 I¡î«»£rvîÉº‹" 
CRLF
),

51 
ngx_°rög
("421 4.7.1 SSL cîtifiˇãÉº‹" 
CRLF
),

52 
ngx_°rög
("421 4.7.1 Nÿªquúed SSL cîtifiˇã" 
CRLF
)

56 
ngx_comm™d_t
 
	gngx_maû_smç_comm™ds
[] = {

58 { 
ngx_°rög
("smtp_client_buffer"),

59 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_size_¶Ÿ
,

61 
NGX_MAIL_SRV_CONF_OFFSET
,

62 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

63 
NULL
 },

65 { 
ngx_°rög
("smtp_greeting_delay"),

66 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_m£c_¶Ÿ
,

68 
NGX_MAIL_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
gªëög_dñay
),

70 
NULL
 },

72 { 
ngx_°rög
("smtp_capabilities"),

73 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

74 
ngx_maû_ˇ∑bûôõs
,

75 
NGX_MAIL_SRV_CONF_OFFSET
,

76 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
ˇ∑bûôõs
),

77 
NULL
 },

79 { 
ngx_°rög
("smtp_auth"),

80 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

81 
ngx_c⁄f_£t_bômask_¶Ÿ
,

82 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
auth_mëhods
),

84 &
ngx_maû_smç_auth_mëhods
 },

86 
ngx_nuŒ_comm™d


90 
ngx_maû_moduÀ_t
 
	gngx_maû_smç_moduÀ_˘x
 = {

91 &
ngx_maû_smç_¥Ÿocﬁ
,

93 
NULL
,

94 
NULL
,

96 
ngx_maû_smç_¸óã_§v_c⁄f
,

97 
ngx_maû_smç_mîge_§v_c⁄f


101 
ngx_moduÀ_t
 
	gngx_maû_smç_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_maû_smç_moduÀ_˘x
,

104 
ngx_maû_smç_comm™ds
,

105 
NGX_MAIL_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


118 
	$ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

120 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

122 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_smç_§v_c⁄f_t
));

123 i‡(
sscf
 =
NULL
) {

124  
NULL
;

127 
sscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

128 
sscf
->
gªëög_dñay
 = 
NGX_CONF_UNSET_MSEC
;

130 i‡(
	`ngx_¨øy_öô
(&
sscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

131 !
NGX_OK
)

133  
NULL
;

136  
sscf
;

137 
	}
}

141 
	$ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

143 
ngx_maû_smç_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

144 
ngx_maû_smç_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

146 
u_ch¨
 *
p
, *
auth
, *
œ°
;

147 
size_t
 
size
;

148 
ngx_°r_t
 *
c
;

149 
ngx_uöt_t
 
i
, 
m
, 
auth_íabÀd
;

150 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

152 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

153 
¥ev
->
˛õ¡_buf„r_size
,

154 (
size_t
Ë
ngx_∑gesize
);

156 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
gªëög_dñay
,

157 
¥ev
->
gªëög_dñay
, 0);

159 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

160 
¥ev
->
auth_mëhods
,

161 (
NGX_CONF_BITMASK_SET


162 |
NGX_MAIL_AUTH_PLAIN_ENABLED


163 |
NGX_MAIL_AUTH_LOGIN_ENABLED
));

166 
cscf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

168 
size
 = ("220 ESMTPÑódy" 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

170 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

171 i‡(
p
 =
NULL
) {

172  
NGX_CONF_ERROR
;

175 
c⁄f
->
gªëög
.
Àn
 = 
size
;

176 
c⁄f
->
gªëög
.
d©a
 = 
p
;

178 *
p
++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';

179 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

180 
	`ngx_mem˝y
(
p
, " ESMTPÑódy" 
CRLF
, (" ESMTPÑeady" CRLF) - 1);

183 
size
 = ("250 " 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

185 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

186 i‡(
p
 =
NULL
) {

187  
NGX_CONF_ERROR
;

190 
c⁄f
->
£rvî_«me
.
Àn
 = 
size
;

191 
c⁄f
->
£rvî_«me
.
d©a
 = 
p
;

193 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

194 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

195 *
p
++ = 
CR
; *∞
LF
;

198 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

199 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

202 
size
 = ("250-"Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
 + (
CRLF
) - 1;

204 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

205 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

206 
size
 +("250 "Ë- 1 + 
c
[
i
].
Àn
 + (
CRLF
) - 1;

209 
auth_íabÀd
 = 0;

211 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

212 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

213 
m
 <<1, 
i
++)

215 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

216 
size
 +1 + 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
;

217 
auth_íabÀd
 = 1;

221 i‡(
auth_íabÀd
) {

222 
size
 +("250 AUTH"Ë- 1 + (
CRLF
) - 1;

225 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

226 i‡(
p
 =
NULL
) {

227  
NGX_CONF_ERROR
;

230 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

231 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

233 
œ°
 = 
p
;

235 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

236 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

237 *
p
++ = 
CR
; *p++ = 
LF
;

239 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

240 
œ°
 = 
p
;

241 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

242 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

243 *
p
++ = 
CR
; *p++ = 
LF
;

246 
auth
 = 
p
;

248 i‡(
auth_íabÀd
) {

249 
œ°
 = 
p
;

251 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

252 *
p
++ = 'A'; *p++ = 'U'; *p++ = 'T'; *p++ = 'H';

254 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

255 
m
 <
NGX_MAIL_AUTH_EXTERNAL_ENABLED
;

256 
m
 <<1, 
i
++)

258 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

259 *
p
++ = ' ';

260 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
d©a
,

261 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
);

265 *
p
++ = 
CR
; *∞
LF
;

268 
œ°
[3] = ' ';

271 
size
 +("250 STARTTLS" 
CRLF
) - 1;

273 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

274 i‡(
p
 =
NULL
) {

275  
NGX_CONF_ERROR
;

278 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

279 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

281 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, c⁄f->ˇ∑bûôy.
Àn
);

283 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

285 
p
 = 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a


286 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

287 *
p
 = '-';

289 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
)

290 + ("250 STARTTLS" 
CRLF
) - 1;

292 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

293 i‡(
p
 =
NULL
) {

294  
NGX_CONF_ERROR
;

297 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

298 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

300 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, 
auth
 - conf->capability.data);

302 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

304 i‡(
œ°
 < 
auth
) {

305 
p
 = 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a


306 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

307 *
p
 = '-';

310  
NGX_CONF_OK
;

311 
	}
}

	@src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@src/mail/ngx_mail_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_maû.h
>

13 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

14 
	#NGX_DEFAULT_ECDH_CURVE
 "auto"

	)

17 *
ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 *
ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

20 *
ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

26 *
ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

27 *
c⁄f
);

30 
ngx_c⁄f_íum_t
 
	gngx_maû_°¨âls_°©e
[] = {

31 { 
ngx_°rög
("off"), 
NGX_MAIL_STARTTLS_OFF
 },

32 { 
ngx_°rög
("⁄"), 
NGX_MAIL_STARTTLS_ON
 },

33 { 
ngx_°rög
("⁄ly"), 
NGX_MAIL_STARTTLS_ONLY
 },

34 { 
ngx_nuŒ_°rög
, 0 }

39 
ngx_c⁄f_bômask_t
 
	gngx_maû_s¶_¥Ÿocﬁs
[] = {

40 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

41 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

42 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

43 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

44 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

45 { 
ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

46 { 
ngx_nuŒ_°rög
, 0 }

50 
ngx_c⁄f_íum_t
 
	gngx_maû_s¶_vîify
[] = {

51 { 
ngx_°rög
("off"), 0 },

52 { 
ngx_°rög
("on"), 1 },

53 { 
ngx_°rög
("optional"), 2 },

54 { 
ngx_°rög
("optional_no_ca"), 3 },

55 { 
ngx_nuŒ_°rög
, 0 }

59 
ngx_c⁄f_dïªˇãd_t
 
	gngx_maû_s¶_dïªˇãd
 = {

60 
ngx_c⁄f_dïªˇãd
, "ssl", "listen ... ssl"

64 
ngx_comm™d_t
 
	gngx_maû_s¶_comm™ds
[] = {

66 { 
ngx_°rög
("ssl"),

67 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

68 
ngx_maû_s¶_íabÀ
,

69 
NGX_MAIL_SRV_CONF_OFFSET
,

70 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
íabÀ
),

71 &
ngx_maû_s¶_dïªˇãd
 },

73 { 
ngx_°rög
("starttls"),

74 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

75 
ngx_maû_s¶_°¨âls
,

76 
NGX_MAIL_SRV_CONF_OFFSET
,

77 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
°¨âls
),

78 
ngx_maû_°¨âls_°©e
 },

80 { 
ngx_°rög
("ssl_certificate"),

81 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

83 
NGX_MAIL_SRV_CONF_OFFSET
,

84 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇãs
),

85 
NULL
 },

87 { 
ngx_°rög
("ssl_certificate_key"),

88 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

89 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

90 
NGX_MAIL_SRV_CONF_OFFSET
,

91 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã_keys
),

92 
NULL
 },

94 { 
ngx_°rög
("ssl_password_file"),

95 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

96 
ngx_maû_s¶_∑ssw‹d_fûe
,

97 
NGX_MAIL_SRV_CONF_OFFSET
,

99 
NULL
 },

101 { 
ngx_°rög
("ssl_dhparam"),

102 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

103 
ngx_c⁄f_£t_°r_¶Ÿ
,

104 
NGX_MAIL_SRV_CONF_OFFSET
,

105 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
dh∑øm
),

106 
NULL
 },

108 { 
ngx_°rög
("ssl_ecdh_curve"),

109 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

110 
ngx_c⁄f_£t_°r_¶Ÿ
,

111 
NGX_MAIL_SRV_CONF_OFFSET
,

112 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
ecdh_curve
),

113 
NULL
 },

115 { 
ngx_°rög
("ssl_protocols"),

116 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

117 
ngx_c⁄f_£t_bômask_¶Ÿ
,

118 
NGX_MAIL_SRV_CONF_OFFSET
,

119 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

120 &
ngx_maû_s¶_¥Ÿocﬁs
 },

122 { 
ngx_°rög
("ssl_ciphers"),

123 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_c⁄f_£t_°r_¶Ÿ
,

125 
NGX_MAIL_SRV_CONF_OFFSET
,

126 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
cùhîs
),

127 
NULL
 },

129 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

130 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

131 
ngx_c⁄f_£t_Êag_¶Ÿ
,

132 
NGX_MAIL_SRV_CONF_OFFSET
,

133 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

134 
NULL
 },

136 { 
ngx_°rög
("ssl_session_cache"),

137 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

138 
ngx_maû_s¶_£ssi⁄_ˇche
,

139 
NGX_MAIL_SRV_CONF_OFFSET
,

141 
NULL
 },

143 { 
ngx_°rög
("ssl_session_tickets"),

144 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

145 
ngx_c⁄f_£t_Êag_¶Ÿ
,

146 
NGX_MAIL_SRV_CONF_OFFSET
,

147 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_tickës
),

148 
NULL
 },

150 { 
ngx_°rög
("ssl_session_ticket_key"),

151 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

152 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

153 
NGX_MAIL_SRV_CONF_OFFSET
,

154 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_tickë_keys
),

155 
NULL
 },

157 { 
ngx_°rög
("ssl_session_timeout"),

158 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

159 
ngx_c⁄f_£t_£c_¶Ÿ
,

160 
NGX_MAIL_SRV_CONF_OFFSET
,

161 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

162 
NULL
 },

164 { 
ngx_°rög
("ssl_verify_client"),

165 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_c⁄f_£t_íum_¶Ÿ
,

167 
NGX_MAIL_SRV_CONF_OFFSET
,

168 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
vîify
),

169 &
ngx_maû_s¶_vîify
 },

171 { 
ngx_°rög
("ssl_verify_depth"),

172 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

173 
ngx_c⁄f_£t_num_¶Ÿ
,

174 
NGX_MAIL_SRV_CONF_OFFSET
,

175 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
vîify_dïth
),

176 
NULL
 },

178 { 
ngx_°rög
("ssl_client_certificate"),

179 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

180 
ngx_c⁄f_£t_°r_¶Ÿ
,

181 
NGX_MAIL_SRV_CONF_OFFSET
,

182 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

183 
NULL
 },

185 { 
ngx_°rög
("ssl_trusted_certificate"),

186 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

187 
ngx_c⁄f_£t_°r_¶Ÿ
,

188 
NGX_MAIL_SRV_CONF_OFFSET
,

189 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
åu°ed_˚πifiˇã
),

190 
NULL
 },

192 { 
ngx_°rög
("ssl_crl"),

193 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

194 
ngx_c⁄f_£t_°r_¶Ÿ
,

195 
NGX_MAIL_SRV_CONF_OFFSET
,

196 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¸l
),

197 
NULL
 },

199 
ngx_nuŒ_comm™d


203 
ngx_maû_moduÀ_t
 
	gngx_maû_s¶_moduÀ_˘x
 = {

204 
NULL
,

206 
NULL
,

207 
NULL
,

209 
ngx_maû_s¶_¸óã_c⁄f
,

210 
ngx_maû_s¶_mîge_c⁄f


214 
ngx_moduÀ_t
 
	gngx_maû_s¶_moduÀ
 = {

215 
NGX_MODULE_V1
,

216 &
ngx_maû_s¶_moduÀ_˘x
,

217 
ngx_maû_s¶_comm™ds
,

218 
NGX_MAIL_MODULE
,

219 
NULL
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NGX_MODULE_V1_PADDING


230 
ngx_°r_t
 
	gngx_maû_s¶_£ss_id_˘x
 = 
ngx_°rög
("MAIL");

234 
	$ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_maû_s¶_c⁄f_t
 *
scf
;

238 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_s¶_c⁄f_t
));

239 i‡(
scf
 =
NULL
) {

240  
NULL
;

257 
scf
->
íabÀ
 = 
NGX_CONF_UNSET
;

258 
scf
->
°¨âls
 = 
NGX_CONF_UNSET_UINT
;

259 
scf
->
˚πifiˇãs
 = 
NGX_CONF_UNSET_PTR
;

260 
scf
->
˚πifiˇã_keys
 = 
NGX_CONF_UNSET_PTR
;

261 
scf
->
∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

262 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

263 
scf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

264 
scf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

265 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

266 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

267 
scf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

268 
scf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

270  
scf
;

271 
	}
}

275 
	$ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

277 
ngx_maû_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

278 
ngx_maû_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

280 *
mode
;

281 
ngx_poﬁ_˛ónup_t
 *
˛n
;

283 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

284 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°¨âls
, 
¥ev
->starttls,

285 
NGX_MAIL_STARTTLS_OFF
);

287 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

288 
¥ev
->
£ssi⁄_timeout
, 300);

290 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

291 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

293 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

294 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


295 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

297 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

298 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

300 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
˚πifiˇãs
, 
¥ev
->˚πifiˇãs, 
NULL
);

301 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
˚πifiˇã_keys
, 
¥ev
->certificate_keys,

302 
NULL
);

304 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
∑ssw‹ds
, 
¥ev
->∑ssw‹ds, 
NULL
);

306 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

308 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

309 
NGX_DEFAULT_ECDH_CURVE
);

311 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
,

312 
¥ev
->
˛õ¡_˚πifiˇã
, "");

313 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

314 
¥ev
->
åu°ed_˚πifiˇã
, "");

315 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

317 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

320 
c⁄f
->
s¶
.
log
 = 
cf
->log;

322 i‡(
c⁄f
->
li°í
) {

323 
mode
 = "listen ... ssl";

325 } i‡(
c⁄f
->
íabÀ
) {

326 
mode
 = "ssl";

328 } i‡(
c⁄f
->
°¨âls
 !
NGX_MAIL_STARTTLS_OFF
) {

329 
mode
 = "starttls";

332  
NGX_CONF_OK
;

335 i‡(
c⁄f
->
fûe
 =
NULL
) {

336 
c⁄f
->
fûe
 = 
¥ev
->file;

337 
c⁄f
->
löe
 = 
¥ev
->line;

340 i‡(
c⁄f
->
˚πifiˇãs
 =
NULL
) {

341 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

344 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

345  
NGX_CONF_ERROR
;

348 i‡(
c⁄f
->
˚πifiˇã_keys
 =
NULL
) {

349 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

352 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

353  
NGX_CONF_ERROR
;

356 i‡(
c⁄f
->
˚πifiˇã_keys
->
√…s
 < c⁄f->
˚πifiˇãs
->nelts) {

357 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

361 ((
ngx_°r_t
 *Ë
c⁄f
->
˚πifiˇãs
->
ñts
)

362 + 
c⁄f
->
˚πifiˇãs
->
√…s
 - 1,

363 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

364  
NGX_CONF_ERROR
;

367 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

368  
NGX_CONF_ERROR
;

371 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

372 i‡(
˛n
 =
NULL
) {

373  
NGX_CONF_ERROR
;

376 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

377 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

379 i‡(
	`ngx_s¶_˚πifiˇãs
(
cf
, &
c⁄f
->
s¶
, c⁄f->
˚πifiˇãs
,

380 
c⁄f
->
˚πifiˇã_keys
, c⁄f->
∑ssw‹ds
)

381 !
NGX_OK
)

383  
NGX_CONF_ERROR
;

386 i‡(
c⁄f
->
vîify
) {

388 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

389 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

391  
NGX_CONF_ERROR
;

394 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

395 &
c⁄f
->
˛õ¡_˚πifiˇã
,

396 
c⁄f
->
vîify_dïth
)

397 !
NGX_OK
)

399  
NGX_CONF_ERROR
;

402 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

403 &
c⁄f
->
åu°ed_˚πifiˇã
,

404 
c⁄f
->
vîify_dïth
)

405 !
NGX_OK
)

407  
NGX_CONF_ERROR
;

410 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

411  
NGX_CONF_ERROR
;

415 i‡(
	`ngx_s¶_cùhîs
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
cùhîs
,

416 
c⁄f
->
¥e„r_£rvî_cùhîs
)

417 !
NGX_OK
)

419  
NGX_CONF_ERROR
;

422 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

423  
NGX_CONF_ERROR
;

426 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

427  
NGX_CONF_ERROR
;

430 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

431 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

433 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

434 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

437 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_maû_s¶_£ss_id_˘x
,

438 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

439 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

440 !
NGX_OK
)

442  
NGX_CONF_ERROR
;

445 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
,

446 
¥ev
->
£ssi⁄_tickës
, 1);

448 #ifde‡
SSL_OP_NO_TICKET


449 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

450 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

454 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

455 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

457 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

458 !
NGX_OK
)

460  
NGX_CONF_ERROR
;

463  
NGX_CONF_OK
;

464 
	}
}

468 
	$ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

470 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

472 *
rv
;

474 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

476 i‡(
rv
 !
NGX_CONF_OK
) {

477  
rv
;

480 i‡(
scf
->
íabÀ
 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

483  
NGX_CONF_ERROR
;

486 i‡(!
scf
->
li°í
) {

487 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

488 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

491  
NGX_CONF_OK
;

492 
	}
}

496 
	$ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

498 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

500 *
rv
;

502 
rv
 = 
	`ngx_c⁄f_£t_íum_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

504 i‡(
rv
 !
NGX_CONF_OK
) {

505  
rv
;

508 i‡(
scf
->
íabÀ
 =1 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

509 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

511  
NGX_CONF_ERROR
;

514 i‡(!
scf
->
li°í
) {

515 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

516 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

519  
NGX_CONF_OK
;

520 
	}
}

524 
	$ngx_maû_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

526 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

528 
ngx_°r_t
 *
vÆue
;

530 i‡(
scf
->
∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

534 
vÆue
 = 
cf
->
¨gs
->
ñts
;

536 
scf
->
∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

538 i‡(
scf
->
∑ssw‹ds
 =
NULL
) {

539  
NGX_CONF_ERROR
;

542  
NGX_CONF_OK
;

543 
	}
}

547 
	$ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

549 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

551 
size_t
 
Àn
;

552 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

553 
ngx_öt_t
 
n
;

554 
ngx_uöt_t
 
i
, 
j
;

556 
vÆue
 = 
cf
->
¨gs
->
ñts
;

558 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

560 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

561 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

565 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

566 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

570 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

571 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

575 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

576 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

579 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

580 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

582 i‡(
n
 =
NGX_ERROR
) {

583 
övÆid
;

586 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

591 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

592 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

595 
Àn
 = 0;

597 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

598 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

602 
Àn
++;

605 i‡(
Àn
 == 0) {

606 
övÆid
;

609 
«me
.
Àn
 =Üen;

610 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

612 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

613 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

615 
n
 = 
	`ngx_∑r£_size
(&
size
);

617 i‡(
n
 =
NGX_ERROR
) {

618 
övÆid
;

621 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

622 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

624 &
vÆue
[
i
]);

626  
NGX_CONF_ERROR
;

629 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

630 &
ngx_maû_s¶_moduÀ
);

631 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

632  
NGX_CONF_ERROR
;

635 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

640 
övÆid
;

643 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

644 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

647  
NGX_CONF_OK
;

649 
övÆid
:

651 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

652 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

654  
NGX_CONF_ERROR
;

655 
	}
}

	@src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	mli°í
;

30 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

32 
ngx_uöt_t
 
	mvîify
;

33 
ngx_uöt_t
 
	mvîify_dïth
;

35 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

37 
time_t
 
	m£ssi⁄_timeout
;

39 
ngx_¨øy_t
 *
	m˚πifiˇãs
;

40 
ngx_¨øy_t
 *
	m˚πifiˇã_keys
;

42 
ngx_°r_t
 
	mdh∑øm
;

43 
ngx_°r_t
 
	mecdh_curve
;

44 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

45 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

46 
ngx_°r_t
 
	m¸l
;

48 
ngx_°r_t
 
	mcùhîs
;

50 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

52 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

54 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

55 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

57 
u_ch¨
 *
	mfûe
;

58 
ngx_uöt_t
 
	mlöe
;

59 } 
	tngx_maû_s¶_c⁄f_t
;

62 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@src/misc/ngx_cpp_test_module.cpp

5 
	~<ngx_c⁄fig.h
>

6 
	~<ngx_c‹e.h
>

7 
	~<ngx_evít.h
>

8 
	~<ngx_evít_c⁄√˘.h
>

9 
	~<ngx_evít_pùe.h
>

11 
	~<ngx_hâp.h
>

13 
	~<ngx_maû.h
>

14 
	~<ngx_maû_p›3_moduÀ.h
>

15 
	~<ngx_maû_im≠_moduÀ.h
>

16 
	~<ngx_maû_smç_moduÀ.h
>

23 
ngx_˝p_ã°_h™dÀr
(*
d©a
);

26 
	$ngx_˝p_ã°_h™dÀr
(*
d©a
)

29 
	}
}

	@src/misc/ngx_google_perftools_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

16 
ProfûîSèπ
(
u_ch¨
* 
‚ame
);

17 
ProfûîSt›
();

18 
ProfûîRegi°îThªad
();

21 *
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_öt_t
 
ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_°r_t
 
	m¥ofûes
;

27 } 
	tngx_googÀ_≥r·oﬁs_c⁄f_t
;

30 
ngx_comm™d_t
 
	gngx_googÀ_≥r·oﬁs_comm™ds
[] = {

32 { 
ngx_°rög
("google_perftools_profiles"),

33 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_c⁄f_£t_°r_¶Ÿ
,

36 
off£tof
(
ngx_googÀ_≥r·oﬁs_c⁄f_t
, 
¥ofûes
),

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ_˘x
 = {

44 
ngx_°rög
("google_perftools"),

45 
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_googÀ_≥r·oﬁs_moduÀ_˘x
,

53 
ngx_googÀ_≥r·oﬁs_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
ngx_googÀ_≥r·oﬁs_w‹kî
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

69 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

71 
g±cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_googÀ_≥r·oﬁs_c⁄f_t
));

72 i‡(
g±cf
 =
NULL
) {

73  
NULL
;

82  
g±cf
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

89 
u_ch¨
 *
¥ofûe
;

90 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

92 
g±cf
 = (
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *)

93 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_googÀ_≥r·oﬁs_moduÀ
);

95 i‡(
g±cf
->
¥ofûes
.
Àn
 == 0) {

96  
NGX_OK
;

99 
¥ofûe
 = 
	`ngx_Æloc
(
g±cf
->
¥ofûes
.
Àn
 + 
NGX_INT_T_LEN
 + 2, 
cy˛e
->
log
);

100 i‡(
¥ofûe
 =
NULL
) {

101  
NGX_OK
;

104 i‡(
	`gëív
("CPUPROFILE")) {

106 
	`ProfûîSt›
();

109 
	`ngx_•rötf
(
¥ofûe
, "%V.%d%Z", &
g±cf
->
¥ofûes
, 
ngx_pid
);

111 i‡(
	`ProfûîSèπ
(
¥ofûe
)) {

113 
	`ProfûîRegi°îThªad
();

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_î∫o
,

117 "ProfûîSèπ(%sËÁûed", 
¥ofûe
);

120 
	`ngx_‰ì
(
¥ofûe
);

122  
NGX_OK
;

123 
	}
}

	@src/os/unix/ngx_alloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gngx_∑gesize
;

13 
ngx_uöt_t
 
	gngx_∑gesize_shi·
;

14 
ngx_uöt_t
 
	gngx_ˇchñöe_size
;

18 
	$ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

20 *
p
;

22 
p
 = 
	`mÆloc
(
size
);

23 i‡(
p
 =
NULL
) {

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

25 "mÆloc(%uzËÁûed", 
size
);

28 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0, "mÆloc: %p:%uz", 
p
, 
size
);

30  
p
;

31 
	}
}

35 
	$ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

37 *
p
;

39 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

41 i‡(
p
) {

42 
	`ngx_memzîo
(
p
, 
size
);

45  
p
;

46 
	}
}

49 #i‡(
NGX_HAVE_POSIX_MEMALIGN
)

52 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

54 *
p
;

55 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
);

59 i‡(
îr
) {

60 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

61 "posix_memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

62 
p
 = 
NULL
;

65 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

66 "posix_memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

68  
p
;

69 
	}
}

71 #ñi‡(
NGX_HAVE_MEMALIGN
)

74 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

76 *
p
;

78 
p
 = 
	`memÆign
(
Æignmít
, 
size
);

79 i‡(
p
 =
NULL
) {

80 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

81 "memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

84 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

85 "memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

87  
p
;

88 
	}
}

	@src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

25 
AO_t
 
	tngx_©omic_uöt_t
;

26 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

28 #i‡(
NGX_PTR_SIZE
 == 8)

29 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

31 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

34 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

35 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

36 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

37 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

38 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

39 
	#ngx_˝u_∑u£
()

	)

42 #ñi‡(
NGX_DARWIN_ATOMIC
)

49 
	~<libkîn/OSAtomic.h
>

53 #unde‡
boﬁ


57 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

59 #i‡(
NGX_PTR_SIZE
 == 8)

61 
öt64_t
 
	tngx_©omic_öt_t
;

62 
uöt64_t
 
	tngx_©omic_uöt_t
;

63 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

65 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

66 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

68 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

69 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

73 
öt32_t
 
	tngx_©omic_öt_t
;

74 
uöt32_t
 
	tngx_©omic_uöt_t
;

75 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

77 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

78 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

80 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

81 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

85 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

87 
	#ngx_˝u_∑u£
()

	)

89 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

92 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

96 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

98 
	tngx_©omic_öt_t
;

99 
	tngx_©omic_uöt_t
;

101 #i‡(
NGX_PTR_SIZE
 == 8)

102 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

104 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

107 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

110 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

111 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

113 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

114 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

116 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

118 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

119 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

121 
	#ngx_˝u_∑u£
()

	)

125 #ñi‡–
__i386__
 || 
__i386
 )

127 
öt32_t
 
	tngx_©omic_öt_t
;

128 
uöt32_t
 
	tngx_©omic_uöt_t
;

129 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

130 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

133 #i‡–
__SUNPRO_C
 )

135 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

137 
ngx_©omic_uöt_t


138 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

139 
ngx_©omic_uöt_t
 
£t
);

141 
ngx_©omic_öt_t


142 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

150 
ngx_˝u_∑u£
();

154 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

159 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

161 
	~"ngx_gcc_©omic_x86.h
"

166 #ñi‡–
__amd64__
 || 
__amd64
 )

168 
öt64_t
 
	tngx_©omic_öt_t
;

169 
uöt64_t
 
	tngx_©omic_uöt_t
;

170 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

171 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

174 #i‡–
__SUNPRO_C
 )

176 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

178 
ngx_©omic_uöt_t


179 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

180 
ngx_©omic_uöt_t
 
£t
);

182 
ngx_©omic_öt_t


183 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

191 
ngx_˝u_∑u£
();

195 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

200 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

202 
	~"ngx_gcc_©omic_amd64.h
"

207 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

209 #i‡(
NGX_PTR_SIZE
 == 8)

211 
öt64_t
 
	tngx_©omic_öt_t
;

212 
uöt64_t
 
	tngx_©omic_uöt_t
;

213 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

217 
öt32_t
 
	tngx_©omic_öt_t
;

218 
uöt32_t
 
	tngx_©omic_uöt_t
;

219 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

223 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

226 #i‡–
__SUNPRO_C
 )

228 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

230 
	~"ngx_su≈ro_©omic_•¨c64.h
"

235 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

237 
	~"ngx_gcc_©omic_•¨c64.h
"

242 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

244 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

246 #i‡(
NGX_PTR_SIZE
 == 8)

248 
öt64_t
 
	tngx_©omic_öt_t
;

249 
uöt64_t
 
	tngx_©omic_uöt_t
;

250 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

254 
öt32_t
 
	tngx_©omic_öt_t
;

255 
uöt32_t
 
	tngx_©omic_uöt_t
;

256 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

260 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

263 
	~"ngx_gcc_©omic_µc.h
"

268 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

270 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

272 
öt32_t
 
	tngx_©omic_öt_t
;

273 
uöt32_t
 
	tngx_©omic_uöt_t
;

274 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

275 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

278 
ngx_ölöe
 
ngx_©omic_uöt_t


279 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

280 
ngx_©omic_uöt_t
 
£t
)

282 i‡(*
lock
 =
ﬁd
) {

283 *
lock
 = 
£t
;

288 
	}
}

291 
ngx_ölöe
 
ngx_©omic_öt_t


292 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

294 
ngx_©omic_öt_t
 
ﬁd
;

296 
ﬁd
 = *
vÆue
;

297 *
vÆue
 +
add
;

299  
ﬁd
;

300 
	}
}

302 
	#ngx_mem‹y_b¨rõr
()

	)

303 
	#ngx_˝u_∑u£
()

	)

308 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

310 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

311 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@src/os/unix/ngx_channel.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_ch™√l.h
>

13 
ngx_öt_t


14 
	$ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

15 
ngx_log_t
 *
log
)

17 
ssize_t
 
n
;

18 
ngx_îr_t
 
îr
;

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

22 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

25 
cmsghdr
 
cm
;

26 
•a˚
[
	`CMSG_SPACE
(())];

27 } 
cmsg
;

29 i‡(
ch
->
fd
 == -1) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

34 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

35 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

37 
	`ngx_memzîo
(&
cmsg
, (cmsg));

39 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(());

40 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

41 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

53 
	`ngx_mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), &
ch
->
fd
, ());

56 
msg
.
msg_Êags
 = 0;

60 i‡(
ch
->
fd
 == -1) {

61 
msg
.
msg_ac¸ights
 = 
NULL
;

62 
msg
.
msg_ac¸ight¶í
 = 0;

65 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
ch
->
fd
;

66 
msg
.
msg_ac¸ight¶í
 = ();

71 
iov
[0].
iov_ba£
 = (*Ë
ch
;

72 
iov
[0].
iov_Àn
 = 
size
;

74 
msg
.
msg_«me
 = 
NULL
;

75 
msg
.
msg_«mñí
 = 0;

76 
msg
.
msg_iov
 = 
iov
;

77 
msg
.
msg_iovÀn
 = 1;

79 
n
 = 
	`£ndmsg
(
s
, &
msg
, 0);

81 i‡(
n
 == -1) {

82 
îr
 = 
ngx_î∫o
;

83 i‡(
îr
 =
NGX_EAGAIN
) {

84  
NGX_AGAIN
;

87 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "sendmsg() failed");

88  
NGX_ERROR
;

91  
NGX_OK
;

92 
	}
}

95 
ngx_öt_t


96 
	$ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
, 
ngx_log_t
 *
log
)

98 
ssize_t
 
n
;

99 
ngx_îr_t
 
îr
;

100 
iovec
 
iov
[1];

101 
msghdr
 
msg
;

103 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

105 
cmsghdr
 
cm
;

106 
•a˚
[
	`CMSG_SPACE
(())];

107 } 
cmsg
;

109 
fd
;

112 
iov
[0].
iov_ba£
 = (*Ë
ch
;

113 
iov
[0].
iov_Àn
 = 
size
;

115 
msg
.
msg_«me
 = 
NULL
;

116 
msg
.
msg_«mñí
 = 0;

117 
msg
.
msg_iov
 = 
iov
;

118 
msg
.
msg_iovÀn
 = 1;

120 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

121 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

122 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

124 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
fd
;

125 
msg
.
msg_ac¸ight¶í
 = ();

128 
n
 = 
	`ªcvmsg
(
s
, &
msg
, 0);

130 i‡(
n
 == -1) {

131 
îr
 = 
ngx_î∫o
;

132 i‡(
îr
 =
NGX_EAGAIN
) {

133  
NGX_AGAIN
;

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "recvmsg() failed");

137  
NGX_ERROR
;

140 i‡(
n
 == 0) {

141 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "recvmsg()Ñeturned zero");

142  
NGX_ERROR
;

145 i‡((
size_t
Ë
n
 < (
ngx_ch™√l_t
)) {

146 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

147 "ªcvmsg(Ëªtu∫edÇŸÉnough d©a: %z", 
n
);

148  
NGX_ERROR
;

151 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

153 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

155 i‡(
cmsg
.
cm
.
cmsg_Àn
 < (
sockÀn_t
Ë
	`CMSG_LEN
(())) {

156 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

158  
NGX_ERROR
;

161 i‡(
cmsg
.
cm
.
cmsg_Àvñ
 !
SOL_SOCKET
 || cmsg.cm.
cmsg_ty≥
 !
SCM_RIGHTS
)

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

166 
cmsg
.
cm
.
cmsg_Àvñ
, cmsg.cm.
cmsg_ty≥
);

167  
NGX_ERROR
;

172 
	`ngx_mem˝y
(&
ch
->
fd
, 
	`CMSG_DATA
(&
cmsg
.
cm
), ());

175 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

182 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

183 i‡(
msg
.
msg_ac¸ight¶í
 != ()) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

186  
NGX_ERROR
;

189 
ch
->
fd
 = fd;

194  
n
;

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
, 
ngx_öt_t
 
evít
,

200 
ngx_evít_h™dÀr_±
 
h™dÀr
)

202 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

203 
ngx_c⁄√˘i⁄_t
 *
c
;

205 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
fd
, 
cy˛e
->
log
);

207 i‡(
c
 =
NULL
) {

208  
NGX_ERROR
;

211 
c
->
poﬁ
 = 
cy˛e
->pool;

213 
ªv
 = 
c
->
ªad
;

214 
wev
 = 
c
->
wrôe
;

216 
ªv
->
log
 = 
cy˛e
->log;

217 
wev
->
log
 = 
cy˛e
->log;

219 
ªv
->
ch™√l
 = 1;

220 
wev
->
ch™√l
 = 1;

222 
ev
 = (
evít
 =
NGX_READ_EVENT
Ë? 
ªv
 : 
wev
;

224 
ev
->
h™dÀr
 = handler;

226 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

227 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

228 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

229  
NGX_ERROR
;

233 i‡(
	`ngx_add_evít
(
ev
, 
evít
, 0Ë=
NGX_ERROR
) {

234 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

235  
NGX_ERROR
;

239  
NGX_OK
;

240 
	}
}

244 
	$ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
)

246 i‡(
	`˛o£
(
fd
[0]) == -1) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

250 i‡(
	`˛o£
(
fd
[1]) == -1) {

251 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

253 
	}
}

	@src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@src/os/unix/ngx_daemon.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_d´m⁄
(
ngx_log_t
 *
log
)

15 
fd
;

17 
	`f‹k
()) {

19 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "fork() failed");

20  
NGX_ERROR
;

26 
	`exô
(0);

29 
ngx_∑ª¡
 = 
ngx_pid
;

30 
ngx_pid
 = 
	`ngx_gëpid
();

32 i‡(
	`£tsid
() == -1) {

33 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "setsid() failed");

34  
NGX_ERROR
;

37 
	`umask
(0);

39 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

40 i‡(
fd
 == -1) {

41 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

43  
NGX_ERROR
;

46 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) == -1) {

47 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDIN) failed");

48  
NGX_ERROR
;

51 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) == -1) {

52 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDOUT) failed");

53  
NGX_ERROR
;

57 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) == -1) {

58 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDERR) failed");

59  
NGX_ERROR
;

63 i‡(
fd
 > 
STDERR_FILENO
) {

64 i‡(
	`˛o£
(
fd
) == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "close() failed");

66  
NGX_ERROR
;

70  
NGX_OK
;

71 
	}
}

	@src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_d¨wö_kîn_o§ñd©e
;

17 
ngx_d¨wö_hw_n˝u
;

18 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	#__APPLE_USE_RFC_3542


	)

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

17 
	~<uni°d.h
>

18 
	~<öây≥s.h
>

19 
	~<°d¨g.h
>

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<˘y≥.h
>

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<pwd.h
>

28 
	~<gΩ.h
>

29 
	~<dúít.h
>

30 
	~<glob.h
>

31 
	~<sys/mou¡.h
>

33 
	~<sys/fûio.h
>

34 
	~<sys/io˘l.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<sys/sys˘l.h
>

52 
	~<xloˇÀ.h
>

54 
	~<dlf˙.h
>

57 #i‚de‡
IOV_MAX


58 
	#IOV_MAX
 64

	)

62 
	~<ngx_auto_c⁄fig.h
>

65 #i‡(
NGX_HAVE_POSIX_SEM
)

66 
	~<£m≠h‹e.h
>

70 #i‡(
NGX_HAVE_POLL
)

71 
	~<pﬁl.h
>

75 #i‡(
NGX_HAVE_KQUEUE
)

76 
	~<sys/evít.h
>

80 
	#NGX_LISTEN_BACKLOG
 -1

	)

83 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


84 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

88 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


89 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

93 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

94 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

97 **
ívú⁄
;

	@src/os/unix/ngx_darwin_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_d¨wö_kîn_o°y≥
[16];

13 
	gngx_d¨wö_kîn_o§ñó£
[128];

14 
	gngx_d¨wö_hw_n˝u
;

15 
	gngx_d¨wö_kîn_ùc_somaxc⁄n
;

16 
u_l⁄g
 
	gngx_d¨wö_√t_öë_t˝_£nd•a˚
;

18 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

21 
ngx_os_io_t
 
	gngx_d¨wö_io
 = {

22 
ngx_unix_ªcv
,

23 
ngx_ªadv_chaö
,

24 
ngx_udp_unix_ªcv
,

25 
ngx_unix_£nd
,

26 
ngx_udp_unix_£nd
,

27 
ngx_udp_unix_£ndmsg_chaö
,

28 #i‡(
NGX_HAVE_SENDFILE
)

29 
ngx_d¨wö_£ndfûe_chaö
,

30 
NGX_IO_SENDFILE


32 
ngx_wrôev_chaö
,

39 *
	m«me
;

40 *
	mvÆue
;

41 
size_t
 
	msize
;

42 
ngx_uöt_t
 
	mexi°s
;

43 } 
	tsys˘l_t
;

46 
sys˘l_t
 
	gsys˘ls
[] = {

48 &
ngx_d¨wö_hw_n˝u
,

49 (
ngx_d¨wö_hw_n˝u
), 0 },

52 &
ngx_d¨wö_√t_öë_t˝_£nd•a˚
,

53 (
ngx_d¨wö_√t_öë_t˝_£nd•a˚
), 0 },

56 &
ngx_d¨wö_kîn_ùc_somaxc⁄n
,

57 (
ngx_d¨wö_kîn_ùc_somaxc⁄n
), 0 },

59 { 
NULL
, NULL, 0, 0 }

64 
	$ngx_debug_öô
()

66 #i‡(
NGX_DEBUG_MALLOC
)

77 
	`£ãnv
("MallocScribble", "1", 0);

79 
ngx_debug_mÆloc
 = 1;

83 i‡(
	`gëív
("MallocScribble")) {

84 
ngx_debug_mÆloc
 = 1;

88 
	}
}

91 
ngx_öt_t


92 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

94 
size_t
 
size
;

95 
ngx_îr_t
 
îr
;

96 
ngx_uöt_t
 
i
;

98 
size
 = (
ngx_d¨wö_kîn_o°y≥
);

99 i‡(
	`sys˘lby«me
("kîn.o°y≥", 
ngx_d¨wö_kîn_o°y≥
, &
size
, 
NULL
, 0)

102 
îr
 = 
ngx_î∫o
;

104 i‡(
îr
 !
NGX_ENOENT
) {

106 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

109 i‡(
îr
 !
NGX_ENOMEM
) {

110  
NGX_ERROR
;

113 
ngx_d¨wö_kîn_o°y≥
[
size
 - 1] = '\0';

117 
size
 = (
ngx_d¨wö_kîn_o§ñó£
);

118 i‡(
	`sys˘lby«me
("kîn.o§ñó£", 
ngx_d¨wö_kîn_o§ñó£
, &
size
,

119 
NULL
, 0)

122 
îr
 = 
ngx_î∫o
;

124 i‡(
îr
 !
NGX_ENOENT
) {

126 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

129 i‡(
îr
 !
NGX_ENOMEM
) {

130  
NGX_ERROR
;

133 
ngx_d¨wö_kîn_o§ñó£
[
size
 - 1] = '\0';

137 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

138 
size
 = 
sys˘ls
[
i
].size;

140 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

143 
sys˘ls
[
i
].
exi°s
 = 1;

147 
îr
 = 
ngx_î∫o
;

149 i‡(
îr
 =
NGX_ENOENT
) {

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

154 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

155  
NGX_ERROR
;

158 
ngx_n˝u
 = 
ngx_d¨wö_hw_n˝u
;

160 i‡(
ngx_d¨wö_kîn_ùc_somaxc⁄n
 > 32767) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

163  
NGX_ERROR
;

166 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

168 
ngx_os_io
 = 
ngx_d¨wö_io
;

170  
NGX_OK
;

171 
	}
}

175 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

177 
u_l⁄g
 
vÆue
;

178 
ngx_uöt_t
 
i
;

180 i‡(
ngx_d¨wö_kîn_o°y≥
[0]) {

181 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

182 
ngx_d¨wö_kîn_o°y≥
, 
ngx_d¨wö_kîn_o§ñó£
);

185 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

186 i‡(
sys˘ls
[
i
].
exi°s
) {

187 i‡(
sys˘ls
[
i
].
size
 == ()) {

188 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

191 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

194 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

195 
sys˘ls
[
i
].
«me
, 
vÆue
);

198 
	}
}

	@src/os/unix/ngx_darwin_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

30 
ngx_chaö_t
 *

31 
	$ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

33 
rc
;

34 
off_t
 
£nd
, 
¥ev_£nd
, 
£¡
;

35 
off_t
 
fûe_size
;

36 
ssize_t
 
n
;

37 
ngx_uöt_t
 
eöå
;

38 
ngx_îr_t
 
îr
;

39 
ngx_buf_t
 *
fûe
;

40 
ngx_evít_t
 *
wev
;

41 
ngx_chaö_t
 *
˛
;

42 
ngx_iovec_t
 
hódî
, 
åaûî
;

43 
sf_hdå
 
hdå
;

44 
iovec
 
hódîs
[
NGX_IOVS_PREALLOCATE
];

45 
iovec
 
åaûîs
[
NGX_IOVS_PREALLOCATE
];

47 
wev
 = 
c
->
wrôe
;

49 i‡(!
wev
->
ªady
) {

50  
ö
;

53 #i‡(
NGX_HAVE_KQUEUE
)

55 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

56 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

58 
wev
->
îr‹
 = 1;

59  
NGX_CHAIN_ERROR
;

66 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

67 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

70 
£nd
 = 0;

72 
hódî
.
iovs
 = 
hódîs
;

73 
hódî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

75 
åaûî
.
iovs
 = 
åaûîs
;

76 
åaûî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

79 
eöå
 = 0;

80 
¥ev_£nd
 = 
£nd
;

84 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
hódî
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

86 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

87  
NGX_CHAIN_ERROR
;

90 
£nd
 +
hódî
.
size
;

92 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

93 
fûe
 = 
˛
->
buf
;

97 
fûe_size
 = 
	`ngx_chaö_cﬂÀs˚_fûe
(&
˛
, 
limô
 - 
£nd
);

99 
£nd
 +
fûe_size
;

101 i‡(
hódî
.
cou¡
 =0 && 
£nd
 < 
limô
) {

107 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
åaûî
, cl, 
limô
 - 
£nd
,

108 
c
->
log
);

109 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

110  
NGX_CHAIN_ERROR
;

113 
£nd
 +
åaûî
.
size
;

116 
åaûî
.
cou¡
 = 0;

124 
hdå
.
hódîs
 = 
hódî
.
cou¡
 ? hódî.
iovs
 : 
NULL
;

125 
hdå
.
hdr_˙t
 = 
hódî
.
cou¡
;

126 
hdå
.
åaûîs
 = 
åaûî
.
cou¡
 ?Åøûî.
iovs
 : 
NULL
;

127 
hdå
.
ål_˙t
 = 
åaûî
.
cou¡
;

129 
£¡
 = 
hódî
.
size
 + 
fûe_size
;

131 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

133 
fûe
->
fûe_pos
, 
£¡
, 
hódî
.
size
);

135 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

136 &
£¡
, &
hdå
, 0);

138 i‡(
rc
 == -1) {

139 
îr
 = 
ngx_î∫o
;

141 
îr
) {

142 
NGX_EAGAIN
:

145 
NGX_EINTR
:

146 
eöå
 = 1;

150 
wev
->
îr‹
 = 1;

151 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

152  
NGX_CHAIN_ERROR
;

155 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

156 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

159 i‡(
rc
 =0 && 
£¡
 == 0) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

169 
fûe
->fûe->
«me
.
d©a
);

171  
NGX_CHAIN_ERROR
;

174 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

176 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî
.
size
);

179 
n
 = 
	`ngx_wrôev
(
c
, &
hódî
);

181 i‡(
n
 =
NGX_ERROR
) {

182  
NGX_CHAIN_ERROR
;

185 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

188 
c
->
£¡
 += sent;

190 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

192 i‡(
eöå
) {

193 
£nd
 = 
¥ev_£nd
 + 
£¡
;

197 i‡(
£nd
 - 
¥ev_£nd
 !
£¡
) {

198 
wev
->
ªady
 = 0;

199  
ö
;

202 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

203  
ö
;

206 
	}
}

	@src/os/unix/ngx_dlopen.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_DLOPEN
)

15 
	$ngx_dÀº‹
()

17 *
îr
;

19 
îr
 = (*Ë
	`dÀº‹
();

21 i‡(
îr
 =
NULL
) {

25  
îr
;

26 
	}
}

	@src/os/unix/ngx_dlopen.h

8 #i‚de‡
_NGX_DLOPEN_H_INCLUDED_


9 
	#_NGX_DLOPEN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#ngx_dl›í
(
∑th
Ë
	`dl›í
((*Ë∑th, 
RTLD_NOW
 | 
RTLD_GLOBAL
)

	)

17 
	#ngx_dl›í_n
 "dl›í()"

	)

19 
	#ngx_dlsym
(
h™dÀ
, 
symbﬁ
Ë
	`dlsym
(h™dÀ, symbﬁ)

	)

20 
	#ngx_dlsym_n
 "dlsym()"

	)

22 
	#ngx_dl˛o£
(
h™dÀ
Ë
	`dl˛o£
(h™dÀ)

	)

23 
	#ngx_dl˛o£_n
 "dl˛o£()"

	)

26 #i‡(
NGX_HAVE_DLOPEN
)

27 *
ngx_dÀº‹
();

	@src/os/unix/ngx_errno.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

28 
ngx_°r_t
 *
	gngx_sys_îæi°
;

29 
ngx_°r_t
 
	gngx_unknown_îr‹
 = 
ngx_°rög
("UnknownÉrror");

32 
u_ch¨
 *

33 
	$ngx_°ªº‹
(
ngx_îr_t
 
îr
, 
u_ch¨
 *
îr°r
, 
size_t
 
size
)

35 
ngx_°r_t
 *
msg
;

37 
msg
 = ((
ngx_uöt_t
Ë
îr
 < 
NGX_SYS_NERR
Ë? &
ngx_sys_îæi°
[err]:

38 &
ngx_unknown_îr‹
;

39 
size
 = 
	`ngx_mö
(size, 
msg
->
Àn
);

41  
	`ngx_˝ymem
(
îr°r
, 
msg
->
d©a
, 
size
);

42 
	}
}

45 
ngx_öt_t


46 
	$ngx_°ªº‹_öô
()

48 *
msg
;

49 
u_ch¨
 *
p
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

58 
Àn
 = 
NGX_SYS_NERR
 * (
ngx_°r_t
);

60 
ngx_sys_îæi°
 = 
	`mÆloc
(
Àn
);

61 i‡(
ngx_sys_îæi°
 =
NULL
) {

62 
Áûed
;

65 
îr
 = 0;Éº < 
NGX_SYS_NERR
;Érr++) {

66 
msg
 = 
	`°ªº‹
(
îr
);

67 
Àn
 = 
	`ngx_°æí
(
msg
);

69 
p
 = 
	`mÆloc
(
Àn
);

70 i‡(
p
 =
NULL
) {

71 
Áûed
;

74 
	`ngx_mem˝y
(
p
, 
msg
, 
Àn
);

75 
ngx_sys_îæi°
[
îr
].
Àn
 =Üen;

76 
ngx_sys_îæi°
[
îr
].
d©a
 = 
p
;

79  
NGX_OK
;

81 
Áûed
:

83 
îr
 = 
î∫o
;

84 
	`ngx_log_°dîr
(0, "mÆloc(%uzËÁûed (%d: %s)", 
Àn
, 
îr
, 
	`°ªº‹
(err));

86  
NGX_ERROR
;

87 
	}
}

	@src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EEXIST_FILE
 
EEXIST


	)

29 
	#NGX_EXDEV
 
EXDEV


	)

30 
	#NGX_ENOTDIR
 
ENOTDIR


	)

31 
	#NGX_EISDIR
 
EISDIR


	)

32 
	#NGX_EINVAL
 
EINVAL


	)

33 
	#NGX_ENFILE
 
ENFILE


	)

34 
	#NGX_EMFILE
 
EMFILE


	)

35 
	#NGX_ENOSPC
 
ENOSPC


	)

36 
	#NGX_EPIPE
 
EPIPE


	)

37 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

38 
	#NGX_ENOPROTOOPT
 
ENOPROTOOPT


	)

39 
	#NGX_EOPNOTSUPP
 
EOPNOTSUPP


	)

40 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

41 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

42 
	#NGX_ECONNRESET
 
ECONNRESET


	)

43 
	#NGX_ENOTCONN
 
ENOTCONN


	)

44 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

45 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

46 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

47 
	#NGX_ENETDOWN
 
ENETDOWN


	)

48 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

49 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

50 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

51 
	#NGX_ENOSYS
 
ENOSYS


	)

52 
	#NGX_ECANCELED
 
ECANCELED


	)

53 
	#NGX_EILSEQ
 
EILSEQ


	)

54 
	#NGX_ENOMOREFILES
 0

	)

55 
	#NGX_ELOOP
 
ELOOP


	)

56 
	#NGX_EBADF
 
EBADF


	)

58 #i‡(
NGX_HAVE_OPENAT
)

59 
	#NGX_EMLINK
 
EMLINK


	)

62 #i‡(
__hpux__
)

63 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

65 
	#NGX_EAGAIN
 
EAGAIN


	)

69 
	#ngx_î∫o
 
î∫o


	)

70 
	#ngx_sockë_î∫o
 
î∫o


	)

71 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
îr

72 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
îr

75 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

76 
ngx_öt_t
 
ngx_°ªº‹_öô
();

	@src/os/unix/ngx_file_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

31 
ngx_kqueue
;

34 
ssize_t
 
ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
,

35 
ngx_evít_t
 *
ev
);

36 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

39 
ngx_öt_t


40 
	$ngx_fûe_aio_öô
(
ngx_fûe_t
 *
fûe
, 
ngx_poﬁ_t
 *
poﬁ
)

42 
ngx_evít_aio_t
 *
aio
;

44 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

45 i‡(
aio
 =
NULL
) {

46  
NGX_ERROR
;

49 
aio
->
fûe
 = file;

50 
aio
->
fd
 = 
fûe
->fd;

51 
aio
->
evít
.
d©a
 =áio;

52 
aio
->
evít
.
ªady
 = 1;

53 
aio
->
evít
.
log
 = 
fûe
->log;

55 
fûe
->
aio
 =áio;

57  
NGX_OK
;

58 
	}
}

61 
ssize_t


62 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

63 
ngx_poﬁ_t
 *
poﬁ
)

65 
n
;

66 
ngx_evít_t
 *
ev
;

67 
ngx_evít_aio_t
 *
aio
;

69 i‡(!
ngx_fûe_aio
) {

70  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

73 i‡(
fûe
->
aio
 =
NULL
 && 
	`ngx_fûe_aio_öô
(fûe, 
poﬁ
Ë!
NGX_OK
) {

74  
NGX_ERROR
;

77 
aio
 = 
fûe
->aio;

78 
ev
 = &
aio
->
evít
;

80 i‡(!
ev
->
ªady
) {

81 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

82 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

83  
NGX_AGAIN
;

86 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

88 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

90 i‡(
ev
->
com∂ëe
) {

91 
ev
->
com∂ëe
 = 0;

92 
	`ngx_£t_î∫o
(
aio
->
îr
);

94 i‡(
aio
->
îr
 == 0) {

95  
aio
->
nbyãs
;

98 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

99 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

101  
NGX_ERROR
;

104 
	`ngx_memzîo
(&
aio
->
aiocb
, (aiocb));

106 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

107 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

108 
aio
->
aiocb
.
aio_buf
 = 
buf
;

109 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

110 #i‡(
NGX_HAVE_KQUEUE
)

111 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

112 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

113 
aio
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = 
ev
;

115 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

117 
n
 = 
	`aio_ªad
(&
aio
->
aiocb
);

119 i‡(
n
 == -1) {

120 
n
 = 
ngx_î∫o
;

122 i‡(
n
 =
NGX_EAGAIN
) {

123  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

126 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
n
,

127 "aio_ªad(\"%V\"ËÁûed", &
fûe
->
«me
);

129 i‡(
n
 =
NGX_ENOSYS
) {

130 
ngx_fûe_aio
 = 0;

131  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

134  
NGX_ERROR
;

137 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

138 "aio_ªad: fd:%d %d", 
fûe
->
fd
, 
n
);

140 
ev
->
a˘ive
 = 1;

141 
ev
->
ªady
 = 0;

142 
ev
->
com∂ëe
 = 0;

144  
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
);

145 
	}
}

148 
ssize_t


149 
	$ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
, 
ngx_evít_t
 *
ev
)

151 
n
;

152 
ngx_îr_t
 
îr
;

154 
n
 = 
	`aio_îr‹
(&
aio
->
aiocb
);

156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

157 "aio_îr‹: fd:%d %d", 
fûe
->
fd
, 
n
);

159 i‡(
n
 == -1) {

160 
îr
 = 
ngx_î∫o
;

161 
aio
->
îr
 =Érr;

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
îr
,

164 "aio_îr‹(\"%V\"ËÁûed", &
fûe
->
«me
);

165  
NGX_ERROR
;

168 i‡(
n
 =
NGX_EINPROGRESS
) {

169 i‡(
ev
->
ªady
) {

170 
ev
->
ªady
 = 0;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
n
,

173 &
fûe
->
«me
);

176  
NGX_AGAIN
;

179 
n
 = 
	`aio_ªtu∫
(&
aio
->
aiocb
);

181 i‡(
n
 == -1) {

182 
îr
 = 
ngx_î∫o
;

183 
aio
->
îr
 =Érr;

184 
ev
->
ªady
 = 1;

186 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

187 "aio_ªtu∫(\"%V\"ËÁûed", &
fûe
->
«me
);

188  
NGX_ERROR
;

191 
aio
->
îr
 = 0;

192 
aio
->
nbyãs
 = 
n
;

193 
ev
->
ªady
 = 1;

194 
ev
->
a˘ive
 = 0;

196 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

197 "aio_ªtu∫: fd:%d %d", 
fûe
->
fd
, 
n
);

199  
n
;

200 
	}
}

204 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

206 
ngx_evít_aio_t
 *
aio
;

208 
aio
 = 
ev
->
d©a
;

210 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

211 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

213 i‡(
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
Ë!
NGX_AGAIN
) {

214 
aio
->
	`h™dÀr
(
ev
);

216 
	}
}

	@src/os/unix/ngx_files.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_THREADS
)

13 
	~<ngx_thªad_poﬁ.h
>

14 
ngx_thªad_ªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

15 
ngx_thªad_wrôe_chaö_to_fûe_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

18 
ngx_chaö_t
 *
ngx_chaö_to_iovec
(
ngx_iovec_t
 *
vec
,Çgx_chaö_à*
˛
);

19 
ssize_t
 
ngx_wrôev_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_iovec_t
 *
vec
,

20 
off_t
 
off£t
);

23 #i‡(
NGX_HAVE_FILE_AIO
)

25 
ngx_uöt_t
 
	gngx_fûe_aio
 = 1;

30 
ssize_t


31 
	$ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

33 
ssize_t
 
n
;

35 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

36 "ªad: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

38 #i‡(
NGX_HAVE_PREAD
)

40 
n
 = 
	`¥ód
(
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

42 i‡(
n
 == -1) {

43 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

44 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

45  
NGX_ERROR
;

50 i‡(
fûe
->
sys_off£t
 !
off£t
) {

51 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

52 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

53 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

54  
NGX_ERROR
;

57 
fûe
->
sys_off£t
 = 
off£t
;

60 
n
 = 
	`ªad
(
fûe
->
fd
, 
buf
, 
size
);

62 i‡(
n
 == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

64 "ªad(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

65  
NGX_ERROR
;

68 
fûe
->
sys_off£t
 +
n
;

72 
fûe
->
off£t
 +
n
;

74  
n
;

75 
	}
}

78 #i‡(
NGX_THREADS
)

81 
ngx_fd_t
 
	mfd
;

82 
ngx_uöt_t
 
	mwrôe
;

84 
u_ch¨
 *
	mbuf
;

85 
size_t
 
	msize
;

86 
ngx_chaö_t
 *
	mchaö
;

87 
off_t
 
	moff£t
;

89 
size_t
 
	mnbyãs
;

90 
ngx_îr_t
 
	mîr
;

91 } 
	tngx_thªad_fûe_˘x_t
;

94 
ssize_t


95 
	$ngx_thªad_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

96 
ngx_poﬁ_t
 *
poﬁ
)

98 
ngx_thªad_èsk_t
 *
èsk
;

99 
ngx_thªad_fûe_˘x_t
 *
˘x
;

101 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

103 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

105 
èsk
 = 
fûe
->
thªad_èsk
;

107 i‡(
èsk
 =
NULL
) {

108 
èsk
 = 
	`ngx_thªad_èsk_Æloc
(
poﬁ
, (
ngx_thªad_fûe_˘x_t
));

109 i‡(
èsk
 =
NULL
) {

110  
NGX_ERROR
;

113 
fûe
->
thªad_èsk
 = 
èsk
;

116 
˘x
 = 
èsk
->ctx;

118 i‡(
èsk
->
evít
.
com∂ëe
) {

119 
èsk
->
evít
.
com∂ëe
 = 0;

121 i‡(
˘x
->
wrôe
) {

122 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

124  
NGX_ERROR
;

127 i‡(
˘x
->
îr
) {

128 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
˘x
->
îr
,

129 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

130  
NGX_ERROR
;

133  
˘x
->
nbyãs
;

136 
èsk
->
h™dÀr
 = 
ngx_thªad_ªad_h™dÀr
;

138 
˘x
->
wrôe
 = 0;

140 
˘x
->
fd
 = 
fûe
->fd;

141 
˘x
->
buf
 = buf;

142 
˘x
->
size
 = size;

143 
˘x
->
off£t
 = offset;

145 i‡(
fûe
->
	`thªad_h™dÀr
(
èsk
, fûeË!
NGX_OK
) {

146  
NGX_ERROR
;

149  
NGX_AGAIN
;

150 
	}
}

153 #i‡(
NGX_HAVE_PREAD
)

156 
	$ngx_thªad_ªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

158 
ngx_thªad_fûe_˘x_t
 *
˘x
 = 
d©a
;

160 
ssize_t
 
n
;

162 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "threadÑead handler");

164 
n
 = 
	`¥ód
(
˘x
->
fd
, ctx->
buf
, ctx->
size
, ctx->
off£t
);

166 i‡(
n
 == -1) {

167 
˘x
->
îr
 = 
ngx_î∫o
;

170 
˘x
->
nbyãs
 = 
n
;

171 
˘x
->
îr
 = 0;

175 
	`ngx_time_upd©e
();

178 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

180 
n
, 
˘x
->
îr
, ctx->
size
, ctx->
off£t
);

181 
	}
}

185 #îr‹ 
¥ód
(Ë
is
 
ªquúed
!

192 
ssize_t


193 
	$ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

195 
ssize_t
 
n
, 
wrôãn
;

196 
ngx_îr_t
 
îr
;

198 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

199 "wrôe: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

201 
wrôãn
 = 0;

203 #i‡(
NGX_HAVE_PWRITE
)

206 
n
 = 
	`pwrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
, 
off£t
);

208 i‡(
n
 == -1) {

209 
îr
 = 
ngx_î∫o
;

211 i‡(
îr
 =
NGX_EINTR
) {

212 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 
îr
,

217 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

218 "pwrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

219  
NGX_ERROR
;

222 
fûe
->
off£t
 +
n
;

223 
wrôãn
 +
n
;

225 i‡((
size_t
Ë
n
 =
size
) {

226  
wrôãn
;

229 
off£t
 +
n
;

230 
size
 -
n
;

235 i‡(
fûe
->
sys_off£t
 !
off£t
) {

236 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

237 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

238 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

239  
NGX_ERROR
;

242 
fûe
->
sys_off£t
 = 
off£t
;

246 
n
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
);

248 i‡(
n
 == -1) {

249 
îr
 = 
ngx_î∫o
;

251 i‡(
îr
 =
NGX_EINTR
) {

252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 
îr
,

257 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

258 "wrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

259  
NGX_ERROR
;

262 
fûe
->
sys_off£t
 +
n
;

263 
fûe
->
off£t
 +
n
;

264 
wrôãn
 +
n
;

266 i‡((
size_t
Ë
n
 =
size
) {

267  
wrôãn
;

270 
size
 -
n
;

273 
	}
}

276 
ngx_fd_t


277 
	$ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
ac˚ss
)

279 
ngx_fd_t
 
fd
;

281 
fd
 = 
	`›í
((c⁄° *Ë
«me
, 
O_CREAT
|
O_EXCL
|
O_RDWR
,

282 
ac˚ss
 ?áccess : 0600);

284 i‡(
fd
 !-1 && !
≥rsi°ít
) {

285 (Ë
	`u∆ök
((c⁄° *Ë
«me
);

288  
fd
;

289 
	}
}

292 
ssize_t


293 
	$ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

294 
ngx_poﬁ_t
 *
poﬁ
)

296 
ssize_t
 
tŸÆ
, 
n
;

297 
ngx_iovec_t
 
vec
;

298 
iovec
 
iovs
[
NGX_IOVS_PREALLOCATE
];

302 i‡(
˛
->
√xt
 =
NULL
) {

303  
	`ngx_wrôe_fûe
(
fûe
, 
˛
->
buf
->
pos
,

304 (
size_t
Ë(
˛
->
buf
->
œ°
 - cl->buf->
pos
),

305 
off£t
);

308 
tŸÆ
 = 0;

310 
vec
.
iovs
 = iovs;

311 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

315 
˛
 = 
	`ngx_chaö_to_iovec
(&
vec
, cl);

319 i‡(
vec
.
cou¡
 == 1) {

320 
n
 = 
	`ngx_wrôe_fûe
(
fûe
, (
u_ch¨
 *Ë
iovs
[0].
iov_ba£
,

321 
iovs
[0].
iov_Àn
, 
off£t
);

323 i‡(
n
 =
NGX_ERROR
) {

324  
n
;

327  
tŸÆ
 + 
n
;

330 
n
 = 
	`ngx_wrôev_fûe
(
fûe
, &
vec
, 
off£t
);

332 i‡(
n
 =
NGX_ERROR
) {

333  
n
;

336 
off£t
 +
n
;

337 
tŸÆ
 +
n
;

339 } 
˛
);

341  
tŸÆ
;

342 
	}
}

345 
ngx_chaö_t
 *

346 
	$ngx_chaö_to_iovec
(
ngx_iovec_t
 *
vec
, 
ngx_chaö_t
 *
˛
)

348 
size_t
 
tŸÆ
, 
size
;

349 
u_ch¨
 *
¥ev
;

350 
ngx_uöt_t
 
n
;

351 
iovec
 *
iov
;

353 
iov
 = 
NULL
;

354 
¥ev
 = 
NULL
;

355 
tŸÆ
 = 0;

356 
n
 = 0;

358  ; 
˛
; c»˛->
√xt
) {

360 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

364 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

366 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

367 
iov
->
iov_Àn
 +
size
;

370 i‡(
n
 =
vec
->
«Œoc
) {

374 
iov
 = &
vec
->
iovs
[
n
++];

376 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

377 
iov
->
iov_Àn
 = 
size
;

380 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

381 
tŸÆ
 +
size
;

384 
vec
->
cou¡
 = 
n
;

385 
vec
->
size
 = 
tŸÆ
;

387  
˛
;

388 
	}
}

391 
ssize_t


392 
	$ngx_wrôev_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_iovec_t
 *
vec
, 
off_t
 
off£t
)

394 
ssize_t
 
n
;

395 
ngx_îr_t
 
îr
;

397 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

398 "wrôev: %d, %uz, %O", 
fûe
->
fd
, 
vec
->
size
, 
off£t
);

400 #i‡(
NGX_HAVE_PWRITEV
)

402 
eöå
:

404 
n
 = 
	`pwrôev
(
fûe
->
fd
, 
vec
->
iovs
, vec->
cou¡
, 
off£t
);

406 i‡(
n
 == -1) {

407 
îr
 = 
ngx_î∫o
;

409 i‡(
îr
 =
NGX_EINTR
) {

410 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 
îr
,

412 
eöå
;

415 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

416 "pwrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

417  
NGX_ERROR
;

420 i‡((
size_t
Ë
n
 !
vec
->
size
) {

421 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

423 
fûe
->
«me
.
d©a
, 
n
, 
vec
->
size
);

424  
NGX_ERROR
;

429 i‡(
fûe
->
sys_off£t
 !
off£t
) {

430 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

431 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

432 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

433  
NGX_ERROR
;

436 
fûe
->
sys_off£t
 = 
off£t
;

439 
eöå
:

441 
n
 = 
	`wrôev
(
fûe
->
fd
, 
vec
->
iovs
, vec->
cou¡
);

443 i‡(
n
 == -1) {

444 
îr
 = 
ngx_î∫o
;

446 i‡(
îr
 =
NGX_EINTR
) {

447 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 
îr
,

449 
eöå
;

452 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

453 "wrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

454  
NGX_ERROR
;

457 i‡((
size_t
Ë
n
 !
vec
->
size
) {

458 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

460 
fûe
->
«me
.
d©a
, 
n
, 
vec
->
size
);

461  
NGX_ERROR
;

464 
fûe
->
sys_off£t
 +
n
;

468 
fûe
->
off£t
 +
n
;

470  
n
;

471 
	}
}

474 #i‡(
NGX_THREADS
)

476 
ssize_t


477 
	$ngx_thªad_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

478 
ngx_poﬁ_t
 *
poﬁ
)

480 
ngx_thªad_èsk_t
 *
èsk
;

481 
ngx_thªad_fûe_˘x_t
 *
˘x
;

483 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

485 
fûe
->
fd
, 
˛
, 
off£t
);

487 
èsk
 = 
fûe
->
thªad_èsk
;

489 i‡(
èsk
 =
NULL
) {

490 
èsk
 = 
	`ngx_thªad_èsk_Æloc
(
poﬁ
,

491 (
ngx_thªad_fûe_˘x_t
));

492 i‡(
èsk
 =
NULL
) {

493  
NGX_ERROR
;

496 
fûe
->
thªad_èsk
 = 
èsk
;

499 
˘x
 = 
èsk
->ctx;

501 i‡(
èsk
->
evít
.
com∂ëe
) {

502 
èsk
->
evít
.
com∂ëe
 = 0;

504 i‡(!
˘x
->
wrôe
) {

505 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

507  
NGX_ERROR
;

510 i‡(
˘x
->
îr
 || ctx->
nbyãs
 == 0) {

511 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
˘x
->
îr
,

512 "pwrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

513  
NGX_ERROR
;

516 
fûe
->
off£t
 +
˘x
->
nbyãs
;

517  
˘x
->
nbyãs
;

520 
èsk
->
h™dÀr
 = 
ngx_thªad_wrôe_chaö_to_fûe_h™dÀr
;

522 
˘x
->
wrôe
 = 1;

524 
˘x
->
fd
 = 
fûe
->fd;

525 
˘x
->
chaö
 = 
˛
;

526 
˘x
->
off£t
 = offset;

528 i‡(
fûe
->
	`thªad_h™dÀr
(
èsk
, fûeË!
NGX_OK
) {

529  
NGX_ERROR
;

532  
NGX_AGAIN
;

533 
	}
}

537 
	$ngx_thªad_wrôe_chaö_to_fûe_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

539 
ngx_thªad_fûe_˘x_t
 *
˘x
 = 
d©a
;

541 #i‡(
NGX_HAVE_PWRITEV
)

543 
off_t
 
off£t
;

544 
ssize_t
 
n
;

545 
ngx_îr_t
 
îr
;

546 
ngx_chaö_t
 *
˛
;

547 
ngx_iovec_t
 
vec
;

548 
iovec
 
iovs
[
NGX_IOVS_PREALLOCATE
];

550 
vec
.
iovs
 = iovs;

551 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

553 
˛
 = 
˘x
->
chaö
;

554 
off£t
 = 
˘x
->offset;

556 
˘x
->
nbyãs
 = 0;

557 
˘x
->
îr
 = 0;

561 
˛
 = 
	`ngx_chaö_to_iovec
(&
vec
, cl);

563 
eöå
:

565 
n
 = 
	`pwrôev
(
˘x
->
fd
, 
iovs
, 
vec
.
cou¡
, 
off£t
);

567 i‡(
n
 == -1) {

568 
îr
 = 
ngx_î∫o
;

570 i‡(
îr
 =
NGX_EINTR
) {

571 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 
îr
,

573 
eöå
;

576 
˘x
->
îr
 =Érr;

580 i‡((
size_t
Ë
n
 !
vec
.
size
) {

581 
˘x
->
nbyãs
 = 0;

585 
˘x
->
nbyãs
 +
n
;

586 
off£t
 +
n
;

587 } 
˛
);

591 
˘x
->
îr
 = 
NGX_ENOSYS
;

595 
	}
}

600 
ngx_öt_t


601 
	$ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
)

603 
timevÆ
 
tv
[2];

605 
tv
[0].
tv_£c
 = 
	`ngx_time
();

606 
tv
[0].
tv_u£c
 = 0;

607 
tv
[1].
tv_£c
 = 
s
;

608 
tv
[1].
tv_u£c
 = 0;

610 i‡(
	`utimes
((*Ë
«me
, 
tv
) != -1) {

611  
NGX_OK
;

614  
NGX_ERROR
;

615 
	}
}

618 
ngx_öt_t


619 
	$ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

621 
fm
->
fd
 = 
	`ngx_›í_fûe
(fm->
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

622 
NGX_FILE_DEFAULT_ACCESS
);

624 i‡(
fm
->
fd
 =
NGX_INVALID_FILE
) {

625 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

626 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

627  
NGX_ERROR
;

630 i‡(
	`·runˇã
(
fm
->
fd
, fm->
size
) == -1) {

631 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

632 "·runˇã(Ë\"%s\" faûed", 
fm
->
«me
);

633 
Áûed
;

636 
fm
->
addr
 = 
	`mm≠
(
NULL
, fm->
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

637 
fm
->
fd
, 0);

638 i‡(
fm
->
addr
 !
MAP_FAILED
) {

639  
NGX_OK
;

642 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

643 "mm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

645 
Áûed
:

647 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

648 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

649 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

652  
NGX_ERROR
;

653 
	}
}

657 
	$ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

659 i‡(
	`munm≠
(
fm
->
addr
, fm->
size
) == -1) {

660 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

661 "munm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

664 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

665 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

666 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

668 
	}
}

671 
ngx_öt_t


672 
	$ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
)

674 
dú
->dú = 
	`›ídú
((c⁄° *Ë
«me
->
d©a
);

676 i‡(
dú
->dú =
NULL
) {

677  
NGX_ERROR
;

680 
dú
->
vÆid_öfo
 = 0;

682  
NGX_OK
;

683 
	}
}

686 
ngx_öt_t


687 
	$ngx_ªad_dú
(
ngx_dú_t
 *
dú
)

689 
dú
->
de
 = 
	`ªaddú
(dir->dir);

691 i‡(
dú
->
de
) {

692 #i‡(
NGX_HAVE_D_TYPE
)

693 
dú
->
ty≥
 = dú->
de
->
d_ty≥
;

695 
dú
->
ty≥
 = 0;

697  
NGX_OK
;

700  
NGX_ERROR
;

701 
	}
}

704 
ngx_öt_t


705 
	$ngx_›í_glob
(
ngx_glob_t
 *
gl
)

707 
n
;

709 
n
 = 
	`glob
((*Ë
gl
->
∑âîn
, 0, 
NULL
, &gl->
pglob
);

711 i‡(
n
 == 0) {

712  
NGX_OK
;

715 #ifde‡
GLOB_NOMATCH


717 i‡(
n
 =
GLOB_NOMATCH
 && 
gl
->
ã°
) {

718  
NGX_OK
;

723  
NGX_ERROR
;

724 
	}
}

727 
ngx_öt_t


728 
	$ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
)

730 
size_t
 
cou¡
;

732 #ifde‡
GLOB_NOMATCH


733 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_∑thc
;

735 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_m©chc
;

738 i‡(
gl
->
n
 < 
cou¡
) {

740 
«me
->
Àn
 = (
size_t
Ë
	`ngx_°æí
(
gl
->
pglob
.
gl_∑thv
[gl->
n
]);

741 
«me
->
d©a
 = (
u_ch¨
 *Ë
gl
->
pglob
.
gl_∑thv
[gl->
n
];

742 
gl
->
n
++;

744  
NGX_OK
;

747  
NGX_DONE
;

748 
	}
}

752 
	$ngx_˛o£_glob
(
ngx_glob_t
 *
gl
)

754 
	`glob‰ì
(&
gl
->
pglob
);

755 
	}
}

758 
ngx_îr_t


759 
	$ngx_åylock_fd
(
ngx_fd_t
 
fd
)

761 
Êock
 
Ê
;

763 
	`ngx_memzîo
(&
Ê
, (
Êock
));

764 
Ê
.
l_ty≥
 = 
F_WRLCK
;

765 
Ê
.
l_whí˚
 = 
SEEK_SET
;

767 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

768  
ngx_î∫o
;

772 
	}
}

775 
ngx_îr_t


776 
	$ngx_lock_fd
(
ngx_fd_t
 
fd
)

778 
Êock
 
Ê
;

780 
	`ngx_memzîo
(&
Ê
, (
Êock
));

781 
Ê
.
l_ty≥
 = 
F_WRLCK
;

782 
Ê
.
l_whí˚
 = 
SEEK_SET
;

784 i‡(
	`f˙é
(
fd
, 
F_SETLKW
, &
Ê
) == -1) {

785  
ngx_î∫o
;

789 
	}
}

792 
ngx_îr_t


793 
	$ngx_u∆ock_fd
(
ngx_fd_t
 
fd
)

795 
Êock
 
Ê
;

797 
	`ngx_memzîo
(&
Ê
, (
Êock
));

798 
Ê
.
l_ty≥
 = 
F_UNLCK
;

799 
Ê
.
l_whí˚
 = 
SEEK_SET
;

801 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

802  
ngx_î∫o
;

806 
	}
}

809 #i‡(
NGX_HAVE_POSIX_FADVISE
Ë&& !(
NGX_HAVE_F_READAHEAD
)

811 
ngx_öt_t


812 
	$ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
)

814 
îr
;

816 
îr
 = 
	`posix_Ádvi£
(
fd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

818 i‡(
îr
 == 0) {

822 
	`ngx_£t_î∫o
(
îr
);

823  
NGX_FILE_ERROR
;

824 
	}
}

829 #i‡(
NGX_HAVE_O_DIRECT
)

831 
ngx_öt_t


832 
	$ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
)

834 
Êags
;

836 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

838 i‡(
Êags
 == -1) {

839  
NGX_FILE_ERROR
;

842  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

843 
	}
}

846 
ngx_öt_t


847 
	$ngx_dúe˘io_off
(
ngx_fd_t
 
fd
)

849 
Êags
;

851 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

853 i‡(
Êags
 == -1) {

854  
NGX_FILE_ERROR
;

857  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_DIRECT
);

858 
	}
}

863 #i‡(
NGX_HAVE_STATFS
)

865 
size_t


866 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

868 
°©fs
 
fs
;

870 i‡(
	`°©fs
((*Ë
«me
, &
fs
) == -1) {

874 i‡((
fs
.
f_bsize
 % 512) != 0) {

878  (
size_t
Ë
fs
.
f_bsize
;

879 
	}
}

881 #ñi‡(
NGX_HAVE_STATVFS
)

883 
size_t


884 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

886 
°©vfs
 
fs
;

888 i‡(
	`°©vfs
((*Ë
«me
, &
fs
) == -1) {

892 i‡((
fs
.
f_‰size
 % 512) != 0) {

896  (
size_t
Ë
fs
.
f_‰size
;

897 
	}
}

901 
size_t


902 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

905 
	}
}

	@src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


57 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

60 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

61 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

65 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

66 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

70 
	#ngx_›í_fûe_n
 "›í()"

	)

72 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

73 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

74 
	#NGX_FILE_RDWR
 
O_RDWR


	)

75 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

76 
	#NGX_FILE_OPEN
 0

	)

77 
	#NGX_FILE_TRUNCATE
 (
O_CREAT
|
O_TRUNC
)

	)

78 
	#NGX_FILE_APPEND
 (
O_WRONLY
|
O_APPEND
)

	)

79 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

81 #i‡(
NGX_HAVE_OPENAT
)

82 
	#NGX_FILE_NOFOLLOW
 
O_NOFOLLOW


	)

84 #i‡
deföed
(
O_DIRECTORY
)

85 
	#NGX_FILE_DIRECTORY
 
O_DIRECTORY


	)

87 
	#NGX_FILE_DIRECTORY
 0

	)

90 #i‡
deföed
(
O_SEARCH
)

91 
	#NGX_FILE_SEARCH
 (
O_SEARCH
|
NGX_FILE_DIRECTORY
)

	)

93 #ñi‡
deföed
(
O_EXEC
)

94 
	#NGX_FILE_SEARCH
 (
O_EXEC
|
NGX_FILE_DIRECTORY
)

	)

96 #ñi‡(
NGX_HAVE_O_PATH
)

97 
	#NGX_FILE_SEARCH
 (
O_PATH
|
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

100 
	#NGX_FILE_SEARCH
 (
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

105 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

106 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

109 
	#ngx_˛o£_fûe
 
˛o£


	)

110 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

113 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

114 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

117 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

118 
ngx_uöt_t
 
ac˚ss
);

119 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

122 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

123 #i‡(
NGX_HAVE_PREAD
)

124 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

126 
	#ngx_ªad_fûe_n
 "ªad()"

	)

129 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

130 
off_t
 
off£t
);

132 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

133 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

136 
	#ngx_ªad_fd
 
ªad


	)

137 
	#ngx_ªad_fd_n
 "ªad()"

	)

144 
ngx_ölöe
 
ssize_t


145 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

147  
	`wrôe
(
fd
, 
buf
, 
n
);

148 
	}
}

150 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

153 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

156 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

157 
	#NGX_LINEFEED_SIZE
 1

	)

158 
	#NGX_LINEFEED
 "\x0a"

	)

161 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

162 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

165 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

166 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

169 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

170 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

173 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

174 
	#ngx_fûe_öfo_n
 "°©()"

	)

176 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

177 
	#ngx_fd_öfo_n
 "f°©()"

	)

179 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

180 
	#ngx_lök_öfo_n
 "l°©()"

	)

182 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

183 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

184 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

185 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

186 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

187 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

188 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

189 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

190 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

193 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

194 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

197 
	#ngx_ªÆ∑th
(
p
, 
r
Ë(
u_ch¨
 *Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

198 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

199 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

200 
	#ngx_gëcwd_n
 "gëcwd()"

	)

201 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

204 #i‡
deföed
(
PATH_MAX
)

206 
	#NGX_HAVE_MAX_PATH
 1

	)

207 
	#NGX_MAX_PATH
 
PATH_MAX


	)

211 
	#NGX_MAX_PATH
 4096

	)

216 
	#NGX_DIR_MASK_LEN
 0

	)

219 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

220 
	#ngx_›í_dú_n
 "›ídú()"

	)

223 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

224 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

227 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

228 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

231 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

232 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

235 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

236 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

239 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

242 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

243 #i‡(
NGX_HAVE_D_NAMLEN
)

244 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

246 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

249 
ngx_ölöe
 
ngx_öt_t


250 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

252 
dú
->
ty≥
 = 0;

253  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

254 
	}
}

256 
	#ngx_de_öfo_n
 "°©()"

	)

257 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

258 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

260 #i‡(
NGX_HAVE_D_TYPE
)

267 
	#ngx_de_is_dú
(
dú
) \

268 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

269 
	#ngx_de_is_fûe
(
dú
) \

270 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

271 
	#ngx_de_is_lök
(
dú
) \

272 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

276 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

277 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

278 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

282 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

283 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

284 
	#ngx_de_fs_size
(
dú
) \

285 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

286 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

289 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

290 
	#ngx_›í_glob_n
 "glob()"

	)

291 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

292 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

295 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

296 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

297 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

299 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

300 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

301 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

304 #i‡(
NGX_HAVE_F_READAHEAD
)

306 
	#NGX_HAVE_READ_AHEAD
 1

	)

308 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

309 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

311 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

313 
	#NGX_HAVE_READ_AHEAD
 1

	)

315 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

316 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

320 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

321 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

326 #i‡(
NGX_HAVE_O_DIRECT
)

328 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

329 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

331 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

332 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

334 #ñi‡(
NGX_HAVE_F_NOCACHE
)

336 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

337 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

339 #ñi‡(
NGX_HAVE_DIRECTIO
)

341 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

342 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

346 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

347 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

351 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

354 #i‡(
NGX_HAVE_OPENAT
)

356 
	#ngx_›í©_fûe
(
fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

357 
	`›í©
(
fd
, (c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

359 
	#ngx_›í©_fûe_n
 "›í©()"

	)

361 
	#ngx_fûe_©_öfo
(
fd
, 
«me
, 
sb
, 
Êag
) \

362 
	`f°©©
(
fd
, (c⁄° *Ë
«me
, 
sb
, 
Êag
)

	)

364 
	#ngx_fûe_©_öfo_n
 "f°©©()"

	)

366 
	#NGX_AT_FDCWD
 (
ngx_fd_t
Ë
AT_FDCWD


	)

371 
	#ngx_°dout
 
STDOUT_FILENO


	)

372 
	#ngx_°dîr
 
STDERR_FILENO


	)

373 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

374 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

377 #i‡(
NGX_HAVE_FILE_AIO
)

379 
ngx_öt_t
 
ngx_fûe_aio_öô
(
ngx_fûe_t
 *
fûe
, 
ngx_poﬁ_t
 *
poﬁ
);

380 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

381 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

383 
ngx_uöt_t
 
ngx_fûe_aio
;

387 #i‡(
NGX_THREADS
)

388 
ssize_t
 
ngx_thªad_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

389 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

390 
ssize_t
 
ngx_thªad_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
,

391 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_‰ìbsd_kîn_o§ñd©e
;

17 
ngx_‰ìbsd_hw_n˝u
;

18 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

22 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<˘y≥.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<sig«l.h
>

23 
	~<pwd.h
>

24 
	~<gΩ.h
>

25 
	~<dúít.h
>

26 
	~<glob.h
>

27 
	~<time.h
>

28 
	~<sys/∑øm.h
>

29 
	~<sys/mou¡.h
>

31 
	~<sys/fûio.h
>

32 
	~<sys/uio.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~<sched.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/t˝.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

46 
	~<sys/un.h
>

48 
	~<libutû.h
>

49 
	~<o§ñd©e.h
>

50 
	~<sys/sys˘l.h
>

52 
	~<dlf˙.h
>

55 #i‡
__FªeBSD_vîsi⁄
 < 400017

61 #unde‡
CMSG_SPACE


62 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

64 #unde‡
CMSG_LEN


65 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

67 #unde‡
CMSG_DATA


68 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

73 
	~<ngx_auto_c⁄fig.h
>

76 #i‡(
NGX_HAVE_POSIX_SEM
)

77 
	~<£m≠h‹e.h
>

81 #i‡(
NGX_HAVE_POLL
)

82 
	~<pﬁl.h
>

86 #i‡(
NGX_HAVE_KQUEUE
)

87 
	~<sys/evít.h
>

91 #i‡(
NGX_HAVE_FILE_AIO
)

92 
	~<aio.h
>

93 
aiocb
 
	tngx_aiocb_t
;

97 
	#NGX_LISTEN_BACKLOG
 -1

	)

100 #ifde‡
__Døg⁄Fly__


101 
	#NGX_KEEPALIVE_FACTOR
 1000

	)

105 #i‚de‡
IOV_MAX


106 
	#IOV_MAX
 1024

	)

110 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


111 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

115 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

116 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

119 **
ívú⁄
;

120 *
mÆloc_›ti⁄s
;

	@src/os/unix/ngx_freebsd_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	gngx_‰ìbsd_kîn_o°y≥
[16];

14 
	gngx_‰ìbsd_kîn_o§ñó£
[128];

15 
	gngx_‰ìbsd_kîn_o§ñd©e
;

16 
	gngx_‰ìbsd_hw_n˝u
;

17 
	gngx_‰ìbsd_kîn_ùc_somaxc⁄n
;

18 
u_l⁄g
 
	gngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

21 
	gngx_‰ìbsd_machdï_h…_logiˇl_˝us
;

24 
ngx_uöt_t
 
	gngx_‰ìbsd_£ndfûe_nbyãs_bug
;

25 
ngx_uöt_t
 
	gngx_‰ìbsd_u£_t˝_n›ush
;

27 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

30 
ngx_os_io_t
 
	gngx_‰ìbsd_io
 = {

31 
ngx_unix_ªcv
,

32 
ngx_ªadv_chaö
,

33 
ngx_udp_unix_ªcv
,

34 
ngx_unix_£nd
,

35 
ngx_udp_unix_£nd
,

36 
ngx_udp_unix_£ndmsg_chaö
,

37 #i‡(
NGX_HAVE_SENDFILE
)

38 
ngx_‰ìbsd_£ndfûe_chaö
,

39 
NGX_IO_SENDFILE


41 
ngx_wrôev_chaö
,

48 *
	m«me
;

49 *
	mvÆue
;

50 
size_t
 
	msize
;

51 
ngx_uöt_t
 
	mexi°s
;

52 } 
	tsys˘l_t
;

55 
sys˘l_t
 
	gsys˘ls
[] = {

57 &
ngx_‰ìbsd_hw_n˝u
,

58 (
ngx_‰ìbsd_hw_n˝u
), 0 },

61 &
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
,

62 (
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
), 0 },

65 &
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
,

66 (
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
), 0 },

69 &
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
,

70 (
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
), 0 },

72 { 
NULL
, NULL, 0, 0 }

77 
	$ngx_debug_öô
()

79 #i‡(
NGX_DEBUG_MALLOC
)

81 #i‡
__FªeBSD_vîsi⁄
 >= 500014 && __FreeBSD_version < 1000011

82 
_mÆloc_›ti⁄s
 = "J";

83 #ñi‡
__FªeBSD_vîsi⁄
 < 500014

84 
mÆloc_›ti⁄s
 = "J";

87 
ngx_debug_mÆloc
 = 1;

90 *
mo
;

92 
mo
 = 
	`gëív
("MALLOC_OPTIONS");

94 i‡(
mo
 && 
	`ngx_°rchr
(mo, 'J')) {

95 
ngx_debug_mÆloc
 = 1;

98 
	}
}

101 
ngx_öt_t


102 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

104 
vîsi⁄
;

105 
size_t
 
size
;

106 
ngx_îr_t
 
îr
;

107 
ngx_uöt_t
 
i
;

109 
size
 = (
ngx_‰ìbsd_kîn_o°y≥
);

110 i‡(
	`sys˘lby«me
("kern.ostype",

111 
ngx_‰ìbsd_kîn_o°y≥
, &
size
, 
NULL
, 0) == -1) {

112 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

115 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

116  
NGX_ERROR
;

119 
ngx_‰ìbsd_kîn_o°y≥
[
size
 - 1] = '\0';

122 
size
 = (
ngx_‰ìbsd_kîn_o§ñó£
);

123 i‡(
	`sys˘lby«me
("kern.osrelease",

124 
ngx_‰ìbsd_kîn_o§ñó£
, &
size
, 
NULL
, 0) == -1) {

125 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

128 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

129  
NGX_ERROR
;

132 
ngx_‰ìbsd_kîn_o§ñó£
[
size
 - 1] = '\0';

136 
size
 = ();

137 i‡(
	`sys˘lby«me
("kern.osreldate",

138 &
ngx_‰ìbsd_kîn_o§ñd©e
, &
size
, 
NULL
, 0) == -1) {

139 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

141  
NGX_ERROR
;

144 
vîsi⁄
 = 
ngx_‰ìbsd_kîn_o§ñd©e
;

147 #i‡(
NGX_HAVE_SENDFILE
)

165 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 460102) \

166 || 
__FªeBSD_vîsi⁄
 == 460002 || __FreeBSD_version >= 500039

170 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 0;

176 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 1;

183 i‡((
vîsi⁄
 < 500000 && version >= 440003) || version >= 500017) {

184 
ngx_‰ìbsd_u£_t˝_n›ush
 = 1;

188 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

189 
size
 = 
sys˘ls
[
i
].size;

191 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

194 
sys˘ls
[
i
].
exi°s
 = 1;

198 
îr
 = 
ngx_î∫o
;

200 i‡(
îr
 =
NGX_ENOENT
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

205 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

206  
NGX_ERROR
;

209 i‡(
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
) {

210 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
 / 2;

213 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
;

216 i‡(
vîsi⁄
 < 600008 && 
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
 > 32767) {

217 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

219  
NGX_ERROR
;

222 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

224 
ngx_os_io
 = 
ngx_‰ìbsd_io
;

226  
NGX_OK
;

227 
	}
}

231 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

233 
u_l⁄g
 
vÆue
;

234 
ngx_uöt_t
 
i
;

236 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

237 
ngx_‰ìbsd_kîn_o°y≥
, 
ngx_‰ìbsd_kîn_o§ñó£
);

239 #ifde‡
__Døg⁄Fly_vîsi⁄


240 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

242 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__Døg⁄Fly_vîsi⁄
);

244 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

246 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__FªeBSD_vîsi⁄
);

249 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

250 i‡(
sys˘ls
[
i
].
exi°s
) {

251 i‡(
sys˘ls
[
i
].
size
 == ()) {

252 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

255 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

258 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

259 
sys˘ls
[
i
].
«me
, 
vÆue
);

262 
	}
}

	@src/os/unix/ngx_freebsd_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

32 
ngx_chaö_t
 *

33 
	$ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

35 
rc
, 
Êags
;

36 
off_t
 
£nd
, 
¥ev_£nd
, 
£¡
;

37 
size_t
 
fûe_size
;

38 
ssize_t
 
n
;

39 
ngx_uöt_t
 
eöå
, 
ógaö
;

40 
ngx_îr_t
 
îr
;

41 
ngx_buf_t
 *
fûe
;

42 
ngx_evít_t
 *
wev
;

43 
ngx_chaö_t
 *
˛
;

44 
ngx_iovec_t
 
hódî
, 
åaûî
;

45 
sf_hdå
 
hdå
;

46 
iovec
 
hódîs
[
NGX_IOVS_PREALLOCATE
];

47 
iovec
 
åaûîs
[
NGX_IOVS_PREALLOCATE
];

48 #i‡(
NGX_HAVE_AIO_SENDFILE
)

49 
ngx_uöt_t
 
ebusy
;

50 
ngx_evít_aio_t
 *
aio
;

53 
wev
 = 
c
->
wrôe
;

55 i‡(!
wev
->
ªady
) {

56  
ö
;

59 #i‡(
NGX_HAVE_KQUEUE
)

61 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

62 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

64 
wev
->
îr‹
 = 1;

65  
NGX_CHAIN_ERROR
;

72 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

73 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

76 
£nd
 = 0;

77 
ógaö
 = 0;

78 
Êags
 = 0;

80 #i‡(
NGX_HAVE_AIO_SENDFILE
 && 
NGX_SUPPRESS_WARN
)

81 
aio
 = 
NULL
;

82 
fûe
 = 
NULL
;

85 
hódî
.
iovs
 = 
hódîs
;

86 
hódî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

88 
åaûî
.
iovs
 = 
åaûîs
;

89 
åaûî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

92 
eöå
 = 0;

93 #i‡(
NGX_HAVE_AIO_SENDFILE
)

94 
ebusy
 = 0;

96 
¥ev_£nd
 = 
£nd
;

100 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
hódî
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

102 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

103  
NGX_CHAIN_ERROR
;

106 
£nd
 +
hódî
.
size
;

108 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

109 
fûe
 = 
˛
->
buf
;

113 
fûe_size
 = (
size_t
Ë
	`ngx_chaö_cﬂÀs˚_fûe
(&
˛
, 
limô
 - 
£nd
);

115 
£nd
 +
fûe_size
;

117 i‡(
£nd
 < 
limô
) {

123 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
åaûî
, cl, 
limô
 - 
£nd
,

124 
c
->
log
);

125 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

126  
NGX_CHAIN_ERROR
;

129 
£nd
 +
åaûî
.
size
;

132 
åaûî
.
cou¡
 = 0;

135 i‡(
ngx_‰ìbsd_u£_t˝_n›ush


136 && 
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET
)

138 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
) == -1) {

139 
îr
 = 
ngx_sockë_î∫o
;

146 i‡(
îr
 !
NGX_EINTR
) {

147 
wev
->
îr‹
 = 1;

148 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

149 
ngx_t˝_n›ush_n
 " failed");

150  
NGX_CHAIN_ERROR
;

154 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

156 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

166 
hdå
.
hódîs
 = 
hódî
.
cou¡
 ? hódî.
iovs
 : 
NULL
;

167 
hdå
.
hdr_˙t
 = 
hódî
.
cou¡
;

168 
hdå
.
åaûîs
 = 
åaûî
.
cou¡
 ?Åøûî.
iovs
 : 
NULL
;

169 
hdå
.
ål_˙t
 = 
åaûî
.
cou¡
;

176 i‡(!
ngx_‰ìbsd_£ndfûe_nbyãs_bug
) {

177 
hódî
.
size
 = 0;

180 
£¡
 = 0;

182 #i‡(
NGX_HAVE_AIO_SENDFILE
)

183 
aio
 = 
fûe
->file->aio;

184 
Êags
 = (
aio
 &&áio->
¥ñﬂd_h™dÀr
Ë? 
SF_NODISKIO
 : 0;

187 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

188 
fûe_size
 + 
hódî
.
size
, &
hdå
, &
£¡
, 
Êags
);

190 i‡(
rc
 == -1) {

191 
îr
 = 
ngx_î∫o
;

193 
îr
) {

194 
NGX_EAGAIN
:

195 
ógaö
 = 1;

198 
NGX_EINTR
:

199 
eöå
 = 1;

202 #i‡(
NGX_HAVE_AIO_SENDFILE
)

203 
NGX_EBUSY
:

204 
ebusy
 = 1;

209 
wev
->
îr‹
 = 1;

210 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

211  
NGX_CHAIN_ERROR
;

214 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

215 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

222 } i‡(
rc
 >0 && 
£¡
 == 0) {

230 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

232 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

234  
NGX_CHAIN_ERROR
;

237 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

239 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî
.
size
);

242 
n
 = 
	`ngx_wrôev
(
c
, &
hódî
);

244 i‡(
n
 =
NGX_ERROR
) {

245  
NGX_CHAIN_ERROR
;

248 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

251 
c
->
£¡
 += sent;

253 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

255 #i‡(
NGX_HAVE_AIO_SENDFILE
)

257 i‡(
ebusy
) {

258 i‡(
aio
->
evít
.
a˘ive
) {

264 i‡(
£¡
) {

265 
c
->
busy_cou¡
 = 0;

268  
ö
;

271 i‡(
£¡
 == 0) {

272 
c
->
busy_cou¡
++;

274 i‡(
c
->
busy_cou¡
 > 2) {

275 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

277 &
fûe
->fûe->
«me
);

279 
c
->
busy_cou¡
 = 0;

280 
aio
->
¥ñﬂd_h™dÀr
 = 
NULL
;

282 
£nd
 = 
¥ev_£nd
;

287 
c
->
busy_cou¡
 = 0;

290 
n
 = 
aio
->
	`¥ñﬂd_h™dÀr
(
fûe
);

292 i‡(
n
 > 0) {

293 
£nd
 = 
¥ev_£nd
 + 
£¡
;

297  
ö
;

300 i‡(
Êags
 =
SF_NODISKIO
) {

301 
c
->
busy_cou¡
 = 0;

306 i‡(
ógaö
) {

315 
wev
->
ªady
 = 0;

316  
ö
;

319 i‡(
eöå
) {

320 
£nd
 = 
¥ev_£nd
 + 
£¡
;

324 i‡(
£nd
 - 
¥ev_£nd
 !
£¡
) {

325 
wev
->
ªady
 = 0;

326  
ö
;

329 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

330  
ö
;

333 
	}
}

	@src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@src/os/unix/ngx_linux_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evítfd
;

14 
aio_c⁄ãxt_t
 
ngx_aio_˘x
;

17 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
	$io_submô
(
aio_c⁄ãxt_t
 
˘x
, 
n
, 
iocb
 **
∑iocb
)

23  
	`sysˇŒ
(
SYS_io_submô
, 
˘x
, 
n
, 
∑iocb
);

24 
	}
}

27 
ngx_öt_t


28 
	$ngx_fûe_aio_öô
(
ngx_fûe_t
 *
fûe
, 
ngx_poﬁ_t
 *
poﬁ
)

30 
ngx_evít_aio_t
 *
aio
;

32 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

33 i‡(
aio
 =
NULL
) {

34  
NGX_ERROR
;

37 
aio
->
fûe
 = file;

38 
aio
->
fd
 = 
fûe
->fd;

39 
aio
->
evít
.
d©a
 =áio;

40 
aio
->
evít
.
ªady
 = 1;

41 
aio
->
evít
.
log
 = 
fûe
->log;

43 
fûe
->
aio
 =áio;

45  
NGX_OK
;

46 
	}
}

49 
ssize_t


50 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

51 
ngx_poﬁ_t
 *
poﬁ
)

53 
ngx_îr_t
 
îr
;

54 
iocb
 *
piocb
[1];

55 
ngx_evít_t
 *
ev
;

56 
ngx_evít_aio_t
 *
aio
;

58 i‡(!
ngx_fûe_aio
) {

59  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

62 i‡(
fûe
->
aio
 =
NULL
 && 
	`ngx_fûe_aio_öô
(fûe, 
poﬁ
Ë!
NGX_OK
) {

63  
NGX_ERROR
;

66 
aio
 = 
fûe
->aio;

67 
ev
 = &
aio
->
evít
;

69 i‡(!
ev
->
ªady
) {

70 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

71 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

72  
NGX_AGAIN
;

75 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

77 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

79 i‡(
ev
->
com∂ëe
) {

80 
ev
->
a˘ive
 = 0;

81 
ev
->
com∂ëe
 = 0;

83 i‡(
aio
->
ªs
 >= 0) {

84 
	`ngx_£t_î∫o
(0);

85  
aio
->
ªs
;

88 
	`ngx_£t_î∫o
(-
aio
->
ªs
);

90 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

91 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

93  
NGX_ERROR
;

96 
	`ngx_memzîo
(&
aio
->
aiocb
, (
iocb
));

98 
aio
->
aiocb
.
aio_d©a
 = (
uöt64_t
Ë(
uöçå_t
Ë
ev
;

99 
aio
->
aiocb
.
aio_lio_›code
 = 
IOCB_CMD_PREAD
;

100 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

101 
aio
->
aiocb
.
aio_buf
 = (
uöt64_t
Ë(
uöçå_t
Ë
buf
;

102 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

103 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

104 
aio
->
aiocb
.
aio_Êags
 = 
IOCB_FLAG_RESFD
;

105 
aio
->
aiocb
.
aio_ªsfd
 = 
ngx_evítfd
;

107 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

109 
piocb
[0] = &
aio
->
aiocb
;

111 i‡(
	`io_submô
(
ngx_aio_˘x
, 1, 
piocb
) == 1) {

112 
ev
->
a˘ive
 = 1;

113 
ev
->
ªady
 = 0;

114 
ev
->
com∂ëe
 = 0;

116  
NGX_AGAIN
;

119 
îr
 = 
ngx_î∫o
;

121 i‡(
îr
 =
NGX_EAGAIN
) {

122  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

125 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

126 "io_submô(\"%V\"ËÁûed", &
fûe
->
«me
);

128 i‡(
îr
 =
NGX_ENOSYS
) {

129 
ngx_fûe_aio
 = 0;

130  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

133  
NGX_ERROR
;

134 
	}
}

138 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

140 
ngx_evít_aio_t
 *
aio
;

142 
aio
 = 
ev
->
d©a
;

144 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

145 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

147 
aio
->
	`h™dÀr
(
ev
);

148 
	}
}

	@src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<sys/vfs.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<time.h
>

52 
	~<mÆloc.h
>

53 
	~<limôs.h
>

54 
	~<sys/io˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

58 
	~<dlf˙.h
>

61 
	~<ngx_auto_c⁄fig.h
>

64 #i‡(
NGX_HAVE_POSIX_SEM
)

65 
	~<£m≠h‹e.h
>

69 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

70 
	~<sys/¥˘l.h
>

74 #i‡(
NGX_HAVE_SENDFILE64
)

75 
	~<sys/£ndfûe.h
>

77 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

78 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

82 #i‡(
NGX_HAVE_POLL
)

83 
	~<pﬁl.h
>

87 #i‡(
NGX_HAVE_EPOLL
)

88 
	~<sys/ïﬁl.h
>

92 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

93 
	~<sys/evítfd.h
>

95 
	~<sys/sysˇŒ.h
>

96 #i‡(
NGX_HAVE_FILE_AIO
)

97 
	~<löux/aio_abi.h
>

98 
iocb
 
	tngx_aiocb_t
;

102 #i‡(
NGX_HAVE_CAPABILITIES
)

103 
	~<löux/ˇ∑bûôy.h
>

107 
	#NGX_LISTEN_BACKLOG
 511

	)

110 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


112 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

116 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


117 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

121 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

122 
	#ngx_debug_öô
()

	)

125 **
ívú⁄
;

	@src/os/unix/ngx_linux_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 
	gngx_löux_kîn_o°y≥
[50];

13 
u_ch¨
 
	gngx_löux_kîn_o§ñó£
[50];

16 
ngx_os_io_t
 
	gngx_löux_io
 = {

17 
ngx_unix_ªcv
,

18 
ngx_ªadv_chaö
,

19 
ngx_udp_unix_ªcv
,

20 
ngx_unix_£nd
,

21 
ngx_udp_unix_£nd
,

22 
ngx_udp_unix_£ndmsg_chaö
,

23 #i‡(
NGX_HAVE_SENDFILE
)

24 
ngx_löux_£ndfûe_chaö
,

25 
NGX_IO_SENDFILE


27 
ngx_wrôev_chaö
,

33 
ngx_öt_t


34 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

36 
ut¢ame
 
u
;

38 i‡(
	`u«me
(&
u
) == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "uname() failed");

40  
NGX_ERROR
;

43 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o°y≥
, (
u_ch¨
 *Ë
u
.
sy¢ame
,

44 (
ngx_löux_kîn_o°y≥
));

46 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o§ñó£
, (
u_ch¨
 *Ë
u
.
ªÀa£
,

47 (
ngx_löux_kîn_o§ñó£
));

49 
ngx_os_io
 = 
ngx_löux_io
;

51  
NGX_OK
;

52 
	}
}

56 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

58 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

59 
ngx_löux_kîn_o°y≥
, 
ngx_löux_kîn_o§ñó£
);

60 
	}
}

	@src/os/unix/ngx_linux_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t
 
ngx_löux_£ndfûe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
,

14 
size_t
 
size
);

16 #i‡(
NGX_THREADS
)

17 
	~<ngx_thªad_poﬁ.h
>

19 #i‡!(
NGX_HAVE_SENDFILE64
)

20 #îr‹ 
£ndfûe64
(Ë
is
 
ªquúed
!

23 
ssize_t
 
ngx_löux_£ndfûe_thªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
,

24 
size_t
 
size
);

25 
ngx_löux_£ndfûe_thªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

43 
	#NGX_SENDFILE_MAXSIZE
 2147483647L

	)

46 
ngx_chaö_t
 *

47 
	$ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

49 
t˝_nodñay
;

50 
off_t
 
£nd
, 
¥ev_£nd
;

51 
size_t
 
fûe_size
, 
£¡
;

52 
ssize_t
 
n
;

53 
ngx_îr_t
 
îr
;

54 
ngx_buf_t
 *
fûe
;

55 
ngx_evít_t
 *
wev
;

56 
ngx_chaö_t
 *
˛
;

57 
ngx_iovec_t
 
hódî
;

58 
iovec
 
hódîs
[
NGX_IOVS_PREALLOCATE
];

60 
wev
 = 
c
->
wrôe
;

62 i‡(!
wev
->
ªady
) {

63  
ö
;

69 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_SENDFILE_MAXSIZE
 - 
ngx_∑gesize
)) {

70 
limô
 = 
NGX_SENDFILE_MAXSIZE
 - 
ngx_∑gesize
;

74 
£nd
 = 0;

76 
hódî
.
iovs
 = 
hódîs
;

77 
hódî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

80 
¥ev_£nd
 = 
£nd
;

84 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
hódî
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

86 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

87  
NGX_CHAIN_ERROR
;

90 
£nd
 +
hódî
.
size
;

94 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET


95 && 
hódî
.
cou¡
 != 0

96 && 
˛


97 && 
˛
->
buf
->
ö_fûe
)

101 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_SET
) {

103 
t˝_nodñay
 = 0;

105 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

106 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

108 
îr
 = 
ngx_sockë_î∫o
;

116 i‡(
îr
 !
NGX_EINTR
) {

117 
wev
->
îr‹
 = 1;

118 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

120  
NGX_CHAIN_ERROR
;

124 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_UNSET
;

126 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

131 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

133 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
) == -1) {

134 
îr
 = 
ngx_sockë_î∫o
;

141 i‡(
îr
 !
NGX_EINTR
) {

142 
wev
->
îr‹
 = 1;

143 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

144 
ngx_t˝_n›ush_n
 " failed");

145  
NGX_CHAIN_ERROR
;

149 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

151 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

159 i‡(
hódî
.
cou¡
 =0 && 
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

160 
fûe
 = 
˛
->
buf
;

164 
fûe_size
 = (
size_t
Ë
	`ngx_chaö_cﬂÀs˚_fûe
(&
˛
, 
limô
 - 
£nd
);

166 
£nd
 +
fûe_size
;

168 i‡(
fûe_size
 == 0) {

169 
	`ngx_debug_poöt
();

170  
NGX_CHAIN_ERROR
;

174 
n
 = 
	`ngx_löux_£ndfûe
(
c
, 
fûe
, 
fûe_size
);

176 i‡(
n
 =
NGX_ERROR
) {

177  
NGX_CHAIN_ERROR
;

180 i‡(
n
 =
NGX_DONE
) {

182  
ö
;

185 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

188 
n
 = 
	`ngx_wrôev
(
c
, &
hódî
);

190 i‡(
n
 =
NGX_ERROR
) {

191  
NGX_CHAIN_ERROR
;

194 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

197 
c
->
£¡
 += sent;

199 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

201 i‡(
n
 =
NGX_AGAIN
) {

202 
wev
->
ªady
 = 0;

203  
ö
;

206 i‡((
size_t
Ë(
£nd
 - 
¥ev_£nd
Ë!
£¡
) {

218 
£nd
 = 
¥ev_£nd
 + 
£¡
;

222 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

223  
ö
;

226 
	}
}

229 
ssize_t


230 
	$ngx_löux_£ndfûe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
, 
size_t
 
size
)

232 #i‡(
NGX_HAVE_SENDFILE64
)

233 
off_t
 
off£t
;

235 
öt32_t
 
off£t
;

237 
ssize_t
 
n
;

238 
ngx_îr_t
 
îr
;

240 #i‡(
NGX_THREADS
)

242 i‡(
fûe
->fûe->
thªad_h™dÀr
) {

243  
	`ngx_löux_£ndfûe_thªad
(
c
, 
fûe
, 
size
);

248 #i‡(
NGX_HAVE_SENDFILE64
)

249 
off£t
 = 
fûe
->
fûe_pos
;

251 
off£t
 = (
öt32_t
Ë
fûe
->
fûe_pos
;

254 
eöå
:

256 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

257 "£ndfûe: @%O %uz", 
fûe
->
fûe_pos
, 
size
);

259 
n
 = 
	`£ndfûe
(
c
->
fd
, 
fûe
->fûe->fd, &
off£t
, 
size
);

261 i‡(
n
 == -1) {

262 
îr
 = 
ngx_î∫o
;

264 
îr
) {

265 
NGX_EAGAIN
:

266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

268  
NGX_AGAIN
;

270 
NGX_EINTR
:

271 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

273 
eöå
;

276 
c
->
wrôe
->
îr‹
 = 1;

277 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

278  
NGX_ERROR
;

282 i‡(
n
 == 0) {

288 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

290 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

292  
NGX_ERROR
;

295 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "sendfile: %z of %uz @%O",

296 
n
, 
size
, 
fûe
->
fûe_pos
);

298  
n
;

299 
	}
}

302 #i‡(
NGX_THREADS
)

305 
ngx_buf_t
 *
	mfûe
;

306 
ngx_sockë_t
 
	msockë
;

307 
size_t
 
	msize
;

309 
size_t
 
	m£¡
;

310 
ngx_îr_t
 
	mîr
;

311 } 
	tngx_löux_£ndfûe_˘x_t
;

314 
ssize_t


315 
	$ngx_löux_£ndfûe_thªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
, 
size_t
 
size
)

317 
ngx_evít_t
 *
wev
;

318 
ngx_thªad_èsk_t
 *
èsk
;

319 
ngx_löux_£ndfûe_˘x_t
 *
˘x
;

321 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

323 
fûe
->fûe->
fd
, 
size
, fûe->
fûe_pos
);

325 
èsk
 = 
c
->
£ndfûe_èsk
;

327 i‡(
èsk
 =
NULL
) {

328 
èsk
 = 
	`ngx_thªad_èsk_Æloc
(
c
->
poﬁ
, (
ngx_löux_£ndfûe_˘x_t
));

329 i‡(
èsk
 =
NULL
) {

330  
NGX_ERROR
;

333 
èsk
->
h™dÀr
 = 
ngx_löux_£ndfûe_thªad_h™dÀr
;

335 
c
->
£ndfûe_èsk
 = 
èsk
;

338 
˘x
 = 
èsk
->ctx;

339 
wev
 = 
c
->
wrôe
;

341 i‡(
èsk
->
evít
.
com∂ëe
) {

342 
èsk
->
evít
.
com∂ëe
 = 0;

344 i‡(
˘x
->
îr
 =
NGX_EAGAIN
) {

351 i‡(
wev
->
com∂ëe
) {

355  
NGX_AGAIN
;

358 i‡(
˘x
->
îr
) {

359 
wev
->
îr‹
 = 1;

360 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
˘x
->
îr
, "sendfile() failed");

361  
NGX_ERROR
;

364 i‡(
˘x
->
£¡
 == 0) {

370 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

372 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

374  
NGX_ERROR
;

377  
˘x
->
£¡
;

380 i‡(
èsk
->
evít
.
a˘ive
 && 
˘x
->
fûe
 == file) {

386  
NGX_DONE
;

389 
˘x
->
fûe
 = file;

390 
˘x
->
sockë
 = 
c
->
fd
;

391 
˘x
->
size
 = size;

393 
wev
->
com∂ëe
 = 0;

395 i‡(
fûe
->fûe->
	`thªad_h™dÀr
(
èsk
, fûe->fûeË!
NGX_OK
) {

396  
NGX_ERROR
;

399  
NGX_DONE
;

400 
	}
}

404 
	$ngx_löux_£ndfûe_thªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

406 
ngx_löux_£ndfûe_˘x_t
 *
˘x
 = 
d©a
;

408 
off_t
 
off£t
;

409 
ssize_t
 
n
;

410 
ngx_buf_t
 *
fûe
;

412 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "linux sendfileÅhread handler");

414 
fûe
 = 
˘x
->file;

415 
off£t
 = 
fûe
->
fûe_pos
;

417 
agaö
:

419 
n
 = 
	`£ndfûe
(
˘x
->
sockë
, 
fûe
->fûe->
fd
, &
off£t
, ctx->
size
);

421 i‡(
n
 == -1) {

422 
˘x
->
îr
 = 
ngx_î∫o
;

425 
˘x
->
£¡
 = 
n
;

426 
˘x
->
îr
 = 0;

430 
	`ngx_time_upd©e
();

433 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

435 
n
, 
˘x
->
îr
, ctx->
size
, 
fûe
->
fûe_pos
);

437 i‡(
˘x
->
îr
 =
NGX_EINTR
) {

438 
agaö
;

440 
	}
}

	@src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

21 
	toff_t
 
	tlimô
);

22 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

23 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

24 
	toff_t
 
	tlimô
);

27 
ngx_ªcv_±
 
ªcv
;

28 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

29 
ngx_ªcv_±
 
udp_ªcv
;

30 
ngx_£nd_±
 
£nd
;

31 
ngx_£nd_±
 
udp_£nd
;

32 
ngx_£nd_chaö_±
 
udp_£nd_chaö
;

33 
ngx_£nd_chaö_±
 
£nd_chaö
;

34 
ngx_uöt_t
 
Êags
;

35 } 
	tngx_os_io_t
;

38 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

39 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

41 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

42 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

43 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
, 
ngx_pid_t
 
pid
);

46 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
, 
off_t
 
limô
);

48 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

49 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

50 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

51 
off_t
 
limô
);

52 
ssize_t
 
	`ngx_udp_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

53 
ngx_chaö_t
 *
	`ngx_udp_unix_£ndmsg_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

54 
off_t
 
limô
);

57 #i‡(
IOV_MAX
 > 64)

58 
	#NGX_IOVS_PREALLOCATE
 64

	)

60 
	#NGX_IOVS_PREALLOCATE
 
IOV_MAX


	)

65 
iovec
 *
iovs
;

66 
ngx_uöt_t
 
cou¡
;

67 
size_t
 
size
;

68 
ngx_uöt_t
 
«Œoc
;

69 } 
	tngx_iovec_t
;

71 
ngx_chaö_t
 *
	`ngx_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
,Çgx_chaö_à*
ö
,

72 
size_t
 
limô
, 
ngx_log_t
 *
log
);

75 
ssize_t
 
	`ngx_wrôev
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
);

78 
ngx_os_io_t
 
ngx_os_io
;

79 
ngx_öt_t
 
ngx_n˝u
;

80 
ngx_öt_t
 
ngx_max_sockës
;

81 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

82 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

85 #i‡(
NGX_FREEBSD
)

86 
	~<ngx_‰ìbsd.h
>

89 #ñi‡(
NGX_LINUX
)

90 
	~<ngx_löux.h
>

93 #ñi‡(
NGX_SOLARIS
)

94 
	~<ngx_sﬁ¨is.h
>

97 #ñi‡(
NGX_DARWIN
)

98 
	~<ngx_d¨wö.h
>

	@src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

15 
	#_HPUX_ALT_XOPEN_SOCKET_API


	)

19 #i‡(
NGX_TRU64
)

20 
	#_REENTRANT


	)

24 #i‡(
NGX_GNU_HURD
)

25 #i‚de‡
_GNU_SOURCE


26 
	#_GNU_SOURCE


	)

28 
	#_FILE_OFFSET_BITS
 64

	)

32 #ifde‡
__CYGWIN__


33 
	#timez⁄ev¨


	)

34 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

38 
	~<sys/ty≥s.h
>

39 
	~<sys/time.h
>

40 #i‡(
NGX_HAVE_UNISTD_H
)

41 
	~<uni°d.h
>

43 #i‡(
NGX_HAVE_INTTYPES_H
)

44 
	~<öây≥s.h
>

46 
	~<°d¨g.h
>

47 
	~<°ddef.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<˘y≥.h
>

51 
	~<î∫o.h
>

52 
	~<°rög.h
>

53 
	~<sig«l.h
>

54 
	~<pwd.h
>

55 
	~<gΩ.h
>

56 
	~<dúít.h
>

57 
	~<glob.h
>

58 
	~<time.h
>

59 #i‡(
NGX_HAVE_SYS_PARAM_H
)

60 
	~<sys/∑øm.h
>

62 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

63 
	~<sys/mou¡.h
>

65 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

66 
	~<sys/°©vfs.h
>

69 #i‡(
NGX_HAVE_SYS_FILIO_H
)

70 
	~<sys/fûio.h
>

72 
	~<sys/io˘l.h
>

74 
	~<sys/uio.h
>

75 
	~<sys/°©.h
>

76 
	~<f˙é.h
>

78 
	~<sys/waô.h
>

79 
	~<sys/mm™.h
>

80 
	~<sys/ªsour˚.h
>

81 
	~<sched.h
>

83 
	~<sys/sockë.h
>

84 
	~<√töë/ö.h
>

85 
	~<√töë/t˝.h
>

86 
	~<¨∑/öë.h
>

87 
	~<√tdb.h
>

88 
	~<sys/un.h
>

90 #i‡(
NGX_HAVE_LIMITS_H
)

91 
	~<limôs.h
>

94 #ifde‡
__CYGWIN__


95 
	~<mÆloc.h
>

98 #i‡(
NGX_HAVE_CRYPT_H
)

99 
	~<¸y±.h
>

103 #i‚de‡
IOV_MAX


104 
	#IOV_MAX
 16

	)

108 
	~<ngx_auto_c⁄fig.h
>

111 #i‡(
NGX_HAVE_DLOPEN
)

112 
	~<dlf˙.h
>

116 #i‡(
NGX_HAVE_POSIX_SEM
)

117 
	~<£m≠h‹e.h
>

121 #i‡(
NGX_HAVE_POLL
)

122 
	~<pﬁl.h
>

126 #i‡(
NGX_HAVE_KQUEUE
)

127 
	~<sys/evít.h
>

131 #i‡(
NGX_HAVE_DEVPOLL
Ë&& !(
NGX_TEST_BUILD_DEVPOLL
)

132 
	~<sys/io˘l.h
>

133 
	~<sys/devpﬁl.h
>

137 #i‡(
NGX_HAVE_FILE_AIO
)

138 
	~<aio.h
>

139 
aiocb
 
	tngx_aiocb_t
;

143 
	#NGX_LISTEN_BACKLOG
 511

	)

145 
	#ngx_debug_öô
()

	)

148 **
ívú⁄
;

	@src/os/unix/ngx_posix_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
	gngx_n˝u
;

14 
ngx_öt_t
 
	gngx_max_sockës
;

15 
ngx_uöt_t
 
	gngx_öhîôed_n⁄blockög
;

16 
ngx_uöt_t
 
	gngx_t˝_nodñay_™d_t˝_n›ush
;

19 
æimô
 
	gæmt
;

22 
ngx_os_io_t
 
	gngx_os_io
 = {

23 
ngx_unix_ªcv
,

24 
ngx_ªadv_chaö
,

25 
ngx_udp_unix_ªcv
,

26 
ngx_unix_£nd
,

27 
ngx_udp_unix_£nd
,

28 
ngx_udp_unix_£ndmsg_chaö
,

29 
ngx_wrôev_chaö
,

34 
ngx_öt_t


35 
	$ngx_os_öô
(
ngx_log_t
 *
log
)

37 
ngx_time_t
 *
ç
;

38 
ngx_uöt_t
 
n
;

39 #i‡(
NGX_HAVE_LEVEL1_DCACHE_LINESIZE
)

40 
size
;

43 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

44 i‡(
	`ngx_os_•ecific_öô
(
log
Ë!
NGX_OK
) {

45  
NGX_ERROR
;

49 i‡(
	`ngx_öô_£çro˘ôÀ
(
log
Ë!
NGX_OK
) {

50  
NGX_ERROR
;

53 
ngx_∑gesize
 = 
	`gë∑gesize
();

54 
ngx_ˇchñöe_size
 = 
NGX_CPU_CACHE_LINE
;

56 
n
 = 
ngx_∑gesize
;Ç >>1; 
ngx_∑gesize_shi·
++) { }

58 #i‡(
NGX_HAVE_SC_NPROCESSORS_ONLN
)

59 i‡(
ngx_n˝u
 == 0) {

60 
ngx_n˝u
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

64 i‡(
ngx_n˝u
 < 1) {

65 
ngx_n˝u
 = 1;

68 #i‡(
NGX_HAVE_LEVEL1_DCACHE_LINESIZE
)

69 
size
 = 
	`sysc⁄f
(
_SC_LEVEL1_DCACHE_LINESIZE
);

70 i‡(
size
 > 0) {

71 
ngx_ˇchñöe_size
 = 
size
;

75 
	`ngx_˝uöfo
();

77 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

78 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
î∫o
,

80  
NGX_ERROR
;

83 
ngx_max_sockës
 = (
ngx_öt_t
Ë
æmt
.
æim_cur
;

85 #i‡(
NGX_HAVE_INHERITED_NONBLOCK
 || 
NGX_HAVE_ACCEPT4
)

86 
ngx_öhîôed_n⁄blockög
 = 1;

88 
ngx_öhîôed_n⁄blockög
 = 0;

91 
ç
 = 
	`ngx_timeofday
();

92 
	`§™dom
(((Ë
ngx_pid
 << 16Ë^ 
ç
->
£c
 ^Åp->
m£c
);

94  
NGX_OK
;

95 
	}
}

99 
	$ngx_os_°©us
(
ngx_log_t
 *
log
)

101 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, 
NGINX_VER_BUILD
);

103 #ifde‡
NGX_COMPILER


104 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "buûàby " 
NGX_COMPILER
);

107 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

108 
	`ngx_os_•ecific_°©us
(
log
);

111 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

113 
æmt
.
æim_cur
,Ñlmt.
æim_max
);

114 
	}
}

119 
ngx_öt_t


120 
	$ngx_posix_po°_c⁄f_öô
(
ngx_log_t
 *
log
)

122 
ngx_fd_t
 
µ
[2];

124 i‡(
	`pùe
(
µ
) == -1) {

125 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "pipe() failed");

126  
NGX_ERROR
;

129 i‡(
	`dup2
(
µ
[1], 
STDERR_FILENO
) == -1) {

130 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "dup2(STDERR) failed");

131  
NGX_ERROR
;

134 i‡(
µ
[1] > 
STDERR_FILENO
) {

135 i‡(
	`˛o£
(
µ
[1]) == -1) {

136 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "close() failed");

137  
NGX_ERROR
;

141  
NGX_OK
;

142 
	}
}

	@src/os/unix/ngx_process.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

15 
	msigno
;

16 *
	msig«me
;

17 *
	m«me
;

18 (*
	mh™dÀr
)(
	msigno
, 
sigöfo_t
 *
	msigöfo
, *
	muc⁄ãxt
);

19 } 
	tngx_sig«l_t
;

23 
ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

24 
ngx_sig«l_h™dÀr
(
signo
, 
sigöfo_t
 *
sigöfo
, *
uc⁄ãxt
);

25 
ngx_¥o˚ss_gë_°©us
();

26 
ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
);

29 
	gngx_¨gc
;

30 **
	gngx_¨gv
;

31 **
	gngx_os_¨gv
;

33 
ngx_öt_t
 
	gngx_¥o˚ss_¶Ÿ
;

34 
ngx_sockë_t
 
	gngx_ch™√l
;

35 
ngx_öt_t
 
	gngx_œ°_¥o˚ss
;

36 
ngx_¥o˚ss_t
 
	gngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

39 
ngx_sig«l_t
 
	gsig«ls
[] = {

40 { 
ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

41 "SIG" 
ngx_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

43 
ngx_sig«l_h™dÀr
 },

45 { 
ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
),

46 "SIG" 
ngx_vÆue
(
NGX_REOPEN_SIGNAL
),

48 
ngx_sig«l_h™dÀr
 },

50 { 
ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
),

51 "SIG" 
ngx_vÆue
(
NGX_NOACCEPT_SIGNAL
),

53 
ngx_sig«l_h™dÀr
 },

55 { 
ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
),

56 "SIG" 
ngx_vÆue
(
NGX_TERMINATE_SIGNAL
),

58 
ngx_sig«l_h™dÀr
 },

60 { 
ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

61 "SIG" 
ngx_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

63 
ngx_sig«l_h™dÀr
 },

65 { 
ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

66 "SIG" 
ngx_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

68 
ngx_sig«l_h™dÀr
 },

70 { 
SIGALRM
, "SIGALRM", "", 
ngx_sig«l_h™dÀr
 },

72 { 
SIGINT
, "SIGINT", "", 
ngx_sig«l_h™dÀr
 },

74 { 
SIGIO
, "SIGIO", "", 
ngx_sig«l_h™dÀr
 },

76 { 
SIGCHLD
, "SIGCHLD", "", 
ngx_sig«l_h™dÀr
 },

78 { 
SIGSYS
, "SIGSYS, SIG_IGN", "", 
NULL
 },

80 { 
SIGPIPE
, "SIGPIPE, SIG_IGN", "", 
NULL
 },

82 { 0, 
NULL
, "", NULL }

86 
ngx_pid_t


87 
	$ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
,

88 *
«me
, 
ngx_öt_t
 
ª•awn
)

90 
u_l⁄g
 
⁄
;

91 
ngx_pid_t
 
pid
;

92 
ngx_öt_t
 
s
;

94 i‡(
ª•awn
 >= 0) {

95 
s
 = 
ª•awn
;

98 
s
 = 0; s < 
ngx_œ°_¥o˚ss
; s++) {

99 i‡(
ngx_¥o˚s£s
[
s
].
pid
 == -1) {

104 i‡(
s
 =
NGX_MAX_PROCESSES
) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

107 
NGX_MAX_PROCESSES
);

108  
NGX_INVALID_PID
;

113 i‡(
ª•awn
 !
NGX_PROCESS_DETACHED
) {

117 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ngx_¥o˚s£s
[
s
].
ch™√l
) == -1)

119 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

120 "sockë∑ú(ËÁûed whûê•awnög \"%s\"", 
«me
);

121  
NGX_INVALID_PID
;

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

126 
ngx_¥o˚s£s
[
s
].
ch™√l
[0],

127 
ngx_¥o˚s£s
[
s
].
ch™√l
[1]);

129 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0]) == -1) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

131 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

132 
«me
);

133 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

134  
NGX_INVALID_PID
;

137 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1]) == -1) {

138 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

140 
«me
);

141 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

142  
NGX_INVALID_PID
;

145 
⁄
 = 1;

146 i‡(
	`io˘l
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
FIOASYNC
, &
⁄
) == -1) {

147 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

148 "io˘l(FIOASYNCËÁûed whûê•awnög \"%s\"", 
«me
);

149 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

150  
NGX_INVALID_PID
;

153 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETOWN
, 
ngx_pid
) == -1) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

155 "f˙é(F_SETOWNËÁûed whûê•awnög \"%s\"", 
«me
);

156 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

157  
NGX_INVALID_PID
;

160 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

163 
«me
);

164 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

165  
NGX_INVALID_PID
;

168 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

171 
«me
);

172 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

173  
NGX_INVALID_PID
;

176 
ngx_ch™√l
 = 
ngx_¥o˚s£s
[
s
].
ch™√l
[1];

179 
ngx_¥o˚s£s
[
s
].
ch™√l
[0] = -1;

180 
ngx_¥o˚s£s
[
s
].
ch™√l
[1] = -1;

183 
ngx_¥o˚ss_¶Ÿ
 = 
s
;

186 
pid
 = 
	`f‹k
();

188 
pid
) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

192 "f‹k(ËÁûed whûê•awnög \"%s\"", 
«me
);

193 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

194  
NGX_INVALID_PID
;

197 
ngx_∑ª¡
 = 
ngx_pid
;

198 
ngx_pid
 = 
	`ngx_gëpid
();

199 
	`¥oc
(
cy˛e
, 
d©a
);

206 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "°¨à%†%P", 
«me
, 
pid
);

208 
ngx_¥o˚s£s
[
s
].
pid
 =Öid;

209 
ngx_¥o˚s£s
[
s
].
exôed
 = 0;

211 i‡(
ª•awn
 >= 0) {

212  
pid
;

215 
ngx_¥o˚s£s
[
s
].
¥oc
 =Öroc;

216 
ngx_¥o˚s£s
[
s
].
d©a
 = data;

217 
ngx_¥o˚s£s
[
s
].
«me
 =Çame;

218 
ngx_¥o˚s£s
[
s
].
exôög
 = 0;

220 
ª•awn
) {

222 
NGX_PROCESS_NORESPAWN
:

223 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

224 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

225 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

228 
NGX_PROCESS_JUST_SPAWN
:

229 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

230 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

231 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

234 
NGX_PROCESS_RESPAWN
:

235 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

236 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

237 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

240 
NGX_PROCESS_JUST_RESPAWN
:

241 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

242 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

243 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

246 
NGX_PROCESS_DETACHED
:

247 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

248 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

249 
ngx_¥o˚s£s
[
s
].
dëached
 = 1;

253 i‡(
s
 =
ngx_œ°_¥o˚ss
) {

254 
ngx_œ°_¥o˚ss
++;

257  
pid
;

258 
	}
}

261 
ngx_pid_t


262 
	$ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
)

264  
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_execuã_¥oc
, 
˘x
, ctx->
«me
,

265 
NGX_PROCESS_DETACHED
);

266 
	}
}

270 
	$ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

272 
ngx_exec_˘x_t
 *
˘x
 = 
d©a
;

274 i‡(
	`execve
(
˘x
->
∑th
, ctx->
¨gv
, ctx->
ívp
) == -1) {

275 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

277 
˘x
->
«me
, ctx->
∑th
);

280 
	`exô
(1);

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_öô_sig«ls
(
ngx_log_t
 *
log
)

287 
ngx_sig«l_t
 *
sig
;

288 
siga˘i⁄
 
ß
;

290 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

291 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

293 i‡(
sig
->
h™dÀr
) {

294 
ß
.
ß_siga˘i⁄
 = 
sig
->
h™dÀr
;

295 
ß
.
ß_Êags
 = 
SA_SIGINFO
;

298 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

301 
	`sigem±y£t
(&
ß
.
ß_mask
);

302 i‡(
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
) == -1) {

303 #i‡(
NGX_VALGRIND
)

304 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

305 "siga˘i⁄(%sËÁûed, ign‹ed", 
sig
->
sig«me
);

307 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

308 "siga˘i⁄(%sËÁûed", 
sig
->
sig«me
);

309  
NGX_ERROR
;

314  
NGX_OK
;

315 
	}
}

319 
	$ngx_sig«l_h™dÀr
(
signo
, 
sigöfo_t
 *
sigöfo
, *
uc⁄ãxt
)

321 *
a˘i⁄
;

322 
ngx_öt_t
 
ign‹e
;

323 
ngx_îr_t
 
îr
;

324 
ngx_sig«l_t
 *
sig
;

326 
ign‹e
 = 0;

328 
îr
 = 
ngx_î∫o
;

330 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

331 i‡(
sig
->
signo
 == signo) {

336 
	`ngx_time_sigß„_upd©e
();

338 
a˘i⁄
 = "";

340 
ngx_¥o˚ss
) {

342 
NGX_PROCESS_MASTER
:

343 
NGX_PROCESS_SINGLE
:

344 
signo
) {

346 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

347 
ngx_quô
 = 1;

348 
a˘i⁄
 = ", shutting down";

351 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

352 
SIGINT
:

353 
ngx_ãrmö©e
 = 1;

354 
a˘i⁄
 = ",Éxiting";

357 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

358 i‡(
ngx_d´m⁄ized
) {

359 
ngx_nﬂc˚±
 = 1;

360 
a˘i⁄
 = ", stopáccepting connections";

364 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

365 
ngx_ªc⁄figuª
 = 1;

366 
a˘i⁄
 = ",Ñeconfiguring";

369 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

370 
ngx_ª›í
 = 1;

371 
a˘i⁄
 = ",ÑeopeningÜogs";

374 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

375 i‡(
	`ngx_gëµid
(Ë=
ngx_∑ª¡
 || 
ngx_√w_bö¨y
 > 0) {

384 
a˘i⁄
 = ", ignoring";

385 
ign‹e
 = 1;

389 
ngx_ch™ge_bö¨y
 = 1;

390 
a˘i⁄
 = ", changing binary";

393 
SIGALRM
:

394 
ngx_sigÆrm
 = 1;

397 
SIGIO
:

398 
ngx_sigio
 = 1;

401 
SIGCHLD
:

402 
ngx_ª≠
 = 1;

408 
NGX_PROCESS_WORKER
:

409 
NGX_PROCESS_HELPER
:

410 
signo
) {

412 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

413 i‡(!
ngx_d´m⁄ized
) {

416 
ngx_debug_quô
 = 1;

418 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

419 
ngx_quô
 = 1;

420 
a˘i⁄
 = ", shutting down";

423 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

424 
SIGINT
:

425 
ngx_ãrmö©e
 = 1;

426 
a˘i⁄
 = ",Éxiting";

429 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

430 
ngx_ª›í
 = 1;

431 
a˘i⁄
 = ",ÑeopeningÜogs";

434 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

435 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

436 
SIGIO
:

437 
a˘i⁄
 = ", ignoring";

444 i‡(
sigöfo
 && sigöfo->
si_pid
) {

445 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

447 
signo
, 
sig
->
sig«me
, 
sigöfo
->
si_pid
, 
a˘i⁄
);

450 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

452 
signo
, 
sig
->
sig«me
, 
a˘i⁄
);

455 i‡(
ign‹e
) {

456 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 0,

462 i‡(
signo
 =
SIGCHLD
) {

463 
	`ngx_¥o˚ss_gë_°©us
();

466 
	`ngx_£t_î∫o
(
îr
);

467 
	}
}

471 
	$ngx_¥o˚ss_gë_°©us
()

473 
°©us
;

474 *
¥o˚ss
;

475 
ngx_pid_t
 
pid
;

476 
ngx_îr_t
 
îr
;

477 
ngx_öt_t
 
i
;

478 
ngx_uöt_t
 
⁄e
;

480 
⁄e
 = 0;

483 
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
);

485 i‡(
pid
 == 0) {

489 i‡(
pid
 == -1) {

490 
îr
 = 
ngx_î∫o
;

492 i‡(
îr
 =
NGX_EINTR
) {

496 i‡(
îr
 =
NGX_ECHILD
 && 
⁄e
) {

509 i‡(
îr
 =
NGX_ECHILD
) {

510 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ngx_cy˛e
->
log
, 
îr
,

515 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

521 
⁄e
 = 1;

522 
¥o˚ss
 = "unknownÖrocess";

524 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

525 i‡(
ngx_¥o˚s£s
[
i
].
pid
 ==Öid) {

526 
ngx_¥o˚s£s
[
i
].
°©us
 = status;

527 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

528 
¥o˚ss
 = 
ngx_¥o˚s£s
[
i
].
«me
;

533 i‡(
	`WTERMSIG
(
°©us
)) {

534 #ifde‡
WCOREDUMP


535 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

537 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
),

538 
	`WCOREDUMP
(
°©us
) ? " (core dumped)" : "");

540 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

542 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
));

546 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

548 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

551 i‡(
	`WEXITSTATUS
(
°©us
Ë=2 && 
ngx_¥o˚s£s
[
i
].
ª•awn
) {

552 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

555 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

556 
ngx_¥o˚s£s
[
i
].
ª•awn
 = 0;

559 
	`ngx_u∆ock_muãxes
(
pid
);

561 
	}
}

565 
	$ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
)

567 
ngx_uöt_t
 
i
;

568 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

569 
ngx_li°_∑π_t
 *
∑π
;

570 
ngx_¶ab_poﬁ_t
 *
•
;

577 i‡(
ngx_ac˚±_muãx_±r
) {

578 (Ë
	`ngx_shmtx_f‹˚_u∆ock
(&
ngx_ac˚±_muãx
, 
pid
);

586 
∑π
 = (
ngx_li°_∑π_t
 *Ë&
ngx_cy˛e
->
sh¨ed_mem‹y
.part;

587 
shm_z⁄e
 = 
∑π
->
ñts
;

589 
i
 = 0; ; i++) {

591 i‡(
i
 >
∑π
->
√…s
) {

592 i‡(
∑π
->
√xt
 =
NULL
) {

595 
∑π
 =Ö¨t->
√xt
;

596 
shm_z⁄e
 = 
∑π
->
ñts
;

597 
i
 = 0;

600 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
[
i
].
shm
.
addr
;

602 i‡(
	`ngx_shmtx_f‹˚_u∆ock
(&
•
->
muãx
, 
pid
)) {

603 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

605 &
shm_z⁄e
[
i
].
shm
.
«me
, 
pid
);

608 
	}
}

612 
	$ngx_debug_poöt
()

614 
ngx_c‹e_c⁄f_t
 *
ccf
;

616 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

617 
ngx_c‹e_moduÀ
);

619 
ccf
->
debug_poöts
) {

621 
NGX_DEBUG_POINTS_STOP
:

622 
	`øi£
(
SIGSTOP
);

625 
NGX_DEBUG_POINTS_ABORT
:

626 
	`ngx_ab‹t
();

628 
	}
}

631 
ngx_öt_t


632 
	$ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
«me
, 
ngx_pid_t
 
pid
)

634 
ngx_sig«l_t
 *
sig
;

636 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

637 i‡(
	`ngx_°rcmp
(
«me
, 
sig
->name) == 0) {

638 i‡(
	`kûl
(
pid
, 
sig
->
signo
) != -1) {

642 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

643 "kûl(%P, %dËÁûed", 
pid
, 
sig
->
signo
);

648 
	}
}

	@src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£èfföôy.h
>

13 
	~<ngx_£çro˘ôÀ.h
>

16 
pid_t
 
	tngx_pid_t
;

18 
	#NGX_INVALID_PID
 -1

	)

20 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

23 
ngx_pid_t
 
pid
;

24 
°©us
;

25 
ngx_sockë_t
 
ch™√l
[2];

27 
ngx_•awn_¥oc_±
 
¥oc
;

28 *
d©a
;

29 *
«me
;

31 
ª•awn
:1;

32 
ju°_•awn
:1;

33 
dëached
:1;

34 
exôög
:1;

35 
exôed
:1;

36 } 
	tngx_¥o˚ss_t
;

40 *
∑th
;

41 *
«me
;

42 *c⁄° *
¨gv
;

43 *c⁄° *
ívp
;

44 } 
	tngx_exec_˘x_t
;

47 
	#NGX_MAX_PROCESSES
 1024

	)

49 
	#NGX_PROCESS_NORESPAWN
 -1

	)

50 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

51 
	#NGX_PROCESS_RESPAWN
 -3

	)

52 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

53 
	#NGX_PROCESS_DETACHED
 -5

	)

56 
	#ngx_gëpid
 
gëpid


	)

57 
	#ngx_gëµid
 
gëµid


	)

59 #i‚de‡
ngx_log_pid


60 
	#ngx_log_pid
 
ngx_pid


	)

64 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

65 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

66 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

67 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

68 
	`ngx_debug_poöt
();

71 #i‡(
NGX_HAVE_SCHED_YIELD
)

72 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

74 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

78 
ngx_¨gc
;

79 **
ngx_¨gv
;

80 **
ngx_os_¨gv
;

82 
ngx_pid_t
 
ngx_pid
;

83 
ngx_pid_t
 
ngx_∑ª¡
;

84 
ngx_sockë_t
 
ngx_ch™√l
;

85 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

86 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

87 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@src/os/unix/ngx_process_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

14 
ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,

15 
ngx_öt_t
 
ty≥
);

16 
ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
,

17 
ngx_uöt_t
 
ª•awn
);

18 
ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
);

19 
ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
);

20 
ngx_uöt_t
 
ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

23 
ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
);

24 
ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

27 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

28 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

31 
ngx_uöt_t
 
	gngx_¥o˚ss
;

32 
ngx_uöt_t
 
	gngx_w‹kî
;

33 
ngx_pid_t
 
	gngx_pid
;

34 
ngx_pid_t
 
	gngx_∑ª¡
;

36 
sig_©omic_t
 
	gngx_ª≠
;

37 
sig_©omic_t
 
	gngx_sigio
;

38 
sig_©omic_t
 
	gngx_sigÆrm
;

39 
sig_©omic_t
 
	gngx_ãrmö©e
;

40 
sig_©omic_t
 
	gngx_quô
;

41 
sig_©omic_t
 
	gngx_debug_quô
;

42 
ngx_uöt_t
 
	gngx_exôög
;

43 
sig_©omic_t
 
	gngx_ªc⁄figuª
;

44 
sig_©omic_t
 
	gngx_ª›í
;

46 
sig_©omic_t
 
	gngx_ch™ge_bö¨y
;

47 
ngx_pid_t
 
	gngx_√w_bö¨y
;

48 
ngx_uöt_t
 
	gngx_öhîôed
;

49 
ngx_uöt_t
 
	gngx_d´m⁄ized
;

51 
sig_©omic_t
 
	gngx_nﬂc˚±
;

52 
ngx_uöt_t
 
	gngx_nﬂc˚±ög
;

53 
ngx_uöt_t
 
	gngx_ª°¨t
;

56 
u_ch¨
 
	gma°î_¥o˚ss
[] = "masterÖrocess";

59 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_m™agî_˘x
 = {

60 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
, "cache managerÖrocess", 0

63 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_lﬂdî_˘x
 = {

64 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
, "cacheÜoaderÖrocess", 60000

68 
ngx_cy˛e_t
 
	gngx_exô_cy˛e
;

69 
ngx_log_t
 
	gngx_exô_log
;

70 
ngx_›í_fûe_t
 
	gngx_exô_log_fûe
;

74 
	$ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

76 *
tôÀ
;

77 
u_ch¨
 *
p
;

78 
size_t
 
size
;

79 
ngx_öt_t
 
i
;

80 
ngx_uöt_t
 
n
, 
sigio
;

81 
sig£t_t
 
£t
;

82 
ôimîvÆ
 
ôv
;

83 
ngx_uöt_t
 
live
;

84 
ngx_m£c_t
 
dñay
;

85 
ngx_li°íög_t
 *
ls
;

86 
ngx_c‹e_c⁄f_t
 *
ccf
;

88 
	`sigem±y£t
(&
£t
);

89 
	`sigadd£t
(&
£t
, 
SIGCHLD
);

90 
	`sigadd£t
(&
£t
, 
SIGALRM
);

91 
	`sigadd£t
(&
£t
, 
SIGIO
);

92 
	`sigadd£t
(&
£t
, 
SIGINT
);

93 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

94 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

95 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
));

96 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

97 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

98 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

100 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

101 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

105 
	`sigem±y£t
(&
£t
);

108 
size
 = (
ma°î_¥o˚ss
);

110 
i
 = 0; i < 
ngx_¨gc
; i++) {

111 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

114 
tôÀ
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
size
);

115 i‡(
tôÀ
 =
NULL
) {

117 
	`exô
(2);

120 
p
 = 
	`ngx_˝ymem
(
tôÀ
, 
ma°î_¥o˚ss
, (master_process) - 1);

121 
i
 = 0; i < 
ngx_¨gc
; i++) {

122 *
p
++ = ' ';

123 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
], 
size
);

126 
	`ngx_£çro˘ôÀ
(
tôÀ
);

129 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

131 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

132 
NGX_PROCESS_RESPAWN
);

133 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

135 
ngx_√w_bö¨y
 = 0;

136 
dñay
 = 0;

137 
sigio
 = 0;

138 
live
 = 1;

141 i‡(
dñay
) {

142 i‡(
ngx_sigÆrm
) {

143 
sigio
 = 0;

144 
dñay
 *= 2;

145 
ngx_sigÆrm
 = 0;

148 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

149 "ãrmö©i⁄ cy˛e: %M", 
dñay
);

151 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 0;

152 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = 0;

153 
ôv
.
ô_vÆue
.
tv_£c
 = 
dñay
 / 1000;

154 
ôv
.
ô_vÆue
.
tv_u£c
 = (
dñay
 % 1000 ) * 1000;

156 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

157 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

162 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "sigsuspend");

164 
	`sigsu•íd
(&
£t
);

166 
	`ngx_time_upd©e
();

168 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

169 "wakêup, sigiÿ%i", 
sigio
);

171 i‡(
ngx_ª≠
) {

172 
ngx_ª≠
 = 0;

173 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "reap children");

175 
live
 = 
	`ngx_ª≠_chûdªn
(
cy˛e
);

178 i‡(!
live
 && (
ngx_ãrmö©e
 || 
ngx_quô
)) {

179 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

182 i‡(
ngx_ãrmö©e
) {

183 i‡(
dñay
 == 0) {

184 
dñay
 = 50;

187 i‡(
sigio
) {

188 
sigio
--;

192 
sigio
 = 
ccf
->
w‹kî_¥o˚s£s
 + 2 ;

194 i‡(
dñay
 > 1000) {

195 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
, 
SIGKILL
);

197 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

198 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

204 i‡(
ngx_quô
) {

205 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

206 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

208 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

209 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

210 i‡(
	`ngx_˛o£_sockë
(
ls
[
n
].
fd
) == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

212 
ngx_˛o£_sockë_n
 " %V failed",

213 &
ls
[
n
].
addr_ãxt
);

216 
cy˛e
->
li°íög
.
√…s
 = 0;

221 i‡(
ngx_ªc⁄figuª
) {

222 
ngx_ªc⁄figuª
 = 0;

224 i‡(
ngx_√w_bö¨y
) {

225 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

226 
NGX_PROCESS_RESPAWN
);

227 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

228 
ngx_nﬂc˚±ög
 = 0;

233 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

235 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

236 i‡(
cy˛e
 =
NULL
) {

237 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

241 
ngx_cy˛e
 = 
cy˛e
;

242 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

243 
ngx_c‹e_moduÀ
);

244 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

245 
NGX_PROCESS_JUST_RESPAWN
);

246 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 1);

249 
	`ngx_m¶ìp
(100);

251 
live
 = 1;

252 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

253 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

256 i‡(
ngx_ª°¨t
) {

257 
ngx_ª°¨t
 = 0;

258 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

259 
NGX_PROCESS_RESPAWN
);

260 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

261 
live
 = 1;

264 i‡(
ngx_ª›í
) {

265 
ngx_ª›í
 = 0;

266 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

267 
	`ngx_ª›í_fûes
(
cy˛e
, 
ccf
->
u£r
);

268 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

269 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

272 i‡(
ngx_ch™ge_bö¨y
) {

273 
ngx_ch™ge_bö¨y
 = 0;

274 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "changing binary");

275 
ngx_√w_bö¨y
 = 
	`ngx_exec_√w_bö¨y
(
cy˛e
, 
ngx_¨gv
);

278 i‡(
ngx_nﬂc˚±
) {

279 
ngx_nﬂc˚±
 = 0;

280 
ngx_nﬂc˚±ög
 = 1;

281 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

282 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

285 
	}
}

289 
	$ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

291 
ngx_uöt_t
 
i
;

293 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

295 
	`exô
(2);

298 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

299 i‡(
cy˛e
->
moduÀs
[
i
]->
öô_¥o˚ss
) {

300 i‡(
cy˛e
->
moduÀs
[
i
]->
	`öô_¥o˚ss
(cy˛eË=
NGX_ERROR
) {

302 
	`exô
(2);

308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

310 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

312 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

314 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

315 i‡(
cy˛e
->
moduÀs
[
i
]->
exô_¥o˚ss
) {

316 
cy˛e
->
moduÀs
[
i
]->
	`exô_¥o˚ss
(cycle);

320 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

323 i‡(
ngx_ªc⁄figuª
) {

324 
ngx_ªc⁄figuª
 = 0;

325 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

327 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

328 i‡(
cy˛e
 =
NULL
) {

329 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

333 
ngx_cy˛e
 = 
cy˛e
;

336 i‡(
ngx_ª›í
) {

337 
ngx_ª›í
 = 0;

338 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

339 
	`ngx_ª›í_fûes
(
cy˛e
, (
ngx_uid_t
) -1);

342 
	}
}

346 
	$ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,Çgx_öt_à
ty≥
)

348 
ngx_öt_t
 
i
;

349 
ngx_ch™√l_t
 
ch
;

351 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "start workerÖrocesses");

353 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

355 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

357 
i
 = 0; i < 
n
; i++) {

359 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_w‹kî_¥o˚ss_cy˛e
,

360 (*Ë(
öçå_t
Ë
i
, "w‹kîÖro˚ss", 
ty≥
);

362 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

363 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

364 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

366 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

368 
	}
}

372 
	$ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ª•awn
)

374 
ngx_uöt_t
 
i
, 
m™agî
, 
lﬂdî
;

375 
ngx_∑th_t
 **
∑th
;

376 
ngx_ch™√l_t
 
ch
;

378 
m™agî
 = 0;

379 
lﬂdî
 = 0;

381 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

382 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

384 i‡(
∑th
[
i
]->
m™agî
) {

385 
m™agî
 = 1;

388 i‡(
∑th
[
i
]->
lﬂdî
) {

389 
lﬂdî
 = 1;

393 i‡(
m™agî
 == 0) {

397 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

398 &
ngx_ˇche_m™agî_˘x
, "cache managerÖrocess",

399 
ª•awn
 ? 
NGX_PROCESS_JUST_RESPAWN
 : 
NGX_PROCESS_RESPAWN
);

401 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

403 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

404 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

405 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

406 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

408 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

410 i‡(
lﬂdî
 == 0) {

414 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

415 &
ngx_ˇche_lﬂdî_˘x
, "cacheÜoaderÖrocess",

416 
ª•awn
 ? 
NGX_PROCESS_JUST_SPAWN
 : 
NGX_PROCESS_NORESPAWN
);

418 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

419 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

420 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

421 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

423 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

424 
	}
}

428 
	$ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
)

430 
ngx_öt_t
 
i
;

432 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

434 i‡(
i
 =
ngx_¥o˚ss_¶Ÿ


435 || 
ngx_¥o˚s£s
[
i
].
pid
 == -1

436 || 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] == -1)

441 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

443 
ch
->
¶Ÿ
, ch->
pid
, ch->
fd
,

444 
i
, 
ngx_¥o˚s£s
[i].
pid
,

445 
ngx_¥o˚s£s
[
i
].
ch™√l
[0]);

449 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

450 
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

452 
	}
}

456 
	$ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
)

458 
ngx_öt_t
 
i
;

459 
ngx_îr_t
 
îr
;

460 
ngx_ch™√l_t
 
ch
;

462 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

464 #i‡(
NGX_BROKEN_SCM_RIGHTS
)

466 
ch
.
comm™d
 = 0;

470 
signo
) {

472 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

473 
ch
.
comm™d
 = 
NGX_CMD_QUIT
;

476 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

477 
ch
.
comm™d
 = 
NGX_CMD_TERMINATE
;

480 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

481 
ch
.
comm™d
 = 
NGX_CMD_REOPEN
;

485 
ch
.
comm™d
 = 0;

490 
ch
.
fd
 = -1;

493 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

495 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

497 
i
,

498 
ngx_¥o˚s£s
[
i
].
pid
,

499 
ngx_¥o˚s£s
[
i
].
exôög
,

500 
ngx_¥o˚s£s
[
i
].
exôed
,

501 
ngx_¥o˚s£s
[
i
].
dëached
,

502 
ngx_¥o˚s£s
[
i
].
ª•awn
,

503 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

505 i‡(
ngx_¥o˚s£s
[
i
].
dëached
 ||Çgx_¥o˚s£s[i].
pid
 == -1) {

509 i‡(
ngx_¥o˚s£s
[
i
].
ju°_•awn
) {

510 
ngx_¥o˚s£s
[
i
].
ju°_•awn
 = 0;

514 i‡(
ngx_¥o˚s£s
[
i
].
exôög


515 && 
signo
 =
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
))

520 i‡(
ch
.
comm™d
) {

521 i‡(
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

522 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
)

523 =
NGX_OK
)

525 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

526 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

533 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

534 "kû»(%P, %d)", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

536 i‡(
	`kûl
(
ngx_¥o˚s£s
[
i
].
pid
, 
signo
) == -1) {

537 
îr
 = 
ngx_î∫o
;

538 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

539 "kûl(%P, %dËÁûed", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

541 i‡(
îr
 =
NGX_ESRCH
) {

542 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

543 
ngx_¥o˚s£s
[
i
].
exôög
 = 0;

544 
ngx_ª≠
 = 1;

550 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

551 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

554 
	}
}

557 
ngx_uöt_t


558 
	$ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
)

560 
ngx_öt_t
 
i
, 
n
;

561 
ngx_uöt_t
 
live
;

562 
ngx_ch™√l_t
 
ch
;

563 
ngx_c‹e_c⁄f_t
 *
ccf
;

565 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

567 
ch
.
comm™d
 = 
NGX_CMD_CLOSE_CHANNEL
;

568 
ch
.
fd
 = -1;

570 
live
 = 0;

571 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

573 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

575 
i
,

576 
ngx_¥o˚s£s
[
i
].
pid
,

577 
ngx_¥o˚s£s
[
i
].
exôög
,

578 
ngx_¥o˚s£s
[
i
].
exôed
,

579 
ngx_¥o˚s£s
[
i
].
dëached
,

580 
ngx_¥o˚s£s
[
i
].
ª•awn
,

581 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

583 i‡(
ngx_¥o˚s£s
[
i
].
pid
 == -1) {

587 i‡(
ngx_¥o˚s£s
[
i
].
exôed
) {

589 i‡(!
ngx_¥o˚s£s
[
i
].
dëached
) {

590 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
, 
cy˛e
->
log
);

592 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] = -1;

593 
ngx_¥o˚s£s
[
i
].
ch™√l
[1] = -1;

595 
ch
.
pid
 = 
ngx_¥o˚s£s
[
i
].pid;

596 
ch
.
¶Ÿ
 = 
i
;

598 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

599 i‡(
ngx_¥o˚s£s
[
n
].
exôed


600 || 
ngx_¥o˚s£s
[
n
].
pid
 == -1

601 || 
ngx_¥o˚s£s
[
n
].
ch™√l
[0] == -1)

606 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

608 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[
n
].pid);

612 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
n
].
ch™√l
[0],

613 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

617 i‡(
ngx_¥o˚s£s
[
i
].
ª•awn


618 && !
ngx_¥o˚s£s
[
i
].
exôög


619 && !
ngx_ãrmö©e


620 && !
ngx_quô
)

622 i‡(
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_¥o˚s£s
[
i
].
¥oc
,

623 
ngx_¥o˚s£s
[
i
].
d©a
,

624 
ngx_¥o˚s£s
[
i
].
«me
, i)

625 =
NGX_INVALID_PID
)

627 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

629 
ngx_¥o˚s£s
[
i
].
«me
);

634 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

635 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

636 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

637 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

639 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

641 
live
 = 1;

646 i‡(
ngx_¥o˚s£s
[
i
].
pid
 =
ngx_√w_bö¨y
) {

648 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

649 
ngx_c‹e_moduÀ
);

651 i‡(
	`ngx_ª«me_fûe
((*Ë
ccf
->
ﬁdpid
.
d©a
,

652 (*Ë
ccf
->
pid
.
d©a
)

653 =
NGX_FILE_ERROR
)

655 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

656 
ngx_ª«me_fûe_n
 " %s backÅo %s failed "

658 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
ngx_¨gv
[0]);

661 
ngx_√w_bö¨y
 = 0;

662 i‡(
ngx_nﬂc˚±ög
) {

663 
ngx_ª°¨t
 = 1;

664 
ngx_nﬂc˚±ög
 = 0;

668 i‡(
i
 =
ngx_œ°_¥o˚ss
 - 1) {

669 
ngx_œ°_¥o˚ss
--;

672 
ngx_¥o˚s£s
[
i
].
pid
 = -1;

675 } i‡(
ngx_¥o˚s£s
[
i
].
exôög
 || !ngx_¥o˚s£s[i].
dëached
) {

676 
live
 = 1;

680  
live
;

681 
	}
}

685 
	$ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

687 
ngx_uöt_t
 
i
;

689 
	`ngx_dñëe_pidfûe
(
cy˛e
);

691 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exit");

693 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

694 i‡(
cy˛e
->
moduÀs
[
i
]->
exô_ma°î
) {

695 
cy˛e
->
moduÀs
[
i
]->
	`exô_ma°î
(cycle);

699 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

709 
ngx_exô_log
 = *
	`ngx_log_gë_fûe_log
(
ngx_cy˛e
->
log
);

711 
ngx_exô_log_fûe
.
fd
 = 
ngx_exô_log
.
fûe
->fd;

712 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

713 
ngx_exô_log
.
√xt
 = 
NULL
;

714 
ngx_exô_log
.
wrôî
 = 
NULL
;

716 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

717 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

718 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

719 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

721 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

723 
	`exô
(0);

724 
	}
}

728 
	$ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

730 
ngx_öt_t
 
w‹kî
 = (
öçå_t
Ë
d©a
;

732 
ngx_¥o˚ss
 = 
NGX_PROCESS_WORKER
;

733 
ngx_w‹kî
 = 
w‹kî
;

735 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 
w‹kî
);

737 
	`ngx_£çro˘ôÀ
("workerÖrocess");

741 i‡(
ngx_exôög
) {

742 i‡(
	`ngx_evít_no_timîs_À·
(Ë=
NGX_OK
) {

743 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

744 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

748 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

750 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

752 i‡(
ngx_ãrmö©e
) {

753 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

754 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

757 i‡(
ngx_quô
) {

758 
ngx_quô
 = 0;

759 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

761 
	`ngx_£çro˘ôÀ
("workerÖrocess is shutting down");

763 i‡(!
ngx_exôög
) {

764 
ngx_exôög
 = 1;

765 
	`ngx_£t_shutdown_timî
(
cy˛e
);

766 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

767 
	`ngx_˛o£_idÀ_c⁄√˘i⁄s
(
cy˛e
);

771 i‡(
ngx_ª›í
) {

772 
ngx_ª›í
 = 0;

773 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

774 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

777 
	}
}

781 
	$ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
)

783 
sig£t_t
 
£t
;

784 
ngx_öt_t
 
n
;

785 
ngx_time_t
 *
ç
;

786 
ngx_uöt_t
 
i
;

787 
ngx_˝u£t_t
 *
˝u_afföôy
;

788 
æimô
 
æmt
;

789 
ngx_c‹e_c⁄f_t
 *
ccf
;

790 
ngx_li°íög_t
 *
ls
;

792 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

794 
	`exô
(2);

797 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

799 i‡(
w‹kî
 >0 && 
ccf
->
¥i‹ôy
 != 0) {

800 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ccf
->
¥i‹ôy
) == -1) {

801 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

802 "£çri‹ôy(%dËÁûed", 
ccf
->
¥i‹ôy
);

806 i‡(
ccf
->
æimô_nofûe
 !
NGX_CONF_UNSET
) {

807 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

808 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

810 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

811 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

813 
ccf
->
æimô_nofûe
);

817 i‡(
ccf
->
æimô_c‹e
 !
NGX_CONF_UNSET
) {

818 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

819 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

821 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æmt
) == -1) {

822 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

824 
ccf
->
æimô_c‹e
);

828 i‡(
	`gëeuid
() == 0) {

829 i‡(
	`£tgid
(
ccf
->
group
) == -1) {

830 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

831 "£tgid(%dËÁûed", 
ccf
->
group
);

833 
	`exô
(2);

836 i‡(
	`öôgroups
(
ccf
->
u£∫ame
, ccf->
group
) == -1) {

837 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

839 
ccf
->
u£∫ame
, ccf->
group
);

842 #i‡(
NGX_HAVE_PR_SET_KEEPCAPS
 && 
NGX_HAVE_CAPABILITIES
)

843 i‡(
ccf
->
å™•¨ít
 && ccf->
u£r
) {

844 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 1, 0, 0, 0) == -1) {

845 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

848 
	`exô
(2);

853 i‡(
	`£tuid
(
ccf
->
u£r
) == -1) {

854 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

855 "£tuid(%dËÁûed", 
ccf
->
u£r
);

857 
	`exô
(2);

860 #i‡(
NGX_HAVE_CAPABILITIES
)

861 i‡(
ccf
->
å™•¨ít
 && ccf->
u£r
) {

862 
__u£r_ˇp_d©a_°ru˘
 
d©a
;

863 
__u£r_ˇp_hódî_°ru˘
 
hódî
;

865 
	`ngx_memzîo
(&
hódî
, (
__u£r_ˇp_hódî_°ru˘
));

866 
	`ngx_memzîo
(&
d©a
, (
__u£r_ˇp_d©a_°ru˘
));

868 
hódî
.
vîsi⁄
 = 
_LINUX_CAPABILITY_VERSION_1
;

869 
d©a
.
ef„˘ive
 = 
	`CAP_TO_MASK
(
CAP_NET_RAW
);

870 
d©a
.
≥rmôãd
 = d©a.
ef„˘ive
;

872 i‡(
	`sysˇŒ
(
SYS_ˇp£t
, &
hódî
, &
d©a
) == -1) {

873 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

876 
	`exô
(2);

882 i‡(
w‹kî
 >= 0) {

883 
˝u_afföôy
 = 
	`ngx_gë_˝u_afföôy
(
w‹kî
);

885 i‡(
˝u_afföôy
) {

886 
	`ngx_£èfföôy
(
˝u_afföôy
, 
cy˛e
->
log
);

890 #i‡(
NGX_HAVE_PR_SET_DUMPABLE
)

894 i‡(
	`¥˘l
(
PR_SET_DUMPABLE
, 1, 0, 0, 0) == -1) {

895 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

901 i‡(
ccf
->
w‹kög_dúe˘‹y
.
Àn
) {

902 i‡(
	`chdú
((*Ë
ccf
->
w‹kög_dúe˘‹y
.
d©a
) == -1) {

903 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

904 "chdú(\"%s\"ËÁûed", 
ccf
->
w‹kög_dúe˘‹y
.
d©a
);

906 
	`exô
(2);

910 
	`sigem±y£t
(&
£t
);

912 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
£t
, 
NULL
) == -1) {

913 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

917 
ç
 = 
	`ngx_timeofday
();

918 
	`§™dom
(((Ë
ngx_pid
 << 16Ë^ 
ç
->
£c
 ^Åp->
m£c
);

924 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

925 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

926 
ls
[
i
].
¥evious
 = 
NULL
;

929 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

930 i‡(
cy˛e
->
moduÀs
[
i
]->
öô_¥o˚ss
) {

931 i‡(
cy˛e
->
moduÀs
[
i
]->
	`öô_¥o˚ss
(cy˛eË=
NGX_ERROR
) {

933 
	`exô
(2);

938 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

940 i‡(
ngx_¥o˚s£s
[
n
].
pid
 == -1) {

944 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

948 i‡(
ngx_¥o˚s£s
[
n
].
ch™√l
[1] == -1) {

952 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
n
].
ch™√l
[1]) == -1) {

953 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

958 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0]) == -1) {

959 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

964 
ngx_œ°_¥o˚ss
 = 0;

967 i‡(
	`ngx_add_ch™√l_evít
(
cy˛e
, 
ngx_ch™√l
, 
NGX_READ_EVENT
,

968 
ngx_ch™√l_h™dÀr
)

969 =
NGX_ERROR
)

972 
	`exô
(2);

974 
	}
}

978 
	$ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

980 
ngx_uöt_t
 
i
;

981 
ngx_c⁄√˘i⁄_t
 *
c
;

983 
i
 = 0; 
cy˛e
->
moduÀs
[i]; i++) {

984 i‡(
cy˛e
->
moduÀs
[
i
]->
exô_¥o˚ss
) {

985 
cy˛e
->
moduÀs
[
i
]->
	`exô_¥o˚ss
(cycle);

989 i‡(
ngx_exôög
) {

990 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

991 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

992 i‡(
c
[
i
].
fd
 != -1

993 && 
c
[
i
].
ªad


994 && !
c
[
i
].
ªad
->
ac˚±


995 && !
c
[
i
].
ªad
->
ch™√l


996 && !
c
[
i
].
ªad
->
ªsﬁvî
)

998 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1000 
c
[
i
].
numbî
, c[i].
fd
, i);

1001 
ngx_debug_quô
 = 1;

1005 i‡(
ngx_debug_quô
) {

1006 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "aborting");

1007 
	`ngx_debug_poöt
();

1018 
ngx_exô_log
 = *
	`ngx_log_gë_fûe_log
(
ngx_cy˛e
->
log
);

1020 
ngx_exô_log_fûe
.
fd
 = 
ngx_exô_log
.
fûe
->fd;

1021 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

1022 
ngx_exô_log
.
√xt
 = 
NULL
;

1023 
ngx_exô_log
.
wrôî
 = 
NULL
;

1025 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

1026 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

1027 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

1028 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

1030 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

1032 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0, "exit");

1034 
	`exô
(0);

1035 
	}
}

1039 
	$ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
)

1041 
ngx_öt_t
 
n
;

1042 
ngx_ch™√l_t
 
ch
;

1043 
ngx_c⁄√˘i⁄_t
 *
c
;

1045 i‡(
ev
->
timedout
) {

1046 
ev
->
timedout
 = 0;

1050 
c
 = 
ev
->
d©a
;

1052 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "channel handler");

1056 
n
 = 
	`ngx_ªad_ch™√l
(
c
->
fd
, &
ch
, (
ngx_ch™√l_t
), 
ev
->
log
);

1058 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "ch™√l: %i", 
n
);

1060 i‡(
n
 =
NGX_ERROR
) {

1062 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1063 
	`ngx_dñ_c⁄n
(
c
, 0);

1066 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1070 i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

1071 i‡(
	`ngx_add_evít
(
ev
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

1076 i‡(
n
 =
NGX_AGAIN
) {

1080 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1081 "ch™√»comm™d: %ui", 
ch
.
comm™d
);

1083 
ch
.
comm™d
) {

1085 
NGX_CMD_QUIT
:

1086 
ngx_quô
 = 1;

1089 
NGX_CMD_TERMINATE
:

1090 
ngx_ãrmö©e
 = 1;

1093 
NGX_CMD_REOPEN
:

1094 
ngx_ª›í
 = 1;

1097 
NGX_CMD_OPEN_CHANNEL
:

1099 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1101 
ch
.
¶Ÿ
, ch.
pid
, ch.
fd
);

1103 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
pid
 = ch.pid;

1104 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = ch.
fd
;

1107 
NGX_CMD_CLOSE_CHANNEL
:

1109 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1111 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[ch.slot].pid,

1112 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]);

1114 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]) == -1) {

1115 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1119 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = -1;

1123 
	}
}

1127 
	$ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

1129 
ngx_ˇche_m™agî_˘x_t
 *
˘x
 = 
d©a
;

1131 *
idít
[4];

1132 
ngx_evít_t
 
ev
;

1138 
ngx_¥o˚ss
 = 
NGX_PROCESS_HELPER
;

1140 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

1143 
cy˛e
->
c⁄√˘i⁄_n
 = 512;

1145 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, -1);

1147 
	`ngx_memzîo
(&
ev
, (
ngx_evít_t
));

1148 
ev
.
h™dÀr
 = 
˘x
->handler;

1149 
ev
.
d©a
 = 
idít
;

1150 
ev
.
log
 = 
cy˛e
->log;

1151 
idít
[3] = (*) -1;

1153 
ngx_u£_ac˚±_muãx
 = 0;

1155 
	`ngx_£çro˘ôÀ
(
˘x
->
«me
);

1157 
	`ngx_add_timî
(&
ev
, 
˘x
->
dñay
);

1161 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1162 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

1163 
	`exô
(0);

1166 i‡(
ngx_ª›í
) {

1167 
ngx_ª›í
 = 0;

1168 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

1169 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

1172 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

1174 
	}
}

1178 
	$ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1180 
ngx_uöt_t
 
i
;

1181 
ngx_m£c_t
 
√xt
, 
n
;

1182 
ngx_∑th_t
 **
∑th
;

1184 
√xt
 = 60 * 60 * 1000;

1186 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

1187 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

1189 i‡(
∑th
[
i
]->
m™agî
) {

1190 
n
 = 
∑th
[
i
]->
	`m™agî
’©h[i]->
d©a
);

1192 
√xt
 = (
n
 <=Çext) ?Ç :Çext;

1194 
	`ngx_time_upd©e
();

1198 i‡(
√xt
 == 0) {

1199 
√xt
 = 1;

1202 
	`ngx_add_timî
(
ev
, 
√xt
);

1203 
	}
}

1207 
	$ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1209 
ngx_uöt_t
 
i
;

1210 
ngx_∑th_t
 **
∑th
;

1211 
ngx_cy˛e_t
 *
cy˛e
;

1213 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1215 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

1216 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

1218 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1222 i‡(
∑th
[
i
]->
lﬂdî
) {

1223 
∑th
[
i
]->
	`lﬂdî
’©h[i]->
d©a
);

1224 
	`ngx_time_upd©e
();

1228 
	`exô
(0);

1229 
	}
}

	@src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_uöt_t
 
ngx_w‹kî
;

43 
ngx_pid_t
 
ngx_pid
;

44 
ngx_pid_t
 
ngx_√w_bö¨y
;

45 
ngx_uöt_t
 
ngx_öhîôed
;

46 
ngx_uöt_t
 
ngx_d´m⁄ized
;

47 
ngx_uöt_t
 
ngx_exôög
;

49 
sig_©omic_t
 
ngx_ª≠
;

50 
sig_©omic_t
 
ngx_sigio
;

51 
sig_©omic_t
 
ngx_sigÆrm
;

52 
sig_©omic_t
 
ngx_quô
;

53 
sig_©omic_t
 
ngx_debug_quô
;

54 
sig_©omic_t
 
ngx_ãrmö©e
;

55 
sig_©omic_t
 
ngx_nﬂc˚±
;

56 
sig_©omic_t
 
ngx_ªc⁄figuª
;

57 
sig_©omic_t
 
ngx_ª›í
;

58 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@src/os/unix/ngx_readv_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
, 
off_t
 
limô
)

16 
u_ch¨
 *
¥ev
;

17 
ssize_t
 
n
, 
size
;

18 
ngx_îr_t
 
îr
;

19 
ngx_¨øy_t
 
vec
;

20 
ngx_evít_t
 *
ªv
;

21 
iovec
 *
iov
, 
iovs
[
NGX_IOVS_PREALLOCATE
];

23 
ªv
 = 
c
->
ªad
;

25 #i‡(
NGX_HAVE_KQUEUE
)

27 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

28 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

32 i‡(
ªv
->
avaûabÀ
 == 0) {

33 i‡(
ªv
->
≥ndög_eof
) {

34 
ªv
->
ªady
 = 0;

35 
ªv
->
eof
 = 1;

37 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

40 i‡(
ªv
->
kq_î∫o
) {

41 
ªv
->
îr‹
 = 1;

42 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

43  
NGX_ERROR
;

49  
NGX_AGAIN
;

56 #i‡(
NGX_HAVE_EPOLLRDHUP
)

58 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

59 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

61 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
);

63 i‡(!
ªv
->
avaûabÀ
 && !ªv->
≥ndög_eof
) {

64  
NGX_AGAIN
;

70 
¥ev
 = 
NULL
;

71 
iov
 = 
NULL
;

72 
size
 = 0;

74 
vec
.
ñts
 = 
iovs
;

75 
vec
.
√…s
 = 0;

76 
vec
.
size
 = (
iovec
);

77 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

78 
vec
.
poﬁ
 = 
c
->pool;

82 
chaö
) {

83 
n
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

85 i‡(
limô
) {

86 i‡(
size
 >
limô
) {

90 i‡(
size
 + 
n
 > 
limô
) {

91 
n
 = (
ssize_t
Ë(
limô
 - 
size
);

95 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

96 
iov
->
iov_Àn
 +
n
;

99 i‡(
vec
.
√…s
 >
IOV_MAX
) {

103 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

104 i‡(
iov
 =
NULL
) {

105  
NGX_ERROR
;

108 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

109 
iov
->
iov_Àn
 = 
n
;

112 
size
 +
n
;

113 
¥ev
 = 
chaö
->
buf
->
íd
;

114 
chaö
 = chaö->
√xt
;

117 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

118 "ªadv: %ui,Üa°:%uz", 
vec
.
√…s
, 
iov
->
iov_Àn
);

121 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

123 i‡(
n
 == 0) {

124 
ªv
->
ªady
 = 0;

125 
ªv
->
eof
 = 1;

127 #i‡(
NGX_HAVE_KQUEUE
)

134 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

135 
ªv
->
avaûabÀ
 = 0;

143 i‡(
n
 > 0) {

145 #i‡(
NGX_HAVE_KQUEUE
)

147 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

148 
ªv
->
avaûabÀ
 -
n
;

155 i‡(
ªv
->
avaûabÀ
 <= 0) {

156 i‡(!
ªv
->
≥ndög_eof
) {

157 
ªv
->
ªady
 = 0;

160 
ªv
->
avaûabÀ
 = 0;

163  
n
;

168 #i‡(
NGX_HAVE_EPOLLRDHUP
)

170 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
)

171 && 
ngx_u£_ïﬁl_rdhup
)

173 i‡(
n
 < 
size
) {

174 i‡(!
ªv
->
≥ndög_eof
) {

175 
ªv
->
ªady
 = 0;

178 
ªv
->
avaûabÀ
 = 0;

181  
n
;

186 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

187 
ªv
->
ªady
 = 0;

190  
n
;

193 
îr
 = 
ngx_sockë_î∫o
;

195 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

196 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

198 
n
 = 
NGX_AGAIN
;

201 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

205 } 
îr
 =
NGX_EINTR
);

207 
ªv
->
ªady
 = 0;

209 i‡(
n
 =
NGX_ERROR
) {

210 
c
->
ªad
->
îr‹
 = 1;

213  
n
;

214 
	}
}

	@src/os/unix/ngx_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
ªv
;

20 
ªv
 = 
c
->
ªad
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

29 i‡(
ªv
->
avaûabÀ
 == 0) {

30 i‡(
ªv
->
≥ndög_eof
) {

31 
ªv
->
ªady
 = 0;

32 
ªv
->
eof
 = 1;

34 i‡(
ªv
->
kq_î∫o
) {

35 
ªv
->
îr‹
 = 1;

36 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

38  
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ªv
->
kq_î∫o
,

45 
ªv
->
ªady
 = 0;

46  
NGX_AGAIN
;

53 #i‡(
NGX_HAVE_EPOLLRDHUP
)

55 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

58 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
);

60 i‡(!
ªv
->
avaûabÀ
 && !ªv->
≥ndög_eof
) {

61 
ªv
->
ªady
 = 0;

62  
NGX_AGAIN
;

69 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

71 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

72 "ªcv: fd:%d %z o‡%uz", 
c
->
fd
, 
n
, 
size
);

74 i‡(
n
 == 0) {

75 
ªv
->
ªady
 = 0;

76 
ªv
->
eof
 = 1;

78 #i‡(
NGX_HAVE_KQUEUE
)

85 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

86 
ªv
->
avaûabÀ
 = 0;

94 i‡(
n
 > 0) {

96 #i‡(
NGX_HAVE_KQUEUE
)

98 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

99 
ªv
->
avaûabÀ
 -
n
;

106 i‡(
ªv
->
avaûabÀ
 <= 0) {

107 i‡(!
ªv
->
≥ndög_eof
) {

108 
ªv
->
ªady
 = 0;

111 
ªv
->
avaûabÀ
 = 0;

114  
n
;

119 #i‡(
NGX_HAVE_EPOLLRDHUP
)

121 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
)

122 && 
ngx_u£_ïﬁl_rdhup
)

124 i‡((
size_t
Ë
n
 < 
size
) {

125 i‡(!
ªv
->
≥ndög_eof
) {

126 
ªv
->
ªady
 = 0;

129 
ªv
->
avaûabÀ
 = 0;

132  
n
;

137 i‡((
size_t
Ë
n
 < 
size


138 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

140 
ªv
->
ªady
 = 0;

143  
n
;

146 
îr
 = 
ngx_sockë_î∫o
;

148 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

151 
n
 = 
NGX_AGAIN
;

154 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

158 } 
îr
 =
NGX_EINTR
);

160 
ªv
->
ªady
 = 0;

162 i‡(
n
 =
NGX_ERROR
) {

163 
ªv
->
îr‹
 = 1;

166  
n
;

167 
	}
}

	@src/os/unix/ngx_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

25 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

27 
wev
->
îr‹
 = 1;

28  
NGX_ERROR
;

34 
n
 = 
	`£nd
(
c
->
fd
, 
buf
, 
size
, 0);

36 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

37 "£nd: fd:%d %z o‡%uz", 
c
->
fd
, 
n
, 
size
);

39 i‡(
n
 > 0) {

40 i‡(
n
 < (
ssize_t
Ë
size
) {

41 
wev
->
ªady
 = 0;

44 
c
->
£¡
 +
n
;

46  
n
;

49 
îr
 = 
ngx_sockë_î∫o
;

51 i‡(
n
 == 0) {

52 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
îr
, "send()Ñeturned zero");

53 
wev
->
ªady
 = 0;

54  
n
;

57 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

58 
wev
->
ªady
 = 0;

60 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

63 i‡(
îr
 =
NGX_EAGAIN
) {

64  
NGX_AGAIN
;

68 
wev
->
îr‹
 = 1;

69 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "send() failed");

70  
NGX_ERROR
;

73 
	}
}

	@src/os/unix/ngx_setaffinity.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 #i‡(
NGX_HAVE_CPUSET_SETAFFINITY
)

14 
	$ngx_£èfföôy
(
ngx_˝u£t_t
 *
˝u_afföôy
, 
ngx_log_t
 *
log
)

16 
ngx_uöt_t
 
i
;

18 
i
 = 0; i < 
CPU_SETSIZE
; i++) {

19 i‡(
	`CPU_ISSET
(
i
, 
˝u_afföôy
)) {

20 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

21 "˝u£t_£èfföôy(): usög cpu #%ui", 
i
);

25 i‡(
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, -1,

26 (
˝u£t_t
), 
˝u_afföôy
) == -1)

28 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

31 
	}
}

33 #ñi‡(
NGX_HAVE_SCHED_SETAFFINITY
)

36 
	$ngx_£èfföôy
(
ngx_˝u£t_t
 *
˝u_afföôy
, 
ngx_log_t
 *
log
)

38 
ngx_uöt_t
 
i
;

40 
i
 = 0; i < 
CPU_SETSIZE
; i++) {

41 i‡(
	`CPU_ISSET
(
i
, 
˝u_afföôy
)) {

42 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

43 "sched_£èfföôy(): usög cpu #%ui", 
i
);

47 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), 
˝u_afföôy
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

51 
	}
}

	@src/os/unix/ngx_setaffinity.h

6 #i‚de‡
_NGX_SETAFFINITY_H_INCLUDED_


7 
	#_NGX_SETAFFINITY_H_INCLUDED_


	)

10 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
 || 
NGX_HAVE_CPUSET_SETAFFINITY
)

12 
	#NGX_HAVE_CPU_AFFINITY
 1

	)

14 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
)

16 
˝u_£t_t
 
	tngx_˝u£t_t
;

18 #ñi‡(
NGX_HAVE_CPUSET_SETAFFINITY
)

20 
	~<sys/˝u£t.h
>

22 
˝u£t_t
 
	tngx_˝u£t_t
;

26 
ngx_£èfföôy
(
ngx_˝u£t_t
 *
˝u_afföôy
, 
ngx_log_t
 *
log
);

30 
	#ngx_£èfföôy
(
˝u_afföôy
, 
log
)

	)

32 
uöt64_t
 
	tngx_˝u£t_t
;

	@src/os/unix/ngx_setproctitle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

30 **
ívú⁄
;

32 *
	gngx_os_¨gv_œ°
;

34 
ngx_öt_t


35 
	$ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
)

37 
u_ch¨
 *
p
;

38 
size_t
 
size
;

39 
ngx_uöt_t
 
i
;

41 
size
 = 0;

43 
i
 = 0; 
ívú⁄
[i]; i++) {

44 
size
 +
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

47 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

48 i‡(
p
 =
NULL
) {

49  
NGX_ERROR
;

52 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[0];

54 
i
 = 0; 
ngx_os_¨gv
[i]; i++) {

55 i‡(
ngx_os_¨gv_œ°
 =
ngx_os_¨gv
[
i
]) {

56 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[
i
] + 
	`ngx_°æí
(ngx_os_argv[i]) + 1;

60 
i
 = 0; 
ívú⁄
[i]; i++) {

61 i‡(
ngx_os_¨gv_œ°
 =
ívú⁄
[
i
]) {

63 
size
 = 
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

64 
ngx_os_¨gv_œ°
 = 
ívú⁄
[
i
] + 
size
;

66 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
ívú⁄
[
i
], 
size
);

67 
ívú⁄
[
i
] = (*Ë
p
;

68 
p
 +
size
;

72 
ngx_os_¨gv_œ°
--;

74  
NGX_OK
;

75 
	}
}

79 
	$ngx_£çro˘ôÀ
(*
tôÀ
)

81 
u_ch¨
 *
p
;

83 #i‡(
NGX_SOLARIS
)

85 
ngx_öt_t
 
i
;

86 
size_t
 
size
;

90 
ngx_os_¨gv
[1] = 
NULL
;

92 
p
 = 
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_os_¨gv
[0], (u_char *) "nginx: ",

93 
ngx_os_¨gv_œ°
 - 
ngx_os_¨gv
[0]);

95 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
tôÀ
, 
ngx_os_¨gv_œ°
 - (*)Ö);

97 #i‡(
NGX_SOLARIS
)

99 
size
 = 0;

101 
i
 = 0; i < 
ngx_¨gc
; i++) {

102 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

105 i‡(
size
 > (
size_t
Ë((*Ë
p
 - 
ngx_os_¨gv
[0])) {

112 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (", 
ngx_os_¨gv_œ°
 - (*)Ö);

114 
i
 = 0; i < 
ngx_¨gc
; i++) {

115 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
],

116 
ngx_os_¨gv_œ°
 - (*Ë
p
);

117 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" ", 
ngx_os_¨gv_œ°
 - (*)Ö);

120 i‡(*(
p
 - 1) == ' ') {

121 *(
p
 - 1) = ')';

127 i‡(
ngx_os_¨gv_œ°
 - (*Ë
p
) {

128 
	`ngx_mem£t
(
p
, 
NGX_SETPROCTITLE_PAD
, 
ngx_os_¨gv_œ°
 - (*)Ö);

131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

132 "£çro˘ôÀ: \"%s\"", 
ngx_os_¨gv
[0]);

133 
	}
}

	@src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
Ë
NGX_OK


	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
Ë
NGX_OK


	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@src/os/unix/ngx_shmem.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_MAP_ANON
)

14 
ngx_öt_t


15 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

17 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
,

18 
PROT_READ
|
PROT_WRITE
,

19 
MAP_ANON
|
MAP_SHARED
, -1, 0);

21 i‡(
shm
->
addr
 =
MAP_FAILED
) {

22 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

23 "mm≠(MAP_ANON|MAP_SHARED, %uzËÁûed", 
shm
->
size
);

24  
NGX_ERROR
;

27  
NGX_OK
;

28 
	}
}

32 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

34 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

36 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

38 
	}
}

40 #ñi‡(
NGX_HAVE_MAP_DEVZERO
)

42 
ngx_öt_t


43 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

45 
ngx_fd_t
 
fd
;

47 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

49 i‡(
fd
 == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

52  
NGX_ERROR
;

55 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
, 
PROT_READ
|
PROT_WRITE
,

56 
MAP_SHARED
, 
fd
, 0);

58 i‡(
shm
->
addr
 =
MAP_FAILED
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

60 "mm≠(/dev/zîo, MAP_SHARED, %uzËÁûed", 
shm
->
size
);

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

68  (
shm
->
addr
 =
MAP_FAILED
Ë? 
NGX_ERROR
 : 
NGX_OK
;

69 
	}
}

73 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

75 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

76 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

77 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

79 
	}
}

81 #ñi‡(
NGX_HAVE_SYSVSHM
)

83 
	~<sys/ùc.h
>

84 
	~<sys/shm.h
>

87 
ngx_öt_t


88 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

90 
id
;

92 
id
 = 
	`shmgë
(
IPC_PRIVATE
, 
shm
->
size
, (
SHM_R
|
SHM_W
|
IPC_CREAT
));

94 i‡(
id
 == -1) {

95 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

96 "shmgë(%uzËÁûed", 
shm
->
size
);

97  
NGX_ERROR
;

100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
shm
->
log
, 0, "shmgë id: %d", 
id
);

102 
shm
->
addr
 = 
	`shm©
(
id
, 
NULL
, 0);

104 i‡(
shm
->
addr
 == (*) -1) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
, "shmat() failed");

108 i‡(
	`shm˘l
(
id
, 
IPC_RMID
, 
NULL
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

113  (
shm
->
addr
 =(*Ë-1Ë? 
NGX_ERROR
 : 
NGX_OK
;

114 
	}
}

118 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

120 i‡(
	`shmdt
(
shm
->
addr
) == -1) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

122 "shmdt(%pËÁûed", 
shm
->
addr
);

124 
	}
}

	@src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@src/os/unix/ngx_socket.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

24 #i‡(
NGX_HAVE_FIONBIO
)

27 
	$ngx_n⁄blockög
(
ngx_sockë_t
 
s
)

29 
nb
;

31 
nb
 = 1;

33  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

34 
	}
}

38 
	$ngx_blockög
(
ngx_sockë_t
 
s
)

40 
nb
;

42 
nb
 = 0;

44  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

45 
	}
}

50 #i‡(
NGX_FREEBSD
)

53 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

55 
t˝_n›ush
;

57 
t˝_n›ush
 = 1;

59  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

60 (c⁄° *Ë&
t˝_n›ush
, ());

61 
	}
}

65 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

67 
t˝_n›ush
;

69 
t˝_n›ush
 = 0;

71  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

72 (c⁄° *Ë&
t˝_n›ush
, ());

73 
	}
}

75 #ñi‡(
NGX_LINUX
)

79 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

81 
c‹k
;

83 
c‹k
 = 1;

85  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

86 (c⁄° *Ë&
c‹k
, ());

87 
	}
}

91 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

93 
c‹k
;

95 
c‹k
 = 0;

97  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

98 (c⁄° *Ë&
c‹k
, ());

99 
	}
}

104 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

107 
	}
}

111 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

114 
	}
}

	@src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<time.h
>

34 
	~<sys/°©vfs.h
>

36 
	~<sys/fûio.h
>

37 
	~<sys/uio.h
>

38 
	~<sys/°©.h
>

39 
	~<f˙é.h
>

41 
	~<sys/waô.h
>

42 
	~<sys/mm™.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sched.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<√töë/t˝.h
>

49 
	~<¨∑/öë.h
>

50 
	~<√tdb.h
>

51 
	~<sys/un.h
>

53 
	~<sys/sy°emöfo.h
>

54 
	~<limôs.h
>

55 
	~<öây≥s.h
>

56 
	~<¸y±.h
>

58 
	~<dlf˙.h
>

60 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

62 
	~<ngx_auto_c⁄fig.h
>

65 #i‡(
NGX_HAVE_POSIX_SEM
)

66 
	~<£m≠h‹e.h
>

70 #i‡(
NGX_HAVE_POLL
)

71 
	~<pﬁl.h
>

75 #i‡(
NGX_HAVE_DEVPOLL
)

76 
	~<sys/io˘l.h
>

77 
	~<sys/devpﬁl.h
>

81 #i‡(
NGX_HAVE_EVENTPORT
)

82 
	~<p‹t.h
>

86 #i‡(
NGX_HAVE_SENDFILE
)

87 
	~<sys/£ndfûe.h
>

91 
	#NGX_LISTEN_BACKLOG
 511

	)

94 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


95 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

99 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


101 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

105 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

106 
	#ngx_debug_öô
()

	)

109 **
ívú⁄
;

	@src/os/unix/ngx_solaris_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_sﬁ¨is_sy¢ame
[20];

13 
	gngx_sﬁ¨is_ªÀa£
[10];

14 
	gngx_sﬁ¨is_vîsi⁄
[50];

17 
ngx_os_io_t
 
	gngx_sﬁ¨is_io
 = {

18 
ngx_unix_ªcv
,

19 
ngx_ªadv_chaö
,

20 
ngx_udp_unix_ªcv
,

21 
ngx_unix_£nd
,

22 
ngx_udp_unix_£nd
,

23 
ngx_udp_unix_£ndmsg_chaö
,

24 #i‡(
NGX_HAVE_SENDFILE
)

25 
ngx_sﬁ¨is_£ndfûev_chaö
,

26 
NGX_IO_SENDFILE


28 
ngx_wrôev_chaö
,

34 
ngx_öt_t


35 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

37 i‡(
	`sysöfo
(
SI_SYSNAME
, 
ngx_sﬁ¨is_sy¢ame
, (ngx_solaris_sysname))

40 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

42  
NGX_ERROR
;

45 i‡(
	`sysöfo
(
SI_RELEASE
, 
ngx_sﬁ¨is_ªÀa£
, (ngx_solaris_release))

48 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

50  
NGX_ERROR
;

53 i‡(
	`sysöfo
(
SI_VERSION
, 
ngx_sﬁ¨is_vîsi⁄
, (ngx_solaris_version))

56 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

58  
NGX_ERROR
;

62 
ngx_os_io
 = 
ngx_sﬁ¨is_io
;

64  
NGX_OK
;

65 
	}
}

69 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

72 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

73 
ngx_sﬁ¨is_sy¢ame
, 
ngx_sﬁ¨is_ªÀa£
);

75 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "version: %s",

76 
ngx_sﬁ¨is_vîsi⁄
);

77 
	}
}

	@src/os/unix/ngx_solaris_sendfilev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_SOLARIS_SENDFILEV
)

17 
	s£ndfûevec
 {

18 
	msfv_fd
;

19 
u_öt
 
	msfv_Êag
;

20 
off_t
 
	msfv_off
;

21 
size_t
 
	msfv_Àn
;

22 } 
	t£ndfûevec_t
;

24 
	#SFV_FD_SELF
 -2

	)

26 
ssize_t
 
	$£ndfûev
(
fd
, c⁄° 
£ndfûevec
 *
vec
,

27 
sfv˙t
, 
size_t
 *
x„ºed
)

30 
	}
}

32 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

33 
off_t
 
limô
);

38 
	#NGX_SENDFILEVECS
 
NGX_IOVS_PREALLOCATE


	)

41 
ngx_chaö_t
 *

42 
	$ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

44 
fd
;

45 
u_ch¨
 *
¥ev
;

46 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
Âªv
;

47 
size_t
 
£¡
;

48 
ssize_t
 
n
;

49 
ngx_öt_t
 
eöå
;

50 
ngx_îr_t
 
îr
;

51 
ngx_buf_t
 *
fûe
;

52 
ngx_uöt_t
 
nsfv
;

53 
£ndfûevec_t
 *
sfv
, 
sfvs
[
NGX_SENDFILEVECS
];

54 
ngx_evít_t
 *
wev
;

55 
ngx_chaö_t
 *
˛
;

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

63 i‡(!
c
->
£ndfûe
) {

64  
	`ngx_wrôev_chaö
(
c
, 
ö
, 
limô
);

70 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

71 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

75 
£nd
 = 0;

78 
fd
 = 
SFV_FD_SELF
;

79 
¥ev
 = 
NULL
;

80 
Âªv
 = 0;

81 
fûe
 = 
NULL
;

82 
sfv
 = 
NULL
;

83 
eöå
 = 0;

84 
£¡
 = 0;

85 
¥ev_£nd
 = 
£nd
;

87 
nsfv
 = 0;

91 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

93 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

97 i‡(
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

98 
fd
 = 
SFV_FD_SELF
;

100 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

102 i‡(
£nd
 + 
size
 > 
limô
) {

103 
size
 = 
limô
 - 
£nd
;

106 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

107 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

110 i‡(
nsfv
 =
NGX_SENDFILEVECS
) {

114 
sfv
 = &
sfvs
[
nsfv
++];

116 
sfv
->
sfv_fd
 = 
SFV_FD_SELF
;

117 
sfv
->
sfv_Êag
 = 0;

118 
sfv
->
sfv_off
 = (
off_t
Ë(
uöçå_t
Ë
˛
->
buf
->
pos
;

119 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

122 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

123 
£nd
 +
size
;

126 
¥ev
 = 
NULL
;

128 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

130 i‡(
£nd
 + 
size
 > 
limô
) {

131 
size
 = 
limô
 - 
£nd
;

133 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

134 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

136 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

137 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

141 i‡(
fd
 =
˛
->
buf
->
fûe
->fd && 
Âªv
 =˛->buf->
fûe_pos
) {

142 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

145 i‡(
nsfv
 =
NGX_SENDFILEVECS
) {

149 
sfv
 = &
sfvs
[
nsfv
++];

151 
fd
 = 
˛
->
buf
->
fûe
->fd;

152 
sfv
->
sfv_fd
 = 
fd
;

153 
sfv
->
sfv_Êag
 = 0;

154 
sfv
->
sfv_off
 = 
˛
->
buf
->
fûe_pos
;

155 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

158 
fûe
 = 
˛
->
buf
;

159 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

160 
£nd
 +
size
;

164 
n
 = 
	`£ndfûev
(
c
->
fd
, 
sfvs
, 
nsfv
, &
£¡
);

166 i‡(
n
 == -1) {

167 
îr
 = 
ngx_î∫o
;

169 
îr
) {

170 
NGX_EAGAIN
:

173 
NGX_EINTR
:

174 
eöå
 = 1;

178 
wev
->
îr‹
 = 1;

179 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfilev() failed");

180  
NGX_CHAIN_ERROR
;

183 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

184 "£ndfûev(Ë£¡ o∆y %uz byãs", 
£¡
);

186 } i‡(
n
 =0 && 
£¡
 == 0) {

194 i‡(
fûe
) {

195 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

197 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

200 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

204  
NGX_CHAIN_ERROR
;

207 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

208 "£ndfûev: %z %z", 
n
, 
£¡
);

210 
c
->
£¡
 += sent;

212 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

214 i‡(
eöå
) {

215 
£nd
 = 
¥ev_£nd
 + 
£¡
;

219 i‡(
£nd
 - 
¥ev_£nd
 !(
off_t
Ë
£¡
) {

220 
wev
->
ªady
 = 0;

221  
ö
;

224 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

225  
ö
;

228 
	}
}

	@src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	~<±hªad.h
>

20 
±hªad_muãx_t
 
	tngx_thªad_muãx_t
;

22 
ngx_öt_t
 
ngx_thªad_muãx_¸óã
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

23 
ngx_öt_t
 
ngx_thªad_muãx_de°roy
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

24 
ngx_öt_t
 
ngx_thªad_muãx_lock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

25 
ngx_öt_t
 
ngx_thªad_muãx_u∆ock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

28 
±hªad_c⁄d_t
 
	tngx_thªad_c⁄d_t
;

30 
ngx_öt_t
 
ngx_thªad_c⁄d_¸óã
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
);

31 
ngx_öt_t
 
ngx_thªad_c⁄d_de°roy
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
);

32 
ngx_öt_t
 
ngx_thªad_c⁄d_sig«l
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
);

33 
ngx_öt_t
 
ngx_thªad_c⁄d_waô
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_thªad_muãx_t
 *
mtx
,

34 
ngx_log_t
 *
log
);

37 #i‡(
NGX_LINUX
)

39 
pid_t
 
	tngx_tid_t
;

40 
	#NGX_TID_T_FMT
 "%P"

	)

42 #ñi‡(
NGX_FREEBSD
)

44 
uöt32_t
 
	tngx_tid_t
;

45 
	#NGX_TID_T_FMT
 "%uD"

	)

47 #ñi‡(
NGX_DARWIN
)

49 
uöt64_t
 
	tngx_tid_t
;

50 
	#NGX_TID_T_FMT
 "%uL"

	)

54 
uöt64_t
 
	tngx_tid_t
;

55 
	#NGX_TID_T_FMT
 "%uL"

	)

59 
ngx_tid_t
 
ngx_thªad_tid
();

61 
	#ngx_log_tid
 
	`ngx_thªad_tid
()

	)

65 
	#ngx_log_tid
 0

	)

66 
	#NGX_TID_T_FMT
 "%d"

	)

	@src/os/unix/ngx_thread_cond.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_thªad_c⁄d_¸óã
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
)

15 
ngx_îr_t
 
îr
;

17 
îr
 = 
	`±hªad_c⁄d_öô
(
c⁄d
, 
NULL
);

18 i‡(
îr
 == 0) {

19  
NGX_OK
;

22 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
, "pthread_cond_init() failed");

23  
NGX_ERROR
;

24 
	}
}

27 
ngx_öt_t


28 
	$ngx_thªad_c⁄d_de°roy
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
)

30 
ngx_îr_t
 
îr
;

32 
îr
 = 
	`±hªad_c⁄d_de°roy
(
c⁄d
);

33 i‡(
îr
 == 0) {

34  
NGX_OK
;

37 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
, "pthread_cond_destroy() failed");

38  
NGX_ERROR
;

39 
	}
}

42 
ngx_öt_t


43 
	$ngx_thªad_c⁄d_sig«l
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
)

45 
ngx_îr_t
 
îr
;

47 
îr
 = 
	`±hªad_c⁄d_sig«l
(
c⁄d
);

48 i‡(
îr
 == 0) {

49  
NGX_OK
;

52 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
, "pthread_cond_signal() failed");

53  
NGX_ERROR
;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_thªad_c⁄d_waô
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_thªad_muãx_t
 *
mtx
,

59 
ngx_log_t
 *
log
)

61 
ngx_îr_t
 
îr
;

63 
îr
 = 
	`±hªad_c⁄d_waô
(
c⁄d
, 
mtx
);

66 
	`ngx_time_upd©e
();

69 i‡(
îr
 == 0) {

70  
NGX_OK
;

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_cond_wait() failed");

75  
NGX_ERROR
;

76 
	}
}

	@src/os/unix/ngx_thread_id.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_thªad_poﬁ.h
>

13 #i‡(
NGX_LINUX
)

20 
ngx_tid_t


21 
	$ngx_thªad_tid
()

23  
	`sysˇŒ
(
SYS_gëtid
);

24 
	}
}

26 #ñi‡(
NGX_FREEBSD
Ë&& (
__FªeBSD_vîsi⁄
 >= 900031)

28 
	~<±hªad_≈.h
>

30 
ngx_tid_t


31 
	$ngx_thªad_tid
()

33  
	`±hªad_gëthªadid_≈
();

34 
	}
}

36 #ñi‡(
NGX_DARWIN
)

46 
ngx_tid_t


47 
	$ngx_thªad_tid
()

49 
uöt64_t
 
tid
;

51 (Ë
	`±hªad_thªadid_≈
(
NULL
, &
tid
);

52  
tid
;

53 
	}
}

64 
ngx_tid_t


65 
	$ngx_thªad_tid
()

67  (
uöt64_t
Ë(
uöçå_t
Ë
	`±hªad_£lf
();

68 
	}
}

	@src/os/unix/ngx_thread_mutex.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

77 
ngx_öt_t


78 
	$ngx_thªad_muãx_¸óã
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

80 
ngx_îr_t
 
îr
;

81 
±hªad_muãx©å_t
 
©å
;

83 
îr
 = 
	`±hªad_muãx©å_öô
(&
©å
);

84 i‡(
îr
 != 0) {

85 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

87  
NGX_ERROR
;

90 
îr
 = 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_ERRORCHECK
);

91 i‡(
îr
 != 0) {

92 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

95  
NGX_ERROR
;

98 
îr
 = 
	`±hªad_muãx_öô
(
mtx
, &
©å
);

99 i‡(
îr
 != 0) {

100 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

102  
NGX_ERROR
;

105 
îr
 = 
	`±hªad_muãx©å_de°roy
(&
©å
);

106 i‡(
îr
 != 0) {

107 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

111  
NGX_OK
;

112 
	}
}

115 
ngx_öt_t


116 
	$ngx_thªad_muãx_de°roy
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

118 
ngx_îr_t
 
îr
;

120 
îr
 = 
	`±hªad_muãx_de°roy
(
mtx
);

121 i‡(
îr
 != 0) {

122 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

124  
NGX_ERROR
;

127  
NGX_OK
;

128 
	}
}

131 
ngx_öt_t


132 
	$ngx_thªad_muãx_lock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

134 
ngx_îr_t
 
îr
;

136 
îr
 = 
	`±hªad_muãx_lock
(
mtx
);

137 i‡(
îr
 == 0) {

138  
NGX_OK
;

141 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_mutex_lock() failed");

143  
NGX_ERROR
;

144 
	}
}

147 
ngx_öt_t


148 
	$ngx_thªad_muãx_u∆ock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

150 
ngx_îr_t
 
îr
;

152 
îr
 = 
	`±hªad_muãx_u∆ock
(
mtx
);

155 
	`ngx_time_upd©e
();

158 i‡(
îr
 == 0) {

159  
NGX_OK
;

162 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_mutex_unlock() failed");

164  
NGX_ERROR
;

165 
	}
}

	@src/os/unix/ngx_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

25 
	$ngx_timez⁄e_upd©e
()

27 #i‡(
NGX_FREEBSD
)

29 i‡(
	`gëív
("TZ")) {

33 
	`puãnv
("TZ=UTC");

35 
	`tz£t
();

37 
	`un£ãnv
("TZ");

39 
	`tz£t
();

41 #ñi‡(
NGX_LINUX
)

42 
time_t
 
s
;

43 
tm
 *
t
;

44 
buf
[4];

46 
s
 = 
	`time
(0);

48 
t
 = 
	`loˇ…ime
(&
s
);

50 
	`°r·ime
(
buf
, 4, "%H", 
t
);

53 
	}
}

57 
	$ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
)

59 #i‡(
NGX_HAVE_LOCALTIME_R
)

60 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

63 
ngx_tm_t
 *
t
;

65 
t
 = 
	`loˇ…ime
(&
s
);

66 *
tm
 = *
t
;

70 
tm
->
ngx_tm_m⁄
++;

71 
tm
->
ngx_tm_yór
 += 1900;

72 
	}
}

76 
	$ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm)

78 #i‡(
NGX_HAVE_LOCALTIME_R
)

79 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

82 
tm
 *
t
;

84 
t
 = 
	`loˇ…ime
(&
s
);

85 *
tm
 = *
t
;

88 
	}
}

92 
	$ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm)

94 #i‡(
NGX_HAVE_LOCALTIME_R
)

95 (Ë
	`gmtime_r
(&
s
, 
tm
);

98 
tm
 *
t
;

100 
t
 = 
	`gmtime
(&
s
);

101 *
tm
 = *
t
;

104 
	}
}

	@src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@src/os/unix/ngx_udp_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
ªv
;

20 
ªv
 = 
c
->
ªad
;

23 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

26 "ªcv: fd:%d %z o‡%uz", 
c
->
fd
, 
n
, 
size
);

28 i‡(
n
 >= 0) {

30 #i‡(
NGX_HAVE_KQUEUE
)

32 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

33 
ªv
->
avaûabÀ
 -
n
;

40 i‡(
ªv
->
avaûabÀ
 <= 0) {

41 
ªv
->
ªady
 = 0;

42 
ªv
->
avaûabÀ
 = 0;

48  
n
;

51 
îr
 = 
ngx_sockë_î∫o
;

53 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

54 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

56 
n
 = 
NGX_AGAIN
;

59 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

63 } 
îr
 =
NGX_EINTR
);

65 
ªv
->
ªady
 = 0;

67 i‡(
n
 =
NGX_ERROR
) {

68 
ªv
->
îr‹
 = 1;

71  
n
;

72 
	}
}

	@src/os/unix/ngx_udp_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_udp_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

23 
n
 = 
	`£ndto
(
c
->
fd
, 
buf
, 
size
, 0, c->
sockaddr
, c->
sockÀn
);

25 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
c
->
fd
, 
n
, 
size
, &c->
addr_ãxt
);

29 i‡(
n
 >= 0) {

30 i‡((
size_t
Ë
n
 !
size
) {

31 
wev
->
îr‹
 = 1;

32 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 0, "sendto() incomplete");

33  
NGX_ERROR
;

36 
c
->
£¡
 +
n
;

38  
n
;

41 
îr
 = 
ngx_sockë_î∫o
;

43 i‡(
îr
 =
NGX_EAGAIN
) {

44 
wev
->
ªady
 = 0;

45 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
NGX_EAGAIN
,

47  
NGX_AGAIN
;

50 i‡(
îr
 !
NGX_EINTR
) {

51 
wev
->
îr‹
 = 1;

52 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendto() failed");

53  
NGX_ERROR
;

56 
	}
}

	@src/os/unix/ngx_udp_sendmsg_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *
ngx_udp_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
,

14 
ngx_chaö_t
 *
ö
, 
ngx_log_t
 *
log
);

15 
ssize_t
 
ngx_£ndmsg
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
);

18 
ngx_chaö_t
 *

19 
	$ngx_udp_unix_£ndmsg_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

21 
ssize_t
 
n
;

22 
off_t
 
£nd
;

23 
ngx_chaö_t
 *
˛
;

24 
ngx_evít_t
 *
wev
;

25 
ngx_iovec_t
 
vec
;

26 
iovec
 
iovs
[
NGX_IOVS_PREALLOCATE
];

28 
wev
 = 
c
->
wrôe
;

30 i‡(!
wev
->
ªady
) {

31  
ö
;

34 #i‡(
NGX_HAVE_KQUEUE
)

36 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

37 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

39 
wev
->
îr‹
 = 1;

40  
NGX_CHAIN_ERROR
;

47 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

48 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

51 
£nd
 = 0;

53 
vec
.
iovs
 = iovs;

54 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

60 
˛
 = 
	`ngx_udp_ouçut_chaö_to_iovec
(&
vec
, 
ö
, 
c
->
log
);

62 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

63  
NGX_CHAIN_ERROR
;

66 i‡(
˛
 && cl->
buf
->
ö_fûe
) {

67 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

70 
˛
->
buf
->
ãmp‹¨y
,

71 
˛
->
buf
->
ªcy˛ed
,

72 
˛
->
buf
->
ö_fûe
,

73 
˛
->
buf
->
°¨t
,

74 
˛
->
buf
->
pos
,

75 
˛
->
buf
->
œ°
,

76 
˛
->
buf
->
fûe
,

77 
˛
->
buf
->
fûe_pos
,

78 
˛
->
buf
->
fûe_œ°
);

80 
	`ngx_debug_poöt
();

82  
NGX_CHAIN_ERROR
;

85 i‡(
˛
 =
ö
) {

86  
ö
;

89 
£nd
 +
vec
.
size
;

91 
n
 = 
	`ngx_£ndmsg
(
c
, &
vec
);

93 i‡(
n
 =
NGX_ERROR
) {

94  
NGX_CHAIN_ERROR
;

97 i‡(
n
 =
NGX_AGAIN
) {

98 
wev
->
ªady
 = 0;

99  
ö
;

102 
c
->
£¡
 +
n
;

104 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
n
);

106 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

107  
ö
;

110 
	}
}

113 
ngx_chaö_t
 *

114 
	$ngx_udp_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
, 
ngx_chaö_t
 *
ö
, 
ngx_log_t
 *
log
)

116 
size_t
 
tŸÆ
, 
size
;

117 
u_ch¨
 *
¥ev
;

118 
ngx_uöt_t
 
n
, 
Êush
;

119 
ngx_chaö_t
 *
˛
;

120 
iovec
 *
iov
;

122 
˛
 = 
ö
;

123 
iov
 = 
NULL
;

124 
¥ev
 = 
NULL
;

125 
tŸÆ
 = 0;

126 
n
 = 0;

127 
Êush
 = 0;

129  ; 
ö
 && !
Êush
; i¿ö->
√xt
) {

131 i‡(
ö
->
buf
->
Êush
 || in->buf->
œ°_buf
) {

132 
Êush
 = 1;

135 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

139 i‡(
ö
->
buf
->
ö_fûe
) {

143 i‡(!
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

144 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

147 
ö
->
buf
->
ãmp‹¨y
,

148 
ö
->
buf
->
ªcy˛ed
,

149 
ö
->
buf
->
ö_fûe
,

150 
ö
->
buf
->
°¨t
,

151 
ö
->
buf
->
pos
,

152 
ö
->
buf
->
œ°
,

153 
ö
->
buf
->
fûe
,

154 
ö
->
buf
->
fûe_pos
,

155 
ö
->
buf
->
fûe_œ°
);

157 
	`ngx_debug_poöt
();

159  
NGX_CHAIN_ERROR
;

162 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

164 i‡(
¥ev
 =
ö
->
buf
->
pos
) {

165 
iov
->
iov_Àn
 +
size
;

168 i‡(
n
 =
vec
->
«Œoc
) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

171  
NGX_CHAIN_ERROR
;

174 
iov
 = &
vec
->
iovs
[
n
++];

176 
iov
->
iov_ba£
 = (*Ë
ö
->
buf
->
pos
;

177 
iov
->
iov_Àn
 = 
size
;

180 
¥ev
 = 
ö
->
buf
->
pos
 + 
size
;

181 
tŸÆ
 +
size
;

184 i‡(!
Êush
) {

185 #i‡(
NGX_SUPPRESS_WARN
)

186 
vec
->
size
 = 0;

187 
vec
->
cou¡
 = 0;

189  
˛
;

192 
vec
->
cou¡
 = 
n
;

193 
vec
->
size
 = 
tŸÆ
;

195  
ö
;

196 
	}
}

199 
ssize_t


200 
	$ngx_£ndmsg
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
)

202 
ssize_t
 
n
;

203 
ngx_îr_t
 
îr
;

204 
msghdr
 
msg
;

206 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

208 #i‡(
NGX_HAVE_IP_SENDSRCADDR
)

209 
u_ch¨
 
msg_c⁄åﬁ
[
	`CMSG_SPACE
((
ö_addr
))];

210 #ñi‡(
NGX_HAVE_IP_PKTINFO
)

211 
u_ch¨
 
msg_c⁄åﬁ
[
	`CMSG_SPACE
((
ö_pktöfo
))];

214 #i‡(
NGX_HAVE_INET6
 && 
NGX_HAVE_IPV6_RECVPKTINFO
)

215 
u_ch¨
 
msg_c⁄åﬁ6
[
	`CMSG_SPACE
((
ö6_pktöfo
))];

220 
	`ngx_memzîo
(&
msg
, (
msghdr
));

222 i‡(
c
->
sockÀn
) {

223 
msg
.
msg_«me
 = 
c
->
sockaddr
;

224 
msg
.
msg_«mñí
 = 
c
->
sockÀn
;

227 
msg
.
msg_iov
 = 
vec
->
iovs
;

228 
msg
.
msg_iovÀn
 = 
vec
->
cou¡
;

230 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

232 i‡(
c
->
li°íög
 && c->li°íög->
wûdˇrd
 && c->
loˇl_sockaddr
) {

234 #i‡(
NGX_HAVE_IP_SENDSRCADDR
)

236 i‡(
c
->
loˇl_sockaddr
->
ß_Ámûy
 =
AF_INET
) {

237 
cmsghdr
 *
cmsg
;

238 
ö_addr
 *
addr
;

239 
sockaddr_ö
 *
sö
;

241 
msg
.
msg_c⁄åﬁ
 = &msg_control;

242 
msg
.
msg_c⁄åﬁÀn
 = (
msg_c⁄åﬁ
);

244 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

245 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_IP
;

246 
cmsg
->
cmsg_ty≥
 = 
IP_SENDSRCADDR
;

247 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
ö_addr
));

249 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

251 
addr
 = (
ö_addr
 *Ë
	`CMSG_DATA
(
cmsg
);

252 *
addr
 = 
sö
->
sö_addr
;

255 #ñi‡(
NGX_HAVE_IP_PKTINFO
)

257 i‡(
c
->
loˇl_sockaddr
->
ß_Ámûy
 =
AF_INET
) {

258 
cmsghdr
 *
cmsg
;

259 
ö_pktöfo
 *
pkt
;

260 
sockaddr_ö
 *
sö
;

262 
msg
.
msg_c⁄åﬁ
 = &msg_control;

263 
msg
.
msg_c⁄åﬁÀn
 = (
msg_c⁄åﬁ
);

265 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

266 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_IP
;

267 
cmsg
->
cmsg_ty≥
 = 
IP_PKTINFO
;

268 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
ö_pktöfo
));

270 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

272 
pkt
 = (
ö_pktöfo
 *Ë
	`CMSG_DATA
(
cmsg
);

273 
	`ngx_memzîo
(
pkt
, (
ö_pktöfo
));

274 
pkt
->
ùi_•ec_d°
 = 
sö
->
sö_addr
;

279 #i‡(
NGX_HAVE_INET6
 && 
NGX_HAVE_IPV6_RECVPKTINFO
)

281 i‡(
c
->
loˇl_sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

282 
cmsghdr
 *
cmsg
;

283 
ö6_pktöfo
 *
pkt6
;

284 
sockaddr_ö6
 *
sö6
;

286 
msg
.
msg_c⁄åﬁ
 = &
msg_c⁄åﬁ6
;

287 
msg
.
msg_c⁄åﬁÀn
 = (
msg_c⁄åﬁ6
);

289 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

290 
cmsg
->
cmsg_Àvñ
 = 
IPPROTO_IPV6
;

291 
cmsg
->
cmsg_ty≥
 = 
IPV6_PKTINFO
;

292 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
((
ö6_pktöfo
));

294 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

296 
pkt6
 = (
ö6_pktöfo
 *Ë
	`CMSG_DATA
(
cmsg
);

297 
	`ngx_memzîo
(
pkt6
, (
ö6_pktöfo
));

298 
pkt6
->
ùi6_addr
 = 
sö6
->
sö6_addr
;

306 
eöå
:

308 
n
 = 
	`£ndmsg
(
c
->
fd
, &
msg
, 0);

310 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

311 "£ndmsg: %z o‡%uz", 
n
, 
vec
->
size
);

313 i‡(
n
 == -1) {

314 
îr
 = 
ngx_î∫o
;

316 
îr
) {

317 
NGX_EAGAIN
:

318 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

320  
NGX_AGAIN
;

322 
NGX_EINTR
:

323 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

325 
eöå
;

328 
c
->
wrôe
->
îr‹
 = 1;

329 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendmsg() failed");

330  
NGX_ERROR
;

334  
n
;

335 
	}
}

	@src/os/unix/ngx_user.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_CRYPT
)

14 #i‡(
NGX_HAVE_GNU_CRYPT_R
)

16 
ngx_öt_t


17 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

19 *
vÆue
;

20 
size_t
 
Àn
;

21 
¸y±_d©a
 
cd
;

23 
cd
.
öôülized
 = 0;

25 
vÆue
 = 
	`¸y±_r
((*Ë
key
, (*Ë
ß…
, &
cd
);

27 i‡(
vÆue
) {

28 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

30 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

31 i‡(*
í¸y±ed
 =
NULL
) {

32  
NGX_ERROR
;

35 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

36  
NGX_OK
;

39 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
ngx_î∫o
, "crypt_r() failed");

41  
NGX_ERROR
;

42 
	}
}

46 
ngx_öt_t


47 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

49 *
vÆue
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

53 
vÆue
 = 
	`¸y±
((*Ë
key
, (*Ë
ß…
);

55 i‡(
vÆue
) {

56 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

58 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

59 i‡(*
í¸y±ed
 =
NULL
) {

60  
NGX_ERROR
;

63 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

64  
NGX_OK
;

67 
îr
 = 
ngx_î∫o
;

69 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt() failed");

71  
NGX_ERROR
;

72 
	}
}

	@src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@src/os/unix/ngx_writev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
ssize_t
 
n
, 
£¡
;

17 
off_t
 
£nd
, 
¥ev_£nd
;

18 
ngx_chaö_t
 *
˛
;

19 
ngx_evít_t
 *
wev
;

20 
ngx_iovec_t
 
vec
;

21 
iovec
 
iovs
[
NGX_IOVS_PREALLOCATE
];

23 
wev
 = 
c
->
wrôe
;

25 i‡(!
wev
->
ªady
) {

26  
ö
;

29 #i‡(
NGX_HAVE_KQUEUE
)

31 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

32 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

34 
wev
->
îr‹
 = 1;

35  
NGX_CHAIN_ERROR
;

42 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

43 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

46 
£nd
 = 0;

48 
vec
.
iovs
 = iovs;

49 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

52 
¥ev_£nd
 = 
£nd
;

56 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
vec
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

58 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

59  
NGX_CHAIN_ERROR
;

62 i‡(
˛
 && cl->
buf
->
ö_fûe
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

66 
˛
->
buf
->
ãmp‹¨y
,

67 
˛
->
buf
->
ªcy˛ed
,

68 
˛
->
buf
->
ö_fûe
,

69 
˛
->
buf
->
°¨t
,

70 
˛
->
buf
->
pos
,

71 
˛
->
buf
->
œ°
,

72 
˛
->
buf
->
fûe
,

73 
˛
->
buf
->
fûe_pos
,

74 
˛
->
buf
->
fûe_œ°
);

76 
	`ngx_debug_poöt
();

78  
NGX_CHAIN_ERROR
;

81 
£nd
 +
vec
.
size
;

83 
n
 = 
	`ngx_wrôev
(
c
, &
vec
);

85 i‡(
n
 =
NGX_ERROR
) {

86  
NGX_CHAIN_ERROR
;

89 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

91 
c
->
£¡
 += sent;

93 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

95 i‡(
£nd
 - 
¥ev_£nd
 !
£¡
) {

96 
wev
->
ªady
 = 0;

97  
ö
;

100 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

101  
ö
;

104 
	}
}

107 
ngx_chaö_t
 *

108 
	$ngx_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
, 
ngx_chaö_t
 *
ö
, 
size_t
 
limô
,

109 
ngx_log_t
 *
log
)

111 
size_t
 
tŸÆ
, 
size
;

112 
u_ch¨
 *
¥ev
;

113 
ngx_uöt_t
 
n
;

114 
iovec
 *
iov
;

116 
iov
 = 
NULL
;

117 
¥ev
 = 
NULL
;

118 
tŸÆ
 = 0;

119 
n
 = 0;

121  ; 
ö
 && 
tŸÆ
 < 
limô
; i¿ö->
√xt
) {

123 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

127 i‡(
ö
->
buf
->
ö_fûe
) {

131 i‡(!
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

135 
ö
->
buf
->
ãmp‹¨y
,

136 
ö
->
buf
->
ªcy˛ed
,

137 
ö
->
buf
->
ö_fûe
,

138 
ö
->
buf
->
°¨t
,

139 
ö
->
buf
->
pos
,

140 
ö
->
buf
->
œ°
,

141 
ö
->
buf
->
fûe
,

142 
ö
->
buf
->
fûe_pos
,

143 
ö
->
buf
->
fûe_œ°
);

145 
	`ngx_debug_poöt
();

147  
NGX_CHAIN_ERROR
;

150 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

152 i‡(
size
 > 
limô
 - 
tŸÆ
) {

153 
size
 = 
limô
 - 
tŸÆ
;

156 i‡(
¥ev
 =
ö
->
buf
->
pos
) {

157 
iov
->
iov_Àn
 +
size
;

160 i‡(
n
 =
vec
->
«Œoc
) {

164 
iov
 = &
vec
->
iovs
[
n
++];

166 
iov
->
iov_ba£
 = (*Ë
ö
->
buf
->
pos
;

167 
iov
->
iov_Àn
 = 
size
;

170 
¥ev
 = 
ö
->
buf
->
pos
 + 
size
;

171 
tŸÆ
 +
size
;

174 
vec
->
cou¡
 = 
n
;

175 
vec
->
size
 = 
tŸÆ
;

177  
ö
;

178 
	}
}

181 
ssize_t


182 
	$ngx_wrôev
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
)

184 
ssize_t
 
n
;

185 
ngx_îr_t
 
îr
;

187 
eöå
:

189 
n
 = 
	`wrôev
(
c
->
fd
, 
vec
->
iovs
, vec->
cou¡
);

191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

192 "wrôev: %z o‡%uz", 
n
, 
vec
->
size
);

194 i‡(
n
 == -1) {

195 
îr
 = 
ngx_î∫o
;

197 
îr
) {

198 
NGX_EAGAIN
:

199 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

201  
NGX_AGAIN
;

203 
NGX_EINTR
:

204 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

206 
eöå
;

209 
c
->
wrôe
->
îr‹
 = 1;

210 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

211  
NGX_ERROR
;

215  
n
;

216 
	}
}

	@src/stream/ngx_stream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_°ªam.h
>

14 *
ngx_°ªam_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_°ªam_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

16 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
);

17 
ngx_öt_t
 
ngx_°ªam_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

18 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
);

19 
ngx_öt_t
 
ngx_°ªam_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

20 
ngx_°ªam_li°í_t
 *
li°í
);

21 *
ngx_°ªam_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

22 
ngx_öt_t
 
ngx_°ªam_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_p‹t_t
 *
°p‹t
,

23 
ngx_°ªam_c⁄f_addr_t
 *
addr
);

24 #i‡(
NGX_HAVE_INET6
)

25 
ngx_öt_t
 
ngx_°ªam_add_addrs6
(
ngx_c⁄f_t
 *
cf
,

26 
ngx_°ªam_p‹t_t
 *
°p‹t
, 
ngx_°ªam_c⁄f_addr_t
 *
addr
);

28 
ngx_öt_t
 
ngx_°ªam_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

31 
ngx_uöt_t
 
	gngx_°ªam_max_moduÀ
;

34 
ngx_°ªam_fûãr_±
 
	gngx_°ªam_t›_fûãr
;

37 
ngx_comm™d_t
 
	gngx_°ªam_comm™ds
[] = {

39 { 
ngx_°rög
("stream"),

40 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

41 
ngx_°ªam_block
,

44 
NULL
 },

46 
ngx_nuŒ_comm™d


50 
ngx_c‹e_moduÀ_t
 
	gngx_°ªam_moduÀ_˘x
 = {

51 
ngx_°rög
("stream"),

52 
NULL
,

53 
NULL


57 
ngx_moduÀ_t
 
	gngx_°ªam_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_°ªam_moduÀ_˘x
,

60 
ngx_°ªam_comm™ds
,

61 
NGX_CORE_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


74 
	$ngx_°ªam_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

76 *
rv
;

77 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

78 
ngx_c⁄f_t
 
pcf
;

79 
ngx_¨øy_t
 
p‹ts
;

80 
ngx_°ªam_li°í_t
 *
li°í
;

81 
ngx_°ªam_moduÀ_t
 *
moduÀ
;

82 
ngx_°ªam_c⁄f_˘x_t
 *
˘x
;

83 
ngx_°ªam_c‹e_§v_c⁄f_t
 **
cscÂ
;

84 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

86 i‡(*(
ngx_°ªam_c⁄f_˘x_t
 **Ë
c⁄f
) {

92 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_c⁄f_˘x_t
));

93 i‡(
˘x
 =
NULL
) {

94  
NGX_CONF_ERROR
;

97 *(
ngx_°ªam_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

101 
ngx_°ªam_max_moduÀ
 = 
	`ngx_cou¡_moduÀs
(
cf
->
cy˛e
, 
NGX_STREAM_MODULE
);

106 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

107 (*Ë* 
ngx_°ªam_max_moduÀ
);

108 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

109  
NGX_CONF_ERROR
;

118 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

119 (*Ë* 
ngx_°ªam_max_moduÀ
);

120 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

121  
NGX_CONF_ERROR
;

129 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

130 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_STREAM_MODULE
) {

134 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

135 
mi
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

137 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

138 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

139 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

140  
NGX_CONF_ERROR
;

144 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

145 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

146 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

147  
NGX_CONF_ERROR
;

153 
pcf
 = *
cf
;

154 
cf
->
˘x
 = ctx;

156 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

157 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_STREAM_MODULE
) {

161 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

163 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

164 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

165  
NGX_CONF_ERROR
;

173 
cf
->
moduÀ_ty≥
 = 
NGX_STREAM_MODULE
;

174 
cf
->
cmd_ty≥
 = 
NGX_STREAM_MAIN_CONF
;

175 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

177 i‡(
rv
 !
NGX_CONF_OK
) {

178 *
cf
 = 
pcf
;

179  
rv
;

185 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_°ªam_c‹e_moduÀ
.
˘x_ödex
];

186 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

188 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

189 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_STREAM_MODULE
) {

193 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

194 
mi
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
;

198 
cf
->
˘x
 = ctx;

200 i‡(
moduÀ
->
öô_maö_c⁄f
) {

201 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

202 i‡(
rv
 !
NGX_CONF_OK
) {

203 *
cf
 = 
pcf
;

204  
rv
;

208 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

212 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

214 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

215 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

216 
˘x
->
§v_c⁄f
[
mi
],

217 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

218 i‡(
rv
 !
NGX_CONF_OK
) {

219 *
cf
 = 
pcf
;

220  
rv
;

226 i‡(
	`ngx_°ªam_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

227  
NGX_CONF_ERROR
;

230 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

231 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_STREAM_MODULE
) {

235 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

237 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

238 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

239  
NGX_CONF_ERROR
;

244 i‡(
	`ngx_°ªam_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

245  
NGX_CONF_ERROR
;

248 *
cf
 = 
pcf
;

250 i‡(
	`ngx_°ªam_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

251  
NGX_CONF_ERROR
;

254 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_°ªam_c⁄f_p‹t_t
))

255 !
NGX_OK
)

257  
NGX_CONF_ERROR
;

260 
li°í
 = 
cmcf
->li°í.
ñts
;

262 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

263 i‡(
	`ngx_°ªam_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

264  
NGX_CONF_ERROR
;

268  
	`ngx_°ªam_›timize_£rvîs
(
cf
, &
p‹ts
);

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_°ªam_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
)

275 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_STREAM_POST_ACCEPT_PHASE
].
h™dÀrs
,

276 
cf
->
poﬁ
, 1, (
ngx_°ªam_h™dÀr_±
))

277 !
NGX_OK
)

279  
NGX_ERROR
;

282 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_STREAM_PREACCESS_PHASE
].
h™dÀrs
,

283 
cf
->
poﬁ
, 1, (
ngx_°ªam_h™dÀr_±
))

284 !
NGX_OK
)

286  
NGX_ERROR
;

289 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_STREAM_ACCESS_PHASE
].
h™dÀrs
,

290 
cf
->
poﬁ
, 1, (
ngx_°ªam_h™dÀr_±
))

291 !
NGX_OK
)

293  
NGX_ERROR
;

296 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_STREAM_SSL_PHASE
].
h™dÀrs
,

297 
cf
->
poﬁ
, 1, (
ngx_°ªam_h™dÀr_±
))

298 !
NGX_OK
)

300  
NGX_ERROR
;

303 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_STREAM_PREREAD_PHASE
].
h™dÀrs
,

304 
cf
->
poﬁ
, 1, (
ngx_°ªam_h™dÀr_±
))

305 !
NGX_OK
)

307  
NGX_ERROR
;

310 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_STREAM_LOG_PHASE
].
h™dÀrs
,

311 
cf
->
poﬁ
, 1, (
ngx_°ªam_h™dÀr_±
))

312 !
NGX_OK
)

314  
NGX_ERROR
;

317  
NGX_OK
;

318 
	}
}

321 
ngx_öt_t


322 
	$ngx_°ªam_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

323 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
)

325 
ngx_öt_t
 
j
;

326 
ngx_uöt_t
 
i
, 
n
;

327 
ngx_°ªam_h™dÀr_±
 *
h
;

328 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
;

329 
ngx_°ªam_pha£_h™dÀr_±
 
checkî
;

331 
n
 = 1 ;

333 
i
 = 0; i < 
NGX_STREAM_LOG_PHASE
; i++) {

334 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

337 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

338 
n
 * (
ngx_°ªam_pha£_h™dÀr_t
) + (*));

339 i‡(
ph
 =
NULL
) {

340  
NGX_ERROR
;

343 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

344 
n
 = 0;

346 
i
 = 0; i < 
NGX_STREAM_LOG_PHASE
; i++) {

347 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

349 
i
) {

351 
NGX_STREAM_PREREAD_PHASE
:

352 
checkî
 = 
ngx_°ªam_c‹e_¥îód_pha£
;

355 
NGX_STREAM_CONTENT_PHASE
:

356 
ph
->
checkî
 = 
ngx_°ªam_c‹e_c⁄ã¡_pha£
;

357 
n
++;

358 
ph
++;

363 
checkî
 = 
ngx_°ªam_c‹e_gíîic_pha£
;

366 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

368 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >= 0; j--) {

369 
ph
->
checkî
 = checker;

370 
ph
->
h™dÀr
 = 
h
[
j
];

371 
ph
->
√xt
 = 
n
;

372 
ph
++;

376  
NGX_OK
;

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_°ªam_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

382 
ngx_°ªam_li°í_t
 *
li°í
)

384 
ö_p‹t_t
 
p
;

385 
ngx_uöt_t
 
i
;

386 
sockaddr
 *
ß
;

387 
ngx_°ªam_c⁄f_p‹t_t
 *
p‹t
;

388 
ngx_°ªam_c⁄f_addr_t
 *
addr
;

390 
ß
 = &
li°í
->
sockaddr
.sockaddr;

391 
p
 = 
	`ngx_öë_gë_p‹t
(
ß
);

393 
p‹t
 = 
p‹ts
->
ñts
;

394 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

396 i‡(
p
 =
p‹t
[
i
].port

397 && 
li°í
->
ty≥
 =
p‹t
[
i
].type

398 && 
ß
->
ß_Ámûy
 =
p‹t
[
i
].
Ámûy
)

402 
p‹t
 = &p‹t[
i
];

403 
found
;

409 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

410 i‡(
p‹t
 =
NULL
) {

411  
NGX_ERROR
;

414 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

415 
p‹t
->
ty≥
 = 
li°í
->type;

416 
p‹t
->p‹à
p
;

418 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

419 (
ngx_°ªam_c⁄f_addr_t
))

420 !
NGX_OK
)

422  
NGX_ERROR
;

425 
found
:

427 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

428 i‡(
addr
 =
NULL
) {

429  
NGX_ERROR
;

432 
addr
->
›t
 = *
li°í
;

434  
NGX_OK
;

435 
	}
}

439 
	$ngx_°ªam_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

441 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

442 
ngx_li°íög_t
 *
ls
;

443 
ngx_°ªam_p‹t_t
 *
°p‹t
;

444 
ngx_°ªam_c⁄f_p‹t_t
 *
p‹t
;

445 
ngx_°ªam_c⁄f_addr_t
 *
addr
;

446 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

448 
p‹t
 = 
p‹ts
->
ñts
;

449 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

451 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

452 (
ngx_°ªam_c⁄f_addr_t
), 
ngx_°ªam_cmp_c⁄f_addrs
);

454 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

455 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

462 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

463 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

464 
böd_wûdˇrd
 = 1;

467 
böd_wûdˇrd
 = 0;

470 
i
 = 0;

472 
i
 < 
œ°
) {

474 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

475 
i
++;

479 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
[
i
].
›t
.
sockaddr
.sockaddr,

480 
addr
[
i
].
›t
.
sockÀn
);

481 i‡(
ls
 =
NULL
) {

482  
NGX_CONF_ERROR
;

485 
ls
->
addr_¡›
 = 1;

486 
ls
->
h™dÀr
 = 
ngx_°ªam_öô_c⁄√˘i⁄
;

487 
ls
->
poﬁ_size
 = 256;

488 
ls
->
ty≥
 = 
addr
[
i
].
›t
.type;

490 
cscf
 = 
addr
->
›t
.
˘x
->
§v_c⁄f
[
ngx_°ªam_c‹e_moduÀ
.
˘x_ödex
];

492 
ls
->
logp
 = 
cscf
->
îr‹_log
;

493 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

494 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

496 
ls
->
backlog
 = 
addr
[
i
].
›t
.backlog;

497 
ls
->
rcvbuf
 = 
addr
[
i
].
›t
.rcvbuf;

498 
ls
->
¢dbuf
 = 
addr
[
i
].
›t
.sndbuf;

500 
ls
->
wûdˇrd
 = 
addr
[
i
].
›t
.wildcard;

502 
ls
->
kì∑live
 = 
addr
[
i
].
›t
.
so_kì∑live
;

503 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

504 
ls
->
kìpidÀ
 = 
addr
[
i
].
›t
.
t˝_kìpidÀ
;

505 
ls
->
kìpötvl
 = 
addr
[
i
].
›t
.
t˝_kìpötvl
;

506 
ls
->
kìp˙t
 = 
addr
[
i
].
›t
.
t˝_kìp˙t
;

509 #i‡(
NGX_HAVE_INET6
)

510 
ls
->
ùv6⁄ly
 = 
addr
[
i
].
›t
.ipv6only;

513 #i‡(
NGX_HAVE_REUSEPORT
)

514 
ls
->
ªu£p‹t
 = 
addr
[
i
].
›t
.reuseport;

517 
°p‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_p‹t_t
));

518 i‡(
°p‹t
 =
NULL
) {

519  
NGX_CONF_ERROR
;

522 
ls
->
£rvîs
 = 
°p‹t
;

524 
°p‹t
->
«ddrs
 = 
i
 + 1;

526 
ls
->
sockaddr
->
ß_Ámûy
) {

527 #i‡(
NGX_HAVE_INET6
)

528 
AF_INET6
:

529 i‡(
	`ngx_°ªam_add_addrs6
(
cf
, 
°p‹t
, 
addr
Ë!
NGX_OK
) {

530  
NGX_CONF_ERROR
;

535 i‡(
	`ngx_°ªam_add_addrs
(
cf
, 
°p‹t
, 
addr
Ë!
NGX_OK
) {

536  
NGX_CONF_ERROR
;

541 
addr
++;

542 
œ°
--;

546  
NGX_CONF_OK
;

547 
	}
}

550 
ngx_öt_t


551 
	$ngx_°ªam_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_p‹t_t
 *
°p‹t
,

552 
ngx_°ªam_c⁄f_addr_t
 *
addr
)

554 
u_ch¨
 *
p
;

555 
size_t
 
Àn
;

556 
ngx_uöt_t
 
i
;

557 
sockaddr_ö
 *
sö
;

558 
ngx_°ªam_ö_addr_t
 *
addrs
;

559 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

561 
°p‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

562 
°p‹t
->
«ddrs
 * (
ngx_°ªam_ö_addr_t
));

563 i‡(
°p‹t
->
addrs
 =
NULL
) {

564  
NGX_ERROR
;

567 
addrs
 = 
°p‹t
->addrs;

569 
i
 = 0; i < 
°p‹t
->
«ddrs
; i++) {

571 
sö
 = &
addr
[
i
].
›t
.
sockaddr
.
sockaddr_ö
;

572 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

574 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].
›t
.ctx;

575 #i‡(
NGX_STREAM_SSL
)

576 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

578 
addrs
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
[i].
›t
.proxy_protocol;

580 
Àn
 = 
	`ngx_sock_¡›
(&
addr
[
i
].
›t
.
sockaddr
.sockaddr,áddr[i].›t.
sockÀn
,

581 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

583 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

584 i‡(
p
 =
NULL
) {

585  
NGX_ERROR
;

588 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

590 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

591 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

594  
NGX_OK
;

595 
	}
}

598 #i‡(
NGX_HAVE_INET6
)

600 
ngx_öt_t


601 
	$ngx_°ªam_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_p‹t_t
 *
°p‹t
,

602 
ngx_°ªam_c⁄f_addr_t
 *
addr
)

604 
u_ch¨
 *
p
;

605 
size_t
 
Àn
;

606 
ngx_uöt_t
 
i
;

607 
sockaddr_ö6
 *
sö6
;

608 
ngx_°ªam_ö6_addr_t
 *
addrs6
;

609 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

611 
°p‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

612 
°p‹t
->
«ddrs
 * (
ngx_°ªam_ö6_addr_t
));

613 i‡(
°p‹t
->
addrs
 =
NULL
) {

614  
NGX_ERROR
;

617 
addrs6
 = 
°p‹t
->
addrs
;

619 
i
 = 0; i < 
°p‹t
->
«ddrs
; i++) {

621 
sö6
 = &
addr
[
i
].
›t
.
sockaddr
.
sockaddr_ö6
;

622 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

624 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].
›t
.ctx;

625 #i‡(
NGX_STREAM_SSL
)

626 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

628 
addrs6
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
[i].
›t
.proxy_protocol;

630 
Àn
 = 
	`ngx_sock_¡›
(&
addr
[
i
].
›t
.
sockaddr
.sockaddr,áddr[i].›t.
sockÀn
,

631 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

633 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

634 i‡(
p
 =
NULL
) {

635  
NGX_ERROR
;

638 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

640 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

641 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

644  
NGX_OK
;

645 
	}
}

650 
ngx_öt_t


651 
	$ngx_°ªam_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

653 
ngx_°ªam_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

655 
fú°
 = (
ngx_°ªam_c⁄f_addr_t
 *Ë
⁄e
;

656 
£c⁄d
 = (
ngx_°ªam_c⁄f_addr_t
 *Ë
two
;

658 i‡(
fú°
->
›t
.
wûdˇrd
) {

663 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

668 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

673 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

681 
	}
}

	@src/stream/ngx_stream.h

8 #i‚de‡
_NGX_STREAM_H_INCLUDED_


9 
	#_NGX_STREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_STREAM_SSL
)

16 
	~<ngx_°ªam_s¶_moduÀ.h
>

20 
ngx_°ªam_£ssi⁄_s
 
	tngx_°ªam_£ssi⁄_t
;

23 
	~<ngx_°ªam_v¨übÀs.h
>

24 
	~<ngx_°ªam_s¸ùt.h
>

25 
	~<ngx_°ªam_up°ªam.h
>

26 
	~<ngx_°ªam_up°ªam_round_robö.h
>

29 
	#NGX_STREAM_OK
 200

	)

30 
	#NGX_STREAM_BAD_REQUEST
 400

	)

31 
	#NGX_STREAM_FORBIDDEN
 403

	)

32 
	#NGX_STREAM_INTERNAL_SERVER_ERROR
 500

	)

33 
	#NGX_STREAM_BAD_GATEWAY
 502

	)

34 
	#NGX_STREAM_SERVICE_UNAVAILABLE
 503

	)

38 **
	mmaö_c⁄f
;

39 **
	m§v_c⁄f
;

40 } 
	tngx_°ªam_c⁄f_˘x_t
;

44 
ngx_sockaddr_t
 
	msockaddr
;

45 
sockÀn_t
 
	msockÀn
;

48 
ngx_°ªam_c⁄f_˘x_t
 *
	m˘x
;

50 
	mböd
:1;

51 
	mwûdˇrd
:1;

52 
	ms¶
:1;

53 #i‡(
NGX_HAVE_INET6
)

54 
	mùv6⁄ly
:1;

56 
	mªu£p‹t
:1;

57 
	mso_kì∑live
:2;

58 
	m¥oxy_¥Ÿocﬁ
:1;

59 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

60 
	mt˝_kìpidÀ
;

61 
	mt˝_kìpötvl
;

62 
	mt˝_kìp˙t
;

64 
	mbacklog
;

65 
	mrcvbuf
;

66 
	m¢dbuf
;

67 
	mty≥
;

68 } 
	tngx_°ªam_li°í_t
;

72 
ngx_°ªam_c⁄f_˘x_t
 *
	m˘x
;

73 
ngx_°r_t
 
	maddr_ãxt
;

74 
	ms¶
:1;

75 
	m¥oxy_¥Ÿocﬁ
:1;

76 } 
	tngx_°ªam_addr_c⁄f_t
;

79 
ö_addr_t
 
	maddr
;

80 
ngx_°ªam_addr_c⁄f_t
 
	mc⁄f
;

81 } 
	tngx_°ªam_ö_addr_t
;

84 #i‡(
NGX_HAVE_INET6
)

87 
ö6_addr
 
	maddr6
;

88 
ngx_°ªam_addr_c⁄f_t
 
	mc⁄f
;

89 } 
	tngx_°ªam_ö6_addr_t
;

96 *
	maddrs
;

97 
ngx_uöt_t
 
	m«ddrs
;

98 } 
	tngx_°ªam_p‹t_t
;

102 
	mÁmûy
;

103 
	mty≥
;

104 
ö_p‹t_t
 
	mp‹t
;

105 
ngx_¨øy_t
 
	maddrs
;

106 } 
	tngx_°ªam_c⁄f_p‹t_t
;

110 
ngx_°ªam_li°í_t
 
	m›t
;

111 } 
	tngx_°ªam_c⁄f_addr_t
;

115 
	mNGX_STREAM_POST_ACCEPT_PHASE
 = 0,

116 
	mNGX_STREAM_PREACCESS_PHASE
,

117 
	mNGX_STREAM_ACCESS_PHASE
,

118 
	mNGX_STREAM_SSL_PHASE
,

119 
	mNGX_STREAM_PREREAD_PHASE
,

120 
	mNGX_STREAM_CONTENT_PHASE
,

121 
	mNGX_STREAM_LOG_PHASE


122 } 
	tngx_°ªam_pha£s
;

125 
ngx_°ªam_pha£_h™dÀr_s
 
	tngx_°ªam_pha£_h™dÀr_t
;

127 
	$ngx_öt_t
 (*
	tngx_°ªam_pha£_h™dÀr_±
)(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

128 
	tngx_°ªam_pha£_h™dÀr_t
 *
	tph
);

129 
	$ngx_öt_t
 (*
	tngx_°ªam_h™dÀr_±
)(
	tngx_°ªam_£ssi⁄_t
 *
	ts
);

130 (*
	tngx_°ªam_c⁄ã¡_h™dÀr_±
)(
	tngx_°ªam_£ssi⁄_t
 *
	ts
);

133 
	sngx_°ªam_pha£_h™dÀr_s
 {

134 
ngx_°ªam_pha£_h™dÀr_±
 
checkî
;

135 
ngx_°ªam_h™dÀr_±
 
h™dÀr
;

136 
ngx_uöt_t
 
√xt
;

141 
ngx_°ªam_pha£_h™dÀr_t
 *
h™dÀrs
;

142 } 
	tngx_°ªam_pha£_ígöe_t
;

146 
ngx_¨øy_t
 
h™dÀrs
;

147 } 
	tngx_°ªam_pha£_t
;

151 
ngx_¨øy_t
 
£rvîs
;

152 
ngx_¨øy_t
 
li°í
;

154 
ngx_°ªam_pha£_ígöe_t
 
pha£_ígöe
;

156 
ngx_hash_t
 
v¨übÀs_hash
;

158 
ngx_¨øy_t
 
v¨übÀs
;

159 
ngx_¨øy_t
 
¥efix_v¨übÀs
;

160 
ngx_uöt_t
 
nˇ±uªs
;

162 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

163 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

165 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

167 
ngx_°ªam_pha£_t
 
pha£s
[
NGX_STREAM_LOG_PHASE
 + 1];

168 } 
	tngx_°ªam_c‹e_maö_c⁄f_t
;

172 
ngx_°ªam_c⁄ã¡_h™dÀr_±
 
h™dÀr
;

174 
ngx_°ªam_c⁄f_˘x_t
 *
˘x
;

176 
u_ch¨
 *
fûe_«me
;

177 
ngx_uöt_t
 
löe
;

179 
ngx_Êag_t
 
t˝_nodñay
;

180 
size_t
 
¥îód_buf„r_size
;

181 
ngx_m£c_t
 
¥îód_timeout
;

183 
ngx_log_t
 *
îr‹_log
;

185 
ngx_m£c_t
 
ªsﬁvî_timeout
;

186 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

188 
ngx_m£c_t
 
¥oxy_¥Ÿocﬁ_timeout
;

190 
ngx_uöt_t
 
li°í
;

191 } 
	tngx_°ªam_c‹e_§v_c⁄f_t
;

194 
	sngx_°ªam_£ssi⁄_s
 {

195 
uöt32_t
 
sig«tuª
;

197 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

199 
off_t
 
ª˚ived
;

200 
time_t
 
°¨t_£c
;

201 
ngx_m£c_t
 
°¨t_m£c
;

203 
ngx_log_h™dÀr_±
 
log_h™dÀr
;

205 **
˘x
;

206 **
maö_c⁄f
;

207 **
§v_c⁄f
;

209 
ngx_°ªam_up°ªam_t
 *
up°ªam
;

210 
ngx_¨øy_t
 *
up°ªam_°©es
;

212 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v¨übÀs
;

214 #i‡(
NGX_PCRE
)

215 
ngx_uöt_t
 
nˇ±uªs
;

216 *
ˇ±uªs
;

217 
u_ch¨
 *
ˇ±uªs_d©a
;

220 
ngx_öt_t
 
pha£_h™dÀr
;

221 
ngx_uöt_t
 
°©us
;

223 
s¶
:1;

225 
°©_¥o˚ssög
:1;

227 
hó…h_check
:1;

232 
	`ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
cf
);

233 
	`ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
cf
);

235 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

236 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

238 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

239 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

240 *
c⁄f
);

241 } 
	tngx_°ªam_moduÀ_t
;

244 
	#NGX_STREAM_MODULE
 0x4d525453

	)

246 
	#NGX_STREAM_MAIN_CONF
 0x02000000

	)

247 
	#NGX_STREAM_SRV_CONF
 0x04000000

	)

248 
	#NGX_STREAM_UPS_CONF
 0x08000000

	)

251 
	#NGX_STREAM_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_°ªam_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

252 
	#NGX_STREAM_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_°ªam_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

255 
	#ngx_°ªam_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

256 
	#ngx_°ªam_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

257 
	#ngx_°ªam_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

260 
	#ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

261 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

262 
	#ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
) \

263 (
s
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

265 
	#ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

266 ((
ngx_°ªam_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

267 
	#ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

268 ((
ngx_°ªam_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

270 
	#ngx_°ªam_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

271 (
cy˛e
->
c⁄f_˘x
[
ngx_°ªam_moduÀ
.
ödex
] ? \

272 ((
ngx_°ªam_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_°ªam_moduÀ
.
ödex
]) \

273 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

274 
NULL
)

	)

277 
	#NGX_STREAM_WRITE_BUFFERED
 0x10

	)

280 
	`ngx_°ªam_c‹e_run_pha£s
(
ngx_°ªam_£ssi⁄_t
 *
s
);

281 
ngx_öt_t
 
	`ngx_°ªam_c‹e_gíîic_pha£
(
ngx_°ªam_£ssi⁄_t
 *
s
,

282 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
);

283 
ngx_öt_t
 
	`ngx_°ªam_c‹e_¥îód_pha£
(
ngx_°ªam_£ssi⁄_t
 *
s
,

284 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
);

285 
ngx_öt_t
 
	`ngx_°ªam_c‹e_c⁄ã¡_pha£
(
ngx_°ªam_£ssi⁄_t
 *
s
,

286 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
);

289 
	`ngx_°ªam_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

290 
	`ngx_°ªam_£ssi⁄_h™dÀr
(
ngx_evít_t
 *
ªv
);

291 
	`ngx_°ªam_föÆize_£ssi⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
rc
);

294 
ngx_moduÀ_t
 
ngx_°ªam_moduÀ
;

295 
ngx_uöt_t
 
ngx_°ªam_max_moduÀ
;

296 
ngx_moduÀ_t
 
ngx_°ªam_c‹e_moduÀ
;

299 
	$ngx_öt_t
 (*
	tngx_°ªam_fûãr_±
)(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

300 
	tngx_chaö_t
 *
	tchaö
, 
	tngx_uöt_t
 
	t‰om_up°ªam
);

303 
ngx_°ªam_fûãr_±
 
ngx_°ªam_t›_fûãr
;

	@src/stream/ngx_stream_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_°ªam_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_°ªam_ac˚ss_ruÀ6_t
;

29 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

32 
ngx_uöt_t
 
	mdíy
;

33 } 
	tngx_°ªam_ac˚ss_ruÀ_un_t
;

38 
ngx_¨øy_t
 *
	mruÀs
;

39 #i‡(
NGX_HAVE_INET6
)

40 
ngx_¨øy_t
 *
	mruÀs6
;

42 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

43 
ngx_¨øy_t
 *
	mruÀs_un
;

45 } 
	tngx_°ªam_ac˚ss_§v_c⁄f_t
;

48 
ngx_öt_t
 
ngx_°ªam_ac˚ss_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
);

49 
ngx_öt_t
 
ngx_°ªam_ac˚ss_öë
(
ngx_°ªam_£ssi⁄_t
 *
s
,

50 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
, 
ö_addr_t
 
addr
);

51 #i‡(
NGX_HAVE_INET6
)

52 
ngx_öt_t
 
ngx_°ªam_ac˚ss_öë6
(
ngx_°ªam_£ssi⁄_t
 *
s
,

53 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
, 
u_ch¨
 *
p
);

55 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

56 
ngx_öt_t
 
ngx_°ªam_ac˚ss_unix
(
ngx_°ªam_£ssi⁄_t
 *
s
,

57 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
);

59 
ngx_öt_t
 
ngx_°ªam_ac˚ss_found
(
ngx_°ªam_£ssi⁄_t
 *
s
,

60 
ngx_uöt_t
 
díy
);

61 *
ngx_°ªam_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_°ªam_ac˚ss_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

64 *
ngx_°ªam_ac˚ss_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

65 *
∑ª¡
, *
chûd
);

66 
ngx_öt_t
 
ngx_°ªam_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

69 
ngx_comm™d_t
 
	gngx_°ªam_ac˚ss_comm™ds
[] = {

71 { 
ngx_°rög
("allow"),

72 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_°ªam_ac˚ss_ruÀ
,

74 
NGX_STREAM_SRV_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("deny"),

79 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

80 
ngx_°ªam_ac˚ss_ruÀ
,

81 
NGX_STREAM_SRV_CONF_OFFSET
,

83 
NULL
 },

85 
ngx_nuŒ_comm™d


90 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_ac˚ss_moduÀ_˘x
 = {

91 
NULL
,

92 
ngx_°ªam_ac˚ss_öô
,

94 
NULL
,

95 
NULL
,

97 
ngx_°ªam_ac˚ss_¸óã_§v_c⁄f
,

98 
ngx_°ªam_ac˚ss_mîge_§v_c⁄f


102 
ngx_moduÀ_t
 
	gngx_°ªam_ac˚ss_moduÀ
 = {

103 
NGX_MODULE_V1
,

104 &
ngx_°ªam_ac˚ss_moduÀ_˘x
,

105 
ngx_°ªam_ac˚ss_comm™ds
,

106 
NGX_STREAM_MODULE
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NGX_MODULE_V1_PADDING


118 
ngx_öt_t


119 
	$ngx_°ªam_ac˚ss_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

121 
sockaddr_ö
 *
sö
;

122 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
;

123 #i‡(
NGX_HAVE_INET6
)

124 
u_ch¨
 *
p
;

125 
ö_addr_t
 
addr
;

126 
sockaddr_ö6
 *
sö6
;

129 
ascf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_ac˚ss_moduÀ
);

131 
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

133 
AF_INET
:

134 i‡(
ascf
->
ruÀs
) {

135 
sö
 = (
sockaddr_ö
 *Ë
s
->
c⁄√˘i⁄
->
sockaddr
;

136  
	`ngx_°ªam_ac˚ss_öë
(
s
, 
ascf
, 
sö
->
sö_addr
.
s_addr
);

140 #i‡(
NGX_HAVE_INET6
)

142 
AF_INET6
:

143 
sö6
 = (
sockaddr_ö6
 *Ë
s
->
c⁄√˘i⁄
->
sockaddr
;

144 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

146 i‡(
ascf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

147 
addr
 = 
p
[12] << 24;

148 
addr
 +
p
[13] << 16;

149 
addr
 +
p
[14] << 8;

150 
addr
 +
p
[15];

151  
	`ngx_°ªam_ac˚ss_öë
(
s
, 
ascf
, 
	`ht⁄l
(
addr
));

154 i‡(
ascf
->
ruÀs6
) {

155  
	`ngx_°ªam_ac˚ss_öë6
(
s
, 
ascf
, 
p
);

162 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

164 
AF_UNIX
:

165 i‡(
ascf
->
ruÀs_un
) {

166  
	`ngx_°ªam_ac˚ss_unix
(
s
, 
ascf
);

174  
NGX_DECLINED
;

175 
	}
}

178 
ngx_öt_t


179 
	$ngx_°ªam_ac˚ss_öë
(
ngx_°ªam_£ssi⁄_t
 *
s
,

180 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
, 
ö_addr_t
 
addr
)

182 
ngx_uöt_t
 
i
;

183 
ngx_°ªam_ac˚ss_ruÀ_t
 *
ruÀ
;

185 
ruÀ
 = 
ascf
->
ruÀs
->
ñts
;

186 
i
 = 0; i < 
ascf
->
ruÀs
->
√…s
; i++) {

188 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

190 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

192 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

193  
	`ngx_°ªam_ac˚ss_found
(
s
, 
ruÀ
[
i
].
díy
);

197  
NGX_DECLINED
;

198 
	}
}

201 #i‡(
NGX_HAVE_INET6
)

203 
ngx_öt_t


204 
	$ngx_°ªam_ac˚ss_öë6
(
ngx_°ªam_£ssi⁄_t
 *
s
,

205 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
, 
u_ch¨
 *
p
)

207 
ngx_uöt_t
 
n
;

208 
ngx_uöt_t
 
i
;

209 
ngx_°ªam_ac˚ss_ruÀ6_t
 *
ruÀ6
;

211 
ruÀ6
 = 
ascf
->
ruÀs6
->
ñts
;

212 
i
 = 0; i < 
ascf
->
ruÀs6
->
√…s
; i++) {

214 #i‡(
NGX_DEBUG
)

216 
size_t
 
˛
, 
ml
, 
Æ
;

217 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

218 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

219 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

221 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

222 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

223 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

225 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

226 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

230 
n
 = 0;Ç < 16;Ç++) {

231 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

232 
√xt
;

236  
	`ngx_°ªam_ac˚ss_found
(
s
, 
ruÀ6
[
i
].
díy
);

238 
√xt
:

242  
NGX_DECLINED
;

243 
	}
}

248 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

250 
ngx_öt_t


251 
	$ngx_°ªam_ac˚ss_unix
(
ngx_°ªam_£ssi⁄_t
 *
s
,

252 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
)

254 
ngx_uöt_t
 
i
;

255 
ngx_°ªam_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

257 
ruÀ_un
 = 
ascf
->
ruÀs_un
->
ñts
;

258 
i
 = 0; i < 
ascf
->
ruÀs_un
->
√…s
; i++) {

262  
	`ngx_°ªam_ac˚ss_found
(
s
, 
ruÀ_un
[
i
].
díy
);

266  
NGX_DECLINED
;

267 
	}
}

272 
ngx_öt_t


273 
	$ngx_°ªam_ac˚ss_found
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
díy
)

275 i‡(
díy
) {

276 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

278  
NGX_STREAM_FORBIDDEN
;

281  
NGX_OK
;

282 
	}
}

286 
	$ngx_°ªam_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

288 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
ascf
 = 
c⁄f
;

290 
ngx_öt_t
 
rc
;

291 
ngx_uöt_t
 
Æl
;

292 
ngx_°r_t
 *
vÆue
;

293 
ngx_cidr_t
 
cidr
;

294 
ngx_°ªam_ac˚ss_ruÀ_t
 *
ruÀ
;

295 #i‡(
NGX_HAVE_INET6
)

296 
ngx_°ªam_ac˚ss_ruÀ6_t
 *
ruÀ6
;

298 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

299 
ngx_°ªam_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

302 
Æl
 = 0;

303 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

305 
vÆue
 = 
cf
->
¨gs
->
ñts
;

307 i‡(
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0) {

308 
Æl
 = 1;

310 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

311 } i‡(
vÆue
[1].
Àn
 =5 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "unix:") == 0) {

312 
cidr
.
Ámûy
 = 
AF_UNIX
;

316 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

318 i‡(
rc
 =
NGX_ERROR
) {

319 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

320 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

321  
NGX_CONF_ERROR
;

324 i‡(
rc
 =
NGX_DONE
) {

325 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

326 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

330 i‡(
cidr
.
Ámûy
 =
AF_INET
 || 
Æl
) {

332 i‡(
ascf
->
ruÀs
 =
NULL
) {

333 
ascf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

334 (
ngx_°ªam_ac˚ss_ruÀ_t
));

335 i‡(
ascf
->
ruÀs
 =
NULL
) {

336  
NGX_CONF_ERROR
;

340 
ruÀ
 = 
	`ngx_¨øy_push
(
ascf
->
ruÀs
);

341 i‡(
ruÀ
 =
NULL
) {

342  
NGX_CONF_ERROR
;

345 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

346 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

347 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

350 #i‡(
NGX_HAVE_INET6
)

351 i‡(
cidr
.
Ámûy
 =
AF_INET6
 || 
Æl
) {

353 i‡(
ascf
->
ruÀs6
 =
NULL
) {

354 
ascf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

355 (
ngx_°ªam_ac˚ss_ruÀ6_t
));

356 i‡(
ascf
->
ruÀs6
 =
NULL
) {

357  
NGX_CONF_ERROR
;

361 
ruÀ6
 = 
	`ngx_¨øy_push
(
ascf
->
ruÀs6
);

362 i‡(
ruÀ6
 =
NULL
) {

363  
NGX_CONF_ERROR
;

366 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

367 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

368 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

372 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

373 i‡(
cidr
.
Ámûy
 =
AF_UNIX
 || 
Æl
) {

375 i‡(
ascf
->
ruÀs_un
 =
NULL
) {

376 
ascf
->
ruÀs_un
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

377 (
ngx_°ªam_ac˚ss_ruÀ_un_t
));

378 i‡(
ascf
->
ruÀs_un
 =
NULL
) {

379  
NGX_CONF_ERROR
;

383 
ruÀ_un
 = 
	`ngx_¨øy_push
(
ascf
->
ruÀs_un
);

384 i‡(
ruÀ_un
 =
NULL
) {

385  
NGX_CONF_ERROR
;

388 
ruÀ_un
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

392  
NGX_CONF_OK
;

393 
	}
}

397 
	$ngx_°ªam_ac˚ss_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

399 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
c⁄f
;

401 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_ac˚ss_§v_c⁄f_t
));

402 i‡(
c⁄f
 =
NULL
) {

403  
NULL
;

406  
c⁄f
;

407 
	}
}

411 
	$ngx_°ªam_ac˚ss_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

413 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

414 
ngx_°ªam_ac˚ss_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

416 i‡(
c⁄f
->
ruÀs
 =
NULL


417 #i‡(
NGX_HAVE_INET6
)

418 && 
c⁄f
->
ruÀs6
 =
NULL


420 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

421 && 
c⁄f
->
ruÀs_un
 =
NULL


424 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

425 #i‡(
NGX_HAVE_INET6
)

426 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

428 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

429 
c⁄f
->
ruÀs_un
 = 
¥ev
->rules_un;

433  
NGX_CONF_OK
;

434 
	}
}

437 
ngx_öt_t


438 
	$ngx_°ªam_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

440 
ngx_°ªam_h™dÀr_±
 *
h
;

441 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

443 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

445 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_STREAM_ACCESS_PHASE
].
h™dÀrs
);

446 i‡(
h
 =
NULL
) {

447  
NGX_ERROR
;

450 *
h
 = 
ngx_°ªam_ac˚ss_h™dÀr
;

452  
NGX_OK
;

453 
	}
}

	@src/stream/ngx_stream_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 
ngx_öt_t
 
ngx_°ªam_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

14 *
ngx_°ªam_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_°ªam_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

16 *
ngx_°ªam_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

17 *
ngx_°ªam_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

18 *
chûd
);

19 *
ngx_°ªam_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

20 *
c⁄f
);

21 *
ngx_°ªam_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

22 *
c⁄f
);

23 *
ngx_°ªam_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

24 *
c⁄f
);

25 *
ngx_°ªam_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

29 
ngx_comm™d_t
 
	gngx_°ªam_c‹e_comm™ds
[] = {

31 { 
ngx_°rög
("variables_hash_max_size"),

32 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE1
,

33 
ngx_c⁄f_£t_num_¶Ÿ
,

34 
NGX_STREAM_MAIN_CONF_OFFSET
,

35 
off£tof
(
ngx_°ªam_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

36 
NULL
 },

38 { 
ngx_°rög
("variables_hash_bucket_size"),

39 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE1
,

40 
ngx_c⁄f_£t_num_¶Ÿ
,

41 
NGX_STREAM_MAIN_CONF_OFFSET
,

42 
off£tof
(
ngx_°ªam_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

43 
NULL
 },

45 { 
ngx_°rög
("server"),

46 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

47 
ngx_°ªam_c‹e_£rvî
,

50 
NULL
 },

52 { 
ngx_°rög
("listen"),

53 
NGX_STREAM_SRV_CONF
|
NGX_CONF_1MORE
,

54 
ngx_°ªam_c‹e_li°í
,

55 
NGX_STREAM_SRV_CONF_OFFSET
,

57 
NULL
 },

59 { 
ngx_°rög
("error_log"),

60 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_1MORE
,

61 
ngx_°ªam_c‹e_îr‹_log
,

62 
NGX_STREAM_SRV_CONF_OFFSET
,

64 
NULL
 },

66 { 
ngx_°rög
("resolver"),

67 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_1MORE
,

68 
ngx_°ªam_c‹e_ªsﬁvî
,

69 
NGX_STREAM_SRV_CONF_OFFSET
,

71 
NULL
 },

73 { 
ngx_°rög
("resolver_timeout"),

74 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

75 
ngx_c⁄f_£t_m£c_¶Ÿ
,

76 
NGX_STREAM_SRV_CONF_OFFSET
,

77 
off£tof
(
ngx_°ªam_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

78 
NULL
 },

80 { 
ngx_°rög
("proxy_protocol_timeout"),

81 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_c⁄f_£t_m£c_¶Ÿ
,

83 
NGX_STREAM_SRV_CONF_OFFSET
,

84 
off£tof
(
ngx_°ªam_c‹e_§v_c⁄f_t
, 
¥oxy_¥Ÿocﬁ_timeout
),

85 
NULL
 },

87 { 
ngx_°rög
("tcp_nodelay"),

88 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

89 
ngx_c⁄f_£t_Êag_¶Ÿ
,

90 
NGX_STREAM_SRV_CONF_OFFSET
,

91 
off£tof
(
ngx_°ªam_c‹e_§v_c⁄f_t
, 
t˝_nodñay
),

92 
NULL
 },

94 { 
ngx_°rög
("preread_buffer_size"),

95 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

96 
ngx_c⁄f_£t_size_¶Ÿ
,

97 
NGX_STREAM_SRV_CONF_OFFSET
,

98 
off£tof
(
ngx_°ªam_c‹e_§v_c⁄f_t
, 
¥îód_buf„r_size
),

99 
NULL
 },

101 { 
ngx_°rög
("preread_timeout"),

102 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

103 
ngx_c⁄f_£t_m£c_¶Ÿ
,

104 
NGX_STREAM_SRV_CONF_OFFSET
,

105 
off£tof
(
ngx_°ªam_c‹e_§v_c⁄f_t
, 
¥îód_timeout
),

106 
NULL
 },

108 
ngx_nuŒ_comm™d


112 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_c‹e_moduÀ_˘x
 = {

113 
ngx_°ªam_c‹e_¥ec⁄figuøti⁄
,

114 
NULL
,

116 
ngx_°ªam_c‹e_¸óã_maö_c⁄f
,

117 
ngx_°ªam_c‹e_öô_maö_c⁄f
,

119 
ngx_°ªam_c‹e_¸óã_§v_c⁄f
,

120 
ngx_°ªam_c‹e_mîge_§v_c⁄f


124 
ngx_moduÀ_t
 
	gngx_°ªam_c‹e_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_°ªam_c‹e_moduÀ_˘x
,

127 
ngx_°ªam_c‹e_comm™ds
,

128 
NGX_STREAM_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


141 
	$ngx_°ªam_c‹e_run_pha£s
(
ngx_°ªam_£ssi⁄_t
 *
s
)

143 
ngx_öt_t
 
rc
;

144 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
;

145 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

147 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

149 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

151 
ph
[
s
->
pha£_h™dÀr
].
checkî
) {

153 
rc
 = 
ph
[
s
->
pha£_h™dÀr
].
	`checkî
(s, &ph[s->phase_handler]);

155 i‡(
rc
 =
NGX_OK
) {

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_°ªam_c‹e_gíîic_pha£
(
ngx_°ªam_£ssi⁄_t
 *
s
,

164 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
)

166 
ngx_öt_t
 
rc
;

173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

174 "gíîi¯pha£: %ui", 
s
->
pha£_h™dÀr
);

176 
rc
 = 
ph
->
	`h™dÀr
(
s
);

178 i‡(
rc
 =
NGX_OK
) {

179 
s
->
pha£_h™dÀr
 = 
ph
->
√xt
;

180  
NGX_AGAIN
;

183 i‡(
rc
 =
NGX_DECLINED
) {

184 
s
->
pha£_h™dÀr
++;

185  
NGX_AGAIN
;

188 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

189  
NGX_OK
;

192 i‡(
rc
 =
NGX_ERROR
) {

193 
rc
 = 
NGX_STREAM_INTERNAL_SERVER_ERROR
;

196 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
rc
);

198  
NGX_OK
;

199 
	}
}

202 
ngx_öt_t


203 
	$ngx_°ªam_c‹e_¥îód_pha£
(
ngx_°ªam_£ssi⁄_t
 *
s
,

204 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
)

206 
size_t
 
size
;

207 
ssize_t
 
n
;

208 
ngx_öt_t
 
rc
;

209 
ngx_c⁄√˘i⁄_t
 *
c
;

210 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

212 
c
 = 
s
->
c⁄√˘i⁄
;

214 
c
->
log
->
a˘i⁄
 = "prereading client data";

216 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

218 i‡(
c
->
ªad
->
timedout
) {

219 
rc
 = 
NGX_STREAM_OK
;

221 } i‡(
c
->
ªad
->
timî_£t
) {

222 
rc
 = 
NGX_AGAIN
;

225 
rc
 = 
ph
->
	`h™dÀr
(
s
);

228 
rc
 =
NGX_AGAIN
) {

230 i‡(
c
->
buf„r
 =
NULL
) {

231 
c
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(c->
poﬁ
, 
cscf
->
¥îód_buf„r_size
);

232 i‡(
c
->
buf„r
 =
NULL
) {

233 
rc
 = 
NGX_ERROR
;

238 
size
 = 
c
->
buf„r
->
íd
 - c->buf„r->
œ°
;

240 i‡(
size
 == 0) {

241 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0, "preread buffer full");

242 
rc
 = 
NGX_STREAM_BAD_REQUEST
;

246 i‡(
c
->
ªad
->
eof
) {

247 
rc
 = 
NGX_STREAM_OK
;

251 i‡(!
c
->
ªad
->
ªady
) {

252 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

253 
rc
 = 
NGX_ERROR
;

257 i‡(!
c
->
ªad
->
timî_£t
) {

258 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
¥îód_timeout
);

261 
c
->
ªad
->
h™dÀr
 = 
ngx_°ªam_£ssi⁄_h™dÀr
;

263  
NGX_OK
;

266 
n
 = 
c
->
	`ªcv
(c, c->
buf„r
->
œ°
, 
size
);

268 i‡(
n
 =
NGX_ERROR
) {

269 
rc
 = 
NGX_STREAM_OK
;

273 i‡(
n
 > 0) {

274 
c
->
buf„r
->
œ°
 +
n
;

277 
rc
 = 
ph
->
	`h™dÀr
(
s
);

280 i‡(
c
->
ªad
->
timî_£t
) {

281 
	`ngx_dñ_timî
(
c
->
ªad
);

284 i‡(
rc
 =
NGX_OK
) {

285 
s
->
pha£_h™dÀr
 = 
ph
->
√xt
;

286  
NGX_AGAIN
;

289 i‡(
rc
 =
NGX_DECLINED
) {

290 
s
->
pha£_h™dÀr
++;

291  
NGX_AGAIN
;

294 i‡(
rc
 =
NGX_DONE
) {

295  
NGX_OK
;

298 i‡(
rc
 =
NGX_ERROR
) {

299 
rc
 = 
NGX_STREAM_INTERNAL_SERVER_ERROR
;

302 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
rc
);

304  
NGX_OK
;

305 
	}
}

308 
ngx_öt_t


309 
	$ngx_°ªam_c‹e_c⁄ã¡_pha£
(
ngx_°ªam_£ssi⁄_t
 *
s
,

310 
ngx_°ªam_pha£_h™dÀr_t
 *
ph
)

312 
ngx_c⁄√˘i⁄_t
 *
c
;

313 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

315 
c
 = 
s
->
c⁄√˘i⁄
;

317 
c
->
log
->
a˘i⁄
 = 
NULL
;

319 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

321 i‡(
c
->
ty≥
 =
SOCK_STREAM


322 && 
cscf
->
t˝_nodñay


323 && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
)

325 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

326  
NGX_OK
;

329 
cscf
->
	`h™dÀr
(
s
);

331  
NGX_OK
;

332 
	}
}

335 
ngx_öt_t


336 
	$ngx_°ªam_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

338  
	`ngx_°ªam_v¨übÀs_add_c‹e_v¨s
(
cf
);

339 
	}
}

343 
	$ngx_°ªam_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

345 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

347 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_c‹e_maö_c⁄f_t
));

348 i‡(
cmcf
 =
NULL
) {

349  
NULL
;

352 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

353 (
ngx_°ªam_c‹e_§v_c⁄f_t
 *))

354 !
NGX_OK
)

356  
NULL
;

359 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_°ªam_li°í_t
))

360 !
NGX_OK
)

362  
NULL
;

365 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

366 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

368  
cmcf
;

369 
	}
}

373 
	$ngx_°ªam_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

375 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

377 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_max_size
, 1024);

378 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_buckë_size
, 64);

380 
cmcf
->
v¨übÀs_hash_buckë_size
 =

381 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

383 i‡(
cmcf
->
nˇ±uªs
) {

384 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

387  
NGX_CONF_OK
;

388 
	}
}

392 
	$ngx_°ªam_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

394 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

396 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_c‹e_§v_c⁄f_t
));

397 i‡(
cscf
 =
NULL
) {

398  
NULL
;

408 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

409 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

410 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

411 
cscf
->
¥oxy_¥Ÿocﬁ_timeout
 = 
NGX_CONF_UNSET_MSEC
;

412 
cscf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

413 
cscf
->
¥îód_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

414 
cscf
->
¥îód_timeout
 = 
NGX_CONF_UNSET_MSEC
;

416  
cscf
;

417 
	}
}

421 
	$ngx_°ªam_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

423 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

424 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

426 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

427 
¥ev
->
ªsﬁvî_timeout
, 30000);

429 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

431 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

438 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
, 0);

439 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

440  
NGX_CONF_ERROR
;

444 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

447 i‡(
c⁄f
->
h™dÀr
 =
NULL
) {

448 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

450 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

451  
NGX_CONF_ERROR
;

454 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

455 i‡(
¥ev
->
îr‹_log
) {

456 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

458 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

462 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
¥oxy_¥Ÿocﬁ_timeout
,

463 
¥ev
->
¥oxy_¥Ÿocﬁ_timeout
, 30000);

465 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

467 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
¥îód_buf„r_size
,

468 
¥ev
->
¥îód_buf„r_size
, 16384);

470 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
¥îód_timeout
,

471 
¥ev
->
¥îód_timeout
, 30000);

473  
NGX_CONF_OK
;

474 
	}
}

478 
	$ngx_°ªam_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

480 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

482  
	`ngx_log_£t_log
(
cf
, &
cscf
->
îr‹_log
);

483 
	}
}

487 
	$ngx_°ªam_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

489 *
rv
;

490 *
mc⁄f
;

491 
ngx_uöt_t
 
m
;

492 
ngx_c⁄f_t
 
pcf
;

493 
ngx_°ªam_moduÀ_t
 *
moduÀ
;

494 
ngx_°ªam_c⁄f_˘x_t
 *
˘x
, *
°ªam_˘x
;

495 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

496 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

498 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_c⁄f_˘x_t
));

499 i‡(
˘x
 =
NULL
) {

500  
NGX_CONF_ERROR
;

503 
°ªam_˘x
 = 
cf
->
˘x
;

504 
˘x
->
maö_c⁄f
 = 
°ªam_˘x
->main_conf;

508 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

509 (*Ë* 
ngx_°ªam_max_moduÀ
);

510 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

511  
NGX_CONF_ERROR
;

514 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

515 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_STREAM_MODULE
) {

519 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

521 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

522 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

523 i‡(
mc⁄f
 =
NULL
) {

524  
NGX_CONF_ERROR
;

527 
˘x
->
§v_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

533 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_°ªam_c‹e_moduÀ
.
˘x_ödex
];

534 
cscf
->
˘x
 = ctx;

536 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_°ªam_c‹e_moduÀ
.
˘x_ödex
];

538 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

539 i‡(
cscÂ
 =
NULL
) {

540  
NGX_CONF_ERROR
;

543 *
cscÂ
 = 
cscf
;

548 
pcf
 = *
cf
;

549 
cf
->
˘x
 = ctx;

550 
cf
->
cmd_ty≥
 = 
NGX_STREAM_SRV_CONF
;

552 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

554 *
cf
 = 
pcf
;

556 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

557 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

559 
cscf
->
fûe_«me
, cscf->
löe
);

560  
NGX_CONF_ERROR
;

563  
rv
;

564 
	}
}

568 
	$ngx_°ªam_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

570 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

572 
ngx_°r_t
 *
vÆue
, 
size
;

573 
ngx_uæ_t
 
u
;

574 
ngx_uöt_t
 
i
, 
backlog
;

575 
ngx_°ªam_li°í_t
 *
ls
, *
Æs
;

576 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

578 
cscf
->
li°í
 = 1;

580 
vÆue
 = 
cf
->
¨gs
->
ñts
;

582 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

584 
u
.
uæ
 = 
vÆue
[1];

585 
u
.
li°í
 = 1;

587 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

588 i‡(
u
.
îr
) {

589 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

591 
u
.
îr
, &u.
uæ
);

594  
NGX_CONF_ERROR
;

597 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

599 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

600 i‡(
ls
 =
NULL
) {

601  
NGX_CONF_ERROR
;

604 
	`ngx_memzîo
(
ls
, (
ngx_°ªam_li°í_t
));

606 
	`ngx_mem˝y
(&
ls
->
sockaddr
.sockaddr, &
u
.sockaddr, u.
sockÀn
);

608 
ls
->
sockÀn
 = 
u
.socklen;

609 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

610 
ls
->
rcvbuf
 = -1;

611 
ls
->
¢dbuf
 = -1;

612 
ls
->
ty≥
 = 
SOCK_STREAM
;

613 
ls
->
wûdˇrd
 = 
u
.wildcard;

614 
ls
->
˘x
 = 
cf
->ctx;

616 #i‡(
NGX_HAVE_INET6
)

617 
ls
->
ùv6⁄ly
 = 1;

620 
backlog
 = 0;

622 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

624 #i‡!(
NGX_WIN32
)

625 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "udp") == 0) {

626 
ls
->
ty≥
 = 
SOCK_DGRAM
;

631 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

632 
ls
->
böd
 = 1;

636 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "backlog=", 8) == 0) {

637 
ls
->
backlog
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 8, vÆue[i].
Àn
 - 8);

638 
ls
->
böd
 = 1;

640 i‡(
ls
->
backlog
 =
NGX_ERROR
 ||Üs->backlog == 0) {

641 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

642 "övÆid backlog \"%V\"", &
vÆue
[
i
]);

643  
NGX_CONF_ERROR
;

646 
backlog
 = 1;

651 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rcvbuf=", 7) == 0) {

652 
size
.
Àn
 = 
vÆue
[
i
].len - 7;

653 
size
.
d©a
 = 
vÆue
[
i
].data + 7;

655 
ls
->
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

656 
ls
->
böd
 = 1;

658 i‡(
ls
->
rcvbuf
 =
NGX_ERROR
) {

659 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

660 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
i
]);

661  
NGX_CONF_ERROR
;

667 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "sndbuf=", 7) == 0) {

668 
size
.
Àn
 = 
vÆue
[
i
].len - 7;

669 
size
.
d©a
 = 
vÆue
[
i
].data + 7;

671 
ls
->
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

672 
ls
->
böd
 = 1;

674 i‡(
ls
->
¢dbuf
 =
NGX_ERROR
) {

675 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

676 "övÆid sndbu‡\"%V\"", &
vÆue
[
i
]);

677  
NGX_CONF_ERROR
;

683 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

684 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

685 
size_t
 
Àn
;

686 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

688 i‡(
ls
->
sockaddr
.sockaddr.
ß_Ámûy
 =
AF_INET6
) {

690 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

691 
ls
->
ùv6⁄ly
 = 1;

693 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

694 
ls
->
ùv6⁄ly
 = 0;

697 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

699 &
vÆue
[
i
].
d©a
[9]);

700  
NGX_CONF_ERROR
;

703 
ls
->
böd
 = 1;

706 
Àn
 = 
	`ngx_sock_¡›
(&
ls
->
sockaddr
.sockaddr,Üs->
sockÀn
, 
buf
,

707 
NGX_SOCKADDR_STRLEN
, 1);

709 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

711 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

716 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

719  
NGX_CONF_ERROR
;

723 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "reuseport") == 0) {

724 #i‡(
NGX_HAVE_REUSEPORT
)

725 
ls
->
ªu£p‹t
 = 1;

726 
ls
->
böd
 = 1;

728 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

735 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

736 #i‡(
NGX_STREAM_SSL
)

737 
ngx_°ªam_s¶_c⁄f_t
 *
s¶cf
;

739 
s¶cf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
,

740 
ngx_°ªam_s¶_moduÀ
);

742 
s¶cf
->
li°í
 = 1;

743 
s¶cf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

744 
s¶cf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

746 
ls
->
s¶
 = 1;

750 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

753  
NGX_CONF_ERROR
;

757 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

759 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

760 
ls
->
so_kì∑live
 = 1;

762 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

763 
ls
->
so_kì∑live
 = 2;

767 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

768 
u_ch¨
 *
p
, *
íd
;

769 
ngx_°r_t
 
s
;

771 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

772 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

774 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

775 i‡(
p
 =
NULL
) {

776 
p
 = 
íd
;

779 i‡(
p
 > 
s
.
d©a
) {

780 
s
.
Àn
 = 
p
 - s.
d©a
;

782 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

783 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

784 
övÆid_so_kì∑live
;

788 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

790 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

791 i‡(
p
 =
NULL
) {

792 
p
 = 
íd
;

795 i‡(
p
 > 
s
.
d©a
) {

796 
s
.
Àn
 = 
p
 - s.
d©a
;

798 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

799 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

800 
övÆid_so_kì∑live
;

804 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

806 i‡(
s
.
d©a
 < 
íd
) {

807 
s
.
Àn
 = 
íd
 - s.
d©a
;

809 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

810 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

811 
övÆid_so_kì∑live
;

815 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

816 && 
ls
->
t˝_kìp˙t
 == 0)

818 
övÆid_so_kì∑live
;

821 
ls
->
so_kì∑live
 = 1;

825 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

828  
NGX_CONF_ERROR
;

833 
ls
->
böd
 = 1;

837 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

838 
övÆid_so_kì∑live
:

840 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

842 &
vÆue
[
i
].
d©a
[13]);

843  
NGX_CONF_ERROR
;

847 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "proxy_protocol") == 0) {

848 
ls
->
¥oxy_¥Ÿocﬁ
 = 1;

852 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

853 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

854  
NGX_CONF_ERROR
;

857 i‡(
ls
->
ty≥
 =
SOCK_DGRAM
) {

858 i‡(
backlog
) {

862 #i‡(
NGX_STREAM_SSL
)

863 i‡(
ls
->
s¶
) {

868 i‡(
ls
->
so_kì∑live
) {

872 i‡(
ls
->
¥oxy_¥Ÿocﬁ
) {

877 
Æs
 = 
cmcf
->
li°í
.
ñts
;

879 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
 - 1; i++) {

880 i‡(
ls
->
ty≥
 !
Æs
[
i
].type) {

884 i‡(
	`ngx_cmp_sockaddr
(&
Æs
[
i
].
sockaddr
.sockaddr,áls[i].
sockÀn
,

885 &
ls
->
sockaddr
.sockaddr,Üs->
sockÀn
, 1)

886 !
NGX_OK
)

891 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

892 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

893  
NGX_CONF_ERROR
;

896  
NGX_CONF_OK
;

897 
	}
}

901 
	$ngx_°ªam_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

903 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

905 
ngx_°r_t
 *
vÆue
;

907 i‡(
cscf
->
ªsﬁvî
) {

911 
vÆue
 = 
cf
->
¨gs
->
ñts
;

913 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

914 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

915  
NGX_CONF_ERROR
;

918  
NGX_CONF_OK
;

919 
	}
}

	@src/stream/ngx_stream_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_°ªam_geo_ønge_t
;

21 
ngx_ødix_åì_t
 *
	måì
;

22 #i‡(
NGX_HAVE_INET6
)

23 
ngx_ødix_åì_t
 *
	måì6
;

25 } 
	tngx_°ªam_geo_åìs_t
;

29 
ngx_°ªam_geo_ønge_t
 **
	mlow
;

30 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

31 } 
	tngx_°ªam_geo_high_ønges_t
;

35 
ngx_°r_node_t
 
	m¢
;

36 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	mvÆue
;

37 
size_t
 
	moff£t
;

38 } 
	tngx_°ªam_geo_v¨übÀ_vÆue_node_t
;

42 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	mvÆue
;

43 
ngx_°r_t
 *
	m√t
;

44 
ngx_°ªam_geo_high_ønges_t
 
	mhigh
;

45 
ngx_ødix_åì_t
 *
	måì
;

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_ødix_åì_t
 *
	måì6
;

49 
ngx_rbåì_t
 
	mrbåì
;

50 
ngx_rbåì_node_t
 
	m£¡öñ
;

51 
ngx_poﬁ_t
 *
	mpoﬁ
;

52 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

54 
size_t
 
	md©a_size
;

56 
ngx_°r_t
 
	mö˛ude_«me
;

57 
ngx_uöt_t
 
	mö˛udes
;

58 
ngx_uöt_t
 
	míåõs
;

60 
	mønges
:1;

61 
	moutside_íåõs
:1;

62 
	mÆlow_bö¨y_ö˛ude
:1;

63 
	mbö¨y_ö˛ude
:1;

64 } 
	tngx_°ªam_geo_c⁄f_˘x_t
;

69 
ngx_°ªam_geo_åìs_t
 
	måìs
;

70 
ngx_°ªam_geo_high_ønges_t
 
	mhigh
;

71 } 
	mu
;

73 
ngx_öt_t
 
	mödex
;

74 } 
	tngx_°ªam_geo_˘x_t
;

77 
ngx_öt_t
 
ngx_°ªam_geo_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

78 
ngx_°ªam_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

80 *
ngx_°ªam_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

81 *
c⁄f
);

82 *
ngx_°ªam_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

83 *
ngx_°ªam_geo_ønge
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

85 *
ngx_°ªam_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

86 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

87 
ngx_uöt_t
 
ngx_°ªam_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

88 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

89 *
ngx_°ªam_geo_cidr
(
ngx_c⁄f_t
 *
cf
,

90 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

91 *
ngx_°ªam_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
,

92 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,

93 
ngx_°r_t
 *
√t
);

94 
ngx_°ªam_v¨übÀ_vÆue_t
 *
ngx_°ªam_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

95 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

96 
ngx_öt_t
 
ngx_°ªam_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

97 
ngx_cidr_t
 *
cidr
);

98 *
ngx_°ªam_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

100 
ngx_öt_t
 
ngx_°ªam_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

101 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

102 
ngx_°ªam_geo_¸óã_bö¨y_ba£
(
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
);

103 
u_ch¨
 *
ngx_°ªam_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

104 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

107 
ngx_comm™d_t
 
	gngx_°ªam_geo_comm™ds
[] = {

109 { 
ngx_°rög
("geo"),

110 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

111 
ngx_°ªam_geo_block
,

114 
NULL
 },

116 
ngx_nuŒ_comm™d


120 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_geo_moduÀ_˘x
 = {

121 
NULL
,

122 
NULL
,

124 
NULL
,

125 
NULL
,

127 
NULL
,

128 
NULL


132 
ngx_moduÀ_t
 
	gngx_°ªam_geo_moduÀ
 = {

133 
NGX_MODULE_V1
,

134 &
ngx_°ªam_geo_moduÀ_˘x
,

135 
ngx_°ªam_geo_comm™ds
,

136 
NGX_STREAM_MODULE
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NGX_MODULE_V1_PADDING


149 
u_ch¨
 
	mGEORNG
[6];

150 
u_ch¨
 
	mvîsi⁄
;

151 
u_ch¨
 
	m±r_size
;

152 
uöt32_t
 
	mídü¬ess
;

153 
uöt32_t
 
	m¸c32
;

154 } 
	tngx_°ªam_geo_hódî_t
;

157 
ngx_°ªam_geo_hódî_t
 
	gngx_°ªam_geo_hódî
 = {

164 
ngx_öt_t


165 
	$ngx_°ªam_geo_cidr_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

166 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

168 
ngx_°ªam_geo_˘x_t
 *
˘x
 = (ngx_°ªam_geo_˘x_à*Ë
d©a
;

170 
ö_addr_t
 
öaddr
;

171 
ngx_addr_t
 
addr
;

172 
sockaddr_ö
 *
sö
;

173 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vv
;

174 #i‡(
NGX_HAVE_INET6
)

175 
u_ch¨
 *
p
;

176 
ö6_addr
 *
öaddr6
;

179 i‡(
	`ngx_°ªam_geo_addr
(
s
, 
˘x
, &
addr
Ë!
NGX_OK
) {

180 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

181 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
INADDR_NONE
);

182 
d⁄e
;

185 
addr
.
sockaddr
->
ß_Ámûy
) {

187 #i‡(
NGX_HAVE_INET6
)

188 
AF_INET6
:

189 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

190 
p
 = 
öaddr6
->
s6_addr
;

192 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

193 
öaddr
 = 
p
[12] << 24;

194 
öaddr
 +
p
[13] << 16;

195 
öaddr
 +
p
[14] << 8;

196 
öaddr
 +
p
[15];

198 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

199 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

202 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

203 
	`ngx_ødix128åì_föd
(
˘x
->
u
.
åìs
.
åì6
, 
p
);

210 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

211 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

213 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

214 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

219 
d⁄e
:

221 *
v
 = *
vv
;

223 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

224 "°ªam geo: %v", 
v
);

226  
NGX_OK
;

227 
	}
}

230 
ngx_öt_t


231 
	$ngx_°ªam_geo_ønge_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

232 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

234 
ngx_°ªam_geo_˘x_t
 *
˘x
 = (ngx_°ªam_geo_˘x_à*Ë
d©a
;

236 
ö_addr_t
 
öaddr
;

237 
ngx_addr_t
 
addr
;

238 
ngx_uöt_t
 
n
;

239 
sockaddr_ö
 *
sö
;

240 
ngx_°ªam_geo_ønge_t
 *
ønge
;

241 #i‡(
NGX_HAVE_INET6
)

242 
u_ch¨
 *
p
;

243 
ö6_addr
 *
öaddr6
;

246 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

248 i‡(
	`ngx_°ªam_geo_addr
(
s
, 
˘x
, &
addr
Ë=
NGX_OK
) {

250 
addr
.
sockaddr
->
ß_Ámûy
) {

252 #i‡(
NGX_HAVE_INET6
)

253 
AF_INET6
:

254 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

256 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

257 
p
 = 
öaddr6
->
s6_addr
;

259 
öaddr
 = 
p
[12] << 24;

260 
öaddr
 +
p
[13] << 16;

261 
öaddr
 +
p
[14] << 8;

262 
öaddr
 +
p
[15];

265 
öaddr
 = 
INADDR_NONE
;

272 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

273 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

278 
öaddr
 = 
INADDR_NONE
;

281 i‡(
˘x
->
u
.
high
.
low
) {

282 
ønge
 = 
˘x
->
u
.
high
.
low
[
öaddr
 >> 16];

284 i‡(
ønge
) {

285 
n
 = 
öaddr
 & 0xffff;

287 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t


288 && 
n
 <(
ngx_uöt_t
Ë
ønge
->
íd
)

290 *
v
 = *
ønge
->
vÆue
;

293 } (++
ønge
)->
vÆue
);

297 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

298 "°ªam geo: %v", 
v
);

300  
NGX_OK
;

301 
	}
}

304 
ngx_öt_t


305 
	$ngx_°ªam_geo_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_geo_˘x_t
 *
˘x
,

306 
ngx_addr_t
 *
addr
)

308 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
;

310 i‡(
˘x
->
ödex
 == -1) {

311 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

312 "°ªam geÿ°¨ãd: %V", &
s
->
c⁄√˘i⁄
->
addr_ãxt
);

314 
addr
->
sockaddr
 = 
s
->
c⁄√˘i⁄
->sockaddr;

315 
addr
->
sockÀn
 = 
s
->
c⁄√˘i⁄
->socklen;

318  
NGX_OK
;

321 
v
 = 
	`ngx_°ªam_gë_Êushed_v¨übÀ
(
s
, 
˘x
->
ödex
);

323 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

324 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

327  
NGX_ERROR
;

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

331 "°ªam geÿ°¨ãd: %v", 
v
);

333 i‡(
	`ngx_∑r£_addr
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
addr
, 
v
->
d©a
, v->
Àn
Ë=
NGX_OK
) {

334  
NGX_OK
;

337  
NGX_ERROR
;

338 
	}
}

342 
	$ngx_°ªam_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

344 *
rv
;

345 
size_t
 
Àn
;

346 
ngx_°r_t
 *
vÆue
, 
«me
;

347 
ngx_uöt_t
 
i
;

348 
ngx_c⁄f_t
 
ßve
;

349 
ngx_poﬁ_t
 *
poﬁ
;

350 
ngx_¨øy_t
 *
a
;

351 
ngx_°ªam_v¨übÀ_t
 *
v¨
;

352 
ngx_°ªam_geo_˘x_t
 *
geo
;

353 
ngx_°ªam_geo_c⁄f_˘x_t
 
˘x
;

354 #i‡(
NGX_HAVE_INET6
)

355 
ö6_addr
 
zîo
;

358 
vÆue
 = 
cf
->
¨gs
->
ñts
;

360 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_geo_˘x_t
));

361 i‡(
geo
 =
NULL
) {

362  
NGX_CONF_ERROR
;

365 
«me
 = 
vÆue
[1];

367 i‡(
«me
.
d©a
[0] != '$') {

368 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

369 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

370  
NGX_CONF_ERROR
;

373 
«me
.
Àn
--;

374 
«me
.
d©a
++;

376 i‡(
cf
->
¨gs
->
√…s
 == 3) {

378 
geo
->
ödex
 = 
	`ngx_°ªam_gë_v¨übÀ_ödex
(
cf
, &
«me
);

379 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

380  
NGX_CONF_ERROR
;

383 
«me
 = 
vÆue
[2];

385 i‡(
«me
.
d©a
[0] != '$') {

386 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

387 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

388  
NGX_CONF_ERROR
;

391 
«me
.
Àn
--;

392 
«me
.
d©a
++;

395 
geo
->
ödex
 = -1;

398 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
«me
, 
NGX_STREAM_VAR_CHANGEABLE
);

399 i‡(
v¨
 =
NULL
) {

400  
NGX_CONF_ERROR
;

403 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

404 i‡(
poﬁ
 =
NULL
) {

405  
NGX_CONF_ERROR
;

408 
	`ngx_memzîo
(&
˘x
, (
ngx_°ªam_geo_c⁄f_˘x_t
));

410 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

411 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

412 
	`ngx_de°roy_poﬁ
(
poﬁ
);

413  
NGX_CONF_ERROR
;

416 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

418 
˘x
.
poﬁ
 = 
cf
->pool;

419 
˘x
.
d©a_size
 = (
ngx_°ªam_geo_hódî_t
)

420 + (
ngx_°ªam_v¨übÀ_vÆue_t
)

421 + 0x10000 * (
ngx_°ªam_geo_ønge_t
 *);

422 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

424 
ßve
 = *
cf
;

425 
cf
->
poﬁ
 =Öool;

426 
cf
->
˘x
 = &ctx;

427 
cf
->
h™dÀr
 = 
ngx_°ªam_geo
;

428 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

430 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

432 *
cf
 = 
ßve
;

434 i‡(
rv
 !
NGX_CONF_OK
) {

435 
Áûed
;

438 i‡(
˘x
.
ønges
) {

440 i‡(
˘x
.
high
.
low
 && !˘x.
bö¨y_ö˛ude
) {

441 
i
 = 0; i < 0x10000; i++) {

442 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

444 i‡(
a
 =
NULL
) {

448 i‡(
a
->
√…s
 == 0) {

449 
˘x
.
high
.
low
[
i
] = 
NULL
;

453 
Àn
 = 
a
->
√…s
 * (
ngx_°ªam_geo_ønge_t
);

455 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

456 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

457 
Áûed
;

460 
	`ngx_mem˝y
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

461 
˘x
.
high
.
low
[
i
][
a
->
√…s
].
vÆue
 = 
NULL
;

462 
˘x
.
d©a_size
 +
Àn
 + (*);

465 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


466 && !
˘x
.
outside_íåõs


467 && 
˘x
.
íåõs
 > 100000

468 && 
˘x
.
ö˛udes
 == 1)

470 
	`ngx_°ªam_geo_¸óã_bö¨y_ba£
(&
˘x
);

474 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

475 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_°ªam_v¨übÀ_nuŒ_vÆue
;

478 
geo
->
u
.
high
 = 
˘x
.high;

480 
v¨
->
gë_h™dÀr
 = 
ngx_°ªam_geo_ønge_v¨übÀ
;

481 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

484 i‡(
˘x
.
åì
 =
NULL
) {

485 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

486 i‡(
˘x
.
åì
 =
NULL
) {

487 
Áûed
;

491 
geo
->
u
.
åìs
.
åì
 = 
˘x
.tree;

493 #i‡(
NGX_HAVE_INET6
)

494 i‡(
˘x
.
åì6
 =
NULL
) {

495 
˘x
.
åì6
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

496 i‡(
˘x
.
åì6
 =
NULL
) {

497 
Áûed
;

501 
geo
->
u
.
åìs
.
åì6
 = 
˘x
.tree6;

504 
v¨
->
gë_h™dÀr
 = 
ngx_°ªam_geo_cidr_v¨übÀ
;

505 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

507 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

508 (
uöçå_t
Ë&
ngx_°ªam_v¨übÀ_nuŒ_vÆue
)

509 =
NGX_ERROR
)

511 
Áûed
;

516 #i‡(
NGX_HAVE_INET6
)

517 i‡(
	`ngx_ødix128åì_ö£π
(
˘x
.
åì6
, 
zîo
.
s6_addr
, zero.s6_addr,

518 (
uöçå_t
Ë&
ngx_°ªam_v¨übÀ_nuŒ_vÆue
)

519 =
NGX_ERROR
)

521 
Áûed
;

526 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

527 
	`ngx_de°roy_poﬁ
(
poﬁ
);

529  
NGX_CONF_OK
;

531 
Áûed
:

533 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

534 
	`ngx_de°roy_poﬁ
(
poﬁ
);

536  
NGX_CONF_ERROR
;

537 
	}
}

541 
	$ngx_°ªam_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

543 *
rv
;

544 
ngx_°r_t
 *
vÆue
;

545 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
;

547 
˘x
 = 
cf
->ctx;

549 
vÆue
 = 
cf
->
¨gs
->
ñts
;

551 i‡(
cf
->
¨gs
->
√…s
 == 1) {

553 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

555 i‡(
˘x
->
åì


556 #i‡(
NGX_HAVE_INET6
)

557 || 
˘x
->
åì6


561 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

564 
Áûed
;

567 
˘x
->
ønges
 = 1;

569 
rv
 = 
NGX_CONF_OK
;

571 
d⁄e
;

575 i‡(
cf
->
¨gs
->
√…s
 != 2) {

576 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

578 
Áûed
;

581 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

583 
rv
 = 
	`ngx_°ªam_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

585 
d⁄e
;

588 i‡(
˘x
->
ønges
) {

589 
rv
 = 
	`ngx_°ªam_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

592 
rv
 = 
	`ngx_°ªam_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

595 
d⁄e
:

597 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

599  
rv
;

601 
Áûed
:

603 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

605  
NGX_CONF_ERROR
;

606 
	}
}

610 
	$ngx_°ªam_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

611 
ngx_°r_t
 *
vÆue
)

613 
u_ch¨
 *
p
, *
œ°
;

614 
ö_addr_t
 
°¨t
, 
íd
;

615 
ngx_°r_t
 *
√t
;

616 
ngx_uöt_t
 
dñ
;

618 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

620 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

621 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

623 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

626 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_°ªam_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

627 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

628  
NGX_CONF_ERROR
;

631  
NGX_CONF_OK
;

634 i‡(
˘x
->
bö¨y_ö˛ude
) {

635 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

637 
˘x
->
ö˛ude_«me
.
d©a
);

638  
NGX_CONF_ERROR
;

641 i‡(
˘x
->
high
.
low
 =
NULL
) {

642 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

643 0x10000 * (
ngx_°ªam_geo_ønge_t
 *));

644 i‡(
˘x
->
high
.
low
 =
NULL
) {

645  
NGX_CONF_ERROR
;

649 
˘x
->
íåõs
++;

650 
˘x
->
outside_íåõs
 = 1;

652 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

653 
√t
 = &
vÆue
[1];

654 
dñ
 = 1;

657 
√t
 = &
vÆue
[0];

658 
dñ
 = 0;

661 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

663 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

665 i‡(
p
 =
NULL
) {

666 
övÆid
;

669 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

671 i‡(
°¨t
 =
INADDR_NONE
) {

672 
övÆid
;

675 
°¨t
 = 
	`¡ohl
(start);

677 
p
++;

679 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

681 i‡(
íd
 =
INADDR_NONE
) {

682 
övÆid
;

685 
íd
 = 
	`¡ohl
(end);

687 i‡(
°¨t
 > 
íd
) {

688 
övÆid
;

691 i‡(
dñ
) {

692 i‡(
	`ngx_°ªam_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

693 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

694 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

697  
NGX_CONF_OK
;

700 
˘x
->
vÆue
 = 
	`ngx_°ªam_geo_vÆue
(
cf
, ctx, &value[1]);

702 i‡(
˘x
->
vÆue
 =
NULL
) {

703  
NGX_CONF_ERROR
;

706 
˘x
->
√t
 =Çet;

708  
	`ngx_°ªam_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

710 
övÆid
:

712 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

714  
NGX_CONF_ERROR
;

715 
	}
}

721 
	$ngx_°ªam_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

722 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

724 
ö_addr_t
 
n
;

725 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

726 
ngx_¨øy_t
 *
a
;

727 
ngx_°ªam_geo_ønge_t
 *
ønge
;

729 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

731 
h
 = 
n
 >> 16;

733 i‡(
n
 =
°¨t
) {

734 
s
 = 
n
 & 0xffff;

736 
s
 = 0;

739 i‡((
n
 | 0xffffË> 
íd
) {

740 
e
 = 
íd
 & 0xffff;

743 
e
 = 0xffff;

746 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

748 i‡(
a
 =
NULL
) {

749 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

750 (
ngx_°ªam_geo_ønge_t
));

751 i‡(
a
 =
NULL
) {

752  
NGX_CONF_ERROR
;

755 
˘x
->
high
.
low
[
h
] = (
ngx_°ªam_geo_ønge_t
 *Ë
a
;

758 
i
 = 
a
->
√…s
;

759 
ønge
 = 
a
->
ñts
;

761 
i
) {

763 
i
--;

765 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

769 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

773 
ønge
 = 
	`ngx_¨øy_push
(
a
);

774 i‡(
ønge
 =
NULL
) {

775  
NGX_CONF_ERROR
;

778 
ønge
 = 
a
->
ñts
;

780 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

781 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_°ªam_geo_ønge_t
));

783 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

784 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

785 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

787 
√xt
;

790 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


791 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

793 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

795 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

797 
ønge
[
i
].
vÆue
 = 
˘x
->value;

799 
√xt
;

802 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


803 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

807 
ønge
 = 
	`ngx_¨øy_push
(
a
);

808 i‡(
ønge
 =
NULL
) {

809  
NGX_CONF_ERROR
;

812 
ønge
 = 
	`ngx_¨øy_push
(
a
);

813 i‡(
ønge
 =
NULL
) {

814  
NGX_CONF_ERROR
;

817 
ønge
 = 
a
->
ñts
;

819 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

820 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_°ªam_geo_ønge_t
));

822 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

823 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

824 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

826 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

827 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

828 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

830 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

832 
√xt
;

835 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


836 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

840 
ønge
 = 
	`ngx_¨øy_push
(
a
);

841 i‡(
ønge
 =
NULL
) {

842  
NGX_CONF_ERROR
;

845 
ønge
 = 
a
->
ñts
;

847 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

848 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_°ªam_geo_ønge_t
));

850 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

852 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

853 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

854 
ønge
[
i
].
vÆue
 = 
˘x
->value;

856 
√xt
;

859 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


860 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

864 
ønge
 = 
	`ngx_¨øy_push
(
a
);

865 i‡(
ønge
 =
NULL
) {

866  
NGX_CONF_ERROR
;

869 
ønge
 = 
a
->
ñts
;

871 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

872 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_°ªam_geo_ønge_t
));

874 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

875 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

876 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

878 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

880 
√xt
;

883 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

884 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

886 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

888 
˘x
->
√t
,

889 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

890 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

892  
NGX_CONF_ERROR
;

897 
ønge
 = 
	`ngx_¨øy_push
(
a
);

898 i‡(
ønge
 =
NULL
) {

899  
NGX_CONF_ERROR
;

902 
ønge
 = 
a
->
ñts
;

904 
	`ngx_memmove
(&
ønge
[1], &range[0],

905 (
a
->
√…s
 - 1Ë* (
ngx_°ªam_geo_ønge_t
));

907 
ønge
[0].
°¨t
 = (
u_sh‹t
Ë
s
;

908 
ønge
[0].
íd
 = (
u_sh‹t
Ë
e
;

909 
ønge
[0].
vÆue
 = 
˘x
->value;

911 
√xt
:

913 i‡(
h
 == 0xffff) {

918  
NGX_CONF_OK
;

919 
	}
}

922 
ngx_uöt_t


923 
	$ngx_°ªam_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

924 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

926 
ö_addr_t
 
n
;

927 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

928 
ngx_¨øy_t
 *
a
;

929 
ngx_°ªam_geo_ønge_t
 *
ønge
;

931 
w¨n
 = 0;

933 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

935 
h
 = 
n
 >> 16;

937 i‡(
n
 =
°¨t
) {

938 
s
 = 
n
 & 0xffff;

940 
s
 = 0;

943 i‡((
n
 | 0xffffË> 
íd
) {

944 
e
 = 
íd
 & 0xffff;

947 
e
 = 0xffff;

950 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

952 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

953 
w¨n
 = 1;

954 
√xt
;

957 
ønge
 = 
a
->
ñts
;

958 
i
 = 0; i < 
a
->
√…s
; i++) {

960 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


961 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

963 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

964 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_°ªam_geo_ønge_t
));

966 
a
->
√…s
--;

971 i‡(
i
 =
a
->
√…s
 - 1) {

972 
w¨n
 = 1;

976 
√xt
:

978 i‡(
h
 == 0xffff) {

983  
w¨n
;

984 
	}
}

988 
	$ngx_°ªam_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

989 
ngx_°r_t
 *
vÆue
)

991 *
rv
;

992 
ngx_öt_t
 
rc
, 
dñ
;

993 
ngx_°r_t
 *
√t
;

994 
ngx_cidr_t
 
cidr
;

996 i‡(
˘x
->
åì
 =
NULL
) {

997 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

998 i‡(
˘x
->
åì
 =
NULL
) {

999  
NGX_CONF_ERROR
;

1003 #i‡(
NGX_HAVE_INET6
)

1004 i‡(
˘x
->
åì6
 =
NULL
) {

1005 
˘x
->
åì6
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1006 i‡(
˘x
->
åì6
 =
NULL
) {

1007  
NGX_CONF_ERROR
;

1012 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

1013 
cidr
.
Ámûy
 = 
AF_INET
;

1014 
cidr
.
u
.
ö
.
addr
 = 0;

1015 
cidr
.
u
.
ö
.
mask
 = 0;

1017 
rv
 = 
	`ngx_°ªam_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1019 i‡(
rv
 !
NGX_CONF_OK
) {

1020  
rv
;

1023 #i‡(
NGX_HAVE_INET6
)

1024 
cidr
.
Ámûy
 = 
AF_INET6
;

1025 
	`ngx_memzîo
(&
cidr
.
u
.
ö6
, (
ngx_ö6_cidr_t
));

1027 
rv
 = 
	`ngx_°ªam_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1029 i‡(
rv
 !
NGX_CONF_OK
) {

1030  
rv
;

1034  
NGX_CONF_OK
;

1037 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

1038 
√t
 = &
vÆue
[1];

1039 
dñ
 = 1;

1042 
√t
 = &
vÆue
[0];

1043 
dñ
 = 0;

1046 i‡(
	`ngx_°ªam_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

1047  
NGX_CONF_ERROR
;

1050 i‡(
cidr
.
Ámûy
 =
AF_INET
) {

1051 
cidr
.
u
.
ö
.
addr
 = 
	`¡ohl
(cidr.u.in.addr);

1052 
cidr
.
u
.
ö
.
mask
 = 
	`¡ohl
(cidr.u.in.mask);

1055 i‡(
dñ
) {

1056 
cidr
.
Ámûy
) {

1058 #i‡(
NGX_HAVE_INET6
)

1059 
AF_INET6
:

1060 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1061 
cidr
.
u
.
ö6
.
addr
.
s6_addr
,

1062 
cidr
.
u
.
ö6
.
mask
.
s6_addr
);

1067 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

1068 
cidr
.
u
.
ö
.
mask
);

1072 i‡(
rc
 !
NGX_OK
) {

1073 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1074 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

1077  
NGX_CONF_OK
;

1080  
	`ngx_°ªam_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], 
√t
);

1081 
	}
}

1085 
	$ngx_°ªam_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

1086 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
)

1088 
ngx_öt_t
 
rc
;

1089 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

1091 
vÆ
 = 
	`ngx_°ªam_geo_vÆue
(
cf
, 
˘x
, 
vÆue
);

1093 i‡(
vÆ
 =
NULL
) {

1094  
NGX_CONF_ERROR
;

1097 
cidr
->
Ámûy
) {

1099 #i‡(
NGX_HAVE_INET6
)

1100 
AF_INET6
:

1101 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1102 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1103 (
uöçå_t
Ë
vÆ
);

1105 i‡(
rc
 =
NGX_OK
) {

1106  
NGX_CONF_OK
;

1109 i‡(
rc
 =
NGX_ERROR
) {

1110  
NGX_CONF_ERROR
;

1115 
ﬁd
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

1116 
	`ngx_ødix128åì_föd
(
˘x
->
åì6
,

1117 
cidr
->
u
.
ö6
.
addr
.
s6_addr
);

1119 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1121 
√t
, 
vÆ
, 
ﬁd
);

1123 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1124 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1125 
cidr
->
u
.
ö6
.
mask
.
s6_addr
);

1127 i‡(
rc
 =
NGX_ERROR
) {

1128 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1129  
NGX_CONF_ERROR
;

1132 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1133 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1134 (
uöçå_t
Ë
vÆ
);

1140 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1141 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1143 i‡(
rc
 =
NGX_OK
) {

1144  
NGX_CONF_OK
;

1147 i‡(
rc
 =
NGX_ERROR
) {

1148  
NGX_CONF_ERROR
;

1153 
ﬁd
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

1154 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
);

1156 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1158 
√t
, 
vÆ
, 
ﬁd
);

1160 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
,

1161 
cidr
->
u
.
ö
.
addr
, cidr->u.ö.
mask
);

1163 i‡(
rc
 =
NGX_ERROR
) {

1164 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1165  
NGX_CONF_ERROR
;

1168 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1169 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1174 i‡(
rc
 =
NGX_OK
) {

1175  
NGX_CONF_OK
;

1178  
NGX_CONF_ERROR
;

1179 
	}
}

1182 
ngx_°ªam_v¨übÀ_vÆue_t
 *

1183 
	$ngx_°ªam_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

1184 
ngx_°r_t
 *
vÆue
)

1186 
uöt32_t
 
hash
;

1187 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆ
;

1188 
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1190 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1192 
gvvn
 = (
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
 *)

1193 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1195 i‡(
gvvn
) {

1196  
gvvn
->
vÆue
;

1199 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_°ªam_v¨übÀ_vÆue_t
));

1200 i‡(
vÆ
 =
NULL
) {

1201  
NULL
;

1204 
vÆ
->
Àn
 = 
vÆue
->len;

1205 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1206 i‡(
vÆ
->
d©a
 =
NULL
) {

1207  
NULL
;

1210 
vÆ
->
vÆid
 = 1;

1211 
vÆ
->
no_ˇchóbÀ
 = 0;

1212 
vÆ
->
nŸ_found
 = 0;

1214 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1215 (
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
));

1216 i‡(
gvvn
 =
NULL
) {

1217  
NULL
;

1220 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1221 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1222 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1223 
gvvn
->
vÆue
 = 
vÆ
;

1224 
gvvn
->
off£t
 = 0;

1226 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1228 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_°ªam_v¨übÀ_vÆue_t
)

1229 + 
vÆue
->
Àn
, (*));

1231  
vÆ
;

1232 
	}
}

1235 
ngx_öt_t


1236 
	$ngx_°ªam_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1238 
ngx_öt_t
 
rc
;

1240 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1241 
cidr
->
Ámûy
 = 
AF_INET
;

1242 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1243 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1245  
NGX_OK
;

1248 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1250 i‡(
rc
 =
NGX_ERROR
) {

1251 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1252  
NGX_ERROR
;

1255 i‡(
rc
 =
NGX_DONE
) {

1256 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1257 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1260  
NGX_OK
;

1261 
	}
}

1265 
	$ngx_°ªam_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
,

1266 
ngx_°r_t
 *
«me
)

1268 *
rv
;

1269 
ngx_°r_t
 
fûe
;

1271 
fûe
.
Àn
 = 
«me
->len + 4;

1272 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1273 i‡(
fûe
.
d©a
 =
NULL
) {

1274  
NGX_CONF_ERROR
;

1277 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1279 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1280  
NGX_CONF_ERROR
;

1283 i‡(
˘x
->
ønges
) {

1284 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1286 
	`ngx_°ªam_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1287 
NGX_OK
:

1288  
NGX_CONF_OK
;

1289 
NGX_ERROR
:

1290  
NGX_CONF_ERROR
;

1296 
fûe
.
Àn
 -= 4;

1297 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1299 
˘x
->
ö˛ude_«me
 = 
fûe
;

1301 i‡(
˘x
->
outside_íåõs
) {

1302 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1305 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1307 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1309 
˘x
->
ö˛udes
++;

1310 
˘x
->
outside_íåõs
 = 0;

1312  
rv
;

1313 
	}
}

1316 
ngx_öt_t


1317 
	$ngx_°ªam_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

1318 
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

1320 
u_ch¨
 *
ba£
, 
ch
;

1321 
time_t
 
mtime
;

1322 
size_t
 
size
, 
Àn
;

1323 
ssize_t
 
n
;

1324 
uöt32_t
 
¸c32
;

1325 
ngx_îr_t
 
îr
;

1326 
ngx_öt_t
 
rc
;

1327 
ngx_uöt_t
 
i
;

1328 
ngx_fûe_t
 
fûe
;

1329 
ngx_fûe_öfo_t
 
fi
;

1330 
ngx_°ªam_geo_ønge_t
 *
ønge
, **
ønges
;

1331 
ngx_°ªam_geo_hódî_t
 *
hódî
;

1332 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vv
;

1334 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1335 
fûe
.
«me
 = *name;

1336 
fûe
.
log
 = 
cf
->log;

1338 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

1340 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1341 
îr
 = 
ngx_î∫o
;

1342 i‡(
îr
 !
NGX_ENOENT
) {

1343 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1344 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1346  
NGX_DECLINED
;

1349 i‡(
˘x
->
outside_íåõs
) {

1350 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1352 
«me
->
d©a
);

1353 
rc
 = 
NGX_ERROR
;

1354 
d⁄e
;

1357 i‡(
˘x
->
bö¨y_ö˛ude
) {

1358 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1360 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1361 
rc
 = 
NGX_ERROR
;

1362 
d⁄e
;

1365 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1366 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1367 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1368 
Áûed
;

1371 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1372 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1374 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1375 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1377 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1378 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1379 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1380 
Áûed
;

1383 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1385 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1386 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1387 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1388 
Áûed
;

1391 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1392 i‡(
ba£
 =
NULL
) {

1393 
Áûed
;

1396 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1398 i‡(
n
 =
NGX_ERROR
) {

1399 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1400 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1401 
Áûed
;

1404 i‡((
size_t
Ë
n
 !
size
) {

1405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1406 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1407 
«me
->
d©a
, 
n
, 
size
);

1408 
Áûed
;

1411 
hódî
 = (
ngx_°ªam_geo_hódî_t
 *Ë
ba£
;

1413 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_°ªam_geo_hódî
, 
hódî
, 12) != 0) {

1414 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1415 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1416 
Áûed
;

1419 
	`ngx_¸c32_öô
(
¸c32
);

1421 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

1422 (
ba£
 + (
ngx_°ªam_geo_hódî_t
));

1424 
vv
->
d©a
) {

1425 
Àn
 = 
	`ngx_Æign
((
ngx_°ªam_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1427 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1428 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1429 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1431 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
,

1432 (
ngx_°ªam_v¨übÀ_vÆue_t
));

1433 
vv
++;

1435 
ønges
 = (
ngx_°ªam_geo_ønge_t
 **Ë
vv
;

1437 
i
 = 0; i < 0x10000; i++) {

1438 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1439 i‡(
ønges
[
i
]) {

1440 
ønges
[
i
] = (
ngx_°ªam_geo_ønge_t
 *)

1441 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1445 
ønge
 = (
ngx_°ªam_geo_ønge_t
 *Ë&
ønges
[0x10000];

1447 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1448 
ønge
->
vÆue
) {

1449 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1450 (
ngx_°ªam_geo_ønge_t
));

1451 
ønge
->
vÆue
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *)

1452 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1453 
ønge
++;

1455 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1456 
ønge
 = (
ngx_°ªam_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1459 
	`ngx_¸c32_föÆ
(
¸c32
);

1461 i‡(
¸c32
 !
hódî
->crc32) {

1462 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1463 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1464 
Áûed
;

1467 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1468 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1470 
˘x
->
ö˛ude_«me
 = *
«me
;

1471 
˘x
->
bö¨y_ö˛ude
 = 1;

1472 
˘x
->
high
.
low
 = 
ønges
;

1473 
rc
 = 
NGX_OK
;

1475 
d⁄e
;

1477 
Áûed
:

1479 
rc
 = 
NGX_DECLINED
;

1481 
d⁄e
:

1483 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1484 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1485 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1488  
rc
;

1489 
	}
}

1493 
	$ngx_°ªam_geo_¸óã_bö¨y_ba£
(
ngx_°ªam_geo_c⁄f_˘x_t
 *
˘x
)

1495 
u_ch¨
 *
p
;

1496 
uöt32_t
 
hash
;

1497 
ngx_°r_t
 
s
;

1498 
ngx_uöt_t
 
i
;

1499 
ngx_fûe_m≠pög_t
 
fm
;

1500 
ngx_°ªam_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1501 
ngx_°ªam_geo_hódî_t
 *
hódî
;

1502 
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1504 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1505 i‡(
fm
.
«me
 =
NULL
) {

1509 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1511 
fm
.
size
 = 
˘x
->
d©a_size
;

1512 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1514 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1515 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1517 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1521 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_°ªam_geo_hódî
,

1522 (
ngx_°ªam_geo_hódî_t
));

1524 
p
 = 
	`ngx_°ªam_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1525 
˘x
->
rbåì
.
£¡öñ
);

1527 
p
 +(
ngx_°ªam_v¨übÀ_vÆue_t
);

1529 
ønges
 = (
ngx_°ªam_geo_ønge_t
 **Ë
p
;

1531 
p
 +0x10000 * (
ngx_°ªam_geo_ønge_t
 *);

1533 
i
 = 0; i < 0x10000; i++) {

1534 
r
 = 
˘x
->
high
.
low
[
i
];

1535 i‡(
r
 =
NULL
) {

1539 
ønge
 = (
ngx_°ªam_geo_ønge_t
 *Ë
p
;

1540 
ønges
[
i
] = (
ngx_°ªam_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1543 
s
.
Àn
 = 
r
->
vÆue
->len;

1544 
s
.
d©a
 = 
r
->
vÆue
->data;

1545 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1546 
gvvn
 = (
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
 *)

1547 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1549 
ønge
->
vÆue
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1550 
ønge
->
°¨t
 = 
r
->start;

1551 
ønge
->
íd
 = 
r
->end;

1552 
ønge
++;

1554 } (++
r
)->
vÆue
);

1556 
ønge
->
vÆue
 = 
NULL
;

1558 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1561 
hódî
 = 
fm
.
addr
;

1562 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1563 + (
ngx_°ªam_geo_hódî_t
),

1564 
fm
.
size
 - (
ngx_°ªam_geo_hódî_t
));

1566 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1567 
	}
}

1570 
u_ch¨
 *

1571 
	$ngx_°ªam_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1572 
ngx_rbåì_node_t
 *
£¡öñ
)

1574 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vv
;

1575 
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1577 i‡(
node
 =
£¡öñ
) {

1578  
p
;

1581 
gvvn
 = (
ngx_°ªam_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1582 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1584 
vv
 = (
ngx_°ªam_v¨übÀ_vÆue_t
 *Ë
p
;

1585 *
vv
 = *
gvvn
->
vÆue
;

1586 
p
 +(
ngx_°ªam_v¨übÀ_vÆue_t
);

1587 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1589 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1591 
p
 = 
	`ngx_Æign_±r
(p, (*));

1593 
p
 = 
	`ngx_°ªam_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1595  
	`ngx_°ªam_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1596 
	}
}

	@src/stream/ngx_stream_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

16 
	#NGX_GEOIP_COUNTRY_CODE
 0

	)

17 
	#NGX_GEOIP_COUNTRY_CODE3
 1

	)

18 
	#NGX_GEOIP_COUNTRY_NAME
 2

	)

22 
GeoIP
 *
	mcou¡ry
;

23 
GeoIP
 *
	m‹g
;

24 
GeoIP
 *
	mcôy
;

25 #i‡(
NGX_HAVE_GEOIP_V6
)

26 
	mcou¡ry_v6
:1;

27 
	m‹g_v6
:1;

28 
	mcôy_v6
:1;

30 } 
	tngx_°ªam_geoù_c⁄f_t
;

34 
ngx_°r_t
 *
	m«me
;

35 
uöçå_t
 
	md©a
;

36 } 
	tngx_°ªam_geoù_v¨_t
;

39 c⁄° *(*
	tngx_°ªam_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *,

40 
	tu_l⁄g
 
	taddr
);

43 
ngx_°ªam_geoù_v¨übÀ_h™dÀr_±
 
	gngx_°ªam_geoù_cou¡ry_fun˘i⁄s
[] = {

44 
GeoIP_cou¡ry_code_by_ùnum
,

45 
GeoIP_cou¡ry_code3_by_ùnum
,

46 
GeoIP_cou¡ry_«me_by_ùnum
,

50 #i‡(
NGX_HAVE_GEOIP_V6
)

52 c⁄° *(*
	tngx_°ªam_geoù_v¨übÀ_h™dÀr_v6_±
)(
	tGeoIP
 *,

53 
	tgeoùv6_t
 
	taddr
);

56 
ngx_°ªam_geoù_v¨übÀ_h™dÀr_v6_±


57 
	gngx_°ªam_geoù_cou¡ry_v6_fun˘i⁄s
[] =

59 
GeoIP_cou¡ry_code_by_ùnum_v6
,

60 
GeoIP_cou¡ry_code3_by_ùnum_v6
,

61 
GeoIP_cou¡ry_«me_by_ùnum_v6
,

67 
ngx_öt_t
 
ngx_°ªam_geoù_cou¡ry_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

68 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_°ªam_geoù_‹g_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

70 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_°ªam_geoù_côy_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

72 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_°ªam_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

74 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_°ªam_geoù_côy_Êﬂt_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

76 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_°ªam_geoù_côy_öt_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

78 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
GeoIPRec‹d
 *
ngx_°ªam_geoù_gë_côy_ªc‹d
(
ngx_°ªam_£ssi⁄_t
 *
s
);

81 
ngx_öt_t
 
ngx_°ªam_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

82 *
ngx_°ªam_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

83 *
ngx_°ªam_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

84 *
c⁄f
);

85 *
ngx_°ªam_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

86 *
c⁄f
);

87 *
ngx_°ªam_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

88 *
c⁄f
);

89 
ngx_°ªam_geoù_˛ónup
(*
d©a
);

92 
ngx_comm™d_t
 
	gngx_°ªam_geoù_comm™ds
[] = {

94 { 
ngx_°rög
("geoip_country"),

95 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE12
,

96 
ngx_°ªam_geoù_cou¡ry
,

97 
NGX_STREAM_MAIN_CONF_OFFSET
,

99 
NULL
 },

101 { 
ngx_°rög
("geoip_org"),

102 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE12
,

103 
ngx_°ªam_geoù_‹g
,

104 
NGX_STREAM_MAIN_CONF_OFFSET
,

106 
NULL
 },

108 { 
ngx_°rög
("geoip_city"),

109 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE12
,

110 
ngx_°ªam_geoù_côy
,

111 
NGX_STREAM_MAIN_CONF_OFFSET
,

113 
NULL
 },

115 
ngx_nuŒ_comm™d


119 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_geoù_moduÀ_˘x
 = {

120 
ngx_°ªam_geoù_add_v¨übÀs
,

121 
NULL
,

123 
ngx_°ªam_geoù_¸óã_c⁄f
,

124 
NULL
,

126 
NULL
,

127 
NULL


131 
ngx_moduÀ_t
 
	gngx_°ªam_geoù_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_°ªam_geoù_moduÀ_˘x
,

134 
ngx_°ªam_geoù_comm™ds
,

135 
NGX_STREAM_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_°ªam_v¨übÀ_t
 
	gngx_°ªam_geoù_v¨s
[] = {

149 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

150 
ngx_°ªam_geoù_cou¡ry_v¨übÀ
,

151 
NGX_GEOIP_COUNTRY_CODE
, 0, 0 },

153 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

154 
ngx_°ªam_geoù_cou¡ry_v¨übÀ
,

155 
NGX_GEOIP_COUNTRY_CODE3
, 0, 0 },

157 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

158 
ngx_°ªam_geoù_cou¡ry_v¨übÀ
,

159 
NGX_GEOIP_COUNTRY_NAME
, 0, 0 },

161 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

162 
ngx_°ªam_geoù_‹g_v¨übÀ
,

165 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

166 
ngx_°ªam_geoù_côy_v¨übÀ
,

167 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

169 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

170 
ngx_°ªam_geoù_côy_v¨übÀ
,

171 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

173 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

174 
ngx_°ªam_geoù_côy_v¨übÀ
,

175 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

177 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

178 
ngx_°ªam_geoù_côy_v¨übÀ
,

179 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

181 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

182 
ngx_°ªam_geoù_côy_v¨übÀ
,

183 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

185 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

186 
ngx_°ªam_geoù_ªgi⁄_«me_v¨übÀ
,

189 { 
ngx_°rög
("geoù_côy"), 
NULL
,

190 
ngx_°ªam_geoù_côy_v¨übÀ
,

191 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

193 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

194 
ngx_°ªam_geoù_côy_v¨übÀ
,

195 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

197 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

198 
ngx_°ªam_geoù_côy_Êﬂt_v¨übÀ
,

199 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

201 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

202 
ngx_°ªam_geoù_côy_Êﬂt_v¨übÀ
,

203 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

205 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

206 
ngx_°ªam_geoù_côy_öt_v¨übÀ
,

207 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

209 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

210 
ngx_°ªam_geoù_côy_öt_v¨übÀ
,

211 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

213 
ngx_°ªam_nuŒ_v¨übÀ


217 
u_l⁄g


218 
	$ngx_°ªam_geoù_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
)

220 
ngx_addr_t
 
addr
;

221 
sockaddr_ö
 *
sö
;

223 
addr
.
sockaddr
 = 
s
->
c⁄√˘i⁄
->sockaddr;

224 
addr
.
sockÀn
 = 
s
->
c⁄√˘i⁄
->socklen;

227 #i‡(
NGX_HAVE_INET6
)

229 i‡(
addr
.
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

230 
u_ch¨
 *
p
;

231 
ö_addr_t
 
öaddr
;

232 
ö6_addr
 *
öaddr6
;

234 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

236 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

237 
p
 = 
öaddr6
->
s6_addr
;

239 
öaddr
 = 
p
[12] << 24;

240 
öaddr
 +
p
[13] << 16;

241 
öaddr
 +
p
[14] << 8;

242 
öaddr
 +
p
[15];

244  
öaddr
;

250 i‡(
addr
.
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

251  
INADDR_NONE
;

254 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

255  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

256 
	}
}

259 #i‡(
NGX_HAVE_GEOIP_V6
)

261 
geoùv6_t


262 
	$ngx_°ªam_geoù_addr_v6
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
)

264 
ngx_addr_t
 
addr
;

265 
ö_addr_t
 
addr4
;

266 
ö6_addr
 
addr6
;

267 
sockaddr_ö
 *
sö
;

268 
sockaddr_ö6
 *
sö6
;

270 
addr
.
sockaddr
 = 
s
->
c⁄√˘i⁄
->sockaddr;

271 
addr
.
sockÀn
 = 
s
->
c⁄√˘i⁄
->socklen;

274 
addr
.
sockaddr
->
ß_Ámûy
) {

276 
AF_INET
:

278 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

279 
addr4
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

281 
	`ngx_memzîo
(&
addr6
, (
ö6_addr
));

282 
addr6
.
s6_addr
[10] = 0xff;

283 
addr6
.
s6_addr
[11] = 0xff;

284 
addr6
.
s6_addr
[12] = 
addr4
 >> 24;

285 
addr6
.
s6_addr
[13] = 
addr4
 >> 16;

286 
addr6
.
s6_addr
[14] = 
addr4
 >> 8;

287 
addr6
.
s6_addr
[15] = 
addr4
;

288  
addr6
;

290 
AF_INET6
:

291 
sö6
 = (
sockaddr_ö6
 *Ë
addr
.
sockaddr
;

292  
sö6
->
sö6_addr
;

295  
ö6addr_™y
;

297 
	}
}

302 
ngx_öt_t


303 
	$ngx_°ªam_geoù_cou¡ry_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

304 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

306 
ngx_°ªam_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

307 
ngx_°ªam_geoù_cou¡ry_fun˘i⁄s
[
d©a
];

308 #i‡(
NGX_HAVE_GEOIP_V6
)

309 
ngx_°ªam_geoù_v¨übÀ_h™dÀr_v6_±
 
h™dÀr_v6
 =

310 
ngx_°ªam_geoù_cou¡ry_v6_fun˘i⁄s
[
d©a
];

313 c⁄° *
vÆ
;

314 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
;

316 
gcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_geoù_moduÀ
);

318 i‡(
gcf
->
cou¡ry
 =
NULL
) {

319 
nŸ_found
;

322 #i‡(
NGX_HAVE_GEOIP_V6
)

323 
vÆ
 = 
gcf
->
cou¡ry_v6


324 ? 
	`h™dÀr_v6
(
gcf
->
cou¡ry
, 
	`ngx_°ªam_geoù_addr_v6
(
s
, gcf))

325 : 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_°ªam_geoù_addr
(
s
, gcf));

327 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_°ªam_geoù_addr
(
s
, gcf));

330 i‡(
vÆ
 =
NULL
) {

331 
nŸ_found
;

334 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

335 
v
->
vÆid
 = 1;

336 
v
->
no_ˇchóbÀ
 = 0;

337 
v
->
nŸ_found
 = 0;

338 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

340  
NGX_OK
;

342 
nŸ_found
:

344 
v
->
nŸ_found
 = 1;

346  
NGX_OK
;

347 
	}
}

350 
ngx_öt_t


351 
	$ngx_°ªam_geoù_‹g_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

352 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

354 
size_t
 
Àn
;

355 *
vÆ
;

356 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
;

358 
gcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_geoù_moduÀ
);

360 i‡(
gcf
->
‹g
 =
NULL
) {

361 
nŸ_found
;

364 #i‡(
NGX_HAVE_GEOIP_V6
)

365 
vÆ
 = 
gcf
->
‹g_v6


366 ? 
	`GeoIP_«me_by_ùnum_v6
(
gcf
->
‹g
,

367 
	`ngx_°ªam_geoù_addr_v6
(
s
, 
gcf
))

368 : 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
,

369 
	`ngx_°ªam_geoù_addr
(
s
, 
gcf
));

371 
vÆ
 = 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
, 
	`ngx_°ªam_geoù_addr
(
s
, gcf));

374 i‡(
vÆ
 =
NULL
) {

375 
nŸ_found
;

378 
Àn
 = 
	`ngx_°æí
(
vÆ
);

379 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

380 i‡(
v
->
d©a
 =
NULL
) {

381 
	`ngx_‰ì
(
vÆ
);

382  
NGX_ERROR
;

385 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

387 
v
->
Àn
 =Üen;

388 
v
->
vÆid
 = 1;

389 
v
->
no_ˇchóbÀ
 = 0;

390 
v
->
nŸ_found
 = 0;

392 
	`ngx_‰ì
(
vÆ
);

394  
NGX_OK
;

396 
nŸ_found
:

398 
v
->
nŸ_found
 = 1;

400  
NGX_OK
;

401 
	}
}

404 
ngx_öt_t


405 
	$ngx_°ªam_geoù_côy_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

406 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

408 *
vÆ
;

409 
size_t
 
Àn
;

410 
GeoIPRec‹d
 *
gr
;

412 
gr
 = 
	`ngx_°ªam_geoù_gë_côy_ªc‹d
(
s
);

413 i‡(
gr
 =
NULL
) {

414 
nŸ_found
;

417 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

418 i‡(
vÆ
 =
NULL
) {

419 
no_vÆue
;

422 
Àn
 = 
	`ngx_°æí
(
vÆ
);

423 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

424 i‡(
v
->
d©a
 =
NULL
) {

425 
	`GeoIPRec‹d_dñëe
(
gr
);

426  
NGX_ERROR
;

429 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

431 
v
->
Àn
 =Üen;

432 
v
->
vÆid
 = 1;

433 
v
->
no_ˇchóbÀ
 = 0;

434 
v
->
nŸ_found
 = 0;

436 
	`GeoIPRec‹d_dñëe
(
gr
);

438  
NGX_OK
;

440 
no_vÆue
:

442 
	`GeoIPRec‹d_dñëe
(
gr
);

444 
nŸ_found
:

446 
v
->
nŸ_found
 = 1;

448  
NGX_OK
;

449 
	}
}

452 
ngx_öt_t


453 
	$ngx_°ªam_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

454 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

456 
size_t
 
Àn
;

457 c⁄° *
vÆ
;

458 
GeoIPRec‹d
 *
gr
;

460 
gr
 = 
	`ngx_°ªam_geoù_gë_côy_ªc‹d
(
s
);

461 i‡(
gr
 =
NULL
) {

462 
nŸ_found
;

465 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

467 
	`GeoIPRec‹d_dñëe
(
gr
);

469 i‡(
vÆ
 =
NULL
) {

470 
nŸ_found
;

473 
Àn
 = 
	`ngx_°æí
(
vÆ
);

474 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

475 i‡(
v
->
d©a
 =
NULL
) {

476  
NGX_ERROR
;

479 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

481 
v
->
Àn
 =Üen;

482 
v
->
vÆid
 = 1;

483 
v
->
no_ˇchóbÀ
 = 0;

484 
v
->
nŸ_found
 = 0;

486  
NGX_OK
;

488 
nŸ_found
:

490 
v
->
nŸ_found
 = 1;

492  
NGX_OK
;

493 
	}
}

496 
ngx_öt_t


497 
	$ngx_°ªam_geoù_côy_Êﬂt_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

498 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

500 
vÆ
;

501 
GeoIPRec‹d
 *
gr
;

503 
gr
 = 
	`ngx_°ªam_geoù_gë_côy_ªc‹d
(
s
);

504 i‡(
gr
 =
NULL
) {

505 
v
->
nŸ_found
 = 1;

506  
NGX_OK
;

509 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

510 i‡(
v
->
d©a
 =
NULL
) {

511 
	`GeoIPRec‹d_dñëe
(
gr
);

512  
NGX_ERROR
;

515 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

517 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

518 
v
->
vÆid
 = 1;

519 
v
->
no_ˇchóbÀ
 = 0;

520 
v
->
nŸ_found
 = 0;

522 
	`GeoIPRec‹d_dñëe
(
gr
);

524  
NGX_OK
;

525 
	}
}

528 
ngx_öt_t


529 
	$ngx_°ªam_geoù_côy_öt_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

530 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

532 
vÆ
;

533 
GeoIPRec‹d
 *
gr
;

535 
gr
 = 
	`ngx_°ªam_geoù_gë_côy_ªc‹d
(
s
);

536 i‡(
gr
 =
NULL
) {

537 
v
->
nŸ_found
 = 1;

538  
NGX_OK
;

541 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_INT64_LEN
);

542 i‡(
v
->
d©a
 =
NULL
) {

543 
	`GeoIPRec‹d_dñëe
(
gr
);

544  
NGX_ERROR
;

547 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

549 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

550 
v
->
vÆid
 = 1;

551 
v
->
no_ˇchóbÀ
 = 0;

552 
v
->
nŸ_found
 = 0;

554 
	`GeoIPRec‹d_dñëe
(
gr
);

556  
NGX_OK
;

557 
	}
}

560 
GeoIPRec‹d
 *

561 
	$ngx_°ªam_geoù_gë_côy_ªc‹d
(
ngx_°ªam_£ssi⁄_t
 *
s
)

563 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
;

565 
gcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_geoù_moduÀ
);

567 i‡(
gcf
->
côy
) {

568 #i‡(
NGX_HAVE_GEOIP_V6
)

569  
gcf
->
côy_v6


570 ? 
	`GeoIP_ªc‹d_by_ùnum_v6
(
gcf
->
côy
,

571 
	`ngx_°ªam_geoù_addr_v6
(
s
, 
gcf
))

572 : 
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
,

573 
	`ngx_°ªam_geoù_addr
(
s
, 
gcf
));

575  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_°ªam_geoù_addr
(
s
, gcf));

579  
NULL
;

580 
	}
}

583 
ngx_öt_t


584 
	$ngx_°ªam_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

586 
ngx_°ªam_v¨übÀ_t
 *
v¨
, *
v
;

588 
v
 = 
ngx_°ªam_geoù_v¨s
; v->
«me
.
Àn
; v++) {

589 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

590 i‡(
v¨
 =
NULL
) {

591  
NGX_ERROR
;

594 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

595 
v¨
->
d©a
 = 
v
->data;

598  
NGX_OK
;

599 
	}
}

603 
	$ngx_°ªam_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

605 
ngx_poﬁ_˛ónup_t
 *
˛n
;

606 
ngx_°ªam_geoù_c⁄f_t
 *
c⁄f
;

608 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_geoù_c⁄f_t
));

609 i‡(
c⁄f
 =
NULL
) {

610  
NULL
;

613 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

614 i‡(
˛n
 =
NULL
) {

615  
NULL
;

618 
˛n
->
h™dÀr
 = 
ngx_°ªam_geoù_˛ónup
;

619 
˛n
->
d©a
 = 
c⁄f
;

621  
c⁄f
;

622 
	}
}

626 
	$ngx_°ªam_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

628 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

630 
ngx_°r_t
 *
vÆue
;

632 i‡(
gcf
->
cou¡ry
) {

636 
vÆue
 = 
cf
->
¨gs
->
ñts
;

638 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

640 i‡(
gcf
->
cou¡ry
 =
NULL
) {

641 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

642 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

644  
NGX_CONF_ERROR
;

647 i‡(
cf
->
¨gs
->
√…s
 == 3) {

648 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

649 
	`GeoIP_£t_ch¨£t
(
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

652 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

653 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

654  
NGX_CONF_ERROR
;

658 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

660 
GEOIP_COUNTRY_EDITION
:

662  
NGX_CONF_OK
;

664 #i‡(
NGX_HAVE_GEOIP_V6
)

665 
GEOIP_COUNTRY_EDITION_V6
:

667 
gcf
->
cou¡ry_v6
 = 1;

668  
NGX_CONF_OK
;

672 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

674 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

675  
NGX_CONF_ERROR
;

677 
	}
}

681 
	$ngx_°ªam_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

683 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

685 
ngx_°r_t
 *
vÆue
;

687 i‡(
gcf
->
‹g
) {

691 
vÆue
 = 
cf
->
¨gs
->
ñts
;

693 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

695 i‡(
gcf
->
‹g
 =
NULL
) {

696 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

697 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

699  
NGX_CONF_ERROR
;

702 i‡(
cf
->
¨gs
->
√…s
 == 3) {

703 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

704 
	`GeoIP_£t_ch¨£t
(
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

707 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

708 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

709  
NGX_CONF_ERROR
;

713 
gcf
->
‹g
->
d©aba£Ty≥
) {

715 
GEOIP_ISP_EDITION
:

716 
GEOIP_ORG_EDITION
:

717 
GEOIP_DOMAIN_EDITION
:

718 
GEOIP_ASNUM_EDITION
:

720  
NGX_CONF_OK
;

722 #i‡(
NGX_HAVE_GEOIP_V6
)

723 
GEOIP_ISP_EDITION_V6
:

724 
GEOIP_ORG_EDITION_V6
:

725 
GEOIP_DOMAIN_EDITION_V6
:

726 
GEOIP_ASNUM_EDITION_V6
:

728 
gcf
->
‹g_v6
 = 1;

729  
NGX_CONF_OK
;

733 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

735 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

736  
NGX_CONF_ERROR
;

738 
	}
}

742 
	$ngx_°ªam_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

744 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

746 
ngx_°r_t
 *
vÆue
;

748 i‡(
gcf
->
côy
) {

752 
vÆue
 = 
cf
->
¨gs
->
ñts
;

754 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

756 i‡(
gcf
->
côy
 =
NULL
) {

757 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

758 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

760  
NGX_CONF_ERROR
;

763 i‡(
cf
->
¨gs
->
√…s
 == 3) {

764 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

765 
	`GeoIP_£t_ch¨£t
(
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

768 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

769 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

770  
NGX_CONF_ERROR
;

774 
gcf
->
côy
->
d©aba£Ty≥
) {

776 
GEOIP_CITY_EDITION_REV0
:

777 
GEOIP_CITY_EDITION_REV1
:

779  
NGX_CONF_OK
;

781 #i‡(
NGX_HAVE_GEOIP_V6
)

782 
GEOIP_CITY_EDITION_REV0_V6
:

783 
GEOIP_CITY_EDITION_REV1_V6
:

785 
gcf
->
côy_v6
 = 1;

786  
NGX_CONF_OK
;

790 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

792 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

793  
NGX_CONF_ERROR
;

795 
	}
}

799 
	$ngx_°ªam_geoù_˛ónup
(*
d©a
)

801 
ngx_°ªam_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

803 i‡(
gcf
->
cou¡ry
) {

804 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

807 i‡(
gcf
->
‹g
) {

808 
	`GeoIP_dñëe
(
gcf
->
‹g
);

811 i‡(
gcf
->
côy
) {

812 
	`GeoIP_dñëe
(
gcf
->
côy
);

814 
	}
}

	@src/stream/ngx_stream_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_°ªam.h
>

14 
ngx_°ªam_log_£ssi⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
);

15 
ngx_°ªam_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 
u_ch¨
 *
ngx_°ªam_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

17 
ngx_°ªam_¥oxy_¥Ÿocﬁ_h™dÀr
(
ngx_evít_t
 *
ªv
);

21 
	$ngx_°ªam_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

23 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

24 
size_t
 
Àn
;

25 
ngx_uöt_t
 
i
;

26 
ngx_time_t
 *
ç
;

27 
ngx_evít_t
 *
ªv
;

28 
sockaddr
 *
ß
;

29 
ngx_°ªam_p‹t_t
 *
p‹t
;

30 
sockaddr_ö
 *
sö
;

31 
ngx_°ªam_ö_addr_t
 *
addr
;

32 
ngx_°ªam_£ssi⁄_t
 *
s
;

33 
ngx_°ªam_addr_c⁄f_t
 *
addr_c⁄f
;

34 #i‡(
NGX_HAVE_INET6
)

35 
sockaddr_ö6
 *
sö6
;

36 
ngx_°ªam_ö6_addr_t
 *
addr6
;

38 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

39 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

43 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

45 i‡(
p‹t
->
«ddrs
 > 1) {

55 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

56 
	`ngx_°ªam_˛o£_c⁄√˘i⁄
(
c
);

60 
ß
 = 
c
->
loˇl_sockaddr
;

62 
ß
->
ß_Ámûy
) {

64 #i‡(
NGX_HAVE_INET6
)

65 
AF_INET6
:

66 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

68 
addr6
 = 
p‹t
->
addrs
;

72 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

73 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

78 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

84 
sö
 = (
sockaddr_ö
 *Ë
ß
;

86 
addr
 = 
p‹t
->
addrs
;

90 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

91 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

96 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

102 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

104 #i‡(
NGX_HAVE_INET6
)

105 
AF_INET6
:

106 
addr6
 = 
p‹t
->
addrs
;

107 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

112 
addr
 = 
p‹t
->
addrs
;

113 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

118 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_°ªam_£ssi⁄_t
));

119 i‡(
s
 =
NULL
) {

120 
	`ngx_°ªam_˛o£_c⁄√˘i⁄
(
c
);

124 
s
->
sig«tuª
 = 
NGX_STREAM_MODULE
;

125 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

126 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

128 #i‡(
NGX_STREAM_SSL
)

129 
s
->
s¶
 = 
addr_c⁄f
->ssl;

132 i‡(
c
->
buf„r
) {

133 
s
->
ª˚ived
 +
c
->
buf„r
->
œ°
 - c->buf„r->
pos
;

136 
s
->
c⁄√˘i⁄
 = 
c
;

137 
c
->
d©a
 = 
s
;

139 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

141 
	`ngx_£t_c⁄√˘i⁄_log
(
c
, 
cscf
->
îr‹_log
);

143 
Àn
 = 
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

145 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%uA %sclient %*s connectedÅo %V",

146 
c
->
numbî
, c->
ty≥
 =
SOCK_DGRAM
 ? "udp " : "",

147 
Àn
, 
ãxt
, &
addr_c⁄f
->
addr_ãxt
);

149 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

150 
c
->
log
->
h™dÀr
 = 
ngx_°ªam_log_îr‹
;

151 
c
->
log
->
d©a
 = 
s
;

152 
c
->
log
->
a˘i⁄
 = "initializing session";

153 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

155 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_°ªam_max_moduÀ
);

156 i‡(
s
->
˘x
 =
NULL
) {

157 
	`ngx_°ªam_˛o£_c⁄√˘i⁄
(
c
);

161 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

163 
s
->
v¨übÀs
 = 
	`ngx_pˇŒoc
(s->
c⁄√˘i⁄
->
poﬁ
,

164 
cmcf
->
v¨übÀs
.
√…s


165 * (
ngx_°ªam_v¨übÀ_vÆue_t
));

167 i‡(
s
->
v¨übÀs
 =
NULL
) {

168 
	`ngx_°ªam_˛o£_c⁄√˘i⁄
(
c
);

172 
ç
 = 
	`ngx_timeofday
();

173 
s
->
°¨t_£c
 = 
ç
->
£c
;

174 
s
->
°¨t_m£c
 = 
ç
->
m£c
;

176 
ªv
 = 
c
->
ªad
;

177 
ªv
->
h™dÀr
 = 
ngx_°ªam_£ssi⁄_h™dÀr
;

179 i‡(
addr_c⁄f
->
¥oxy_¥Ÿocﬁ
) {

180 
c
->
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

182 
ªv
->
h™dÀr
 = 
ngx_°ªam_¥oxy_¥Ÿocﬁ_h™dÀr
;

184 i‡(!
ªv
->
ªady
) {

185 
	`ngx_add_timî
(
ªv
, 
cscf
->
¥oxy_¥Ÿocﬁ_timeout
);

187 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

188 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
,

189 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

196 i‡(
ngx_u£_ac˚±_muãx
) {

197 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

201 
ªv
->
	`h™dÀr
(rev);

202 
	}
}

206 
	$ngx_°ªam_¥oxy_¥Ÿocﬁ_h™dÀr
(
ngx_evít_t
 *
ªv
)

208 
u_ch¨
 *
p
, 
buf
[
NGX_PROXY_PROTOCOL_MAX_HEADER
];

209 
size_t
 
size
;

210 
ssize_t
 
n
;

211 
ngx_îr_t
 
îr
;

212 
ngx_c⁄√˘i⁄_t
 *
c
;

213 
ngx_°ªam_£ssi⁄_t
 *
s
;

214 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

216 
c
 = 
ªv
->
d©a
;

217 
s
 = 
c
->
d©a
;

219 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

222 i‡(
ªv
->
timedout
) {

223 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

224 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_OK
);

228 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, (buf), 
MSG_PEEK
);

230 
îr
 = 
ngx_sockë_î∫o
;

232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0, "ªcv(): %z", 
n
);

234 i‡(
n
 == -1) {

235 i‡(
îr
 =
NGX_EAGAIN
) {

236 
ªv
->
ªady
 = 0;

238 i‡(!
ªv
->
timî_£t
) {

239 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
,

240 
ngx_°ªam_c‹e_moduÀ
);

242 
	`ngx_add_timî
(
ªv
, 
cscf
->
¥oxy_¥Ÿocﬁ_timeout
);

245 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

246 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
,

247 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

253 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

255 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_OK
);

259 i‡(
ªv
->
timî_£t
) {

260 
	`ngx_dñ_timî
(
ªv
);

263 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_ªad
(
c
, 
buf
, bu‡+ 
n
);

265 i‡(
p
 =
NULL
) {

266 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_BAD_REQUEST
);

270 
size
 = 
p
 - 
buf
;

272 i‡(
c
->
	`ªcv
(c, 
buf
, 
size
Ë!(
ssize_t
) size) {

273 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

277 
c
->
log
->
a˘i⁄
 = "initializing session";

279 
	`ngx_°ªam_£ssi⁄_h™dÀr
(
ªv
);

280 
	}
}

284 
	$ngx_°ªam_£ssi⁄_h™dÀr
(
ngx_evít_t
 *
ªv
)

286 
ngx_c⁄√˘i⁄_t
 *
c
;

287 
ngx_°ªam_£ssi⁄_t
 *
s
;

289 
c
 = 
ªv
->
d©a
;

290 
s
 = 
c
->
d©a
;

292 
	`ngx_°ªam_c‹e_run_pha£s
(
s
);

293 
	}
}

297 
	$ngx_°ªam_föÆize_£ssi⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
rc
)

299 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

300 "föÆizê°ªam sessi⁄: %i", 
rc
);

302 
s
->
°©us
 = 
rc
;

304 
	`ngx_°ªam_log_£ssi⁄
(
s
);

306 
	`ngx_°ªam_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

307 
	}
}

311 
	$ngx_°ªam_log_£ssi⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
)

313 
ngx_uöt_t
 
i
, 
n
;

314 
ngx_°ªam_h™dÀr_±
 *
log_h™dÀr
;

315 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

317 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

319 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_STREAM_LOG_PHASE
].
h™dÀrs
.
ñts
;

320 
n
 = 
cmcf
->
pha£s
[
NGX_STREAM_LOG_PHASE
].
h™dÀrs
.
√…s
;

322 
i
 = 0; i < 
n
; i++) {

323 
log_h™dÀr
[
i
](
s
);

325 
	}
}

329 
	$ngx_°ªam_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

331 
ngx_poﬁ_t
 *
poﬁ
;

333 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

334 "˛o£ såóm c⁄√˘i⁄: %d", 
c
->
fd
);

336 #i‡(
NGX_STREAM_SSL
)

338 i‡(
c
->
s¶
) {

339 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

340 
c
->
s¶
->
h™dÀr
 = 
ngx_°ªam_˛o£_c⁄√˘i⁄
;

347 #i‡(
NGX_STAT_STUB
)

348 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

351 
poﬁ
 = 
c
->pool;

353 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

355 
	`ngx_de°roy_poﬁ
(
poﬁ
);

356 
	}
}

359 
u_ch¨
 *

360 
	$ngx_°ªam_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

362 
u_ch¨
 *
p
;

363 
ngx_°ªam_£ssi⁄_t
 *
s
;

365 i‡(
log
->
a˘i⁄
) {

366 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

367 
Àn
 -
p
 - 
buf
;

368 
buf
 = 
p
;

371 
s
 = 
log
->
d©a
;

373 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", %sclient: %V, server: %V",

374 
s
->
c⁄√˘i⁄
->
ty≥
 =
SOCK_DGRAM
 ? "udp " : "",

375 &
s
->
c⁄√˘i⁄
->
addr_ãxt
,

376 &
s
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

377 
Àn
 -
p
 - 
buf
;

378 
buf
 = 
p
;

380 i‡(
s
->
log_h™dÀr
) {

381 
p
 = 
s
->
	`log_h™dÀr
(
log
, 
buf
, 
Àn
);

384  
p
;

385 
	}
}

	@src/stream/ngx_stream_limit_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_°ªam_limô_c⁄n_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_°ªam_limô_c⁄n_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_°ªam_com∂ex_vÆue_t
 
	mkey
;

30 } 
	tngx_°ªam_limô_c⁄n_˘x_t
;

34 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

35 
ngx_uöt_t
 
	mc⁄n
;

36 } 
	tngx_°ªam_limô_c⁄n_limô_t
;

40 
ngx_¨øy_t
 
	mlimôs
;

41 
ngx_uöt_t
 
	mlog_Àvñ
;

42 } 
	tngx_°ªam_limô_c⁄n_c⁄f_t
;

45 
ngx_rbåì_node_t
 *
ngx_°ªam_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
,

46 
ngx_°r_t
 *
key
, 
uöt32_t
 
hash
);

47 
ngx_°ªam_limô_c⁄n_˛ónup
(*
d©a
);

48 
ngx_ölöe
 
ngx_°ªam_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
);

50 *
ngx_°ªam_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_°ªam_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

52 *
chûd
);

53 *
ngx_°ªam_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

54 *
c⁄f
);

55 *
ngx_°ªam_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 
ngx_öt_t
 
ngx_°ªam_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
);

60 
ngx_c⁄f_íum_t
 
	gngx_°ªam_limô_c⁄n_log_Àvñs
[] = {

61 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

62 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

63 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

64 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

65 { 
ngx_nuŒ_°rög
, 0 }

69 
ngx_comm™d_t
 
	gngx_°ªam_limô_c⁄n_comm™ds
[] = {

71 { 
ngx_°rög
("limit_conn_zone"),

72 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE2
,

73 
ngx_°ªam_limô_c⁄n_z⁄e
,

76 
NULL
 },

78 { 
ngx_°rög
("limit_conn"),

79 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE2
,

80 
ngx_°ªam_limô_c⁄n
,

81 
NGX_STREAM_SRV_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("limit_conn_log_level"),

86 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_íum_¶Ÿ
,

88 
NGX_STREAM_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_°ªam_limô_c⁄n_c⁄f_t
, 
log_Àvñ
),

90 &
ngx_°ªam_limô_c⁄n_log_Àvñs
 },

92 
ngx_nuŒ_comm™d


96 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_limô_c⁄n_moduÀ_˘x
 = {

97 
NULL
,

98 
ngx_°ªam_limô_c⁄n_öô
,

100 
NULL
,

101 
NULL
,

103 
ngx_°ªam_limô_c⁄n_¸óã_c⁄f
,

104 
ngx_°ªam_limô_c⁄n_mîge_c⁄f


108 
ngx_moduÀ_t
 
	gngx_°ªam_limô_c⁄n_moduÀ
 = {

109 
NGX_MODULE_V1
,

110 &
ngx_°ªam_limô_c⁄n_moduÀ_˘x
,

111 
ngx_°ªam_limô_c⁄n_comm™ds
,

112 
NGX_STREAM_MODULE
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NULL
,

120 
NGX_MODULE_V1_PADDING


124 
ngx_öt_t


125 
	$ngx_°ªam_limô_c⁄n_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

127 
size_t
 
n
;

128 
uöt32_t
 
hash
;

129 
ngx_°r_t
 
key
;

130 
ngx_uöt_t
 
i
;

131 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

132 
ngx_rbåì_node_t
 *
node
;

133 
ngx_poﬁ_˛ónup_t
 *
˛n
;

134 
ngx_°ªam_limô_c⁄n_˘x_t
 *
˘x
;

135 
ngx_°ªam_limô_c⁄n_node_t
 *
lc
;

136 
ngx_°ªam_limô_c⁄n_c⁄f_t
 *
lccf
;

137 
ngx_°ªam_limô_c⁄n_limô_t
 *
limôs
;

138 
ngx_°ªam_limô_c⁄n_˛ónup_t
 *
lc˛n
;

140 
lccf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_limô_c⁄n_moduÀ
);

141 
limôs
 = 
lccf
->limôs.
ñts
;

143 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

144 
˘x
 = 
limôs
[
i
].
shm_z⁄e
->
d©a
;

146 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, &
˘x
->
key
, &keyË!
NGX_OK
) {

147  
NGX_ERROR
;

150 i‡(
key
.
Àn
 == 0) {

154 i‡(
key
.
Àn
 > 255) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

158 &
˘x
->
key
.
vÆue
, &key);

162 
hash
 = 
	`ngx_¸c32_sh‹t
(
key
.
d©a
, key.
Àn
);

164 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
limôs
[
i
].
shm_z⁄e
->
shm
.
addr
;

166 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

168 
node
 = 
	`ngx_°ªam_limô_c⁄n_lookup
(
˘x
->
rbåì
, &
key
, 
hash
);

170 i‡(
node
 =
NULL
) {

172 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

173 + 
	`off£tof
(
ngx_°ªam_limô_c⁄n_node_t
, 
d©a
)

174 + 
key
.
Àn
;

176 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

178 i‡(
node
 =
NULL
) {

179 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

180 
	`ngx_°ªam_limô_c⁄n_˛ónup_Æl
(
s
->
c⁄√˘i⁄
->
poﬁ
);

181  
NGX_STREAM_SERVICE_UNAVAILABLE
;

184 
lc
 = (
ngx_°ªam_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

186 
node
->
key
 = 
hash
;

187 
lc
->
Àn
 = (
u_ch¨
Ë
key
.len;

188 
lc
->
c⁄n
 = 1;

189 
	`ngx_mem˝y
(
lc
->
d©a
, 
key
.d©a, key.
Àn
);

191 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

195 
lc
 = (
ngx_°ªam_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

197 i‡((
ngx_uöt_t
Ë
lc
->
c⁄n
 >
limôs
[
i
].conn) {

199 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

201 
	`ngx_log_îr‹
(
lccf
->
log_Àvñ
, 
s
->
c⁄√˘i⁄
->
log
, 0,

203 &
limôs
[
i
].
shm_z⁄e
->
shm
.
«me
);

205 
	`ngx_°ªam_limô_c⁄n_˛ónup_Æl
(
s
->
c⁄√˘i⁄
->
poﬁ
);

206  
NGX_STREAM_SERVICE_UNAVAILABLE
;

209 
lc
->
c⁄n
++;

212 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

213 "limô c⁄n: %08Xò%d", 
node
->
key
, 
lc
->
c⁄n
);

215 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

217 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
s
->
c⁄√˘i⁄
->
poﬁ
,

218 (
ngx_°ªam_limô_c⁄n_˛ónup_t
));

219 i‡(
˛n
 =
NULL
) {

220  
NGX_ERROR
;

223 
˛n
->
h™dÀr
 = 
ngx_°ªam_limô_c⁄n_˛ónup
;

224 
lc˛n
 = 
˛n
->
d©a
;

226 
lc˛n
->
shm_z⁄e
 = 
limôs
[
i
].shm_zone;

227 
lc˛n
->
node
 =Çode;

230  
NGX_DECLINED
;

231 
	}
}

235 
	$ngx_°ªam_limô_c⁄n_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

236 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

238 
ngx_rbåì_node_t
 **
p
;

239 
ngx_°ªam_limô_c⁄n_node_t
 *
l˙
, *
l˙t
;

243 i‡(
node
->
key
 < 
ãmp
->key) {

245 
p
 = &
ãmp
->
À·
;

247 } i‡(
node
->
key
 > 
ãmp
->key) {

249 
p
 = &
ãmp
->
right
;

253 
l˙
 = (
ngx_°ªam_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

254 
l˙t
 = (
ngx_°ªam_limô_c⁄n_node_t
 *Ë&
ãmp
->
cﬁ‹
;

256 
p
 = (
	`ngx_memn2cmp
(
l˙
->
d©a
, 
l˙t
->d©a,Ü˙->
Àn
,Ücnt->len) < 0)

257 ? &
ãmp
->
À·
 : &ãmp->
right
;

260 i‡(*
p
 =
£¡öñ
) {

264 
ãmp
 = *
p
;

267 *
p
 = 
node
;

268 
node
->
∑ª¡
 = 
ãmp
;

269 
node
->
À·
 = 
£¡öñ
;

270 
node
->
right
 = 
£¡öñ
;

271 
	`ngx_rbt_ªd
(
node
);

272 
	}
}

275 
ngx_rbåì_node_t
 *

276 
	$ngx_°ªam_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
key
,

277 
uöt32_t
 
hash
)

279 
ngx_öt_t
 
rc
;

280 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

281 
ngx_°ªam_limô_c⁄n_node_t
 *
l˙
;

283 
node
 = 
rbåì
->
roŸ
;

284 
£¡öñ
 = 
rbåì
->sentinel;

286 
node
 !
£¡öñ
) {

288 i‡(
hash
 < 
node
->
key
) {

289 
node
 =Çode->
À·
;

293 i‡(
hash
 > 
node
->
key
) {

294 
node
 =Çode->
right
;

300 
l˙
 = (
ngx_°ªam_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

302 
rc
 = 
	`ngx_memn2cmp
(
key
->
d©a
, 
l˙
->d©a, key->
Àn
, (
size_t
)Ücn->len);

304 i‡(
rc
 == 0) {

305  
node
;

308 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

311  
NULL
;

312 
	}
}

316 
	$ngx_°ªam_limô_c⁄n_˛ónup
(*
d©a
)

318 
ngx_°ªam_limô_c⁄n_˛ónup_t
 *
lc˛n
 = 
d©a
;

320 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

321 
ngx_rbåì_node_t
 *
node
;

322 
ngx_°ªam_limô_c⁄n_˘x_t
 *
˘x
;

323 
ngx_°ªam_limô_c⁄n_node_t
 *
lc
;

325 
˘x
 = 
lc˛n
->
shm_z⁄e
->
d©a
;

326 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lc˛n
->
shm_z⁄e
->
shm
.
addr
;

327 
node
 = 
lc˛n
->node;

328 
lc
 = (
ngx_°ªam_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

330 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

332 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
lc˛n
->
shm_z⁄e
->
shm
.
log
, 0,

333 "limô c⁄¿˛ónup: %08Xò%d", 
node
->
key
, 
lc
->
c⁄n
);

335 
lc
->
c⁄n
--;

337 i‡(
lc
->
c⁄n
 == 0) {

338 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

339 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

342 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

343 
	}
}

346 
ngx_ölöe
 

347 
	$ngx_°ªam_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
)

349 
ngx_poﬁ_˛ónup_t
 *
˛n
;

351 
˛n
 = 
poﬁ
->
˛ónup
;

353 
˛n
 && c ->
h™dÀr
 =
ngx_°ªam_limô_c⁄n_˛ónup
) {

354 
	`ngx_°ªam_limô_c⁄n_˛ónup
(
˛n
->
d©a
);

355 
˛n
 = c ->
√xt
;

358 
poﬁ
->
˛ónup
 = 
˛n
;

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_°ªam_limô_c⁄n_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

365 
ngx_°ªam_limô_c⁄n_˘x_t
 *
o˘x
 = 
d©a
;

367 
size_t
 
Àn
;

368 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

369 
ngx_rbåì_node_t
 *
£¡öñ
;

370 
ngx_°ªam_limô_c⁄n_˘x_t
 *
˘x
;

372 
˘x
 = 
shm_z⁄e
->
d©a
;

374 i‡(
o˘x
) {

375 i‡(
˘x
->
key
.
vÆue
.
Àn
 !
o˘x
->key.value.len

376 || 
	`ngx_°∫cmp
(
˘x
->
key
.
vÆue
.
d©a
, 
o˘x
->key.value.data,

377 
˘x
->
key
.
vÆue
.
Àn
)

380 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

383 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
key
.
vÆue
,

384 &
o˘x
->
key
.
vÆue
);

385  
NGX_ERROR
;

388 
˘x
->
rbåì
 = 
o˘x
->rbtree;

390  
NGX_OK
;

393 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

395 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

396 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

398  
NGX_OK
;

401 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

402 i‡(
˘x
->
rbåì
 =
NULL
) {

403  
NGX_ERROR
;

406 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

408 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

409 i‡(
£¡öñ
 =
NULL
) {

410  
NGX_ERROR
;

413 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

414 
ngx_°ªam_limô_c⁄n_rbåì_ö£π_vÆue
);

416 
Àn
 = (" i¿limô_c⁄n_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

418 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

419 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

420  
NGX_ERROR
;

423 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_conn_zone \"%V\"%Z",

424 &
shm_z⁄e
->
shm
.
«me
);

426  
NGX_OK
;

427 
	}
}

431 
	$ngx_°ªam_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

433 
ngx_°ªam_limô_c⁄n_c⁄f_t
 *
c⁄f
;

435 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_limô_c⁄n_c⁄f_t
));

436 i‡(
c⁄f
 =
NULL
) {

437  
NULL
;

446 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

448  
c⁄f
;

449 
	}
}

453 
	$ngx_°ªam_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

455 
ngx_°ªam_limô_c⁄n_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

456 
ngx_°ªam_limô_c⁄n_c⁄f_t
 *
c⁄f
 = 
chûd
;

458 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

459 
c⁄f
->
limôs
 = 
¥ev
->limits;

462 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

464  
NGX_CONF_OK
;

465 
	}
}

469 
	$ngx_°ªam_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

471 
u_ch¨
 *
p
;

472 
ssize_t
 
size
;

473 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

474 
ngx_uöt_t
 
i
;

475 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

476 
ngx_°ªam_limô_c⁄n_˘x_t
 *
˘x
;

477 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

479 
vÆue
 = 
cf
->
¨gs
->
ñts
;

481 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_limô_c⁄n_˘x_t
));

482 i‡(
˘x
 =
NULL
) {

483  
NGX_CONF_ERROR
;

486 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

488 
ccv
.
cf
 = cf;

489 
ccv
.
vÆue
 = &value[1];

490 
ccv
.
com∂ex_vÆue
 = &
˘x
->
key
;

492 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

493  
NGX_CONF_ERROR
;

496 
size
 = 0;

497 
«me
.
Àn
 = 0;

499 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

501 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

503 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

505 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

507 i‡(
p
 =
NULL
) {

508 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

509 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

510  
NGX_CONF_ERROR
;

513 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

515 
s
.
d©a
 = 
p
 + 1;

516 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

518 
size
 = 
	`ngx_∑r£_size
(&
s
);

520 i‡(
size
 =
NGX_ERROR
) {

521 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

522 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

523  
NGX_CONF_ERROR
;

526 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

527 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

528 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

529  
NGX_CONF_ERROR
;

535 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

536 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

537  
NGX_CONF_ERROR
;

540 i‡(
«me
.
Àn
 == 0) {

541 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

543 &
cmd
->
«me
);

544  
NGX_CONF_ERROR
;

547 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

548 &
ngx_°ªam_limô_c⁄n_moduÀ
);

549 i‡(
shm_z⁄e
 =
NULL
) {

550  
NGX_CONF_ERROR
;

553 i‡(
shm_z⁄e
->
d©a
) {

554 
˘x
 = 
shm_z⁄e
->
d©a
;

556 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

558 &
cmd
->
«me
, &«me, &
˘x
->
key
.
vÆue
);

559  
NGX_CONF_ERROR
;

562 
shm_z⁄e
->
öô
 = 
ngx_°ªam_limô_c⁄n_öô_z⁄e
;

563 
shm_z⁄e
->
d©a
 = 
˘x
;

565  
NGX_CONF_OK
;

566 
	}
}

570 
	$ngx_°ªam_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

572 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

573 
ngx_°ªam_limô_c⁄n_c⁄f_t
 *
lccf
 = 
c⁄f
;

574 
ngx_°ªam_limô_c⁄n_limô_t
 *
limô
, *
limôs
;

576 
ngx_°r_t
 *
vÆue
;

577 
ngx_öt_t
 
n
;

578 
ngx_uöt_t
 
i
;

580 
vÆue
 = 
cf
->
¨gs
->
ñts
;

582 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

583 &
ngx_°ªam_limô_c⁄n_moduÀ
);

584 i‡(
shm_z⁄e
 =
NULL
) {

585  
NGX_CONF_ERROR
;

588 
limôs
 = 
lccf
->limôs.
ñts
;

590 i‡(
limôs
 =
NULL
) {

591 i‡(
	`ngx_¨øy_öô
(&
lccf
->
limôs
, 
cf
->
poﬁ
, 1,

592 (
ngx_°ªam_limô_c⁄n_limô_t
))

593 !
NGX_OK
)

595  
NGX_CONF_ERROR
;

599 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

600 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

605 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

606 i‡(
n
 <= 0) {

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

608 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

609  
NGX_CONF_ERROR
;

612 i‡(
n
 > 65535) {

613 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

615  
NGX_CONF_ERROR
;

618 
limô
 = 
	`ngx_¨øy_push
(&
lccf
->
limôs
);

619 i‡(
limô
 =
NULL
) {

620  
NGX_CONF_ERROR
;

623 
limô
->
c⁄n
 = 
n
;

624 
limô
->
shm_z⁄e
 = shm_zone;

626  
NGX_CONF_OK
;

627 
	}
}

630 
ngx_öt_t


631 
	$ngx_°ªam_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
)

633 
ngx_°ªam_h™dÀr_±
 *
h
;

634 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

636 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

638 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_STREAM_PREACCESS_PHASE
].
h™dÀrs
);

639 i‡(
h
 =
NULL
) {

640  
NGX_ERROR
;

643 *
h
 = 
ngx_°ªam_limô_c⁄n_h™dÀr
;

645  
NGX_OK
;

646 
	}
}

	@src/stream/ngx_stream_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

12 #i‡(
NGX_ZLIB
)

13 
	~<zlib.h
>

17 
ngx_°ªam_log_›_s
 
	tngx_°ªam_log_›_t
;

19 
	gu_ch¨
 *(*
	tngx_°ªam_log_›_run_±
Ë(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

20 
	tu_ch¨
 *
	tbuf
, 
	tngx_°ªam_log_›_t
 *
	t›
);

22 
	$size_t
 (*
	tngx_°ªam_log_›_gëÀn_±
Ë(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

23 
	tuöçå_t
 
	td©a
);

26 
	sngx_°ªam_log_›_s
 {

27 
size_t
 
Àn
;

28 
ngx_°ªam_log_›_gëÀn_±
 
gëÀn
;

29 
ngx_°ªam_log_›_run_±
 
run
;

30 
uöçå_t
 
d©a
;

35 
ngx_°r_t
 
«me
;

36 
ngx_¨øy_t
 *
Êushes
;

37 
ngx_¨øy_t
 *
›s
;

38 } 
	tngx_°ªam_log_fmt_t
;

42 
ngx_¨øy_t
 
f‹m©s
;

43 } 
	tngx_°ªam_log_maö_c⁄f_t
;

47 
u_ch¨
 *
°¨t
;

48 
u_ch¨
 *
pos
;

49 
u_ch¨
 *
œ°
;

51 
ngx_evít_t
 *
evít
;

52 
ngx_m£c_t
 
Êush
;

53 
ngx_öt_t
 
gzù
;

54 } 
	tngx_°ªam_log_buf_t
;

58 
ngx_¨øy_t
 *
Àngths
;

59 
ngx_¨øy_t
 *
vÆues
;

60 } 
	tngx_°ªam_log_s¸ùt_t
;

64 
ngx_›í_fûe_t
 *
fûe
;

65 
ngx_°ªam_log_s¸ùt_t
 *
s¸ùt
;

66 
time_t
 
disk_fuŒ_time
;

67 
time_t
 
îr‹_log_time
;

68 
ngx_sy¶og_≥î_t
 *
sy¶og_≥î
;

69 
ngx_°ªam_log_fmt_t
 *
f‹m©
;

70 
ngx_°ªam_com∂ex_vÆue_t
 *
fûãr
;

71 } 
	tngx_°ªam_log_t
;

75 
ngx_¨øy_t
 *
logs
;

77 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

78 
time_t
 
›í_fûe_ˇche_vÆid
;

79 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

81 
ngx_uöt_t
 
off
;

82 } 
	tngx_°ªam_log_§v_c⁄f_t
;

86 
ngx_°r_t
 
«me
;

87 
size_t
 
Àn
;

88 
ngx_°ªam_log_›_run_±
 
run
;

89 } 
	tngx_°ªam_log_v¨_t
;

92 
	#NGX_STREAM_LOG_ESCAPE_DEFAULT
 0

	)

93 
	#NGX_STREAM_LOG_ESCAPE_JSON
 1

	)

94 
	#NGX_STREAM_LOG_ESCAPE_NONE
 2

	)

97 
	`ngx_°ªam_log_wrôe
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_log_t
 *
log
,

98 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

99 
ssize_t
 
	`ngx_°ªam_log_s¸ùt_wrôe
(
ngx_°ªam_£ssi⁄_t
 *
s
,

100 
ngx_°ªam_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

102 #i‡(
NGX_ZLIB
)

103 
ssize_t
 
	`ngx_°ªam_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
,

104 
ngx_öt_t
 
Àvñ
, 
ngx_log_t
 *
log
);

106 *
	`ngx_°ªam_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

107 
	`ngx_°ªam_log_gzù_‰ì
(*
›aque
, *
addªss
);

110 
	`ngx_°ªam_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
);

111 
	`ngx_°ªam_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
);

113 
ngx_öt_t
 
	`ngx_°ªam_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

114 
ngx_°ªam_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
esˇ≥
);

115 
size_t
 
	`ngx_°ªam_log_v¨übÀ_gëÀn
(
ngx_°ªam_£ssi⁄_t
 *
s
,

116 
uöçå_t
 
d©a
);

117 
u_ch¨
 *
	`ngx_°ªam_log_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, u_ch¨ *
buf
,

118 
ngx_°ªam_log_›_t
 *
›
);

119 
uöçå_t
 
	`ngx_°ªam_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

120 
size_t
 
	`ngx_°ªam_log_js⁄_v¨übÀ_gëÀn
(
ngx_°ªam_£ssi⁄_t
 *
s
,

121 
uöçå_t
 
d©a
);

122 
u_ch¨
 *
	`ngx_°ªam_log_js⁄_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

123 
u_ch¨
 *
buf
, 
ngx_°ªam_log_›_t
 *
›
);

124 
size_t
 
	`ngx_°ªam_log_u√sˇ≥d_v¨übÀ_gëÀn
(
ngx_°ªam_£ssi⁄_t
 *
s
,

125 
uöçå_t
 
d©a
);

126 
u_ch¨
 *
	`ngx_°ªam_log_u√sˇ≥d_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

127 
u_ch¨
 *
buf
, 
ngx_°ªam_log_›_t
 *
›
);

130 *
	`ngx_°ªam_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

131 *
	`ngx_°ªam_log_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

132 *
	`ngx_°ªam_log_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

133 *
chûd
);

134 *
	`ngx_°ªam_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

135 *
c⁄f
);

136 *
	`ngx_°ªam_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

137 *
c⁄f
);

138 *
	`ngx_°ªam_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

139 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

140 *
	`ngx_°ªam_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

141 *
c⁄f
);

142 
ngx_öt_t
 
	`ngx_°ªam_log_öô
(
ngx_c⁄f_t
 *
cf
);

145 
ngx_comm™d_t
 
ngx_°ªam_log_comm™ds
[] = {

147 { 
	`ngx_°rög
("log_format"),

148 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_2MORE
,

149 
ngx_°ªam_log_£t_f‹m©
,

150 
NGX_STREAM_MAIN_CONF_OFFSET
,

152 
NULL
 },

154 { 
	`ngx_°rög
("access_log"),

155 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_1MORE
,

156 
ngx_°ªam_log_£t_log
,

157 
NGX_STREAM_SRV_CONF_OFFSET
,

159 
NULL
 },

161 { 
	`ngx_°rög
("open_log_file_cache"),

162 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1234
,

163 
ngx_°ªam_log_›í_fûe_ˇche
,

164 
NGX_STREAM_SRV_CONF_OFFSET
,

166 
NULL
 },

168 
ngx_nuŒ_comm™d


169 
	}
};

172 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_log_moduÀ_˘x
 = {

173 
NULL
,

174 
ngx_°ªam_log_öô
,

176 
ngx_°ªam_log_¸óã_maö_c⁄f
,

177 
NULL
,

179 
ngx_°ªam_log_¸óã_§v_c⁄f
,

180 
ngx_°ªam_log_mîge_§v_c⁄f


184 
ngx_moduÀ_t
 
	gngx_°ªam_log_moduÀ
 = {

185 
NGX_MODULE_V1
,

186 &
ngx_°ªam_log_moduÀ_˘x
,

187 
ngx_°ªam_log_comm™ds
,

188 
NGX_STREAM_MODULE
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NGX_MODULE_V1_PADDING


200 
ngx_öt_t


201 
	$ngx_°ªam_log_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

203 
u_ch¨
 *
löe
, *
p
;

204 
size_t
 
Àn
, 
size
;

205 
ssize_t
 
n
;

206 
ngx_°r_t
 
vÆ
;

207 
ngx_uöt_t
 
i
, 
l
;

208 
ngx_°ªam_log_t
 *
log
;

209 
ngx_°ªam_log_›_t
 *
›
;

210 
ngx_°ªam_log_buf_t
 *
buf„r
;

211 
ngx_°ªam_log_§v_c⁄f_t
 *
lscf
;

213 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

216 
lscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_log_moduÀ
);

218 i‡(
lscf
->
off
 ||Üscf->
logs
 =
NULL
) {

219  
NGX_OK
;

222 
log
 = 
lscf
->
logs
->
ñts
;

223 
l
 = 0;Ü < 
lscf
->
logs
->
√…s
;Ü++) {

225 i‡(
log
[
l
].
fûãr
) {

226 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, 
log
[
l
].
fûãr
, &
vÆ
Ë!
NGX_OK
) {

227  
NGX_ERROR
;

230 i‡(
vÆ
.
Àn
 =0 || (vÆ.À¿=1 && vÆ.
d©a
[0] == '0')) {

235 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

246 
	`ngx_°ªam_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
s
,

247 
log
[
l
].
f‹m©
->
Êushes
);

249 
Àn
 = 0;

250 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

251 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

252 i‡(
›
[
i
].
Àn
 == 0) {

253 
Àn
 +
›
[
i
].
	`gëÀn
(
s
, op[i].
d©a
);

256 
Àn
 +
›
[
i
].len;

260 i‡(
log
[
l
].
sy¶og_≥î
) {

263 
Àn
 += ("<255>Jan 01 00:00:00 ") - 1

264 + 
ngx_cy˛e
->
ho°«me
.
Àn
 + 1

265 + 
log
[
l
].
sy¶og_≥î
->
èg
.
Àn
 + 2;

267 
Æloc_löe
;

270 
Àn
 +
NGX_LINEFEED_SIZE
;

272 
buf„r
 = 
log
[
l
].
fûe
 ?Üog[l].fûe->
d©a
 : 
NULL
;

274 i‡(
buf„r
) {

276 i‡(
Àn
 > (
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

278 
	`ngx_°ªam_log_wrôe
(
s
, &
log
[
l
], 
buf„r
->
°¨t
,

279 
buf„r
->
pos
 - buf„r->
°¨t
);

281 
buf„r
->
pos
 = buf„r->
°¨t
;

284 i‡(
Àn
 <(
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

286 
p
 = 
buf„r
->
pos
;

288 i‡(
buf„r
->
evít
 && 
p
 =buf„r->
°¨t
) {

289 
	`ngx_add_timî
(
buf„r
->
evít
, buf„r->
Êush
);

292 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

293 
p
 = 
›
[
i
].
	`run
(
s
,Ö, &op[i]);

296 
	`ngx_löe„ed
(
p
);

298 
buf„r
->
pos
 = 
p
;

303 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

304 
	`ngx_dñ_timî
(
buf„r
->
evít
);

308 
Æloc_löe
:

310 
löe
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

311 i‡(
löe
 =
NULL
) {

312  
NGX_ERROR
;

315 
p
 = 
löe
;

317 i‡(
log
[
l
].
sy¶og_≥î
) {

318 
p
 = 
	`ngx_sy¶og_add_hódî
(
log
[
l
].
sy¶og_≥î
, 
löe
);

321 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

322 
p
 = 
›
[
i
].
	`run
(
s
,Ö, &op[i]);

325 i‡(
log
[
l
].
sy¶og_≥î
) {

327 
size
 = 
p
 - 
löe
;

329 
n
 = 
	`ngx_sy¶og_£nd
(
log
[
l
].
sy¶og_≥î
, 
löe
, 
size
);

331 i‡(
n
 < 0) {

332 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s
->
c⁄√˘i⁄
->
log
, 0,

335 } i‡((
size_t
Ë
n
 !
size
) {

336 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s
->
c⁄√˘i⁄
->
log
, 0,

338 
n
, 
size
);

344 
	`ngx_löe„ed
(
p
);

346 
	`ngx_°ªam_log_wrôe
(
s
, &
log
[
l
], 
löe
, 
p
 -Üine);

349  
NGX_OK
;

350 
	}
}

354 
	$ngx_°ªam_log_wrôe
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_log_t
 *
log
,

355 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

357 
u_ch¨
 *
«me
;

358 
time_t
 
now
;

359 
ssize_t
 
n
;

360 
ngx_îr_t
 
îr
;

361 #i‡(
NGX_ZLIB
)

362 
ngx_°ªam_log_buf_t
 *
buf„r
;

365 i‡(
log
->
s¸ùt
 =
NULL
) {

366 
«me
 = 
log
->
fûe
->«me.
d©a
;

368 #i‡(
NGX_ZLIB
)

369 
buf„r
 = 
log
->
fûe
->
d©a
;

371 i‡(
buf„r
 && buf„r->
gzù
) {

372 
n
 = 
	`ngx_°ªam_log_gzù
(
log
->
fûe
->
fd
, 
buf
, 
Àn
, 
buf„r
->
gzù
,

373 
s
->
c⁄√˘i⁄
->
log
);

375 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

378 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

382 
«me
 = 
NULL
;

383 
n
 = 
	`ngx_°ªam_log_s¸ùt_wrôe
(
s
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

386 i‡(
n
 =(
ssize_t
Ë
Àn
) {

390 
now
 = 
	`ngx_time
();

392 i‡(
n
 == -1) {

393 
îr
 = 
ngx_î∫o
;

395 i‡(
îr
 =
NGX_ENOSPC
) {

396 
log
->
disk_fuŒ_time
 = 
now
;

399 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

400 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
îr
,

401 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

403 
log
->
îr‹_log_time
 = 
now
;

409 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

410 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 0,

411 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

412 
«me
, 
n
, 
Àn
);

414 
log
->
îr‹_log_time
 = 
now
;

416 
	}
}

419 
ssize_t


420 
	$ngx_°ªam_log_s¸ùt_wrôe
(
ngx_°ªam_£ssi⁄_t
 *
s
,

421 
ngx_°ªam_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

423 
ssize_t
 
n
;

424 
ngx_°r_t
 
log
;

425 
ngx_›í_fûe_öfo_t
 
of
;

426 
ngx_°ªam_log_§v_c⁄f_t
 *
lscf
;

428 i‡(
	`ngx_°ªam_s¸ùt_run
(
s
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

429 
s¸ùt
->
vÆues
->
ñts
)

430 =
NULL
)

433  
Àn
;

436 
log
.
d©a
[log.
Àn
 - 1] = '\0';

437 *
«me
 = 
log
.
d©a
;

439 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

440 "°ªamÜog \"%s\"", 
log
.
d©a
);

442 
lscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_log_moduÀ
);

444 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

446 
of
.
log
 = 1;

447 
of
.
vÆid
 = 
lscf
->
›í_fûe_ˇche_vÆid
;

448 
of
.
mö_u£s
 = 
lscf
->
›í_fûe_ˇche_mö_u£s
;

449 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

451 i‡(
	`ngx_›í_ˇched_fûe
(
lscf
->
›í_fûe_ˇche
, &
log
, &
of
,

452 
s
->
c⁄√˘i⁄
->
poﬁ
)

453 !
NGX_OK
)

455 i‡(
of
.
îr
 == 0) {

457  
Àn
;

460 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

461 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

463  
Àn
;

466 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

467 "°ªamÜog #%d", 
of
.
fd
);

469 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

471  
n
;

472 
	}
}

475 #i‡(
NGX_ZLIB
)

477 
ssize_t


478 
	$ngx_°ªam_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
, 
ngx_öt_t
 
Àvñ
,

479 
ngx_log_t
 *
log
)

481 
rc
, 
wbôs
, 
memÀvñ
;

482 
u_ch¨
 *
out
;

483 
size_t
 
size
;

484 
ssize_t
 
n
;

485 
z_°ªam
 
z°ªam
;

486 
ngx_îr_t
 
îr
;

487 
ngx_poﬁ_t
 *
poﬁ
;

489 
wbôs
 = 
MAX_WBITS
;

490 
memÀvñ
 = 
MAX_MEM_LEVEL
 - 1;

492 (
ssize_t
Ë
Àn
 < ((1 << (
wbôs
 - 1)) - 262)) {

493 
wbôs
--;

494 
memÀvñ
--;

502 
size
 = 
Àn
 + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;

504 
	`ngx_memzîo
(&
z°ªam
, (
z_°ªam
));

506 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(256, 
log
);

507 i‡(
poﬁ
 =
NULL
) {

509  
Àn
;

512 
poﬁ
->
log
 =Üog;

514 
z°ªam
.
zÆloc
 = 
ngx_°ªam_log_gzù_Æloc
;

515 
z°ªam
.
z‰ì
 = 
ngx_°ªam_log_gzù_‰ì
;

516 
z°ªam
.
›aque
 = 
poﬁ
;

518 
out
 = 
	`ngx_≤Æloc
(
poﬁ
, 
size
);

519 i‡(
out
 =
NULL
) {

520 
d⁄e
;

523 
z°ªam
.
√xt_ö
 = 
buf
;

524 
z°ªam
.
avaû_ö
 = 
Àn
;

525 
z°ªam
.
√xt_out
 = 
out
;

526 
z°ªam
.
avaû_out
 = 
size
;

528 
rc
 = 
	`deÊ©eInô2
(&
z°ªam
, (Ë
Àvñ
, 
Z_DEFLATED
, 
wbôs
 + 16, 
memÀvñ
,

529 
Z_DEFAULT_STRATEGY
);

531 i‡(
rc
 !
Z_OK
) {

532 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eInô2(ËÁûed: %d", 
rc
);

533 
d⁄e
;

536 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_STREAM
, 
log
, 0,

538 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

539 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
);

541 
rc
 = 
	`deÊ©e
(&
z°ªam
, 
Z_FINISH
);

543 i‡(
rc
 !
Z_STREAM_END
) {

544 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

545 "deÊ©e(Z_FINISHËÁûed: %d", 
rc
);

546 
d⁄e
;

549 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_STREAM
, 
log
, 0,

551 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

552 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
,

553 
rc
);

555 
size
 -
z°ªam
.
avaû_out
;

557 
rc
 = 
	`deÊ©eEnd
(&
z°ªam
);

559 i‡(
rc
 !
Z_OK
) {

560 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eEnd(ËÁûed: %d", 
rc
);

561 
d⁄e
;

564 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
out
, 
size
);

566 i‡(
n
 !(
ssize_t
Ë
size
) {

567 
îr
 = (
n
 =-1Ë? 
ngx_î∫o
 : 0;

569 
	`ngx_de°roy_poﬁ
(
poﬁ
);

571 
	`ngx_£t_î∫o
(
îr
);

575 
d⁄e
:

577 
	`ngx_de°roy_poﬁ
(
poﬁ
);

580  
Àn
;

581 
	}
}

585 
	$ngx_°ªam_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

587 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

589 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
poﬁ
->
log
, 0,

590 "gzùáŒoc:Ç:%ud s:%ud", 
ôems
, 
size
);

592  
	`ngx_∑Œoc
(
poﬁ
, 
ôems
 * 
size
);

593 
	}
}

597 
	$ngx_°ªam_log_gzù_‰ì
(*
›aque
, *
addªss
)

600 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

602 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
poﬁ
->
log
, 0,

603 "gzù fªe: %p", 
addªss
);

605 
	}
}

611 
	$ngx_°ªam_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
)

613 
size_t
 
Àn
;

614 
ssize_t
 
n
;

615 
ngx_°ªam_log_buf_t
 *
buf„r
;

617 
buf„r
 = 
fûe
->
d©a
;

619 
Àn
 = 
buf„r
->
pos
 - buf„r->
°¨t
;

621 i‡(
Àn
 == 0) {

625 #i‡(
NGX_ZLIB
)

626 i‡(
buf„r
->
gzù
) {

627 
n
 = 
	`ngx_°ªam_log_gzù
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
, buf„r->
gzù
,

628 
log
);

630 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

633 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

636 i‡(
n
 == -1) {

637 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

638 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

639 
fûe
->
«me
.
d©a
);

641 } i‡((
size_t
Ë
n
 !
Àn
) {

642 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

643 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

644 
fûe
->
«me
.
d©a
, 
n
, 
Àn
);

647 
buf„r
->
pos
 = buf„r->
°¨t
;

649 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

650 
	`ngx_dñ_timî
(
buf„r
->
evít
);

652 
	}
}

656 
	$ngx_°ªam_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
)

658 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

661 
	`ngx_°ªam_log_Êush
(
ev
->
d©a
,Év->
log
);

662 
	}
}

665 
u_ch¨
 *

666 
	$ngx_°ªam_log_c›y_sh‹t
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

667 
ngx_°ªam_log_›_t
 *
›
)

669 
size_t
 
Àn
;

670 
uöçå_t
 
d©a
;

672 
Àn
 = 
›
->len;

673 
d©a
 = 
›
->data;

675 
Àn
--) {

676 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

677 
d©a
 >>= 8;

680  
buf
;

681 
	}
}

684 
u_ch¨
 *

685 
	$ngx_°ªam_log_c›y_l⁄g
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

686 
ngx_°ªam_log_›_t
 *
›
)

688  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

689 
	}
}

692 
ngx_öt_t


693 
	$ngx_°ªam_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_log_›_t
 *
›
,

694 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
esˇ≥
)

696 
ngx_öt_t
 
ödex
;

698 
ödex
 = 
	`ngx_°ªam_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

699 i‡(
ödex
 =
NGX_ERROR
) {

700  
NGX_ERROR
;

703 
›
->
Àn
 = 0;

705 
esˇ≥
) {

706 
NGX_STREAM_LOG_ESCAPE_JSON
:

707 
›
->
gëÀn
 = 
ngx_°ªam_log_js⁄_v¨übÀ_gëÀn
;

708 
›
->
run
 = 
ngx_°ªam_log_js⁄_v¨übÀ
;

711 
NGX_STREAM_LOG_ESCAPE_NONE
:

712 
›
->
gëÀn
 = 
ngx_°ªam_log_u√sˇ≥d_v¨übÀ_gëÀn
;

713 
›
->
run
 = 
ngx_°ªam_log_u√sˇ≥d_v¨übÀ
;

717 
›
->
gëÀn
 = 
ngx_°ªam_log_v¨übÀ_gëÀn
;

718 
›
->
run
 = 
ngx_°ªam_log_v¨übÀ
;

721 
›
->
d©a
 = 
ödex
;

723  
NGX_OK
;

724 
	}
}

727 
size_t


728 
	$ngx_°ªam_log_v¨übÀ_gëÀn
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
uöçå_t
 
d©a
)

730 
uöçå_t
 
Àn
;

731 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

733 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
d©a
);

735 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

739 
Àn
 = 
	`ngx_°ªam_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

741 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

743  
vÆue
->
Àn
 +Üen * 3;

744 
	}
}

747 
u_ch¨
 *

748 
	$ngx_°ªam_log_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

749 
ngx_°ªam_log_›_t
 *
›
)

751 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

753 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
›
->
d©a
);

755 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

756 *
buf
 = '-';

757  
buf
 + 1;

760 i‡(
vÆue
->
esˇ≥
 == 0) {

761  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

764  (
u_ch¨
 *Ë
	`ngx_°ªam_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

766 
	}
}

769 
uöçå_t


770 
	$ngx_°ªam_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

772 
ngx_uöt_t
 
n
;

773 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

775 
uöt32_t
 
esˇ≥
[] = {

794 i‡(
d°
 =
NULL
) {

798 
n
 = 0;

800 
size
) {

801 i‡(
esˇ≥
[*
§c
 >> 5] & (1U << (*src & 0x1f))) {

802 
n
++;

804 
§c
++;

805 
size
--;

808  (
uöçå_t
Ë
n
;

811 
size
) {

812 i‡(
esˇ≥
[*
§c
 >> 5] & (1U << (*src & 0x1f))) {

813 *
d°
++ = '\\';

814 *
d°
++ = 'x';

815 *
d°
++ = 
hex
[*
§c
 >> 4];

816 *
d°
++ = 
hex
[*
§c
 & 0xf];

817 
§c
++;

820 *
d°
++ = *
§c
++;

822 
size
--;

825  (
uöçå_t
Ë
d°
;

826 
	}
}

829 
size_t


830 
	$ngx_°ªam_log_js⁄_v¨übÀ_gëÀn
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
uöçå_t
 
d©a
)

832 
uöçå_t
 
Àn
;

833 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

835 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
d©a
);

837 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

841 
Àn
 = 
	`ngx_esˇ≥_js⁄
(
NULL
, 
vÆue
->
d©a
, value->len);

843 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

845  
vÆue
->
Àn
 +Üen;

846 
	}
}

849 
u_ch¨
 *

850 
	$ngx_°ªam_log_js⁄_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

851 
ngx_°ªam_log_›_t
 *
›
)

853 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

855 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
›
->
d©a
);

857 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

858  
buf
;

861 i‡(
vÆue
->
esˇ≥
 == 0) {

862  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

865  (
u_ch¨
 *Ë
	`ngx_esˇ≥_js⁄
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

867 
	}
}

870 
size_t


871 
	$ngx_°ªam_log_u√sˇ≥d_v¨übÀ_gëÀn
(
ngx_°ªam_£ssi⁄_t
 *
s
,

872 
uöçå_t
 
d©a
)

874 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

876 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
d©a
);

878 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

882 
vÆue
->
esˇ≥
 = 0;

884  
vÆue
->
Àn
;

885 
	}
}

888 
u_ch¨
 *

889 
	$ngx_°ªam_log_u√sˇ≥d_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
u_ch¨
 *
buf
,

890 
ngx_°ªam_log_›_t
 *
›
)

892 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

894 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
›
->
d©a
);

896 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

897  
buf
;

900  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

901 
	}
}

905 
	$ngx_°ªam_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

907 
ngx_°ªam_log_maö_c⁄f_t
 *
c⁄f
;

909 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_log_maö_c⁄f_t
));

910 i‡(
c⁄f
 =
NULL
) {

911  
NULL
;

914 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4,

915 (
ngx_°ªam_log_fmt_t
))

916 !
NGX_OK
)

918  
NULL
;

921  
c⁄f
;

922 
	}
}

926 
	$ngx_°ªam_log_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

928 
ngx_°ªam_log_§v_c⁄f_t
 *
c⁄f
;

930 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_log_§v_c⁄f_t
));

931 i‡(
c⁄f
 =
NULL
) {

932  
NULL
;

935 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

937  
c⁄f
;

938 
	}
}

942 
	$ngx_°ªam_log_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

944 
ngx_°ªam_log_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

945 
ngx_°ªam_log_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

947 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

949 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

950 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

951 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

953 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

954 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

958 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

959  
NGX_CONF_OK
;

962 
c⁄f
->
logs
 = 
¥ev
->logs;

963 
c⁄f
->
off
 = 
¥ev
->off;

965  
NGX_CONF_OK
;

966 
	}
}

970 
	$ngx_°ªam_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

972 
ngx_°ªam_log_§v_c⁄f_t
 *
lscf
 = 
c⁄f
;

974 
ssize_t
 
size
;

975 
ngx_öt_t
 
gzù
;

976 
ngx_uöt_t
 
i
, 
n
;

977 
ngx_m£c_t
 
Êush
;

978 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

979 
ngx_°ªam_log_t
 *
log
;

980 
ngx_sy¶og_≥î_t
 *
≥î
;

981 
ngx_°ªam_log_buf_t
 *
buf„r
;

982 
ngx_°ªam_log_fmt_t
 *
fmt
;

983 
ngx_°ªam_s¸ùt_compûe_t
 
sc
;

984 
ngx_°ªam_log_maö_c⁄f_t
 *
lmcf
;

985 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

987 
vÆue
 = 
cf
->
¨gs
->
ñts
;

989 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

990 
lscf
->
off
 = 1;

991 i‡(
cf
->
¨gs
->
√…s
 == 2) {

992  
NGX_CONF_OK
;

995 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

996 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

997  
NGX_CONF_ERROR
;

1000 i‡(
lscf
->
logs
 =
NULL
) {

1001 
lscf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_°ªam_log_t
));

1002 i‡(
lscf
->
logs
 =
NULL
) {

1003  
NGX_CONF_ERROR
;

1007 
lmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_log_moduÀ
);

1009 
log
 = 
	`ngx_¨øy_push
(
lscf
->
logs
);

1010 i‡(
log
 =
NULL
) {

1011  
NGX_CONF_ERROR
;

1014 
	`ngx_memzîo
(
log
, (
ngx_°ªam_log_t
));

1017 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "syslog:", 7) == 0) {

1019 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_sy¶og_≥î_t
));

1020 i‡(
≥î
 =
NULL
) {

1021  
NGX_CONF_ERROR
;

1024 i‡(
	`ngx_sy¶og_¥o˚ss_c⁄f
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

1025  
NGX_CONF_ERROR
;

1028 
log
->
sy¶og_≥î
 = 
≥î
;

1030 
¥o˚ss_f‹m©s
;

1033 
n
 = 
	`ngx_°ªam_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1035 i‡(
n
 == 0) {

1036 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

1037 i‡(
log
->
fûe
 =
NULL
) {

1038  
NGX_CONF_ERROR
;

1042 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

1043  
NGX_CONF_ERROR
;

1046 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_log_s¸ùt_t
));

1047 i‡(
log
->
s¸ùt
 =
NULL
) {

1048  
NGX_CONF_ERROR
;

1051 
	`ngx_memzîo
(&
sc
, (
ngx_°ªam_s¸ùt_compûe_t
));

1053 
sc
.
cf
 = cf;

1054 
sc
.
sour˚
 = &
vÆue
[1];

1055 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

1056 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

1057 
sc
.
v¨übÀs
 = 
n
;

1058 
sc
.
com∂ëe_Àngths
 = 1;

1059 
sc
.
com∂ëe_vÆues
 = 1;

1061 i‡(
	`ngx_°ªam_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1062  
NGX_CONF_ERROR
;

1066 
¥o˚ss_f‹m©s
:

1068 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

1069 
«me
 = 
vÆue
[2];

1072 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1074  
NGX_CONF_ERROR
;

1077 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1078 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1079 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

1080 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

1082 
log
->
f‹m©
 = &
fmt
[
i
];

1087 i‡(
log
->
f‹m©
 =
NULL
) {

1088 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1089 "unknow¿log f‹m© \"%V\"", &
«me
);

1090  
NGX_CONF_ERROR
;

1093 
size
 = 0;

1094 
Êush
 = 0;

1095 
gzù
 = 0;

1097 
i
 = 3; i < 
cf
->
¨gs
->
√…s
; i++) {

1099 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "buffer=", 7) == 0) {

1100 
s
.
Àn
 = 
vÆue
[
i
].len - 7;

1101 
s
.
d©a
 = 
vÆue
[
i
].data + 7;

1103 
size
 = 
	`ngx_∑r£_size
(&
s
);

1105 i‡(
size
 =
NGX_ERROR
 || size == 0) {

1106 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1107 "övÆid buf„∏sizê\"%V\"", &
s
);

1108  
NGX_CONF_ERROR
;

1114 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "flush=", 6) == 0) {

1115 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1116 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1118 
Êush
 = 
	`ngx_∑r£_time
(&
s
, 0);

1120 i‡(
Êush
 =(
ngx_m£c_t
Ë
NGX_ERROR
 || flush == 0) {

1121 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1122 "övÆid flushÅimê\"%V\"", &
s
);

1123  
NGX_CONF_ERROR
;

1129 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "gzip", 4) == 0

1130 && (
vÆue
[
i
].
Àn
 =4 || vÆue[i].
d©a
[4] == '='))

1132 #i‡(
NGX_ZLIB
)

1133 i‡(
size
 == 0) {

1134 
size
 = 64 * 1024;

1137 i‡(
vÆue
[
i
].
Àn
 == 4) {

1138 
gzù
 = 
Z_BEST_SPEED
;

1142 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

1143 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

1145 
gzù
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

1147 i‡(
gzù
 < 1 || gzip > 9) {

1148 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1149 "övÆid com¥essi⁄Üevñ \"%V\"", &
s
);

1150  
NGX_CONF_ERROR
;

1156 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1158  
NGX_CONF_ERROR
;

1162 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "if=", 3) == 0) {

1163 
s
.
Àn
 = 
vÆue
[
i
].len - 3;

1164 
s
.
d©a
 = 
vÆue
[
i
].data + 3;

1166 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

1168 
ccv
.
cf
 = cf;

1169 
ccv
.
vÆue
 = &
s
;

1170 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1171 (
ngx_°ªam_com∂ex_vÆue_t
));

1172 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

1173  
NGX_CONF_ERROR
;

1176 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1177  
NGX_CONF_ERROR
;

1180 
log
->
fûãr
 = 
ccv
.
com∂ex_vÆue
;

1185 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1186 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1187  
NGX_CONF_ERROR
;

1190 i‡(
Êush
 && 
size
 == 0) {

1191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1193 &
vÆue
[1]);

1194  
NGX_CONF_ERROR
;

1197 i‡(
size
) {

1199 i‡(
log
->
s¸ùt
) {

1200 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1202  
NGX_CONF_ERROR
;

1205 i‡(
log
->
sy¶og_≥î
) {

1206 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1208  
NGX_CONF_ERROR
;

1211 i‡(
log
->
fûe
->
d©a
) {

1212 
buf„r
 = 
log
->
fûe
->
d©a
;

1214 i‡(
buf„r
->
œ°
 - buf„r->
°¨t
 !
size


1215 || 
buf„r
->
Êush
 != flush

1216 || 
buf„r
->
gzù
 != gzip)

1218 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1221 &
vÆue
[1]);

1222  
NGX_CONF_ERROR
;

1225  
NGX_CONF_OK
;

1228 
buf„r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_log_buf_t
));

1229 i‡(
buf„r
 =
NULL
) {

1230  
NGX_CONF_ERROR
;

1233 
buf„r
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

1234 i‡(
buf„r
->
°¨t
 =
NULL
) {

1235  
NGX_CONF_ERROR
;

1238 
buf„r
->
pos
 = buf„r->
°¨t
;

1239 
buf„r
->
œ°
 = buf„r->
°¨t
 + 
size
;

1241 i‡(
Êush
) {

1242 
buf„r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1243 i‡(
buf„r
->
evít
 =
NULL
) {

1244  
NGX_CONF_ERROR
;

1247 
buf„r
->
evít
->
d©a
 = 
log
->
fûe
;

1248 
buf„r
->
evít
->
h™dÀr
 = 
ngx_°ªam_log_Êush_h™dÀr
;

1249 
buf„r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1250 
buf„r
->
evít
->
ˇn˚œbÀ
 = 1;

1252 
buf„r
->
Êush
 = flush;

1255 
buf„r
->
gzù
 = gzip;

1257 
log
->
fûe
->
Êush
 = 
ngx_°ªam_log_Êush
;

1258 
log
->
fûe
->
d©a
 = 
buf„r
;

1261  
NGX_CONF_OK
;

1262 
	}
}

1266 
	$ngx_°ªam_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1268 
ngx_°ªam_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1270 
ngx_°r_t
 *
vÆue
;

1271 
ngx_uöt_t
 
i
;

1272 
ngx_°ªam_log_fmt_t
 *
fmt
;

1274 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1276 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1277 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1278 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1279 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1281 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1283 &
vÆue
[1]);

1284  
NGX_CONF_ERROR
;

1288 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1289 i‡(
fmt
 =
NULL
) {

1290  
NGX_CONF_ERROR
;

1293 
fmt
->
«me
 = 
vÆue
[1];

1295 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1296 i‡(
fmt
->
Êushes
 =
NULL
) {

1297  
NGX_CONF_ERROR
;

1300 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_°ªam_log_›_t
));

1301 i‡(
fmt
->
›s
 =
NULL
) {

1302  
NGX_CONF_ERROR
;

1305  
	`ngx_°ªam_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
,

1306 
cf
->
¨gs
, 2);

1307 
	}
}

1311 
	$ngx_°ªam_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1312 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1314 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1315 
size_t
 
i
, 
Àn
;

1316 
ngx_°r_t
 *
vÆue
, 
v¨
;

1317 
ngx_öt_t
 *
Êush
;

1318 
ngx_uöt_t
 
bøckë
, 
esˇ≥
;

1319 
ngx_°ªam_log_›_t
 *
›
;

1321 
esˇ≥
 = 
NGX_STREAM_LOG_ESCAPE_DEFAULT
;

1322 
vÆue
 = 
¨gs
->
ñts
;

1324 i‡(
s
 < 
¨gs
->
√…s
 && 
	`ngx_°∫cmp
(
vÆue
[s].
d©a
, "escape=", 7) == 0) {

1325 
d©a
 = 
vÆue
[
s
].data + 7;

1327 i‡(
	`ngx_°rcmp
(
d©a
, "json") == 0) {

1328 
esˇ≥
 = 
NGX_STREAM_LOG_ESCAPE_JSON
;

1330 } i‡(
	`ngx_°rcmp
(
d©a
, "none") == 0) {

1331 
esˇ≥
 = 
NGX_STREAM_LOG_ESCAPE_NONE
;

1333 } i‡(
	`ngx_°rcmp
(
d©a
, "default") != 0) {

1334 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1335 "unknow¿log f‹m©Ésˇpög \"%s\"", 
d©a
);

1336  
NGX_CONF_ERROR
;

1339 
s
++;

1342  ; 
s
 < 
¨gs
->
√…s
; s++) {

1344 
i
 = 0;

1346 
i
 < 
vÆue
[
s
].
Àn
) {

1348 
›
 = 
	`ngx_¨øy_push
(
›s
);

1349 i‡(
›
 =
NULL
) {

1350  
NGX_CONF_ERROR
;

1353 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1355 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1357 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1358 
övÆid
;

1361 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1362 
bøckë
 = 1;

1364 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1365 
övÆid
;

1368 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1371 
bøckë
 = 0;

1372 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1375 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1376 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1378 i‡(
ch
 ='}' && 
bøckë
) {

1379 
i
++;

1380 
bøckë
 = 0;

1384 i‡((
ch
 >= 'A' && ch <= 'Z')

1385 || (
ch
 >= 'a' && ch <= 'z')

1386 || (
ch
 >= '0' && ch <= '9')

1387 || 
ch
 == '_')

1395 i‡(
bøckë
) {

1396 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1398 "v¨übÀ i†missög", &
v¨
);

1399  
NGX_CONF_ERROR
;

1402 i‡(
v¨
.
Àn
 == 0) {

1403 
övÆid
;

1406 i‡(
	`ngx_°ªam_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
, 
esˇ≥
)

1407 !
NGX_OK
)

1409  
NGX_CONF_ERROR
;

1412 i‡(
Êushes
) {

1414 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1415 i‡(
Êush
 =
NULL
) {

1416  
NGX_CONF_ERROR
;

1419 *
Êush
 = 
›
->
d©a
;

1425 
i
++;

1427 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1428 
i
++;

1431 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1433 i‡(
Àn
) {

1435 
›
->
Àn
 =Üen;

1436 
›
->
gëÀn
 = 
NULL
;

1438 i‡(
Àn
 <(
uöçå_t
)) {

1439 
›
->
run
 = 
ngx_°ªam_log_c›y_sh‹t
;

1440 
›
->
d©a
 = 0;

1442 
Àn
--) {

1443 
›
->
d©a
 <<= 8;

1444 
›
->
d©a
 |d©a[
Àn
];

1448 
›
->
run
 = 
ngx_°ªam_log_c›y_l⁄g
;

1450 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1451 i‡(
p
 =
NULL
) {

1452  
NGX_CONF_ERROR
;

1455 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1456 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1462  
NGX_CONF_OK
;

1464 
övÆid
:

1466 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1468  
NGX_CONF_ERROR
;

1469 
	}
}

1473 
	$ngx_°ªam_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1475 
ngx_°ªam_log_§v_c⁄f_t
 *
lscf
 = 
c⁄f
;

1477 
time_t
 
öa˘ive
, 
vÆid
;

1478 
ngx_°r_t
 *
vÆue
, 
s
;

1479 
ngx_öt_t
 
max
, 
mö_u£s
;

1480 
ngx_uöt_t
 
i
;

1482 i‡(
lscf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1486 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1488 
max
 = 0;

1489 
öa˘ive
 = 10;

1490 
vÆid
 = 60;

1491 
mö_u£s
 = 1;

1493 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1495 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1497 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1498 i‡(
max
 =
NGX_ERROR
) {

1499 
Áûed
;

1505 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1507 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1508 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1510 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1511 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1512 
Áûed
;

1518 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1520 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1521 i‡(
mö_u£s
 =
NGX_ERROR
) {

1522 
Áûed
;

1528 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1530 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1531 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1533 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1534 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1535 
Áûed
;

1541 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1543 
lscf
->
›í_fûe_ˇche
 = 
NULL
;

1548 
Áûed
:

1550 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1552 &
vÆue
[
i
]);

1553  
NGX_CONF_ERROR
;

1556 i‡(
lscf
->
›í_fûe_ˇche
 =
NULL
) {

1557  
NGX_CONF_OK
;

1560 i‡(
max
 == 0) {

1561 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1563  
NGX_CONF_ERROR
;

1566 
lscf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1568 i‡(
lscf
->
›í_fûe_ˇche
) {

1570 
lscf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1571 
lscf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1573  
NGX_CONF_OK
;

1576  
NGX_CONF_ERROR
;

1577 
	}
}

1580 
ngx_öt_t


1581 
	$ngx_°ªam_log_öô
(
ngx_c⁄f_t
 *
cf
)

1583 
ngx_°ªam_h™dÀr_±
 *
h
;

1584 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

1586 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

1588 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_STREAM_LOG_PHASE
].
h™dÀrs
);

1589 i‡(
h
 =
NULL
) {

1590  
NGX_ERROR
;

1593 *
h
 = 
ngx_°ªam_log_h™dÀr
;

1595  
NGX_OK
;

1596 
	}
}

	@src/stream/ngx_stream_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_°ªam_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 #i‡(
NGX_PCRE
)

24 
ngx_¨øy_t
 
	mªgexes
;

27 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

28 
ngx_c⁄f_t
 *
	mcf
;

29 
	mho°«mes
:1;

30 
	mno_ˇchóbÀ
:1;

31 } 
	tngx_°ªam_m≠_c⁄f_˘x_t
;

35 
ngx_°ªam_m≠_t
 
	mm≠
;

36 
ngx_°ªam_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_°ªam_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_°ªam_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_°ªam_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_°ªam_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_°ªam_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

50 
ngx_comm™d_t
 
	gngx_°ªam_m≠_comm™ds
[] = {

52 { 
ngx_°rög
("map"),

53 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

54 
ngx_°ªam_m≠_block
,

55 
NGX_STREAM_MAIN_CONF_OFFSET
,

57 
NULL
 },

59 { 
ngx_°rög
("map_hash_max_size"),

60 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE1
,

61 
ngx_c⁄f_£t_num_¶Ÿ
,

62 
NGX_STREAM_MAIN_CONF_OFFSET
,

63 
off£tof
(
ngx_°ªam_m≠_c⁄f_t
, 
hash_max_size
),

64 
NULL
 },

66 { 
ngx_°rög
("map_hash_bucket_size"),

67 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_TAKE1
,

68 
ngx_c⁄f_£t_num_¶Ÿ
,

69 
NGX_STREAM_MAIN_CONF_OFFSET
,

70 
off£tof
(
ngx_°ªam_m≠_c⁄f_t
, 
hash_buckë_size
),

71 
NULL
 },

73 
ngx_nuŒ_comm™d


77 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_m≠_moduÀ_˘x
 = {

78 
NULL
,

79 
NULL
,

81 
ngx_°ªam_m≠_¸óã_c⁄f
,

82 
NULL
,

84 
NULL
,

85 
NULL


89 
ngx_moduÀ_t
 
	gngx_°ªam_m≠_moduÀ
 = {

90 
NGX_MODULE_V1
,

91 &
ngx_°ªam_m≠_moduÀ_˘x
,

92 
ngx_°ªam_m≠_comm™ds
,

93 
NGX_STREAM_MODULE
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NGX_MODULE_V1_PADDING


105 
ngx_öt_t


106 
	$ngx_°ªam_m≠_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
,

107 
uöçå_t
 
d©a
)

109 
ngx_°ªam_m≠_˘x_t
 *
m≠
 = (ngx_°ªam_m≠_˘x_à*Ë
d©a
;

111 
ngx_°r_t
 
vÆ
, 
°r
;

112 
ngx_°ªam_com∂ex_vÆue_t
 *
cv
;

113 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

115 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

118 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

119  
NGX_ERROR
;

122 i‡(
m≠
->
ho°«mes
 && 
vÆ
.
Àn
 > 0 && vÆ.
d©a
[val.len - 1] == '.') {

123 
vÆ
.
Àn
--;

126 
vÆue
 = 
	`ngx_°ªam_m≠_föd
(
s
, &
m≠
->m≠, &
vÆ
);

128 i‡(
vÆue
 =
NULL
) {

129 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

132 i‡(!
vÆue
->
vÆid
) {

133 
cv
 = (
ngx_°ªam_com∂ex_vÆue_t
 *Ë
vÆue
->
d©a
;

135 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, 
cv
, &
°r
Ë!
NGX_OK
) {

136  
NGX_ERROR
;

139 
v
->
vÆid
 = 1;

140 
v
->
no_ˇchóbÀ
 = 0;

141 
v
->
nŸ_found
 = 0;

142 
v
->
Àn
 = 
°r
.len;

143 
v
->
d©a
 = 
°r
.data;

146 *
v
 = *
vÆue
;

149 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

150 "°ªam m≠: \"%V\" \"%v\"", &
vÆ
, 
v
);

152  
NGX_OK
;

153 
	}
}

157 
	$ngx_°ªam_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

159 
ngx_°ªam_m≠_c⁄f_t
 *
mcf
;

161 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_m≠_c⁄f_t
));

162 i‡(
mcf
 =
NULL
) {

163  
NULL
;

166 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

167 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

169  
mcf
;

170 
	}
}

174 
	$ngx_°ªam_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

176 
ngx_°ªam_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

178 *
rv
;

179 
ngx_°r_t
 *
vÆue
, 
«me
;

180 
ngx_c⁄f_t
 
ßve
;

181 
ngx_poﬁ_t
 *
poﬁ
;

182 
ngx_hash_öô_t
 
hash
;

183 
ngx_°ªam_m≠_˘x_t
 *
m≠
;

184 
ngx_°ªam_v¨übÀ_t
 *
v¨
;

185 
ngx_°ªam_m≠_c⁄f_˘x_t
 
˘x
;

186 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

188 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

189 
mcf
->
hash_max_size
 = 2048;

192 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

193 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

196 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

197 
ngx_ˇchñöe_size
);

200 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_m≠_˘x_t
));

201 i‡(
m≠
 =
NULL
) {

202  
NGX_CONF_ERROR
;

205 
vÆue
 = 
cf
->
¨gs
->
ñts
;

207 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

209 
ccv
.
cf
 = cf;

210 
ccv
.
vÆue
 = &value[1];

211 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

213 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

214  
NGX_CONF_ERROR
;

217 
«me
 = 
vÆue
[2];

219 i‡(
«me
.
d©a
[0] != '$') {

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

222  
NGX_CONF_ERROR
;

225 
«me
.
Àn
--;

226 
«me
.
d©a
++;

228 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
«me
, 
NGX_STREAM_VAR_CHANGEABLE
);

229 i‡(
v¨
 =
NULL
) {

230  
NGX_CONF_ERROR
;

233 
v¨
->
gë_h™dÀr
 = 
ngx_°ªam_m≠_v¨übÀ
;

234 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

236 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

237 i‡(
poﬁ
 =
NULL
) {

238  
NGX_CONF_ERROR
;

241 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

242 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

244 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

245 
	`ngx_de°roy_poﬁ
(
poﬁ
);

246  
NGX_CONF_ERROR
;

249 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

250 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

251 
	`ngx_de°roy_poﬁ
(
poﬁ
);

252  
NGX_CONF_ERROR
;

255 #i‡(
NGX_PCRE
)

256 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2,

257 (
ngx_°ªam_m≠_ªgex_t
))

258 !
NGX_OK
)

260 
	`ngx_de°roy_poﬁ
(
poﬁ
);

261  
NGX_CONF_ERROR
;

265 
˘x
.
deÁu…_vÆue
 = 
NULL
;

266 
˘x
.
cf
 = &
ßve
;

267 
˘x
.
ho°«mes
 = 0;

268 
˘x
.
no_ˇchóbÀ
 = 0;

270 
ßve
 = *
cf
;

271 
cf
->
poﬁ
 =Öool;

272 
cf
->
˘x
 = &ctx;

273 
cf
->
h™dÀr
 = 
ngx_°ªam_m≠
;

274 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
ßve
;

280 i‡(
rv
 !
NGX_CONF_OK
) {

281 
	`ngx_de°roy_poﬁ
(
poﬁ
);

282  
rv
;

285 i‡(
˘x
.
no_ˇchóbÀ
) {

286 
v¨
->
Êags
 |
NGX_STREAM_VAR_NOCACHEABLE
;

289 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

290 &
ngx_°ªam_v¨übÀ_nuŒ_vÆue
;

292 
m≠
->
ho°«mes
 = 
˘x
.hostnames;

294 
hash
.
key
 = 
ngx_hash_key_lc
;

295 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

296 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

297 
hash
.
«me
 = "map_hash";

298 
hash
.
poﬁ
 = 
cf
->pool;

300 i‡(
˘x
.
keys
.keys.
√…s
) {

301 
hash
.hash = &
m≠
->map.hash.hash;

302 
hash
.
ãmp_poﬁ
 = 
NULL
;

304 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

305 !
NGX_OK
)

307 
	`ngx_de°roy_poﬁ
(
poﬁ
);

308  
NGX_CONF_ERROR
;

312 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

314 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

315 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

316 (
ngx_hash_key_t
), 
ngx_°ªam_m≠_cmp_dns_wûdˇrds
);

318 
hash
.hash = 
NULL
;

319 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

321 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

322 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

323 !
NGX_OK
)

325 
	`ngx_de°roy_poﬁ
(
poﬁ
);

326  
NGX_CONF_ERROR
;

329 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

332 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

334 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

335 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

336 (
ngx_hash_key_t
), 
ngx_°ªam_m≠_cmp_dns_wûdˇrds
);

338 
hash
.hash = 
NULL
;

339 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

341 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

342 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

343 !
NGX_OK
)

345 
	`ngx_de°roy_poﬁ
(
poﬁ
);

346  
NGX_CONF_ERROR
;

349 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

352 #i‡(
NGX_PCRE
)

354 i‡(
˘x
.
ªgexes
.
√…s
) {

355 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

356 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

361 
	`ngx_de°roy_poﬁ
(
poﬁ
);

363  
rv
;

364 
	}
}

367 
ngx_libc_cde˛


368 
	$ngx_°ªam_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

370 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

372 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

373 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

375  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

376 
	}
}

380 
	$ngx_°ªam_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

382 
u_ch¨
 *
d©a
;

383 
size_t
 
Àn
;

384 
ngx_öt_t
 
rv
;

385 
ngx_°r_t
 *
vÆue
, 
v
;

386 
ngx_uöt_t
 
i
, 
key
;

387 
ngx_°ªam_m≠_c⁄f_˘x_t
 *
˘x
;

388 
ngx_°ªam_com∂ex_vÆue_t
 
cv
, *
cvp
;

389 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

390 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

392 
˘x
 = 
cf
->ctx;

394 
vÆue
 = 
cf
->
¨gs
->
ñts
;

396 i‡(
cf
->
¨gs
->
√…s
 == 1

397 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

399 
˘x
->
ho°«mes
 = 1;

400  
NGX_CONF_OK
;

403 i‡(
cf
->
¨gs
->
√…s
 == 1

404 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "volatile") == 0)

406 
˘x
->
no_ˇchóbÀ
 = 1;

407  
NGX_CONF_OK
;

410 i‡(
cf
->
¨gs
->
√…s
 != 2) {

411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

413  
NGX_CONF_ERROR
;

416 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

417  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

420 
key
 = 0;

422 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

423 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

426 
key
 %
˘x
->
keys
.
hsize
;

428 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

430 i‡(
vp
) {

431 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

433 i‡(
vp
[
i
]->
vÆid
) {

434 
d©a
 = 
vp
[
i
]->data;

435 
Àn
 = 
vp
[
i
]->len;

438 
cvp
 = (
ngx_°ªam_com∂ex_vÆue_t
 *Ë
vp
[
i
]->
d©a
;

439 
d©a
 = 
cvp
->
vÆue
.data;

440 
Àn
 = 
cvp
->
vÆue
.len;

443 i‡(
vÆue
[1].
Àn
 !=Üen) {

447 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, d©a, 
Àn
) == 0) {

448 
v¨
 = 
vp
[
i
];

449 
found
;

454 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

455 (
ngx_°ªam_v¨übÀ_vÆue_t
 *))

456 !
NGX_OK
)

458  
NGX_CONF_ERROR
;

462 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_°ªam_v¨übÀ_vÆue_t
));

463 i‡(
v¨
 =
NULL
) {

464  
NGX_CONF_ERROR
;

467 
v
.
Àn
 = 
vÆue
[1].len;

468 
v
.
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

469 i‡(
v
.
d©a
 =
NULL
) {

470  
NGX_CONF_ERROR
;

473 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

475 
ccv
.
cf
 = 
˘x
->cf;

476 
ccv
.
vÆue
 = &
v
;

477 
ccv
.
com∂ex_vÆue
 = &
cv
;

479 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

480  
NGX_CONF_ERROR
;

483 i‡(
cv
.
Àngths
 !
NULL
) {

484 
cvp
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_°ªam_com∂ex_vÆue_t
));

485 i‡(
cvp
 =
NULL
) {

486  
NGX_CONF_ERROR
;

489 *
cvp
 = 
cv
;

491 
v¨
->
Àn
 = 0;

492 
v¨
->
d©a
 = (
u_ch¨
 *Ë
cvp
;

493 
v¨
->
vÆid
 = 0;

496 
v¨
->
Àn
 = 
v
.len;

497 
v¨
->
d©a
 = 
v
.data;

498 
v¨
->
vÆid
 = 1;

501 
v¨
->
no_ˇchóbÀ
 = 0;

502 
v¨
->
nŸ_found
 = 0;

504 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

505 i‡(
vp
 =
NULL
) {

506  
NGX_CONF_ERROR
;

509 *
vp
 = 
v¨
;

511 
found
:

513 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

515 i‡(
˘x
->
deÁu…_vÆue
) {

516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

518  
NGX_CONF_ERROR
;

521 
˘x
->
deÁu…_vÆue
 = 
v¨
;

523  
NGX_CONF_OK
;

526 #i‡(
NGX_PCRE
)

528 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

529 
ngx_ªgex_compûe_t
 
rc
;

530 
ngx_°ªam_m≠_ªgex_t
 *
ªgex
;

531 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

533 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

534 i‡(
ªgex
 =
NULL
) {

535  
NGX_CONF_ERROR
;

538 
vÆue
[0].
Àn
--;

539 
vÆue
[0].
d©a
++;

541 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

543 i‡(
vÆue
[0].
d©a
[0] == '*') {

544 
vÆue
[0].
Àn
--;

545 
vÆue
[0].
d©a
++;

546 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

549 
rc
.
∑âîn
 = 
vÆue
[0];

550 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

551 
rc
.
îr
.
d©a
 = 
îr°r
;

553 
ªgex
->ªgex = 
	`ngx_°ªam_ªgex_compûe
(
˘x
->
cf
, &
rc
);

554 i‡(
ªgex
->ªgex =
NULL
) {

555  
NGX_CONF_ERROR
;

558 
ªgex
->
vÆue
 = 
v¨
;

560  
NGX_CONF_OK
;

565 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

566 
vÆue
[0].
Àn
--;

567 
vÆue
[0].
d©a
++;

570 
rv
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

571 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

573 i‡(
rv
 =
NGX_OK
) {

574  
NGX_CONF_OK
;

577 i‡(
rv
 =
NGX_DECLINED
) {

578 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

579 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

582 i‡(
rv
 =
NGX_BUSY
) {

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

587  
NGX_CONF_ERROR
;

588 
	}
}

	@src/stream/ngx_stream_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ngx_addr_t
 *
	maddr
;

15 
ngx_°ªam_com∂ex_vÆue_t
 *
	mvÆue
;

16 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

17 
ngx_uöt_t
 
	må™•¨ít
;

19 } 
	tngx_°ªam_up°ªam_loˇl_t
;

23 
ngx_m£c_t
 
	mc⁄√˘_timeout
;

24 
ngx_m£c_t
 
	mtimeout
;

25 
ngx_m£c_t
 
	m√xt_up°ªam_timeout
;

26 
size_t
 
	mbuf„r_size
;

27 
size_t
 
	mu∂ﬂd_øã
;

28 
size_t
 
	mdow∆ﬂd_øã
;

29 
ngx_uöt_t
 
	mª•⁄£s
;

30 
ngx_uöt_t
 
	m√xt_up°ªam_åõs
;

31 
ngx_Êag_t
 
	m√xt_up°ªam
;

32 
ngx_Êag_t
 
	m¥oxy_¥Ÿocﬁ
;

33 
ngx_°ªam_up°ªam_loˇl_t
 *
	mloˇl
;

35 #i‡(
NGX_STREAM_SSL
)

36 
ngx_Êag_t
 
	ms¶_íabÀ
;

37 
ngx_Êag_t
 
	ms¶_£ssi⁄_ªu£
;

38 
ngx_uöt_t
 
	ms¶_¥Ÿocﬁs
;

39 
ngx_°r_t
 
	ms¶_cùhîs
;

40 
ngx_°ªam_com∂ex_vÆue_t
 *
	ms¶_«me
;

41 
ngx_Êag_t
 
	ms¶_£rvî_«me
;

43 
ngx_Êag_t
 
	ms¶_vîify
;

44 
ngx_uöt_t
 
	ms¶_vîify_dïth
;

45 
ngx_°r_t
 
	ms¶_åu°ed_˚πifiˇã
;

46 
ngx_°r_t
 
	ms¶_¸l
;

47 
ngx_°r_t
 
	ms¶_˚πifiˇã
;

48 
ngx_°r_t
 
	ms¶_˚πifiˇã_key
;

49 
ngx_¨øy_t
 *
	ms¶_∑ssw‹ds
;

51 
ngx_s¶_t
 *
	ms¶
;

54 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
	mup°ªam
;

55 
ngx_°ªam_com∂ex_vÆue_t
 *
	mup°ªam_vÆue
;

56 } 
	tngx_°ªam_¥oxy_§v_c⁄f_t
;

59 
ngx_°ªam_¥oxy_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
);

60 
ngx_öt_t
 
ngx_°ªam_¥oxy_evÆ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

61 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
);

62 
ngx_öt_t
 
ngx_°ªam_¥oxy_£t_loˇl
(
ngx_°ªam_£ssi⁄_t
 *
s
,

63 
ngx_°ªam_up°ªam_t
 *
u
, 
ngx_°ªam_up°ªam_loˇl_t
 *
loˇl
);

64 
ngx_°ªam_¥oxy_c⁄√˘
(
ngx_°ªam_£ssi⁄_t
 *
s
);

65 
ngx_°ªam_¥oxy_öô_up°ªam
(
ngx_°ªam_£ssi⁄_t
 *
s
);

66 
ngx_°ªam_¥oxy_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

67 
ngx_°ªam_¥oxy_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
);

68 
ngx_°ªam_¥oxy_down°ªam_h™dÀr
(
ngx_evít_t
 *
ev
);

69 
ngx_°ªam_¥oxy_¥o˚ss_c⁄√˘i⁄
(
ngx_evít_t
 *
ev
,

70 
ngx_uöt_t
 
‰om_up°ªam
);

71 
ngx_°ªam_¥oxy_c⁄√˘_h™dÀr
(
ngx_evít_t
 *
ev
);

72 
ngx_öt_t
 
ngx_°ªam_¥oxy_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

73 
ngx_°ªam_¥oxy_¥o˚ss
(
ngx_°ªam_£ssi⁄_t
 *
s
,

74 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
);

75 
ngx_°ªam_¥oxy_√xt_up°ªam
(
ngx_°ªam_£ssi⁄_t
 *
s
);

76 
ngx_°ªam_¥oxy_föÆize
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
rc
);

77 
u_ch¨
 *
ngx_°ªam_¥oxy_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
,

78 
size_t
 
Àn
);

80 *
ngx_°ªam_¥oxy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

81 *
ngx_°ªam_¥oxy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

82 *
chûd
);

83 *
ngx_°ªam_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

84 *
c⁄f
);

85 *
ngx_°ªam_¥oxy_böd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

86 *
c⁄f
);

88 #i‡(
NGX_STREAM_SSL
)

90 
ngx_öt_t
 
ngx_°ªam_¥oxy_£nd_¥oxy_¥Ÿocﬁ
(
ngx_°ªam_£ssi⁄_t
 *
s
);

91 *
ngx_°ªam_¥oxy_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
,

92 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

93 
ngx_°ªam_¥oxy_s¶_öô_c⁄√˘i⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
);

94 
ngx_°ªam_¥oxy_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
pc
);

95 
ngx_°ªam_¥oxy_s¶_ßve_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

96 
ngx_öt_t
 
ngx_°ªam_¥oxy_s¶_«me
(
ngx_°ªam_£ssi⁄_t
 *
s
);

97 
ngx_öt_t
 
ngx_°ªam_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

98 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
);

101 
ngx_c⁄f_bômask_t
 
	gngx_°ªam_¥oxy_s¶_¥Ÿocﬁs
[] = {

102 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

103 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

104 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

105 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

106 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

107 { 
ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

108 { 
ngx_nuŒ_°rög
, 0 }

114 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_¥oxy_down°ªam_buf„r
 = {

115 
ngx_c⁄f_dïªˇãd
, "proxy_downstream_buffer", "proxy_buffer_size"

118 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_¥oxy_up°ªam_buf„r
 = {

119 
ngx_c⁄f_dïªˇãd
, "proxy_upstream_buffer", "proxy_buffer_size"

123 
ngx_comm™d_t
 
	gngx_°ªam_¥oxy_comm™ds
[] = {

125 { 
ngx_°rög
("proxy_pass"),

126 
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

127 
ngx_°ªam_¥oxy_∑ss
,

128 
NGX_STREAM_SRV_CONF_OFFSET
,

130 
NULL
 },

132 { 
ngx_°rög
("proxy_bind"),

133 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE12
,

134 
ngx_°ªam_¥oxy_böd
,

135 
NGX_STREAM_SRV_CONF_OFFSET
,

137 
NULL
 },

139 { 
ngx_°rög
("proxy_connect_timeout"),

140 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

141 
ngx_c⁄f_£t_m£c_¶Ÿ
,

142 
NGX_STREAM_SRV_CONF_OFFSET
,

143 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
c⁄√˘_timeout
),

144 
NULL
 },

146 { 
ngx_°rög
("proxy_timeout"),

147 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

148 
ngx_c⁄f_£t_m£c_¶Ÿ
,

149 
NGX_STREAM_SRV_CONF_OFFSET
,

150 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
timeout
),

151 
NULL
 },

153 { 
ngx_°rög
("proxy_buffer_size"),

154 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

155 
ngx_c⁄f_£t_size_¶Ÿ
,

156 
NGX_STREAM_SRV_CONF_OFFSET
,

157 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
buf„r_size
),

158 
NULL
 },

160 { 
ngx_°rög
("proxy_downstream_buffer"),

161 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

162 
ngx_c⁄f_£t_size_¶Ÿ
,

163 
NGX_STREAM_SRV_CONF_OFFSET
,

164 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
buf„r_size
),

165 &
ngx_c⁄f_dïªˇãd_¥oxy_down°ªam_buf„r
 },

167 { 
ngx_°rög
("proxy_upstream_buffer"),

168 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

169 
ngx_c⁄f_£t_size_¶Ÿ
,

170 
NGX_STREAM_SRV_CONF_OFFSET
,

171 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
buf„r_size
),

172 &
ngx_c⁄f_dïªˇãd_¥oxy_up°ªam_buf„r
 },

174 { 
ngx_°rög
("proxy_upload_rate"),

175 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

176 
ngx_c⁄f_£t_size_¶Ÿ
,

177 
NGX_STREAM_SRV_CONF_OFFSET
,

178 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
u∂ﬂd_øã
),

179 
NULL
 },

181 { 
ngx_°rög
("proxy_download_rate"),

182 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

183 
ngx_c⁄f_£t_size_¶Ÿ
,

184 
NGX_STREAM_SRV_CONF_OFFSET
,

185 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
dow∆ﬂd_øã
),

186 
NULL
 },

188 { 
ngx_°rög
("proxy_responses"),

189 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

190 
ngx_c⁄f_£t_num_¶Ÿ
,

191 
NGX_STREAM_SRV_CONF_OFFSET
,

192 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
ª•⁄£s
),

193 
NULL
 },

195 { 
ngx_°rög
("proxy_next_upstream"),

196 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

197 
ngx_c⁄f_£t_Êag_¶Ÿ
,

198 
NGX_STREAM_SRV_CONF_OFFSET
,

199 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
√xt_up°ªam
),

200 
NULL
 },

202 { 
ngx_°rög
("proxy_next_upstream_tries"),

203 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

204 
ngx_c⁄f_£t_num_¶Ÿ
,

205 
NGX_STREAM_SRV_CONF_OFFSET
,

206 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
√xt_up°ªam_åõs
),

207 
NULL
 },

209 { 
ngx_°rög
("proxy_next_upstream_timeout"),

210 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

211 
ngx_c⁄f_£t_m£c_¶Ÿ
,

212 
NGX_STREAM_SRV_CONF_OFFSET
,

213 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
√xt_up°ªam_timeout
),

214 
NULL
 },

216 { 
ngx_°rög
("proxy_protocol"),

217 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

218 
ngx_c⁄f_£t_Êag_¶Ÿ
,

219 
NGX_STREAM_SRV_CONF_OFFSET
,

220 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
¥oxy_¥Ÿocﬁ
),

221 
NULL
 },

223 #i‡(
NGX_STREAM_SSL
)

225 { 
ngx_°rög
("proxy_ssl"),

226 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

227 
ngx_c⁄f_£t_Êag_¶Ÿ
,

228 
NGX_STREAM_SRV_CONF_OFFSET
,

229 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_íabÀ
),

230 
NULL
 },

232 { 
ngx_°rög
("proxy_ssl_session_reuse"),

233 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

234 
ngx_c⁄f_£t_Êag_¶Ÿ
,

235 
NGX_STREAM_SRV_CONF_OFFSET
,

236 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_£ssi⁄_ªu£
),

237 
NULL
 },

239 { 
ngx_°rög
("proxy_ssl_protocols"),

240 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_1MORE
,

241 
ngx_c⁄f_£t_bômask_¶Ÿ
,

242 
NGX_STREAM_SRV_CONF_OFFSET
,

243 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

244 &
ngx_°ªam_¥oxy_s¶_¥Ÿocﬁs
 },

246 { 
ngx_°rög
("proxy_ssl_ciphers"),

247 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

248 
ngx_c⁄f_£t_°r_¶Ÿ
,

249 
NGX_STREAM_SRV_CONF_OFFSET
,

250 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_cùhîs
),

251 
NULL
 },

253 { 
ngx_°rög
("proxy_ssl_name"),

254 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

255 
ngx_°ªam_£t_com∂ex_vÆue_¶Ÿ
,

256 
NGX_STREAM_SRV_CONF_OFFSET
,

257 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_«me
),

258 
NULL
 },

260 { 
ngx_°rög
("proxy_ssl_server_name"),

261 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

262 
ngx_c⁄f_£t_Êag_¶Ÿ
,

263 
NGX_STREAM_SRV_CONF_OFFSET
,

264 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_£rvî_«me
),

265 
NULL
 },

267 { 
ngx_°rög
("proxy_ssl_verify"),

268 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

269 
ngx_c⁄f_£t_Êag_¶Ÿ
,

270 
NGX_STREAM_SRV_CONF_OFFSET
,

271 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_vîify
),

272 
NULL
 },

274 { 
ngx_°rög
("proxy_ssl_verify_depth"),

275 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

276 
ngx_c⁄f_£t_num_¶Ÿ
,

277 
NGX_STREAM_SRV_CONF_OFFSET
,

278 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_vîify_dïth
),

279 
NULL
 },

281 { 
ngx_°rög
("proxy_ssl_trusted_certificate"),

282 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

283 
ngx_c⁄f_£t_°r_¶Ÿ
,

284 
NGX_STREAM_SRV_CONF_OFFSET
,

285 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_åu°ed_˚πifiˇã
),

286 
NULL
 },

288 { 
ngx_°rög
("proxy_ssl_crl"),

289 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

290 
ngx_c⁄f_£t_°r_¶Ÿ
,

291 
NGX_STREAM_SRV_CONF_OFFSET
,

292 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_¸l
),

293 
NULL
 },

295 { 
ngx_°rög
("proxy_ssl_certificate"),

296 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

297 
ngx_c⁄f_£t_°r_¶Ÿ
,

298 
NGX_STREAM_SRV_CONF_OFFSET
,

299 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_˚πifiˇã
),

300 
NULL
 },

302 { 
ngx_°rög
("proxy_ssl_certificate_key"),

303 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

304 
ngx_c⁄f_£t_°r_¶Ÿ
,

305 
NGX_STREAM_SRV_CONF_OFFSET
,

306 
off£tof
(
ngx_°ªam_¥oxy_§v_c⁄f_t
, 
s¶_˚πifiˇã_key
),

307 
NULL
 },

309 { 
ngx_°rög
("proxy_ssl_password_file"),

310 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

311 
ngx_°ªam_¥oxy_s¶_∑ssw‹d_fûe
,

312 
NGX_STREAM_SRV_CONF_OFFSET
,

314 
NULL
 },

318 
ngx_nuŒ_comm™d


322 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_¥oxy_moduÀ_˘x
 = {

323 
NULL
,

324 
NULL
,

326 
NULL
,

327 
NULL
,

329 
ngx_°ªam_¥oxy_¸óã_§v_c⁄f
,

330 
ngx_°ªam_¥oxy_mîge_§v_c⁄f


334 
ngx_moduÀ_t
 
	gngx_°ªam_¥oxy_moduÀ
 = {

335 
NGX_MODULE_V1
,

336 &
ngx_°ªam_¥oxy_moduÀ_˘x
,

337 
ngx_°ªam_¥oxy_comm™ds
,

338 
NGX_STREAM_MODULE
,

339 
NULL
,

340 
NULL
,

341 
NULL
,

342 
NULL
,

343 
NULL
,

344 
NULL
,

345 
NULL
,

346 
NGX_MODULE_V1_PADDING


351 
	$ngx_°ªam_¥oxy_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

353 
u_ch¨
 *
p
;

354 
ngx_°r_t
 *
ho°
;

355 
ngx_uöt_t
 
i
;

356 
ngx_c⁄√˘i⁄_t
 *
c
;

357 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

358 
ngx_°ªam_up°ªam_t
 *
u
;

359 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

360 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

361 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

362 
ngx_°ªam_up°ªam_maö_c⁄f_t
 *
umcf
;

364 
c
 = 
s
->
c⁄√˘i⁄
;

366 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

368 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

371 
u
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_°ªam_up°ªam_t
));

372 i‡(
u
 =
NULL
) {

373 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

377 
s
->
up°ªam
 = 
u
;

379 
s
->
log_h™dÀr
 = 
ngx_°ªam_¥oxy_log_îr‹
;

381 
u
->
ªque°s
 = 1;

383 
u
->
≥î
.
log
 = 
c
->log;

384 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

386 i‡(
	`ngx_°ªam_¥oxy_£t_loˇl
(
s
, 
u
, 
pscf
->
loˇl
Ë!
NGX_OK
) {

387 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

391 
u
->
≥î
.
ty≥
 = 
c
->type;

392 
u
->
°¨t_£c
 = 
	`ngx_time
();

394 
c
->
wrôe
->
h™dÀr
 = 
ngx_°ªam_¥oxy_down°ªam_h™dÀr
;

395 
c
->
ªad
->
h™dÀr
 = 
ngx_°ªam_¥oxy_down°ªam_h™dÀr
;

397 
s
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
(
c
->
poﬁ
, 1,

398 (
ngx_°ªam_up°ªam_°©e_t
));

399 i‡(
s
->
up°ªam_°©es
 =
NULL
) {

400 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

404 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
pscf
->
buf„r_size
);

405 i‡(
p
 =
NULL
) {

406 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

410 
u
->
down°ªam_buf
.
°¨t
 = 
p
;

411 
u
->
down°ªam_buf
.
íd
 = 
p
 + 
pscf
->
buf„r_size
;

412 
u
->
down°ªam_buf
.
pos
 = 
p
;

413 
u
->
down°ªam_buf
.
œ°
 = 
p
;

415 i‡(
c
->
ªad
->
ªady
) {

416 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

419 i‡(
pscf
->
up°ªam_vÆue
) {

420 i‡(
	`ngx_°ªam_¥oxy_evÆ
(
s
, 
pscf
Ë!
NGX_OK
) {

421 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

426 i‡(
u
->
ªsﬁved
 =
NULL
) {

428 
uscf
 = 
pscf
->
up°ªam
;

432 #i‡(
NGX_STREAM_SSL
)

433 
u
->
s¶_«me
 = u->
ªsﬁved
->
ho°
;

436 
ho°
 = &
u
->
ªsﬁved
->host;

438 
umcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_up°ªam_moduÀ
);

440 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

442 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

444 
uscf
 = 
uscÂ
[
i
];

446 i‡(
uscf
->
ho°
.
Àn
 == host->len

447 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

448 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

449 && 
	`ngx_°∫ˇ£cmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

451 
found
;

455 i‡(
u
->
ªsﬁved
->
sockaddr
) {

457 i‡(
u
->
ªsﬁved
->
p‹t
 == 0

458 && 
u
->
ªsﬁved
->
sockaddr
->
ß_Ámûy
 !
AF_UNIX
)

460 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

461 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

462 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

466 i‡(
	`ngx_°ªam_up°ªam_¸óã_round_robö_≥î
(
s
, 
u
->
ªsﬁved
)

467 !
NGX_OK
)

469 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

473 
	`ngx_°ªam_¥oxy_c⁄√˘
(
s
);

478 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

479 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

480 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

481 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

485 
ãmp
.
«me
 = *
ho°
;

487 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

489 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, &
ãmp
);

490 i‡(
˘x
 =
NULL
) {

491 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

495 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

496 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

497 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

498 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

502 
˘x
->
«me
 = *
ho°
;

503 
˘x
->
h™dÀr
 = 
ngx_°ªam_¥oxy_ªsﬁve_h™dÀr
;

504 
˘x
->
d©a
 = 
s
;

505 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

507 
u
->
ªsﬁved
->
˘x
 = ctx;

509 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

510 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

511 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

518 
found
:

520 i‡(
uscf
 =
NULL
) {

521 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "no upstream configuration");

522 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

526 
u
->
up°ªam
 = 
uscf
;

528 #i‡(
NGX_STREAM_SSL
)

529 
u
->
s¶_«me
 = 
uscf
->
ho°
;

532 i‡(
uscf
->
≥î
.
	`öô
(
s
, uscfË!
NGX_OK
) {

533 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

537 
u
->
≥î
.
°¨t_time
 = 
ngx_cuºít_m£c
;

539 i‡(
pscf
->
√xt_up°ªam_åõs


540 && 
u
->
≥î
.
åõs
 > 
pscf
->
√xt_up°ªam_åõs
)

542 
u
->
≥î
.
åõs
 = 
pscf
->
√xt_up°ªam_åõs
;

545 
	`ngx_°ªam_¥oxy_c⁄√˘
(
s
);

546 
	}
}

549 
ngx_öt_t


550 
	$ngx_°ªam_¥oxy_evÆ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

551 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
)

553 
ngx_°r_t
 
ho°
;

554 
ngx_uæ_t
 
uæ
;

555 
ngx_°ªam_up°ªam_t
 *
u
;

557 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, 
pscf
->
up°ªam_vÆue
, &
ho°
Ë!
NGX_OK
) {

558  
NGX_ERROR
;

561 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

563 
uæ
.uæ = 
ho°
;

564 
uæ
.
no_ªsﬁve
 = 1;

566 i‡(
	`ngx_∑r£_uæ
(
s
->
c⁄√˘i⁄
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

567 i‡(
uæ
.
îr
) {

568 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

569 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

572  
NGX_ERROR
;

575 
u
 = 
s
->
up°ªam
;

577 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

578 (
ngx_°ªam_up°ªam_ªsﬁved_t
));

579 i‡(
u
->
ªsﬁved
 =
NULL
) {

580  
NGX_ERROR
;

583 i‡(
uæ
.
addrs
) {

584 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

585 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

586 
u
->
ªsﬁved
->
«me
 = 
uæ
.
addrs
[0].name;

587 
u
->
ªsﬁved
->
«ddrs
 = 1;

590 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

591 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

592 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_°ªam_¥oxy_£t_loˇl
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_up°ªam_t
 *
u
,

600 
ngx_°ªam_up°ªam_loˇl_t
 *
loˇl
)

602 
ngx_öt_t
 
rc
;

603 
ngx_°r_t
 
vÆ
;

604 
ngx_addr_t
 *
addr
;

606 i‡(
loˇl
 =
NULL
) {

607 
u
->
≥î
.
loˇl
 = 
NULL
;

608  
NGX_OK
;

611 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

612 
u
->
≥î
.
å™•¨ít
 = 
loˇl
->transparent;

615 i‡(
loˇl
->
vÆue
 =
NULL
) {

616 
u
->
≥î
.
loˇl
 =Üoˇl->
addr
;

617  
NGX_OK
;

620 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, 
loˇl
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

621  
NGX_ERROR
;

624 i‡(
vÆ
.
Àn
 == 0) {

625  
NGX_OK
;

628 
addr
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

629 i‡(
addr
 =
NULL
) {

630  
NGX_ERROR
;

633 
rc
 = 
	`ngx_∑r£_addr_p‹t
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
addr
, 
vÆ
.
d©a
, vÆ.
Àn
);

634 i‡(
rc
 =
NGX_ERROR
) {

635  
NGX_ERROR
;

638 i‡(
rc
 !
NGX_OK
) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

640 "övÆidÜoˇ»addªs†\"%V\"", &
vÆ
);

641  
NGX_OK
;

644 
addr
->
«me
 = 
vÆ
;

645 
u
->
≥î
.
loˇl
 = 
addr
;

647  
NGX_OK
;

648 
	}
}

652 
	$ngx_°ªam_¥oxy_c⁄√˘
(
ngx_°ªam_£ssi⁄_t
 *
s
)

654 
ngx_öt_t
 
rc
;

655 
ngx_c⁄√˘i⁄_t
 *
c
, *
pc
;

656 
ngx_°ªam_up°ªam_t
 *
u
;

657 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

659 
c
 = 
s
->
c⁄√˘i⁄
;

661 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

663 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

665 
u
 = 
s
->
up°ªam
;

667 
u
->
c⁄√˘ed
 = 0;

668 
u
->
¥oxy_¥Ÿocﬁ
 = 
pscf
->proxy_protocol;

670 i‡(
u
->
°©e
) {

671 
u
->
°©e
->
ª•⁄£_time
 = 
ngx_cuºít_m£c
 - u->state->response_time;

674 
u
->
°©e
 = 
	`ngx_¨øy_push
(
s
->
up°ªam_°©es
);

675 i‡(
u
->
°©e
 =
NULL
) {

676 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

680 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_°ªam_up°ªam_°©e_t
));

682 
u
->
°©e
->
c⁄√˘_time
 = (
ngx_m£c_t
) -1;

683 
u
->
°©e
->
fú°_byã_time
 = (
ngx_m£c_t
) -1;

684 
u
->
°©e
->
ª•⁄£_time
 = 
ngx_cuºít_m£c
;

686 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

688 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0, "¥oxy c⁄√˘: %i", 
rc
);

690 i‡(
rc
 =
NGX_ERROR
) {

691 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

695 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

697 i‡(
rc
 =
NGX_BUSY
) {

698 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0, "noÜive upstreams");

699 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_BAD_GATEWAY
);

703 i‡(
rc
 =
NGX_DECLINED
) {

704 
	`ngx_°ªam_¥oxy_√xt_up°ªam
(
s
);

710 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

712 
pc
->
d©a
 = 
s
;

713 
pc
->
log
 = 
c
->log;

714 
pc
->
poﬁ
 = 
c
->pool;

715 
pc
->
ªad
->
log
 = 
c
->log;

716 
pc
->
wrôe
->
log
 = 
c
->log;

718 i‡(
rc
 !
NGX_AGAIN
) {

719 
	`ngx_°ªam_¥oxy_öô_up°ªam
(
s
);

723 
pc
->
ªad
->
h™dÀr
 = 
ngx_°ªam_¥oxy_c⁄√˘_h™dÀr
;

724 
pc
->
wrôe
->
h™dÀr
 = 
ngx_°ªam_¥oxy_c⁄√˘_h™dÀr
;

726 
	`ngx_add_timî
(
pc
->
wrôe
, 
pscf
->
c⁄√˘_timeout
);

727 
	}
}

731 
	$ngx_°ªam_¥oxy_öô_up°ªam
(
ngx_°ªam_£ssi⁄_t
 *
s
)

733 
u_ch¨
 *
p
;

734 
ngx_chaö_t
 *
˛
;

735 
ngx_c⁄√˘i⁄_t
 *
c
, *
pc
;

736 
ngx_log_h™dÀr_±
 
h™dÀr
;

737 
ngx_°ªam_up°ªam_t
 *
u
;

738 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

739 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

741 
u
 = 
s
->
up°ªam
;

742 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

744 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

746 i‡(
pc
->
ty≥
 =
SOCK_STREAM


747 && 
cscf
->
t˝_nodñay


748 && 
	`ngx_t˝_nodñay
(
pc
Ë!
NGX_OK
)

750 
	`ngx_°ªam_¥oxy_√xt_up°ªam
(
s
);

754 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

756 #i‡(
NGX_STREAM_SSL
)

758 i‡(
pc
->
ty≥
 =
SOCK_STREAM
 && 
pscf
->
s¶
) {

760 i‡(
u
->
¥oxy_¥Ÿocﬁ
) {

761 i‡(
	`ngx_°ªam_¥oxy_£nd_¥oxy_¥Ÿocﬁ
(
s
Ë!
NGX_OK
) {

765 
u
->
¥oxy_¥Ÿocﬁ
 = 0;

768 i‡(
pc
->
s¶
 =
NULL
) {

769 
	`ngx_°ªam_¥oxy_s¶_öô_c⁄√˘i⁄
(
s
);

776 
c
 = 
s
->
c⁄√˘i⁄
;

778 i‡(
c
->
log
->
log_Àvñ
 >
NGX_LOG_INFO
) {

779 
ngx_°r_t
 
°r
;

780 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

782 
°r
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

783 
°r
.
d©a
 = 
addr
;

785 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
pc
, &
°r
, 1Ë=
NGX_OK
) {

786 
h™dÀr
 = 
c
->
log
->handler;

787 
c
->
log
->
h™dÀr
 = 
NULL
;

789 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

791 
pc
->
ty≥
 =
SOCK_DGRAM
 ? "udp " : "",

792 &
°r
, 
u
->
≥î
.
«me
);

794 
c
->
log
->
h™dÀr
 = handler;

798 
u
->
°©e
->
c⁄√˘_time
 = 
ngx_cuºít_m£c
 - u->°©e->
ª•⁄£_time
;

800 i‡(
u
->
≥î
.
nŸify
) {

801 
u
->
≥î
.
	`nŸify
(&u->≥î, u->≥î.
d©a
,

802 
NGX_STREAM_UPSTREAM_NOTIFY_CONNECT
);

805 i‡(
u
->
up°ªam_buf
.
°¨t
 =
NULL
) {

806 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
pscf
->
buf„r_size
);

807 i‡(
p
 =
NULL
) {

808 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

812 
u
->
up°ªam_buf
.
°¨t
 = 
p
;

813 
u
->
up°ªam_buf
.
íd
 = 
p
 + 
pscf
->
buf„r_size
;

814 
u
->
up°ªam_buf
.
pos
 = 
p
;

815 
u
->
up°ªam_buf
.
œ°
 = 
p
;

818 i‡(
c
->
buf„r
 && c->buf„r->
pos
 < c->buf„r->
œ°
) {

819 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

821 
c
->
buf„r
->
œ°
 - c->buf„r->
pos
);

823 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
c
->
poﬁ
, &
u
->
‰ì
);

824 i‡(
˛
 =
NULL
) {

825 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

829 *
˛
->
buf
 = *
c
->
buf„r
;

831 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_°ªam_¥oxy_moduÀ
;

832 
˛
->
buf
->
Êush
 = 1;

834 
˛
->
√xt
 = 
u
->
up°ªam_out
;

835 
u
->
up°ªam_out
 = 
˛
;

838 i‡(
u
->
¥oxy_¥Ÿocﬁ
) {

839 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

842 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
c
->
poﬁ
, &
u
->
‰ì
);

843 i‡(
˛
 =
NULL
) {

844 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

848 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
NGX_PROXY_PROTOCOL_MAX_HEADER
);

849 i‡(
p
 =
NULL
) {

850 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

854 
˛
->
buf
->
pos
 = 
p
;

856 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_wrôe
(
c
,Ö,Ö + 
NGX_PROXY_PROTOCOL_MAX_HEADER
);

857 i‡(
p
 =
NULL
) {

858 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

862 
˛
->
buf
->
œ°
 = 
p
;

863 
˛
->
buf
->
ãmp‹¨y
 = 1;

864 
˛
->
buf
->
Êush
 = 0;

865 
˛
->
buf
->
œ°_buf
 = 0;

866 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_°ªam_¥oxy_moduÀ
;

868 
˛
->
√xt
 = 
u
->
up°ªam_out
;

869 
u
->
up°ªam_out
 = 
˛
;

871 
u
->
¥oxy_¥Ÿocﬁ
 = 0;

874 
u
->
c⁄√˘ed
 = 1;

876 
pc
->
ªad
->
h™dÀr
 = 
ngx_°ªam_¥oxy_up°ªam_h™dÀr
;

877 
pc
->
wrôe
->
h™dÀr
 = 
ngx_°ªam_¥oxy_up°ªam_h™dÀr
;

879 i‡(
pc
->
ªad
->
ªady
) {

880 
	`ngx_po°_evít
(
pc
->
ªad
, &
ngx_po°ed_evíts
);

883 
	`ngx_°ªam_¥oxy_¥o˚ss
(
s
, 0, 1);

884 
	}
}

887 #i‡(
NGX_STREAM_SSL
)

889 
ngx_öt_t


890 
	$ngx_°ªam_¥oxy_£nd_¥oxy_¥Ÿocﬁ
(
ngx_°ªam_£ssi⁄_t
 *
s
)

892 
u_ch¨
 *
p
;

893 
ssize_t
 
n
, 
size
;

894 
ngx_c⁄√˘i⁄_t
 *
c
, *
pc
;

895 
ngx_°ªam_up°ªam_t
 *
u
;

896 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

897 
u_ch¨
 
buf
[
NGX_PROXY_PROTOCOL_MAX_HEADER
];

899 
c
 = 
s
->
c⁄√˘i⁄
;

901 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

904 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_wrôe
(
c
, 
buf
, bu‡+ 
NGX_PROXY_PROTOCOL_MAX_HEADER
);

905 i‡(
p
 =
NULL
) {

906 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

907  
NGX_ERROR
;

910 
u
 = 
s
->
up°ªam
;

912 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

914 
size
 = 
p
 - 
buf
;

916 
n
 = 
pc
->
	`£nd
’c, 
buf
, 
size
);

918 i‡(
n
 =
NGX_AGAIN
) {

919 i‡(
	`ngx_h™dÀ_wrôe_evít
(
pc
->
wrôe
, 0Ë!
NGX_OK
) {

920 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

921  
NGX_ERROR
;

924 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

926 
	`ngx_add_timî
(
pc
->
wrôe
, 
pscf
->
timeout
);

928 
pc
->
wrôe
->
h™dÀr
 = 
ngx_°ªam_¥oxy_c⁄√˘_h™dÀr
;

930  
NGX_AGAIN
;

933 i‡(
n
 =
NGX_ERROR
) {

934 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

935  
NGX_ERROR
;

938 i‡(
n
 !
size
) {

947 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

950 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

952  
NGX_ERROR
;

955  
NGX_OK
;

956 
	}
}

960 
	$ngx_°ªam_¥oxy_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

961 *
c⁄f
)

963 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
 = 
c⁄f
;

965 
ngx_°r_t
 *
vÆue
;

967 i‡(
pscf
->
s¶_∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

971 
vÆue
 = 
cf
->
¨gs
->
ñts
;

973 
pscf
->
s¶_∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

975 i‡(
pscf
->
s¶_∑ssw‹ds
 =
NULL
) {

976  
NGX_CONF_ERROR
;

979  
NGX_CONF_OK
;

980 
	}
}

984 
	$ngx_°ªam_¥oxy_s¶_öô_c⁄√˘i⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
)

986 
ngx_öt_t
 
rc
;

987 
ngx_c⁄√˘i⁄_t
 *
pc
;

988 
ngx_°ªam_up°ªam_t
 *
u
;

989 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

991 
u
 = 
s
->
up°ªam
;

993 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

995 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

997 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
pscf
->
s¶
, 
pc
, 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

998 !
NGX_OK
)

1000 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1004 i‡(
pscf
->
s¶_£rvî_«me
 ||Öscf->
s¶_vîify
) {

1005 i‡(
	`ngx_°ªam_¥oxy_s¶_«me
(
s
Ë!
NGX_OK
) {

1006 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1011 i‡(
pscf
->
s¶_£ssi⁄_ªu£
) {

1012 
pc
->
s¶
->
ßve_£ssi⁄
 = 
ngx_°ªam_¥oxy_s¶_ßve_£ssi⁄
;

1014 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1015 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1020 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1022 
rc
 = 
	`ngx_s¶_h™dshake
(
pc
);

1024 i‡(
rc
 =
NGX_AGAIN
) {

1026 i‡(!
pc
->
wrôe
->
timî_£t
) {

1027 
	`ngx_add_timî
(
pc
->
wrôe
, 
pscf
->
c⁄√˘_timeout
);

1030 
pc
->
s¶
->
h™dÀr
 = 
ngx_°ªam_¥oxy_s¶_h™dshake
;

1034 
	`ngx_°ªam_¥oxy_s¶_h™dshake
(
pc
);

1035 
	}
}

1039 
	$ngx_°ªam_¥oxy_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
pc
)

1041 
rc
;

1042 
ngx_°ªam_£ssi⁄_t
 *
s
;

1043 
ngx_°ªam_up°ªam_t
 *
u
;

1044 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

1046 
s
 = 
pc
->
d©a
;

1048 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

1050 i‡(
pc
->
s¶
->
h™dshaked
) {

1052 i‡(
pscf
->
s¶_vîify
) {

1053 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
pc
->
s¶
->
c⁄√˘i⁄
);

1055 i‡(
rc
 !
X509_V_OK
) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
pc
->
log
, 0,

1058 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1059 
Áûed
;

1062 
u
 = 
s
->
up°ªam
;

1064 i‡(
	`ngx_s¶_check_ho°
(
pc
, &
u
->
s¶_«me
Ë!
NGX_OK
) {

1065 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
pc
->
log
, 0,

1067 &
u
->
s¶_«me
);

1068 
Áûed
;

1072 i‡(
pc
->
wrôe
->
timî_£t
) {

1073 
	`ngx_dñ_timî
(
pc
->
wrôe
);

1076 
	`ngx_°ªam_¥oxy_öô_up°ªam
(
s
);

1081 
Áûed
:

1083 
	`ngx_°ªam_¥oxy_√xt_up°ªam
(
s
);

1084 
	}
}

1088 
	$ngx_°ªam_¥oxy_s¶_ßve_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

1090 
ngx_°ªam_£ssi⁄_t
 *
s
;

1091 
ngx_°ªam_up°ªam_t
 *
u
;

1093 
s
 = 
c
->
d©a
;

1094 
u
 = 
s
->
up°ªam
;

1096 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1097 
	}
}

1100 
ngx_öt_t


1101 
	$ngx_°ªam_¥oxy_s¶_«me
(
ngx_°ªam_£ssi⁄_t
 *
s
)

1103 
u_ch¨
 *
p
, *
œ°
;

1104 
ngx_°r_t
 
«me
;

1105 
ngx_°ªam_up°ªam_t
 *
u
;

1106 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

1108 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

1110 
u
 = 
s
->
up°ªam
;

1112 i‡(
pscf
->
s¶_«me
) {

1113 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, 
pscf
->
s¶_«me
, &
«me
Ë!
NGX_OK
) {

1114  
NGX_ERROR
;

1118 
«me
 = 
u
->
s¶_«me
;

1121 i‡(
«me
.
Àn
 == 0) {

1122 
d⁄e
;

1130 
p
 = 
«me
.
d©a
;

1131 
œ°
 = 
«me
.
d©a
 +Çame.
Àn
;

1133 i‡(*
p
 == '[') {

1134 
p
 = 
	`ngx_°æchr
’, 
œ°
, ']');

1136 i‡(
p
 =
NULL
) {

1137 
p
 = 
«me
.
d©a
;

1141 
p
 = 
	`ngx_°æchr
’, 
œ°
, ':');

1143 i‡(
p
 !
NULL
) {

1144 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1147 i‡(!
pscf
->
s¶_£rvî_«me
) {

1148 
d⁄e
;

1151 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


1155 i‡(
«me
.
Àn
 =0 || *«me.
d©a
 == '[') {

1156 
d⁄e
;

1159 i‡(
	`ngx_öë_addr
(
«me
.
d©a
,Çame.
Àn
Ë!
INADDR_NONE
) {

1160 
d⁄e
;

1168 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
«me
.
Àn
 + 1);

1169 i‡(
p
 =
NULL
) {

1170  
NGX_ERROR
;

1173 (Ë
	`ngx_˝y°∫
(
p
, 
«me
.
d©a
,Çame.
Àn
 + 1);

1175 
«me
.
d©a
 = 
p
;

1177 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1178 "up°ªam SSL sîvîÇame: \"%s\"", 
«me
.
d©a
);

1180 i‡(
	`SSL_£t_é£xt_ho°_«me
(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->connection,

1181 (*Ë
«me
.
d©a
)

1184 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1185 "SSL_£t_é£xt_ho°_«me(\"%s\"ËÁûed", 
«me
.
d©a
);

1186  
NGX_ERROR
;

1191 
d⁄e
:

1193 
u
->
s¶_«me
 = 
«me
;

1195  
NGX_OK
;

1196 
	}
}

1202 
	$ngx_°ªam_¥oxy_down°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

1204 
	`ngx_°ªam_¥oxy_¥o˚ss_c⁄√˘i⁄
(
ev
,Év->
wrôe
);

1205 
	}
}

1209 
	$ngx_°ªam_¥oxy_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1211 
ngx_°ªam_£ssi⁄_t
 *
s
;

1212 
ngx_°ªam_up°ªam_t
 *
u
;

1213 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

1214 
ngx_°ªam_up°ªam_ªsﬁved_t
 *
ur
;

1216 
s
 = 
˘x
->
d©a
;

1218 
u
 = 
s
->
up°ªam
;

1219 
ur
 = 
u
->
ªsﬁved
;

1221 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1224 i‡(
˘x
->
°©e
) {

1225 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1227 &
˘x
->
«me
, ctx->
°©e
,

1228 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

1230 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1234 
ur
->
«ddrs
 = 
˘x
->naddrs;

1235 
ur
->
addrs
 = 
˘x
->addrs;

1237 #i‡(
NGX_DEBUG
)

1239 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

1240 
ngx_°r_t
 
addr
;

1241 
ngx_uöt_t
 
i
;

1243 
addr
.
d©a
 = 
ãxt
;

1245 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

1246 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ur
->
addrs
[
i
].
sockaddr
, ur->addrs[i].
sockÀn
,

1247 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

1249 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1250 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

1255 i‡(
	`ngx_°ªam_up°ªam_¸óã_round_robö_≥î
(
s
, 
ur
Ë!
NGX_OK
) {

1256 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1260 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

1261 
ur
->
˘x
 = 
NULL
;

1263 
u
->
≥î
.
°¨t_time
 = 
ngx_cuºít_m£c
;

1265 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

1267 i‡(
pscf
->
√xt_up°ªam_åõs


1268 && 
u
->
≥î
.
åõs
 > 
pscf
->
√xt_up°ªam_åõs
)

1270 
u
->
≥î
.
åõs
 = 
pscf
->
√xt_up°ªam_åõs
;

1273 
	`ngx_°ªam_¥oxy_c⁄√˘
(
s
);

1274 
	}
}

1278 
	$ngx_°ªam_¥oxy_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

1280 
	`ngx_°ªam_¥oxy_¥o˚ss_c⁄√˘i⁄
(
ev
, !ev->
wrôe
);

1281 
	}
}

1285 
	$ngx_°ªam_¥oxy_¥o˚ss_c⁄√˘i⁄
(
ngx_evít_t
 *
ev
, 
ngx_uöt_t
 
‰om_up°ªam
)

1287 
ngx_c⁄√˘i⁄_t
 *
c
, *
pc
;

1288 
ngx_log_h™dÀr_±
 
h™dÀr
;

1289 
ngx_°ªam_£ssi⁄_t
 *
s
;

1290 
ngx_°ªam_up°ªam_t
 *
u
;

1291 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

1293 
c
 = 
ev
->
d©a
;

1294 
s
 = 
c
->
d©a
;

1295 
u
 = 
s
->
up°ªam
;

1297 i‡(
c
->
˛o£
) {

1298 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "shutdownÅimeout");

1299 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1303 
c
 = 
s
->
c⁄√˘i⁄
;

1304 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1306 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

1308 i‡(
ev
->
timedout
) {

1309 
ev
->
timedout
 = 0;

1311 i‡(
ev
->
dñayed
) {

1312 
ev
->
dñayed
 = 0;

1314 i‡(!
ev
->
ªady
) {

1315 i‡(
	`ngx_h™dÀ_ªad_evít
(
ev
, 0Ë!
NGX_OK
) {

1316 
	`ngx_°ªam_¥oxy_föÆize
(
s
,

1317 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1321 i‡(
u
->
c⁄√˘ed
 && !
c
->
ªad
->
dñayed
 && !
pc
->read->delayed) {

1322 
	`ngx_add_timî
(
c
->
wrôe
, 
pscf
->
timeout
);

1329 i‡(
s
->
c⁄√˘i⁄
->
ty≥
 =
SOCK_DGRAM
) {

1330 i‡(
pscf
->
ª•⁄£s
 =
NGX_MAX_INT32_VALUE
) {

1337 
h™dÀr
 = 
c
->
log
->handler;

1338 
c
->
log
->
h™dÀr
 = 
NULL
;

1340 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1345 
u
->
ªque°s
, u->
ª•⁄£s
,

1346 
s
->
ª˚ived
, 
c
->
£¡
, 
u
->received,

1347 
pc
 ?Öc->
£¡
 : 0);

1349 
c
->
log
->
h™dÀr
 = handler;

1351 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1355 
	`ngx_c⁄√˘i⁄_îr‹
(
pc
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

1357 
pc
->
ªad
->
îr‹
 = 1;

1359 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_BAD_GATEWAY
);

1364 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "connectionÅimed out");

1366 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1371 } i‡(
ev
->
dñayed
) {

1373 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

1376 i‡(
	`ngx_h™dÀ_ªad_evít
(
ev
, 0Ë!
NGX_OK
) {

1377 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1383 i‡(
‰om_up°ªam
 && !
u
->
c⁄√˘ed
) {

1387 
	`ngx_°ªam_¥oxy_¥o˚ss
(
s
, 
‰om_up°ªam
, 
ev
->
wrôe
);

1388 
	}
}

1392 
	$ngx_°ªam_¥oxy_c⁄√˘_h™dÀr
(
ngx_evít_t
 *
ev
)

1394 
ngx_c⁄√˘i⁄_t
 *
c
;

1395 
ngx_°ªam_£ssi⁄_t
 *
s
;

1397 
c
 = 
ev
->
d©a
;

1398 
s
 = 
c
->
d©a
;

1400 i‡(
ev
->
timedout
) {

1401 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

1402 
	`ngx_°ªam_¥oxy_√xt_up°ªam
(
s
);

1406 
	`ngx_dñ_timî
(
c
->
wrôe
);

1408 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

1411 i‡(
	`ngx_°ªam_¥oxy_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1412 
	`ngx_°ªam_¥oxy_√xt_up°ªam
(
s
);

1416 
	`ngx_°ªam_¥oxy_öô_up°ªam
(
s
);

1417 
	}
}

1420 
ngx_öt_t


1421 
	$ngx_°ªam_¥oxy_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

1423 
îr
;

1424 
sockÀn_t
 
Àn
;

1426 #i‡(
NGX_HAVE_KQUEUE
)

1428 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1429 
îr
 = 
c
->
wrôe
->
kq_î∫o
 ? c->wrôe->kq_î∫ÿ: c->
ªad
->kq_errno;

1431 i‡(
îr
) {

1432 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

1434  
NGX_ERROR
;

1440 
îr
 = 0;

1441 
Àn
 = ();

1448 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1451 
îr
 = 
ngx_sockë_î∫o
;

1454 i‡(
îr
) {

1455 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

1456  
NGX_ERROR
;

1460  
NGX_OK
;

1461 
	}
}

1465 
	$ngx_°ªam_¥oxy_¥o˚ss
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
‰om_up°ªam
,

1466 
ngx_uöt_t
 
do_wrôe
)

1468 *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

1469 
off_t
 *
ª˚ived
, 
limô
;

1470 
size_t
 
size
, 
limô_øã
;

1471 
ssize_t
 
n
;

1472 
ngx_buf_t
 *
b
;

1473 
ngx_öt_t
 
rc
;

1474 
ngx_uöt_t
 
Êags
, *
∑ckës
;

1475 
ngx_m£c_t
 
dñay
;

1476 
ngx_chaö_t
 *
˛
, **
Œ
, **
out
, **
busy
;

1477 
ngx_c⁄√˘i⁄_t
 *
c
, *
pc
, *
§c
, *
d°
;

1478 
ngx_log_h™dÀr_±
 
h™dÀr
;

1479 
ngx_°ªam_up°ªam_t
 *
u
;

1480 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

1482 
u
 = 
s
->
up°ªam
;

1484 
c
 = 
s
->
c⁄√˘i⁄
;

1485 
pc
 = 
u
->
c⁄√˘ed
 ? u->
≥î
.
c⁄√˘i⁄
 : 
NULL
;

1487 i‡(
c
->
ty≥
 =
SOCK_DGRAM
 && (
ngx_ãrmö©e
 || 
ngx_exôög
)) {

1491 
h™dÀr
 = 
c
->
log
->handler;

1492 
c
->
log
->
h™dÀr
 = 
NULL
;

1494 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "disconnected on shutdown");

1496 
c
->
log
->
h™dÀr
 = handler;

1498 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1502 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

1504 i‡(
‰om_up°ªam
) {

1505 
§c
 = 
pc
;

1506 
d°
 = 
c
;

1507 
b
 = &
u
->
up°ªam_buf
;

1508 
limô_øã
 = 
pscf
->
dow∆ﬂd_øã
;

1509 
ª˚ived
 = &
u
->received;

1510 
∑ckës
 = &
u
->
ª•⁄£s
;

1511 
out
 = &
u
->
down°ªam_out
;

1512 
busy
 = &
u
->
down°ªam_busy
;

1513 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

1514 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

1517 
§c
 = 
c
;

1518 
d°
 = 
pc
;

1519 
b
 = &
u
->
down°ªam_buf
;

1520 
limô_øã
 = 
pscf
->
u∂ﬂd_øã
;

1521 
ª˚ived
 = &
s
->received;

1522 
∑ckës
 = &
u
->
ªque°s
;

1523 
out
 = &
u
->
up°ªam_out
;

1524 
busy
 = &
u
->
up°ªam_busy
;

1525 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

1526 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

1531 i‡(
do_wrôe
 && 
d°
) {

1533 i‡(*
out
 || *
busy
 || 
d°
->
buf„ªd
) {

1534 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

1536 
rc
 = 
	`ngx_°ªam_t›_fûãr
(
s
, *
out
, 
‰om_up°ªam
);

1538 i‡(
rc
 =
NGX_ERROR
) {

1539 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1543 
	`ngx_chaö_upd©e_chaös
(
c
->
poﬁ
, &
u
->
‰ì
, 
busy
, 
out
,

1544 (
ngx_buf_èg_t
Ë&
ngx_°ªam_¥oxy_moduÀ
);

1546 i‡(*
busy
 =
NULL
) {

1547 
b
->
pos
 = b->
°¨t
;

1548 
b
->
œ°
 = b->
°¨t
;

1553 
size
 = 
b
->
íd
 - b->
œ°
;

1555 i‡(
size
 && 
§c
->
ªad
->
ªady
 && !§c->ªad->
dñayed


1556 && !
§c
->
ªad
->
îr‹
)

1558 i‡(
limô_øã
) {

1559 
limô
 = (
off_t
Ë
limô_øã
 * (
	`ngx_time
(Ë- 
u
->
°¨t_£c
 + 1)

1560 - *
ª˚ived
;

1562 i‡(
limô
 <= 0) {

1563 
§c
->
ªad
->
dñayed
 = 1;

1564 
dñay
 = (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
limô_øã
 + 1);

1565 
	`ngx_add_timî
(
§c
->
ªad
, 
dñay
);

1569 i‡((
off_t
Ë
size
 > 
limô
) {

1570 
size
 = (
size_t
Ë
limô
;

1574 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

1576 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

1578 i‡(
n
 =
NGX_AGAIN
) {

1582 i‡(
n
 =
NGX_ERROR
) {

1583 
§c
->
ªad
->
eof
 = 1;

1584 
n
 = 0;

1587 i‡(
n
 >= 0) {

1588 i‡(
limô_øã
) {

1589 
dñay
 = (
ngx_m£c_t
Ë(
n
 * 1000 / 
limô_øã
);

1591 i‡(
dñay
 > 0) {

1592 
§c
->
ªad
->
dñayed
 = 1;

1593 
	`ngx_add_timî
(
§c
->
ªad
, 
dñay
);

1597 i‡(
‰om_up°ªam
) {

1598 i‡(
u
->
°©e
->
fú°_byã_time
 =(
ngx_m£c_t
) -1) {

1599 
u
->
°©e
->
fú°_byã_time
 = 
ngx_cuºít_m£c


1600 - 
u
->
°©e
->
ª•⁄£_time
;

1604 
Œ
 = 
out
; *Œ;Ü»&(*Œ)->
√xt
) { }

1606 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
c
->
poﬁ
, &
u
->
‰ì
);

1607 i‡(
˛
 =
NULL
) {

1608 
	`ngx_°ªam_¥oxy_föÆize
(
s
,

1609 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1613 *
Œ
 = 
˛
;

1615 
˛
->
buf
->
pos
 = 
b
->
œ°
;

1616 
˛
->
buf
->
œ°
 = 
b
->œ° + 
n
;

1617 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_°ªam_¥oxy_moduÀ
;

1619 
˛
->
buf
->
ãmp‹¨y
 = (
n
 ? 1 : 0);

1620 
˛
->
buf
->
œ°_buf
 = 
§c
->
ªad
->
eof
;

1621 
˛
->
buf
->
Êush
 = 1;

1623 (*
∑ckës
)++;

1624 *
ª˚ived
 +
n
;

1625 
b
->
œ°
 +
n
;

1626 
do_wrôe
 = 1;

1635 
c
->
log
->
a˘i⁄
 = "proxying connection";

1637 i‡(
c
->
ty≥
 =
SOCK_DGRAM


1638 && 
pscf
->
ª•⁄£s
 !
NGX_MAX_INT32_VALUE


1639 && 
u
->
ª•⁄£s
 >
pscf
->ª•⁄£†* u->
ªque°s


1640 && !
§c
->
buf„ªd
 && 
d°
 && !dst->buffered)

1642 
h™dÀr
 = 
c
->
log
->handler;

1643 
c
->
log
->
h™dÀr
 = 
NULL
;

1645 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1650 
u
->
ªque°s
, u->
ª•⁄£s
,

1651 
s
->
ª˚ived
, 
c
->
£¡
, 
u
->ª˚ived, 
pc
 ?Öc->sent : 0);

1653 
c
->
log
->
h™dÀr
 = handler;

1655 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1659 i‡(
c
->
ty≥
 =
SOCK_STREAM


1660 && 
§c
->
ªad
->
eof
 && 
d°
 && (d°->ªad->eo‡|| !d°->
buf„ªd
))

1662 
h™dÀr
 = 
c
->
log
->handler;

1663 
c
->
log
->
h™dÀr
 = 
NULL
;

1665 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1669 
‰om_up°ªam
 ? "upstream" : "client",

1670 
s
->
ª˚ived
, 
c
->
£¡
, 
u
->ª˚ived, 
pc
 ?Öc->sent : 0);

1672 
c
->
log
->
h™dÀr
 = handler;

1674 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_OK
);

1678 
Êags
 = 
§c
->
ªad
->
eof
 ? 
NGX_CLOSE_EVENT
 : 0;

1680 i‡(!
§c
->
sh¨ed
 && 
	`ngx_h™dÀ_ªad_evít
(§c->
ªad
, 
Êags
Ë!
NGX_OK
) {

1681 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1685 i‡(
d°
) {

1686 i‡(!
d°
->
sh¨ed
 && 
	`ngx_h™dÀ_wrôe_evít
(d°->
wrôe
, 0Ë!
NGX_OK
) {

1687 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1691 i‡(!
c
->
ªad
->
dñayed
 && !
pc
->read->delayed) {

1692 
	`ngx_add_timî
(
c
->
wrôe
, 
pscf
->
timeout
);

1694 } i‡(
c
->
wrôe
->
timî_£t
) {

1695 
	`ngx_dñ_timî
(
c
->
wrôe
);

1698 
	}
}

1702 
	$ngx_°ªam_¥oxy_√xt_up°ªam
(
ngx_°ªam_£ssi⁄_t
 *
s
)

1704 
ngx_m£c_t
 
timeout
;

1705 
ngx_c⁄√˘i⁄_t
 *
pc
;

1706 
ngx_°ªam_up°ªam_t
 *
u
;

1707 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
;

1709 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1712 
u
 = 
s
->
up°ªam
;

1713 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1715 i‡(
pc
 &&Öc->
buf„ªd
) {

1716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1718 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

1722 i‡(
s
->
c⁄√˘i⁄
->
ty≥
 =
SOCK_DGRAM
) {

1723 
u
->
up°ªam_out
 = 
NULL
;

1726 i‡(
u
->
≥î
.
sockaddr
) {

1727 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
NGX_PEER_FAILED
);

1728 
u
->
≥î
.
sockaddr
 = 
NULL
;

1731 
pscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_¥oxy_moduÀ
);

1733 
timeout
 = 
pscf
->
√xt_up°ªam_timeout
;

1735 i‡(
u
->
≥î
.
åõs
 == 0

1736 || !
pscf
->
√xt_up°ªam


1737 || (
timeout
 && 
ngx_cuºít_m£c
 - 
u
->
≥î
.
°¨t_time
 >=Åimeout))

1739 
	`ngx_°ªam_¥oxy_föÆize
(
s
, 
NGX_STREAM_BAD_GATEWAY
);

1743 i‡(
pc
) {

1744 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1745 "˛o£Öroxy up°ªam c⁄√˘i⁄: %d", 
pc
->
fd
);

1747 #i‡(
NGX_STREAM_SSL
)

1748 i‡(
pc
->
s¶
) {

1749 
pc
->
s¶
->
no_waô_shutdown
 = 1;

1750 
pc
->
s¶
->
no_£nd_shutdown
 = 1;

1752 (Ë
	`ngx_s¶_shutdown
(
pc
);

1756 
u
->
°©e
->
byãs_ª˚ived
 = u->
ª˚ived
;

1757 
u
->
°©e
->
byãs_£¡
 = 
pc
->
£¡
;

1759 
	`ngx_˛o£_c⁄√˘i⁄
(
pc
);

1760 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

1763 
	`ngx_°ªam_¥oxy_c⁄√˘
(
s
);

1764 
	}
}

1768 
	$ngx_°ªam_¥oxy_föÆize
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
rc
)

1770 
ngx_uöt_t
 
°©e
;

1771 
ngx_c⁄√˘i⁄_t
 *
pc
;

1772 
ngx_°ªam_up°ªam_t
 *
u
;

1774 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1775 "föÆizê°ªamÖroxy: %i", 
rc
);

1777 
u
 = 
s
->
up°ªam
;

1779 i‡(
u
 =
NULL
) {

1780 
noup°ªam
;

1783 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

1784 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

1785 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

1788 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1790 i‡(
u
->
°©e
) {

1791 
u
->
°©e
->
ª•⁄£_time
 = 
ngx_cuºít_m£c
 - u->state->response_time;

1793 i‡(
pc
) {

1794 
u
->
°©e
->
byãs_ª˚ived
 = u->
ª˚ived
;

1795 
u
->
°©e
->
byãs_£¡
 = 
pc
->
£¡
;

1799 i‡(
u
->
≥î
.
‰ì
 && u->≥î.
sockaddr
) {

1800 
°©e
 = 0;

1802 i‡(
pc
 &&Öc->
ty≥
 =
SOCK_DGRAM


1803 && (
pc
->
ªad
->
îr‹
 ||Öc->
wrôe
->error))

1805 
°©e
 = 
NGX_PEER_FAILED
;

1808 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

1809 
u
->
≥î
.
sockaddr
 = 
NULL
;

1812 i‡(
pc
) {

1813 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1814 "˛o£ såómÖroxy up°ªam c⁄√˘i⁄: %d", 
pc
->
fd
);

1816 #i‡(
NGX_STREAM_SSL
)

1817 i‡(
pc
->
s¶
) {

1818 
pc
->
s¶
->
no_waô_shutdown
 = 1;

1819 (Ë
	`ngx_s¶_shutdown
(
pc
);

1823 
	`ngx_˛o£_c⁄√˘i⁄
(
pc
);

1824 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

1827 
noup°ªam
:

1829 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
rc
);

1830 
	}
}

1833 
u_ch¨
 *

1834 
	$ngx_°ªam_¥oxy_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

1836 
u_ch¨
 *
p
;

1837 
ngx_c⁄√˘i⁄_t
 *
pc
;

1838 
ngx_°ªam_£ssi⁄_t
 *
s
;

1839 
ngx_°ªam_up°ªam_t
 *
u
;

1841 
s
 = 
log
->
d©a
;

1843 
u
 = 
s
->
up°ªam
;

1845 
p
 = 
buf
;

1847 i‡(
u
->
≥î
.
«me
) {

1848 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", up°ªam: \"%V\"", 
u
->
≥î
.
«me
);

1849 
Àn
 -
p
 - 
buf
;

1852 
pc
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1854 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
,

1857 
s
->
ª˚ived
, s->
c⁄√˘i⁄
->
£¡
,

1858 
u
->
ª˚ived
, 
pc
 ?Öc->
£¡
 : 0);

1860  
p
;

1861 
	}
}

1865 
	$ngx_°ªam_¥oxy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1867 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
c⁄f
;

1869 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_¥oxy_§v_c⁄f_t
));

1870 i‡(
c⁄f
 =
NULL
) {

1871  
NULL
;

1890 
c⁄f
->
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1891 
c⁄f
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1892 
c⁄f
->
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1893 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1894 
c⁄f
->
u∂ﬂd_øã
 = 
NGX_CONF_UNSET_SIZE
;

1895 
c⁄f
->
dow∆ﬂd_øã
 = 
NGX_CONF_UNSET_SIZE
;

1896 
c⁄f
->
ª•⁄£s
 = 
NGX_CONF_UNSET_UINT
;

1897 
c⁄f
->
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

1898 
c⁄f
->
√xt_up°ªam
 = 
NGX_CONF_UNSET
;

1899 
c⁄f
->
¥oxy_¥Ÿocﬁ
 = 
NGX_CONF_UNSET
;

1900 
c⁄f
->
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1902 #i‡(
NGX_STREAM_SSL
)

1903 
c⁄f
->
s¶_íabÀ
 = 
NGX_CONF_UNSET
;

1904 
c⁄f
->
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

1905 
c⁄f
->
s¶_£rvî_«me
 = 
NGX_CONF_UNSET
;

1906 
c⁄f
->
s¶_vîify
 = 
NGX_CONF_UNSET
;

1907 
c⁄f
->
s¶_vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

1908 
c⁄f
->
s¶_∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

1911  
c⁄f
;

1912 
	}
}

1916 
	$ngx_°ªam_¥oxy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1918 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1919 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

1921 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
c⁄√˘_timeout
,

1922 
¥ev
->
c⁄√˘_timeout
, 60000);

1924 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
,

1925 
¥ev
->
timeout
, 10 * 60000);

1927 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
√xt_up°ªam_timeout
,

1928 
¥ev
->
√xt_up°ªam_timeout
, 0);

1930 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
,

1931 
¥ev
->
buf„r_size
, 16384);

1933 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
u∂ﬂd_øã
,

1934 
¥ev
->
u∂ﬂd_øã
, 0);

1936 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
dow∆ﬂd_øã
,

1937 
¥ev
->
dow∆ﬂd_øã
, 0);

1939 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª•⁄£s
,

1940 
¥ev
->
ª•⁄£s
, 
NGX_MAX_INT32_VALUE
);

1942 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
√xt_up°ªam_åõs
,

1943 
¥ev
->
√xt_up°ªam_åõs
, 0);

1945 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
√xt_up°ªam
, 
¥ev
->next_upstream, 1);

1947 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥oxy_¥Ÿocﬁ
, 
¥ev
->proxy_protocol, 0);

1949 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
loˇl
, 
¥ev
->loˇl, 
NULL
);

1951 #i‡(
NGX_STREAM_SSL
)

1953 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
s¶_íabÀ
, 
¥ev
->ssl_enable, 0);

1955 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
s¶_£ssi⁄_ªu£
,

1956 
¥ev
->
s¶_£ssi⁄_ªu£
, 1);

1958 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

1959 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


1960 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

1962 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers, "DEFAULT");

1964 i‡(
c⁄f
->
s¶_«me
 =
NULL
) {

1965 
c⁄f
->
s¶_«me
 = 
¥ev
->ssl_name;

1968 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
s¶_£rvî_«me
, 
¥ev
->ssl_server_name, 0);

1970 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
s¶_vîify
, 
¥ev
->ssl_verify, 0);

1972 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
s¶_vîify_dïth
,

1973 
¥ev
->
s¶_vîify_dïth
, 1);

1975 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_åu°ed_˚πifiˇã
,

1976 
¥ev
->
s¶_åu°ed_˚πifiˇã
, "");

1978 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_¸l
, 
¥ev
->ssl_crl, "");

1980 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã
,

1981 
¥ev
->
s¶_˚πifiˇã
, "");

1983 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã_key
,

1984 
¥ev
->
s¶_˚πifiˇã_key
, "");

1986 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
s¶_∑ssw‹ds
, 
¥ev
->s¶_∑ssw‹ds, 
NULL
);

1988 i‡(
c⁄f
->
s¶_íabÀ
 && 
	`ngx_°ªam_¥oxy_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

1989  
NGX_CONF_ERROR
;

1994  
NGX_CONF_OK
;

1995 
	}
}

1998 #i‡(
NGX_STREAM_SSL
)

2000 
ngx_öt_t


2001 
	$ngx_°ªam_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
)

2003 
ngx_poﬁ_˛ónup_t
 *
˛n
;

2005 
pscf
->
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

2006 i‡(
pscf
->
s¶
 =
NULL
) {

2007  
NGX_ERROR
;

2010 
pscf
->
s¶
->
log
 = 
cf
->log;

2012 i‡(
	`ngx_s¶_¸óã
(
pscf
->
s¶
,Öscf->
s¶_¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

2013  
NGX_ERROR
;

2016 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

2017 i‡(
˛n
 =
NULL
) {

2018  
NGX_ERROR
;

2021 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

2022 
˛n
->
d©a
 = 
pscf
->
s¶
;

2024 i‡(
pscf
->
s¶_˚πifiˇã
.
Àn
) {

2026 i‡(
pscf
->
s¶_˚πifiˇã_key
.
Àn
 == 0) {

2027 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2029 "f‹ cîtifiˇã \"%V\"", &
pscf
->
s¶_˚πifiˇã
);

2030  
NGX_ERROR
;

2033 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
pscf
->
s¶
, &pscf->
s¶_˚πifiˇã
,

2034 &
pscf
->
s¶_˚πifiˇã_key
,Öscf->
s¶_∑ssw‹ds
)

2035 !
NGX_OK
)

2037  
NGX_ERROR
;

2041 i‡(
	`ngx_s¶_cùhîs
(
cf
, 
pscf
->
s¶
, &pscf->
s¶_cùhîs
, 0Ë!
NGX_OK
) {

2042  
NGX_ERROR
;

2045 i‡(
pscf
->
s¶_vîify
) {

2046 i‡(
pscf
->
s¶_åu°ed_˚πifiˇã
.
Àn
 == 0) {

2047 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2049  
NGX_ERROR
;

2052 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, 
pscf
->
s¶
,

2053 &
pscf
->
s¶_åu°ed_˚πifiˇã
,

2054 
pscf
->
s¶_vîify_dïth
)

2055 !
NGX_OK
)

2057  
NGX_ERROR
;

2060 i‡(
	`ngx_s¶_¸l
(
cf
, 
pscf
->
s¶
, &pscf->
s¶_¸l
Ë!
NGX_OK
) {

2061  
NGX_ERROR
;

2065 i‡(
	`ngx_s¶_˛õ¡_£ssi⁄_ˇche
(
cf
, 
pscf
->
s¶
,Öscf->
s¶_£ssi⁄_ªu£
)

2066 !
NGX_OK
)

2068  
NGX_ERROR
;

2071  
NGX_OK
;

2072 
	}
}

2078 
	$ngx_°ªam_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2080 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
 = 
c⁄f
;

2082 
ngx_uæ_t
 
u
;

2083 
ngx_°r_t
 *
vÆue
, *
uæ
;

2084 
ngx_°ªam_com∂ex_vÆue_t
 
cv
;

2085 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

2086 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

2088 i‡(
pscf
->
up°ªam
 ||Öscf->
up°ªam_vÆue
) {

2092 
cscf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

2094 
cscf
->
h™dÀr
 = 
ngx_°ªam_¥oxy_h™dÀr
;

2096 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2098 
uæ
 = &
vÆue
[1];

2100 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

2102 
ccv
.
cf
 = cf;

2103 
ccv
.
vÆue
 = 
uæ
;

2104 
ccv
.
com∂ex_vÆue
 = &
cv
;

2106 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2107  
NGX_CONF_ERROR
;

2110 i‡(
cv
.
Àngths
) {

2111 
pscf
->
up°ªam_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

2112 (
ngx_°ªam_com∂ex_vÆue_t
));

2113 i‡(
pscf
->
up°ªam_vÆue
 =
NULL
) {

2114  
NGX_CONF_ERROR
;

2117 *
pscf
->
up°ªam_vÆue
 = 
cv
;

2119  
NGX_CONF_OK
;

2122 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2124 
u
.
uæ
 = *url;

2125 
u
.
no_ªsﬁve
 = 1;

2127 
pscf
->
up°ªam
 = 
	`ngx_°ªam_up°ªam_add
(
cf
, &
u
, 0);

2128 i‡(
pscf
->
up°ªam
 =
NULL
) {

2129  
NGX_CONF_ERROR
;

2132  
NGX_CONF_OK
;

2133 
	}
}

2137 
	$ngx_°ªam_¥oxy_böd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2139 
ngx_°ªam_¥oxy_§v_c⁄f_t
 *
pscf
 = 
c⁄f
;

2141 
ngx_öt_t
 
rc
;

2142 
ngx_°r_t
 *
vÆue
;

2143 
ngx_°ªam_com∂ex_vÆue_t
 
cv
;

2144 
ngx_°ªam_up°ªam_loˇl_t
 *
loˇl
;

2145 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

2147 i‡(
pscf
->
loˇl
 !
NGX_CONF_UNSET_PTR
) {

2151 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2153 i‡(
cf
->
¨gs
->
√…s
 =2 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2154 
pscf
->
loˇl
 = 
NULL
;

2155  
NGX_CONF_OK
;

2158 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

2160 
ccv
.
cf
 = cf;

2161 
ccv
.
vÆue
 = &value[1];

2162 
ccv
.
com∂ex_vÆue
 = &
cv
;

2164 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2165  
NGX_CONF_ERROR
;

2168 
loˇl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_loˇl_t
));

2169 i‡(
loˇl
 =
NULL
) {

2170  
NGX_CONF_ERROR
;

2173 
pscf
->
loˇl
 =Üocal;

2175 i‡(
cv
.
Àngths
) {

2176 
loˇl
->
vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_com∂ex_vÆue_t
));

2177 i‡(
loˇl
->
vÆue
 =
NULL
) {

2178  
NGX_CONF_ERROR
;

2181 *
loˇl
->
vÆue
 = 
cv
;

2184 
loˇl
->
addr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

2185 i‡(
loˇl
->
addr
 =
NULL
) {

2186  
NGX_CONF_ERROR
;

2189 
rc
 = 
	`ngx_∑r£_addr_p‹t
(
cf
->
poﬁ
, 
loˇl
->
addr
, 
vÆue
[1].
d©a
,

2190 
vÆue
[1].
Àn
);

2192 
rc
) {

2193 
NGX_OK
:

2194 
loˇl
->
addr
->
«me
 = 
vÆue
[1];

2197 
NGX_DECLINED
:

2198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2199 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

2203  
NGX_CONF_ERROR
;

2207 i‡(
cf
->
¨gs
->
√…s
 > 2) {

2208 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "transparent") == 0) {

2209 #i‡(
NGX_HAVE_TRANSPARENT_PROXY
)

2210 
ngx_c‹e_c⁄f_t
 *
ccf
;

2212 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
,

2213 
ngx_c‹e_moduÀ
);

2215 
ccf
->
å™•¨ít
 = 1;

2216 
loˇl
->
å™•¨ít
 = 1;

2218 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2223 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2224 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

2225  
NGX_CONF_ERROR
;

2229  
NGX_CONF_OK
;

2230 
	}
}

	@src/stream/ngx_stream_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ngx_¨øy_t
 *
	m‰om
;

15 } 
	tngx_°ªam_ªÆù_§v_c⁄f_t
;

19 
sockaddr
 *
	msockaddr
;

20 
sockÀn_t
 
	msockÀn
;

21 
ngx_°r_t
 
	maddr_ãxt
;

22 } 
	tngx_°ªam_ªÆù_˘x_t
;

25 
ngx_öt_t
 
ngx_°ªam_ªÆù_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
);

26 
ngx_öt_t
 
ngx_°ªam_ªÆù_£t_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

27 
ngx_addr_t
 *
addr
);

28 *
ngx_°ªam_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_°ªam_ªÆù_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_°ªam_ªÆù_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

32 *
chûd
);

33 
ngx_öt_t
 
ngx_°ªam_ªÆù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

34 
ngx_öt_t
 
ngx_°ªam_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_öt_t
 
ngx_°ªam_ªÆù_ªmŸe_addr_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

38 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
ngx_°ªam_ªÆù_ªmŸe_p‹t_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

40 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

43 
ngx_comm™d_t
 
	gngx_°ªam_ªÆù_comm™ds
[] = {

45 { 
ngx_°rög
("set_real_ip_from"),

46 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

47 
ngx_°ªam_ªÆù_‰om
,

48 
NGX_STREAM_SRV_CONF_OFFSET
,

50 
NULL
 },

52 
ngx_nuŒ_comm™d


56 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_ªÆù_moduÀ_˘x
 = {

57 
ngx_°ªam_ªÆù_add_v¨übÀs
,

58 
ngx_°ªam_ªÆù_öô
,

60 
NULL
,

61 
NULL
,

63 
ngx_°ªam_ªÆù_¸óã_§v_c⁄f
,

64 
ngx_°ªam_ªÆù_mîge_§v_c⁄f


68 
ngx_moduÀ_t
 
	gngx_°ªam_ªÆù_moduÀ
 = {

69 
NGX_MODULE_V1
,

70 &
ngx_°ªam_ªÆù_moduÀ_˘x
,

71 
ngx_°ªam_ªÆù_comm™ds
,

72 
NGX_STREAM_MODULE
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NGX_MODULE_V1_PADDING


84 
ngx_°ªam_v¨übÀ_t
 
	gngx_°ªam_ªÆù_v¨s
[] = {

86 { 
ngx_°rög
("ªÆù_ªmŸe_addr"), 
NULL
,

87 
ngx_°ªam_ªÆù_ªmŸe_addr_v¨übÀ
, 0, 0, 0 },

89 { 
ngx_°rög
("ªÆù_ªmŸe_p‹t"), 
NULL
,

90 
ngx_°ªam_ªÆù_ªmŸe_p‹t_v¨übÀ
, 0, 0, 0 },

92 
ngx_°ªam_nuŒ_v¨übÀ


96 
ngx_öt_t


97 
	$ngx_°ªam_ªÆù_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

99 
ngx_addr_t
 
addr
;

100 
ngx_c⁄√˘i⁄_t
 *
c
;

101 
ngx_°ªam_ªÆù_§v_c⁄f_t
 *
rscf
;

103 
rscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_ªÆù_moduÀ
);

105 i‡(
rscf
->
‰om
 =
NULL
) {

106  
NGX_DECLINED
;

109 
c
 = 
s
->
c⁄√˘i⁄
;

111 i‡(
c
->
¥oxy_¥Ÿocﬁ_addr
.
Àn
 == 0) {

112  
NGX_DECLINED
;

115 i‡(
	`ngx_cidr_m©ch
(
c
->
sockaddr
, 
rscf
->
‰om
Ë!
NGX_OK
) {

116  
NGX_DECLINED
;

119 i‡(
	`ngx_∑r£_addr
(
c
->
poﬁ
, &
addr
, c->
¥oxy_¥Ÿocﬁ_addr
.
d©a
,

120 
c
->
¥oxy_¥Ÿocﬁ_addr
.
Àn
)

121 !
NGX_OK
)

123  
NGX_DECLINED
;

126 
	`ngx_öë_£t_p‹t
(
addr
.
sockaddr
, 
c
->
¥oxy_¥Ÿocﬁ_p‹t
);

128  
	`ngx_°ªam_ªÆù_£t_addr
(
s
, &
addr
);

129 
	}
}

132 
ngx_öt_t


133 
	$ngx_°ªam_ªÆù_£t_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
addr
)

135 
size_t
 
Àn
;

136 
u_ch¨
 *
p
;

137 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

138 
ngx_c⁄√˘i⁄_t
 *
c
;

139 
ngx_°ªam_ªÆù_˘x_t
 *
˘x
;

141 
c
 = 
s
->
c⁄√˘i⁄
;

143 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_°ªam_ªÆù_˘x_t
));

144 i‡(
˘x
 =
NULL
) {

145  
NGX_ERROR
;

148 
Àn
 = 
	`ngx_sock_¡›
(
addr
->
sockaddr
,áddr->
sockÀn
, 
ãxt
,

149 
NGX_SOCKADDR_STRLEN
, 0);

150 i‡(
Àn
 == 0) {

151  
NGX_ERROR
;

154 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

155 i‡(
p
 =
NULL
) {

156  
NGX_ERROR
;

159 
	`ngx_mem˝y
(
p
, 
ãxt
, 
Àn
);

161 
	`ngx_°ªam_£t_˘x
(
s
, 
˘x
, 
ngx_°ªam_ªÆù_moduÀ
);

163 
˘x
->
sockaddr
 = 
c
->sockaddr;

164 
˘x
->
sockÀn
 = 
c
->socklen;

165 
˘x
->
addr_ãxt
 = 
c
->addr_text;

167 
c
->
sockaddr
 = 
addr
->sockaddr;

168 
c
->
sockÀn
 = 
addr
->socklen;

169 
c
->
addr_ãxt
.
Àn
 =Üen;

170 
c
->
addr_ãxt
.
d©a
 = 
p
;

172  
NGX_DECLINED
;

173 
	}
}

177 
	$ngx_°ªam_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

179 
ngx_°ªam_ªÆù_§v_c⁄f_t
 *
rscf
 = 
c⁄f
;

181 
ngx_öt_t
 
rc
;

182 
ngx_°r_t
 *
vÆue
;

183 
ngx_uæ_t
 
u
;

184 
ngx_cidr_t
 
c
, *
cidr
;

185 
ngx_uöt_t
 
i
;

186 
sockaddr_ö
 *
sö
;

187 #i‡(
NGX_HAVE_INET6
)

188 
sockaddr_ö6
 *
sö6
;

191 
vÆue
 = 
cf
->
¨gs
->
ñts
;

193 i‡(
rscf
->
‰om
 =
NULL
) {

194 
rscf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

195 (
ngx_cidr_t
));

196 i‡(
rscf
->
‰om
 =
NULL
) {

197  
NGX_CONF_ERROR
;

201 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

203 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

204 
cidr
 = 
	`ngx_¨øy_push
(
rscf
->
‰om
);

205 i‡(
cidr
 =
NULL
) {

206  
NGX_CONF_ERROR
;

209 
cidr
->
Ámûy
 = 
AF_UNIX
;

210  
NGX_CONF_OK
;

215 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

217 i‡(
rc
 !
NGX_ERROR
) {

218 i‡(
rc
 =
NGX_DONE
) {

219 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

221 &
vÆue
[1]);

224 
cidr
 = 
	`ngx_¨øy_push
(
rscf
->
‰om
);

225 i‡(
cidr
 =
NULL
) {

226  
NGX_CONF_ERROR
;

229 *
cidr
 = 
c
;

231  
NGX_CONF_OK
;

234 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

235 
u
.
ho°
 = 
vÆue
[1];

237 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

238 i‡(
u
.
îr
) {

239 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

241 
u
.
îr
, &u.
ho°
);

244  
NGX_CONF_ERROR
;

247 
cidr
 = 
	`ngx_¨øy_push_n
(
rscf
->
‰om
, 
u
.
«ddrs
);

248 i‡(
cidr
 =
NULL
) {

249  
NGX_CONF_ERROR
;

252 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

254 
i
 = 0; i < 
u
.
«ddrs
; i++) {

255 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

257 
cidr
[
i
].
Ámûy
) {

259 #i‡(
NGX_HAVE_INET6
)

260 
AF_INET6
:

261 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

262 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

263 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

268 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

269 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

270 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

275  
NGX_CONF_OK
;

276 
	}
}

280 
	$ngx_°ªam_ªÆù_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_°ªam_ªÆù_§v_c⁄f_t
 *
c⁄f
;

284 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_ªÆù_§v_c⁄f_t
));

285 i‡(
c⁄f
 =
NULL
) {

286  
NULL
;

295  
c⁄f
;

296 
	}
}

300 
	$ngx_°ªam_ªÆù_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

302 
ngx_°ªam_ªÆù_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

303 
ngx_°ªam_ªÆù_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

305 i‡(
c⁄f
->
‰om
 =
NULL
) {

306 
c⁄f
->
‰om
 = 
¥ev
->from;

309  
NGX_CONF_OK
;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_°ªam_ªÆù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

316 
ngx_°ªam_v¨übÀ_t
 *
v¨
, *
v
;

318 
v
 = 
ngx_°ªam_ªÆù_v¨s
; v->
«me
.
Àn
; v++) {

319 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

320 i‡(
v¨
 =
NULL
) {

321  
NGX_ERROR
;

324 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

325 
v¨
->
d©a
 = 
v
->data;

328  
NGX_OK
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_°ªam_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

335 
ngx_°ªam_h™dÀr_±
 *
h
;

336 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

338 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

340 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_STREAM_POST_ACCEPT_PHASE
].
h™dÀrs
);

341 i‡(
h
 =
NULL
) {

342  
NGX_ERROR
;

345 *
h
 = 
ngx_°ªam_ªÆù_h™dÀr
;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_°ªam_ªÆù_ªmŸe_addr_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

353 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

355 
ngx_°r_t
 *
addr_ãxt
;

356 
ngx_°ªam_ªÆù_˘x_t
 *
˘x
;

358 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_ªÆù_moduÀ
);

360 
addr_ãxt
 = 
˘x
 ? &˘x->addr_ãxà: &
s
->
c⁄√˘i⁄
->addr_text;

362 
v
->
Àn
 = 
addr_ãxt
->len;

363 
v
->
vÆid
 = 1;

364 
v
->
no_ˇchóbÀ
 = 0;

365 
v
->
nŸ_found
 = 0;

366 
v
->
d©a
 = 
addr_ãxt
->data;

368  
NGX_OK
;

369 
	}
}

372 
ngx_öt_t


373 
	$ngx_°ªam_ªÆù_ªmŸe_p‹t_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

374 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

376 
ngx_uöt_t
 
p‹t
;

377 
sockaddr
 *
ß
;

378 
ngx_°ªam_ªÆù_˘x_t
 *
˘x
;

380 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_ªÆù_moduÀ
);

382 
ß
 = 
˘x
 ? ctx->
sockaddr
 : 
s
->
c⁄√˘i⁄
->sockaddr;

384 
v
->
Àn
 = 0;

385 
v
->
vÆid
 = 1;

386 
v
->
no_ˇchóbÀ
 = 0;

387 
v
->
nŸ_found
 = 0;

389 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, ("65535") - 1);

390 i‡(
v
->
d©a
 =
NULL
) {

391  
NGX_ERROR
;

394 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
ß
);

396 i‡(
p‹t
 > 0 &&Öort < 65536) {

397 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

400  
NGX_OK
;

401 
	}
}

	@src/stream/ngx_stream_return_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ngx_°ªam_com∂ex_vÆue_t
 
	mãxt
;

15 } 
	tngx_°ªam_ªtu∫_§v_c⁄f_t
;

19 
ngx_chaö_t
 *
	mout
;

20 } 
	tngx_°ªam_ªtu∫_˘x_t
;

23 
ngx_°ªam_ªtu∫_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
);

24 
ngx_°ªam_ªtu∫_wrôe_h™dÀr
(
ngx_evít_t
 *
ev
);

26 *
ngx_°ªam_ªtu∫_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_°ªam_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_°ªam_ªtu∫_comm™ds
[] = {

32 { 
ngx_°rög
("return"),

33 
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_°ªam_ªtu∫
,

35 
NGX_STREAM_SRV_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_ªtu∫_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
ngx_°ªam_ªtu∫_¸óã_§v_c⁄f
,

51 
NULL


55 
ngx_moduÀ_t
 
	gngx_°ªam_ªtu∫_moduÀ
 = {

56 
NGX_MODULE_V1
,

57 &
ngx_°ªam_ªtu∫_moduÀ_˘x
,

58 
ngx_°ªam_ªtu∫_comm™ds
,

59 
NGX_STREAM_MODULE
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NGX_MODULE_V1_PADDING


72 
	$ngx_°ªam_ªtu∫_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

74 
ngx_°r_t
 
ãxt
;

75 
ngx_buf_t
 *
b
;

76 
ngx_c⁄√˘i⁄_t
 *
c
;

77 
ngx_°ªam_ªtu∫_˘x_t
 *
˘x
;

78 
ngx_°ªam_ªtu∫_§v_c⁄f_t
 *
rscf
;

80 
c
 = 
s
->
c⁄√˘i⁄
;

82 
c
->
log
->
a˘i⁄
 = "returningÅext";

84 
rscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_ªtu∫_moduÀ
);

86 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, &
rscf
->
ãxt
, &ãxtË!
NGX_OK
) {

87 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

91 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

92 "°ªamÑëu∫Åext: \"%V\"", &
ãxt
);

94 i‡(
ãxt
.
Àn
 == 0) {

95 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_OK
);

99 
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_°ªam_ªtu∫_˘x_t
));

100 i‡(
˘x
 =
NULL
) {

101 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

105 
	`ngx_°ªam_£t_˘x
(
s
, 
˘x
, 
ngx_°ªam_ªtu∫_moduÀ
);

107 
b
 = 
	`ngx_ˇŒoc_buf
(
c
->
poﬁ
);

108 i‡(
b
 =
NULL
) {

109 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

113 
b
->
mem‹y
 = 1;

114 
b
->
pos
 = 
ãxt
.
d©a
;

115 
b
->
œ°
 = 
ãxt
.
d©a
 +Åext.
Àn
;

116 
b
->
œ°_buf
 = 1;

118 
˘x
->
out
 = 
	`ngx_Æloc_chaö_lök
(
c
->
poﬁ
);

119 i‡(
˘x
->
out
 =
NULL
) {

120 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

124 
˘x
->
out
->
buf
 = 
b
;

125 
˘x
->
out
->
√xt
 = 
NULL
;

127 
c
->
wrôe
->
h™dÀr
 = 
ngx_°ªam_ªtu∫_wrôe_h™dÀr
;

129 
	`ngx_°ªam_ªtu∫_wrôe_h™dÀr
(
c
->
wrôe
);

130 
	}
}

134 
	$ngx_°ªam_ªtu∫_wrôe_h™dÀr
(
ngx_evít_t
 *
ev
)

136 
ngx_c⁄√˘i⁄_t
 *
c
;

137 
ngx_°ªam_£ssi⁄_t
 *
s
;

138 
ngx_°ªam_ªtu∫_˘x_t
 *
˘x
;

140 
c
 = 
ev
->
d©a
;

141 
s
 = 
c
->
d©a
;

143 i‡(
ev
->
timedout
) {

144 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "connectionÅimed out");

145 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_OK
);

149 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_ªtu∫_moduÀ
);

151 i‡(
	`ngx_°ªam_t›_fûãr
(
s
, 
˘x
->
out
, 1Ë=
NGX_ERROR
) {

152 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

156 
˘x
->
out
 = 
NULL
;

158 i‡(!
c
->
buf„ªd
) {

159 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

161 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_OK
);

165 i‡(
	`ngx_h™dÀ_wrôe_evít
(
ev
, 0Ë!
NGX_OK
) {

166 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

170 
	`ngx_add_timî
(
ev
, 5000);

171 
	}
}

175 
	$ngx_°ªam_ªtu∫_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

177 
ngx_°ªam_ªtu∫_§v_c⁄f_t
 *
c⁄f
;

179 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_ªtu∫_§v_c⁄f_t
));

180 i‡(
c⁄f
 =
NULL
) {

181  
NULL
;

184  
c⁄f
;

185 
	}
}

189 
	$ngx_°ªam_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

191 
ngx_°ªam_ªtu∫_§v_c⁄f_t
 *
rscf
 = 
c⁄f
;

193 
ngx_°r_t
 *
vÆue
;

194 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

195 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

197 i‡(
rscf
->
ãxt
.
vÆue
.
d©a
) {

201 
vÆue
 = 
cf
->
¨gs
->
ñts
;

203 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

205 
ccv
.
cf
 = cf;

206 
ccv
.
vÆue
 = &value[1];

207 
ccv
.
com∂ex_vÆue
 = &
rscf
->
ãxt
;

209 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

210  
NGX_CONF_ERROR
;

213 
cscf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

215 
cscf
->
h™dÀr
 = 
ngx_°ªam_ªtu∫_h™dÀr
;

217  
NGX_CONF_OK
;

218 
	}
}

	@src/stream/ngx_stream_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 
ngx_öt_t
 
ngx_°ªam_s¸ùt_öô_¨øys
(

14 
ngx_°ªam_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_°ªam_s¸ùt_d⁄e
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
);

16 
ngx_öt_t
 
ngx_°ªam_s¸ùt_add_c›y_code
(

17 
ngx_°ªam_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

18 
ngx_öt_t
 
ngx_°ªam_s¸ùt_add_v¨_code
(

19 
ngx_°ªam_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_°ªam_s¸ùt_add_ˇ±uª_code
(

22 
ngx_°ªam_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
);

24 
ngx_öt_t
 
ngx_°ªam_s¸ùt_add_fuŒ_«me_code
(

25 
ngx_°ªam_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_°ªam_s¸ùt_fuŒ_«me_Àn_code
(

27 
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

28 
ngx_°ªam_s¸ùt_fuŒ_«me_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

31 
	#ngx_°ªam_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_°ªam_s¸ùt_exô_code


	)

33 
uöçå_t
 
	gngx_°ªam_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

37 
	$ngx_°ªam_s¸ùt_Êush_com∂ex_vÆue
(
ngx_°ªam_£ssi⁄_t
 *
s
,

38 
ngx_°ªam_com∂ex_vÆue_t
 *
vÆ
)

40 
ngx_uöt_t
 *
ödex
;

42 
ödex
 = 
vÆ
->
Êushes
;

44 i‡(
ödex
) {

45 *
ödex
 !(
ngx_uöt_t
) -1) {

47 i‡(
s
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

48 
s
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

49 
s
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

52 
ödex
++;

55 
	}
}

58 
ngx_öt_t


59 
	$ngx_°ªam_com∂ex_vÆue
(
ngx_°ªam_£ssi⁄_t
 *
s
,

60 
ngx_°ªam_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
)

62 
size_t
 
Àn
;

63 
ngx_°ªam_s¸ùt_code_±
 
code
;

64 
ngx_°ªam_s¸ùt_ígöe_t
 
e
;

65 
ngx_°ªam_s¸ùt_Àn_code_±
 
lcode
;

67 i‡(
vÆ
->
Àngths
 =
NULL
) {

68 *
vÆue
 = 
vÆ
->value;

69  
NGX_OK
;

72 
	`ngx_°ªam_s¸ùt_Êush_com∂ex_vÆue
(
s
, 
vÆ
);

74 
	`ngx_memzîo
(&
e
, (
ngx_°ªam_s¸ùt_ígöe_t
));

76 
e
.
ù
 = 
vÆ
->
Àngths
;

77 
e
.
£ssi⁄
 = 
s
;

78 
e
.
Êushed
 = 1;

80 
Àn
 = 0;

82 *(
uöçå_t
 *Ë
e
.
ù
) {

83 
lcode
 = *(
ngx_°ªam_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

84 
Àn
 +
	`lcode
(&
e
);

87 
vÆue
->
Àn
 =Üen;

88 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

89 i‡(
vÆue
->
d©a
 =
NULL
) {

90  
NGX_ERROR
;

93 
e
.
ù
 = 
vÆ
->
vÆues
;

94 
e
.
pos
 = 
vÆue
->
d©a
;

95 
e
.
buf
 = *
vÆue
;

97 *(
uöçå_t
 *Ë
e
.
ù
) {

98 
code
 = *(
ngx_°ªam_s¸ùt_code_±
 *Ë
e
.
ù
;

99 
	`code
((
ngx_°ªam_s¸ùt_ígöe_t
 *Ë&
e
);

102 *
vÆue
 = 
e
.
buf
;

104  
NGX_OK
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_°ªam_compûe_com∂ex_vÆue
(
ngx_°ªam_compûe_com∂ex_vÆue_t
 *
ccv
)

111 
ngx_°r_t
 *
v
;

112 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

113 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

114 
ngx_°ªam_s¸ùt_compûe_t
 
sc
;

116 
v
 = 
ccv
->
vÆue
;

118 
nv
 = 0;

119 
nc
 = 0;

121 
i
 = 0; i < 
v
->
Àn
; i++) {

122 i‡(
v
->
d©a
[
i
] == '$') {

123 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

124 
nc
++;

127 
nv
++;

132 i‡((
v
->
Àn
 =0 || v->
d©a
[0] != '$')

133 && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
))

135 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

136  
NGX_ERROR
;

139 
ccv
->
c⁄f_¥efix
 = 0;

140 
ccv
->
roŸ_¥efix
 = 0;

143 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

144 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

145 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

146 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

148 i‡(
nv
 =0 && 
nc
 == 0) {

149  
NGX_OK
;

152 
n
 = 
nv
 + 1;

154 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

155 !
NGX_OK
)

157  
NGX_ERROR
;

160 
n
 = 
nv
 * (2 * (
ngx_°ªam_s¸ùt_c›y_code_t
)

161 + (
ngx_°ªam_s¸ùt_v¨_code_t
))

162 + (
uöçå_t
);

164 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

165  
NGX_ERROR
;

168 
n
 = (
nv
 * (2 * (
ngx_°ªam_s¸ùt_c›y_code_t
)

169 + (
ngx_°ªam_s¸ùt_v¨_code_t
))

170 + (
uöçå_t
)

171 + 
v
->
Àn


172 + (
uöçå_t
) - 1)

173 & ~((
uöçå_t
) - 1);

175 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

176  
NGX_ERROR
;

179 
pf
 = &
Êushes
;

180 
∂
 = &
Àngths
;

181 
pv
 = &
vÆues
;

183 
	`ngx_memzîo
(&
sc
, (
ngx_°ªam_s¸ùt_compûe_t
));

185 
sc
.
cf
 = 
ccv
->cf;

186 
sc
.
sour˚
 = 
v
;

187 
sc
.
Êushes
 = &
pf
;

188 
sc
.
Àngths
 = &
∂
;

189 
sc
.
vÆues
 = &
pv
;

190 
sc
.
com∂ëe_Àngths
 = 1;

191 
sc
.
com∂ëe_vÆues
 = 1;

192 
sc
.
zîo
 = 
ccv
->zero;

193 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

194 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

196 i‡(
	`ngx_°ªam_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

197  
NGX_ERROR
;

200 i‡(
Êushes
.
√…s
) {

201 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

202 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

205 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

206 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

208  
NGX_OK
;

209 
	}
}

213 
	$ngx_°ªam_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

214 *
c⁄f
)

216 *
p
 = 
c⁄f
;

218 
ngx_°r_t
 *
vÆue
;

219 
ngx_°ªam_com∂ex_vÆue_t
 **
cv
;

220 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

222 
cv
 = (
ngx_°ªam_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

224 i‡(*
cv
 !
NULL
) {

228 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_com∂ex_vÆue_t
));

229 i‡(*
cv
 =
NULL
) {

230  
NGX_CONF_ERROR
;

233 
vÆue
 = 
cf
->
¨gs
->
ñts
;

235 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

237 
ccv
.
cf
 = cf;

238 
ccv
.
vÆue
 = &value[1];

239 
ccv
.
com∂ex_vÆue
 = *
cv
;

241 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

242  
NGX_CONF_ERROR
;

245  
NGX_CONF_OK
;

246 
	}
}

249 
ngx_uöt_t


250 
	$ngx_°ªam_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

252 
ngx_uöt_t
 
i
, 
n
;

254 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

255 i‡(
vÆue
->
d©a
[
i
] == '$') {

256 
n
++;

260  
n
;

261 
	}
}

264 
ngx_öt_t


265 
	$ngx_°ªam_s¸ùt_compûe
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
)

267 
u_ch¨
 
ch
;

268 
ngx_°r_t
 
«me
;

269 
ngx_uöt_t
 
i
, 
bøckë
;

271 i‡(
	`ngx_°ªam_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

272  
NGX_ERROR
;

275 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

277 
«me
.
Àn
 = 0;

279 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

281 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

282 
övÆid_v¨übÀ
;

285 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

286 #i‡(
NGX_PCRE
)

287 
ngx_uöt_t
 
n
;

289 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

291 i‡(
	`ngx_°ªam_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

292  
NGX_ERROR
;

295 
i
++;

299 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

301 "PCREÜibøry", 
sc
->
sour˚
->
d©a
[
i
]);

302  
NGX_ERROR
;

306 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

307 
bøckë
 = 1;

309 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

310 
övÆid_v¨übÀ
;

313 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

316 
bøckë
 = 0;

317 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

320  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

321 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

323 i‡(
ch
 ='}' && 
bøckë
) {

324 
i
++;

325 
bøckë
 = 0;

329 i‡((
ch
 >= 'A' && ch <= 'Z')

330 || (
ch
 >= 'a' && ch <= 'z')

331 || (
ch
 >= '0' && ch <= '9')

332 || 
ch
 == '_')

340 i‡(
bøckë
) {

341 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

343 "v¨übÀ i†missög", &
«me
);

344  
NGX_ERROR
;

347 i‡(
«me
.
Àn
 == 0) {

348 
övÆid_v¨übÀ
;

351 
sc
->
v¨übÀs
++;

353 i‡(
	`ngx_°ªam_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

354  
NGX_ERROR
;

360 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

362 
i
 < 
sc
->
sour˚
->
Àn
) {

364 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

368 
i
++;

369 
«me
.
Àn
++;

372 
sc
->
size
 +
«me
.
Àn
;

374 i‡(
	`ngx_°ªam_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

375 !
NGX_OK
)

377  
NGX_ERROR
;

381  
	`ngx_°ªam_s¸ùt_d⁄e
(
sc
);

383 
övÆid_v¨übÀ
:

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

387  
NGX_ERROR
;

388 
	}
}

391 
u_ch¨
 *

392 
	$ngx_°ªam_s¸ùt_run
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
vÆue
,

393 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

395 
ngx_uöt_t
 
i
;

396 
ngx_°ªam_s¸ùt_code_±
 
code
;

397 
ngx_°ªam_s¸ùt_ígöe_t
 
e
;

398 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

399 
ngx_°ªam_s¸ùt_Àn_code_±
 
lcode
;

401 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

403 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

404 i‡(
s
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

405 
s
->
v¨übÀs
[
i
].
vÆid
 = 0;

406 
s
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

410 
	`ngx_memzîo
(&
e
, (
ngx_°ªam_s¸ùt_ígöe_t
));

412 
e
.
ù
 = 
code_Àngths
;

413 
e
.
£ssi⁄
 = 
s
;

414 
e
.
Êushed
 = 1;

416 *(
uöçå_t
 *Ë
e
.
ù
) {

417 
lcode
 = *(
ngx_°ªam_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

418 
Àn
 +
	`lcode
(&
e
);

422 
vÆue
->
Àn
 =Üen;

423 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

424 i‡(
vÆue
->
d©a
 =
NULL
) {

425  
NULL
;

428 
e
.
ù
 = 
code_vÆues
;

429 
e
.
pos
 = 
vÆue
->
d©a
;

431 *(
uöçå_t
 *Ë
e
.
ù
) {

432 
code
 = *(
ngx_°ªam_s¸ùt_code_±
 *Ë
e
.
ù
;

433 
	`code
((
ngx_°ªam_s¸ùt_ígöe_t
 *Ë&
e
);

436  
e
.
pos
;

437 
	}
}

441 
	$ngx_°ªam_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_°ªam_£ssi⁄_t
 *
s
,

442 
ngx_¨øy_t
 *
ödi˚s
)

444 
ngx_uöt_t
 
n
, *
ödex
;

446 i‡(
ödi˚s
) {

447 
ödex
 = 
ödi˚s
->
ñts
;

448 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

449 i‡(
s
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

450 
s
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

451 
s
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_°ªam_s¸ùt_öô_¨øys
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
)

461 
ngx_uöt_t
 
n
;

463 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

464 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

465 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

466 i‡(*
sc
->
Êushes
 =
NULL
) {

467  
NGX_ERROR
;

471 i‡(*
sc
->
Àngths
 =
NULL
) {

472 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_°ªam_s¸ùt_c›y_code_t
)

473 + (
ngx_°ªam_s¸ùt_v¨_code_t
))

474 + (
uöçå_t
);

476 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

477 i‡(*
sc
->
Àngths
 =
NULL
) {

478  
NGX_ERROR
;

482 i‡(*
sc
->
vÆues
 =
NULL
) {

483 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_°ªam_s¸ùt_c›y_code_t
)

484 + (
ngx_°ªam_s¸ùt_v¨_code_t
))

485 + (
uöçå_t
)

486 + 
sc
->
sour˚
->
Àn


487 + (
uöçå_t
) - 1)

488 & ~((
uöçå_t
) - 1);

490 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

491 i‡(*
sc
->
vÆues
 =
NULL
) {

492  
NGX_ERROR
;

496 
sc
->
v¨übÀs
 = 0;

498  
NGX_OK
;

499 
	}
}

502 
ngx_öt_t


503 
	$ngx_°ªam_s¸ùt_d⁄e
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
)

505 
ngx_°r_t
 
zîo
;

506 
uöçå_t
 *
code
;

508 i‡(
sc
->
zîo
) {

510 
zîo
.
Àn
 = 1;

511 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

513 i‡(
	`ngx_°ªam_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

514  
NGX_ERROR
;

518 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

519 i‡(
	`ngx_°ªam_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

520  
NGX_ERROR
;

524 i‡(
sc
->
com∂ëe_Àngths
) {

525 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
),

526 
NULL
);

527 i‡(
code
 =
NULL
) {

528  
NGX_ERROR
;

531 *
code
 = (
uöçå_t
Ë
NULL
;

534 i‡(
sc
->
com∂ëe_vÆues
) {

535 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

536 &
sc
->
maö
);

537 i‡(
code
 =
NULL
) {

538  
NGX_ERROR
;

541 *
code
 = (
uöçå_t
Ë
NULL
;

544  
NGX_OK
;

545 
	}
}

549 
	$ngx_°ªam_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

551 
u_ch¨
 *
ñts
, **
p
;

552 *
√w
;

554 
ñts
 = 
codes
->elts;

556 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

557 i‡(
√w
 =
NULL
) {

558  
NULL
;

561 i‡(
code
) {

562 i‡(
ñts
 !
codes
->elts) {

563 
p
 = 
code
;

564 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

568  
√w
;

569 
	}
}

572 
ngx_öt_t


573 
	$ngx_°ªam_s¸ùt_add_c›y_code
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
,

574 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
)

576 
u_ch¨
 *
p
;

577 
size_t
 
size
, 
Àn
, 
zîo
;

578 
ngx_°ªam_s¸ùt_c›y_code_t
 *
code
;

580 
zîo
 = (
sc
->zîÿ&& 
œ°
);

581 
Àn
 = 
vÆue
->À¿+ 
zîo
;

583 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
Àngths
,

584 (
ngx_°ªam_s¸ùt_c›y_code_t
),

585 
NULL
);

586 i‡(
code
 =
NULL
) {

587  
NGX_ERROR
;

590 
code
->codê(
ngx_°ªam_s¸ùt_code_±
) (*)

591 
ngx_°ªam_s¸ùt_c›y_Àn_code
;

592 
code
->
Àn
 =Üen;

594 
size
 = ((
ngx_°ªam_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

595 & ~((
uöçå_t
) - 1);

597 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

598 i‡(
code
 =
NULL
) {

599  
NGX_ERROR
;

602 
code
->codê
ngx_°ªam_s¸ùt_c›y_code
;

603 
code
->
Àn
 =Üen;

605 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_°ªam_s¸ùt_c›y_code_t
),

606 
vÆue
->
d©a
, vÆue->
Àn
);

608 i‡(
zîo
) {

609 *
p
 = '\0';

610 
sc
->
zîo
 = 0;

613  
NGX_OK
;

614 
	}
}

617 
size_t


618 
	$ngx_°ªam_s¸ùt_c›y_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

620 
ngx_°ªam_s¸ùt_c›y_code_t
 *
code
;

622 
code
 = (
ngx_°ªam_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

624 
e
->
ù
 +(
ngx_°ªam_s¸ùt_c›y_code_t
);

626  
code
->
Àn
;

627 
	}
}

631 
	$ngx_°ªam_s¸ùt_c›y_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

633 
u_ch¨
 *
p
;

634 
ngx_°ªam_s¸ùt_c›y_code_t
 *
code
;

636 
code
 = (
ngx_°ªam_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

638 
p
 = 
e
->
pos
;

640 i‡(!
e
->
skù
) {

641 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_°ªam_s¸ùt_c›y_code_t
),

642 
code
->
Àn
);

645 
e
->
ù
 +(
ngx_°ªam_s¸ùt_c›y_code_t
)

646 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

648 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
e
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

649 "°ªam s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

650 
	}
}

653 
ngx_öt_t


654 
	$ngx_°ªam_s¸ùt_add_v¨_code
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

656 
ngx_öt_t
 
ödex
, *
p
;

657 
ngx_°ªam_s¸ùt_v¨_code_t
 *
code
;

659 
ödex
 = 
	`ngx_°ªam_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

661 i‡(
ödex
 =
NGX_ERROR
) {

662  
NGX_ERROR
;

665 i‡(
sc
->
Êushes
) {

666 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

667 i‡(
p
 =
NULL
) {

668  
NGX_ERROR
;

671 *
p
 = 
ödex
;

674 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
Àngths
,

675 (
ngx_°ªam_s¸ùt_v¨_code_t
),

676 
NULL
);

677 i‡(
code
 =
NULL
) {

678  
NGX_ERROR
;

681 
code
->codê(
ngx_°ªam_s¸ùt_code_±
) (*)

682 
ngx_°ªam_s¸ùt_c›y_v¨_Àn_code
;

683 
code
->
ödex
 = (
uöçå_t
) index;

685 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
vÆues
,

686 (
ngx_°ªam_s¸ùt_v¨_code_t
),

687 &
sc
->
maö
);

688 i‡(
code
 =
NULL
) {

689  
NGX_ERROR
;

692 
code
->codê
ngx_°ªam_s¸ùt_c›y_v¨_code
;

693 
code
->
ödex
 = (
uöçå_t
) index;

695  
NGX_OK
;

696 
	}
}

699 
size_t


700 
	$ngx_°ªam_s¸ùt_c›y_v¨_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

702 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

703 
ngx_°ªam_s¸ùt_v¨_code_t
 *
code
;

705 
code
 = (
ngx_°ªam_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

707 
e
->
ù
 +(
ngx_°ªam_s¸ùt_v¨_code_t
);

709 i‡(
e
->
Êushed
) {

710 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
e
->
£ssi⁄
, 
code
->
ödex
);

713 
vÆue
 = 
	`ngx_°ªam_gë_Êushed_v¨übÀ
(
e
->
£ssi⁄
, 
code
->
ödex
);

716 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

717  
vÆue
->
Àn
;

721 
	}
}

725 
	$ngx_°ªam_s¸ùt_c›y_v¨_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

727 
u_ch¨
 *
p
;

728 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vÆue
;

729 
ngx_°ªam_s¸ùt_v¨_code_t
 *
code
;

731 
code
 = (
ngx_°ªam_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

733 
e
->
ù
 +(
ngx_°ªam_s¸ùt_v¨_code_t
);

735 i‡(!
e
->
skù
) {

737 i‡(
e
->
Êushed
) {

738 
vÆue
 = 
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
e
->
£ssi⁄
, 
code
->
ödex
);

741 
vÆue
 = 
	`ngx_°ªam_gë_Êushed_v¨übÀ
(
e
->
£ssi⁄
, 
code
->
ödex
);

744 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

745 
p
 = 
e
->
pos
;

746 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

748 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
,

749 
e
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

750 "°ªam s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

753 
	}
}

756 #i‡(
NGX_PCRE
)

758 
ngx_öt_t


759 
	$ngx_°ªam_s¸ùt_add_ˇ±uª_code
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
,

760 
ngx_uöt_t
 
n
)

762 
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

764 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
Àngths
,

765 (
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
),

766 
NULL
);

767 i‡(
code
 =
NULL
) {

768  
NGX_ERROR
;

771 
code
->codê(
ngx_°ªam_s¸ùt_code_±
) (*)

772 
ngx_°ªam_s¸ùt_c›y_ˇ±uª_Àn_code
;

773 
code
->
n
 = 2 *Ç;

776 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
vÆues
,

777 (
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
),

778 &
sc
->
maö
);

779 i‡(
code
 =
NULL
) {

780  
NGX_ERROR
;

783 
code
->codê
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code
;

784 
code
->
n
 = 2 *Ç;

786 i‡(
sc
->
nˇ±uªs
 < 
n
) {

787 
sc
->
nˇ±uªs
 = 
n
;

790  
NGX_OK
;

791 
	}
}

794 
size_t


795 
	$ngx_°ªam_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

797 *
ˇp
;

798 
ngx_uöt_t
 
n
;

799 
ngx_°ªam_£ssi⁄_t
 *
s
;

800 
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

802 
s
 = 
e
->
£ssi⁄
;

804 
code
 = (
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

806 
e
->
ù
 +(
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
);

808 
n
 = 
code
->n;

810 i‡(
n
 < 
s
->
nˇ±uªs
) {

811 
ˇp
 = 
s
->
ˇ±uªs
;

812  
ˇp
[
n
 + 1] - cap[n];

816 
	}
}

820 
	$ngx_°ªam_s¸ùt_c›y_ˇ±uª_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

822 *
ˇp
;

823 
u_ch¨
 *
p
, *
pos
;

824 
ngx_uöt_t
 
n
;

825 
ngx_°ªam_£ssi⁄_t
 *
s
;

826 
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

828 
s
 = 
e
->
£ssi⁄
;

830 
code
 = (
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

832 
e
->
ù
 +(
ngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
);

834 
n
 = 
code
->n;

836 
pos
 = 
e
->pos;

838 i‡(
n
 < 
s
->
nˇ±uªs
) {

839 
ˇp
 = 
s
->
ˇ±uªs
;

840 
p
 = 
s
->
ˇ±uªs_d©a
;

841 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

844 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
e
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

845 "°ªam s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

846 
	}
}

851 
ngx_öt_t


852 
	$ngx_°ªam_s¸ùt_add_fuŒ_«me_code
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
)

854 
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
 *
code
;

856 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
Àngths
,

857 (
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
),

858 
NULL
);

859 i‡(
code
 =
NULL
) {

860  
NGX_ERROR
;

863 
code
->codê(
ngx_°ªam_s¸ùt_code_±
) (*)

864 
ngx_°ªam_s¸ùt_fuŒ_«me_Àn_code
;

865 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

867 
code
 = 
	`ngx_°ªam_s¸ùt_add_code
(*
sc
->
vÆues
,

868 (
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
), &
sc
->
maö
);

869 i‡(
code
 =
NULL
) {

870  
NGX_ERROR
;

873 
code
->codê
ngx_°ªam_s¸ùt_fuŒ_«me_code
;

874 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

876  
NGX_OK
;

877 
	}
}

880 
size_t


881 
	$ngx_°ªam_s¸ùt_fuŒ_«me_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

883 
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
 *
code
;

885 
code
 = (
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

887 
e
->
ù
 +(
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
);

889  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

890 
ngx_cy˛e
->
¥efix
.
Àn
;

891 
	}
}

895 
	$ngx_°ªam_s¸ùt_fuŒ_«me_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
)

897 
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
 *
code
;

899 
ngx_°r_t
 
vÆue
, *
¥efix
;

901 
code
 = (
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

903 
vÆue
.
d©a
 = 
e
->
buf
.data;

904 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

906 
¥efix
 = 
code
->
c⁄f_¥efix
 ? (
ngx_°r_t
 *Ë&
ngx_cy˛e
->conf_prefix:

907 (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
;

909 i‡(
	`ngx_gë_fuŒ_«me
(
e
->
£ssi⁄
->
c⁄√˘i⁄
->
poﬁ
, 
¥efix
, &
vÆue
)

910 !
NGX_OK
)

912 
e
->
ù
 = 
ngx_°ªam_s¸ùt_exô
;

916 
e
->
buf
 = 
vÆue
;

918 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
e
->
£ssi⁄
->
c⁄√˘i⁄
->
log
, 0,

919 "°ªam s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

921 
e
->
ù
 +(
ngx_°ªam_s¸ùt_fuŒ_«me_code_t
);

922 
	}
}

	@src/stream/ngx_stream_script.h

8 #i‚de‡
_NGX_STREAM_SCRIPT_H_INCLUDED_


9 
	#_NGX_STREAM_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_°ªam.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_°ªam_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

25 
	mÊushed
:1;

26 
	mskù
:1;

28 
ngx_°ªam_£ssi⁄_t
 *
	m£ssi⁄
;

29 } 
	tngx_°ªam_s¸ùt_ígöe_t
;

33 
ngx_c⁄f_t
 *
	mcf
;

34 
ngx_°r_t
 *
	msour˚
;

36 
ngx_¨øy_t
 **
	mÊushes
;

37 
ngx_¨øy_t
 **
	mÀngths
;

38 
ngx_¨øy_t
 **
	mvÆues
;

40 
ngx_uöt_t
 
	mv¨übÀs
;

41 
ngx_uöt_t
 
	mnˇ±uªs
;

42 
ngx_uöt_t
 
	msize
;

44 *
	mmaö
;

46 
	mcom∂ëe_Àngths
:1;

47 
	mcom∂ëe_vÆues
:1;

48 
	mzîo
:1;

49 
	mc⁄f_¥efix
:1;

50 
	mroŸ_¥efix
:1;

51 } 
	tngx_°ªam_s¸ùt_compûe_t
;

55 
ngx_°r_t
 
	mvÆue
;

56 
ngx_uöt_t
 *
	mÊushes
;

57 *
	mÀngths
;

58 *
	mvÆues
;

59 } 
	tngx_°ªam_com∂ex_vÆue_t
;

63 
ngx_c⁄f_t
 *
	mcf
;

64 
ngx_°r_t
 *
	mvÆue
;

65 
ngx_°ªam_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

67 
	mzîo
:1;

68 
	mc⁄f_¥efix
:1;

69 
	mroŸ_¥efix
:1;

70 } 
	tngx_°ªam_compûe_com∂ex_vÆue_t
;

73 (*
	tngx_°ªam_s¸ùt_code_±
Ë(
	tngx_°ªam_s¸ùt_ígöe_t
 *
	te
);

74 
	$size_t
 (*
	tngx_°ªam_s¸ùt_Àn_code_±
Ë(
	tngx_°ªam_s¸ùt_ígöe_t
 *
	te
);

78 
ngx_°ªam_s¸ùt_code_±
 
code
;

79 
uöçå_t
 
Àn
;

80 } 
	tngx_°ªam_s¸ùt_c›y_code_t
;

84 
ngx_°ªam_s¸ùt_code_±
 
code
;

85 
uöçå_t
 
ödex
;

86 } 
	tngx_°ªam_s¸ùt_v¨_code_t
;

90 
ngx_°ªam_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
n
;

92 } 
	tngx_°ªam_s¸ùt_c›y_ˇ±uª_code_t
;

96 
ngx_°ªam_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
c⁄f_¥efix
;

98 } 
	tngx_°ªam_s¸ùt_fuŒ_«me_code_t
;

101 
	`ngx_°ªam_s¸ùt_Êush_com∂ex_vÆue
(
ngx_°ªam_£ssi⁄_t
 *
s
,

102 
ngx_°ªam_com∂ex_vÆue_t
 *
vÆ
);

103 
ngx_öt_t
 
	`ngx_°ªam_com∂ex_vÆue
(
ngx_°ªam_£ssi⁄_t
 *
s
,

104 
ngx_°ªam_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

105 
ngx_öt_t
 
	`ngx_°ªam_compûe_com∂ex_vÆue
(

106 
ngx_°ªam_compûe_com∂ex_vÆue_t
 *
ccv
);

107 *
	`ngx_°ªam_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

108 *
c⁄f
);

111 
ngx_uöt_t
 
	`ngx_°ªam_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

112 
ngx_öt_t
 
	`ngx_°ªam_s¸ùt_compûe
(
ngx_°ªam_s¸ùt_compûe_t
 *
sc
);

113 
u_ch¨
 *
	`ngx_°ªam_s¸ùt_run
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
vÆue
,

114 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

115 
	`ngx_°ªam_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_°ªam_£ssi⁄_t
 *
s
,

116 
ngx_¨øy_t
 *
ödi˚s
);

118 *
	`ngx_°ªam_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

120 
size_t
 
	`ngx_°ªam_s¸ùt_c›y_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

121 
	`ngx_°ªam_s¸ùt_c›y_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

122 
size_t
 
	`ngx_°ªam_s¸ùt_c›y_v¨_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

123 
	`ngx_°ªam_s¸ùt_c›y_v¨_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

124 
size_t
 
	`ngx_°ªam_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

125 
	`ngx_°ªam_s¸ùt_c›y_ˇ±uª_code
(
ngx_°ªam_s¸ùt_ígöe_t
 *
e
);

	@src/stream/ngx_stream_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_°ªam_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_°ªam_•lô_˛õ¡s_∑π_t
;

20 
ngx_°ªam_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_°ªam_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_°ªam_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_°ªam_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_STREAM_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL


55 
ngx_moduÀ_t
 
	gngx_°ªam_•lô_˛õ¡s_moduÀ
 = {

56 
NGX_MODULE_V1
,

57 &
ngx_°ªam_•lô_˛õ¡s_moduÀ_˘x
,

58 
ngx_°ªam_•lô_˛õ¡s_comm™ds
,

59 
NGX_STREAM_MODULE
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NGX_MODULE_V1_PADDING


71 
ngx_öt_t


72 
	$ngx_°ªam_•lô_˛õ¡s_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

73 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

75 
ngx_°ªam_•lô_˛õ¡s_˘x_t
 *
˘x
 =

76 (
ngx_°ªam_•lô_˛õ¡s_˘x_t
 *Ë
d©a
;

78 
uöt32_t
 
hash
;

79 
ngx_°r_t
 
vÆ
;

80 
ngx_uöt_t
 
i
;

81 
ngx_°ªam_•lô_˛õ¡s_∑π_t
 *
∑π
;

83 *
v
 = 
ngx_°ªam_v¨übÀ_nuŒ_vÆue
;

85 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

86  
NGX_OK
;

89 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

91 
∑π
 = 
˘x
->
∑πs
.
ñts
;

93 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

95 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

96 "°ªam s∂ô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

98 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
 ||Öart[i].percent == 0) {

99 *
v
 = 
∑π
[
i
].
vÆue
;

100  
NGX_OK
;

104  
NGX_OK
;

105 
	}
}

109 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

111 *
rv
;

112 
uöt32_t
 
sum
, 
œ°
;

113 
ngx_°r_t
 *
vÆue
, 
«me
;

114 
ngx_uöt_t
 
i
;

115 
ngx_c⁄f_t
 
ßve
;

116 
ngx_°ªam_v¨übÀ_t
 *
v¨
;

117 
ngx_°ªam_•lô_˛õ¡s_˘x_t
 *
˘x
;

118 
ngx_°ªam_•lô_˛õ¡s_∑π_t
 *
∑π
;

119 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

121 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_•lô_˛õ¡s_˘x_t
));

122 i‡(
˘x
 =
NULL
) {

123  
NGX_CONF_ERROR
;

126 
vÆue
 = 
cf
->
¨gs
->
ñts
;

128 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

130 
ccv
.
cf
 = cf;

131 
ccv
.
vÆue
 = &value[1];

132 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

134 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

135  
NGX_CONF_ERROR
;

138 
«me
 = 
vÆue
[2];

140 i‡(
«me
.
d©a
[0] != '$') {

141 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

142 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

143  
NGX_CONF_ERROR
;

146 
«me
.
Àn
--;

147 
«me
.
d©a
++;

149 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
«me
, 
NGX_STREAM_VAR_CHANGEABLE
);

150 i‡(
v¨
 =
NULL
) {

151  
NGX_CONF_ERROR
;

154 
v¨
->
gë_h™dÀr
 = 
ngx_°ªam_•lô_˛õ¡s_v¨übÀ
;

155 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

157 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

158 (
ngx_°ªam_•lô_˛õ¡s_∑π_t
))

159 !
NGX_OK
)

161  
NGX_CONF_ERROR
;

164 
ßve
 = *
cf
;

165 
cf
->
˘x
 = ctx;

166 
cf
->
h™dÀr
 = 
ngx_°ªam_•lô_˛õ¡s
;

167 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

169 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

171 *
cf
 = 
ßve
;

173 i‡(
rv
 !
NGX_CONF_OK
) {

174  
rv
;

177 
sum
 = 0;

178 
œ°
 = 0;

179 
∑π
 = 
˘x
->
∑πs
.
ñts
;

181 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

182 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

183 i‡(
sum
 > 10000) {

184 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

186  
NGX_CONF_ERROR
;

189 i‡(
∑π
[
i
].
≥r˚¡
) {

190 
œ°
 +
∑π
[
i
].
≥r˚¡
 * (
uöt64_t
) 0xffffffff / 10000;

191 
∑π
[
i
].
≥r˚¡
 = 
œ°
;

195  
rv
;

196 
	}
}

200 
	$ngx_°ªam_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

202 
ngx_öt_t
 
n
;

203 
ngx_°r_t
 *
vÆue
;

204 
ngx_°ªam_•lô_˛õ¡s_˘x_t
 *
˘x
;

205 
ngx_°ªam_•lô_˛õ¡s_∑π_t
 *
∑π
;

207 
˘x
 = 
cf
->ctx;

208 
vÆue
 = 
cf
->
¨gs
->
ñts
;

210 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

211 i‡(
∑π
 =
NULL
) {

212  
NGX_CONF_ERROR
;

215 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

216 
∑π
->
≥r˚¡
 = 0;

219 i‡(
vÆue
[0].
Àn
 =0 || vÆue[0].
d©a
[value[0].len - 1] != '%') {

220 
övÆid
;

223 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

224 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

225 
övÆid
;

228 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

231 
∑π
->
vÆue
.
Àn
 = value[1].len;

232 
∑π
->
vÆue
.
vÆid
 = 1;

233 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

234 
∑π
->
vÆue
.
nŸ_found
 = 0;

235 
∑π
->
vÆue
.
d©a
 = value[1].data;

237  
NGX_CONF_OK
;

239 
övÆid
:

241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

242 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

243  
NGX_CONF_ERROR
;

244 
	}
}

	@src/stream/ngx_stream_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "auto"

	)

21 
ngx_öt_t
 
	`ngx_°ªam_s¶_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
);

22 
ngx_öt_t
 
	`ngx_°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
,

23 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
	`ngx_°ªam_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
	`ngx_°ªam_s¶_°©ic_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

26 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
	`ngx_°ªam_s¶_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

28 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

30 
ngx_öt_t
 
	`ngx_°ªam_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

31 *
	`ngx_°ªam_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
	`ngx_°ªam_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

35 *
	`ngx_°ªam_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

36 *
c⁄f
);

37 *
	`ngx_°ªam_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

38 *
c⁄f
);

39 
ngx_öt_t
 
	`ngx_°ªam_s¶_öô
(
ngx_c⁄f_t
 *
cf
);

42 
ngx_c⁄f_bômask_t
 
ngx_°ªam_s¶_¥Ÿocﬁs
[] = {

43 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

44 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

45 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

46 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

47 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

48 { 
	`ngx_°rög
("TLSv1.3"), 
NGX_SSL_TLSv1_3
 },

49 { 
ngx_nuŒ_°rög
, 0 }

50 
	}
};

53 
ngx_c⁄f_íum_t
 
	gngx_°ªam_s¶_vîify
[] = {

54 { 
ngx_°rög
("off"), 0 },

55 { 
ngx_°rög
("on"), 1 },

56 { 
ngx_°rög
("optional"), 2 },

57 { 
ngx_°rög
("optional_no_ca"), 3 },

58 { 
ngx_nuŒ_°rög
, 0 }

62 
ngx_comm™d_t
 
	gngx_°ªam_s¶_comm™ds
[] = {

64 { 
ngx_°rög
("ssl_handshake_timeout"),

65 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_m£c_¶Ÿ
,

67 
NGX_STREAM_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
h™dshake_timeout
),

69 
NULL
 },

71 { 
ngx_°rög
("ssl_certificate"),

72 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

74 
NGX_STREAM_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
˚πifiˇãs
),

76 
NULL
 },

78 { 
ngx_°rög
("ssl_certificate_key"),

79 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

80 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

81 
NGX_STREAM_SRV_CONF_OFFSET
,

82 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
˚πifiˇã_keys
),

83 
NULL
 },

85 { 
ngx_°rög
("ssl_password_file"),

86 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_°ªam_s¶_∑ssw‹d_fûe
,

88 
NGX_STREAM_SRV_CONF_OFFSET
,

90 
NULL
 },

92 { 
ngx_°rög
("ssl_dhparam"),

93 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

94 
ngx_c⁄f_£t_°r_¶Ÿ
,

95 
NGX_STREAM_SRV_CONF_OFFSET
,

96 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
dh∑øm
),

97 
NULL
 },

99 { 
ngx_°rög
("ssl_ecdh_curve"),

100 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_°r_¶Ÿ
,

102 
NGX_STREAM_SRV_CONF_OFFSET
,

103 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
ecdh_curve
),

104 
NULL
 },

106 { 
ngx_°rög
("ssl_protocols"),

107 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_1MORE
,

108 
ngx_c⁄f_£t_bômask_¶Ÿ
,

109 
NGX_STREAM_SRV_CONF_OFFSET
,

110 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

111 &
ngx_°ªam_s¶_¥Ÿocﬁs
 },

113 { 
ngx_°rög
("ssl_ciphers"),

114 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_STREAM_SRV_CONF_OFFSET
,

117 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
cùhîs
),

118 
NULL
 },

120 { 
ngx_°rög
("ssl_verify_client"),

121 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_íum_¶Ÿ
,

123 
NGX_STREAM_SRV_CONF_OFFSET
,

124 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
vîify
),

125 &
ngx_°ªam_s¶_vîify
 },

127 { 
ngx_°rög
("ssl_verify_depth"),

128 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_num_¶Ÿ
,

130 
NGX_STREAM_SRV_CONF_OFFSET
,

131 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
vîify_dïth
),

132 
NULL
 },

134 { 
ngx_°rög
("ssl_client_certificate"),

135 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_c⁄f_£t_°r_¶Ÿ
,

137 
NGX_STREAM_SRV_CONF_OFFSET
,

138 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

139 
NULL
 },

141 { 
ngx_°rög
("ssl_trusted_certificate"),

142 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_STREAM_SRV_CONF_OFFSET
,

145 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
åu°ed_˚πifiˇã
),

146 
NULL
 },

148 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

149 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

150 
ngx_c⁄f_£t_Êag_¶Ÿ
,

151 
NGX_STREAM_SRV_CONF_OFFSET
,

152 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

153 
NULL
 },

155 { 
ngx_°rög
("ssl_session_cache"),

156 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE12
,

157 
ngx_°ªam_s¶_£ssi⁄_ˇche
,

158 
NGX_STREAM_SRV_CONF_OFFSET
,

160 
NULL
 },

162 { 
ngx_°rög
("ssl_session_tickets"),

163 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

164 
ngx_c⁄f_£t_Êag_¶Ÿ
,

165 
NGX_STREAM_SRV_CONF_OFFSET
,

166 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
£ssi⁄_tickës
),

167 
NULL
 },

169 { 
ngx_°rög
("ssl_session_ticket_key"),

170 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

171 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

172 
NGX_STREAM_SRV_CONF_OFFSET
,

173 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
£ssi⁄_tickë_keys
),

174 
NULL
 },

176 { 
ngx_°rög
("ssl_session_timeout"),

177 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

178 
ngx_c⁄f_£t_£c_¶Ÿ
,

179 
NGX_STREAM_SRV_CONF_OFFSET
,

180 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

181 
NULL
 },

183 { 
ngx_°rög
("ssl_crl"),

184 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_TAKE1
,

185 
ngx_c⁄f_£t_°r_¶Ÿ
,

186 
NGX_STREAM_SRV_CONF_OFFSET
,

187 
off£tof
(
ngx_°ªam_s¶_c⁄f_t
, 
¸l
),

188 
NULL
 },

190 
ngx_nuŒ_comm™d


194 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_s¶_moduÀ_˘x
 = {

195 
ngx_°ªam_s¶_add_v¨übÀs
,

196 
ngx_°ªam_s¶_öô
,

198 
NULL
,

199 
NULL
,

201 
ngx_°ªam_s¶_¸óã_c⁄f
,

202 
ngx_°ªam_s¶_mîge_c⁄f


206 
ngx_moduÀ_t
 
	gngx_°ªam_s¶_moduÀ
 = {

207 
NGX_MODULE_V1
,

208 &
ngx_°ªam_s¶_moduÀ_˘x
,

209 
ngx_°ªam_s¶_comm™ds
,

210 
NGX_STREAM_MODULE
,

211 
NULL
,

212 
NULL
,

213 
NULL
,

214 
NULL
,

215 
NULL
,

216 
NULL
,

217 
NULL
,

218 
NGX_MODULE_V1_PADDING


222 
ngx_°ªam_v¨übÀ_t
 
	gngx_°ªam_s¶_v¨s
[] = {

224 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_°ªam_s¶_°©ic_v¨übÀ
,

225 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

227 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_°ªam_s¶_°©ic_v¨übÀ
,

228 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

230 { 
ngx_°rög
("s¶_cùhîs"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

231 (
uöçå_t
Ë
ngx_s¶_gë_cùhîs
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

233 { 
ngx_°rög
("s¶_curves"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

234 (
uöçå_t
Ë
ngx_s¶_gë_curves
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

236 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

237 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

239 { 
ngx_°rög
("s¶_£ssi⁄_ªu£d"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

240 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_ªu£d
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

242 { 
ngx_°rög
("s¶_£rvî_«me"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

243 (
uöçå_t
Ë
ngx_s¶_gë_£rvî_«me
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

245 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

246 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

248 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

249 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

250 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

252 { 
ngx_°rög
("s¶_˛õ¡_esˇ≥d_˚π"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

253 (
uöçå_t
Ë
ngx_s¶_gë_esˇ≥d_˚πifiˇã
,

254 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

256 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

257 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

259 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

260 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

262 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

263 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

265 { 
ngx_°rög
("s¶_˛õ¡_fögî¥öt"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

266 (
uöçå_t
Ë
ngx_s¶_gë_fögî¥öt
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

268 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

269 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

271 { 
ngx_°rög
("s¶_˛õ¡_v_°¨t"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

272 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_v_°¨t
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

274 { 
ngx_°rög
("s¶_˛õ¡_v_íd"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

275 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_v_íd
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

277 { 
ngx_°rög
("s¶_˛õ¡_v_ªmaö"), 
NULL
, 
ngx_°ªam_s¶_v¨übÀ
,

278 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_v_ªmaö
, 
NGX_STREAM_VAR_CHANGEABLE
, 0 },

280 
ngx_°ªam_nuŒ_v¨übÀ


284 
ngx_°r_t
 
	gngx_°ªam_s¶_£ss_id_˘x
 = 
ngx_°rög
("STREAM");

287 
ngx_öt_t


288 
	$ngx_°ªam_s¶_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

290 
rc
;

291 
X509
 *
˚π
;

292 
ngx_öt_t
 
rv
;

293 
ngx_c⁄√˘i⁄_t
 *
c
;

294 
ngx_°ªam_s¶_c⁄f_t
 *
s¶cf
;

296 i‡(!
s
->
s¶
) {

297  
NGX_OK
;

300 
c
 = 
s
->
c⁄√˘i⁄
;

302 
s¶cf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_s¶_moduÀ
);

304 i‡(
c
->
s¶
 =
NULL
) {

305 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

307 
rv
 = 
	`ngx_°ªam_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

309 i‡(
rv
 !
NGX_OK
) {

310  
rv
;

314 i‡(
s¶cf
->
vîify
) {

315 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

317 i‡(
rc
 !
X509_V_OK


318 && (
s¶cf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

320 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

322 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

324 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
c
->
s¶
->
£ssi⁄_˘x
,

325 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

326  
NGX_ERROR
;

329 i‡(
s¶cf
->
vîify
 == 1) {

330 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

332 i‡(
˚π
 =
NULL
) {

333 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

336 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
c
->
s¶
->
£ssi⁄_˘x
,

337 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

338  
NGX_ERROR
;

341 
	`X509_‰ì
(
˚π
);

345  
NGX_OK
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

352 
ngx_öt_t
 
rc
;

353 
ngx_°ªam_£ssi⁄_t
 *
s
;

354 
ngx_°ªam_s¶_c⁄f_t
 *
s¶cf
;

355 
ngx_°ªam_c‹e_§v_c⁄f_t
 *
cscf
;

357 
s
 = 
c
->
d©a
;

359 
cscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

361 i‡(
cscf
->
t˝_nodñay
 && 
	`ngx_t˝_nodñay
(
c
Ë!
NGX_OK
) {

362  
NGX_ERROR
;

365 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë!
NGX_OK
) {

366  
NGX_ERROR
;

369 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

371 i‡(
rc
 =
NGX_ERROR
) {

372  
NGX_ERROR
;

375 i‡(
rc
 =
NGX_AGAIN
) {

376 
s¶cf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_s¶_moduÀ
);

378 
	`ngx_add_timî
(
c
->
ªad
, 
s¶cf
->
h™dshake_timeout
);

380 
c
->
s¶
->
h™dÀr
 = 
ngx_°ªam_s¶_h™dshake_h™dÀr
;

382  
NGX_AGAIN
;

387  
NGX_OK
;

388 
	}
}

392 
	$ngx_°ªam_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

394 
ngx_°ªam_£ssi⁄_t
 *
s
;

396 
s
 = 
c
->
d©a
;

398 i‡(!
c
->
s¶
->
h™dshaked
) {

399 
	`ngx_°ªam_föÆize_£ssi⁄
(
s
, 
NGX_STREAM_INTERNAL_SERVER_ERROR
);

403 i‡(
c
->
ªad
->
timî_£t
) {

404 
	`ngx_dñ_timî
(
c
->
ªad
);

407 
	`ngx_°ªam_c‹e_run_pha£s
(
s
);

408 
	}
}

411 
ngx_öt_t


412 
	$ngx_°ªam_s¶_°©ic_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

413 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

415 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

417 
size_t
 
Àn
;

418 
ngx_°r_t
 
°r
;

420 i‡(
s
->
c⁄√˘i⁄
->
s¶
) {

422 (Ë
	`h™dÀr
(
s
->
c⁄√˘i⁄
, 
NULL
, &
°r
);

424 
v
->
d©a
 = 
°r
.data;

426 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

428 
v
->
Àn
 =Üen;

429 
v
->
vÆid
 = 1;

430 
v
->
no_ˇchóbÀ
 = 0;

431 
v
->
nŸ_found
 = 0;

433  
NGX_OK
;

436 
v
->
nŸ_found
 = 1;

438  
NGX_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_°ªam_s¶_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

444 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

446 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

448 
ngx_°r_t
 
°r
;

450 i‡(
s
->
c⁄√˘i⁄
->
s¶
) {

452 i‡(
	`h™dÀr
(
s
->
c⁄√˘i⁄
, s->c⁄√˘i⁄->
poﬁ
, &
°r
Ë!
NGX_OK
) {

453  
NGX_ERROR
;

456 
v
->
Àn
 = 
°r
.len;

457 
v
->
d©a
 = 
°r
.data;

459 i‡(
v
->
Àn
) {

460 
v
->
vÆid
 = 1;

461 
v
->
no_ˇchóbÀ
 = 0;

462 
v
->
nŸ_found
 = 0;

464  
NGX_OK
;

468 
v
->
nŸ_found
 = 1;

470  
NGX_OK
;

471 
	}
}

474 
ngx_öt_t


475 
	$ngx_°ªam_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

477 
ngx_°ªam_v¨übÀ_t
 *
v¨
, *
v
;

479 
v
 = 
ngx_°ªam_s¶_v¨s
; v->
«me
.
Àn
; v++) {

480 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

481 i‡(
v¨
 =
NULL
) {

482  
NGX_ERROR
;

485 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

486 
v¨
->
d©a
 = 
v
->data;

489  
NGX_OK
;

490 
	}
}

494 
	$ngx_°ªam_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

496 
ngx_°ªam_s¶_c⁄f_t
 *
scf
;

498 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_s¶_c⁄f_t
));

499 i‡(
scf
 =
NULL
) {

500  
NULL
;

517 
scf
->
h™dshake_timeout
 = 
NGX_CONF_UNSET_MSEC
;

518 
scf
->
˚πifiˇãs
 = 
NGX_CONF_UNSET_PTR
;

519 
scf
->
˚πifiˇã_keys
 = 
NGX_CONF_UNSET_PTR
;

520 
scf
->
∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

521 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

522 
scf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

523 
scf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

524 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

525 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

526 
scf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

527 
scf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

529  
scf
;

530 
	}
}

534 
	$ngx_°ªam_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

536 
ngx_°ªam_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

537 
ngx_°ªam_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

539 
ngx_poﬁ_˛ónup_t
 *
˛n
;

541 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
h™dshake_timeout
,

542 
¥ev
->
h™dshake_timeout
, 60000);

544 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

545 
¥ev
->
£ssi⁄_timeout
, 300);

547 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

548 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

550 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

551 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_TLSv1


552 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

554 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

555 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

557 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
˚πifiˇãs
, 
¥ev
->˚πifiˇãs, 
NULL
);

558 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
˚πifiˇã_keys
, 
¥ev
->certificate_keys,

559 
NULL
);

561 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
∑ssw‹ds
, 
¥ev
->∑ssw‹ds, 
NULL
);

563 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

565 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

567 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

568 
¥ev
->
åu°ed_˚πifiˇã
, "");

569 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

571 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

572 
NGX_DEFAULT_ECDH_CURVE
);

574 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

577 
c⁄f
->
s¶
.
log
 = 
cf
->log;

579 i‡(!
c⁄f
->
li°í
) {

580  
NGX_CONF_OK
;

583 i‡(
c⁄f
->
˚πifiˇãs
 =
NULL
) {

584 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

587 
c⁄f
->
fûe
, c⁄f->
löe
);

588  
NGX_CONF_ERROR
;

591 i‡(
c⁄f
->
˚πifiˇã_keys
 =
NULL
) {

592 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

595 
c⁄f
->
fûe
, c⁄f->
löe
);

596  
NGX_CONF_ERROR
;

599 i‡(
c⁄f
->
˚πifiˇã_keys
->
√…s
 < c⁄f->
˚πifiˇãs
->nelts) {

600 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

604 ((
ngx_°r_t
 *Ë
c⁄f
->
˚πifiˇãs
->
ñts
)

605 + 
c⁄f
->
˚πifiˇãs
->
√…s
 - 1,

606 
c⁄f
->
fûe
, c⁄f->
löe
);

607  
NGX_CONF_ERROR
;

610 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

611  
NGX_CONF_ERROR
;

614 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

615 i‡(
˛n
 =
NULL
) {

616  
NGX_CONF_ERROR
;

619 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

620 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

622 i‡(
	`ngx_s¶_˚πifiˇãs
(
cf
, &
c⁄f
->
s¶
, c⁄f->
˚πifiˇãs
,

623 
c⁄f
->
˚πifiˇã_keys
, c⁄f->
∑ssw‹ds
)

624 !
NGX_OK
)

626  
NGX_CONF_ERROR
;

629 i‡(
	`ngx_s¶_cùhîs
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
cùhîs
,

630 
c⁄f
->
¥e„r_£rvî_cùhîs
)

631 !
NGX_OK
)

633  
NGX_CONF_ERROR
;

636 i‡(
c⁄f
->
vîify
) {

638 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

639 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

641  
NGX_CONF_ERROR
;

644 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

645 &
c⁄f
->
˛õ¡_˚πifiˇã
,

646 
c⁄f
->
vîify_dïth
)

647 !
NGX_OK
)

649  
NGX_CONF_ERROR
;

652 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

653 &
c⁄f
->
åu°ed_˚πifiˇã
,

654 
c⁄f
->
vîify_dïth
)

655 !
NGX_OK
)

657  
NGX_CONF_ERROR
;

660 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

661  
NGX_CONF_ERROR
;

665 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

666  
NGX_CONF_ERROR
;

669 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

670  
NGX_CONF_ERROR
;

673 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

674 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

676 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

677 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

680 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_°ªam_s¶_£ss_id_˘x
,

681 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

682 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

683 !
NGX_OK
)

685  
NGX_CONF_ERROR
;

688 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
,

689 
¥ev
->
£ssi⁄_tickës
, 1);

691 #ifde‡
SSL_OP_NO_TICKET


692 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

693 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

697 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

698 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

700 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

701 !
NGX_OK
)

703  
NGX_CONF_ERROR
;

706  
NGX_CONF_OK
;

707 
	}
}

711 
	$ngx_°ªam_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

713 
ngx_°ªam_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

715 
ngx_°r_t
 *
vÆue
;

717 i‡(
scf
->
∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

721 
vÆue
 = 
cf
->
¨gs
->
ñts
;

723 
scf
->
∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

725 i‡(
scf
->
∑ssw‹ds
 =
NULL
) {

726  
NGX_CONF_ERROR
;

729  
NGX_CONF_OK
;

730 
	}
}

734 
	$ngx_°ªam_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

736 
ngx_°ªam_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

738 
size_t
 
Àn
;

739 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

740 
ngx_öt_t
 
n
;

741 
ngx_uöt_t
 
i
, 
j
;

743 
vÆue
 = 
cf
->
¨gs
->
ñts
;

745 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

747 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

748 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

752 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

753 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

757 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

758 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

762 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

763 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

766 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

767 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

769 i‡(
n
 =
NGX_ERROR
) {

770 
övÆid
;

773 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

778 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

779 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

782 
Àn
 = 0;

784 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

785 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

789 
Àn
++;

792 i‡(
Àn
 == 0) {

793 
övÆid
;

796 
«me
.
Àn
 =Üen;

797 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

799 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

800 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

802 
n
 = 
	`ngx_∑r£_size
(&
size
);

804 i‡(
n
 =
NGX_ERROR
) {

805 
övÆid
;

808 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

809 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

811 &
vÆue
[
i
]);

813  
NGX_CONF_ERROR
;

816 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

817 &
ngx_°ªam_s¶_moduÀ
);

818 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

819  
NGX_CONF_ERROR
;

822 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

827 
övÆid
;

830 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

831 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

834  
NGX_CONF_OK
;

836 
övÆid
:

838 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

839 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

841  
NGX_CONF_ERROR
;

842 
	}
}

845 
ngx_öt_t


846 
	$ngx_°ªam_s¶_öô
(
ngx_c⁄f_t
 *
cf
)

848 
ngx_°ªam_h™dÀr_±
 *
h
;

849 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

851 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

853 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_STREAM_SSL_PHASE
].
h™dÀrs
);

854 i‡(
h
 =
NULL
) {

855  
NGX_ERROR
;

858 *
h
 = 
ngx_°ªam_s¶_h™dÀr
;

860  
NGX_OK
;

861 
	}
}

	@src/stream/ngx_stream_ssl_module.h

8 #i‚de‡
_NGX_STREAM_SSL_H_INCLUDED_


9 
	#_NGX_STREAM_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_°ªam.h
>

18 
ngx_m£c_t
 
	mh™dshake_timeout
;

20 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

22 
ngx_s¶_t
 
	ms¶
;

24 
ngx_uöt_t
 
	mli°í
;

25 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

27 
ngx_uöt_t
 
	mvîify
;

28 
ngx_uöt_t
 
	mvîify_dïth
;

30 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

32 
time_t
 
	m£ssi⁄_timeout
;

34 
ngx_¨øy_t
 *
	m˚πifiˇãs
;

35 
ngx_¨øy_t
 *
	m˚πifiˇã_keys
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

39 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

40 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

41 
ngx_°r_t
 
	m¸l
;

43 
ngx_°r_t
 
	mcùhîs
;

45 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

47 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

49 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

50 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

52 
u_ch¨
 *
	mfûe
;

53 
ngx_uöt_t
 
	mlöe
;

54 } 
	tngx_°ªam_s¶_c⁄f_t
;

57 
ngx_moduÀ_t
 
ngx_°ªam_s¶_moduÀ
;

	@src/stream/ngx_stream_ssl_preread_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_°ªam.h
>

13 
ngx_Êag_t
 
	míabÀd
;

14 } 
	tngx_°ªam_s¶_¥îód_§v_c⁄f_t
;

18 
size_t
 
	mÀ·
;

19 
size_t
 
	msize
;

20 
size_t
 
	mext
;

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	md°
;

23 
u_ch¨
 
	mbuf
[4];

24 
u_ch¨
 
	mvîsi⁄
[2];

25 
ngx_°r_t
 
	mho°
;

26 
ngx_°r_t
 
	mÆ≤
;

27 
ngx_log_t
 *
	mlog
;

28 
ngx_poﬁ_t
 *
	mpoﬁ
;

29 
ngx_uöt_t
 
	m°©e
;

30 } 
	tngx_°ªam_s¶_¥îód_˘x_t
;

33 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
);

34 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_∑r£_ªc‹d
(

35 
ngx_°ªam_s¶_¥îód_˘x_t
 *
˘x
, 
u_ch¨
 *
pos
, u_ch¨ *
œ°
);

36 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_¥Ÿocﬁ_v¨übÀ
(

37 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

38 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_£rvî_«me_v¨übÀ
(

39 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_Æ≤_¥Ÿocﬁs_v¨übÀ
(

41 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

42 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

43 *
ngx_°ªam_s¶_¥îód_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_°ªam_s¶_¥îód_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

45 *
chûd
);

46 
ngx_öt_t
 
ngx_°ªam_s¶_¥îód_öô
(
ngx_c⁄f_t
 *
cf
);

49 
ngx_comm™d_t
 
	gngx_°ªam_s¶_¥îód_comm™ds
[] = {

51 { 
ngx_°rög
("ssl_preread"),

52 
NGX_STREAM_MAIN_CONF
|
NGX_STREAM_SRV_CONF
|
NGX_CONF_FLAG
,

53 
ngx_c⁄f_£t_Êag_¶Ÿ
,

54 
NGX_STREAM_SRV_CONF_OFFSET
,

55 
off£tof
(
ngx_°ªam_s¶_¥îód_§v_c⁄f_t
, 
íabÀd
),

56 
NULL
 },

58 
ngx_nuŒ_comm™d


62 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_s¶_¥îód_moduÀ_˘x
 = {

63 
ngx_°ªam_s¶_¥îód_add_v¨übÀs
,

64 
ngx_°ªam_s¶_¥îód_öô
,

66 
NULL
,

67 
NULL
,

69 
ngx_°ªam_s¶_¥îód_¸óã_§v_c⁄f
,

70 
ngx_°ªam_s¶_¥îód_mîge_§v_c⁄f


74 
ngx_moduÀ_t
 
	gngx_°ªam_s¶_¥îód_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_°ªam_s¶_¥îód_moduÀ_˘x
,

77 
ngx_°ªam_s¶_¥îód_comm™ds
,

78 
NGX_STREAM_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_°ªam_v¨übÀ_t
 
	gngx_°ªam_s¶_¥îód_v¨s
[] = {

92 { 
ngx_°rög
("s¶_¥îód_¥Ÿocﬁ"), 
NULL
,

93 
ngx_°ªam_s¶_¥îód_¥Ÿocﬁ_v¨übÀ
, 0, 0, 0 },

95 { 
ngx_°rög
("s¶_¥îód_£rvî_«me"), 
NULL
,

96 
ngx_°ªam_s¶_¥îód_£rvî_«me_v¨übÀ
, 0, 0, 0 },

98 { 
ngx_°rög
("s¶_¥îód_Æ≤_¥Ÿocﬁs"), 
NULL
,

99 
ngx_°ªam_s¶_¥îód_Æ≤_¥Ÿocﬁs_v¨übÀ
, 0, 0, 0 },

101 
ngx_°ªam_nuŒ_v¨übÀ


105 
ngx_öt_t


106 
	$ngx_°ªam_s¶_¥îód_h™dÀr
(
ngx_°ªam_£ssi⁄_t
 *
s
)

108 
u_ch¨
 *
œ°
, *
p
;

109 
size_t
 
Àn
;

110 
ngx_öt_t
 
rc
;

111 
ngx_c⁄√˘i⁄_t
 *
c
;

112 
ngx_°ªam_s¶_¥îód_˘x_t
 *
˘x
;

113 
ngx_°ªam_s¶_¥îód_§v_c⁄f_t
 *
sscf
;

115 
c
 = 
s
->
c⁄√˘i⁄
;

117 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0, "sslÖreread handler");

119 
sscf
 = 
	`ngx_°ªam_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

121 i‡(!
sscf
->
íabÀd
) {

122  
NGX_DECLINED
;

125 i‡(
c
->
ty≥
 !
SOCK_STREAM
) {

126  
NGX_DECLINED
;

129 i‡(
c
->
buf„r
 =
NULL
) {

130  
NGX_AGAIN
;

133 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

134 i‡(
˘x
 =
NULL
) {

135 
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_°ªam_s¶_¥îód_˘x_t
));

136 i‡(
˘x
 =
NULL
) {

137  
NGX_ERROR
;

140 
	`ngx_°ªam_£t_˘x
(
s
, 
˘x
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

142 
˘x
->
poﬁ
 = 
c
->pool;

143 
˘x
->
log
 = 
c
->log;

144 
˘x
->
pos
 = 
c
->
buf„r
->pos;

147 
p
 = 
˘x
->
pos
;

148 
œ°
 = 
c
->
buf„r
->last;

150 
œ°
 - 
p
 >= 5) {

152 i‡((
p
[0] & 0x80) &&Ö[2] == 1 && (p[3] == 0 ||Ö[3] == 3)) {

153 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

155 
˘x
->
vîsi⁄
[0] = 
p
[3];

156 
˘x
->
vîsi⁄
[1] = 
p
[4];

157  
NGX_OK
;

160 i‡(
p
[0] != 0x16) {

161 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

163 
	`ngx_°ªam_£t_˘x
(
s
, 
NULL
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

164  
NGX_DECLINED
;

167 i‡(
p
[1] != 3) {

168 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

170 
	`ngx_°ªam_£t_˘x
(
s
, 
NULL
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

171  
NGX_DECLINED
;

174 
Àn
 = (
p
[3] << 8) +Ö[4];

177 i‡((
size_t
Ë(
œ°
 - 
p
Ë< 
Àn
 + 5) {

181 
p
 += 5;

183 
rc
 = 
	`ngx_°ªam_s¶_¥îód_∑r£_ªc‹d
(
˘x
, 
p
,Ö + 
Àn
);

185 i‡(
rc
 =
NGX_DECLINED
) {

186 
	`ngx_°ªam_£t_˘x
(
s
, 
NULL
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

187  
NGX_DECLINED
;

190 i‡(
rc
 !
NGX_AGAIN
) {

191  
rc
;

194 
p
 +
Àn
;

197 
˘x
->
pos
 = 
p
;

199  
NGX_AGAIN
;

200 
	}
}

203 
ngx_öt_t


204 
	$ngx_°ªam_s¶_¥îód_∑r£_ªc‹d
(
ngx_°ªam_s¶_¥îód_˘x_t
 *
˘x
,

205 
u_ch¨
 *
pos
, u_ch¨ *
œ°
)

207 
size_t
 
À·
, 
n
, 
size
, 
ext
;

208 
u_ch¨
 *
d°
, *
p
;

211 
sw_°¨t
 = 0,

212 
sw_hódî
,

213 
sw_vîsi⁄
,

214 
sw_øndom
,

215 
sw_sid_Àn
,

216 
sw_sid
,

217 
sw_cs_Àn
,

218 
sw_cs
,

219 
sw_cm_Àn
,

220 
sw_cm
,

221 
sw_ext
,

222 
sw_ext_hódî
,

223 
sw_¢i_Àn
,

224 
sw_¢i_ho°_hód
,

225 
sw_¢i_ho°
,

226 
sw_Æ≤_Àn
,

227 
sw_Æ≤_¥Ÿo_Àn
,

228 
sw_Æ≤_¥Ÿo_d©a
,

229 
sw_supvî_Àn


230 } 
°©e
;

232 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

233 "s¶Öªªad: sèã %uòÀ· %z", 
˘x
->
°©e
, ctx->
À·
);

235 
°©e
 = 
˘x
->state;

236 
size
 = 
˘x
->size;

237 
À·
 = 
˘x
->left;

238 
ext
 = 
˘x
->ext;

239 
d°
 = 
˘x
->dst;

240 
p
 = 
˘x
->
buf
;

243 
n
 = 
	`ngx_mö
((
size_t
Ë(
œ°
 - 
pos
), 
size
);

245 i‡(
d°
) {

246 
d°
 = 
	`ngx_˝ymem
(d°, 
pos
, 
n
);

249 
pos
 +
n
;

250 
size
 -
n
;

251 
À·
 -
n
;

253 i‡(
size
 != 0) {

257 
°©e
) {

259 
sw_°¨t
:

260 
°©e
 = 
sw_hódî
;

261 
d°
 = 
p
;

262 
size
 = 4;

263 
À·
 = 
size
;

266 
sw_hódî
:

267 i‡(
p
[0] != 1) {

268 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

270  
NGX_DECLINED
;

273 
°©e
 = 
sw_vîsi⁄
;

274 
d°
 = 
˘x
->
vîsi⁄
;

275 
size
 = 2;

276 
À·
 = (
p
[1] << 16) + (p[2] << 8) +Ö[3];

279 
sw_vîsi⁄
:

280 
°©e
 = 
sw_øndom
;

281 
d°
 = 
NULL
;

282 
size
 = 32;

285 
sw_øndom
:

286 
°©e
 = 
sw_sid_Àn
;

287 
d°
 = 
p
;

288 
size
 = 1;

291 
sw_sid_Àn
:

292 
°©e
 = 
sw_sid
;

293 
d°
 = 
NULL
;

294 
size
 = 
p
[0];

297 
sw_sid
:

298 
°©e
 = 
sw_cs_Àn
;

299 
d°
 = 
p
;

300 
size
 = 2;

303 
sw_cs_Àn
:

304 
°©e
 = 
sw_cs
;

305 
d°
 = 
NULL
;

306 
size
 = (
p
[0] << 8) +Ö[1];

309 
sw_cs
:

310 
°©e
 = 
sw_cm_Àn
;

311 
d°
 = 
p
;

312 
size
 = 1;

315 
sw_cm_Àn
:

316 
°©e
 = 
sw_cm
;

317 
d°
 = 
NULL
;

318 
size
 = 
p
[0];

321 
sw_cm
:

322 i‡(
À·
 == 0) {

324  
NGX_OK
;

327 
°©e
 = 
sw_ext
;

328 
d°
 = 
p
;

329 
size
 = 2;

332 
sw_ext
:

333 i‡(
À·
 == 0) {

334  
NGX_OK
;

337 
°©e
 = 
sw_ext_hódî
;

338 
d°
 = 
p
;

339 
size
 = 4;

342 
sw_ext_hódî
:

343 i‡(
p
[0] =0 &&Ö[1] =0 && 
˘x
->
ho°
.
d©a
 =
NULL
) {

345 
°©e
 = 
sw_¢i_Àn
;

346 
d°
 = 
p
;

347 
size
 = 2;

351 i‡(
p
[0] =0 &&Ö[1] =16 && 
˘x
->
Æ≤
.
d©a
 =
NULL
) {

353 
°©e
 = 
sw_Æ≤_Àn
;

354 
d°
 = 
p
;

355 
size
 = 2;

359 i‡(
p
[0] == 0 &&Ö[1] == 43) {

361 
°©e
 = 
sw_supvî_Àn
;

362 
d°
 = 
p
;

363 
size
 = 1;

367 
°©e
 = 
sw_ext
;

368 
d°
 = 
NULL
;

369 
size
 = (
p
[2] << 8) +Ö[3];

372 
sw_¢i_Àn
:

373 
ext
 = (
p
[0] << 8) +Ö[1];

374 
°©e
 = 
sw_¢i_ho°_hód
;

375 
d°
 = 
p
;

376 
size
 = 3;

379 
sw_¢i_ho°_hód
:

380 i‡(
p
[0] != 0) {

381 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

383  
NGX_DECLINED
;

386 
size
 = (
p
[1] << 8) +Ö[2];

388 i‡(
ext
 < 3 + 
size
) {

389 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

391  
NGX_DECLINED
;

393 
ext
 -3 + 
size
;

395 
˘x
->
ho°
.
d©a
 = 
	`ngx_≤Æloc
(˘x->
poﬁ
, 
size
);

396 i‡(
˘x
->
ho°
.
d©a
 =
NULL
) {

397  
NGX_ERROR
;

400 
°©e
 = 
sw_¢i_ho°
;

401 
d°
 = 
˘x
->
ho°
.
d©a
;

404 
sw_¢i_ho°
:

405 
˘x
->
ho°
.
Àn
 = (
p
[1] << 8) +Ö[2];

407 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

408 "s¶Öªªad: SNI ho°«mê\"%V\"", &
˘x
->
ho°
);

410 
°©e
 = 
sw_ext
;

411 
d°
 = 
NULL
;

412 
size
 = 
ext
;

415 
sw_Æ≤_Àn
:

416 
ext
 = (
p
[0] << 8) +Ö[1];

418 
˘x
->
Æ≤
.
d©a
 = 
	`ngx_≤Æloc
(˘x->
poﬁ
, 
ext
);

419 i‡(
˘x
->
Æ≤
.
d©a
 =
NULL
) {

420  
NGX_ERROR
;

423 
°©e
 = 
sw_Æ≤_¥Ÿo_Àn
;

424 
d°
 = 
p
;

425 
size
 = 1;

428 
sw_Æ≤_¥Ÿo_Àn
:

429 
size
 = 
p
[0];

431 i‡(
size
 == 0) {

432 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

434  
NGX_DECLINED
;

437 i‡(
ext
 < 1 + 
size
) {

438 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

440  
NGX_DECLINED
;

442 
ext
 -1 + 
size
;

444 
°©e
 = 
sw_Æ≤_¥Ÿo_d©a
;

445 
d°
 = 
˘x
->
Æ≤
.
d©a
 + ctx->Æ≤.
Àn
;

448 
sw_Æ≤_¥Ÿo_d©a
:

449 
˘x
->
Æ≤
.
Àn
 +
p
[0];

451 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

452 "s¶Öªªad: ALPNÖrŸocﬁ†\"%V\"", &
˘x
->
Æ≤
);

454 i‡(
ext
) {

455 
˘x
->
Æ≤
.
d©a
[˘x->Æ≤.
Àn
++] = ',';

457 
°©e
 = 
sw_Æ≤_¥Ÿo_Àn
;

458 
d°
 = 
p
;

459 
size
 = 1;

463 
°©e
 = 
sw_ext
;

464 
d°
 = 
NULL
;

465 
size
 = 0;

468 
sw_supvî_Àn
:

469 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

473 
˘x
->
vîsi⁄
[0] = 3;

474 
˘x
->
vîsi⁄
[1] = 4;

476 
°©e
 = 
sw_ext
;

477 
d°
 = 
NULL
;

478 
size
 = 
p
[0];

482 i‡(
À·
 < 
size
) {

483 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
˘x
->
log
, 0,

485  
NGX_DECLINED
;

489 
˘x
->
°©e
 = state;

490 
˘x
->
size
 = size;

491 
˘x
->
À·
 =Üeft;

492 
˘x
->
ext
 =Éxt;

493 
˘x
->
d°
 = dst;

495  
NGX_AGAIN
;

496 
	}
}

499 
ngx_öt_t


500 
	$ngx_°ªam_s¶_¥îód_¥Ÿocﬁ_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

501 
ngx_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

503 
ngx_°r_t
 
vîsi⁄
;

504 
ngx_°ªam_s¶_¥îód_˘x_t
 *
˘x
;

506 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

508 i‡(
˘x
 =
NULL
) {

509 
v
->
nŸ_found
 = 1;

510  
NGX_OK
;

515 
	`ngx_°r_nuŒ
(&
vîsi⁄
);

517 
˘x
->
vîsi⁄
[0]) {

519 
˘x
->
vîsi⁄
[1]) {

521 
	`ngx_°r_£t
(&
vîsi⁄
, "SSLv2");

526 
˘x
->
vîsi⁄
[1]) {

528 
	`ngx_°r_£t
(&
vîsi⁄
, "SSLv3");

531 
	`ngx_°r_£t
(&
vîsi⁄
, "TLSv1");

534 
	`ngx_°r_£t
(&
vîsi⁄
, "TLSv1.1");

537 
	`ngx_°r_£t
(&
vîsi⁄
, "TLSv1.2");

540 
	`ngx_°r_£t
(&
vîsi⁄
, "TLSv1.3");

545 
v
->
vÆid
 = 1;

546 
v
->
no_ˇchóbÀ
 = 0;

547 
v
->
nŸ_found
 = 0;

548 
v
->
Àn
 = 
vîsi⁄
.len;

549 
v
->
d©a
 = 
vîsi⁄
.data;

551  
NGX_OK
;

552 
	}
}

555 
ngx_öt_t


556 
	$ngx_°ªam_s¶_¥îód_£rvî_«me_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

557 
ngx_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

559 
ngx_°ªam_s¶_¥îód_˘x_t
 *
˘x
;

561 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

563 i‡(
˘x
 =
NULL
) {

564 
v
->
nŸ_found
 = 1;

565  
NGX_OK
;

568 
v
->
vÆid
 = 1;

569 
v
->
no_ˇchóbÀ
 = 0;

570 
v
->
nŸ_found
 = 0;

571 
v
->
Àn
 = 
˘x
->
ho°
.len;

572 
v
->
d©a
 = 
˘x
->
ho°
.data;

574  
NGX_OK
;

575 
	}
}

578 
ngx_öt_t


579 
	$ngx_°ªam_s¶_¥îód_Æ≤_¥Ÿocﬁs_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

580 
ngx_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

582 
ngx_°ªam_s¶_¥îód_˘x_t
 *
˘x
;

584 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_s¶_¥îód_moduÀ
);

586 i‡(
˘x
 =
NULL
) {

587 
v
->
nŸ_found
 = 1;

588  
NGX_OK
;

591 
v
->
vÆid
 = 1;

592 
v
->
no_ˇchóbÀ
 = 0;

593 
v
->
nŸ_found
 = 0;

594 
v
->
Àn
 = 
˘x
->
Æ≤
.len;

595 
v
->
d©a
 = 
˘x
->
Æ≤
.data;

597  
NGX_OK
;

598 
	}
}

601 
ngx_öt_t


602 
	$ngx_°ªam_s¶_¥îód_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

604 
ngx_°ªam_v¨übÀ_t
 *
v¨
, *
v
;

606 
v
 = 
ngx_°ªam_s¶_¥îód_v¨s
; v->
«me
.
Àn
; v++) {

607 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

608 i‡(
v¨
 =
NULL
) {

609  
NGX_ERROR
;

612 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

613 
v¨
->
d©a
 = 
v
->data;

616  
NGX_OK
;

617 
	}
}

621 
	$ngx_°ªam_s¶_¥îód_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

623 
ngx_°ªam_s¶_¥îód_§v_c⁄f_t
 *
c⁄f
;

625 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_s¶_¥îód_§v_c⁄f_t
));

626 i‡(
c⁄f
 =
NULL
) {

627  
NULL
;

630 
c⁄f
->
íabÀd
 = 
NGX_CONF_UNSET
;

632  
c⁄f
;

633 
	}
}

637 
	$ngx_°ªam_s¶_¥îód_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

639 
ngx_°ªam_s¶_¥îód_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

640 
ngx_°ªam_s¶_¥îód_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

642 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀd
, 
¥ev
->enabled, 0);

644  
NGX_CONF_OK
;

645 
	}
}

648 
ngx_öt_t


649 
	$ngx_°ªam_s¶_¥îód_öô
(
ngx_c⁄f_t
 *
cf
)

651 
ngx_°ªam_h™dÀr_±
 *
h
;

652 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

654 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

656 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_STREAM_PREREAD_PHASE
].
h™dÀrs
);

657 i‡(
h
 =
NULL
) {

658  
NGX_ERROR
;

661 *
h
 = 
ngx_°ªam_s¶_¥îód_h™dÀr
;

663  
NGX_OK
;

664 
	}
}

	@src/stream/ngx_stream_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 
ngx_öt_t
 
ngx_°ªam_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

14 
ngx_öt_t
 
ngx_°ªam_up°ªam_addr_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

15 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_öt_t
 
ngx_°ªam_up°ªam_ª•⁄£_time_v¨übÀ
(

17 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_°ªam_up°ªam_byãs_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

19 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

21 *
ngx_°ªam_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

22 *
dummy
);

23 *
ngx_°ªam_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

24 *
c⁄f
);

25 *
ngx_°ªam_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

26 *
ngx_°ªam_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

29 
ngx_comm™d_t
 
	gngx_°ªam_up°ªam_comm™ds
[] = {

31 { 
ngx_°rög
("upstream"),

32 
NGX_STREAM_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

33 
ngx_°ªam_up°ªam
,

36 
NULL
 },

38 { 
ngx_°rög
("server"),

39 
NGX_STREAM_UPS_CONF
|
NGX_CONF_1MORE
,

40 
ngx_°ªam_up°ªam_£rvî
,

41 
NGX_STREAM_SRV_CONF_OFFSET
,

43 
NULL
 },

45 
ngx_nuŒ_comm™d


49 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_up°ªam_moduÀ_˘x
 = {

50 
ngx_°ªam_up°ªam_add_v¨übÀs
,

51 
NULL
,

53 
ngx_°ªam_up°ªam_¸óã_maö_c⁄f
,

54 
ngx_°ªam_up°ªam_öô_maö_c⁄f
,

56 
NULL
,

57 
NULL


61 
ngx_moduÀ_t
 
	gngx_°ªam_up°ªam_moduÀ
 = {

62 
NGX_MODULE_V1
,

63 &
ngx_°ªam_up°ªam_moduÀ_˘x
,

64 
ngx_°ªam_up°ªam_comm™ds
,

65 
NGX_STREAM_MODULE
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NGX_MODULE_V1_PADDING


77 
ngx_°ªam_v¨übÀ_t
 
	gngx_°ªam_up°ªam_v¨s
[] = {

79 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

80 
ngx_°ªam_up°ªam_addr_v¨übÀ
, 0,

81 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

83 { 
ngx_°rög
("up°ªam_byãs_£¡"), 
NULL
,

84 
ngx_°ªam_up°ªam_byãs_v¨übÀ
, 0,

85 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

87 { 
ngx_°rög
("up°ªam_c⁄√˘_time"), 
NULL
,

88 
ngx_°ªam_up°ªam_ª•⁄£_time_v¨übÀ
, 2,

89 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

91 { 
ngx_°rög
("up°ªam_fú°_byã_time"), 
NULL
,

92 
ngx_°ªam_up°ªam_ª•⁄£_time_v¨übÀ
, 1,

93 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

95 { 
ngx_°rög
("up°ªam_£ssi⁄_time"), 
NULL
,

96 
ngx_°ªam_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

97 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

99 { 
ngx_°rög
("up°ªam_byãs_ª˚ived"), 
NULL
,

100 
ngx_°ªam_up°ªam_byãs_v¨übÀ
, 1,

101 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

103 
ngx_°ªam_nuŒ_v¨übÀ


107 
ngx_öt_t


108 
	$ngx_°ªam_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

110 
ngx_°ªam_v¨übÀ_t
 *
v¨
, *
v
;

112 
v
 = 
ngx_°ªam_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

113 
v¨
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

114 i‡(
v¨
 =
NULL
) {

115  
NGX_ERROR
;

118 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

119 
v¨
->
d©a
 = 
v
->data;

122  
NGX_OK
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_°ªam_up°ªam_addr_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

128 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

130 
u_ch¨
 *
p
;

131 
size_t
 
Àn
;

132 
ngx_uöt_t
 
i
;

133 
ngx_°ªam_up°ªam_°©e_t
 *
°©e
;

135 
v
->
vÆid
 = 1;

136 
v
->
no_ˇchóbÀ
 = 0;

137 
v
->
nŸ_found
 = 0;

139 i‡(
s
->
up°ªam_°©es
 =
NULL
 || s->up°ªam_°©es->
√…s
 == 0) {

140 
v
->
nŸ_found
 = 1;

141  
NGX_OK
;

144 
Àn
 = 0;

145 
°©e
 = 
s
->
up°ªam_°©es
->
ñts
;

147 
i
 = 0; i < 
s
->
up°ªam_°©es
->
√…s
; i++) {

148 i‡(
°©e
[
i
].
≥î
) {

149 
Àn
 +
°©e
[
i
].
≥î
->len;

152 
Àn
 += 2;

155 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

156 i‡(
p
 =
NULL
) {

157  
NGX_ERROR
;

160 
v
->
d©a
 = 
p
;

162 
i
 = 0;

165 i‡(
°©e
[
i
].
≥î
) {

166 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

169 i‡(++
i
 =
s
->
up°ªam_°©es
->
√…s
) {

173 *
p
++ = ',';

174 *
p
++ = ' ';

177 
v
->
Àn
 = 
p
 - v->
d©a
;

179  
NGX_OK
;

180 
	}
}

183 
ngx_öt_t


184 
	$ngx_°ªam_up°ªam_byãs_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

185 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

187 
u_ch¨
 *
p
;

188 
size_t
 
Àn
;

189 
ngx_uöt_t
 
i
;

190 
ngx_°ªam_up°ªam_°©e_t
 *
°©e
;

192 
v
->
vÆid
 = 1;

193 
v
->
no_ˇchóbÀ
 = 0;

194 
v
->
nŸ_found
 = 0;

196 i‡(
s
->
up°ªam_°©es
 =
NULL
 || s->up°ªam_°©es->
√…s
 == 0) {

197 
v
->
nŸ_found
 = 1;

198  
NGX_OK
;

201 
Àn
 = 
s
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

203 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

204 i‡(
p
 =
NULL
) {

205  
NGX_ERROR
;

208 
v
->
d©a
 = 
p
;

210 
i
 = 0;

211 
°©e
 = 
s
->
up°ªam_°©es
->
ñts
;

215 i‡(
d©a
 == 1) {

216 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
byãs_ª˚ived
);

219 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
byãs_£¡
);

222 i‡(++
i
 =
s
->
up°ªam_°©es
->
√…s
) {

226 *
p
++ = ',';

227 *
p
++ = ' ';

230 
v
->
Àn
 = 
p
 - v->
d©a
;

232  
NGX_OK
;

233 
	}
}

236 
ngx_öt_t


237 
	$ngx_°ªam_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

238 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

240 
u_ch¨
 *
p
;

241 
size_t
 
Àn
;

242 
ngx_uöt_t
 
i
;

243 
ngx_m£c_öt_t
 
ms
;

244 
ngx_°ªam_up°ªam_°©e_t
 *
°©e
;

246 
v
->
vÆid
 = 1;

247 
v
->
no_ˇchóbÀ
 = 0;

248 
v
->
nŸ_found
 = 0;

250 i‡(
s
->
up°ªam_°©es
 =
NULL
 || s->up°ªam_°©es->
√…s
 == 0) {

251 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

255 
Àn
 = 
s
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

257 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

258 i‡(
p
 =
NULL
) {

259  
NGX_ERROR
;

262 
v
->
d©a
 = 
p
;

264 
i
 = 0;

265 
°©e
 = 
s
->
up°ªam_°©es
->
ñts
;

269 i‡(
d©a
 == 1) {

270 i‡(
°©e
[
i
].
fú°_byã_time
 =(
ngx_m£c_t
) -1) {

271 *
p
++ = '-';

272 
√xt
;

275 
ms
 = 
°©e
[
i
].
fú°_byã_time
;

277 } i‡(
d©a
 =2 && 
°©e
[
i
].
c⁄√˘_time
 !(
ngx_m£c_t
) -1) {

278 
ms
 = 
°©e
[
i
].
c⁄√˘_time
;

281 
ms
 = 
°©e
[
i
].
ª•⁄£_time
;

284 
ms
 = 
	`ngx_max
(ms, 0);

285 
p
 = 
	`ngx_•rötf
’, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

287 
√xt
:

289 i‡(++
i
 =
s
->
up°ªam_°©es
->
√…s
) {

293 *
p
++ = ',';

294 *
p
++ = ' ';

297 
v
->
Àn
 = 
p
 - v->
d©a
;

299  
NGX_OK
;

300 
	}
}

304 
	$ngx_°ªam_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

306 *
rv
;

307 *
mc⁄f
;

308 
ngx_°r_t
 *
vÆue
;

309 
ngx_uæ_t
 
u
;

310 
ngx_uöt_t
 
m
;

311 
ngx_c⁄f_t
 
pcf
;

312 
ngx_°ªam_moduÀ_t
 *
moduÀ
;

313 
ngx_°ªam_c⁄f_˘x_t
 *
˘x
, *
°ªam_˘x
;

314 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
;

316 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

318 
vÆue
 = 
cf
->
¨gs
->
ñts
;

319 
u
.
ho°
 = 
vÆue
[1];

320 
u
.
no_ªsﬁve
 = 1;

321 
u
.
no_p‹t
 = 1;

323 
uscf
 = 
	`ngx_°ªam_up°ªam_add
(
cf
, &
u
, 
NGX_STREAM_UPSTREAM_CREATE


324 |
NGX_STREAM_UPSTREAM_WEIGHT


325 |
NGX_STREAM_UPSTREAM_MAX_CONNS


326 |
NGX_STREAM_UPSTREAM_MAX_FAILS


327 |
NGX_STREAM_UPSTREAM_FAIL_TIMEOUT


328 |
NGX_STREAM_UPSTREAM_DOWN


329 |
NGX_STREAM_UPSTREAM_BACKUP
);

330 i‡(
uscf
 =
NULL
) {

331  
NGX_CONF_ERROR
;

335 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_c⁄f_˘x_t
));

336 i‡(
˘x
 =
NULL
) {

337  
NGX_CONF_ERROR
;

340 
°ªam_˘x
 = 
cf
->
˘x
;

341 
˘x
->
maö_c⁄f
 = 
°ªam_˘x
->main_conf;

345 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

346 (*Ë* 
ngx_°ªam_max_moduÀ
);

347 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

348  
NGX_CONF_ERROR
;

351 
˘x
->
§v_c⁄f
[
ngx_°ªam_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

353 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

355 
m
 = 0; 
cf
->
cy˛e
->
moduÀs
[m]; m++) {

356 i‡(
cf
->
cy˛e
->
moduÀs
[
m
]->
ty≥
 !
NGX_STREAM_MODULE
) {

360 
moduÀ
 = 
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x
;

362 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

363 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

364 i‡(
mc⁄f
 =
NULL
) {

365  
NGX_CONF_ERROR
;

368 
˘x
->
§v_c⁄f
[
cf
->
cy˛e
->
moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

372 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

373 (
ngx_°ªam_up°ªam_£rvî_t
));

374 i‡(
uscf
->
£rvîs
 =
NULL
) {

375  
NGX_CONF_ERROR
;

381 
pcf
 = *
cf
;

382 
cf
->
˘x
 = ctx;

383 
cf
->
cmd_ty≥
 = 
NGX_STREAM_UPS_CONF
;

385 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

387 *
cf
 = 
pcf
;

389 i‡(
rv
 !
NGX_CONF_OK
) {

390  
rv
;

393 i‡(
uscf
->
£rvîs
->
√…s
 == 0) {

394 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

396  
NGX_CONF_ERROR
;

399  
rv
;

400 
	}
}

404 
	$ngx_°ªam_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

406 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

408 
time_t
 
Áû_timeout
;

409 
ngx_°r_t
 *
vÆue
, 
s
;

410 
ngx_uæ_t
 
u
;

411 
ngx_öt_t
 
weight
, 
max_c⁄ns
, 
max_Áûs
;

412 
ngx_uöt_t
 
i
;

413 
ngx_°ªam_up°ªam_£rvî_t
 *
us
;

415 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

416 i‡(
us
 =
NULL
) {

417  
NGX_CONF_ERROR
;

420 
	`ngx_memzîo
(
us
, (
ngx_°ªam_up°ªam_£rvî_t
));

422 
vÆue
 = 
cf
->
¨gs
->
ñts
;

424 
weight
 = 1;

425 
max_c⁄ns
 = 0;

426 
max_Áûs
 = 1;

427 
Áû_timeout
 = 10;

429 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

431 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

433 i‡(!(
uscf
->
Êags
 & 
NGX_STREAM_UPSTREAM_WEIGHT
)) {

434 
nŸ_suµ‹ãd
;

437 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

439 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

440 
övÆid
;

446 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_conns=", 10) == 0) {

448 i‡(!(
uscf
->
Êags
 & 
NGX_STREAM_UPSTREAM_MAX_CONNS
)) {

449 
nŸ_suµ‹ãd
;

452 
max_c⁄ns
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

454 i‡(
max_c⁄ns
 =
NGX_ERROR
) {

455 
övÆid
;

461 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

463 i‡(!(
uscf
->
Êags
 & 
NGX_STREAM_UPSTREAM_MAX_FAILS
)) {

464 
nŸ_suµ‹ãd
;

467 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

469 i‡(
max_Áûs
 =
NGX_ERROR
) {

470 
övÆid
;

476 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

478 i‡(!(
uscf
->
Êags
 & 
NGX_STREAM_UPSTREAM_FAIL_TIMEOUT
)) {

479 
nŸ_suµ‹ãd
;

482 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

483 
s
.
d©a
 = &
vÆue
[
i
].data[13];

485 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

487 i‡(
Áû_timeout
 =(
time_t
Ë
NGX_ERROR
) {

488 
övÆid
;

494 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "backup") == 0) {

496 i‡(!(
uscf
->
Êags
 & 
NGX_STREAM_UPSTREAM_BACKUP
)) {

497 
nŸ_suµ‹ãd
;

500 
us
->
backup
 = 1;

505 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "down") == 0) {

507 i‡(!(
uscf
->
Êags
 & 
NGX_STREAM_UPSTREAM_DOWN
)) {

508 
nŸ_suµ‹ãd
;

511 
us
->
down
 = 1;

516 
övÆid
;

519 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

521 
u
.
uæ
 = 
vÆue
[1];

523 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

524 i‡(
u
.
îr
) {

525 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

526 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

529  
NGX_CONF_ERROR
;

532 i‡(
u
.
no_p‹t
) {

533 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

534 "nÿp‹àö up°ªam \"%V\"", &
u
.
uæ
);

535  
NGX_CONF_ERROR
;

538 
us
->
«me
 = 
u
.
uæ
;

539 
us
->
addrs
 = 
u
.addrs;

540 
us
->
«ddrs
 = 
u
.naddrs;

541 
us
->
weight
 = weight;

542 
us
->
max_c⁄ns
 = max_conns;

543 
us
->
max_Áûs
 = max_fails;

544 
us
->
Áû_timeout
 = fail_timeout;

546  
NGX_CONF_OK
;

548 
övÆid
:

550 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

551 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

553  
NGX_CONF_ERROR
;

555 
nŸ_suµ‹ãd
:

557 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

559 &
vÆue
[
i
]);

561  
NGX_CONF_ERROR
;

562 
	}
}

565 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *

566 
	$ngx_°ªam_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

568 
ngx_uöt_t
 
i
;

569 
ngx_°ªam_up°ªam_£rvî_t
 *
us
;

570 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

571 
ngx_°ªam_up°ªam_maö_c⁄f_t
 *
umcf
;

573 i‡(!(
Êags
 & 
NGX_STREAM_UPSTREAM_CREATE
)) {

575 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

576 i‡(
u
->
îr
) {

577 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

578 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

581  
NULL
;

585 
umcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_up°ªam_moduÀ
);

587 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

589 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

591 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

592 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

598 i‡((
Êags
 & 
NGX_STREAM_UPSTREAM_CREATE
)

599 && (
uscÂ
[
i
]->
Êags
 & 
NGX_STREAM_UPSTREAM_CREATE
))

601 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

602 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

603  
NULL
;

606 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_STREAM_UPSTREAM_CREATE
Ë&& !
u
->
no_p‹t
) {

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

609 &
u
->
ho°
, u->
p‹t
);

610  
NULL
;

613 i‡((
Êags
 & 
NGX_STREAM_UPSTREAM_CREATE
Ë&& !
uscÂ
[
i
]->
no_p‹t
) {

614 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

616 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

617 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

618  
NULL
;

621 i‡(
uscÂ
[
i
]->
p‹t
 !
u
->port) {

625 i‡(
Êags
 & 
NGX_STREAM_UPSTREAM_CREATE
) {

626 
uscÂ
[
i
]->
Êags
 = flags;

629  
uscÂ
[
i
];

632 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_§v_c⁄f_t
));

633 i‡(
uscf
 =
NULL
) {

634  
NULL
;

637 
uscf
->
Êags
 = flags;

638 
uscf
->
ho°
 = 
u
->host;

639 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

640 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

641 
uscf
->
p‹t
 = 
u
->port;

642 
uscf
->
no_p‹t
 = 
u
->no_port;

644 i‡(
u
->
«ddrs
 =1 && (u->
p‹t
 || u->
Ámûy
 =
AF_UNIX
)) {

645 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

646 (
ngx_°ªam_up°ªam_£rvî_t
));

647 i‡(
uscf
->
£rvîs
 =
NULL
) {

648  
NULL
;

651 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

652 i‡(
us
 =
NULL
) {

653  
NULL
;

656 
	`ngx_memzîo
(
us
, (
ngx_°ªam_up°ªam_£rvî_t
));

658 
us
->
addrs
 = 
u
->addrs;

659 
us
->
«ddrs
 = 1;

662 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

663 i‡(
uscÂ
 =
NULL
) {

664  
NULL
;

667 *
uscÂ
 = 
uscf
;

669  
uscf
;

670 
	}
}

674 
	$ngx_°ªam_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

676 
ngx_°ªam_up°ªam_maö_c⁄f_t
 *
umcf
;

678 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_maö_c⁄f_t
));

679 i‡(
umcf
 =
NULL
) {

680  
NULL
;

683 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

684 (
ngx_°ªam_up°ªam_§v_c⁄f_t
 *))

685 !
NGX_OK
)

687  
NULL
;

690  
umcf
;

691 
	}
}

695 
	$ngx_°ªam_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

697 
ngx_°ªam_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

699 
ngx_uöt_t
 
i
;

700 
ngx_°ªam_up°ªam_öô_±
 
öô
;

701 
ngx_°ªam_up°ªam_§v_c⁄f_t
 **
uscÂ
;

703 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

705 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

707 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam


708 ? 
uscÂ
[
i
]->
≥î
.
öô_up°ªam


709 : 
ngx_°ªam_up°ªam_öô_round_robö
;

711 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

712  
NGX_CONF_ERROR
;

716  
NGX_CONF_OK
;

717 
	}
}

	@src/stream/ngx_stream_upstream.h

8 #i‚de‡
_NGX_STREAM_UPSTREAM_H_INCLUDED_


9 
	#_NGX_STREAM_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_°ªam.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

18 
	#NGX_STREAM_UPSTREAM_CREATE
 0x0001

	)

19 
	#NGX_STREAM_UPSTREAM_WEIGHT
 0x0002

	)

20 
	#NGX_STREAM_UPSTREAM_MAX_FAILS
 0x0004

	)

21 
	#NGX_STREAM_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

22 
	#NGX_STREAM_UPSTREAM_DOWN
 0x0010

	)

23 
	#NGX_STREAM_UPSTREAM_BACKUP
 0x0020

	)

24 
	#NGX_STREAM_UPSTREAM_MAX_CONNS
 0x0100

	)

27 
	#NGX_STREAM_UPSTREAM_NOTIFY_CONNECT
 0x1

	)

31 
ngx_¨øy_t
 
	mup°ªams
;

33 } 
	tngx_°ªam_up°ªam_maö_c⁄f_t
;

36 
ngx_°ªam_up°ªam_§v_c⁄f_s
 
	tngx_°ªam_up°ªam_§v_c⁄f_t
;

39 
	$ngx_öt_t
 (*
	tngx_°ªam_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

40 
	tngx_°ªam_up°ªam_§v_c⁄f_t
 *
	tus
);

41 
	$ngx_öt_t
 (*
	tngx_°ªam_up°ªam_öô_≥î_±
)(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

42 
	tngx_°ªam_up°ªam_§v_c⁄f_t
 *
	tus
);

46 
ngx_°ªam_up°ªam_öô_±
 
öô_up°ªam
;

47 
ngx_°ªam_up°ªam_öô_≥î_±
 
öô
;

48 *
d©a
;

49 } 
	tngx_°ªam_up°ªam_≥î_t
;

53 
ngx_°r_t
 
«me
;

54 
ngx_addr_t
 *
addrs
;

55 
ngx_uöt_t
 
«ddrs
;

56 
ngx_uöt_t
 
weight
;

57 
ngx_uöt_t
 
max_c⁄ns
;

58 
ngx_uöt_t
 
max_Áûs
;

59 
time_t
 
Áû_timeout
;

60 
ngx_m£c_t
 
¶ow_°¨t
;

61 
ngx_uöt_t
 
down
;

63 
backup
:1;

65 
	`NGX_COMPAT_BEGIN
(4)

66 
NGX_COMPAT_END


67 } 
	tngx_°ªam_up°ªam_£rvî_t
;

70 
	sngx_°ªam_up°ªam_§v_c⁄f_s
 {

71 
ngx_°ªam_up°ªam_≥î_t
 
≥î
;

72 **
§v_c⁄f
;

74 
ngx_¨øy_t
 *
£rvîs
;

77 
ngx_uöt_t
 
Êags
;

78 
ngx_°r_t
 
ho°
;

79 
u_ch¨
 *
fûe_«me
;

80 
ngx_uöt_t
 
löe
;

81 
ö_p‹t_t
 
p‹t
;

82 
ngx_uöt_t
 
no_p‹t
;

84 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

85 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

91 
ngx_m£c_t
 
ª•⁄£_time
;

92 
ngx_m£c_t
 
c⁄√˘_time
;

93 
ngx_m£c_t
 
fú°_byã_time
;

94 
off_t
 
byãs_£¡
;

95 
off_t
 
byãs_ª˚ived
;

97 
ngx_°r_t
 *
≥î
;

98 } 
	tngx_°ªam_up°ªam_°©e_t
;

102 
ngx_°r_t
 
ho°
;

103 
ö_p‹t_t
 
p‹t
;

104 
ngx_uöt_t
 
no_p‹t
;

106 
ngx_uöt_t
 
«ddrs
;

107 
ngx_ªsﬁvî_addr_t
 *
addrs
;

109 
sockaddr
 *sockaddr;

110 
sockÀn_t
 
sockÀn
;

111 
ngx_°r_t
 
«me
;

113 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

114 } 
	tngx_°ªam_up°ªam_ªsﬁved_t
;

118 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

120 
ngx_buf_t
 
down°ªam_buf
;

121 
ngx_buf_t
 
up°ªam_buf
;

123 
ngx_chaö_t
 *
‰ì
;

124 
ngx_chaö_t
 *
up°ªam_out
;

125 
ngx_chaö_t
 *
up°ªam_busy
;

126 
ngx_chaö_t
 *
down°ªam_out
;

127 
ngx_chaö_t
 *
down°ªam_busy
;

129 
off_t
 
ª˚ived
;

130 
time_t
 
°¨t_£c
;

131 
ngx_uöt_t
 
ªque°s
;

132 
ngx_uöt_t
 
ª•⁄£s
;

134 
ngx_°r_t
 
s¶_«me
;

136 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
up°ªam
;

137 
ngx_°ªam_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

138 
ngx_°ªam_up°ªam_°©e_t
 *
°©e
;

139 
c⁄√˘ed
:1;

140 
¥oxy_¥Ÿocﬁ
:1;

141 } 
	tngx_°ªam_up°ªam_t
;

144 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
	`ngx_°ªam_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

145 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

148 
	#ngx_°ªam_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

149 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

152 
ngx_moduÀ_t
 
ngx_°ªam_up°ªam_moduÀ
;

	@src/stream/ngx_stream_upstream_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
uöt32_t
 
	mhash
;

15 
ngx_°r_t
 *
	m£rvî
;

16 } 
	tngx_°ªam_up°ªam_chash_poöt_t
;

20 
ngx_uöt_t
 
	mnumbî
;

21 
ngx_°ªam_up°ªam_chash_poöt_t
 
	mpoöt
[1];

22 } 
	tngx_°ªam_up°ªam_chash_poöts_t
;

26 
ngx_°ªam_com∂ex_vÆue_t
 
	mkey
;

27 
ngx_°ªam_up°ªam_chash_poöts_t
 *
	mpoöts
;

28 } 
	tngx_°ªam_up°ªam_hash_§v_c⁄f_t
;

33 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 
	mºp
;

34 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
	mc⁄f
;

35 
ngx_°r_t
 
	mkey
;

36 
ngx_uöt_t
 
	måõs
;

37 
ngx_uöt_t
 
	mªhash
;

38 
uöt32_t
 
	mhash
;

39 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

40 } 
	tngx_°ªam_up°ªam_hash_≥î_d©a_t
;

43 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_hash
(
ngx_c⁄f_t
 *
cf
,

44 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

45 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_hash_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

46 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

47 
ngx_öt_t
 
ngx_°ªam_up°ªam_gë_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

48 *
d©a
);

50 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_chash
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

52 
ngx_libc_cde˛


53 
ngx_°ªam_up°ªam_chash_cmp_poöts
(c⁄° *
⁄e
, c⁄° *
two
);

54 
ngx_uöt_t
 
ngx_°ªam_up°ªam_föd_chash_poöt
(

55 
ngx_°ªam_up°ªam_chash_poöts_t
 *
poöts
, 
uöt32_t
 
hash
);

56 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_chash_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

57 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

58 
ngx_öt_t
 
ngx_°ªam_up°ªam_gë_chash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

59 *
d©a
);

61 *
ngx_°ªam_up°ªam_hash_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

62 *
ngx_°ªam_up°ªam_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

66 
ngx_comm™d_t
 
	gngx_°ªam_up°ªam_hash_comm™ds
[] = {

68 { 
ngx_°rög
("hash"),

69 
NGX_STREAM_UPS_CONF
|
NGX_CONF_TAKE12
,

70 
ngx_°ªam_up°ªam_hash
,

71 
NGX_STREAM_SRV_CONF_OFFSET
,

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_up°ªam_hash_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_°ªam_up°ªam_hash_¸óã_c⁄f
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_°ªam_up°ªam_hash_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_°ªam_up°ªam_hash_moduÀ_˘x
,

94 
ngx_°ªam_up°ªam_hash_comm™ds
,

95 
NGX_STREAM_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_°ªam_up°ªam_öô_hash
(
ngx_c⁄f_t
 *
cf
,

109 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

111 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

112  
NGX_ERROR
;

115 
us
->
≥î
.
öô
 = 
ngx_°ªam_up°ªam_öô_hash_≥î
;

117  
NGX_OK
;

118 
	}
}

121 
ngx_öt_t


122 
	$ngx_°ªam_up°ªam_öô_hash_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

123 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

125 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

126 
ngx_°ªam_up°ªam_hash_≥î_d©a_t
 *
hp
;

128 
hp
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

129 (
ngx_°ªam_up°ªam_hash_≥î_d©a_t
));

130 i‡(
hp
 =
NULL
) {

131  
NGX_ERROR
;

134 
s
->
up°ªam
->
≥î
.
d©a
 = &
hp
->
ºp
;

136 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö_≥î
(
s
, 
us
Ë!
NGX_OK
) {

137  
NGX_ERROR
;

140 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_hash_≥î
;

142 
hcf
 = 
	`ngx_°ªam_c⁄f_up°ªam_§v_c⁄f
(
us
,

143 
ngx_°ªam_up°ªam_hash_moduÀ
);

145 i‡(
	`ngx_°ªam_com∂ex_vÆue
(
s
, &
hcf
->
key
, &
hp
->keyË!
NGX_OK
) {

146  
NGX_ERROR
;

149 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

150 "up°ªam hash key:\"%V\"", &
hp
->
key
);

152 
hp
->
c⁄f
 = 
hcf
;

153 
hp
->
åõs
 = 0;

154 
hp
->
ªhash
 = 0;

155 
hp
->
hash
 = 0;

156 
hp
->
gë_º_≥î
 = 
ngx_°ªam_up°ªam_gë_round_robö_≥î
;

158  
NGX_OK
;

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_°ªam_up°ªam_gë_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

165 
ngx_°ªam_up°ªam_hash_≥î_d©a_t
 *
hp
 = 
d©a
;

167 
time_t
 
now
;

168 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

169 
size_t
 
size
;

170 
uöt32_t
 
hash
;

171 
ngx_öt_t
 
w
;

172 
uöçå_t
 
m
;

173 
ngx_uöt_t
 
n
, 
p
;

174 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

176 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

177 "gë hashÖìr,Åry: %ui", 
pc
->
åõs
);

179 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
hp
->
ºp
.
≥îs
);

181 i‡(
hp
->
åõs
 > 20 || hp->
ºp
.
≥îs
->
sögÀ
) {

182 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

183  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

186 
now
 = 
	`ngx_time
();

188 
pc
->
c⁄√˘i⁄
 = 
NULL
;

198 
	`ngx_¸c32_öô
(
hash
);

200 i‡(
hp
->
ªhash
 > 0) {

201 
size
 = 
	`ngx_•rötf
(
buf
, "%ui", 
hp
->
ªhash
) - buf;

202 
	`ngx_¸c32_upd©e
(&
hash
, 
buf
, 
size
);

205 
	`ngx_¸c32_upd©e
(&
hash
, 
hp
->
key
.
d©a
, hp->key.
Àn
);

206 
	`ngx_¸c32_föÆ
(
hash
);

208 
hash
 = (hash >> 16) & 0x7fff;

210 
hp
->
hash
 += hash;

211 
hp
->
ªhash
++;

213 
w
 = 
hp
->
hash
 % hp->
ºp
.
≥îs
->
tŸÆ_weight
;

214 
≥î
 = 
hp
->
ºp
.
≥îs
->peer;

215 
p
 = 0;

217 
w
 >
≥î
->
weight
) {

218 
w
 -
≥î
->
weight
;

219 
≥î
 =Öìr->
√xt
;

220 
p
++;

223 
n
 = 
p
 / (8 * (
uöçå_t
));

224 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

226 i‡(
hp
->
ºp
.
åõd
[
n
] & 
m
) {

227 
√xt
;

230 
	`ngx_°ªam_up°ªam_º_≥î_lock
(
hp
->
ºp
.
≥îs
, 
≥î
);

232 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

233 "gë hashÖìr, vÆue:%uD,Öìr:%ui", 
hp
->
hash
, 
p
);

235 i‡(
≥î
->
down
) {

236 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

237 
√xt
;

240 i‡(
≥î
->
max_Áûs


241 && 
≥î
->
Áûs
 >≥î->
max_Áûs


242 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

244 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

245 
√xt
;

248 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

249 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

250 
√xt
;

255 
√xt
:

257 i‡(++
hp
->
åõs
 > 20) {

258 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

259  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

263 
hp
->
ºp
.
cuºít
 = 
≥î
;

265 
pc
->
sockaddr
 = 
≥î
->sockaddr;

266 
pc
->
sockÀn
 = 
≥î
->socklen;

267 
pc
->
«me
 = &
≥î
->name;

269 
≥î
->
c⁄ns
++;

271 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

272 
≥î
->
checked
 = 
now
;

275 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
hp
->
ºp
.
≥îs
, 
≥î
);

276 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

278 
hp
->
ºp
.
åõd
[
n
] |
m
;

280  
NGX_OK
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_°ªam_up°ªam_öô_chash
(
ngx_c⁄f_t
 *
cf
,

286 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

288 
u_ch¨
 *
ho°
, *
p‹t
, 
c
;

289 
size_t
 
ho°_Àn
, 
p‹t_Àn
, 
size
;

290 
uöt32_t
 
hash
, 
ba£_hash
;

291 
ngx_°r_t
 *
£rvî
;

292 
ngx_uöt_t
 
≈oöts
, 
i
, 
j
;

293 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

294 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

295 
ngx_°ªam_up°ªam_chash_poöts_t
 *
poöts
;

296 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

298 
uöt32_t
 
vÆue
;

299 
u_ch¨
 
byã
[4];

300 } 
¥ev_hash
;

302 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

303  
NGX_ERROR
;

306 
us
->
≥î
.
öô
 = 
ngx_°ªam_up°ªam_öô_chash_≥î
;

308 
≥îs
 = 
us
->
≥î
.
d©a
;

309 
≈oöts
 = 
≥îs
->
tŸÆ_weight
 * 160;

311 
size
 = (
ngx_°ªam_up°ªam_chash_poöts_t
)

312 + (
ngx_°ªam_up°ªam_chash_poöt_t
Ë* (
≈oöts
 - 1);

314 
poöts
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
size
);

315 i‡(
poöts
 =
NULL
) {

316  
NGX_ERROR
;

319 
poöts
->
numbî
 = 0;

321 
≥î
 = 
≥îs
->≥î;Öìr;Öì∏≥î->
√xt
) {

322 
£rvî
 = &
≥î
->server;

329 i‡(
£rvî
->
Àn
 >= 5

330 && 
	`ngx_°∫ˇ£cmp
(
£rvî
->
d©a
, (
u_ch¨
 *) "unix:", 5) == 0)

332 
ho°
 = 
£rvî
->
d©a
 + 5;

333 
ho°_Àn
 = 
£rvî
->
Àn
 - 5;

334 
p‹t
 = 
NULL
;

335 
p‹t_Àn
 = 0;

336 
d⁄e
;

339 
j
 = 0; j < 
£rvî
->
Àn
; j++) {

340 
c
 = 
£rvî
->
d©a
[£rvî->
Àn
 - 
j
 - 1];

342 i‡(
c
 == ':') {

343 
ho°
 = 
£rvî
->
d©a
;

344 
ho°_Àn
 = 
£rvî
->
Àn
 - 
j
 - 1;

345 
p‹t
 = 
£rvî
->
d©a
 + sîvî->
Àn
 - 
j
;

346 
p‹t_Àn
 = 
j
;

347 
d⁄e
;

350 i‡(
c
 < '0' || c > '9') {

355 
ho°
 = 
£rvî
->
d©a
;

356 
ho°_Àn
 = 
£rvî
->
Àn
;

357 
p‹t
 = 
NULL
;

358 
p‹t_Àn
 = 0;

360 
d⁄e
:

362 
	`ngx_¸c32_öô
(
ba£_hash
);

363 
	`ngx_¸c32_upd©e
(&
ba£_hash
, 
ho°
, 
ho°_Àn
);

364 
	`ngx_¸c32_upd©e
(&
ba£_hash
, (
u_ch¨
 *) "", 1);

365 
	`ngx_¸c32_upd©e
(&
ba£_hash
, 
p‹t
, 
p‹t_Àn
);

367 
¥ev_hash
.
vÆue
 = 0;

368 
≈oöts
 = 
≥î
->
weight
 * 160;

370 
j
 = 0; j < 
≈oöts
; j++) {

371 
hash
 = 
ba£_hash
;

373 
	`ngx_¸c32_upd©e
(&
hash
, 
¥ev_hash
.
byã
, 4);

374 
	`ngx_¸c32_föÆ
(
hash
);

376 
poöts
->
poöt
[poöts->
numbî
].
hash
 = hash;

377 
poöts
->
poöt
[poöts->
numbî
].
£rvî
 = server;

378 
poöts
->
numbî
++;

380 #i‡(
NGX_HAVE_LITTLE_ENDIAN
)

381 
¥ev_hash
.
vÆue
 = 
hash
;

383 
¥ev_hash
.
byã
[0] = (
u_ch¨
Ë(
hash
 & 0xff);

384 
¥ev_hash
.
byã
[1] = (
u_ch¨
Ë((
hash
 >> 8) & 0xff);

385 
¥ev_hash
.
byã
[2] = (
u_ch¨
Ë((
hash
 >> 16) & 0xff);

386 
¥ev_hash
.
byã
[3] = (
u_ch¨
Ë((
hash
 >> 24) & 0xff);

391 
	`ngx_qs‹t
(
poöts
->
poöt
,

392 
poöts
->
numbî
,

393 (
ngx_°ªam_up°ªam_chash_poöt_t
),

394 
ngx_°ªam_up°ªam_chash_cmp_poöts
);

396 
i
 = 0, 
j
 = 1; j < 
poöts
->
numbî
; j++) {

397 i‡(
poöts
->
poöt
[
i
].
hash
 !poöts->poöt[
j
].hash) {

398 
poöts
->
poöt
[++
i
] =Öoöts->poöt[
j
];

402 
poöts
->
numbî
 = 
i
 + 1;

404 
hcf
 = 
	`ngx_°ªam_c⁄f_up°ªam_§v_c⁄f
(
us
,

405 
ngx_°ªam_up°ªam_hash_moduÀ
);

406 
hcf
->
poöts
 =Öoints;

408  
NGX_OK
;

409 
	}
}

412 
ngx_libc_cde˛


413 
	$ngx_°ªam_up°ªam_chash_cmp_poöts
(c⁄° *
⁄e
, c⁄° *
two
)

415 
ngx_°ªam_up°ªam_chash_poöt_t
 *
fú°
 =

416 (
ngx_°ªam_up°ªam_chash_poöt_t
 *Ë
⁄e
;

417 
ngx_°ªam_up°ªam_chash_poöt_t
 *
£c⁄d
 =

418 (
ngx_°ªam_up°ªam_chash_poöt_t
 *Ë
two
;

420 i‡(
fú°
->
hash
 < 
£c⁄d
->hash) {

423 } i‡(
fú°
->
hash
 > 
£c⁄d
->hash) {

429 
	}
}

432 
ngx_uöt_t


433 
	$ngx_°ªam_up°ªam_föd_chash_poöt
(
ngx_°ªam_up°ªam_chash_poöts_t
 *
poöts
,

434 
uöt32_t
 
hash
)

436 
ngx_uöt_t
 
i
, 
j
, 
k
;

437 
ngx_°ªam_up°ªam_chash_poöt_t
 *
poöt
;

441 
poöt
 = &
poöts
->point[0];

443 
i
 = 0;

444 
j
 = 
poöts
->
numbî
;

446 
i
 < 
j
) {

447 
k
 = (
i
 + 
j
) / 2;

449 i‡(
hash
 > 
poöt
[
k
].hash) {

450 
i
 = 
k
 + 1;

452 } i‡(
hash
 < 
poöt
[
k
].hash) {

453 
j
 = 
k
;

456  
k
;

460  
i
;

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_°ªam_up°ªam_öô_chash_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

466 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

468 
uöt32_t
 
hash
;

469 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

470 
ngx_°ªam_up°ªam_hash_≥î_d©a_t
 *
hp
;

472 i‡(
	`ngx_°ªam_up°ªam_öô_hash_≥î
(
s
, 
us
Ë!
NGX_OK
) {

473  
NGX_ERROR
;

476 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_chash_≥î
;

478 
hp
 = 
s
->
up°ªam
->
≥î
.
d©a
;

479 
hcf
 = 
	`ngx_°ªam_c⁄f_up°ªam_§v_c⁄f
(
us
,

480 
ngx_°ªam_up°ªam_hash_moduÀ
);

482 
hash
 = 
	`ngx_¸c32_l⁄g
(
hp
->
key
.
d©a
, hp->key.
Àn
);

484 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
hp
->
ºp
.
≥îs
);

486 
hp
->
hash
 = 
	`ngx_°ªam_up°ªam_föd_chash_poöt
(
hcf
->
poöts
, hash);

488 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

490  
NGX_OK
;

491 
	}
}

494 
ngx_öt_t


495 
	$ngx_°ªam_up°ªam_gë_chash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

497 
ngx_°ªam_up°ªam_hash_≥î_d©a_t
 *
hp
 = 
d©a
;

499 
time_t
 
now
;

500 
öçå_t
 
m
;

501 
ngx_°r_t
 *
£rvî
;

502 
ngx_öt_t
 
tŸÆ
;

503 
ngx_uöt_t
 
i
, 
n
, 
be°_i
;

504 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

505 
ngx_°ªam_up°ªam_chash_poöt_t
 *
poöt
;

506 
ngx_°ªam_up°ªam_chash_poöts_t
 *
poöts
;

507 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

509 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

510 "gë c⁄si°íàhashÖìr,Åry: %ui", 
pc
->
åõs
);

512 
	`ngx_°ªam_up°ªam_º_≥îs_wlock
(
hp
->
ºp
.
≥îs
);

514 i‡(
hp
->
åõs
 > 20 || hp->
ºp
.
≥îs
->
sögÀ
) {

515 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

516  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

519 
pc
->
c⁄√˘i⁄
 = 
NULL
;

521 
now
 = 
	`ngx_time
();

522 
hcf
 = 
hp
->
c⁄f
;

524 
poöts
 = 
hcf
->points;

525 
poöt
 = &
poöts
->point[0];

528 
£rvî
 = 
poöt
[
hp
->
hash
 % 
poöts
->
numbî
].server;

530 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

532 
hp
->
hash
, 
£rvî
);

534 
be°
 = 
NULL
;

535 
be°_i
 = 0;

536 
tŸÆ
 = 0;

538 
≥î
 = 
hp
->
ºp
.
≥îs
->≥î, 
i
 = 0;

539 
≥î
;

540 
≥î
 =Öìr->
√xt
, 
i
++)

542 
n
 = 
i
 / (8 * (
uöçå_t
));

543 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

545 i‡(
hp
->
ºp
.
åõd
[
n
] & 
m
) {

549 i‡(
≥î
->
down
) {

553 i‡(
≥î
->
max_Áûs


554 && 
≥î
->
Áûs
 >≥î->
max_Áûs


555 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

560 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

564 i‡(
≥î
->
£rvî
.
Àn
 != server->len

565 || 
	`ngx_°∫cmp
(
≥î
->
£rvî
.
d©a
, sîvî->d©a, sîvî->
Àn
)

571 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

572 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

574 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

575 
≥î
->
ef„˘ive_weight
++;

578 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

579 
be°
 = 
≥î
;

580 
be°_i
 = 
i
;

584 i‡(
be°
) {

585 
be°
->
cuºít_weight
 -
tŸÆ
;

589 
hp
->
hash
++;

590 
hp
->
åõs
++;

592 i‡(
hp
->
åõs
 > 20) {

593 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

594  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

598 
hp
->
ºp
.
cuºít
 = 
be°
;

600 
pc
->
sockaddr
 = 
be°
->sockaddr;

601 
pc
->
sockÀn
 = 
be°
->socklen;

602 
pc
->
«me
 = &
be°
->name;

604 
be°
->
c⁄ns
++;

606 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

607 
be°
->
checked
 = 
now
;

610 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
hp
->
ºp
.
≥îs
);

612 
n
 = 
be°_i
 / (8 * (
uöçå_t
));

613 
m
 = (
uöçå_t
Ë1 << 
be°_i
 % (8 * (uintptr_t));

615 
hp
->
ºp
.
åõd
[
n
] |
m
;

617  
NGX_OK
;

618 
	}
}

622 
	$ngx_°ªam_up°ªam_hash_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

624 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
c⁄f
;

626 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
));

627 i‡(
c⁄f
 =
NULL
) {

628  
NULL
;

631 
c⁄f
->
poöts
 = 
NULL
;

633  
c⁄f
;

634 
	}
}

638 
	$ngx_°ªam_up°ªam_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

640 
ngx_°ªam_up°ªam_hash_§v_c⁄f_t
 *
hcf
 = 
c⁄f
;

642 
ngx_°r_t
 *
vÆue
;

643 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
;

644 
ngx_°ªam_compûe_com∂ex_vÆue_t
 
ccv
;

646 
vÆue
 = 
cf
->
¨gs
->
ñts
;

648 
	`ngx_memzîo
(&
ccv
, (
ngx_°ªam_compûe_com∂ex_vÆue_t
));

650 
ccv
.
cf
 = cf;

651 
ccv
.
vÆue
 = &value[1];

652 
ccv
.
com∂ex_vÆue
 = &
hcf
->
key
;

654 i‡(
	`ngx_°ªam_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

655  
NGX_CONF_ERROR
;

658 
uscf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_°ªam_up°ªam_moduÀ
);

660 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

661 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

665 
uscf
->
Êags
 = 
NGX_STREAM_UPSTREAM_CREATE


666 |
NGX_STREAM_UPSTREAM_WEIGHT


667 |
NGX_STREAM_UPSTREAM_MAX_CONNS


668 |
NGX_STREAM_UPSTREAM_MAX_FAILS


669 |
NGX_STREAM_UPSTREAM_FAIL_TIMEOUT


670 |
NGX_STREAM_UPSTREAM_DOWN
;

672 i‡(
cf
->
¨gs
->
√…s
 == 2) {

673 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_°ªam_up°ªam_öô_hash
;

675 } i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "consistent") == 0) {

676 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_°ªam_up°ªam_öô_chash
;

679 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

680 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

681  
NGX_CONF_ERROR
;

684  
NGX_CONF_OK
;

685 
	}
}

	@src/stream/ngx_stream_upstream_least_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_Àa°_c⁄n_≥î
(

14 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

15 
ngx_öt_t
 
ngx_°ªam_up°ªam_gë_Àa°_c⁄n_≥î
(

16 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

17 *
ngx_°ªam_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

18 *
c⁄f
);

21 
ngx_comm™d_t
 
	gngx_°ªam_up°ªam_Àa°_c⁄n_comm™ds
[] = {

23 { 
ngx_°rög
("least_conn"),

24 
NGX_STREAM_UPS_CONF
|
NGX_CONF_NOARGS
,

25 
ngx_°ªam_up°ªam_Àa°_c⁄n
,

28 
NULL
 },

30 
ngx_nuŒ_comm™d


34 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_up°ªam_Àa°_c⁄n_moduÀ_˘x
 = {

35 
NULL
,

36 
NULL
,

38 
NULL
,

39 
NULL
,

41 
NULL
,

42 
NULL


46 
ngx_moduÀ_t
 
	gngx_°ªam_up°ªam_Àa°_c⁄n_moduÀ
 = {

47 
NGX_MODULE_V1
,

48 &
ngx_°ªam_up°ªam_Àa°_c⁄n_moduÀ_˘x
,

49 
ngx_°ªam_up°ªam_Àa°_c⁄n_comm™ds
,

50 
NGX_STREAM_MODULE
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NGX_MODULE_V1_PADDING


62 
ngx_öt_t


63 
	$ngx_°ªam_up°ªam_öô_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
,

64 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

66 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
cf
->
log
, 0,

69 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

70  
NGX_ERROR
;

73 
us
->
≥î
.
öô
 = 
ngx_°ªam_up°ªam_öô_Àa°_c⁄n_≥î
;

75  
NGX_OK
;

76 
	}
}

79 
ngx_öt_t


80 
	$ngx_°ªam_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

81 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

83 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

86 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö_≥î
(
s
, 
us
Ë!
NGX_OK
) {

87  
NGX_ERROR
;

90 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_Àa°_c⁄n_≥î
;

92  
NGX_OK
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_°ªam_up°ªam_gë_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

99 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

101 
time_t
 
now
;

102 
uöçå_t
 
m
;

103 
ngx_öt_t
 
rc
, 
tŸÆ
;

104 
ngx_uöt_t
 
i
, 
n
, 
p
, 
m™y
;

105 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

106 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

108 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

109 "gëÜó° c⁄¿≥î,Åry: %ui", 
pc
->
åõs
);

111 i‡(
ºp
->
≥îs
->
sögÀ
) {

112  
	`ngx_°ªam_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

115 
pc
->
c⁄√˘i⁄
 = 
NULL
;

117 
now
 = 
	`ngx_time
();

119 
≥îs
 = 
ºp
->peers;

121 
	`ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
);

123 
be°
 = 
NULL
;

124 
tŸÆ
 = 0;

126 #i‡(
NGX_SUPPRESS_WARN
)

127 
m™y
 = 0;

128 
p
 = 0;

131 
≥î
 = 
≥îs
->≥î, 
i
 = 0;

132 
≥î
;

133 
≥î
 =Öìr->
√xt
, 
i
++)

135 
n
 = 
i
 / (8 * (
uöçå_t
));

136 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

138 i‡(
ºp
->
åõd
[
n
] & 
m
) {

142 i‡(
≥î
->
down
) {

146 i‡(
≥î
->
max_Áûs


147 && 
≥î
->
Áûs
 >≥î->
max_Áûs


148 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

153 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

163 i‡(
be°
 =
NULL


164 || 
≥î
->
c⁄ns
 * 
be°
->
weight
 < best->conns *Öeer->weight)

166 
be°
 = 
≥î
;

167 
m™y
 = 0;

168 
p
 = 
i
;

170 } i‡(
≥î
->
c⁄ns
 * 
be°
->
weight
 == best->conns *Öeer->weight) {

171 
m™y
 = 1;

175 i‡(
be°
 =
NULL
) {

176 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

179 
Áûed
;

182 i‡(
m™y
) {

183 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

186 
≥î
 = 
be°
, 
i
 = 
p
;

187 
≥î
;

188 
≥î
 =Öìr->
√xt
, 
i
++)

190 
n
 = 
i
 / (8 * (
uöçå_t
));

191 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

193 i‡(
ºp
->
åõd
[
n
] & 
m
) {

197 i‡(
≥î
->
down
) {

201 i‡(
≥î
->
c⁄ns
 * 
be°
->
weight
 != best->conns *Öeer->weight) {

205 i‡(
≥î
->
max_Áûs


206 && 
≥î
->
Áûs
 >≥î->
max_Áûs


207 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

212 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

216 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

217 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

219 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

220 
≥î
->
ef„˘ive_weight
++;

223 i‡(
≥î
->
cuºít_weight
 > 
be°
->current_weight) {

224 
be°
 = 
≥î
;

225 
p
 = 
i
;

230 
be°
->
cuºít_weight
 -
tŸÆ
;

232 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

233 
be°
->
checked
 = 
now
;

236 
pc
->
sockaddr
 = 
be°
->sockaddr;

237 
pc
->
sockÀn
 = 
be°
->socklen;

238 
pc
->
«me
 = &
be°
->name;

240 
be°
->
c⁄ns
++;

242 
ºp
->
cuºít
 = 
be°
;

244 
n
 = 
p
 / (8 * (
uöçå_t
));

245 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

247 
ºp
->
åõd
[
n
] |
m
;

249 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

251  
NGX_OK
;

253 
Áûed
:

255 i‡(
≥îs
->
√xt
) {

256 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

259 
ºp
->
≥îs
 =Öìrs->
√xt
;

261 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

262 / (8 * (
uöçå_t
));

264 
i
 = 0; i < 
n
; i++) {

265 
ºp
->
åõd
[
i
] = 0;

268 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

270 
rc
 = 
	`ngx_°ªam_up°ªam_gë_Àa°_c⁄n_≥î
(
pc
, 
ºp
);

272 i‡(
rc
 !
NGX_BUSY
) {

273  
rc
;

276 
	`ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
);

279 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

281 
pc
->
«me
 = 
≥îs
->name;

283  
NGX_BUSY
;

284 
	}
}

288 
	$ngx_°ªam_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

290 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
;

292 
uscf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_°ªam_up°ªam_moduÀ
);

294 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

295 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

299 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_°ªam_up°ªam_öô_Àa°_c⁄n
;

301 
uscf
->
Êags
 = 
NGX_STREAM_UPSTREAM_CREATE


302 |
NGX_STREAM_UPSTREAM_WEIGHT


303 |
NGX_STREAM_UPSTREAM_MAX_CONNS


304 |
NGX_STREAM_UPSTREAM_MAX_FAILS


305 |
NGX_STREAM_UPSTREAM_FAIL_TIMEOUT


306 |
NGX_STREAM_UPSTREAM_DOWN


307 |
NGX_STREAM_UPSTREAM_BACKUP
;

309  
NGX_CONF_OK
;

310 
	}
}

	@src/stream/ngx_stream_upstream_random_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_°ªam.h
>

13 
ngx_°ªam_up°ªam_º_≥î_t
 *
	m≥î
;

14 
ngx_uöt_t
 
	mønge
;

15 } 
	tngx_°ªam_up°ªam_øndom_ønge_t
;

19 
ngx_uöt_t
 
	mtwo
;

20 
ngx_°ªam_up°ªam_øndom_ønge_t
 *
	mønges
;

21 } 
	tngx_°ªam_up°ªam_øndom_§v_c⁄f_t
;

26 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 
	mºp
;

28 
ngx_°ªam_up°ªam_øndom_§v_c⁄f_t
 *
	mc⁄f
;

29 
u_ch¨
 
	måõs
;

30 } 
	tngx_°ªam_up°ªam_øndom_≥î_d©a_t
;

33 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_øndom
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

35 
ngx_öt_t
 
ngx_°ªam_up°ªam_upd©e_øndom
(
ngx_poﬁ_t
 *
poﬁ
,

36 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

38 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_øndom_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

39 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

40 
ngx_öt_t
 
ngx_°ªam_up°ªam_gë_øndom_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

41 *
d©a
);

42 
ngx_öt_t
 
ngx_°ªam_up°ªam_gë_øndom2_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

43 *
d©a
);

44 
ngx_uöt_t
 
ngx_°ªam_up°ªam_≥ek_øndom_≥î
(

45 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
,

46 
ngx_°ªam_up°ªam_øndom_≥î_d©a_t
 *
Ω
);

47 *
ngx_°ªam_up°ªam_øndom_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

48 *
ngx_°ªam_up°ªam_øndom
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

49 *
c⁄f
);

52 
ngx_comm™d_t
 
	gngx_°ªam_up°ªam_øndom_comm™ds
[] = {

54 { 
ngx_°rög
("random"),

55 
NGX_STREAM_UPS_CONF
|
NGX_CONF_NOARGS
|
NGX_CONF_TAKE12
,

56 
ngx_°ªam_up°ªam_øndom
,

57 
NGX_STREAM_SRV_CONF_OFFSET
,

59 
NULL
 },

61 
ngx_nuŒ_comm™d


65 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_up°ªam_øndom_moduÀ_˘x
 = {

66 
NULL
,

67 
NULL
,

69 
NULL
,

70 
NULL
,

72 
ngx_°ªam_up°ªam_øndom_¸óã_c⁄f
,

73 
NULL


77 
ngx_moduÀ_t
 
	gngx_°ªam_up°ªam_øndom_moduÀ
 = {

78 
NGX_MODULE_V1
,

79 &
ngx_°ªam_up°ªam_øndom_moduÀ_˘x
,

80 
ngx_°ªam_up°ªam_øndom_comm™ds
,

81 
NGX_STREAM_MODULE
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NGX_MODULE_V1_PADDING


93 
ngx_öt_t


94 
	$ngx_°ªam_up°ªam_öô_øndom
(
ngx_c⁄f_t
 *
cf
,

95 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

97 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
cf
->
log
, 0, "initÑandom");

99 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

100  
NGX_ERROR
;

103 
us
->
≥î
.
öô
 = 
ngx_°ªam_up°ªam_öô_øndom_≥î
;

105 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

106 i‡(
us
->
shm_z⁄e
) {

107  
NGX_OK
;

111  
	`ngx_°ªam_up°ªam_upd©e_øndom
(
cf
->
poﬁ
, 
us
);

112 
	}
}

115 
ngx_öt_t


116 
	$ngx_°ªam_up°ªam_upd©e_øndom
(
ngx_poﬁ_t
 *
poﬁ
,

117 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

119 
size_t
 
size
;

120 
ngx_uöt_t
 
i
, 
tŸÆ_weight
;

121 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

122 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

123 
ngx_°ªam_up°ªam_øndom_ønge_t
 *
ønges
;

124 
ngx_°ªam_up°ªam_øndom_§v_c⁄f_t
 *
rcf
;

126 
rcf
 = 
	`ngx_°ªam_c⁄f_up°ªam_§v_c⁄f
(
us
,

127 
ngx_°ªam_up°ªam_øndom_moduÀ
);

128 
≥îs
 = 
us
->
≥î
.
d©a
;

130 
size
 = 
≥îs
->
numbî
 * (
ngx_°ªam_up°ªam_øndom_ønge_t
);

132 
ønges
 = 
poﬁ
 ? 
	`ngx_∑Œoc
’oﬁ, 
size
Ë: 
	`ngx_Æloc
(size, 
ngx_cy˛e
->
log
);

133 i‡(
ønges
 =
NULL
) {

134  
NGX_ERROR
;

137 
tŸÆ_weight
 = 0;

139 
≥î
 = 
≥îs
->≥î, 
i
 = 0;Öìr;Öì∏≥î->
√xt
, i++) {

140 
ønges
[
i
].
≥î
 =Öeer;

141 
ønges
[
i
].
ønge
 = 
tŸÆ_weight
;

142 
tŸÆ_weight
 +
≥î
->
weight
;

145 
rcf
->
ønges
 =Ñanges;

147  
NGX_OK
;

148 
	}
}

151 
ngx_öt_t


152 
	$ngx_°ªam_up°ªam_öô_øndom_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

153 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

155 
ngx_°ªam_up°ªam_øndom_§v_c⁄f_t
 *
rcf
;

156 
ngx_°ªam_up°ªam_øndom_≥î_d©a_t
 *
Ω
;

158 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

161 
rcf
 = 
	`ngx_°ªam_c⁄f_up°ªam_§v_c⁄f
(
us
,

162 
ngx_°ªam_up°ªam_øndom_moduÀ
);

164 
Ω
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

165 (
ngx_°ªam_up°ªam_øndom_≥î_d©a_t
));

166 i‡(
Ω
 =
NULL
) {

167  
NGX_ERROR
;

170 
s
->
up°ªam
->
≥î
.
d©a
 = &
Ω
->
ºp
;

172 i‡(
	`ngx_°ªam_up°ªam_öô_round_robö_≥î
(
s
, 
us
Ë!
NGX_OK
) {

173  
NGX_ERROR
;

176 i‡(
rcf
->
two
) {

177 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_øndom2_≥î
;

180 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_øndom_≥î
;

183 
Ω
->
c⁄f
 = 
rcf
;

184 
Ω
->
åõs
 = 0;

186 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
Ω
->
ºp
.
≥îs
);

188 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

189 i‡(
Ω
->
ºp
.
≥îs
->
shpoﬁ
 && 
rcf
->
ønges
 =
NULL
) {

190 i‡(
	`ngx_°ªam_up°ªam_upd©e_øndom
(
NULL
, 
us
Ë!
NGX_OK
) {

191 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
Ω
->
ºp
.
≥îs
);

192  
NGX_ERROR
;

197 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
Ω
->
ºp
.
≥îs
);

199  
NGX_OK
;

200 
	}
}

203 
ngx_öt_t


204 
	$ngx_°ªam_up°ªam_gë_øndom_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

206 
ngx_°ªam_up°ªam_øndom_≥î_d©a_t
 *
Ω
 = 
d©a
;

208 
time_t
 
now
;

209 
uöçå_t
 
m
;

210 
ngx_uöt_t
 
i
, 
n
;

211 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

212 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

213 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
;

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

216 "gëÑ™domÖìr,Åry: %ui", 
pc
->
åõs
);

218 
ºp
 = &
Ω
->rrp;

219 
≥îs
 = 
ºp
->peers;

221 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
≥îs
);

223 i‡(
Ω
->
åõs
 > 20 || 
≥îs
->
sögÀ
) {

224 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

225  
	`ngx_°ªam_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

228 
pc
->
ˇched
 = 0;

229 
pc
->
c⁄√˘i⁄
 = 
NULL
;

231 
now
 = 
	`ngx_time
();

235 
i
 = 
	`ngx_°ªam_up°ªam_≥ek_øndom_≥î
(
≥îs
, 
Ω
);

237 
≥î
 = 
Ω
->
c⁄f
->
ønges
[
i
].peer;

239 
n
 = 
i
 / (8 * (
uöçå_t
));

240 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

242 i‡(
ºp
->
åõd
[
n
] & 
m
) {

243 
√xt
;

246 
	`ngx_°ªam_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
);

248 i‡(
≥î
->
down
) {

249 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

250 
√xt
;

253 i‡(
≥î
->
max_Áûs


254 && 
≥î
->
Áûs
 >≥î->
max_Áûs


255 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

257 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

258 
√xt
;

261 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

262 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

263 
√xt
;

268 
√xt
:

270 i‡(++
Ω
->
åõs
 > 20) {

271 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

272  
	`ngx_°ªam_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

276 
ºp
->
cuºít
 = 
≥î
;

278 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

279 
≥î
->
checked
 = 
now
;

282 
pc
->
sockaddr
 = 
≥î
->sockaddr;

283 
pc
->
sockÀn
 = 
≥î
->socklen;

284 
pc
->
«me
 = &
≥î
->name;

286 
≥î
->
c⁄ns
++;

288 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

289 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

291 
ºp
->
åõd
[
n
] |
m
;

293  
NGX_OK
;

294 
	}
}

297 
ngx_öt_t


298 
	$ngx_°ªam_up°ªam_gë_øndom2_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

300 
ngx_°ªam_up°ªam_øndom_≥î_d©a_t
 *
Ω
 = 
d©a
;

302 
time_t
 
now
;

303 
uöçå_t
 
m
;

304 
ngx_uöt_t
 
i
, 
n
, 
p
;

305 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, *
¥ev
;

306 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

307 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
;

309 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

310 "gëÑ™dom2Öìr,Åry: %ui", 
pc
->
åõs
);

312 
ºp
 = &
Ω
->rrp;

313 
≥îs
 = 
ºp
->peers;

315 
	`ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
);

317 i‡(
Ω
->
åõs
 > 20 || 
≥îs
->
sögÀ
) {

318 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

319  
	`ngx_°ªam_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

322 
pc
->
ˇched
 = 0;

323 
pc
->
c⁄√˘i⁄
 = 
NULL
;

325 
now
 = 
	`ngx_time
();

327 
¥ev
 = 
NULL
;

329 #i‡(
NGX_SUPPRESS_WARN
)

330 
p
 = 0;

335 
i
 = 
	`ngx_°ªam_up°ªam_≥ek_øndom_≥î
(
≥îs
, 
Ω
);

337 
≥î
 = 
Ω
->
c⁄f
->
ønges
[
i
].peer;

339 i‡(
≥î
 =
¥ev
) {

340 
√xt
;

343 
n
 = 
i
 / (8 * (
uöçå_t
));

344 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

346 i‡(
ºp
->
åõd
[
n
] & 
m
) {

347 
√xt
;

350 i‡(
≥î
->
down
) {

351 
√xt
;

354 i‡(
≥î
->
max_Áûs


355 && 
≥î
->
Áûs
 >≥î->
max_Áûs


356 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

358 
√xt
;

361 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

362 
√xt
;

365 i‡(
¥ev
) {

366 i‡(
≥î
->
c⁄ns
 * 
¥ev
->
weight
 >Örev->conns *Öeer->weight) {

367 
≥î
 = 
¥ev
;

368 
n
 = 
p
 / (8 * (
uöçå_t
));

369 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

375 
¥ev
 = 
≥î
;

376 
p
 = 
i
;

378 
√xt
:

380 i‡(++
Ω
->
åõs
 > 20) {

381 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

382  
	`ngx_°ªam_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

386 
ºp
->
cuºít
 = 
≥î
;

388 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

389 
≥î
->
checked
 = 
now
;

392 
pc
->
sockaddr
 = 
≥î
->sockaddr;

393 
pc
->
sockÀn
 = 
≥î
->socklen;

394 
pc
->
«me
 = &
≥î
->name;

396 
≥î
->
c⁄ns
++;

398 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

400 
ºp
->
åõd
[
n
] |
m
;

402  
NGX_OK
;

403 
	}
}

406 
ngx_uöt_t


407 
	$ngx_°ªam_up°ªam_≥ek_øndom_≥î
(
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
,

408 
ngx_°ªam_up°ªam_øndom_≥î_d©a_t
 *
Ω
)

410 
ngx_uöt_t
 
i
, 
j
, 
k
, 
x
;

412 
x
 = 
	`ngx_øndom
(Ë% 
≥îs
->
tŸÆ_weight
;

414 
i
 = 0;

415 
j
 = 
≥îs
->
numbî
;

417 
j
 - 
i
 > 1) {

418 
k
 = (
i
 + 
j
) / 2;

420 i‡(
x
 < 
Ω
->
c⁄f
->
ønges
[
k
].
ønge
) {

421 
j
 = 
k
;

424 
i
 = 
k
;

428  
i
;

429 
	}
}

433 
	$ngx_°ªam_up°ªam_øndom_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

435 
ngx_°ªam_up°ªam_øndom_§v_c⁄f_t
 *
c⁄f
;

437 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_øndom_§v_c⁄f_t
));

438 i‡(
c⁄f
 =
NULL
) {

439  
NULL
;

448  
c⁄f
;

449 
	}
}

453 
	$ngx_°ªam_up°ªam_øndom
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

455 
ngx_°ªam_up°ªam_øndom_§v_c⁄f_t
 *
rcf
 = 
c⁄f
;

457 
ngx_°r_t
 *
vÆue
;

458 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
;

460 
uscf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_°ªam_up°ªam_moduÀ
);

462 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

463 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

467 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_°ªam_up°ªam_öô_øndom
;

469 
uscf
->
Êags
 = 
NGX_STREAM_UPSTREAM_CREATE


470 |
NGX_STREAM_UPSTREAM_WEIGHT


471 |
NGX_STREAM_UPSTREAM_MAX_CONNS


472 |
NGX_STREAM_UPSTREAM_MAX_FAILS


473 |
NGX_STREAM_UPSTREAM_FAIL_TIMEOUT


474 |
NGX_STREAM_UPSTREAM_DOWN
;

476 i‡(
cf
->
¨gs
->
√…s
 == 1) {

477  
NGX_CONF_OK
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "two") == 0) {

483 
rcf
->
two
 = 1;

486 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

487 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

488  
NGX_CONF_ERROR
;

491 i‡(
cf
->
¨gs
->
√…s
 == 2) {

492  
NGX_CONF_OK
;

495 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "least_conn") != 0) {

496 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

497 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

498  
NGX_CONF_ERROR
;

501  
NGX_CONF_OK
;

502 
	}
}

	@src/stream/ngx_stream_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 
	#ngx_°ªam_up°ªam_åõs
(
p
Ë(’)->
numbî
 \

14 + ((
p
)->
√xt
 ? (p)->√xt->
numbî
 : 0))

	)

17 
ngx_°ªam_up°ªam_º_≥î_t
 *
ngx_°ªam_up°ªam_gë_≥î
(

18 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
);

19 
ngx_°ªam_up°ªam_nŸify_round_robö_≥î
(

20 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
, 
ngx_uöt_t
 
°©e
);

22 #i‡(
NGX_STREAM_SSL
)

24 
ngx_öt_t
 
ngx_°ªam_up°ªam_£t_round_robö_≥î_£ssi⁄
(

25 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

26 
ngx_°ªam_up°ªam_ßve_round_robö_≥î_£ssi⁄
(

27 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

28 
ngx_öt_t
 
ngx_°ªam_up°ªam_em±y_£t_£ssi⁄
(

29 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

30 
ngx_°ªam_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

31 *
d©a
);

36 
ngx_öt_t


37 
	$ngx_°ªam_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

38 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

40 
ngx_uæ_t
 
u
;

41 
ngx_uöt_t
 
i
, 
j
, 
n
, 
w
;

42 
ngx_°ªam_up°ªam_£rvî_t
 *
£rvî
;

43 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, **
≥îp
;

44 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

46 
us
->
≥î
.
öô
 = 
ngx_°ªam_up°ªam_öô_round_robö_≥î
;

48 i‡(
us
->
£rvîs
) {

49 
£rvî
 = 
us
->
£rvîs
->
ñts
;

51 
n
 = 0;

52 
w
 = 0;

54 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

55 i‡(
£rvî
[
i
].
backup
) {

59 
n
 +
£rvî
[
i
].
«ddrs
;

60 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

63 i‡(
n
 == 0) {

64 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

66 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

67  
NGX_ERROR
;

70 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

71 i‡(
≥îs
 =
NULL
) {

72  
NGX_ERROR
;

75 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_º_≥î_t
Ë* 
n
);

76 i‡(
≥î
 =
NULL
) {

77  
NGX_ERROR
;

80 
≥îs
->
sögÀ
 = (
n
 == 1);

81 
≥îs
->
numbî
 = 
n
;

82 
≥îs
->
weighãd
 = (
w
 !
n
);

83 
≥îs
->
tŸÆ_weight
 = 
w
;

84 
≥îs
->
«me
 = &
us
->
ho°
;

86 
n
 = 0;

87 
≥îp
 = &
≥îs
->
≥î
;

89 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

90 i‡(
£rvî
[
i
].
backup
) {

94 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

95 
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

96 
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

97 
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

98 
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

99 
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

100 
≥î
[
n
].
cuºít_weight
 = 0;

101 
≥î
[
n
].
max_c⁄ns
 = 
£rvî
[
i
].max_conns;

102 
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

103 
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

104 
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

105 
≥î
[
n
].
£rvî
 = sîvî[
i
].
«me
;

107 *
≥îp
 = &
≥î
[
n
];

108 
≥îp
 = &
≥î
[
n
].
√xt
;

109 
n
++;

113 
us
->
≥î
.
d©a
 = 
≥îs
;

117 
n
 = 0;

118 
w
 = 0;

120 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

121 i‡(!
£rvî
[
i
].
backup
) {

125 
n
 +
£rvî
[
i
].
«ddrs
;

126 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

129 i‡(
n
 == 0) {

130  
NGX_OK
;

133 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

134 i‡(
backup
 =
NULL
) {

135  
NGX_ERROR
;

138 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_º_≥î_t
Ë* 
n
);

139 i‡(
≥î
 =
NULL
) {

140  
NGX_ERROR
;

143 
≥îs
->
sögÀ
 = 0;

144 
backup
->
sögÀ
 = 0;

145 
backup
->
numbî
 = 
n
;

146 
backup
->
weighãd
 = (
w
 !
n
);

147 
backup
->
tŸÆ_weight
 = 
w
;

148 
backup
->
«me
 = &
us
->
ho°
;

150 
n
 = 0;

151 
≥îp
 = &
backup
->
≥î
;

153 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

154 i‡(!
£rvî
[
i
].
backup
) {

158 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

159 
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

160 
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

161 
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

162 
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

163 
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

164 
≥î
[
n
].
cuºít_weight
 = 0;

165 
≥î
[
n
].
max_c⁄ns
 = 
£rvî
[
i
].max_conns;

166 
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

167 
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

168 
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

169 
≥î
[
n
].
£rvî
 = sîvî[
i
].
«me
;

171 *
≥îp
 = &
≥î
[
n
];

172 
≥îp
 = &
≥î
[
n
].
√xt
;

173 
n
++;

177 
≥îs
->
√xt
 = 
backup
;

179  
NGX_OK
;

185 i‡(
us
->
p‹t
 == 0) {

186 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

188 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

189  
NGX_ERROR
;

192 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

194 
u
.
ho°
 = 
us
->host;

195 
u
.
p‹t
 = 
us
->port;

197 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

198 i‡(
u
.
îr
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

201 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

204  
NGX_ERROR
;

207 
n
 = 
u
.
«ddrs
;

209 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

210 i‡(
≥îs
 =
NULL
) {

211  
NGX_ERROR
;

214 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_up°ªam_º_≥î_t
Ë* 
n
);

215 i‡(
≥î
 =
NULL
) {

216  
NGX_ERROR
;

219 
≥îs
->
sögÀ
 = (
n
 == 1);

220 
≥îs
->
numbî
 = 
n
;

221 
≥îs
->
weighãd
 = 0;

222 
≥îs
->
tŸÆ_weight
 = 
n
;

223 
≥îs
->
«me
 = &
us
->
ho°
;

225 
≥îp
 = &
≥îs
->
≥î
;

227 
i
 = 0; i < 
u
.
«ddrs
; i++) {

228 
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

229 
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

230 
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

231 
≥î
[
i
].
weight
 = 1;

232 
≥î
[
i
].
ef„˘ive_weight
 = 1;

233 
≥î
[
i
].
cuºít_weight
 = 0;

234 
≥î
[
i
].
max_c⁄ns
 = 0;

235 
≥î
[
i
].
max_Áûs
 = 1;

236 
≥î
[
i
].
Áû_timeout
 = 10;

237 *
≥îp
 = &
≥î
[
i
];

238 
≥îp
 = &
≥î
[
i
].
√xt
;

241 
us
->
≥î
.
d©a
 = 
≥îs
;

245  
NGX_OK
;

246 
	}
}

249 
ngx_öt_t


250 
	$ngx_°ªam_up°ªam_öô_round_robö_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

251 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
)

253 
ngx_uöt_t
 
n
;

254 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
;

256 
ºp
 = 
s
->
up°ªam
->
≥î
.
d©a
;

258 i‡(
ºp
 =
NULL
) {

259 
ºp
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

260 (
ngx_°ªam_up°ªam_º_≥î_d©a_t
));

261 i‡(
ºp
 =
NULL
) {

262  
NGX_ERROR
;

265 
s
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

268 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

269 
ºp
->
cuºít
 = 
NULL
;

270 
ºp
->
c⁄fig
 = 0;

272 
n
 = 
ºp
->
≥îs
->
numbî
;

274 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

275 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

278 i‡(
n
 <8 * (
uöçå_t
)) {

279 
ºp
->
åõd
 = &ºp->
d©a
;

280 
ºp
->
d©a
 = 0;

283 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

285 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
n
 * (
uöçå_t
));

286 i‡(
ºp
->
åõd
 =
NULL
) {

287  
NGX_ERROR
;

291 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_round_robö_≥î
;

292 
s
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_°ªam_up°ªam_‰ì_round_robö_≥î
;

293 
s
->
up°ªam
->
≥î
.
nŸify
 = 
ngx_°ªam_up°ªam_nŸify_round_robö_≥î
;

294 
s
->
up°ªam
->
≥î
.
åõs
 = 
	`ngx_°ªam_up°ªam_åõs
(
ºp
->
≥îs
);

295 #i‡(
NGX_STREAM_SSL
)

296 
s
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

297 
ngx_°ªam_up°ªam_£t_round_robö_≥î_£ssi⁄
;

298 
s
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

299 
ngx_°ªam_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

302  
NGX_OK
;

303 
	}
}

306 
ngx_öt_t


307 
	$ngx_°ªam_up°ªam_¸óã_round_robö_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

308 
ngx_°ªam_up°ªam_ªsﬁved_t
 *
ur
)

310 
u_ch¨
 *
p
;

311 
size_t
 
Àn
;

312 
sockÀn_t
 
sockÀn
;

313 
ngx_uöt_t
 
i
, 
n
;

314 
sockaddr
 *sockaddr;

315 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, **
≥îp
;

316 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

317 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
;

319 
ºp
 = 
s
->
up°ªam
->
≥î
.
d©a
;

321 i‡(
ºp
 =
NULL
) {

322 
ºp
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

323 (
ngx_°ªam_up°ªam_º_≥î_d©a_t
));

324 i‡(
ºp
 =
NULL
) {

325  
NGX_ERROR
;

328 
s
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

331 
≥îs
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

332 (
ngx_°ªam_up°ªam_º_≥îs_t
));

333 i‡(
≥îs
 =
NULL
) {

334  
NGX_ERROR
;

337 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

338 (
ngx_°ªam_up°ªam_º_≥î_t
Ë* 
ur
->
«ddrs
);

339 i‡(
≥î
 =
NULL
) {

340  
NGX_ERROR
;

343 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

344 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

345 
≥îs
->
«me
 = &
ur
->
ho°
;

347 i‡(
ur
->
sockaddr
) {

348 
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

349 
≥î
[0].
sockÀn
 = 
ur
->socklen;

350 
≥î
[0].
«me
 = 
ur
->name;

351 
≥î
[0].
weight
 = 1;

352 
≥î
[0].
ef„˘ive_weight
 = 1;

353 
≥î
[0].
cuºít_weight
 = 0;

354 
≥î
[0].
max_c⁄ns
 = 0;

355 
≥î
[0].
max_Áûs
 = 1;

356 
≥î
[0].
Áû_timeout
 = 10;

357 
≥îs
->
≥î
 =Öeer;

360 
≥îp
 = &
≥îs
->
≥î
;

362 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

364 
sockÀn
 = 
ur
->
addrs
[
i
].socklen;

366 
sockaddr
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
sockÀn
);

367 i‡(
sockaddr
 =
NULL
) {

368  
NGX_ERROR
;

371 
	`ngx_mem˝y
(
sockaddr
, 
ur
->
addrs
[
i
].sockaddr, 
sockÀn
);

372 
	`ngx_öë_£t_p‹t
(
sockaddr
, 
ur
->
p‹t
);

374 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

375 i‡(
p
 =
NULL
) {

376  
NGX_ERROR
;

379 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

381 
≥î
[
i
].
sockaddr
 = sockaddr;

382 
≥î
[
i
].
sockÀn
 = socklen;

383 
≥î
[
i
].
«me
.
Àn
 =Üen;

384 
≥î
[
i
].
«me
.
d©a
 = 
p
;

385 
≥î
[
i
].
weight
 = 1;

386 
≥î
[
i
].
ef„˘ive_weight
 = 1;

387 
≥î
[
i
].
cuºít_weight
 = 0;

388 
≥î
[
i
].
max_c⁄ns
 = 0;

389 
≥î
[
i
].
max_Áûs
 = 1;

390 
≥î
[
i
].
Áû_timeout
 = 10;

391 *
≥îp
 = &
≥î
[
i
];

392 
≥îp
 = &
≥î
[
i
].
√xt
;

396 
ºp
->
≥îs
 =Öeers;

397 
ºp
->
cuºít
 = 
NULL
;

398 
ºp
->
c⁄fig
 = 0;

400 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

401 
ºp
->
åõd
 = &ºp->
d©a
;

402 
ºp
->
d©a
 = 0;

405 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

406 / (8 * (
uöçå_t
));

408 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
n
 * (
uöçå_t
));

409 i‡(
ºp
->
åõd
 =
NULL
) {

410  
NGX_ERROR
;

414 
s
->
up°ªam
->
≥î
.
gë
 = 
ngx_°ªam_up°ªam_gë_round_robö_≥î
;

415 
s
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_°ªam_up°ªam_‰ì_round_robö_≥î
;

416 
s
->
up°ªam
->
≥î
.
åõs
 = 
	`ngx_°ªam_up°ªam_åõs
(
ºp
->
≥îs
);

417 #i‡(
NGX_STREAM_SSL
)

418 
s
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_°ªam_up°ªam_em±y_£t_£ssi⁄
;

419 
s
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_°ªam_up°ªam_em±y_ßve_£ssi⁄
;

422  
NGX_OK
;

423 
	}
}

426 
ngx_öt_t


427 
	$ngx_°ªam_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

429 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

431 
ngx_öt_t
 
rc
;

432 
ngx_uöt_t
 
i
, 
n
;

433 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

434 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

436 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

437 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

439 
pc
->
c⁄√˘i⁄
 = 
NULL
;

441 
≥îs
 = 
ºp
->peers;

442 
	`ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
);

444 i‡(
≥îs
->
sögÀ
) {

445 
≥î
 = 
≥îs
->peer;

447 i‡(
≥î
->
down
) {

448 
Áûed
;

451 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

452 
Áûed
;

455 
ºp
->
cuºít
 = 
≥î
;

461 
≥î
 = 
	`ngx_°ªam_up°ªam_gë_≥î
(
ºp
);

463 i‡(
≥î
 =
NULL
) {

464 
Áûed
;

467 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

469 
≥î
,Öìr->
cuºít_weight
);

472 
pc
->
sockaddr
 = 
≥î
->sockaddr;

473 
pc
->
sockÀn
 = 
≥î
->socklen;

474 
pc
->
«me
 = &
≥î
->name;

476 
≥î
->
c⁄ns
++;

478 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

480  
NGX_OK
;

482 
Áûed
:

484 i‡(
≥îs
->
√xt
) {

486 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0, "backup servers");

488 
ºp
->
≥îs
 =Öìrs->
√xt
;

490 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

491 / (8 * (
uöçå_t
));

493 
i
 = 0; i < 
n
; i++) {

494 
ºp
->
åõd
[
i
] = 0;

497 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

499 
rc
 = 
	`ngx_°ªam_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

501 i‡(
rc
 !
NGX_BUSY
) {

502  
rc
;

505 
	`ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
);

508 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

510 
pc
->
«me
 = 
≥îs
->name;

512  
NGX_BUSY
;

513 
	}
}

516 
ngx_°ªam_up°ªam_º_≥î_t
 *

517 
	$ngx_°ªam_up°ªam_gë_≥î
(
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
)

519 
time_t
 
now
;

520 
uöçå_t
 
m
;

521 
ngx_öt_t
 
tŸÆ
;

522 
ngx_uöt_t
 
i
, 
n
, 
p
;

523 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

525 
now
 = 
	`ngx_time
();

527 
be°
 = 
NULL
;

528 
tŸÆ
 = 0;

530 #i‡(
NGX_SUPPRESS_WARN
)

531 
p
 = 0;

534 
≥î
 = 
ºp
->
≥îs
->≥î, 
i
 = 0;

535 
≥î
;

536 
≥î
 =Öìr->
√xt
, 
i
++)

538 
n
 = 
i
 / (8 * (
uöçå_t
));

539 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

541 i‡(
ºp
->
åõd
[
n
] & 
m
) {

545 i‡(
≥î
->
down
) {

549 i‡(
≥î
->
max_Áûs


550 && 
≥î
->
Áûs
 >≥î->
max_Áûs


551 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

556 i‡(
≥î
->
max_c⁄ns
 &&Öìr->
c⁄ns
 >=Öeer->max_conns) {

560 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

561 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

563 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

564 
≥î
->
ef„˘ive_weight
++;

567 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

568 
be°
 = 
≥î
;

569 
p
 = 
i
;

573 i‡(
be°
 =
NULL
) {

574  
NULL
;

577 
ºp
->
cuºít
 = 
be°
;

579 
n
 = 
p
 / (8 * (
uöçå_t
));

580 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

582 
ºp
->
åõd
[
n
] |
m
;

584 
be°
->
cuºít_weight
 -
tŸÆ
;

586 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

587 
be°
->
checked
 = 
now
;

590  
be°
;

591 
	}
}

595 
	$ngx_°ªam_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

596 
ngx_uöt_t
 
°©e
)

598 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

600 
time_t
 
now
;

601 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

603 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

604 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

606 
≥î
 = 
ºp
->
cuºít
;

608 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
ºp
->
≥îs
);

609 
	`ngx_°ªam_up°ªam_º_≥î_lock
(
ºp
->
≥îs
, 
≥î
);

611 i‡(
ºp
->
≥îs
->
sögÀ
) {

612 
≥î
->
c⁄ns
--;

614 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
ºp
->
≥îs
, 
≥î
);

615 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
ºp
->
≥îs
);

617 
pc
->
åõs
 = 0;

621 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

622 
now
 = 
	`ngx_time
();

624 
≥î
->
Áûs
++;

625 
≥î
->
ac˚s£d
 = 
now
;

626 
≥î
->
checked
 = 
now
;

628 i‡(
≥î
->
max_Áûs
) {

629 
≥î
->
ef„˘ive_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

631 i‡(
≥î
->
Áûs
 >≥î->
max_Áûs
) {

632 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
pc
->
log
, 0,

637 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

639 
≥î
,Öìr->
ef„˘ive_weight
);

641 i‡(
≥î
->
ef„˘ive_weight
 < 0) {

642 
≥î
->
ef„˘ive_weight
 = 0;

649 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

650 
≥î
->
Áûs
 = 0;

654 
≥î
->
c⁄ns
--;

656 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
ºp
->
≥îs
, 
≥î
);

657 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
ºp
->
≥îs
);

659 i‡(
pc
->
åõs
) {

660 
pc
->
åõs
--;

662 
	}
}

666 
	$ngx_°ªam_up°ªam_nŸify_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

667 *
d©a
, 
ngx_uöt_t
 
ty≥
)

669 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

671 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

673 
≥î
 = 
ºp
->
cuºít
;

675 i‡(
ty≥
 =
NGX_STREAM_UPSTREAM_NOTIFY_CONNECT


676 && 
pc
->
c⁄√˘i⁄
->
ty≥
 =
SOCK_STREAM
)

678 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
ºp
->
≥îs
);

679 
	`ngx_°ªam_up°ªam_º_≥î_lock
(
ºp
->
≥îs
, 
≥î
);

681 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

682 
≥î
->
Áûs
 = 0;

685 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
ºp
->
≥îs
, 
≥î
);

686 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
ºp
->
≥îs
);

688 
	}
}

691 #i‡(
NGX_STREAM_SSL
)

693 
ngx_öt_t


694 
	$ngx_°ªam_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

695 *
d©a
)

697 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

699 
ngx_öt_t
 
rc
;

700 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

701 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

702 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

703 
Àn
;

704 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

707 
u_ch¨
 *
p
;

708 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

709 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

712 
≥î
 = 
ºp
->
cuºít
;

714 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

715 
≥îs
 = 
ºp
->peers;

717 i‡(
≥îs
->
shpoﬁ
) {

718 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
≥îs
);

719 
	`ngx_°ªam_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
);

721 i‡(
≥î
->
s¶_£ssi⁄
 =
NULL
) {

722 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

723 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

724  
NGX_OK
;

727 
Àn
 = 
≥î
->
s¶_£ssi⁄_Àn
;

729 
	`ngx_mem˝y
(
buf
, 
≥î
->
s¶_£ssi⁄
, 
Àn
);

731 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

732 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

734 
p
 = 
buf
;

735 
s¶_£ssi⁄
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
Àn
);

737 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

739 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

740 "£à£ssi⁄: %p", 
s¶_£ssi⁄
);

742 
	`ngx_s¶_‰ì_£ssi⁄
(
s¶_£ssi⁄
);

744  
rc
;

748 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

750 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

752 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

753 "£à£ssi⁄: %p", 
s¶_£ssi⁄
);

755  
rc
;

756 
	}
}

760 
	$ngx_°ªam_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

761 *
d©a
)

763 
ngx_°ªam_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

765 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

766 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
;

767 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

768 
Àn
;

769 
u_ch¨
 *
p
;

770 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
;

771 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

774 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

775 
≥îs
 = 
ºp
->peers;

777 i‡(
≥îs
->
shpoﬁ
) {

779 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë0_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

781 i‡(
s¶_£ssi⁄
 =
NULL
) {

785 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

786 "ßvê£ssi⁄: %p", 
s¶_£ssi⁄
);

788 
Àn
 = 
	`i2d_SSL_SESSION
(
s¶_£ssi⁄
, 
NULL
);

792 i‡(
Àn
 > 
NGX_SSL_MAX_SESSION_SIZE
) {

796 
p
 = 
buf
;

797 (Ë
	`i2d_SSL_SESSION
(
s¶_£ssi⁄
, &
p
);

799 
≥î
 = 
ºp
->
cuºít
;

801 
	`ngx_°ªam_up°ªam_º_≥îs_æock
(
≥îs
);

802 
	`ngx_°ªam_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
);

804 i‡(
Àn
 > 
≥î
->
s¶_£ssi⁄_Àn
) {

805 
	`ngx_shmtx_lock
(&
≥îs
->
shpoﬁ
->
muãx
);

807 i‡(
≥î
->
s¶_£ssi⁄
) {

808 
	`ngx_¶ab_‰ì_locked
(
≥îs
->
shpoﬁ
, 
≥î
->
s¶_£ssi⁄
);

811 
≥î
->
s¶_£ssi⁄
 = 
	`ngx_¶ab_Æloc_locked
(
≥îs
->
shpoﬁ
, 
Àn
);

813 
	`ngx_shmtx_u∆ock
(&
≥îs
->
shpoﬁ
->
muãx
);

815 i‡(
≥î
->
s¶_£ssi⁄
 =
NULL
) {

816 
≥î
->
s¶_£ssi⁄_Àn
 = 0;

818 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

819 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

823 
≥î
->
s¶_£ssi⁄_Àn
 = 
Àn
;

826 
	`ngx_mem˝y
(
≥î
->
s¶_£ssi⁄
, 
buf
, 
Àn
);

828 
	`ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
);

829 
	`ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
);

835 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

837 i‡(
s¶_£ssi⁄
 =
NULL
) {

841 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

842 "ßvê£ssi⁄: %p", 
s¶_£ssi⁄
);

844 
≥î
 = 
ºp
->
cuºít
;

846 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

847 
≥î
->
s¶_£ssi⁄
 = ssl_session;

849 i‡(
ﬁd_s¶_£ssi⁄
) {

851 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
pc
->
log
, 0,

852 "ﬁd sessi⁄: %p", 
ﬁd_s¶_£ssi⁄
);

856 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

858 
	}
}

861 
ngx_öt_t


862 
	$ngx_°ªam_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

864  
NGX_OK
;

865 
	}
}

869 
	$ngx_°ªam_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

872 
	}
}

	@src/stream/ngx_stream_upstream_round_robin.h

8 #i‚de‡
_NGX_STREAM_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_STREAM_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_°ªam.h
>

17 
ngx_°ªam_up°ªam_º_≥î_s
 
	tngx_°ªam_up°ªam_º_≥î_t
;

19 
	sngx_°ªam_up°ªam_º_≥î_s
 {

20 
sockaddr
 *
	msockaddr
;

21 
sockÀn_t
 
	msockÀn
;

22 
ngx_°r_t
 
	m«me
;

23 
ngx_°r_t
 
	m£rvî
;

25 
ngx_öt_t
 
	mcuºít_weight
;

26 
ngx_öt_t
 
	mef„˘ive_weight
;

27 
ngx_öt_t
 
	mweight
;

29 
ngx_uöt_t
 
	mc⁄ns
;

30 
ngx_uöt_t
 
	mmax_c⁄ns
;

32 
ngx_uöt_t
 
	mÁûs
;

33 
time_t
 
	mac˚s£d
;

34 
time_t
 
	mchecked
;

36 
ngx_uöt_t
 
	mmax_Áûs
;

37 
time_t
 
	mÁû_timeout
;

38 
ngx_m£c_t
 
	m¶ow_°¨t
;

39 
ngx_m£c_t
 
	m°¨t_time
;

41 
ngx_uöt_t
 
	mdown
;

43 *
	ms¶_£ssi⁄
;

44 
	ms¶_£ssi⁄_Àn
;

46 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

47 
ngx_©omic_t
 
	mlock
;

50 
ngx_°ªam_up°ªam_º_≥î_t
 *
	m√xt
;

52 
NGX_COMPAT_BEGIN
(25)

53 
	mNGX_COMPAT_END


57 
ngx_°ªam_up°ªam_º_≥îs_s
 
	tngx_°ªam_up°ªam_º_≥îs_t
;

59 
	sngx_°ªam_up°ªam_º_≥îs_s
 {

60 
ngx_uöt_t
 
	mnumbî
;

62 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

63 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

64 
ngx_©omic_t
 
	mrwlock
;

65 
ngx_°ªam_up°ªam_º_≥îs_t
 *
	mz⁄e_√xt
;

68 
ngx_uöt_t
 
	mtŸÆ_weight
;

70 
	msögÀ
:1;

71 
	mweighãd
:1;

73 
ngx_°r_t
 *
	m«me
;

75 
ngx_°ªam_up°ªam_º_≥îs_t
 *
	m√xt
;

77 
ngx_°ªam_up°ªam_º_≥î_t
 *
	m≥î
;

81 #i‡(
NGX_STREAM_UPSTREAM_ZONE
)

83 
	#ngx_°ªam_up°ªam_º_≥îs_æock
(
≥îs
) \

85 i‡(
≥îs
->
shpoﬁ
) { \

86 
	`ngx_rwlock_æock
(&
≥îs
->
rwlock
); \

87 }

	)

89 
	#ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
) \

91 i‡(
≥îs
->
shpoﬁ
) { \

92 
	`ngx_rwlock_wlock
(&
≥îs
->
rwlock
); \

93 }

	)

95 
	#ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
) \

97 i‡(
≥îs
->
shpoﬁ
) { \

98 
	`ngx_rwlock_u∆ock
(&
≥îs
->
rwlock
); \

99 }

	)

102 
	#ngx_°ªam_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
) \

104 i‡(
≥îs
->
shpoﬁ
) { \

105 
	`ngx_rwlock_wlock
(&
≥î
->
lock
); \

106 }

	)

108 
	#ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
) \

110 i‡(
≥îs
->
shpoﬁ
) { \

111 
	`ngx_rwlock_u∆ock
(&
≥î
->
lock
); \

112 }

	)

116 
	#ngx_°ªam_up°ªam_º_≥îs_æock
(
≥îs
)

	)

117 
	#ngx_°ªam_up°ªam_º_≥îs_wlock
(
≥îs
)

	)

118 
	#ngx_°ªam_up°ªam_º_≥îs_u∆ock
(
≥îs
)

	)

119 
	#ngx_°ªam_up°ªam_º_≥î_lock
(
≥îs
, 
≥î
)

	)

120 
	#ngx_°ªam_up°ªam_º_≥î_u∆ock
(
≥îs
, 
≥î
)

	)

126 
ngx_uöt_t
 
	mc⁄fig
;

127 
ngx_°ªam_up°ªam_º_≥îs_t
 *
	m≥îs
;

128 
ngx_°ªam_up°ªam_º_≥î_t
 *
	mcuºít
;

129 
uöçå_t
 *
	måõd
;

130 
uöçå_t
 
	md©a
;

131 } 
	tngx_°ªam_up°ªam_º_≥î_d©a_t
;

134 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

135 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

136 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_round_robö_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

137 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
us
);

138 
ngx_öt_t
 
ngx_°ªam_up°ªam_¸óã_round_robö_≥î
(
ngx_°ªam_£ssi⁄_t
 *
s
,

139 
ngx_°ªam_up°ªam_ªsﬁved_t
 *
ur
);

140 
ngx_öt_t
 
ngx_°ªam_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

141 *
d©a
);

142 
ngx_°ªam_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

143 *
d©a
, 
ngx_uöt_t
 
°©e
);

	@src/stream/ngx_stream_upstream_zone_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

13 *
ngx_°ªam_up°ªam_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

14 *
c⁄f
);

15 
ngx_öt_t
 
ngx_°ªam_up°ªam_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
,

16 *
d©a
);

17 
ngx_°ªam_up°ªam_º_≥îs_t
 *
ngx_°ªam_up°ªam_z⁄e_c›y_≥îs
(

18 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
);

19 
ngx_°ªam_up°ªam_º_≥î_t
 *
ngx_°ªam_up°ªam_z⁄e_c›y_≥î
(

20 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
, 
ngx_°ªam_up°ªam_º_≥î_t
 *
§c
);

23 
ngx_comm™d_t
 
	gngx_°ªam_up°ªam_z⁄e_comm™ds
[] = {

25 { 
ngx_°rög
("zone"),

26 
NGX_STREAM_UPS_CONF
|
NGX_CONF_TAKE12
,

27 
ngx_°ªam_up°ªam_z⁄e
,

30 
NULL
 },

32 
ngx_nuŒ_comm™d


36 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_up°ªam_z⁄e_moduÀ_˘x
 = {

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL
,

43 
NULL
,

44 
NULL


48 
ngx_moduÀ_t
 
	gngx_°ªam_up°ªam_z⁄e_moduÀ
 = {

49 
NGX_MODULE_V1
,

50 &
ngx_°ªam_up°ªam_z⁄e_moduÀ_˘x
,

51 
ngx_°ªam_up°ªam_z⁄e_comm™ds
,

52 
NGX_STREAM_MODULE
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NGX_MODULE_V1_PADDING


65 
	$ngx_°ªam_up°ªam_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

67 
ssize_t
 
size
;

68 
ngx_°r_t
 *
vÆue
;

69 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
;

70 
ngx_°ªam_up°ªam_maö_c⁄f_t
 *
umcf
;

72 
uscf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_°ªam_up°ªam_moduÀ
);

73 
umcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_up°ªam_moduÀ
);

75 
vÆue
 = 
cf
->
¨gs
->
ñts
;

77 i‡(!
vÆue
[1].
Àn
) {

78 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

79 "övÆid z⁄ê«mê\"%V\"", &
vÆue
[1]);

80  
NGX_CONF_ERROR
;

83 i‡(
cf
->
¨gs
->
√…s
 == 3) {

84 
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

86 i‡(
size
 =
NGX_ERROR
) {

87 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

88 "övÆid z⁄êsizê\"%V\"", &
vÆue
[2]);

89  
NGX_CONF_ERROR
;

92 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

93 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

94 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[1]);

95  
NGX_CONF_ERROR
;

99 
size
 = 0;

102 
uscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 
size
,

103 &
ngx_°ªam_up°ªam_moduÀ
);

104 i‡(
uscf
->
shm_z⁄e
 =
NULL
) {

105  
NGX_CONF_ERROR
;

108 
uscf
->
shm_z⁄e
->
öô
 = 
ngx_°ªam_up°ªam_öô_z⁄e
;

109 
uscf
->
shm_z⁄e
->
d©a
 = 
umcf
;

111 
uscf
->
shm_z⁄e
->
n‹eu£
 = 1;

113  
NGX_CONF_OK
;

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_°ªam_up°ªam_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

120 
size_t
 
Àn
;

121 
ngx_uöt_t
 
i
;

122 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

123 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
, **
≥î•
;

124 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

125 
ngx_°ªam_up°ªam_maö_c⁄f_t
 *
umcf
;

127 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

128 
umcf
 = 
shm_z⁄e
->
d©a
;

129 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

131 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

132 
≥îs
 = 
shpoﬁ
->
d©a
;

134 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

135 
uscf
 = 
uscÂ
[
i
];

137 i‡(
uscf
->
shm_z⁄e
 != shm_zone) {

141 
uscf
->
≥î
.
d©a
 = 
≥îs
;

142 
≥îs
 =Öìrs->
z⁄e_√xt
;

145  
NGX_OK
;

148 
Àn
 = (" i¿up°ªam z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

150 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

151 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

152  
NGX_ERROR
;

155 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in upstream zone \"%V\"%Z",

156 &
shm_z⁄e
->
shm
.
«me
);

161 
≥î•
 = (
ngx_°ªam_up°ªam_º_≥îs_t
 **Ë(*Ë&
shpoﬁ
->
d©a
;

163 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

164 
uscf
 = 
uscÂ
[
i
];

166 i‡(
uscf
->
shm_z⁄e
 != shm_zone) {

170 
≥îs
 = 
	`ngx_°ªam_up°ªam_z⁄e_c›y_≥îs
(
shpoﬁ
, 
uscf
);

171 i‡(
≥îs
 =
NULL
) {

172  
NGX_ERROR
;

175 *
≥î•
 = 
≥îs
;

176 
≥î•
 = &
≥îs
->
z⁄e_√xt
;

179  
NGX_OK
;

180 
	}
}

183 
ngx_°ªam_up°ªam_º_≥îs_t
 *

184 
	$ngx_°ªam_up°ªam_z⁄e_c›y_≥îs
(
ngx_¶ab_poﬁ_t
 *
shpoﬁ
,

185 
ngx_°ªam_up°ªam_§v_c⁄f_t
 *
uscf
)

187 
ngx_°r_t
 *
«me
;

188 
ngx_°ªam_up°ªam_º_≥î_t
 *
≥î
, **
≥îp
;

189 
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

191 
≥îs
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

192 i‡(
≥îs
 =
NULL
) {

193  
NULL
;

196 
	`ngx_mem˝y
(
≥îs
, 
uscf
->
≥î
.
d©a
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

198 
«me
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_°r_t
));

199 i‡(
«me
 =
NULL
) {

200  
NULL
;

203 
«me
->
d©a
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, 
≥îs
->«me->
Àn
);

204 i‡(
«me
->
d©a
 =
NULL
) {

205  
NULL
;

208 
	`ngx_mem˝y
(
«me
->
d©a
, 
≥îs
->«me->d©a,Öìrs->«me->
Àn
);

209 
«me
->
Àn
 = 
≥îs
->name->len;

211 
≥îs
->
«me
 =Çame;

213 
≥îs
->
shpoﬁ
 = shpool;

215 
≥îp
 = &
≥îs
->
≥î
; *≥îp;ÖìΩ = &≥î->
√xt
) {

217 
≥î
 = 
	`ngx_°ªam_up°ªam_z⁄e_c›y_≥î
(
≥îs
, *
≥îp
);

218 i‡(
≥î
 =
NULL
) {

219  
NULL
;

222 *
≥îp
 = 
≥î
;

225 i‡(
≥îs
->
√xt
 =
NULL
) {

226 
d⁄e
;

229 
backup
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

230 i‡(
backup
 =
NULL
) {

231  
NULL
;

234 
	`ngx_mem˝y
(
backup
, 
≥îs
->
√xt
, (
ngx_°ªam_up°ªam_º_≥îs_t
));

236 
backup
->
«me
 =Çame;

238 
backup
->
shpoﬁ
 = shpool;

240 
≥îp
 = &
backup
->
≥î
; *≥îp;ÖìΩ = &≥î->
√xt
) {

242 
≥î
 = 
	`ngx_°ªam_up°ªam_z⁄e_c›y_≥î
(
backup
, *
≥îp
);

243 i‡(
≥î
 =
NULL
) {

244  
NULL
;

247 *
≥îp
 = 
≥î
;

250 
≥îs
->
√xt
 = 
backup
;

252 
d⁄e
:

254 
uscf
->
≥î
.
d©a
 = 
≥îs
;

256  
≥îs
;

257 
	}
}

260 
ngx_°ªam_up°ªam_º_≥î_t
 *

261 
	$ngx_°ªam_up°ªam_z⁄e_c›y_≥î
(
ngx_°ªam_up°ªam_º_≥îs_t
 *
≥îs
,

262 
ngx_°ªam_up°ªam_º_≥î_t
 *
§c
)

264 
ngx_¶ab_poﬁ_t
 *
poﬁ
;

265 
ngx_°ªam_up°ªam_º_≥î_t
 *
d°
;

267 
poﬁ
 = 
≥îs
->
shpoﬁ
;

269 
d°
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, (
ngx_°ªam_up°ªam_º_≥î_t
));

270 i‡(
d°
 =
NULL
) {

271  
NULL
;

274 i‡(
§c
) {

275 
	`ngx_mem˝y
(
d°
, 
§c
, (
ngx_°ªam_up°ªam_º_≥î_t
));

276 
d°
->
sockaddr
 = 
NULL
;

277 
d°
->
«me
.
d©a
 = 
NULL
;

278 
d°
->
£rvî
.
d©a
 = 
NULL
;

281 
d°
->
sockaddr
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, (
ngx_sockaddr_t
));

282 i‡(
d°
->
sockaddr
 =
NULL
) {

283 
Áûed
;

286 
d°
->
«me
.
d©a
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

287 i‡(
d°
->
«me
.
d©a
 =
NULL
) {

288 
Áûed
;

291 i‡(
§c
) {

292 
	`ngx_mem˝y
(
d°
->
sockaddr
, 
§c
->sockaddr, src->
sockÀn
);

293 
	`ngx_mem˝y
(
d°
->
«me
.
d©a
, 
§c
->«me.d©a, src->«me.
Àn
);

295 
d°
->
£rvî
.
d©a
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
§c
->£rvî.
Àn
);

296 i‡(
d°
->
£rvî
.
d©a
 =
NULL
) {

297 
Áûed
;

300 
	`ngx_mem˝y
(
d°
->
£rvî
.
d©a
, 
§c
->£rvî.d©a, src->£rvî.
Àn
);

303  
d°
;

305 
Áûed
:

307 i‡(
d°
->
£rvî
.
d©a
) {

308 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
->
£rvî
.
d©a
);

311 i‡(
d°
->
«me
.
d©a
) {

312 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
->
«me
.
d©a
);

315 i‡(
d°
->
sockaddr
) {

316 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
->
sockaddr
);

319 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
d°
);

321  
NULL
;

322 
	}
}

	@src/stream/ngx_stream_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

11 
	~<ngöx.h
>

13 
ngx_°ªam_v¨übÀ_t
 *
ngx_°ªam_add_¥efix_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

14 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
);

16 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_bö¨y_ªmŸe_addr
(

17 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_ªmŸe_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

19 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_ªmŸe_p‹t
(
ngx_°ªam_£ssi⁄_t
 *
s
,

21 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(

23 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

24 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_¥oxy_¥Ÿocﬁ_p‹t
(

25 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

26 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_£rvî_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

27 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

28 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_£rvî_p‹t
(
ngx_°ªam_£ssi⁄_t
 *
s
,

29 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

30 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_byãs
(
ngx_°ªam_£ssi⁄_t
 *
s
,

31 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

32 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_£ssi⁄_time
(
ngx_°ªam_£ssi⁄_t
 *
s
,

33 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

34 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_°©us
(
ngx_°ªam_£ssi⁄_t
 *
s
,

35 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_c⁄√˘i⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
,

37 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_ngöx_vîsi⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
,

40 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

41 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_ho°«me
(
ngx_°ªam_£ssi⁄_t
 *
s
,

42 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

43 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_pid
(
ngx_°ªam_£ssi⁄_t
 *
s
,

44 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

45 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_m£c
(
ngx_°ªam_£ssi⁄_t
 *
s
,

46 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

47 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_time_iso8601
(
ngx_°ªam_£ssi⁄_t
 *
s
,

48 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

49 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_time_loˇl
(
ngx_°ªam_£ssi⁄_t
 *
s
,

50 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

51 
ngx_öt_t
 
ngx_°ªam_v¨übÀ_¥Ÿocﬁ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

52 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

55 
ngx_°ªam_v¨übÀ_t
 
	gngx_°ªam_c‹e_v¨übÀs
[] = {

57 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

58 
ngx_°ªam_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

60 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
,

61 
ngx_°ªam_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

63 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
,

64 
ngx_°ªam_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

66 { 
ngx_°rög
("¥oxy_¥Ÿocﬁ_addr"), 
NULL
,

67 
ngx_°ªam_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
, 0, 0, 0 },

69 { 
ngx_°rög
("¥oxy_¥Ÿocﬁ_p‹t"), 
NULL
,

70 
ngx_°ªam_v¨übÀ_¥oxy_¥Ÿocﬁ_p‹t
, 0, 0, 0 },

72 { 
ngx_°rög
("£rvî_addr"), 
NULL
,

73 
ngx_°ªam_v¨übÀ_£rvî_addr
, 0, 0, 0 },

75 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
,

76 
ngx_°ªam_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

78 { 
ngx_°rög
("byãs_£¡"), 
NULL
, 
ngx_°ªam_v¨übÀ_byãs
,

81 { 
ngx_°rög
("byãs_ª˚ived"), 
NULL
, 
ngx_°ªam_v¨übÀ_byãs
,

84 { 
ngx_°rög
("£ssi⁄_time"), 
NULL
, 
ngx_°ªam_v¨übÀ_£ssi⁄_time
,

85 0, 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

87 { 
ngx_°rög
("°©us"), 
NULL
, 
ngx_°ªam_v¨übÀ_°©us
,

88 0, 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

90 { 
ngx_°rög
("c⁄√˘i⁄"), 
NULL
,

91 
ngx_°ªam_v¨übÀ_c⁄√˘i⁄
, 0, 0, 0 },

93 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_°ªam_v¨übÀ_ngöx_vîsi⁄
,

96 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_°ªam_v¨übÀ_ho°«me
,

99 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_°ªam_v¨übÀ_pid
,

102 { 
ngx_°rög
("m£c"), 
NULL
, 
ngx_°ªam_v¨übÀ_m£c
,

103 0, 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

105 { 
ngx_°rög
("time_iso8601"), 
NULL
, 
ngx_°ªam_v¨übÀ_time_iso8601
,

106 0, 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

108 { 
ngx_°rög
("time_loˇl"), 
NULL
, 
ngx_°ªam_v¨übÀ_time_loˇl
,

109 0, 
NGX_STREAM_VAR_NOCACHEABLE
, 0 },

111 { 
ngx_°rög
("¥Ÿocﬁ"), 
NULL
,

112 
ngx_°ªam_v¨übÀ_¥Ÿocﬁ
, 0, 0, 0 },

114 
ngx_°ªam_nuŒ_v¨übÀ


118 
ngx_°ªam_v¨übÀ_vÆue_t
 
	gngx_°ªam_v¨übÀ_nuŒ_vÆue
 =

119 
ngx_°ªam_v¨übÀ
("");

120 
ngx_°ªam_v¨übÀ_vÆue_t
 
	gngx_°ªam_v¨übÀ_åue_vÆue
 =

121 
ngx_°ªam_v¨übÀ
("1");

124 
ngx_uöt_t
 
	gngx_°ªam_v¨übÀ_dïth
 = 100;

127 
ngx_°ªam_v¨übÀ_t
 *

128 
	$ngx_°ªam_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

130 
ngx_öt_t
 
rc
;

131 
ngx_uöt_t
 
i
;

132 
ngx_hash_key_t
 *
key
;

133 
ngx_°ªam_v¨übÀ_t
 *
v
;

134 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

136 i‡(
«me
->
Àn
 == 0) {

137 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

139  
NULL
;

142 i‡(
Êags
 & 
NGX_STREAM_VAR_PREFIX
) {

143  
	`ngx_°ªam_add_¥efix_v¨übÀ
(
cf
, 
«me
, 
Êags
);

146 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

148 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

149 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

150 i‡(
«me
->
Àn
 !
key
[
i
].key.len

151 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

156 
v
 = 
key
[
i
].
vÆue
;

158 i‡(!(
v
->
Êags
 & 
NGX_STREAM_VAR_CHANGEABLE
)) {

159 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

160 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

161  
NULL
;

164 i‡(!(
Êags
 & 
NGX_STREAM_VAR_WEAK
)) {

165 
v
->
Êags
 &~
NGX_STREAM_VAR_WEAK
;

168  
v
;

171 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°ªam_v¨übÀ_t
));

172 i‡(
v
 =
NULL
) {

173  
NULL
;

176 
v
->
«me
.
Àn
 =Çame->len;

177 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

178 i‡(
v
->
«me
.
d©a
 =
NULL
) {

179  
NULL
;

182 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

184 
v
->
£t_h™dÀr
 = 
NULL
;

185 
v
->
gë_h™dÀr
 = 
NULL
;

186 
v
->
d©a
 = 0;

187 
v
->
Êags
 = flags;

188 
v
->
ödex
 = 0;

190 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

192 i‡(
rc
 =
NGX_ERROR
) {

193  
NULL
;

196 i‡(
rc
 =
NGX_BUSY
) {

197 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

198 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

199  
NULL
;

202  
v
;

203 
	}
}

206 
ngx_°ªam_v¨übÀ_t
 *

207 
	$ngx_°ªam_add_¥efix_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

208 
ngx_uöt_t
 
Êags
)

210 
ngx_uöt_t
 
i
;

211 
ngx_°ªam_v¨übÀ_t
 *
v
;

212 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

214 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

216 
v
 = 
cmcf
->
¥efix_v¨übÀs
.
ñts
;

217 
i
 = 0; i < 
cmcf
->
¥efix_v¨übÀs
.
√…s
; i++) {

218 i‡(
«me
->
Àn
 !
v
[
i
].name.len

219 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

224 
v
 = &v[
i
];

226 i‡(!(
v
->
Êags
 & 
NGX_STREAM_VAR_CHANGEABLE
)) {

227 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

228 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

229  
NULL
;

232 i‡(!(
Êags
 & 
NGX_STREAM_VAR_WEAK
)) {

233 
v
->
Êags
 &~
NGX_STREAM_VAR_WEAK
;

236  
v
;

239 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
¥efix_v¨übÀs
);

240 i‡(
v
 =
NULL
) {

241  
NULL
;

244 
v
->
«me
.
Àn
 =Çame->len;

245 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

246 i‡(
v
->
«me
.
d©a
 =
NULL
) {

247  
NULL
;

250 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

252 
v
->
£t_h™dÀr
 = 
NULL
;

253 
v
->
gë_h™dÀr
 = 
NULL
;

254 
v
->
d©a
 = 0;

255 
v
->
Êags
 = flags;

256 
v
->
ödex
 = 0;

258  
v
;

259 
	}
}

262 
ngx_öt_t


263 
	$ngx_°ªam_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

265 
ngx_uöt_t
 
i
;

266 
ngx_°ªam_v¨übÀ_t
 *
v
;

267 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

269 i‡(
«me
->
Àn
 == 0) {

270 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

272  
NGX_ERROR
;

275 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

277 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

279 i‡(
v
 =
NULL
) {

280 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

281 (
ngx_°ªam_v¨übÀ_t
))

282 !
NGX_OK
)

284  
NGX_ERROR
;

288 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

289 i‡(
«me
->
Àn
 !
v
[
i
].name.len

290 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

295  
i
;

299 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

300 i‡(
v
 =
NULL
) {

301  
NGX_ERROR
;

304 
v
->
«me
.
Àn
 =Çame->len;

305 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

306 i‡(
v
->
«me
.
d©a
 =
NULL
) {

307  
NGX_ERROR
;

310 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

312 
v
->
£t_h™dÀr
 = 
NULL
;

313 
v
->
gë_h™dÀr
 = 
NULL
;

314 
v
->
d©a
 = 0;

315 
v
->
Êags
 = 0;

316 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

318  
v
->
ödex
;

319 
	}
}

322 
ngx_°ªam_v¨übÀ_vÆue_t
 *

323 
	$ngx_°ªam_gë_ödexed_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
ödex
)

325 
ngx_°ªam_v¨übÀ_t
 *
v
;

326 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

328 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

330 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

331 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 0,

332 "unknow¿v¨übÀ index: %ui", 
ödex
);

333  
NULL
;

336 i‡(
s
->
v¨übÀs
[
ödex
].
nŸ_found
 || s->v¨übÀs[ödex].
vÆid
) {

337  &
s
->
v¨übÀs
[
ödex
];

340 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

342 i‡(
ngx_°ªam_v¨übÀ_dïth
 == 0) {

343 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

345 &
v
[
ödex
].
«me
);

346  
NULL
;

349 
ngx_°ªam_v¨übÀ_dïth
--;

351 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
s
, &s->
v¨übÀs
[ödex], v[ödex].
d©a
)

352 =
NGX_OK
)

354 
ngx_°ªam_v¨übÀ_dïth
++;

356 i‡(
v
[
ödex
].
Êags
 & 
NGX_STREAM_VAR_NOCACHEABLE
) {

357 
s
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

360  &
s
->
v¨übÀs
[
ödex
];

363 
ngx_°ªam_v¨übÀ_dïth
++;

365 
s
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

366 
s
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

368  
NULL
;

369 
	}
}

372 
ngx_°ªam_v¨übÀ_vÆue_t
 *

373 
	$ngx_°ªam_gë_Êushed_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
ödex
)

375 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
;

377 
v
 = &
s
->
v¨übÀs
[
ödex
];

379 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

380 i‡(!
v
->
no_ˇchóbÀ
) {

381  
v
;

384 
v
->
vÆid
 = 0;

385 
v
->
nŸ_found
 = 0;

388  
	`ngx_°ªam_gë_ödexed_v¨übÀ
(
s
, 
ödex
);

389 
	}
}

392 
ngx_°ªam_v¨übÀ_vÆue_t
 *

393 
	$ngx_°ªam_gë_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°r_t
 *
«me
,

394 
ngx_uöt_t
 
key
)

396 
size_t
 
Àn
;

397 
ngx_uöt_t
 
i
, 
n
;

398 
ngx_°ªam_v¨übÀ_t
 *
v
;

399 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vv
;

400 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

402 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

404 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

406 i‡(
v
) {

407 i‡(
v
->
Êags
 & 
NGX_STREAM_VAR_INDEXED
) {

408  
	`ngx_°ªam_gë_Êushed_v¨übÀ
(
s
, 
v
->
ödex
);

411 i‡(
ngx_°ªam_v¨übÀ_dïth
 == 0) {

412 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

413 "cy˛êwhûêevÆu©ög v¨übÀ \"%V\"", 
«me
);

414  
NULL
;

417 
ngx_°ªam_v¨übÀ_dïth
--;

419 
vv
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

420 (
ngx_°ªam_v¨übÀ_vÆue_t
));

422 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
s
, vv, v->
d©a
Ë=
NGX_OK
) {

423 
ngx_°ªam_v¨übÀ_dïth
++;

424  
vv
;

427 
ngx_°ªam_v¨übÀ_dïth
++;

428  
NULL
;

431 
vv
 = 
	`ngx_∑Œoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_°ªam_v¨übÀ_vÆue_t
));

432 i‡(
vv
 =
NULL
) {

433  
NULL
;

436 
Àn
 = 0;

438 
v
 = 
cmcf
->
¥efix_v¨übÀs
.
ñts
;

439 
n
 = 
cmcf
->
¥efix_v¨übÀs
.
√…s
;

441 
i
 = 0; i < 
cmcf
->
¥efix_v¨übÀs
.
√…s
; i++) {

442 i‡(
«me
->
Àn
 >
v
[
i
].name.len &&Çame->len >Üen

443 && 
	`ngx_°∫cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a, v[i].«me.
Àn
) == 0)

445 
Àn
 = 
v
[
i
].
«me
.len;

446 
n
 = 
i
;

450 i‡(
n
 !
cmcf
->
¥efix_v¨übÀs
.
√…s
) {

451 i‡(
v
[
n
].
	`gë_h™dÀr
(
s
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

452  
vv
;

455  
NULL
;

458 
vv
->
nŸ_found
 = 1;

460  
vv
;

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_°ªam_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

466 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

468 
sockaddr_ö
 *
sö
;

469 #i‡(
NGX_HAVE_INET6
)

470 
sockaddr_ö6
 *
sö6
;

473 
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

475 #i‡(
NGX_HAVE_INET6
)

476 
AF_INET6
:

477 
sö6
 = (
sockaddr_ö6
 *Ë
s
->
c⁄√˘i⁄
->
sockaddr
;

479 
v
->
Àn
 = (
ö6_addr
);

480 
v
->
vÆid
 = 1;

481 
v
->
no_ˇchóbÀ
 = 0;

482 
v
->
nŸ_found
 = 0;

483 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

488 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

489 
AF_UNIX
:

491 
v
->
Àn
 = 
s
->
c⁄√˘i⁄
->
addr_ãxt
.len;

492 
v
->
vÆid
 = 1;

493 
v
->
no_ˇchóbÀ
 = 0;

494 
v
->
nŸ_found
 = 0;

495 
v
->
d©a
 = 
s
->
c⁄√˘i⁄
->
addr_ãxt
.data;

501 
sö
 = (
sockaddr_ö
 *Ë
s
->
c⁄√˘i⁄
->
sockaddr
;

503 
v
->
Àn
 = (
ö_addr_t
);

504 
v
->
vÆid
 = 1;

505 
v
->
no_ˇchóbÀ
 = 0;

506 
v
->
nŸ_found
 = 0;

507 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

512  
NGX_OK
;

513 
	}
}

516 
ngx_öt_t


517 
	$ngx_°ªam_v¨übÀ_ªmŸe_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

518 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

520 
v
->
Àn
 = 
s
->
c⁄√˘i⁄
->
addr_ãxt
.len;

521 
v
->
vÆid
 = 1;

522 
v
->
no_ˇchóbÀ
 = 0;

523 
v
->
nŸ_found
 = 0;

524 
v
->
d©a
 = 
s
->
c⁄√˘i⁄
->
addr_ãxt
.data;

526  
NGX_OK
;

527 
	}
}

530 
ngx_öt_t


531 
	$ngx_°ªam_v¨übÀ_ªmŸe_p‹t
(
ngx_°ªam_£ssi⁄_t
 *
s
,

532 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

534 
ngx_uöt_t
 
p‹t
;

536 
v
->
Àn
 = 0;

537 
v
->
vÆid
 = 1;

538 
v
->
no_ˇchóbÀ
 = 0;

539 
v
->
nŸ_found
 = 0;

541 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, ("65535") - 1);

542 i‡(
v
->
d©a
 =
NULL
) {

543  
NGX_ERROR
;

546 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
s
->
c⁄√˘i⁄
->
sockaddr
);

548 i‡(
p‹t
 > 0 &&Öort < 65536) {

549 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

552  
NGX_OK
;

553 
	}
}

556 
ngx_öt_t


557 
	$ngx_°ªam_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

558 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

560 
v
->
Àn
 = 
s
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.len;

561 
v
->
vÆid
 = 1;

562 
v
->
no_ˇchóbÀ
 = 0;

563 
v
->
nŸ_found
 = 0;

564 
v
->
d©a
 = 
s
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.data;

566  
NGX_OK
;

567 
	}
}

570 
ngx_öt_t


571 
	$ngx_°ªam_v¨übÀ_¥oxy_¥Ÿocﬁ_p‹t
(
ngx_°ªam_£ssi⁄_t
 *
s
,

572 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

574 
ngx_uöt_t
 
p‹t
;

576 
v
->
Àn
 = 0;

577 
v
->
vÆid
 = 1;

578 
v
->
no_ˇchóbÀ
 = 0;

579 
v
->
nŸ_found
 = 0;

581 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, ("65535") - 1);

582 i‡(
v
->
d©a
 =
NULL
) {

583  
NGX_ERROR
;

586 
p‹t
 = 
s
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_p‹t
;

588 i‡(
p‹t
 > 0 &&Öort < 65536) {

589 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

592  
NGX_OK
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_°ªam_v¨übÀ_£rvî_addr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

598 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

600 
ngx_°r_t
 
°r
;

601 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

603 
°r
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

604 
°r
.
d©a
 = 
addr
;

606 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
s
->
c⁄√˘i⁄
, &
°r
, 0Ë!
NGX_OK
) {

607  
NGX_ERROR
;

610 
°r
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, så.
Àn
);

611 i‡(
°r
.
d©a
 =
NULL
) {

612  
NGX_ERROR
;

615 
	`ngx_mem˝y
(
°r
.
d©a
, 
addr
, så.
Àn
);

617 
v
->
Àn
 = 
°r
.len;

618 
v
->
vÆid
 = 1;

619 
v
->
no_ˇchóbÀ
 = 0;

620 
v
->
nŸ_found
 = 0;

621 
v
->
d©a
 = 
°r
.data;

623  
NGX_OK
;

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_°ªam_v¨übÀ_£rvî_p‹t
(
ngx_°ªam_£ssi⁄_t
 *
s
,

629 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

631 
ngx_uöt_t
 
p‹t
;

633 
v
->
Àn
 = 0;

634 
v
->
vÆid
 = 1;

635 
v
->
no_ˇchóbÀ
 = 0;

636 
v
->
nŸ_found
 = 0;

638 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
s
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

639  
NGX_ERROR
;

642 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, ("65535") - 1);

643 i‡(
v
->
d©a
 =
NULL
) {

644  
NGX_ERROR
;

647 
p‹t
 = 
	`ngx_öë_gë_p‹t
(
s
->
c⁄√˘i⁄
->
loˇl_sockaddr
);

649 i‡(
p‹t
 > 0 &&Öort < 65536) {

650 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

653  
NGX_OK
;

654 
	}
}

657 
ngx_öt_t


658 
	$ngx_°ªam_v¨übÀ_byãs
(
ngx_°ªam_£ssi⁄_t
 *
s
,

659 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

661 
u_ch¨
 *
p
;

663 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_OFF_T_LEN
);

664 i‡(
p
 =
NULL
) {

665  
NGX_ERROR
;

668 i‡(
d©a
 == 1) {

669 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
s
->
ª˚ived
) -Ö;

672 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
s
->
c⁄√˘i⁄
->
£¡
) -Ö;

675 
v
->
vÆid
 = 1;

676 
v
->
no_ˇchóbÀ
 = 0;

677 
v
->
nŸ_found
 = 0;

678 
v
->
d©a
 = 
p
;

680  
NGX_OK
;

681 
	}
}

684 
ngx_öt_t


685 
	$ngx_°ªam_v¨übÀ_£ssi⁄_time
(
ngx_°ªam_£ssi⁄_t
 *
s
,

686 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

688 
u_ch¨
 *
p
;

689 
ngx_time_t
 *
ç
;

690 
ngx_m£c_öt_t
 
ms
;

692 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

693 i‡(
p
 =
NULL
) {

694  
NGX_ERROR
;

697 
ç
 = 
	`ngx_timeofday
();

699 
ms
 = (
ngx_m£c_öt_t
)

700 ((
ç
->
£c
 - 
s
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 - s->
°¨t_m£c
));

701 
ms
 = 
	`ngx_max
(ms, 0);

703 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000) -Ö;

704 
v
->
vÆid
 = 1;

705 
v
->
no_ˇchóbÀ
 = 0;

706 
v
->
nŸ_found
 = 0;

707 
v
->
d©a
 = 
p
;

709  
NGX_OK
;

710 
	}
}

713 
ngx_öt_t


714 
	$ngx_°ªam_v¨übÀ_°©us
(
ngx_°ªam_£ssi⁄_t
 *
s
,

715 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

717 
v
->
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_INT_T_LEN
);

718 i‡(
v
->
d©a
 =
NULL
) {

719  
NGX_ERROR
;

722 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%03ui", 
s
->
°©us
) - v->data;

723 
v
->
vÆid
 = 1;

724 
v
->
no_ˇchóbÀ
 = 0;

725 
v
->
nŸ_found
 = 0;

727  
NGX_OK
;

728 
	}
}

731 
ngx_öt_t


732 
	$ngx_°ªam_v¨übÀ_c⁄√˘i⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
,

733 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

735 
u_ch¨
 *
p
;

737 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

738 i‡(
p
 =
NULL
) {

739  
NGX_ERROR
;

742 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
s
->
c⁄√˘i⁄
->
numbî
) -Ö;

743 
v
->
vÆid
 = 1;

744 
v
->
no_ˇchóbÀ
 = 0;

745 
v
->
nŸ_found
 = 0;

746 
v
->
d©a
 = 
p
;

748  
NGX_OK
;

749 
	}
}

752 
ngx_öt_t


753 
	$ngx_°ªam_v¨übÀ_ngöx_vîsi⁄
(
ngx_°ªam_£ssi⁄_t
 *
s
,

754 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

756 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

757 
v
->
vÆid
 = 1;

758 
v
->
no_ˇchóbÀ
 = 0;

759 
v
->
nŸ_found
 = 0;

760 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

762  
NGX_OK
;

763 
	}
}

766 
ngx_öt_t


767 
	$ngx_°ªam_v¨übÀ_ho°«me
(
ngx_°ªam_£ssi⁄_t
 *
s
,

768 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

770 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

771 
v
->
vÆid
 = 1;

772 
v
->
no_ˇchóbÀ
 = 0;

773 
v
->
nŸ_found
 = 0;

774 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

776  
NGX_OK
;

777 
	}
}

780 
ngx_öt_t


781 
	$ngx_°ªam_v¨übÀ_pid
(
ngx_°ªam_£ssi⁄_t
 *
s
,

782 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

784 
u_ch¨
 *
p
;

786 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_INT64_LEN
);

787 i‡(
p
 =
NULL
) {

788  
NGX_ERROR
;

791 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

792 
v
->
vÆid
 = 1;

793 
v
->
no_ˇchóbÀ
 = 0;

794 
v
->
nŸ_found
 = 0;

795 
v
->
d©a
 = 
p
;

797  
NGX_OK
;

798 
	}
}

801 
ngx_öt_t


802 
	$ngx_°ªam_v¨übÀ_m£c
(
ngx_°ªam_£ssi⁄_t
 *
s
,

803 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

805 
u_ch¨
 *
p
;

806 
ngx_time_t
 *
ç
;

808 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

809 i‡(
p
 =
NULL
) {

810  
NGX_ERROR
;

813 
ç
 = 
	`ngx_timeofday
();

815 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
) -Ö;

816 
v
->
vÆid
 = 1;

817 
v
->
no_ˇchóbÀ
 = 0;

818 
v
->
nŸ_found
 = 0;

819 
v
->
d©a
 = 
p
;

821  
NGX_OK
;

822 
	}
}

825 
ngx_öt_t


826 
	$ngx_°ªam_v¨übÀ_time_iso8601
(
ngx_°ªam_£ssi⁄_t
 *
s
,

827 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

829 
u_ch¨
 *
p
;

831 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

832 i‡(
p
 =
NULL
) {

833  
NGX_ERROR
;

836 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

837 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

839 
v
->
Àn
 = 
ngx_ˇched_hâp_log_iso8601
.len;

840 
v
->
vÆid
 = 1;

841 
v
->
no_ˇchóbÀ
 = 0;

842 
v
->
nŸ_found
 = 0;

843 
v
->
d©a
 = 
p
;

845  
NGX_OK
;

846 
	}
}

849 
ngx_öt_t


850 
	$ngx_°ªam_v¨übÀ_time_loˇl
(
ngx_°ªam_£ssi⁄_t
 *
s
,

851 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

853 
u_ch¨
 *
p
;

855 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
ngx_ˇched_hâp_log_time
.
Àn
);

856 i‡(
p
 =
NULL
) {

857  
NGX_ERROR
;

860 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_time
.
d©a
,Çgx_ˇched_hâp_log_time.
Àn
);

862 
v
->
Àn
 = 
ngx_ˇched_hâp_log_time
.len;

863 
v
->
vÆid
 = 1;

864 
v
->
no_ˇchóbÀ
 = 0;

865 
v
->
nŸ_found
 = 0;

866 
v
->
d©a
 = 
p
;

868  
NGX_OK
;

869 
	}
}

872 
ngx_öt_t


873 
	$ngx_°ªam_v¨übÀ_¥Ÿocﬁ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

874 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

876 
v
->
Àn
 = 3;

877 
v
->
vÆid
 = 1;

878 
v
->
no_ˇchóbÀ
 = 0;

879 
v
->
nŸ_found
 = 0;

880 
v
->
d©a
 = (
u_ch¨
 *Ë(
s
->
c⁄√˘i⁄
->
ty≥
 =
SOCK_DGRAM
 ? "UDP" : "TCP");

882  
NGX_OK
;

883 
	}
}

887 
	$ngx_°ªam_m≠_föd
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_m≠_t
 *
m≠
,

888 
ngx_°r_t
 *
m©ch
)

890 *
vÆue
;

891 
u_ch¨
 *
low
;

892 
size_t
 
Àn
;

893 
ngx_uöt_t
 
key
;

895 
Àn
 = 
m©ch
->len;

897 i‡(
Àn
) {

898 
low
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

899 i‡(
low
 =
NULL
) {

900  
NULL
;

904 
low
 = 
NULL
;

907 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

909 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

910 i‡(
vÆue
) {

911  
vÆue
;

914 #i‡(
NGX_PCRE
)

916 i‡(
Àn
 && 
m≠
->
ƒegex
) {

917 
ngx_öt_t
 
n
;

918 
ngx_uöt_t
 
i
;

919 
ngx_°ªam_m≠_ªgex_t
 *
ªg
;

921 
ªg
 = 
m≠
->
ªgex
;

923 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

925 
n
 = 
	`ngx_°ªam_ªgex_exec
(
s
, 
ªg
[
i
].
ªgex
, 
m©ch
);

927 i‡(
n
 =
NGX_OK
) {

928  
ªg
[
i
].
vÆue
;

931 i‡(
n
 =
NGX_DECLINED
) {

937  
NULL
;

943  
NULL
;

944 
	}
}

947 #i‡(
NGX_PCRE
)

949 
ngx_öt_t


950 
	$ngx_°ªam_v¨übÀ_nŸ_found
(
ngx_°ªam_£ssi⁄_t
 *
s
,

951 
ngx_°ªam_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

953 
v
->
nŸ_found
 = 1;

954  
NGX_OK
;

955 
	}
}

958 
ngx_°ªam_ªgex_t
 *

959 
	$ngx_°ªam_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

961 
u_ch¨
 *
p
;

962 
size_t
 
size
;

963 
ngx_°r_t
 
«me
;

964 
ngx_uöt_t
 
i
, 
n
;

965 
ngx_°ªam_v¨übÀ_t
 *
v
;

966 
ngx_°ªam_ªgex_t
 *
ª
;

967 
ngx_°ªam_ªgex_v¨übÀ_t
 *
rv
;

968 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

970 
rc
->
poﬁ
 = 
cf
->pool;

972 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

973 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

974  
NULL
;

977 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_°ªam_ªgex_t
));

978 i‡(
ª
 =
NULL
) {

979  
NULL
;

982 
ª
->
ªgex
 = 
rc
->regex;

983 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

984 
ª
->
«me
 = 
rc
->
∑âîn
;

986 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

987 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

989 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

991 i‡(
n
 == 0) {

992  
ª
;

995 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_°ªam_ªgex_v¨übÀ_t
));

996 i‡(
rv
 =
NULL
) {

997  
NULL
;

1000 
ª
->
v¨übÀs
 = 
rv
;

1001 
ª
->
nv¨übÀs
 = 
n
;

1003 
size
 = 
rc
->
«me_size
;

1004 
p
 = 
rc
->
«mes
;

1006 
i
 = 0; i < 
n
; i++) {

1007 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

1009 
«me
.
d©a
 = &
p
[2];

1010 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1012 
v
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
«me
, 
NGX_STREAM_VAR_CHANGEABLE
);

1013 i‡(
v
 =
NULL
) {

1014  
NULL
;

1017 
rv
[
i
].
ödex
 = 
	`ngx_°ªam_gë_v¨übÀ_ödex
(
cf
, &
«me
);

1018 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

1019  
NULL
;

1022 
v
->
gë_h™dÀr
 = 
ngx_°ªam_v¨übÀ_nŸ_found
;

1024 
p
 +
size
;

1027  
ª
;

1028 
	}
}

1031 
ngx_öt_t


1032 
	$ngx_°ªam_ªgex_exec
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_ªgex_t
 *
ª
,

1033 
ngx_°r_t
 *
°r
)

1035 
ngx_öt_t
 
rc
, 
ödex
;

1036 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

1037 
ngx_°ªam_v¨übÀ_vÆue_t
 *
vv
;

1038 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

1040 
cmcf
 = 
	`ngx_°ªam_gë_moduÀ_maö_c⁄f
(
s
, 
ngx_°ªam_c‹e_moduÀ
);

1042 i‡(
ª
->
nˇ±uªs
) {

1043 
Àn
 = 
cmcf
->
nˇ±uªs
;

1045 i‡(
s
->
ˇ±uªs
 =
NULL
) {

1046 
s
->
ˇ±uªs
 = 
	`ngx_∑Œoc
(s->
c⁄√˘i⁄
->
poﬁ
, 
Àn
 * ());

1047 i‡(
s
->
ˇ±uªs
 =
NULL
) {

1048  
NGX_ERROR
;

1053 
Àn
 = 0;

1056 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
°r
, 
s
->
ˇ±uªs
, 
Àn
);

1058 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1059  
NGX_DECLINED
;

1062 i‡(
rc
 < 0) {

1063 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1064 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1065 
rc
, 
°r
, &
ª
->
«me
);

1066  
NGX_ERROR
;

1069 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

1071 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

1072 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

1073 
vv
 = &
s
->
v¨übÀs
[
ödex
];

1075 
vv
->
Àn
 = 
s
->
ˇ±uªs
[
n
 + 1] - s->captures[n];

1076 
vv
->
vÆid
 = 1;

1077 
vv
->
no_ˇchóbÀ
 = 0;

1078 
vv
->
nŸ_found
 = 0;

1079 
vv
->
d©a
 = &
°r
->d©a[
s
->
ˇ±uªs
[
n
]];

1081 #i‡(
NGX_DEBUG
)

1083 
ngx_°ªam_v¨übÀ_t
 *
v
;

1085 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1087 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_STREAM
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1088 "°ªamÑegex së $%VÅÿ\"%v\"", &
v
[
ödex
].
«me
, 
vv
);

1093 
s
->
nˇ±uªs
 = 
rc
 * 2;

1094 
s
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1096  
NGX_OK
;

1097 
	}
}

1102 
ngx_öt_t


1103 
	$ngx_°ªam_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

1105 
ngx_°ªam_v¨übÀ_t
 *
cv
, *
v
;

1106 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

1108 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

1110 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

1111 (
ngx_hash_keys_¨øys_t
));

1112 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

1113  
NGX_ERROR
;

1116 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

1117 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

1119 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

1120 !
NGX_OK
)

1122  
NGX_ERROR
;

1125 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
¥efix_v¨übÀs
, 
cf
->
poﬁ
, 8,

1126 (
ngx_°ªam_v¨übÀ_t
))

1127 !
NGX_OK
)

1129  
NGX_ERROR
;

1132 
cv
 = 
ngx_°ªam_c‹e_v¨übÀs
; cv->
«me
.
Àn
; cv++) {

1133 
v
 = 
	`ngx_°ªam_add_v¨übÀ
(
cf
, &
cv
->
«me
, cv->
Êags
);

1134 i‡(
v
 =
NULL
) {

1135  
NGX_ERROR
;

1138 *
v
 = *
cv
;

1141  
NGX_OK
;

1142 
	}
}

1145 
ngx_öt_t


1146 
	$ngx_°ªam_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

1148 
size_t
 
Àn
;

1149 
ngx_uöt_t
 
i
, 
n
;

1150 
ngx_hash_key_t
 *
key
;

1151 
ngx_hash_öô_t
 
hash
;

1152 
ngx_°ªam_v¨übÀ_t
 *
v
, *
av
, *
pv
;

1153 
ngx_°ªam_c‹e_maö_c⁄f_t
 *
cmcf
;

1157 
cmcf
 = 
	`ngx_°ªam_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_°ªam_c‹e_moduÀ
);

1159 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1160 
pv
 = 
cmcf
->
¥efix_v¨übÀs
.
ñts
;

1161 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

1163 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

1165 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

1167 
av
 = 
key
[
n
].
vÆue
;

1169 i‡(
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

1170 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

1173 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

1174 
v
[
i
].
d©a
 = 
av
->data;

1176 
av
->
Êags
 |
NGX_STREAM_VAR_INDEXED
;

1177 
v
[
i
].
Êags
 = 
av
->flags;

1179 
av
->
ödex
 = 
i
;

1181 i‡(
av
->
gë_h™dÀr
 =
NULL


1182 || (
av
->
Êags
 & 
NGX_STREAM_VAR_WEAK
))

1187 
√xt
;

1191 
Àn
 = 0;

1192 
av
 = 
NULL
;

1194 
n
 = 0;Ç < 
cmcf
->
¥efix_v¨übÀs
.
√…s
;Ç++) {

1195 i‡(
v
[
i
].
«me
.
Àn
 >
pv
[
n
].name.len && v[i].name.len >Üen

1196 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
pv
[
n
].«me.d©a,Öv[n].«me.
Àn
)

1199 
av
 = &
pv
[
n
];

1200 
Àn
 = 
pv
[
n
].
«me
.len;

1204 i‡(
av
) {

1205 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

1206 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

1207 
v
[
i
].
Êags
 = 
av
->flags;

1209 
√xt
;

1212 i‡(
v
[
i
].
gë_h™dÀr
 =
NULL
) {

1213 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1214 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

1215  
NGX_ERROR
;

1218 
√xt
:

1223 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

1224 
av
 = 
key
[
n
].
vÆue
;

1226 i‡(
av
->
Êags
 & 
NGX_STREAM_VAR_NOHASH
) {

1227 
key
[
n
].key.
d©a
 = 
NULL
;

1232 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

1233 
hash
.
key
 = 
ngx_hash_key
;

1234 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

1235 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

1236 
hash
.
«me
 = "variables_hash";

1237 
hash
.
poﬁ
 = 
cf
->pool;

1238 
hash
.
ãmp_poﬁ
 = 
NULL
;

1240 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

1241 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

1242 !
NGX_OK
)

1244  
NGX_ERROR
;

1247 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

1249  
NGX_OK
;

1250 
	}
}

	@src/stream/ngx_stream_variables.h

8 #i‚de‡
_NGX_STREAM_VARIABLES_H_INCLUDED_


9 
	#_NGX_STREAM_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_°ªam.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_°ªam_v¨übÀ_vÆue_t
;

19 
	#ngx_°ªam_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_°ªam_v¨übÀ_s
 
	tngx_°ªam_v¨übÀ_t
;

23 (*
	tngx_°ªam_£t_v¨übÀ_±
Ë(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

24 
	tngx_°ªam_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_°ªam_gë_v¨übÀ_±
Ë(
	tngx_°ªam_£ssi⁄_t
 *
	ts
,

26 
	tngx_°ªam_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_STREAM_VAR_CHANGEABLE
 1

	)

30 
	#NGX_STREAM_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_STREAM_VAR_INDEXED
 4

	)

32 
	#NGX_STREAM_VAR_NOHASH
 8

	)

33 
	#NGX_STREAM_VAR_WEAK
 16

	)

34 
	#NGX_STREAM_VAR_PREFIX
 32

	)

37 
	sngx_°ªam_v¨übÀ_s
 {

38 
ngx_°r_t
 
«me
;

39 
ngx_°ªam_£t_v¨übÀ_±
 
£t_h™dÀr
;

40 
ngx_°ªam_gë_v¨übÀ_±
 
gë_h™dÀr
;

41 
uöçå_t
 
d©a
;

42 
ngx_uöt_t
 
Êags
;

43 
ngx_uöt_t
 
ödex
;

46 
	#ngx_°ªam_nuŒ_v¨übÀ
 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 
	}

	)
}

49 
ngx_°ªam_v¨übÀ_t
 *
ngx_°ªam_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

50 
ngx_uöt_t
 
Êags
);

51 
ngx_öt_t
 
ngx_°ªam_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

52 
ngx_°ªam_v¨übÀ_vÆue_t
 *
ngx_°ªam_gë_ödexed_v¨übÀ
(

53 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
ödex
);

54 
ngx_°ªam_v¨übÀ_vÆue_t
 *
ngx_°ªam_gë_Êushed_v¨übÀ
(

55 
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
ödex
);

57 
ngx_°ªam_v¨übÀ_vÆue_t
 *
ngx_°ªam_gë_v¨übÀ
(
ngx_°ªam_£ssi⁄_t
 *
s
,

58 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

61 #i‡(
NGX_PCRE
)

64 
ngx_uöt_t
 
	mˇ±uª
;

65 
ngx_öt_t
 
	mödex
;

66 } 
	tngx_°ªam_ªgex_v¨übÀ_t
;

70 
ngx_ªgex_t
 *
	mªgex
;

71 
ngx_uöt_t
 
	mnˇ±uªs
;

72 
ngx_°ªam_ªgex_v¨übÀ_t
 *
	mv¨übÀs
;

73 
ngx_uöt_t
 
	mnv¨übÀs
;

74 
ngx_°r_t
 
	m«me
;

75 } 
	tngx_°ªam_ªgex_t
;

79 
ngx_°ªam_ªgex_t
 *
	mªgex
;

80 *
	mvÆue
;

81 } 
	tngx_°ªam_m≠_ªgex_t
;

84 
ngx_°ªam_ªgex_t
 *
ngx_°ªam_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

85 
ngx_ªgex_compûe_t
 *
rc
);

86 
ngx_öt_t
 
ngx_°ªam_ªgex_exec
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_ªgex_t
 *
ª
,

87 
ngx_°r_t
 *
°r
);

93 
ngx_hash_comböed_t
 
	mhash
;

94 #i‡(
NGX_PCRE
)

95 
ngx_°ªam_m≠_ªgex_t
 *
	mªgex
;

96 
ngx_uöt_t
 
	mƒegex
;

98 } 
	tngx_°ªam_m≠_t
;

101 *
ngx_°ªam_m≠_föd
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_°ªam_m≠_t
 *
m≠
,

102 
ngx_°r_t
 *
m©ch
);

105 
ngx_öt_t
 
ngx_°ªam_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

106 
ngx_öt_t
 
ngx_°ªam_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

109 
ngx_°ªam_v¨übÀ_vÆue_t
 
ngx_°ªam_v¨übÀ_nuŒ_vÆue
;

110 
ngx_°ªam_v¨übÀ_vÆue_t
 
ngx_°ªam_v¨übÀ_åue_vÆue
;

	@src/stream/ngx_stream_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_°ªam.h
>

14 
ngx_chaö_t
 *
	m‰om_up°ªam
;

15 
ngx_chaö_t
 *
	m‰om_down°ªam
;

16 } 
	tngx_°ªam_wrôe_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_°ªam_wrôe_fûãr
(
ngx_°ªam_£ssi⁄_t
 *
s
,

20 
ngx_chaö_t
 *
ö
, 
ngx_uöt_t
 
‰om_up°ªam
);

21 
ngx_öt_t
 
ngx_°ªam_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

24 
ngx_°ªam_moduÀ_t
 
	gngx_°ªam_wrôe_fûãr_moduÀ_˘x
 = {

25 
NULL
,

26 
ngx_°ªam_wrôe_fûãr_öô
,

28 
NULL
,

29 
NULL
,

31 
NULL
,

32 
NULL


36 
ngx_moduÀ_t
 
	gngx_°ªam_wrôe_fûãr_moduÀ
 = {

37 
NGX_MODULE_V1
,

38 &
ngx_°ªam_wrôe_fûãr_moduÀ_˘x
,

39 
NULL
,

40 
NGX_STREAM_MODULE
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NGX_MODULE_V1_PADDING


52 
ngx_öt_t


53 
	$ngx_°ªam_wrôe_fûãr
(
ngx_°ªam_£ssi⁄_t
 *
s
, 
ngx_chaö_t
 *
ö
,

54 
ngx_uöt_t
 
‰om_up°ªam
)

56 
off_t
 
size
;

57 
ngx_uöt_t
 
œ°
, 
Êush
, 
sync
;

58 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, **
out
, *
chaö
;

59 
ngx_c⁄√˘i⁄_t
 *
c
;

60 
ngx_°ªam_wrôe_fûãr_˘x_t
 *
˘x
;

62 
˘x
 = 
	`ngx_°ªam_gë_moduÀ_˘x
(
s
, 
ngx_°ªam_wrôe_fûãr_moduÀ
);

64 i‡(
˘x
 =
NULL
) {

65 
˘x
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

66 (
ngx_°ªam_wrôe_fûãr_˘x_t
));

67 i‡(
˘x
 =
NULL
) {

68  
NGX_ERROR
;

71 
	`ngx_°ªam_£t_˘x
(
s
, 
˘x
, 
ngx_°ªam_wrôe_fûãr_moduÀ
);

74 i‡(
‰om_up°ªam
) {

75 
c
 = 
s
->
c⁄√˘i⁄
;

76 
out
 = &
˘x
->
‰om_up°ªam
;

79 
c
 = 
s
->
up°ªam
->
≥î
.
c⁄√˘i⁄
;

80 
out
 = &
˘x
->
‰om_down°ªam
;

83 i‡(
c
->
îr‹
) {

84  
NGX_ERROR
;

87 
size
 = 0;

88 
Êush
 = 0;

89 
sync
 = 0;

90 
œ°
 = 0;

91 
Œ
 = 
out
;

95 
˛
 = *
out
; cl; c»˛->
√xt
) {

96 
Œ
 = &
˛
->
√xt
;

98 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

101 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

102 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

103 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

104 
˛
->
buf
->
fûe_pos
,

105 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

108 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

112 
˛
->
buf
->
ãmp‹¨y
,

113 
˛
->
buf
->
ªcy˛ed
,

114 
˛
->
buf
->
ö_fûe
,

115 
˛
->
buf
->
°¨t
,

116 
˛
->
buf
->
pos
,

117 
˛
->
buf
->
œ°
,

118 
˛
->
buf
->
fûe
,

119 
˛
->
buf
->
fûe_pos
,

120 
˛
->
buf
->
fûe_œ°
);

122 
	`ngx_debug_poöt
();

123  
NGX_ERROR
;

127 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

129 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

130 
Êush
 = 1;

133 i‡(
˛
->
buf
->
sync
) {

134 
sync
 = 1;

137 i‡(
˛
->
buf
->
œ°_buf
) {

138 
œ°
 = 1;

144 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

145 
˛
 = 
	`ngx_Æloc_chaö_lök
(
c
->
poﬁ
);

146 i‡(
˛
 =
NULL
) {

147  
NGX_ERROR
;

150 
˛
->
buf
 = 
 
->buf;

151 *
Œ
 = 
˛
;

152 
Œ
 = &
˛
->
√xt
;

154 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

157 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

158 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

159 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

160 
˛
->
buf
->
fûe_pos
,

161 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

164 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

165 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

168 
˛
->
buf
->
ãmp‹¨y
,

169 
˛
->
buf
->
ªcy˛ed
,

170 
˛
->
buf
->
ö_fûe
,

171 
˛
->
buf
->
°¨t
,

172 
˛
->
buf
->
pos
,

173 
˛
->
buf
->
œ°
,

174 
˛
->
buf
->
fûe
,

175 
˛
->
buf
->
fûe_pos
,

176 
˛
->
buf
->
fûe_œ°
);

178 
	`ngx_debug_poöt
();

179  
NGX_ERROR
;

183 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

185 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

186 
Êush
 = 1;

189 i‡(
˛
->
buf
->
sync
) {

190 
sync
 = 1;

193 i‡(
˛
->
buf
->
œ°_buf
) {

194 
œ°
 = 1;

198 *
Œ
 = 
NULL
;

200 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

201 "°ªam wrôêfûãr:Ü:%uòf:%uòs:%O", 
œ°
, 
Êush
, 
size
);

203 i‡(
size
 == 0

204 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)

205 && !(
œ°
 && 
c
->
√ed_œ°_buf
))

207 i‡(
œ°
 || 
Êush
 || 
sync
) {

208 
˛
 = *
out
; cl; ) {

209 
 
 = 
˛
;

210 
˛
 = cl->
√xt
;

211 
	`ngx_‰ì_chaö
(
c
->
poﬁ
, 
 
);

214 *
out
 = 
NULL
;

215 
c
->
buf„ªd
 &~
NGX_STREAM_WRITE_BUFFERED
;

217  
NGX_OK
;

220 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

223 
	`ngx_debug_poöt
();

225  
NGX_ERROR
;

228 
chaö
 = 
c
->
	`£nd_chaö
(c, *
out
, 0);

230 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_STREAM
, 
c
->
log
, 0,

231 "°ªam wrôêfûã∏%p", 
chaö
);

233 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

234 
c
->
îr‹
 = 1;

235  
NGX_ERROR
;

238 
˛
 = *
out
; c»&& c»!
chaö
; ) {

239 
 
 = 
˛
;

240 
˛
 = cl->
√xt
;

241 
	`ngx_‰ì_chaö
(
c
->
poﬁ
, 
 
);

244 *
out
 = 
chaö
;

246 i‡(
chaö
) {

247 i‡(
c
->
sh¨ed
) {

248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

250  
NGX_ERROR
;

253 
c
->
buf„ªd
 |
NGX_STREAM_WRITE_BUFFERED
;

254  
NGX_AGAIN
;

257 
c
->
buf„ªd
 &~
NGX_STREAM_WRITE_BUFFERED
;

259 i‡(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
) {

260  
NGX_AGAIN
;

263  
NGX_OK
;

264 
	}
}

267 
ngx_öt_t


268 
	$ngx_°ªam_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

270 
ngx_°ªam_t›_fûãr
 = 
ngx_°ªam_wrôe_fûãr
;

272  
NGX_OK
;

273 
	}
}

	@
1
.
0
306
9765
objs/ngx_auto_config.h
objs/ngx_auto_headers.h
objs/ngx_modules.c
src/core/nginx.c
src/core/nginx.h
src/core/ngx_array.c
src/core/ngx_array.h
src/core/ngx_buf.c
src/core/ngx_buf.h
src/core/ngx_conf_file.c
src/core/ngx_conf_file.h
src/core/ngx_config.h
src/core/ngx_connection.c
src/core/ngx_connection.h
src/core/ngx_core.h
src/core/ngx_cpuinfo.c
src/core/ngx_crc.h
src/core/ngx_crc32.c
src/core/ngx_crc32.h
src/core/ngx_crypt.c
src/core/ngx_crypt.h
src/core/ngx_cycle.c
src/core/ngx_cycle.h
src/core/ngx_file.c
src/core/ngx_file.h
src/core/ngx_hash.c
src/core/ngx_hash.h
src/core/ngx_inet.c
src/core/ngx_inet.h
src/core/ngx_list.c
src/core/ngx_list.h
src/core/ngx_log.c
src/core/ngx_log.h
src/core/ngx_md5.c
src/core/ngx_md5.h
src/core/ngx_module.c
src/core/ngx_module.h
src/core/ngx_murmurhash.c
src/core/ngx_murmurhash.h
src/core/ngx_open_file_cache.c
src/core/ngx_open_file_cache.h
src/core/ngx_output_chain.c
src/core/ngx_palloc.c
src/core/ngx_palloc.h
src/core/ngx_parse.c
src/core/ngx_parse.h
src/core/ngx_parse_time.c
src/core/ngx_parse_time.h
src/core/ngx_proxy_protocol.c
src/core/ngx_proxy_protocol.h
src/core/ngx_queue.c
src/core/ngx_queue.h
src/core/ngx_radix_tree.c
src/core/ngx_radix_tree.h
src/core/ngx_rbtree.c
src/core/ngx_rbtree.h
src/core/ngx_regex.c
src/core/ngx_regex.h
src/core/ngx_resolver.c
src/core/ngx_resolver.h
src/core/ngx_rwlock.c
src/core/ngx_rwlock.h
src/core/ngx_sha1.c
src/core/ngx_sha1.h
src/core/ngx_shmtx.c
src/core/ngx_shmtx.h
src/core/ngx_slab.c
src/core/ngx_slab.h
src/core/ngx_spinlock.c
src/core/ngx_string.c
src/core/ngx_string.h
src/core/ngx_syslog.c
src/core/ngx_syslog.h
src/core/ngx_thread_pool.c
src/core/ngx_thread_pool.h
src/core/ngx_times.c
src/core/ngx_times.h
src/event/modules/ngx_devpoll_module.c
src/event/modules/ngx_epoll_module.c
src/event/modules/ngx_eventport_module.c
src/event/modules/ngx_kqueue_module.c
src/event/modules/ngx_poll_module.c
src/event/modules/ngx_select_module.c
src/event/modules/ngx_win32_select_module.c
src/event/ngx_event.c
src/event/ngx_event.h
src/event/ngx_event_accept.c
src/event/ngx_event_connect.c
src/event/ngx_event_connect.h
src/event/ngx_event_openssl.c
src/event/ngx_event_openssl.h
src/event/ngx_event_openssl_stapling.c
src/event/ngx_event_pipe.c
src/event/ngx_event_pipe.h
src/event/ngx_event_posted.c
src/event/ngx_event_posted.h
src/event/ngx_event_timer.c
src/event/ngx_event_timer.h
src/event/ngx_event_udp.c
src/http/modules/ngx_http_access_module.c
src/http/modules/ngx_http_addition_filter_module.c
src/http/modules/ngx_http_auth_basic_module.c
src/http/modules/ngx_http_auth_request_module.c
src/http/modules/ngx_http_autoindex_module.c
src/http/modules/ngx_http_browser_module.c
src/http/modules/ngx_http_charset_filter_module.c
src/http/modules/ngx_http_chunked_filter_module.c
src/http/modules/ngx_http_dav_module.c
src/http/modules/ngx_http_degradation_module.c
src/http/modules/ngx_http_empty_gif_module.c
src/http/modules/ngx_http_fastcgi_module.c
src/http/modules/ngx_http_flv_module.c
src/http/modules/ngx_http_geo_module.c
src/http/modules/ngx_http_geoip_module.c
src/http/modules/ngx_http_grpc_module.c
src/http/modules/ngx_http_gunzip_filter_module.c
src/http/modules/ngx_http_gzip_filter_module.c
src/http/modules/ngx_http_gzip_static_module.c
src/http/modules/ngx_http_headers_filter_module.c
src/http/modules/ngx_http_image_filter_module.c
src/http/modules/ngx_http_index_module.c
src/http/modules/ngx_http_limit_conn_module.c
src/http/modules/ngx_http_limit_req_module.c
src/http/modules/ngx_http_log_module.c
src/http/modules/ngx_http_map_module.c
src/http/modules/ngx_http_memcached_module.c
src/http/modules/ngx_http_mirror_module.c
src/http/modules/ngx_http_mp4_module.c
src/http/modules/ngx_http_not_modified_filter_module.c
src/http/modules/ngx_http_proxy_module.c
src/http/modules/ngx_http_random_index_module.c
src/http/modules/ngx_http_range_filter_module.c
src/http/modules/ngx_http_realip_module.c
src/http/modules/ngx_http_referer_module.c
src/http/modules/ngx_http_rewrite_module.c
src/http/modules/ngx_http_scgi_module.c
src/http/modules/ngx_http_secure_link_module.c
src/http/modules/ngx_http_slice_filter_module.c
src/http/modules/ngx_http_split_clients_module.c
src/http/modules/ngx_http_ssi_filter_module.c
src/http/modules/ngx_http_ssi_filter_module.h
src/http/modules/ngx_http_ssl_module.c
src/http/modules/ngx_http_ssl_module.h
src/http/modules/ngx_http_static_module.c
src/http/modules/ngx_http_stub_status_module.c
src/http/modules/ngx_http_sub_filter_module.c
src/http/modules/ngx_http_try_files_module.c
src/http/modules/ngx_http_upstream_hash_module.c
src/http/modules/ngx_http_upstream_ip_hash_module.c
src/http/modules/ngx_http_upstream_keepalive_module.c
src/http/modules/ngx_http_upstream_least_conn_module.c
src/http/modules/ngx_http_upstream_random_module.c
src/http/modules/ngx_http_upstream_zone_module.c
src/http/modules/ngx_http_userid_filter_module.c
src/http/modules/ngx_http_uwsgi_module.c
src/http/modules/ngx_http_xslt_filter_module.c
src/http/modules/perl/ngx_http_perl_module.c
src/http/modules/perl/ngx_http_perl_module.h
src/http/ngx_http.c
src/http/ngx_http.h
src/http/ngx_http_cache.h
src/http/ngx_http_config.h
src/http/ngx_http_copy_filter_module.c
src/http/ngx_http_core_module.c
src/http/ngx_http_core_module.h
src/http/ngx_http_file_cache.c
src/http/ngx_http_header_filter_module.c
src/http/ngx_http_parse.c
src/http/ngx_http_postpone_filter_module.c
src/http/ngx_http_request.c
src/http/ngx_http_request.h
src/http/ngx_http_request_body.c
src/http/ngx_http_script.c
src/http/ngx_http_script.h
src/http/ngx_http_special_response.c
src/http/ngx_http_upstream.c
src/http/ngx_http_upstream.h
src/http/ngx_http_upstream_round_robin.c
src/http/ngx_http_upstream_round_robin.h
src/http/ngx_http_variables.c
src/http/ngx_http_variables.h
src/http/ngx_http_write_filter_module.c
src/http/v2/ngx_http_v2.c
src/http/v2/ngx_http_v2.h
src/http/v2/ngx_http_v2_encode.c
src/http/v2/ngx_http_v2_filter_module.c
src/http/v2/ngx_http_v2_huff_decode.c
src/http/v2/ngx_http_v2_huff_encode.c
src/http/v2/ngx_http_v2_module.c
src/http/v2/ngx_http_v2_module.h
src/http/v2/ngx_http_v2_table.c
src/mail/ngx_mail.c
src/mail/ngx_mail.h
src/mail/ngx_mail_auth_http_module.c
src/mail/ngx_mail_core_module.c
src/mail/ngx_mail_handler.c
src/mail/ngx_mail_imap_handler.c
src/mail/ngx_mail_imap_module.c
src/mail/ngx_mail_imap_module.h
src/mail/ngx_mail_parse.c
src/mail/ngx_mail_pop3_handler.c
src/mail/ngx_mail_pop3_module.c
src/mail/ngx_mail_pop3_module.h
src/mail/ngx_mail_proxy_module.c
src/mail/ngx_mail_smtp_handler.c
src/mail/ngx_mail_smtp_module.c
src/mail/ngx_mail_smtp_module.h
src/mail/ngx_mail_ssl_module.c
src/mail/ngx_mail_ssl_module.h
src/misc/ngx_cpp_test_module.cpp
src/misc/ngx_google_perftools_module.c
src/os/unix/ngx_alloc.c
src/os/unix/ngx_alloc.h
src/os/unix/ngx_atomic.h
src/os/unix/ngx_channel.c
src/os/unix/ngx_channel.h
src/os/unix/ngx_daemon.c
src/os/unix/ngx_darwin.h
src/os/unix/ngx_darwin_config.h
src/os/unix/ngx_darwin_init.c
src/os/unix/ngx_darwin_sendfile_chain.c
src/os/unix/ngx_dlopen.c
src/os/unix/ngx_dlopen.h
src/os/unix/ngx_errno.c
src/os/unix/ngx_errno.h
src/os/unix/ngx_file_aio_read.c
src/os/unix/ngx_files.c
src/os/unix/ngx_files.h
src/os/unix/ngx_freebsd.h
src/os/unix/ngx_freebsd_config.h
src/os/unix/ngx_freebsd_init.c
src/os/unix/ngx_freebsd_sendfile_chain.c
src/os/unix/ngx_gcc_atomic_amd64.h
src/os/unix/ngx_gcc_atomic_ppc.h
src/os/unix/ngx_gcc_atomic_sparc64.h
src/os/unix/ngx_gcc_atomic_x86.h
src/os/unix/ngx_linux.h
src/os/unix/ngx_linux_aio_read.c
src/os/unix/ngx_linux_config.h
src/os/unix/ngx_linux_init.c
src/os/unix/ngx_linux_sendfile_chain.c
src/os/unix/ngx_os.h
src/os/unix/ngx_posix_config.h
src/os/unix/ngx_posix_init.c
src/os/unix/ngx_process.c
src/os/unix/ngx_process.h
src/os/unix/ngx_process_cycle.c
src/os/unix/ngx_process_cycle.h
src/os/unix/ngx_readv_chain.c
src/os/unix/ngx_recv.c
src/os/unix/ngx_send.c
src/os/unix/ngx_setaffinity.c
src/os/unix/ngx_setaffinity.h
src/os/unix/ngx_setproctitle.c
src/os/unix/ngx_setproctitle.h
src/os/unix/ngx_shmem.c
src/os/unix/ngx_shmem.h
src/os/unix/ngx_socket.c
src/os/unix/ngx_socket.h
src/os/unix/ngx_solaris.h
src/os/unix/ngx_solaris_config.h
src/os/unix/ngx_solaris_init.c
src/os/unix/ngx_solaris_sendfilev_chain.c
src/os/unix/ngx_sunpro_atomic_sparc64.h
src/os/unix/ngx_thread.h
src/os/unix/ngx_thread_cond.c
src/os/unix/ngx_thread_id.c
src/os/unix/ngx_thread_mutex.c
src/os/unix/ngx_time.c
src/os/unix/ngx_time.h
src/os/unix/ngx_udp_recv.c
src/os/unix/ngx_udp_send.c
src/os/unix/ngx_udp_sendmsg_chain.c
src/os/unix/ngx_user.c
src/os/unix/ngx_user.h
src/os/unix/ngx_writev_chain.c
src/stream/ngx_stream.c
src/stream/ngx_stream.h
src/stream/ngx_stream_access_module.c
src/stream/ngx_stream_core_module.c
src/stream/ngx_stream_geo_module.c
src/stream/ngx_stream_geoip_module.c
src/stream/ngx_stream_handler.c
src/stream/ngx_stream_limit_conn_module.c
src/stream/ngx_stream_log_module.c
src/stream/ngx_stream_map_module.c
src/stream/ngx_stream_proxy_module.c
src/stream/ngx_stream_realip_module.c
src/stream/ngx_stream_return_module.c
src/stream/ngx_stream_script.c
src/stream/ngx_stream_script.h
src/stream/ngx_stream_split_clients_module.c
src/stream/ngx_stream_ssl_module.c
src/stream/ngx_stream_ssl_module.h
src/stream/ngx_stream_ssl_preread_module.c
src/stream/ngx_stream_upstream.c
src/stream/ngx_stream_upstream.h
src/stream/ngx_stream_upstream_hash_module.c
src/stream/ngx_stream_upstream_least_conn_module.c
src/stream/ngx_stream_upstream_random_module.c
src/stream/ngx_stream_upstream_round_robin.c
src/stream/ngx_stream_upstream_round_robin.h
src/stream/ngx_stream_upstream_zone_module.c
src/stream/ngx_stream_variables.c
src/stream/ngx_stream_variables.h
src/stream/ngx_stream_write_filter_module.c
